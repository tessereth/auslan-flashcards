{"version":3,"sources":["webpack:///./src/templates/flashcards.js","webpack:///./src/components/title-bar.js","webpack:///./src/components/video.js","webpack:///./src/components/flashcard.js","webpack:///./src/components/flashcard-title-bar.js","webpack:///./src/components/flashcard-scene.js"],"names":["Flashcards","_ref","data","pageContext","location","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_flashcard_scene__WEBPACK_IMPORTED_MODULE_2__","slug","guess","deck","decksYaml","search","query","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","TitleBar","children","className","mediaPath","mediaRef","startsWith","slice","Video","props","_this","_React$PureComponent","call","this","vjsDefaultOptions","playbackRates","preload","loop","controls","muted","videoRef","React","createRef","componentDidMount","player","videojs","current","componentWillUnmount","dispose","componentDidUpdate","prevProps","prevState","revealed","play","pause","render","_this$props","word","other","_babel_runtime_helpers_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1___default","react__WEBPACK_IMPORTED_MODULE_4___default","Object","assign","id","poster","video","ref","autoPlay","src","type","href","target","rel","PureComponent","defaultProps","WordCard","react_default","classnames","flashcard--hidden","title","VideoCard","_ref2","HiddenWordCard","_ref3","reveal","onClick","HiddenVideoCard","_ref4","Flashcard","_ref5","wordFirst","flashcard_WordCard","flashcard_VideoCard","Fragment","flashcard_HiddenVideoCard","flashcard_HiddenWordCard","propTypes","PropTypes","shape","string","isRequired","bool","func","FlashcardTitleBar","custom","otherGuess","title_bar","name","gatsby_browser_entry","to","FlashcardScene","state","e","preventDefault","setState","unreveal","idxUrl","idx","gotoIdx","navigate","linkToIdx","text","objectWithoutPropertiesLoose_default","words","length","disabled","right","isLast","left","isFirst","onKeyDownNative","key","URLSearchParams","urlParams","parseInt","get","seed","undefined","_seed","params","has","Math","floor","random","shuffle","set","toString","document","addEventListener","removeEventListener","_this$props2","layout","flashcard_title_bar","flashcard","object"],"mappings":"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","file":"component---src-templates-flashcards-js-ceea356334f99d75f1a3.js","sourcesContent":["import React from 'react'\nimport { graphql } from 'gatsby'\n\nimport FlashcardScene from '../components/flashcard-scene'\n\nconst Flashcards = ({ data, pageContext, location }) => {\n  return (\n    <FlashcardScene\n      slug={pageContext.slug}\n      guess={pageContext.guess}\n      deck={data.decksYaml}\n      search={location.search}\n    />\n  )\n}\n\nexport default Flashcards\n\nexport const query = graphql`\n  query($slug: String!) {\n    decksYaml(fields: { slug: { eq: $slug } }) {\n      name\n      words {\n        id\n        title\n        video\n      }\n    }\n  }\n`\n","import React from 'react'\n\nconst TitleBar = ({ children }) => {\n  return (\n    <section className=\"hero is-primary is-small\">\n      <div className=\"hero-body\">\n        <div className=\"container\">{children}</div>\n      </div>\n    </section>\n  )\n}\n\nexport default TitleBar\n","import React from 'react'\nimport videojs from 'video.js'\n\nconst mediaPath = mediaRef => {\n  // If it's already a url, just return it\n  if (mediaRef.startsWith('http')) {\n    return mediaRef\n  }\n  let base\n  if (mediaRef.slice(-2) === '_1') {\n    base = 'http://media.auslan.org.au/mp4video'\n  } else {\n    base = 'http://media.auslan.org.au/auslan'\n  }\n  return `${base}/${mediaRef.slice(0, 2)}/${mediaRef}`\n}\n\nclass Video extends React.PureComponent {\n  vjsDefaultOptions = {\n    playbackRates: [0.25, 0.5, 1.0, 1.5],\n    preload: 'auto',\n    loop: true,\n    controls: true,\n    muted: true,\n  }\n\n  constructor(props) {\n    super(props)\n    this.videoRef = React.createRef()\n  }\n\n  componentDidMount() {\n    this.player = videojs(this.videoRef.current, this.vjsDefaultOptions)\n  }\n\n  componentWillUnmount() {\n    if (this.player) {\n      this.player.dispose()\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.revealed !== this.props.revealed) {\n      if (this.props.revealed) {\n        this.player.play()\n      } else {\n        this.player.pause()\n      }\n    }\n  }\n\n  render() {\n    const { word, revealed, ...other } = this.props\n    return (\n      <video\n        id={`flashcard-video-${word.id}`}\n        className=\"video-js image is-4by3 vjs-big-play-centered\"\n        poster={`${mediaPath(word.video)}.jpg`}\n        ref={this.videoRef}\n        autoPlay={revealed}\n        {...other}\n      >\n        <source src={`${mediaPath(word.video)}.mp4`} type=\"video/mp4\" />\n        <p className=\"vjs-no-js\">\n          To view this video please enable JavaScript, and consider upgrading to\n          a web browser that\n          <a\n            href=\"https://videojs.com/html5-video-support/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            supports HTML5 video\n          </a>\n        </p>\n      </video>\n    )\n  }\n}\n\nVideo.defaultProps = {\n  revealed: true,\n}\n\nexport default Video\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport Video from './video'\n\nconst WordCard = ({ word, revealed }) => (\n  <div className={classnames('flashcard', { 'flashcard--hidden': !revealed })}>\n    <div className=\"flashcard__content flashcard__content--word\">\n      <h1 className=\"title\">{word.title || word.id}</h1>\n    </div>\n  </div>\n)\n\nconst VideoCard = ({ word, revealed }) => (\n  <div className={classnames('flashcard', { 'flashcard--hidden': !revealed })}>\n    <div className=\"flashcard__content\">\n      <Video word={word} revealed={revealed} />\n    </div>\n  </div>\n)\n\nconst HiddenWordCard = ({ reveal }) => (\n  <button className=\"flashcard flashcard--reveal\" onClick={reveal}>\n    <div className=\"flashcard__content\">\n      <div className=\"af-reveal--word\">\n        <p className=\"subtitle\">reveal</p>\n      </div>\n    </div>\n  </button>\n)\n\nconst HiddenVideoCard = ({ reveal }) => (\n  <button className=\"flashcard flashcard--reveal\" onClick={reveal}>\n    <div className=\"flashcard__content\">\n      <div className=\"image is-4by3\">\n        <div className=\"af-reveal--video\">\n          <p className=\"subtitle\">reveal</p>\n        </div>\n      </div>\n    </div>\n  </button>\n)\n\nconst Flashcard = ({ word, wordFirst, revealed, reveal }) => {\n  return (\n    <div className=\"columns\">\n      <div className=\"column is-centered\">\n        {wordFirst ? (\n          <WordCard word={word} revealed />\n        ) : (\n          <VideoCard word={word} revealed />\n        )}\n      </div>\n      <div className=\"column is-centered\">\n        {wordFirst ? (\n          <>\n            <VideoCard word={word} revealed={revealed} />\n            {!revealed && <HiddenVideoCard reveal={reveal} />}\n          </>\n        ) : (\n          <>\n            <WordCard word={word} revealed={revealed} />\n            {!revealed && <HiddenWordCard reveal={reveal} />}\n          </>\n        )}\n      </div>\n    </div>\n  )\n}\n\nFlashcard.propTypes = {\n  word: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string,\n    video: PropTypes.string.isRequired,\n  }).isRequired,\n  wordFirst: PropTypes.bool,\n  revealed: PropTypes.bool,\n  reveal: PropTypes.func.isRequired,\n}\n\nexport default Flashcard\n","import React from 'react'\nimport TitleBar from './title-bar'\nimport { Link } from 'gatsby'\n\nconst FlashcardTitleBar = ({ deck, slug, guess, custom, search }) => {\n  const otherGuess = guess === 'word' ? 'sign' : 'word'\n\n  return (\n    <TitleBar>\n      <div className=\"level\">\n        <div className=\"level-left\">\n          <h1 className=\"title\">{deck.name}</h1>\n        </div>\n        <div className=\"level-right\">\n          <div className=\"buttons\">\n            <Link\n              to={`/${slug}/${otherGuess}?${search}`}\n              className=\"button is-primary is-outlined is-inverted\"\n            >\n              {`Guess ${otherGuess}`}\n            </Link>\n            {custom ? (\n              <Link\n                to={`/build-custom?${search}`}\n                className=\"button is-primary is-outlined is-inverted\"\n              >\n                Edit\n              </Link>\n            ) : (\n              <Link\n                to={`/${slug}`}\n                className=\"button is-primary is-outlined is-inverted\"\n              >\n                View all\n              </Link>\n            )}\n          </div>\n        </div>\n      </div>\n    </TitleBar>\n  )\n}\n\nexport default FlashcardTitleBar\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link, navigate } from 'gatsby'\nimport { shuffle } from 'shuffle-seed'\n\nimport Layout from '../components/layout'\nimport Flashcard from '../components/flashcard'\nimport FlashcardTitleBar from './flashcard-title-bar'\n\nclass FlashcardScene extends React.PureComponent {\n  state = { revealed: false }\n\n  reveal = e => {\n    if (e) e.preventDefault()\n    this.setState({\n      revealed: true,\n    })\n  }\n\n  unreveal = e => {\n    if (e) e.preventDefault()\n    this.setState({\n      revealed: false,\n    })\n  }\n\n  idxUrl = idx => {\n    const { slug, guess } = this.props\n    return `/${slug}/${guess}?${this.search(idx)}`\n  }\n\n  gotoIdx = idx => {\n    this.unreveal()\n    navigate(this.idxUrl(idx))\n  }\n\n  linkToIdx = ({ idx, text, ...other }) => {\n    if (idx < 0 || idx >= this.props.deck.words.length) {\n      return (\n        <button disabled {...other}>\n          {text}\n        </button>\n      )\n    } else {\n      return (\n        <Link\n          to={this.idxUrl(idx)}\n          onClick={() => this.gotoIdx(idx)}\n          {...other}\n        >\n          {text}\n        </Link>\n      )\n    }\n  }\n\n  right = e => {\n    if (this.isLast() && this.state.revealed) {\n      // do nothing\n    } else if (this.state.revealed) {\n      this.gotoIdx(this.idx() + 1)\n    } else {\n      this.reveal(e)\n    }\n  }\n\n  left = e => {\n    if (this.isFirst() && !this.state.revealed) {\n      // do nothing\n    } else if (this.state.revealed) {\n      this.unreveal(e)\n    } else {\n      this.gotoIdx(this.idx() - 1)\n    }\n  }\n\n  isFirst = () => this.idx() === 0\n\n  isLast = () => this.idx() === this.props.deck.words.length - 1\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.onKeyDownNative)\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.onKeyDownNative)\n  }\n\n  onKeyDownNative = e => {\n    if (e.key === 'ArrowLeft') {\n      this.left()\n    } else if (e.key === 'ArrowRight') {\n      this.right()\n    }\n  }\n\n  idx = () => {\n    if (typeof URLSearchParams === 'undefined') {\n      return 0\n    }\n    const urlParams = new URLSearchParams(this.props.search)\n    const idx = parseInt(urlParams.get('idx') || '0')\n    if (idx < 0) {\n      return 0\n    } else if (idx >= this.props.deck.words.length) {\n      return this.props.deck.words.length - 1\n    } else {\n      return idx\n    }\n  }\n\n  seed = () => {\n    if (this._seed === undefined) {\n      if (typeof URLSearchParams === 'undefined') {\n        this._seed = 0\n        return this._seed\n      }\n      let params = new URLSearchParams(this.props.search)\n      if (params.has('seed')) {\n        this._seed = params.get('seed')\n      } else {\n        this._seed = Math.floor(Math.random() * 10000)\n      }\n    }\n    return this._seed\n  }\n\n  words = () => {\n    return shuffle(this.props.deck.words, this.seed())\n  }\n\n  search = idx => {\n    if (typeof URLSearchParams === 'undefined') {\n      return ''\n    }\n    let params = new URLSearchParams(this.props.search)\n    params.set('idx', idx)\n    params.set('seed', this.seed())\n    return params.toString()\n  }\n\n  render() {\n    const { slug, guess } = this.props\n    const idx = this.idx()\n    const word = this.words()[idx]\n    return (\n      <Layout>\n        <FlashcardTitleBar {...this.props} search={this.search(0)} />\n        <section className=\"section\">\n          <div className=\"container\">\n            <Flashcard\n              key={word.id}\n              word={word}\n              wordFirst={guess === 'sign'}\n              reveal={this.reveal}\n              revealed={this.state.revealed}\n            />\n            <div className=\"level is-mobile\">\n              <div className=\"level-left\">\n                {this.linkToIdx({\n                  idx: idx - 1,\n                  text: 'Previous',\n                  className: 'button',\n                })}\n              </div>\n              <div className=\"level-right\">\n                {this.isLast() ? (\n                  <Link className=\"button is-success\" to={`/${slug}`}>\n                    Done!\n                  </Link>\n                ) : (\n                  this.linkToIdx({\n                    idx: idx + 1,\n                    text: 'Next',\n                    className: 'button is-primary',\n                  })\n                )}\n              </div>\n            </div>\n          </div>\n        </section>\n      </Layout>\n    )\n  }\n}\n\nFlashcardScene.propTypes = {\n  slug: PropTypes.string.isRequired,\n  guess: PropTypes.string.isRequired,\n  deck: PropTypes.object.isRequired,\n  search: PropTypes.string.isRequired,\n}\n\nexport default FlashcardScene\n"],"sourceRoot":""}