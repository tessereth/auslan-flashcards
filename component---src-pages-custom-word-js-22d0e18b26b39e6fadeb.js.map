{"version":3,"sources":["webpack:///./src/pages/custom/word.js","webpack:///./src/components/title-bar.js","webpack:///./src/components/video.js","webpack:///./src/components/flashcard.js","webpack:///./src/components/flashcard-scene.js"],"names":["CustomWord","props","urlParams","URLSearchParams","location","search","deck","JSON","parse","atob","get","words","forEach","word","index","id","String","react__WEBPACK_IMPORTED_MODULE_3___default","a","createElement","_components_flashcard_scene__WEBPACK_IMPORTED_MODULE_4__","slug","guess","custom","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","TitleBar","_ref","children","className","mediaPath","mediaRef","startsWith","slice","Video","_this","_React$PureComponent","call","this","vjsDefaultOptions","playbackRates","preload","loop","controls","muted","videoRef","React","createRef","componentDidMount","player","videojs","current","componentWillUnmount","dispose","componentDidUpdate","prevProps","prevState","revealed","play","pause","render","_this$props","other","_babel_runtime_helpers_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1___default","react__WEBPACK_IMPORTED_MODULE_4___default","Object","assign","poster","video","ref","autoPlay","src","type","href","target","rel","PureComponent","defaultProps","WordCard","react_default","classnames","flashcard--hidden","title","VideoCard","_ref2","HiddenCard","_ref3","reveal","onClick","Flashcard","_ref4","wordFirst","flashcard_WordCard","flashcard_VideoCard","flashcard_HiddenCard","propTypes","PropTypes","shape","string","isRequired","bool","func","FlashcardScene","state","e","preventDefault","setState","unreveal","idxUrl","idx","gotoIdx","navigate","linkToIdx","text","objectWithoutPropertiesLoose_default","length","disabled","gatsby_browser_entry","to","right","isLast","left","isFirst","onKeyDownNative","key","parseInt","seed","undefined","_seed","params","has","Math","floor","random","shuffle","set","toString","document","addEventListener","removeEventListener","_this$props2","layout","title_bar","name","flashcard","object"],"mappings":"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","file":"component---src-pages-custom-word-js-22d0e18b26b39e6fadeb.js","sourcesContent":["import React from 'react'\nimport FlashcardScene from '../../components/flashcard-scene'\n\nconst CustomWord = props => {\n  const urlParams = new URLSearchParams(props.location.search)\n  const deck = JSON.parse(atob(urlParams.get('deck')))\n  deck.words.forEach((word, index) => {\n    word.id = String(index)\n  })\n  return (\n    <FlashcardScene\n      slug=\"custom\"\n      guess=\"word\"\n      deck={deck}\n      search={props.location.search}\n      custom\n    />\n  )\n}\n\nexport default CustomWord\n","import React from 'react'\n\nconst TitleBar = ({ children }) => {\n  return (\n    <section className=\"hero is-primary is-small\">\n      <div className=\"hero-body\">\n        <div className=\"container\">{children}</div>\n      </div>\n    </section>\n  )\n}\n\nexport default TitleBar\n","import React from 'react'\nimport videojs from 'video.js'\n\nconst mediaPath = mediaRef => {\n  // If it's already a url, just return it\n  if (mediaRef.startsWith('http')) {\n    return mediaRef\n  }\n  let base\n  if (mediaRef.slice(-2) === '_1') {\n    base = 'http://media.auslan.org.au/mp4video'\n  } else {\n    base = 'http://media.auslan.org.au/auslan'\n  }\n  return `${base}/${mediaRef.slice(0, 2)}/${mediaRef}`\n}\n\nclass Video extends React.PureComponent {\n  vjsDefaultOptions = {\n    playbackRates: [0.25, 0.5, 1.0, 1.5],\n    preload: 'auto',\n    loop: true,\n    controls: true,\n    muted: true,\n  }\n\n  constructor(props) {\n    super(props)\n    this.videoRef = React.createRef()\n  }\n\n  componentDidMount() {\n    this.player = videojs(this.videoRef.current, this.vjsDefaultOptions)\n  }\n\n  componentWillUnmount() {\n    if (this.player) {\n      this.player.dispose()\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.revealed !== this.props.revealed) {\n      if (this.props.revealed) {\n        this.player.play()\n      } else {\n        this.player.pause()\n      }\n    }\n  }\n\n  render() {\n    const { word, revealed, ...other } = this.props\n    return (\n      <video\n        id={`flashcard-video-${word.id}`}\n        className=\"video-js vjs-fill\"\n        poster={`${mediaPath(word.video)}.jpg`}\n        ref={this.videoRef}\n        autoPlay={revealed}\n        {...other}\n      >\n        <source src={`${mediaPath(word.video)}.mp4`} type=\"video/mp4\" />\n        <p className=\"vjs-no-js\">\n          To view this video please enable JavaScript, and consider upgrading to\n          a web browser that\n          <a\n            href=\"https://videojs.com/html5-video-support/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            supports HTML5 video\n          </a>\n        </p>\n      </video>\n    )\n  }\n}\n\nVideo.defaultProps = {\n  revealed: true,\n}\n\nexport default Video\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport Video from './video'\n\nconst WordCard = ({ word, revealed }) => (\n  <div className={classnames('flashcard', { 'flashcard--hidden': !revealed })}>\n    <div className=\"flashcard__content flashcard__content--word\">\n      <h1 className=\"title\">{word.title || word.id}</h1>\n    </div>\n  </div>\n)\n\nconst VideoCard = ({ word, revealed }) => (\n  <div className={classnames('flashcard', { 'flashcard--hidden': !revealed })}>\n    <div className=\"flashcard__content flashcard__content--video\">\n      <Video word={word} revealed={revealed} />\n    </div>\n  </div>\n)\n\nconst HiddenCard = ({ reveal }) => (\n  <button className=\"flashcard flashcard--reveal\" onClick={reveal}>\n    <div className=\"flashcard__content flashcard__content--reveal\">\n      <p className=\"subtitle\">Reveal</p>\n    </div>\n  </button>\n)\n\nconst Flashcard = ({ word, wordFirst, revealed, reveal }) => {\n  return (\n    <div className=\"columns\">\n      <div className=\"column is-centered\">\n        {wordFirst ? (\n          <WordCard word={word} revealed />\n        ) : (\n          <VideoCard word={word} revealed />\n        )}\n      </div>\n      <div className=\"column is-centered\">\n        {wordFirst ? (\n          <VideoCard word={word} revealed={revealed} />\n        ) : (\n          <WordCard word={word} revealed={revealed} />\n        )}\n        {!revealed && <HiddenCard reveal={reveal} />}\n      </div>\n    </div>\n  )\n}\n\nFlashcard.propTypes = {\n  word: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string,\n    video: PropTypes.string.isRequired,\n  }).isRequired,\n  wordFirst: PropTypes.bool,\n  revealed: PropTypes.bool,\n  reveal: PropTypes.func.isRequired,\n}\n\nexport default Flashcard\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link, navigate } from 'gatsby'\nimport { shuffle } from 'shuffle-seed'\n\nimport Layout from '../components/layout'\nimport Flashcard from '../components/flashcard'\nimport TitleBar from '../components/title-bar'\n\nclass FlashcardScene extends React.PureComponent {\n  state = { revealed: false }\n\n  reveal = e => {\n    if (e) e.preventDefault()\n    this.setState({\n      revealed: true,\n    })\n  }\n\n  unreveal = e => {\n    if (e) e.preventDefault()\n    this.setState({\n      revealed: false,\n    })\n  }\n\n  idxUrl = idx => {\n    const { slug, guess } = this.props\n    return `/${slug}/${guess}?${this.search(idx)}`\n  }\n\n  gotoIdx = idx => {\n    this.unreveal()\n    navigate(this.idxUrl(idx))\n  }\n\n  linkToIdx = ({ idx, text, ...other }) => {\n    if (idx < 0 || idx >= this.props.deck.words.length) {\n      return (\n        <button disabled {...other}>\n          {text}\n        </button>\n      )\n    } else {\n      return (\n        <Link\n          to={this.idxUrl(idx)}\n          onClick={() => this.gotoIdx(idx)}\n          {...other}\n        >\n          {text}\n        </Link>\n      )\n    }\n  }\n\n  right = e => {\n    if (this.isLast() && this.state.revealed) {\n      // do nothing\n    } else if (this.state.revealed) {\n      this.gotoIdx(this.idx() + 1)\n    } else {\n      this.reveal(e)\n    }\n  }\n\n  left = e => {\n    if (this.isFirst() && !this.state.revealed) {\n      // do nothing\n    } else if (this.state.revealed) {\n      this.unreveal(e)\n    } else {\n      this.gotoIdx(this.idx() - 1)\n    }\n  }\n\n  isFirst = () => this.idx() === 0\n\n  isLast = () => this.idx() === this.props.deck.words.length - 1\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.onKeyDownNative)\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.onKeyDownNative)\n  }\n\n  onKeyDownNative = e => {\n    if (e.key === 'ArrowLeft') {\n      this.left()\n    } else if (e.key === 'ArrowRight') {\n      this.right()\n    }\n  }\n\n  idx = () => {\n    const urlParams = new URLSearchParams(this.props.search)\n    const idx = parseInt(urlParams.get('idx') || '0')\n    if (idx < 0) {\n      return 0\n    } else if (idx >= this.props.deck.words.length) {\n      return this.props.deck.words.length - 1\n    } else {\n      return idx\n    }\n  }\n\n  seed = () => {\n    if (this._seed === undefined) {\n      let params = new URLSearchParams(this.props.search)\n      if (params.has('seed')) {\n        this._seed = params.get('seed')\n      } else {\n        this._seed = Math.floor(Math.random() * 10000)\n      }\n    }\n    return this._seed\n  }\n\n  words = () => {\n    return shuffle(this.props.deck.words, this.seed())\n  }\n\n  search = idx => {\n    let params = new URLSearchParams(this.props.search)\n    params.set('idx', idx)\n    params.set('seed', this.seed())\n    return params.toString()\n  }\n\n  render() {\n    const { deck, slug, guess, custom } = this.props\n    const idx = this.idx()\n    const word = this.words()[idx]\n    return (\n      <Layout>\n        <TitleBar>\n          <div className=\"level\">\n            <div className=\"level-left\">\n              <h1 className=\"title\">{deck.name}</h1>\n            </div>\n            {custom && (\n              <div className=\"level-right\">\n                <Link\n                  to={`/build-custom?${this.search(0)}`}\n                  className=\"button is-primary is-outlined is-inverted\"\n                >\n                  Edit\n                </Link>\n              </div>\n            )}\n          </div>\n        </TitleBar>\n        <section className=\"section\">\n          <div className=\"container\">\n            <Flashcard\n              key={word.id}\n              word={word}\n              wordFirst={guess === 'sign'}\n              reveal={this.reveal}\n              revealed={this.state.revealed}\n            />\n            <div className=\"level is-mobile\">\n              <div className=\"level-left\">\n                {this.linkToIdx({\n                  idx: idx - 1,\n                  text: 'Previous',\n                  className: 'button',\n                })}\n              </div>\n              <div className=\"level-right\">\n                {this.isLast() ? (\n                  <Link className=\"button is-success\" to={`/${slug}`}>\n                    Done!\n                  </Link>\n                ) : (\n                  this.linkToIdx({\n                    idx: idx + 1,\n                    text: 'Next',\n                    className: 'button is-primary',\n                  })\n                )}\n              </div>\n            </div>\n          </div>\n        </section>\n      </Layout>\n    )\n  }\n}\n\nFlashcardScene.propTypes = {\n  slug: PropTypes.string.isRequired,\n  guess: PropTypes.string.isRequired,\n  deck: PropTypes.object.isRequired,\n  search: PropTypes.string.isRequired,\n}\n\nexport default FlashcardScene\n"],"sourceRoot":""}