{"version":3,"sources":["webpack:///./node_modules/mux.js/lib/utils/stream.js","webpack:///./node_modules/mux.js/lib/m2ts/stream-types.js","webpack:///./node_modules/global/window.js","webpack:///./node_modules/mux.js/lib/mp4/probe.js","webpack:///./node_modules/mux.js/lib/mp4/transmuxer.js","webpack:///./node_modules/classnames/index.js","webpack:///./node_modules/url-toolkit/src/url-toolkit.js","webpack:///./node_modules/mux.js/lib/mp4/mp4-generator.js","webpack:///./node_modules/mux.js/lib/m2ts/caption-stream.js","webpack:///./node_modules/mux.js/lib/tools/caption-packet-parser.js","webpack:///./node_modules/mux.js/lib/m2ts/timestamp-rollover-stream.js","webpack:///./node_modules/global/document.js","webpack:///./node_modules/tsml/tsml.js","webpack:///./node_modules/xhr/index.js","webpack:///./node_modules/is-function/index.js","webpack:///./node_modules/parse-headers/parse-headers.js","webpack:///./node_modules/trim/index.js","webpack:///./node_modules/for-each/index.js","webpack:///./node_modules/is-callable/index.js","webpack:///./node_modules/xtend/immutable.js","webpack:///./node_modules/videojs-vtt.js/lib/browser-index.js","webpack:///./node_modules/videojs-vtt.js/lib/vtt.js","webpack:///./node_modules/videojs-vtt.js/lib/vttcue.js","webpack:///./node_modules/videojs-vtt.js/lib/vttregion.js","webpack:///./node_modules/safe-json-parse/tuple.js","webpack:///./node_modules/mux.js/lib/utils/bin.js","webpack:///./node_modules/mux.js/lib/mp4/index.js","webpack:///./node_modules/mux.js/lib/mp4/frame-utils.js","webpack:///./node_modules/mux.js/lib/mp4/track-decode-info.js","webpack:///./node_modules/mux.js/lib/m2ts/m2ts.js","webpack:///./node_modules/mux.js/lib/m2ts/metadata-stream.js","webpack:///./node_modules/mux.js/lib/codecs/adts.js","webpack:///./node_modules/mux.js/lib/codecs/h264.js","webpack:///./node_modules/mux.js/lib/utils/exp-golomb.js","webpack:///./node_modules/mux.js/lib/aac/index.js","webpack:///./node_modules/mux.js/lib/data/silence.js","webpack:///./node_modules/mux.js/lib/utils/clock.js","webpack:///./node_modules/mux.js/lib/mp4/caption-parser.js","webpack:///./node_modules/mux.js/lib/tools/mp4-inspector.js","webpack:///./node_modules/mux.js/lib/tools/ts-inspector.js","webpack:///./node_modules/mux.js/lib/m2ts/probe.js","webpack:///./node_modules/mux.js/lib/aac/probe.js","webpack:///./node_modules/m3u8-parser/dist/m3u8-parser.es.js","webpack:///./node_modules/mpd-parser/dist/mpd-parser.es.js","webpack:///./node_modules/pkcs7/dist/pkcs7.es.js","webpack:///./node_modules/aes-decrypter/dist/aes-decrypter.es.js","webpack:///./node_modules/video.js/dist/video.es.js"],"names":["Stream","this","init","listeners","on","type","listener","concat","off","index","indexOf","slice","splice","trigger","callbacks","i","length","args","arguments","call","push","apply","dispose","prototype","pipe","destination","data","flushSource","flush","module","exports","H264_STREAM_TYPE","ADTS_STREAM_TYPE","METADATA_STREAM_TYPE","global","win","window","self","findBox","parseType","timescale","startTime","getVideoTrackIds","toUnsigned","__webpack_require__","path","size","end","subresults","results","byteLength","subarray","buffer","result","String","fromCharCode","reduce","trak","tkhd","version","id","mdhd","fragment","trafs","baseTimes","map","traf","tfhd","scale","tfdt","Math","pow","Infinity","min","isFinite","traks","videoTrackIds","forEach","hdlrs","tkhds","hdlr","view","trackId","handlerType","DataView","byteOffset","getUint8","getUint32","VideoSegmentStream","AudioSegmentStream","Transmuxer","CoalesceStream","isLikelyAacData","arrayEquals","sumFrameByteLengths","mp4","frameUtils","trackDecodeInfo","m2ts","AdtsStream","H264Stream","AacStream","coneOfSilence","clock","AUDIO_PROPERTIES","VIDEO_PROPERTIES","charCodeAt","a","b","array","sum","track","options","adtsFrames","sequenceNumber","earliestAllowedDts","audioAppendStartTs","videoBaseMediaDecodeTime","collectDtsInfo","prop","setEarliestDts","earliestDts","timelineStartInfo","baseMediaDecodeTime","setVideoBaseMediaDecodeTime","setAudioAppendStart","timestamp","frames","moof","mdat","boxes","trimAdtsFramesByEarliestDts_","calculateTrackBaseMediaDecodeTime","keepOriginalTimestamps","prefixWithSilence_","samples","generateSampleTable_","concatenateFrameData_","Uint8Array","set","clearDtsInfo","baseMediaDecodeTimeTs","frameDuration","silentFrame","audioGapDuration","audioFillFrameCount","audioFillDuration","audioTsToVideoTs","samplerate","ceil","max","floor","ONE_SECOND_IN_TS","videoTsToAudioTs","minSegmentDts","filter","currentFrame","dts","minSegmentPts","duration","dataOffset","config","pps","nalUnits","gopsToAlignWith","minPTS","gopCache_","nalUnit","nalUnitType","sps","gopForFusion","gops","shift","resetStream_","groupNalsIntoFrames","groupFramesIntoGops","keyFrame","getGopForFusion_","unshift","nalCount","pts","extendFirstKeyFrame","alignedGops","alignGopsAtEnd","alignGopsAtEnd_","alignGopsAtStart_","gop","pop","generateSampleTable","concatenateNalData","undefined","dtsDistance","nearestGopObj","currentGop","currentGopObj","nearestDistance","alignIndex","gopIndex","align","alignEndIndex","matchFound","trimIndex","metadata","total","alignGopsWith","newGopsToAlignWith","metadataStream","numberOfTracks","remux","remuxTracks","pendingTracks","videoTrack","pendingBoxes","pendingCaptions","pendingMetadata","pendingBytes","emittedTracks","output","text","audioTrack","caption","id3","initSegment","offset","event","captions","captionStreams","info","timelineStartPts","startPts","endTime","endPts","stream","cueTime","dispatchType","hasFlushed","transmuxPipeline_","setupAacPipeline","pipeline","MetadataStream","aacStream","audioTimestampRolloverStream","TimestampRolloverStream","timedMetadataTimestampRolloverStream","adtsStream","coalesceStream","headOfPipeline","frame","setTimestamp","timeStamp","audioSegmentStream","codec","bind","setupTsPipeline","packetStream","TransportPacketStream","parseStream","TransportParseStream","elementaryStream","ElementaryStream","videoTimestampRolloverStream","h264Stream","captionStream","CaptionStream","tracks","videoSegmentStream","setBaseMediaDecodeTime","discontinuity","reset","isAac","resetCaptions","__WEBPACK_AMD_DEFINE_RESULT__","hasOwn","hasOwnProperty","classNames","classes","arg","argType","Array","isArray","inner","key","join","default","URL_REGEX","FIRST_SEGMENT_REGEX","SLASH_DOT_REGEX","SLASH_DOT_DOT_REGEX","URLToolkit","buildAbsoluteURL","baseURL","relativeURL","opts","trim","alwaysNormalize","basePartsForNormalise","parseURL","Error","normalizePath","buildURLFromParts","relativeParts","scheme","baseParts","netLoc","pathParts","exec","builtParts","params","query","baseURLPath","newPath","substring","lastIndexOf","url","parts","split","reverse","replace","box","dinf","esds","ftyp","mfhd","minf","moov","mvex","mvhd","mdia","sdtp","stbl","stsd","trex","trun","types","MAJOR_BRAND","MINOR_VERSION","AVC1_BRAND","VIDEO_HDLR","AUDIO_HDLR","HDLR_TYPES","VMHD","SMHD","DREF","STCO","STSC","STSZ","STTS","videoSample","audioSample","audioTrun","videoTrun","trunHeader","UINT32_MAX","avc1","avcC","btrt","dref","mp4a","smhd","stco","stsc","stsz","stts","styp","vmhd","video","audio","payload","setUint32","audioobjecttype","samplingfrequencyindex","channelcount","trackFragments","bytes","flags","dependsOn","isDependedOn","sequenceParameterSets","pictureParameterSets","width","height","profileIdc","profileCompatibility","levelIdc","samplesize","trackFragmentHeader","trackFragmentDecodeTime","trackFragmentRun","sampleDependencyTable","upperWordBaseMediaDecodeTime","lowerWordBaseMediaDecodeTime","durationPresent","sizePresent","flagsPresent","compositionTimeOffset","sample","isLeading","hasRedundancy","paddingValue","isNonSyncSample","degradationPriority","fileType","movie","cea708Parser","captionPackets_","ccStreams_","Cea608Stream","cc","sei","userData","newCaptionPackets","parseSei","escapedRBSP","payloadType","USER_DATA_REGISTERED_ITU_T_T35","parseUserData","latestDts_","ignoreNextEqualDts_","numSameDts_","parseCaptionPackets","elem","idx","presortIndex","sort","packet","dispatchCea608Packet","activeCea608Channel_","ccStream","setsChannel1Active","setsChannel2Active","ccData","CHARACTER_TRANSLATION","42","92","94","95","96","123","124","125","126","127","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","544","545","546","547","548","549","550","551","552","553","554","555","556","557","558","559","560","561","562","563","564","565","566","567","568","569","570","571","572","573","574","575","800","801","802","803","804","805","806","807","808","809","810","811","812","813","814","815","816","817","818","819","820","821","822","823","824","825","826","827","828","829","830","831","getCharFromCode","code","ROWS","createDisplayBuffer","BOTTOM_ROW","field","dataChannel","field_","dataChannel_","name_","setConstants","swap","char0","char1","lastControlCode_","PADDING_","RESUME_CAPTION_LOADING_","mode_","END_OF_CAPTION_","clearFormatting","flushDisplayed","displayed_","nonDisplayed_","startPts_","ROLL_UP_2_ROWS_","rollUpRows_","setRollUp","ROLL_UP_3_ROWS_","ROLL_UP_4_ROWS_","CARRIAGE_RETURN_","shiftRowsUp_","BACKSPACE_","row_","ERASE_DISPLAYED_MEMORY_","ERASE_NON_DISPLAYED_MEMORY_","RESUME_DIRECT_CAPTIONING_","isSpecialCharacter","column_","isExtCharacter","isMidRowCode","addFormatting","isOffsetControlCode","isPAC","row","formatting_","isColorPAC","isNormalChar","content","topRow_","BASE_","EXT_","CONTROL_","OFFSET_","char","newBaseRow","format","popOn","baseRow","rollUp","paintOn","payloadSize","count","discardEmulationPreventionBytes","newLength","newData","emulationPreventionBytesPositions","sourceIndex","handleRollover","value","reference","direction","abs","lastDTS","referenceDTS","type_","doccy","topLevel","minDoc","document","clean","s","sa","isFunction","parseHeaders","xtend","initParams","uri","callback","createXHR","_createXHR","called","err","response","body","errorFunc","evt","clearTimeout","timeoutTimer","statusCode","failureResponse","loadFunc","aborted","status","useXDR","xhr","responseText","responseType","responseXML","firefoxBugTakenEffect","documentElement","nodeName","getXml","isJson","JSON","parse","e","getBody","method","headers","rawRequest","getAllResponseHeaders","cors","XDomainRequest","XMLHttpRequest","sync","json","stringify","onreadystatechange","readyState","setTimeout","onload","onerror","onprogress","onabort","ontimeout","open","username","password","withCredentials","timeout","abort","setRequestHeader","obj","isEmpty","beforeSend","send","iterator","forEachArray","toUpperCase","fn","string","toString","alert","confirm","prompt","Object","toLowerCase","str","left","right","isCallable","toStr","list","thisArg","TypeError","receiver","len","charAt","forEachString","object","k","forEachObject","fnToStr","Function","constructorRegex","isES6ClassFn","fnStr","test","hasToStringTag","Symbol","toStringTag","tryFunctionObject","strClass","target","source","vttjs","WebVTT","VTTCue","VTTRegion","cueShim","regionShim","nativeVTTCue","nativeVTTRegion","shim","restore","_objCreate","create","F","o","ParsingError","errorData","message","name","parseTimeStamp","input","computeSeconds","h","m","f","match","Settings","values","parseOptions","keyValueDelim","groupDelim","groups","kv","parseCue","cue","regionList","oInput","consumeTimeStamp","ts","Errors","BadTimeStamp","skipWhitespace","substr","settings","v","region","alt","vals","vals0","integer","percent","get","vertical","line","lineAlign","snapToLines","position","start","middle","positionAlign","consumeCueSettings","constructor","BadSignature","dflt","defaultKey","has","n","parseInt","parseFloat","ESCAPE","&amp;","&lt;","&gt;","&lrm;","&rlm;","&nbsp;","TAG_NAME","c","u","ruby","rt","lang","TAG_ANNOTATION","NEEDS_PARENT","parseContent","nextToken","unescape1","unescape","shouldAdd","current","element","localName","createElement","annotation","tagName","t","rootDiv","tagStack","appendChild","createTextNode","parentNode","node","createProcessingInstruction","className","strongRTLRanges","isStrongRTLChar","charCode","currentRange","StyleBox","CueStyleBox","styleOptions","cueDiv","styles","color","backgroundColor","top","bottom","display","writingMode","unicodeBidi","applyStyles","div","nodeStack","childNodes","pushNodes","nextTextNode","textContent","innerText","determineBidi","textAlign","font","whiteSpace","textPos","formatStyle","move","BoxPosition","lh","offsetHeight","offsetWidth","offsetTop","rects","getClientRects","getBoundingClientRect","lineHeight","moveBoxToLinePosition","styleBox","containerBox","boxPositions","boxPosition","linePos","textTrackList","mediaElement","trackList","mode","computeLinePos","axis","step","round","maxPosition","initialAxis","calculatedPercentage","bestPosition","specifiedPosition","percentage","overlapsOppositeAxis","within","overlapsAny","p","intersectPercentage","findBestPosition","toCSSCompatValues","style","val","unit","toMove","overlaps","b2","container","getSimpleBoxPosition","StringDecoder","decode","decodeURIComponent","encodeURIComponent","convertCueToDOMTree","cuetext","processCues","cues","overlay","firstChild","removeChild","paddedOverlay","margin","hasBeenReset","displayState","shouldCompute","Parser","decoder","state","TextDecoder","reportOrThrowError","onparsingerror","collectNextLine","pos","parseHeader","ontimestampmap","MPEGTS","LOCAL","xy","anchor","lines","regionAnchorX","regionAnchorY","viewportAnchorX","viewportAnchorY","scroll","onregion","parseRegion","alreadyCollectedLine","hasSubstring","oncue","onflush","autoKeyword","directionSetting","","lr","rl","alignSetting","findAlignSetting","_id","_pauseOnExit","_startTime","_endTime","_text","_region","_vertical","_snapToLines","_line","_lineAlign","_position","_positionAlign","_size","_align","defineProperties","enumerable","pauseOnExit","setting","findDirectionSetting","SyntaxError","getCueAsHTML","scrollSetting","up","isValidPercentValue","_width","_lines","_regionAnchorX","_regionAnchorY","_viewportAnchorX","_viewportAnchorY","_scroll","findScrollSetting","reviver","error","generator","probe","CaptionParser","sampleForFrame","currentNal","baseDataOffset","j","nalsByteLength","numberOfNals","maxSegmentDts","maxSegmentPts","StreamTypes","m2tsStreamTypes","bytesInBuffer","everything","startIndex","endIndex","parsePsi","parsePat","parsePmt","packetsWaitingForPmt","programMapTable","psi","payloadUnitStartIndicator","pat","section_number","last_section_number","pmtPid","pmt","tableEnd","timed-metadata","streamType","pid","processPes_","STREAM_TYPES","h264","adts","timedMetadata","flushStream","forceFlush","packetFlushable","packetData","pes","ptsDtsFlags","packetLength","dataAlignmentIndicator","PAT_PID","MP2T_PACKET_LENGTH","percentEncode","parseUtf8","parseSyncSafeInteger","tagParsers","TXXX","tag","description","WXXX","PRIV","owner","privateData","debug","descriptor","tagSize","bufferSize","chunk","frameStart","frameSize","console","log","d","ADTS_SAMPLING_FREQUENCIES","frameLength","protectionSkipBytes","frameEnd","oldBuffer","sampleCount","adtsFrameDuration","frameNum","NalByteStream","PROFILES_WITH_OPTIONAL_SPS_DATA","ExpGolomb","syncPoint","swapBuffer","100","110","122","244","44","83","86","118","128","138","139","134","currentPts","currentDts","readSequenceParameterSet","skipScalingList","nalByteStream","expGolombDecoder","lastScale","nextScale","readExpGolomb","chromaFormatIdc","picOrderCntType","numRefFramesInPicOrderCntCycle","picWidthInMbsMinus1","picHeightInMapUnitsMinus1","frameMbsOnlyFlag","scalingListCount","sarRatio","frameCropLeftOffset","frameCropRightOffset","frameCropTopOffset","frameCropBottomOffset","sarScale","readUnsignedByte","skipUnsignedExpGolomb","readUnsignedExpGolomb","skipBits","readBoolean","skipExpGolomb","readBits","workingData","workingBytesAvailable","workingWord","workingBitsAvailable","bitsAvailable","loadWord","workingBytes","availableBytes","skipBytes","bits","valu","skipLeadingZeros","leadingZeroCount","clz","parseId3TagSize","header","byteIndex","returnSize","parseAdtsSize","lowThree","bytesLeft","tempLength","metaTable","highPrefix","lowPrefix","zeroFill","96000","88200","64000","48000","44100","32000","24000","16000","12000","11025","8000","keys","arr","part","secondsToVideoTs","secondsToAudioTs","videoTsToSeconds","audioTsToSeconds","seconds","sampleRate","inspect","mapToSample","approximateOffset","parseCaptionNals","segment","videoTrackId","mdats","captionNals","mdatTrafPairs","matchingTraf","pair","seiNals","headerInfo","parseTfhd","parseTfdt","truns","avcStream","seiNal","lastMatchedSample","avcView","matchingSample","findSeiNals","defaultSampleDuration","defaultSampleSize","allSamples","parseTrun","parseSamples","segmentCache","parsedCaptions","isInitialized","isNewInit","timescales","parsedData","cachedSegment","parseEmbeddedCaptions","pushNals","nals","nal","clearParsedCaptions","resetCaptionStream","clearAllCaptions","inspectMp4","textifyMp4","parseMp4Date","Date","parseSampleFlags","dataReferenceIndex","getUint16","horizresolution","vertresolution","frameCount","depth","numOfPictureParameterSets","nalSize","configurationVersion","avcProfileIndication","avcLevelIndication","lengthSizeMinusOne","numOfSequenceParameterSets","bufferSizeDB","maxBitrate","avgBitrate","esId","streamPriority","decoderConfig","objectProfileIndication","decoderConfigDescriptor","audioObjectType","samplingFrequencyIndex","channelConfiguration","majorBrand","minorVersion","compatibleBrands","dataReferences","escape","nalParse","language","creationTime","modificationTime","streamDescriptor","rate","volume","matrix","Uint32Array","nextTrackId","pdin","initialDelay","sidx","references","referenceId","earliestPresentationTime","firstOffset","referenceCount","referenceType","referencedSize","subsegmentDuration","startsWithSap","sapType","sapDeltaTime","balance","chunkOffsets","entryCount","sampleToChunks","firstChunk","samplesPerChunk","sampleDescriptionIndex","sampleDescriptions","sampleSize","entries","timeToSamples","sampleDelta","baseDataOffsetPresent","sampleDescriptionIndexPresent","defaultSampleDurationPresent","defaultSampleSizePresent","defaultSampleFlagsPresent","durationIsEmpty","defaultBaseIsMoof","defaultSampleFlags","baseDataOffsetIsMoof","layer","alternateGroup","defaultSampleDescriptionIndex","sampleDependsOn","sampleIsDependedOn","sampleHasRedundancy","samplePaddingValue","sampleIsDifferenceSample","sampleDegradationPriority","dataOffsetPresent","firstSampleFlagsPresent","sampleDurationPresent","sampleSizePresent","sampleFlagsPresent","sampleCompositionTimeOffsetPresent","getInt32","url ","graphicsmode","opcolor","Uint16Array","ab","ArrayBuffer","z","inspectedMp4","indent","prefix","byte","textify","parseHdlr","aac","parseAudioPes_","pesType","pusi","parsed","endLoop","parsePesType","table","parsePayloadUnitStartIndicator","parsePesTime","parseVideoPes_","firstKeyFrame","videoPacketContainsKeyFrame","inspectTs_","parsePsi_","baseTimestamp","audioCount","parseAacTimestamp","parseSampleRate","audioTimescale","inspectAac_","segmentInfo","audioBaseTimestamp","dtsTime","ptsTime","videoBaseTimestamp","adjustTimestamp_","parsePid","parseAdaptionField","parseNalUnitType","payloadOffset","frameBuffer","frameI","frameSyncPoint","foundKeyFrame","classCallCheck","instance","Constructor","_extends","assign","inherits","subClass","superClass","writable","configurable","setPrototypeOf","__proto__","possibleConstructorReturn","ReferenceError","LineStream","_Stream","_this","nextNewline","parseAttributes","attributes","attrs","RegExp","attr","ParseStream","customParsers","tagType","title","number","playlistType","allowed","URI","BYTERANGE","_attributes$BYTERANGE","byterange","RESOLUTION","resolution","BANDWIDTH","dateTimeString","dateTimeObject","IV","PRECISE","addParser","_ref","_this2","expression","customType","dataParser","lineStream","uris","currentUri","currentMap","_key","defaultMediaGroups","AUDIO","VIDEO","CLOSED-CAPTIONS","SUBTITLES","currentTimeline","manifest","allowCache","discontinuityStarts","segments","entry","mediaGroup","rendition","allow-cache","endlist","endList","inf","mediaSequence","discontinuitySequence","METHOD","iv","media-sequence","discontinuity-sequence","playlist-type","playlist","stream-inf","playlists","mediaGroups","media","TYPE","NAME","mediaGroupType","DEFAULT","autoselect","AUTOSELECT","LANGUAGE","instreamId","CHARACTERISTICS","characteristics","FORCED","forced","program-date-time","targetduration","targetDuration","totalduration","totalDuration","isNaN","timeOffset","precise","cue-out","cueOut","cue-out-cont","cueOutCont","cue-in","cueIn","timeline","comment","custom","formatVideoPlaylist","_ref3","_attributes3","CODECS","codecs","bandwidth","periodIndex","resolvedUri","contentProtection","_typeof","isObject","merge","_len","objects","mpd_parser_es_resolveUrl","baseUrl","relativeUrl","url_toolkit_default","window_default","location","href","urlTypeToSegment","_ref$baseUrl","_ref$source","_ref$range","range","ranges","startRange","endRange","getLiveRValue","time","NOW","clientOffset","availabilityStartTime","_attributes$timescale","_attributes$start","_attributes$minimumUp","minimumUpdatePeriod","periodDuration","parseByTimeline","segmentTimeline","_attributes$type","_attributes$minimumUp2","_attributes$media","sourceDuration","_attributes$timescale2","_attributes$startNumb","startNumber","sIndex","S","repeat","r","segmentTime","nextS","flatten","lists","x","y","from","segmentRange","static","dynamic","_attributes$timeShift","timeShiftBufferDepth","now","periodStartWC","segmentCount","availableStart","availableEnd","parseByDuration","_attributes$timescale4","_segmentRange$type","_attributes$timescale3","toSegments","identifierPattern","constructTemplateUrl","identifier","identifierReplacement","segmentsFromTemplate","templateValues","RepresentationID","Bandwidth","_attributes$initializ","initialization","sourceURL","mapSegment","parseTemplateInfo","Number","Time","mpd_parser_es_errors","segmentsFromList","_attributes$segmentUr","segmentUrls","segmentUrlMap","segmentUrlObject","segmentUrl","mediaRange","SegmentURLToSegmentObject","segmentTimeInfo","segmentsFromBase","_attributes$indexRang","indexRange","generateSegments","segmentAttributes","segmentsFn","template","base","_segmentAttributes","_segmentAttributes$ti","findChildren","getContent","parseDuration","_match$slice","year","month","day","hour","minute","second","parsers","mediaPresentationDuration","parsedValue","mpd_parser_es_parseAttributes","el","parseFn","keySystemsMap","urn:uuid:1077efec-c0b2-4d02-ace3-3c1e52e2fb4b","urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed","urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95","urn:uuid:f239e769-efa3-4850-9c16-a903c6932efb","buildBaseUrls","referenceUrls","baseUrlElements","baseUrlElement","getSegmentInformation","adaptationSet","segmentTemplate","segmentList","segmentBase","segmentTimelineParentNode","segmentInitializationParentNode","segmentInitialization","generateKeySystemInformation","contentProtectionNodes","acc","keySystem","schemeIdUri","psshNode","pssh","psshBuffer","b64Text","decodedString","atob","decodeB64ToUint8Array","toRepresentations","periodAttributes","periodBaseUrls","periodSegmentInfo","adaptationSetAttributes","adaptationSetBaseUrls","role","roleAttributes","representations","adaptationSetSegmentInfo","representation","repBaseUrlElements","repBaseUrls","representationSegmentInfo","inheritBaseUrls","inheritAttributes","mpd","_options$manifestUri","manifestUri","_options$NOW","_options$clientOffset","periods","mpdAttributes","mpdBaseUrls","period","periodAtt","adaptationSets","toAdaptationSets","mpd_parser_es_stringToMpdXml","manifestString","xml","DOMParser","parseFromString","getElementsByTagName","dashPlaylists","_mediaGroups","_dashPlaylists$0$attr","_dashPlaylists$0$attr2","videoPlaylists","_ref4","mimeType","contentType","audioPlaylists","_ref5","vttPlaylists","_ref6","master","label","_attributes","formatAudioPlaylist","subs","_ref2","_attributes2","organizeVttPlaylists","toM3u8","parseUTCTiming","UTCTimingNode","parseUTCTimingScheme","aes_decrypter_es_classCallCheck","createClass","props","defineProperty","protoProps","staticProps","aes_decrypter_es_possibleConstructorReturn","precompute","tables","encTable","decTable","sbox","sboxInv","xInv","th","x2","x4","tEnc","tDec","aesTables","AES","_tables","tmp","encKey","decKey","keyLen","rcon","decrypt","encrypted0","encrypted1","encrypted2","encrypted3","out","a2","c2","nInnerRounds","kIndex","table0","table1","table2","table3","aes_decrypter_es_Stream","_length","_i","AsyncStream","jobs","delay","timeout_","aes_decrypter_es_inherits","processJob_","job","ntoh","word","encrypted","initVector","encrypted32","Int32Array","decipher","decrypted","decrypted32","init0","init1","init2","init3","wordIx","aes_decrypter_es_Decrypter","Decrypter","done","STEP","asyncStream_","decryptChunk_","padded","video_es_version","level","video_es_history","video_es_logByType","lvl","levels","lvlRegExp","all","warn","history","clear","disable","enable","_len2","_key2","_len3","_key3","_len4","_key4","log$1","video_es_typeof","video_es_classCallCheck","video_es_inherits","video_es_possibleConstructorReturn","taggedTemplateLiteralLoose","strings","raw","video_es_toString","video_es_isObject","each","video_es_assign","sources","isPlain","video_es_computedStyle","getComputedStyle","cs","_templateObject","isNonBlankString","throwIfWhitespace","isReal","document_default","isEl","nodeType","isInFrame","parent","createQuerier","selector","context","querySelector","ctx","createEl","properties","getOwnPropertyNames","propName","tsml_default","setAttribute","attrName","appendContent","prependTo","child","insertBefore","hasClass","classToCheck","classList","contains","addClass","classToAdd","add","removeClass","classToRemove","remove","toggleClass","classToToggle","predicate","setAttributes","attrValue","removeAttribute","getAttributes","knownBooleans","attrVal","getAttribute","attribute","blockTextSelection","focus","onselectstart","unblockTextSelection","rect","findPosition","docEl","clientLeft","scrollLeft","pageXOffset","clientTop","scrollTop","pageYOffset","getPointerPosition","boxW","boxH","boxY","boxX","pageY","pageX","changedTouches","isTextNode","emptyEl","normalizeContent","insertContent","isSingleLeftClick","button","buttons","$","$$","Dom","freeze","_guid","newGUID","elData","elIdAttr","getTime","getData","hasData","removeData","_cleanUpEvents","handlers","removeEventListener","dispatcher","detachEvent","disabled","_handleMultipleEvents","fixEvent","returnTrue","returnFalse","isPropagationStopped","old","preventDefault","srcElement","relatedTarget","fromElement","toElement","returnValue","defaultPrevented","stopPropagation","cancelBubble","stopImmediatePropagation","isImmediatePropagationStopped","clientX","doc","clientY","which","keyCode","_supportsPassive","addEventListener","passiveEvents","guid","hash","handlersCopy","passive","attachEvent","removeType","elemData","ownerDocument","bubbles","targetData","one","func","Events","_windowLoaded","videojs","video_es_autoSetup","autoSetup","vids","audios","divs","mediaEls","mediaEl","autoSetupTimeout","player","wait","vjs","video_es_createStyleElement","setTextContent","styleSheet","cssText","uid","bound","throttle","last","video_es_debounce","immediate","debounced","_later","cancel","EventTarget","allowedEvents_","ael","dispatchEvent","EVENT_MAP","queueTrigger","Map","oldTimeout","delete","isEvented","eventBusEl_","every","isValidEventType","validateTarget","validateEventType","validateListener","normalizeListenArgs","isTargetingSelf","listen","EventedMixin","_normalizeListenArgs","removeListenerOnDispose","removeRemoverOnTargetDispose","_normalizeListenArgs2","wrapper","largs","targetOrType","typeOrListener","evented","eventBusKey","StatefulMixin","setState","stateUpdates","changes","to","stateful","defaultState","handleStateChanged","toTitleCase","mergeOptions","video_es_Component","Component","ready","play","player_","options_","id_","el_","children_","childIndex_","childNameIndex_","initChildren","reportTouchActivity","enableTouchActivity","localize","tokens","defaultValue","languages","primaryCode","primaryLang","localizedString","ret","contentEl","contentEl_","children","getChildById","getChild","addChild","component","componentName","componentClassName","componentClass","ComponentClass","getComponent","refNode","childFound","compEl","parentOptions","workingChildren","Tech","some","wchild","isTech","playerOptions","newChild","buildCSSClass","isReady_","readyQueue_","triggerReady","readyQueue","show","hide","lockShowing","unlockShowing","num","skipListeners","dimension","dimensions","widthOrHeight","pxIndex","currentDimension","computedWidthOrHeight","computedStyle","getPropertyValue","rule","currentDimensions","currentWidth","currentHeight","blur","emitTapEvents","touchStart","firstTouch","couldBeTap","touches","xdiff","ydiff","sqrt","noTap","reportUserActivity","report","touchHolding","clearInterval","setInterval","touchEnd","timeoutId","disposeFn","interval","_this3","intervalId","requestAnimationFrame","_this4","supportsRaf_","cancelAnimationFrame","registerComponent","ComponentToRegister","isComp","isPrototypeOf","reason","components_","Player","players","playerNames","pname","Boolean","USER_AGENT","navigator","userAgent","webkitVersionMap","appleWebkitVersion","IS_IPAD","IS_IPHONE","IS_IPOD","IS_IOS","IOS_VERSION","IS_ANDROID","ANDROID_VERSION","major","minor","IS_NATIVE_ANDROID","IS_FIREFOX","IS_EDGE","IS_CHROME","CHROME_VERSION","IE_VERSION","IS_SAFARI","IS_ANY_SAFARI","TOUCH_ENABLED","maxTouchPoints","DocumentTouch","browser","getRange","fnName","valueIndex","rangeIndex","maxIndex","rangeCheck","createTimeRangesObj","createTimeRanges","bufferedPercent","buffered","bufferedDuration","FullscreenApi","apiMap","specApi","browserApi","video_es_i","dist_video_es_i","MediaError","defaultMessages","errorTypes","1","2","3","4","5","errNum","isPromise","then","silencePromise","trackToJson_","textTrackConverter","tech","trackEls","trackObjs","trackEl","src","textTracks","addedTrack","addRemoteTextTrack","addCue","MODAL_CLASS_NAME","video_es_ModalDialog","_Component","ModalDialog","opened_","hasBeenOpened_","hasBeenFilled_","closeable","uncloseable","descEl_","tabIndex","aria-describedby","aria-hidden","aria-label","previouslyActiveEl_","handleKeyPress","close","desc","fillAlways","fill","wasPlaying_","paused","pauseOnOpen","pause","hadControls_","controls","conditionalFocus_","opened","conditionalBlur_","temporary","closeable_","temp","controlText","fillWith","parentEl","nextSiblingEl","nextSibling","empty","closeButton","content_","activeEl","activeElement","playerEl","handleKeyDown","focusableEls","focusableEls_","focusIndex","shiftKey","allChildren","querySelectorAll","HTMLAnchorElement","HTMLAreaElement","hasAttribute","HTMLInputElement","HTMLSelectElement","HTMLTextAreaElement","HTMLButtonElement","HTMLIFrameElement","HTMLObjectElement","HTMLEmbedElement","TrackList","_EventTarget","tracks_","addTrack","removeTrack","rtrack","l","getTrackById","video_es_event","change","addtrack","removetrack","disableOthers","enabled","AudioTrackList","_TrackList","changing_","disableOthers$1","selected","VideoTrackList","TextTrackList","kind","HtmlTrackElementList","trackElements","trackElements_","addTrackElement_","trackElement","getTrackElementByTrack_","trackElement_","removeTrackElement_","TextTrackCueList","setCues_","length_","oldLength","cues_","defineProp","getCueById","VideoTrackKind","alternative","main","sign","subtitles","commentary","AudioTrackKind","descriptions","main-desc","translation","TextTrackKind","chapters","TextTrackMode","hidden","showing","Track","trackProps","_loop","video_es_parseUrl","addToBody","host","protocol","innerHTML","details","video_es_getAbsoluteURL","getFileExtension","video_es_isCrossOrigin","winLoc","urlInfo","Url","parseUrl","getAbsoluteURL","isCrossOrigin","video_es_parseCues","srcContent","parser","errors","groupCollapsed","groupEnd","video_es_loadTrack","crossOrigin","xhr_default","responseBody","loaded_","tech_","loadHandler","video_es_TextTrack","_Track","TextTrack","srclang","default_","activeCues_","activeCues","changed","timeupdateHandler","newMode","ct","currentTime","active","originalCue","originalCue_","removeCue","_removeCue","cuechange","AudioTrack","newEnabled","VideoTrack","newSelected","NONE","LOADED","HTMLTrackElement","load","LOADING","ERROR","NORMAL","ListClass","TrackClass","capitalName","getterName","privateName","REMOTE","remoteText","remoteTextEl","ALL","names","video_es_Tech","hasStarted_","featuresProgressEvents","manualProgressOn","featuresTimeupdateEvents","manualTimeUpdatesOn","nativeCaptions","nativeTextTracks","featuresNativeTextTracks","emulateTextTracks","autoRemoteTextTracks_","initTrackListeners","nativeControlsForTouch","triggerSourceset","onDurationChange","manualProgress","trackProgress","manualProgressOff","stopTrackingProgress","progressInterval","numBufferedPercent","bufferedPercent_","duration_","manualTimeUpdates","trackCurrentTime","stopTrackingCurrentTime","manualTimeUpdatesOff","currentTimeInterval","manuallyTriggered","clearTracks","removeRemoteTextTrack","cleanupAutoTextTracks","error_","played","setCurrentTime","trackListChanges","addWebVttScript_","_this5","browser_index_default","script","_this6","remoteTracks","remoteTextTracks","handleAddTrack","handleRemoveTrack","updateDisplay","textTracksChanges","addTextTrack","createTrackHelper","createRemoteTextTrack","_this7","manualCleanup","htmlTrackElement","remoteTextTrackEls","getVideoPlaybackQuality","setPoster","playsinline","setPlaysinline","overrideNativeAudioTracks","overrideNativeVideoTracks","canPlayType","canPlaySource","srcObj","registerTech","techs_","defaultTechOrder_","getTech","featuresVolumeControl","featuresMuteControl","featuresFullscreenResize","featuresPlaybackRate","featuresSourceset","withSourceHandlers","_Tech","registerSourceHandler","handler","sourceHandlers","can","selectSourceHandler","canHandleSource","sh","originalFn","sourceHandler_","setSource","nativeSourceHandler","disposeSourceHandler","currentSource_","handleSource","middlewares","middlewareInstances","TERMINATOR","next","setSourceHelper","middleware","lastRun","mwFactory","mwrest","mw","mws","_mws$i","mwf","mwi","getOrCreateFactory","_src","mediate","callMethod","middlewareValue","middlewareIterator","terminated","executeRight","allowedGetters","seekable","allowedSetters","allowedMediators","MimetypesKind","opus","ogv","mov","m4v","mkv","mp3","oga","m3u8","getMimetype","ext","fixSource","mimetype","MediaLoader","techOrder","techName","isSupported","loadTech_","video_es_ClickableComponent","ClickableComponent","tabIndex_","createControlTextEl","controlTextEl_","aria-live","controlText_","localizedText","nonIconControl","enabled_","handleClick","handleFocus","handleBlur","PosterImage","_ClickableComponent","update","poster","setSrc","backgroundImage","fontMap","monospace","sansSerif","serif","monospaceSansSerif","monospaceSerif","proportionalSansSerif","proportionalSerif","casual","smallcaps","constructColor","opacity","hex","tryUpdateStyle","video_es_TextTrackDisplay","TextTrackDisplay","toggleDisplay","preselectTrack","modes","userPref","cache_","selectedLanguage","firstDesc","firstCaptions","preferredTrack","aria-atomic","clearDisplay","descriptionsTrack","captionsSubtitlesTrack","updateForTrack","textTrackSettings","overrides","getValues","textOpacity","backgroundOpacity","windowColor","windowOpacity","edgeStyle","textShadow","fontPercent","fontSize","fontFamily","fontVariant","LoadingSpinner","isAudio","playerType","dir","Button","BigPlayButton","_Button","mouseused_","handleMouseDown","playPromise","cb","playToggle","playFocus","CloseButton","PlayToggle","handlePlay","handlePause","handleEnded","handleSeeked","defaultImplementation","guide","gm","gh","implementation","formatTime","video_es_TimeDisplay","TimeDisplay","throttledUpdateContent","updateContent","plainName","labelText_","updateTextNode_","textNode_","formattedTime_","formatTime_","updateFormattedTime_","formattedTime","CurrentTimeDisplay","_TimeDisplay","scrubbing","getCache","DurationDisplay","TimeDivider","RemainingTimeDisplay","remainingTimeDisplay","remainingTime","LiveDisplay","updateShowing","Slider","bar","barName","playerEvent","handleMouseMove","handleMouseUp","aria-valuenow","aria-valuemin","aria-valuemax","progress","getPercent","toFixed","calculateDistance","stepBack","stepForward","bool","vertical_","LoadProgressBar","partEls_","bufferedEnd","percentify","TimeTooltip","seekBarRect","seekBarPoint","tooltipRect","playerRect","seekBarPointPx","spaceLeftOfPoint","spaceRightOfPoint","pullTooltipBy","PlayProgressBar","rafId_","timeTooltip","MouseTimeDisplay","SeekBar","_Slider","setEventHandlers_","updateInterval","update_","getCurrentTime_","videoWasPlaying","newTime","mouseTimeDisplay","handleAction","ProgressControl","throttledHandleMouseSeek","handleMouseSeek","seekBar","seekBarEl","video_es_FullscreenToggle","FullscreenToggle","handleFullscreenChange","fullscreenEnabled","isFullscreen","exitFullscreen","requestFullscreen","checkVolumeSupport","VolumeLevel","VolumeBar","updateLastVolume_","updateARIAAttributes","checkMuted","muted","ariaValue","volumeAsPercentage_","volumeBeforeDrag","lastVolume_","VolumeControl","volumeBar","throttledHandleMouseMove","orientationClass","checkMuteSupport","MuteToggle","vol","lastVolume","volumeToSet","updateIcon_","updateControlText_","VolumePanel","inline","volumeControl","volumePanelState_","sliderActive_","sliderInactive_","muteToggle","Menu","menuButton_","menuButton","focusedChild_","addItem","unpressButton","contentElType","append","stepChild","item","video_es_MenuButton","MenuButton","buttonClass","handleSubmenuKeyPress","menu","createMenu","buttonPressed_","items","hideThreshold_","createItems","buildWrapperCSSClass","menuButtonClass","pressButton","TrackButton","_MenuButton","updateHandler","MenuItem","selectable","isSelected_","multiSelectable","_selected","video_es_TextTrackMenuItem","_MenuItem","TextTrackMenuItem","changeHandler","handleTracksChange","selectedLanguageChangeHandler","handleSelectedLanguageChange","onchange","Event","createEvent","initEvent","kinds","shouldBeSelected","OffTextTrackMenuItem","_TextTrackMenuItem","allHidden","TextTrackButton","_TrackButton","TrackMenuItem","label_","kinds_","kind_","ChaptersTrackMenuItem","ChaptersButton","_TextTrackButton","track_","setTrack","findChaptersTrack","updateHandler_","remoteTextTrackEl","_remoteTextTrackEl","getMenuCaption","mi","DescriptionsButton","SubtitlesButton","CaptionSettingsMenuItem","CaptionsButton","SubsCapsMenuItem","SubsCapsButton","language_","AudioTrackMenuItem","audioTracks","AudioTrackButton","PlaybackRateMenuItem","playbackRate","PlaybackRateMenuButton","updateVisibility","updateLabel","labelEl_","rates","playbackRates","currentRate","newRate","playbackRateSupported","Spacer","CustomControlSpacer","_Spacer","ControlBar","ErrorDisplay","_ModalDialog","COLOR_BLACK","COLOR_BLUE","COLOR_CYAN","COLOR_GREEN","COLOR_MAGENTA","COLOR_RED","COLOR_WHITE","COLOR_YELLOW","OPACITY_OPAQUE","OPACITY_SEMI","OPACITY_TRANS","selectConfigs","parseOptionValue","video_es_TextTrackSettings","TextTrackSettings","endDialog","setDefaults","persistTextTrackSettings","saveSettings","restoreSettings","createElSelect_","legendId","selectLabelledbyIds","optionId","createElFgColor_","createElBgColor_","createElWinColor_","createElColors_","createElFont_","createElControls_","defaultsDescription","initial","accum","selectedIndex","setValues","setSelectedOption","localStorage","getItem","setItem","removeItem","ttDisplay","controlBar","subsCapsBtn","subsCapsButton","ccBtn","captionsButton","video_es_ResizeManager","ResizeManager","RESIZE_OBSERVER_AVAILABLE","ResizeObserver","loadListener_","resizeObserver_","debouncedHandler_","resizeHandler","observe","contentWindow","unobserve","disconnect","resizeObserver","sourcesetLoad","srcUrls","innerHTMLDescriptorPolyfill","cloneNode","dummy","docFrag","createDocumentFragment","Element","getDescriptor","priority","getOwnPropertyDescriptor","firstSourceWatch","resetSourceWatch_","innerDescriptor","HTMLMediaElement","video_es_getInnerHTMLDescriptor","appendWrapper","appendFn","retval","srcDescriptorPolyfill","setupSourceset","resetSourceset_","srcDescriptor","video_es_getSrcDescriptor","oldSetAttribute","oldLoad","currentSrc","_templateObject$1","video_es_Html5","Html5","crossoriginTracks","initNetworkState_","handleLateInit_","enableSourceset","setupSourcesetHandling_","hasChildNodes","nodes","nodesLength","removeNodes","proxyNativeTracks_","restoreMetadataTracksInIOSNativePlayer_","setControls","proxyWebkitFullscreen_","disposeMediaElement","metadataTracksPreFullscreenState","takeMetadataTrackSnapshot","storedMode","restoreTrackMode","storedTrack","overrideNative_","override","lowerCaseType","eventName","proxyNativeTracksForType_","elTracks","techTracks","currentTarget","removeOldTracks","removeTracks","found","playerElIngest","movingMediaElementInDOM","clone","techId","class","playerId","preload","settingsAttrs","networkState","loadstartFired","setLoadstartFired","triggerLoadstart","eventsToTrigger","checkProgress","NaN","endFn","beginFn","webkitPresentationMode","supportsFullScreen","webkitEnterFullScreen","enterFullScreen","HAVE_METADATA","exitFullScreen","webkitExitFullScreen","resetMediaElement","videoPlaybackQuality","webkitDroppedFrameCount","webkitDecodedFrameCount","droppedVideoFrames","totalVideoFrames","performance","timing","navigationStart","TEST_VID","video_es_track","canControlVolume","canMuteVolume","canControlPlaybackRate","canOverrideAttributes","noop","supportsNativeTextTracks","supportsNativeVideoTracks","videoTracks","supportsNativeAudioTracks","featuresNativeVideoTracks","featuresNativeAudioTracks","mpegurlRE","patchCanPlayType","unpatchCanPlayType","_templateObject$2","TECH_EVENTS_RETRIGGER","TECH_EVENTS_QUEUE","canplay","canplaythrough","playing","seeked","video_es_Player","getTagSettings","closest","isPosterFromTech_","queuedCallbacks_","userActive_","tagAttributes","languagesToLower","name$$1","languages_","poster_","controls_","autoplay","scrubbing_","lastPlaybackRate","defaultPlaybackRate","playerOptionsCopy","plugins","middleware_","flexNotSupported_","majorVersion","userActive","listenForUserActivity_","handleFullscreenChange_","handleStageClick_","changingSrc_","playWaitingForReady_","playOnLoadstart_","styleEl_","playerElIngest_","divEmbed","tabindex","VIDEOJS_NO_DYNAMIC_STYLE","defaultsStyleEl","head","fluid","aspectRatio","links","linkEl","_dimension","privDimension","updateStyleEl_","parsedVal","fluid_","ratio","aspectRatio_","idClass","ratioParts","videoWidth","videoHeight","ratioMultiplier","width_","height_","_height","techEl","unloadTech_","titleTechName","camelTechName","techName_","techOptions","loop","vtt.js","canOverridePoster","techCanOverridePoster","TechClass","handleTechReady_","textTracksJson_","eventObj","seeking","handleTechLoadStart_","handleTechSourceset_","handleTechWaiting_","handleTechEnded_","handleTechSeeking_","handleTechPlay_","handleTechFirstPlay_","handleTechPause_","handleTechDurationChange_","handleTechFullscreenChange_","handleTechError_","handleTechPosterChange_","handleTechTextData_","handleTechRateChange_","usingNativeControls","techGet_","addTechControlsListeners_","safety","removeTechControlsListeners_","handleTechClick_","handleTechDoubleClick_","handleTechTouchStart_","handleTechTouchMove_","handleTechTouchEnd_","handleTechTap_","techCall_","hasStarted","manualAutoplay_","previouslyMuted","catch","promise","updateSourceCaches_","matchingSources","findMimetype","sourceElSources","sourceEls","matchingSourceEls","sourceObj","updateCache","request","queued","handleTechCanPlay_","handleTechCanPlayThrough_","handleTechPlaying_","handleTechSeeked_","starttime","userWasActive","set$1","reduceRight","get$1","PromiseClass","Promise","resolve","play_","_this8","isScrubbing","percentAsDecimal","_muted","defaultMuted","_defaultMuted","isFS","isFullscreen_","fsApi","fullscreenchange","documentFullscreenChange","fullscreenElement","enterFullWindow","exitFullWindow","isFullWindow","docOrigOverflow","overflow","fullWindowOnEscKey","selectSource","_this9","techs","findFirstPassingTechSourcePair","outerArray","innerArray","tester","outerChoice","innerChoice","finder","sourceOrder","_this10","filterSource","newsrc","srcobj","middlewareSource","src_","notSupportedMessage","setTech","str1","str2","_this11","sourceTech","currentSources","currentSource","currentType","techAutoplay","newPoster","usingNativeControls_","errorDisplay","userActivity_","mouseInProgress","lastMoveX","lastMoveY","handleActivity","screenX","screenY","inactivityTimeout","isAudio_","_ref3$track","toJSON","createModal","_this12","modal","baseOptions","tagOptions","dataSetup","_safeParseTuple","tuple_default","childName","video_es_navigator","html5","flash","userLanguage","pluginStorage","pluginExists","getPlugin","markPluginAsActive","triggerSetupEvent","before","createPluginFactory","PluginSubClass","plugin","getEventHash","Plugin","VERSION","isBasic","registerPlugin","basicPluginWrapper","createBasicPlugin","deregisterPlugin","getPlugins","getPluginVersion","BASE_PLUGIN_NAME","usingPlugin","hasPlugin","normalizeId","videojs$1","getPlayer","hooks","hookFunction","PlayerComponent","hooks_","hook","hookOnce","original","removeHook","style$1","video_es_head","getPlayers","nId","_tag","_player","getAllPlayers","comp","use","writeable","extend","subClassMethods","methods","super_","_inherits","addLanguage","_mergeOptions","createTimeRange","setFormatTime","customImplementation","resetFormatTime","dom","video_es_resolveUrl","classCallCheck$1","createClass$1","inherits$1","possibleConstructorReturn$1","slicedToArray$1","_arr","_n","_d","_e","_s","sliceIterator","mergeOptions$1","EventTarget$1","log$2","forEachMediaGroup","mediaType","groupKey","labelKey","mediaProperties","updateMaster","mergedPlaylist","updateSegments","baseUri","resolveSegmentUris","setupMediaPlaylists","resolveMediaGroupUris","refreshDelay","lastSegment","video_es_PlaylistLoader","PlaylistLoader","srcUrl","hls","getPrototypeOf","hls_","req","playlistRequestError","haveMetadata","xhr$$1","startingState","media_","mediaUpdateTimeout","stopRequest","oldRequest","mediaChange","started","isFinalRendition","intervalDuration","endSequence","expired","backward","forward","backwardDuration","forwardDuration","video_es_duration","sumDurations","durations","safeLiveIndex","distanceFromEnd","safeDistance","playlistEnd","useSafeLiveEnd","isWholeNumber","roundSignificantDigit","increment","numDecimalDigits","ceilLeastSignificantDigit","floorLeastSignificantDigit","isBlacklisted","excludeUntil","isIncompatible","isEnabled","blacklisted","isLowestEnabledRendition","currentBandwidth","MAX_VALUE","Playlist","seekableStart","seekableEnd","getMediaInfoForTime","numSegments","mediaIndex","isDisabled","isAes","isFmp4","estimateSegmentRequestTime","segmentDuration","bytesReceived","videojsXHR","mergeOptions$1$1","xhrFactory","XhrFunction","beforeRequest","Hls","newOptions","reqResponse","responseTime","roundTripTime","requestTime","responseHeaders","timedout","originalAbort","textRange","formatHexString","formatAsciiString","createTransferableMessage","transferable","isView","initSegmentId","hexDump","utils","tagDump","textRanges","filterRanges","timeRanges","findRange","findNextRange","printableRange","strArr","timeRangesToArray","timeRangesList","removeCuesFromTrack","durationOfVideo","video_es_addTextTrackData","sourceHandler","captionArray","metadataArray","Cue","WebKitDataCue","inbandTextTracks_","timestampOffset","videoDuration","mediaSource_","deprecateOldCue","metadataTrack_","cuesArray","cuesGroupedByStartTime","timeSlot","sortedStartTimes","cueGroup","nextTime","TARGET","SCRIPT_TYPE","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","URL","webkitURL","msURL","Worker","shimWorker","filename","forceFallback","objURL","createSourceObject","worker","term","terminate","revokeObjectURL","wrapTerminate","selfShim","postMessage","onmessage","isThisThread","testWorker","testArray","createObjectURL","Blob","blob","getBlob","TransmuxWorker","document$$1","_findBox","mp4Generator","toUnsigned$1","captionPacketParser","streamTypes","_MetadataStream","timestampRolloverStream","_TransportPacketStream","_TransportParseStream","_ElementaryStream","TimestampRolloverStream$1","stream$$1","_AdtsStream","m2ts_1","_H264Stream","_NalByteStream","expGolomb","_AacStream","silence","_VideoSegmentStream","_AudioSegmentStream","_Transmuxer","_CoalesceStream","ONE_SECOND_IN_TS$2","_textifyMp","transmuxer","parseType$1","parse$$1","mp4Inspector","discardEmulationPreventionBytes$1","CaptionStream$1","captionStream$$1","classCallCheck$$1","createClass$$1","MessageHandlers","initArray","typedArray","action","gopInfo","appendStart","messageHandlers","defaultCodecs","videoCodec","videoObjectTypeIndicator","audioProfile","translateLegacyCodecs","orig","profile","avcLevel","parseCodecs","codecCount","makeMimeTypeString","mimeTypesForPlaylist","containerType","getContainerType","codecInfo","mediaAttributes","getCodecs","isMuxed","isMaat","audioGroup","groupId","audioGroupId","audioType","audioProfileFromDefault","codecStrings","justAudio","justVideo","bothVideoAudio","isAudioCodec","isVideoCodec","videoBuffer","audioBuffer","audioDisabled","arity","extents","videoBuffered","audioBuffered","VirtualSourceBuffer","_videojs$EventTarget","mediaSource","timestampOffset_","pendingBuffers_","bufferUpdating_","codecs_","audioCodec_","videoCodec_","audioDisabled_","appendAudioInitSegment_","gopBuffer_","timeMapping_","safeAppend_","transmuxer_","data_","done_","appendGopInfo_","videoBuffer_","audioBuffer_","appendWindowStart","updating","sourceBuffer","inBandMetadataTrackDispatchType","createTextTracksIfNecessary","processPendingSegments_","addSourceBuffer","realBuffer_","makeWrappedSourceBuffer","nativeMediaSource_","mapping","currentTimePts","gopsSafeToAlignWith","updateGopBuffer","updatedBuffer","removeGopBuffer","sortedSegments","segmentObj","createRealSourceBuffers_","triggerUpdateend","concatAndAppendSegments_","destinationBuffer","tempBuffer","appendBuffer","originalError","video_es_HtmlMediaSource","HtmlMediaSource","property","MediaSource","activeSourceBuffers_","sourceBuffers","updateActiveSourceBuffers_","disableCombined","disableAudioOnly","onPlayerMediachange_","onHlsReset_","onHlsSegmentTimeMapping_","url_","sourcebuffer","parsedType","parameters","parameter","parseContentType","urlCount","mediaSources","video_es_open","msObjectURL","swfId","video_es_supportsNativeMediaSources","isTypeSupported","supportsNativeMediaSources","URL$1","EventTarget$1$1","mergeOptions$2","updateMaster$1","oldMaster","newMaster","playlistUpdate","group","_playlistUpdate","video_es_DashPlaylistLoader","DashPlaylistLoader","srcUrlOrPlaylist","masterPlaylistLoader","refreshXml_","refreshMedia_","masterPlaylistLoader_","masterXml_","clientOffset_","phonyUri","_phonyUri","date","masterLoaded_","syncClientServerClock_","onClientServerClockSync_","utcTiming","serverTime","parseMasterXml","updatedMaster","logger","video_es_noop","SourceUpdater","sourceBufferEmitter","callbacks_","pendingCallback_","processedAppend_","mimeType_","logger_","createSourceBuffer_","sourceBuffer_","start_","started_","onUpdateendCallback_","pendingCallback","runCallback_","queueCallback_","Config","GOAL_BUFFER_LENGTH","MAX_GOAL_BUFFER_LENGTH","GOAL_BUFFER_LENGTH_RATE","BANDWIDTH_VARIANCE","BUFFER_LOW_WATER_LINE","MAX_BUFFER_LOW_WATER_LINE","BUFFER_LOW_WATER_LINE_RATE","REQUEST_ERRORS","segmentXhrHeaders","byterangeEnd","Range","abortAll","activeXhrs","handleErrors","waitForCompletion","decrypter","doneFn","endOfAllRequests","worstError","prev","getMostImportantError","encryptedBytes","decryptionHandler","requestId","decryptSegment","handleProgress","progressFn","progressEvent","stats","loaded","firstBytesReceivedAt","mediaSegmentRequest","xhrOptions","decryptionWorker","captionParser","finishProcessingFn","keyXhr","errorObj","handleKeyResponse","initSegmentXhr","probe_default","video_es_handleInitSegmentResponse","segmentXhr","getRequestStats","fmp4Captions","handleSegmentResponse","video_es_safeGetComputedStyle","stableSort","sortFn","newArray","cmp","video_es_comparePlaylistBandwidth","leftBandwidth","rightBandwidth","detectEndOfStream","segmentIndex","appendedLastSegment","finite","video_es_SegmentLoader","SegmentLoader","throughput","roundTrip","resetStats_","hasPlayed_","hasPlayed","currentTime_","seekable_","seeking_","loaderType_","loaderType","startingMedia_","segmentMetadataTrack_","segmentMetadataTrack","goalBufferLength_","goalBufferLength","sourceType_","sourceType","inbandTextTracks","state_","checkBufferTimeout_","currentTimeline_","pendingSegment_","sourceUpdater_","xhrOptions_","activeInitSegmentId_","initSegments_","captionParser_","decrypter_","syncController_","syncController","syncPoint_","ended_","fetchAtBuffer_","newState","mediaBytesTransferred","mediaRequests","mediaRequestsAborted","mediaRequestsTimedout","mediaRequestsErrored","mediaTransferDuration","mediaSecondsLoaded","abort_","monitorBuffer_","abortRequests","_error","set$$1","storedMap","playlist_","setDateTimeMapping","couldBeginLoading_","init_","sourceBufferEmitter_","resetEverything","newPlaylist","oldPlaylist","syncInfo","oldId","mediaSequenceDiff","saveExpiredSegmentInfo","resyncLoader","_mimeType","resetLoader","monitorBufferTick_","fillBuffer_","getSyncPoint","checkBuffer_","buffered_","endOfStream","startOfSegment","loadSegment_","lastBufferedEnd","bufferedTime","getSyncSegmentCandidate_","generateSegmentInfo_","mediaSourceInfo","_mediaSourceInfo","segmentIndexArray","isSyncRequest","random","measuredBandwidth","requestTimeRemaining","timeUntilRebuffer$$1","timeUntilRebuffer","switchCandidate","duration$$1","compatiblePlaylists","enabledPlaylists","rebufferingEstimates","numRequests","rebufferingImpact","noRebufferingPlaylists","estimate","minRebufferMaxBandwidthSelector","timeSavedBySwitching","minimumTimeSaving","simpleSegment","abortRequestEarly_","trimBackBuffer_","createSimplifiedSegmentObj_","handleProgress_","segmentRequestFinished_","removeToTime","seekable$$1","safeBackBufferTrimTime","processSegmentResponse_","createCaptionsTrackIfNotExists","addCaptionData","handleSegment_","timingInfo","probeSegmentInfo","containsAudio","containsVideo","startingMedia","newSegmentMedia","illegalMediaSwitchError","blacklistDuration","timelineMapping","mappingForTimeline","initId","_segmentInfo$segment","_segmentInfo$playlist","seq","_segmentInfo$playlist2","segmentInfoString","handleUpdateEnd_","isWalkingForward","recordThroughput_","addSegmentMetadataCue_","segmentProcessingTime","segmentProcessingThroughput","uint8ToUtf8","uintArray","VTT_LINE_TERMINATORS","video_es_VTTSegmentLoader","_SegmentLoader","VTTSegmentLoader","subtitlesTrack_","combinedByteLength","combinedSegment","_track","skipEmptySegments_","timestampOffsetForTimeline","requested","parseVTTCues_","updateTimeMapping_","timelines","decodeBytesToString","timestampmap","mapData","segmentData","mappingObj","diff","firstStart","lastStart","findAdCue","mediaTime","adStartTime","adEndTime","tsprobe","ts_inspector_default","syncPointStrategies","run","datetimeToDisplayTime","lastDistance","segmentStart","distance","discontinuitySync","discontinuities","video_es_SyncController","SyncController","inspectCache_","syncPoints","runStrategies_","selectSyncPoint_","strategy","bestSyncPoint","bestDistance","bestStrategy","newDistance","lastRemovedSegment","playlistTimestamp","probeMp4Segment_","probeTsSegment_","calculateSegmentTimeMapping_","saveDiscontinuitySyncInfo_","timeInfo","segmentStartTime","segmentEndTime","accuracy","mediaIndexDiff","Decrypter$1","possibleConstructorReturn$$1","AsyncStream$$1","inherits$$1","Decrypter$$1","decrypt$$1","audioTrackKind_","stopLoaders","segmentLoader","activePlaylistLoader","startLoaders","playlistLoader","onError","segmentLoaders","mediaTypes","blacklistCurrentPlaylist","activeTrack","activeGroup","defaultTrack","onTrackChanged","setupListeners","requestOptions","byGroupId","byResolvedUri","initialize","_settings$master","_settings$mediaTypes$","groupPlaylists","variantLabel","_settings$mediaTypes$2","_settings$mediaTypes$3","setupMediaGroups","variants","onGroupChanged","_settings$segmentLoad","mainSegmentLoader","previousActiveLoader","_settings$segmentLoad2","onAudioTrackChanged","createMediaTypes","loaderStats","sumLoaderStat","stat","audioSegmentLoader_","mainSegmentLoader_","video_es_MasterPlaylistController","MasterPlaylistController","externHls","useCueTags","enableLowInitialPlaylist","seekTo","seekTo_","useCueTags_","cueTagsTrack_","requestOptions_","mediaTypes_","handleSourceOpen_","segmentLoaderSettings","setupMasterPlaylistLoaderListeners_","subtitleSegmentLoader_","setupSegmentLoaderListeners_","requestTimeout","triggerPresenceUsage_","setupSourceBuffers_","setupFirstPlay","updatedPlaylist","excludeUnsupportedVariants_","selectedMedia","selectInitialPlaylist","selectPlaylist","initialMedia_","updateAdCues_","updateDuration","addSeekableRange","addSeekableRange_","onDurationchange","stuckAtPlaylistEnd_","defaultDemuxed","audioGroupKeys","nextPlaylist","currentPlaylist","forwardBuffer","bufferLowWaterLine","onSyncInfoUpdate_","onEndOfStream","ended","isEndOfStream","getExpiredTime","absolutePlaylistEnd","TIME_FUDGE_FACTOR","mainSeekable","audioSeekable","oldDuration","newDuration","setDuration","mimeTypes","configureLoaderMimeTypes_","excludeIncompatibleVariants_","variant","codecString","variantCodecs","adOffset","adTotal","_segment$cueOutCont$s","_segment$cueOutCont$s2","video_es_updateAdCues","Representation","hlsHandler","loader","playlistUri","changePlaylistFn","fastChangeFunction","masterPlaylistController_","fastQualityChange_","incompatible","currentlyEnabled","timerCancelEvents","video_es_PlaybackWatcher","PlaybackWatcher","consecutiveUpdates","lastRecordedTime","timer_","checkCurrentTimeTimeout_","canPlayHandler","monitorCurrentTime_","waitingHandler","techWaiting_","cancelTimerHandler","cancelTimer_","fixesBadSeeksHandler","fixesBadSeeks_","checkCurrentTime_","waiting_","afterSeekableWindow_","beforeSeekableWindow_","livePoint","nextRange","videoUnderflow_","difference","skipTheGap_","gap","gapFromVideoUnderflow_","scheduledCurrentTime","gaps","findGaps","defaultOptions","errorInterval","getSource","IWillNotUseThisInPlugins","reloadSourceOnError","initPlugin","lastCalled","localOptions","loadedMetadataHandler","errorHandler","cleanupEvents","vhs","source_","Hls$1","STANDARD_PLAYLIST_SELECTOR","playerBandwidth","playerWidth","playerHeight","sortedPlaylistReps","enabledPlaylistReps","rep","bandwidthPlaylistReps","highestRemainingBandwidthRep","bandwidthBestRep","haveResolution","resolutionBestRepList","resolutionBestRep","resolutionPlusOneList","resolutionPlusOneSmallest","resolutionPlusOneRep","chosenRep","video_es_simpleSelector","systemBandwidth","INITIAL_PLAYLIST_SELECTOR","comparePlaylistBandwidth","comparePlaylistResolution","leftWidth","rightWidth","simpleTypeFromSourceType","handleHlsMediaChange","qualityLevels","selectedIndex_","setupEmeOptions","eme","sourceOptions","keySystemOptions","videoPlaylist","audioPlaylist","keySystemContentTypes","audioContentType","videoContentType","emeKeySystems","keySystems","supportsNativeHls","canItPlay","supportsNativeDash","supportsTypeNatively","Component$1","video_es_HlsHandler","HlsHandler","dash","setOptions_","overrideNative","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","smoothQualityChange_","pauseLoading","option","playbackWatcher_","invBandwidth","invThroughput","mediaRequests_","mediaRequestsAborted_","mediaRequestsTimedout_","mediaRequestsErrored_","mediaTransferDuration_","mediaBytesTransferred_","mediaSecondsLoaded_","currentTech","playerDimensions","setupQualityLevels_","qualityLevels_","addQualityLevel","get$$1","getter","get$2","HlsSourceHandler","supportedType","__webpack_exports__"],"mappings":"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","file":"8-f546f70276efa1077973.js","sourcesContent":["/**\n * mux.js\n *\n * Copyright (c) 2014 Brightcove\n * All rights reserved.\n *\n * A lightweight readable stream implemention that handles event dispatching.\n * Objects that inherit from streams should call init in their constructors.\n */\n'use strict';\n\nvar Stream = function() {\n  this.init = function() {\n    var listeners = {};\n    /**\n     * Add a listener for a specified event type.\n     * @param type {string} the event name\n     * @param listener {function} the callback to be invoked when an event of\n     * the specified type occurs\n     */\n    this.on = function(type, listener) {\n      if (!listeners[type]) {\n        listeners[type] = [];\n      }\n      listeners[type] = listeners[type].concat(listener);\n    };\n    /**\n     * Remove a listener for a specified event type.\n     * @param type {string} the event name\n     * @param listener {function} a function previously registered for this\n     * type of event through `on`\n     */\n    this.off = function(type, listener) {\n      var index;\n      if (!listeners[type]) {\n        return false;\n      }\n      index = listeners[type].indexOf(listener);\n      listeners[type] = listeners[type].slice();\n      listeners[type].splice(index, 1);\n      return index > -1;\n    };\n    /**\n     * Trigger an event of the specified type on this stream. Any additional\n     * arguments to this function are passed as parameters to event listeners.\n     * @param type {string} the event name\n     */\n    this.trigger = function(type) {\n      var callbacks, i, length, args;\n      callbacks = listeners[type];\n      if (!callbacks) {\n        return;\n      }\n      // Slicing the arguments on every invocation of this method\n      // can add a significant amount of overhead. Avoid the\n      // intermediate object creation for the common case of a\n      // single callback argument\n      if (arguments.length === 2) {\n        length = callbacks.length;\n        for (i = 0; i < length; ++i) {\n          callbacks[i].call(this, arguments[1]);\n        }\n      } else {\n        args = [];\n        i = arguments.length;\n        for (i = 1; i < arguments.length; ++i) {\n          args.push(arguments[i]);\n        }\n        length = callbacks.length;\n        for (i = 0; i < length; ++i) {\n          callbacks[i].apply(this, args);\n        }\n      }\n    };\n    /**\n     * Destroys the stream and cleans up.\n     */\n    this.dispose = function() {\n      listeners = {};\n    };\n  };\n};\n\n/**\n * Forwards all `data` events on this stream to the destination stream. The\n * destination stream should provide a method `push` to receive the data\n * events as they arrive.\n * @param destination {stream} the stream that will receive all `data` events\n * @param autoFlush {boolean} if false, we will not call `flush` on the destination\n *                            when the current stream emits a 'done' event\n * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n */\nStream.prototype.pipe = function(destination) {\n  this.on('data', function(data) {\n    destination.push(data);\n  });\n\n  this.on('done', function(flushSource) {\n    destination.flush(flushSource);\n  });\n\n  return destination;\n};\n\n// Default stream functions that are expected to be overridden to perform\n// actual work. These are provided by the prototype as a sort of no-op\n// implementation so that we don't have to check for their existence in the\n// `pipe` function above.\nStream.prototype.push = function(data) {\n  this.trigger('data', data);\n};\n\nStream.prototype.flush = function(flushSource) {\n  this.trigger('done', flushSource);\n};\n\nmodule.exports = Stream;\n","'use strict';\n\nmodule.exports = {\n  H264_STREAM_TYPE: 0x1B,\n  ADTS_STREAM_TYPE: 0x0F,\n  METADATA_STREAM_TYPE: 0x15\n};\n","var win;\n\nif (typeof window !== \"undefined\") {\n    win = window;\n} else if (typeof global !== \"undefined\") {\n    win = global;\n} else if (typeof self !== \"undefined\"){\n    win = self;\n} else {\n    win = {};\n}\n\nmodule.exports = win;\n","/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * Utilities to detect basic properties and metadata about MP4s.\n */\n'use strict';\n\nvar toUnsigned = require('../utils/bin').toUnsigned;\nvar findBox, parseType, timescale, startTime, getVideoTrackIds;\n\n// Find the data for a box specified by its path\nfindBox = function(data, path) {\n  var results = [],\n      i, size, type, end, subresults;\n\n  if (!path.length) {\n    // short-circuit the search for empty paths\n    return null;\n  }\n\n  for (i = 0; i < data.byteLength;) {\n    size  = toUnsigned(data[i]     << 24 |\n                       data[i + 1] << 16 |\n                       data[i + 2] <<  8 |\n                       data[i + 3]);\n\n    type = parseType(data.subarray(i + 4, i + 8));\n\n    end = size > 1 ? i + size : data.byteLength;\n\n    if (type === path[0]) {\n      if (path.length === 1) {\n        // this is the end of the path and we've found the box we were\n        // looking for\n        results.push(data.subarray(i + 8, end));\n      } else {\n        // recursively search for the next box along the path\n        subresults = findBox(data.subarray(i + 8, end), path.slice(1));\n        if (subresults.length) {\n          results = results.concat(subresults);\n        }\n      }\n    }\n    i = end;\n  }\n\n  // we've finished searching all of data\n  return results;\n};\n\n/**\n * Returns the string representation of an ASCII encoded four byte buffer.\n * @param buffer {Uint8Array} a four-byte buffer to translate\n * @return {string} the corresponding string\n */\nparseType = function(buffer) {\n  var result = '';\n  result += String.fromCharCode(buffer[0]);\n  result += String.fromCharCode(buffer[1]);\n  result += String.fromCharCode(buffer[2]);\n  result += String.fromCharCode(buffer[3]);\n  return result;\n};\n\n/**\n * Parses an MP4 initialization segment and extracts the timescale\n * values for any declared tracks. Timescale values indicate the\n * number of clock ticks per second to assume for time-based values\n * elsewhere in the MP4.\n *\n * To determine the start time of an MP4, you need two pieces of\n * information: the timescale unit and the earliest base media decode\n * time. Multiple timescales can be specified within an MP4 but the\n * base media decode time is always expressed in the timescale from\n * the media header box for the track:\n * ```\n * moov > trak > mdia > mdhd.timescale\n * ```\n * @param init {Uint8Array} the bytes of the init segment\n * @return {object} a hash of track ids to timescale values or null if\n * the init segment is malformed.\n */\ntimescale = function(init) {\n  var\n    result = {},\n    traks = findBox(init, ['moov', 'trak']);\n\n  // mdhd timescale\n  return traks.reduce(function(result, trak) {\n    var tkhd, version, index, id, mdhd;\n\n    tkhd = findBox(trak, ['tkhd'])[0];\n    if (!tkhd) {\n      return null;\n    }\n    version = tkhd[0];\n    index = version === 0 ? 12 : 20;\n    id = toUnsigned(tkhd[index]     << 24 |\n                    tkhd[index + 1] << 16 |\n                    tkhd[index + 2] <<  8 |\n                    tkhd[index + 3]);\n\n    mdhd = findBox(trak, ['mdia', 'mdhd'])[0];\n    if (!mdhd) {\n      return null;\n    }\n    version = mdhd[0];\n    index = version === 0 ? 12 : 20;\n    result[id] = toUnsigned(mdhd[index]     << 24 |\n                            mdhd[index + 1] << 16 |\n                            mdhd[index + 2] <<  8 |\n                            mdhd[index + 3]);\n    return result;\n  }, result);\n};\n\n/**\n * Determine the base media decode start time, in seconds, for an MP4\n * fragment. If multiple fragments are specified, the earliest time is\n * returned.\n *\n * The base media decode time can be parsed from track fragment\n * metadata:\n * ```\n * moof > traf > tfdt.baseMediaDecodeTime\n * ```\n * It requires the timescale value from the mdhd to interpret.\n *\n * @param timescale {object} a hash of track ids to timescale values.\n * @return {number} the earliest base media decode start time for the\n * fragment, in seconds\n */\nstartTime = function(timescale, fragment) {\n  var trafs, baseTimes, result;\n\n  // we need info from two childrend of each track fragment box\n  trafs = findBox(fragment, ['moof', 'traf']);\n\n  // determine the start times for each track\n  baseTimes = [].concat.apply([], trafs.map(function(traf) {\n    return findBox(traf, ['tfhd']).map(function(tfhd) {\n      var id, scale, baseTime;\n\n      // get the track id from the tfhd\n      id = toUnsigned(tfhd[4] << 24 |\n                      tfhd[5] << 16 |\n                      tfhd[6] <<  8 |\n                      tfhd[7]);\n      // assume a 90kHz clock if no timescale was specified\n      scale = timescale[id] || 90e3;\n\n      // get the base media decode time from the tfdt\n      baseTime = findBox(traf, ['tfdt']).map(function(tfdt) {\n        var version, result;\n\n        version = tfdt[0];\n        result = toUnsigned(tfdt[4] << 24 |\n                            tfdt[5] << 16 |\n                            tfdt[6] <<  8 |\n                            tfdt[7]);\n        if (version ===  1) {\n          result *= Math.pow(2, 32);\n          result += toUnsigned(tfdt[8]  << 24 |\n                               tfdt[9]  << 16 |\n                               tfdt[10] <<  8 |\n                               tfdt[11]);\n        }\n        return result;\n      })[0];\n      baseTime = baseTime || Infinity;\n\n      // convert base time to seconds\n      return baseTime / scale;\n    });\n  }));\n\n  // return the minimum\n  result = Math.min.apply(null, baseTimes);\n  return isFinite(result) ? result : 0;\n};\n\n/**\n  * Find the trackIds of the video tracks in this source.\n  * Found by parsing the Handler Reference and Track Header Boxes:\n  *   moov > trak > mdia > hdlr\n  *   moov > trak > tkhd\n  *\n  * @param {Uint8Array} init - The bytes of the init segment for this source\n  * @return {Number[]} A list of trackIds\n  *\n  * @see ISO-BMFF-12/2015, Section 8.4.3\n **/\ngetVideoTrackIds = function(init) {\n  var traks = findBox(init, ['moov', 'trak']);\n  var videoTrackIds = [];\n\n  traks.forEach(function(trak) {\n    var hdlrs = findBox(trak, ['mdia', 'hdlr']);\n    var tkhds = findBox(trak, ['tkhd']);\n\n    hdlrs.forEach(function(hdlr, index) {\n      var handlerType = parseType(hdlr.subarray(8, 12));\n      var tkhd = tkhds[index];\n      var view;\n      var version;\n      var trackId;\n\n      if (handlerType === 'vide') {\n        view = new DataView(tkhd.buffer, tkhd.byteOffset, tkhd.byteLength);\n        version = view.getUint8(0);\n        trackId = (version === 0) ? view.getUint32(12) : view.getUint32(20);\n\n        videoTrackIds.push(trackId);\n      }\n    });\n  });\n\n  return videoTrackIds;\n};\n\nmodule.exports = {\n  findBox: findBox,\n  parseType: parseType,\n  timescale: timescale,\n  startTime: startTime,\n  videoTrackIds: getVideoTrackIds\n};\n","/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * A stream-based mp2t to mp4 converter. This utility can be used to\n * deliver mp4s to a SourceBuffer on platforms that support native\n * Media Source Extensions.\n */\n'use strict';\n\nvar Stream = require('../utils/stream.js');\nvar mp4 = require('./mp4-generator.js');\nvar frameUtils = require('./frame-utils');\nvar trackDecodeInfo = require('./track-decode-info');\nvar m2ts = require('../m2ts/m2ts.js');\nvar AdtsStream = require('../codecs/adts.js');\nvar H264Stream = require('../codecs/h264').H264Stream;\nvar AacStream = require('../aac');\nvar coneOfSilence = require('../data/silence');\nvar clock = require('../utils/clock');\n\n// constants\nvar AUDIO_PROPERTIES = [\n  'audioobjecttype',\n  'channelcount',\n  'samplerate',\n  'samplingfrequencyindex',\n  'samplesize'\n];\n\nvar VIDEO_PROPERTIES = [\n  'width',\n  'height',\n  'profileIdc',\n  'levelIdc',\n  'profileCompatibility'\n];\n\nvar ONE_SECOND_IN_TS = 90000; // 90kHz clock\n\n// object types\nvar VideoSegmentStream, AudioSegmentStream, Transmuxer, CoalesceStream;\n\n// Helper functions\nvar\n  isLikelyAacData,\n  arrayEquals,\n  sumFrameByteLengths;\n\nisLikelyAacData = function(data) {\n  if ((data[0] === 'I'.charCodeAt(0)) &&\n      (data[1] === 'D'.charCodeAt(0)) &&\n      (data[2] === '3'.charCodeAt(0))) {\n    return true;\n  }\n  return false;\n};\n\n/**\n * Compare two arrays (even typed) for same-ness\n */\narrayEquals = function(a, b) {\n  var\n    i;\n\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  // compare the value of each element in the array\n  for (i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * Sum the `byteLength` properties of the data in each AAC frame\n */\nsumFrameByteLengths = function(array) {\n  var\n    i,\n    currentObj,\n    sum = 0;\n\n  // sum the byteLength's all each nal unit in the frame\n  for (i = 0; i < array.length; i++) {\n    currentObj = array[i];\n    sum += currentObj.data.byteLength;\n  }\n\n  return sum;\n};\n\n/**\n * Constructs a single-track, ISO BMFF media segment from AAC data\n * events. The output of this stream can be fed to a SourceBuffer\n * configured with a suitable initialization segment.\n * @param track {object} track metadata configuration\n * @param options {object} transmuxer options object\n * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps\n *        in the source; false to adjust the first segment to start at 0.\n */\nAudioSegmentStream = function(track, options) {\n  var\n    adtsFrames = [],\n    sequenceNumber = 0,\n    earliestAllowedDts = 0,\n    audioAppendStartTs = 0,\n    videoBaseMediaDecodeTime = Infinity;\n\n  options = options || {};\n\n  AudioSegmentStream.prototype.init.call(this);\n\n  this.push = function(data) {\n    trackDecodeInfo.collectDtsInfo(track, data);\n\n    if (track) {\n      AUDIO_PROPERTIES.forEach(function(prop) {\n        track[prop] = data[prop];\n      });\n    }\n\n    // buffer audio data until end() is called\n    adtsFrames.push(data);\n  };\n\n  this.setEarliestDts = function(earliestDts) {\n    earliestAllowedDts = earliestDts - track.timelineStartInfo.baseMediaDecodeTime;\n  };\n\n  this.setVideoBaseMediaDecodeTime = function(baseMediaDecodeTime) {\n    videoBaseMediaDecodeTime = baseMediaDecodeTime;\n  };\n\n  this.setAudioAppendStart = function(timestamp) {\n    audioAppendStartTs = timestamp;\n  };\n\n  this.flush = function() {\n    var\n      frames,\n      moof,\n      mdat,\n      boxes;\n\n    // return early if no audio data has been observed\n    if (adtsFrames.length === 0) {\n      this.trigger('done', 'AudioSegmentStream');\n      return;\n    }\n\n    frames = this.trimAdtsFramesByEarliestDts_(adtsFrames);\n    track.baseMediaDecodeTime = trackDecodeInfo.calculateTrackBaseMediaDecodeTime(\n      track, options.keepOriginalTimestamps);\n\n    this.prefixWithSilence_(track, frames);\n\n    // we have to build the index from byte locations to\n    // samples (that is, adts frames) in the audio data\n    track.samples = this.generateSampleTable_(frames);\n\n    // concatenate the audio data to constuct the mdat\n    mdat = mp4.mdat(this.concatenateFrameData_(frames));\n\n    adtsFrames = [];\n\n    moof = mp4.moof(sequenceNumber, [track]);\n    boxes = new Uint8Array(moof.byteLength + mdat.byteLength);\n\n    // bump the sequence number for next time\n    sequenceNumber++;\n\n    boxes.set(moof);\n    boxes.set(mdat, moof.byteLength);\n\n    trackDecodeInfo.clearDtsInfo(track);\n\n    this.trigger('data', {track: track, boxes: boxes});\n    this.trigger('done', 'AudioSegmentStream');\n  };\n\n  // Possibly pad (prefix) the audio track with silence if appending this track\n  // would lead to the introduction of a gap in the audio buffer\n  this.prefixWithSilence_ = function(track, frames) {\n    var\n      baseMediaDecodeTimeTs,\n      frameDuration = 0,\n      audioGapDuration = 0,\n      audioFillFrameCount = 0,\n      audioFillDuration = 0,\n      silentFrame,\n      i;\n\n    if (!frames.length) {\n      return;\n    }\n\n    baseMediaDecodeTimeTs = clock.audioTsToVideoTs(track.baseMediaDecodeTime, track.samplerate);\n    // determine frame clock duration based on sample rate, round up to avoid overfills\n    frameDuration = Math.ceil(ONE_SECOND_IN_TS / (track.samplerate / 1024));\n\n    if (audioAppendStartTs && videoBaseMediaDecodeTime) {\n      // insert the shortest possible amount (audio gap or audio to video gap)\n      audioGapDuration =\n        baseMediaDecodeTimeTs - Math.max(audioAppendStartTs, videoBaseMediaDecodeTime);\n      // number of full frames in the audio gap\n      audioFillFrameCount = Math.floor(audioGapDuration / frameDuration);\n      audioFillDuration = audioFillFrameCount * frameDuration;\n    }\n\n    // don't attempt to fill gaps smaller than a single frame or larger\n    // than a half second\n    if (audioFillFrameCount < 1 || audioFillDuration > ONE_SECOND_IN_TS / 2) {\n      return;\n    }\n\n    silentFrame = coneOfSilence[track.samplerate];\n\n    if (!silentFrame) {\n      // we don't have a silent frame pregenerated for the sample rate, so use a frame\n      // from the content instead\n      silentFrame = frames[0].data;\n    }\n\n    for (i = 0; i < audioFillFrameCount; i++) {\n      frames.splice(i, 0, {\n        data: silentFrame\n      });\n    }\n\n    track.baseMediaDecodeTime -=\n      Math.floor(clock.videoTsToAudioTs(audioFillDuration, track.samplerate));\n  };\n\n  // If the audio segment extends before the earliest allowed dts\n  // value, remove AAC frames until starts at or after the earliest\n  // allowed DTS so that we don't end up with a negative baseMedia-\n  // DecodeTime for the audio track\n  this.trimAdtsFramesByEarliestDts_ = function(adtsFrames) {\n    if (track.minSegmentDts >= earliestAllowedDts) {\n      return adtsFrames;\n    }\n\n    // We will need to recalculate the earliest segment Dts\n    track.minSegmentDts = Infinity;\n\n    return adtsFrames.filter(function(currentFrame) {\n      // If this is an allowed frame, keep it and record it's Dts\n      if (currentFrame.dts >= earliestAllowedDts) {\n        track.minSegmentDts = Math.min(track.minSegmentDts, currentFrame.dts);\n        track.minSegmentPts = track.minSegmentDts;\n        return true;\n      }\n      // Otherwise, discard it\n      return false;\n    });\n  };\n\n  // generate the track's raw mdat data from an array of frames\n  this.generateSampleTable_ = function(frames) {\n    var\n      i,\n      currentFrame,\n      samples = [];\n\n    for (i = 0; i < frames.length; i++) {\n      currentFrame = frames[i];\n      samples.push({\n        size: currentFrame.data.byteLength,\n        duration: 1024 // For AAC audio, all samples contain 1024 samples\n      });\n    }\n    return samples;\n  };\n\n  // generate the track's sample table from an array of frames\n  this.concatenateFrameData_ = function(frames) {\n    var\n      i,\n      currentFrame,\n      dataOffset = 0,\n      data = new Uint8Array(sumFrameByteLengths(frames));\n\n    for (i = 0; i < frames.length; i++) {\n      currentFrame = frames[i];\n\n      data.set(currentFrame.data, dataOffset);\n      dataOffset += currentFrame.data.byteLength;\n    }\n    return data;\n  };\n};\n\nAudioSegmentStream.prototype = new Stream();\n\n/**\n * Constructs a single-track, ISO BMFF media segment from H264 data\n * events. The output of this stream can be fed to a SourceBuffer\n * configured with a suitable initialization segment.\n * @param track {object} track metadata configuration\n * @param options {object} transmuxer options object\n * @param options.alignGopsAtEnd {boolean} If true, start from the end of the\n *        gopsToAlignWith list when attempting to align gop pts\n * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps\n *        in the source; false to adjust the first segment to start at 0.\n */\nVideoSegmentStream = function(track, options) {\n  var\n    sequenceNumber = 0,\n    nalUnits = [],\n    gopsToAlignWith = [],\n    config,\n    pps;\n\n  options = options || {};\n\n  VideoSegmentStream.prototype.init.call(this);\n\n  delete track.minPTS;\n\n  this.gopCache_ = [];\n\n  /**\n    * Constructs a ISO BMFF segment given H264 nalUnits\n    * @param {Object} nalUnit A data event representing a nalUnit\n    * @param {String} nalUnit.nalUnitType\n    * @param {Object} nalUnit.config Properties for a mp4 track\n    * @param {Uint8Array} nalUnit.data The nalUnit bytes\n    * @see lib/codecs/h264.js\n   **/\n  this.push = function(nalUnit) {\n    trackDecodeInfo.collectDtsInfo(track, nalUnit);\n\n    // record the track config\n    if (nalUnit.nalUnitType === 'seq_parameter_set_rbsp' && !config) {\n      config = nalUnit.config;\n      track.sps = [nalUnit.data];\n\n      VIDEO_PROPERTIES.forEach(function(prop) {\n        track[prop] = config[prop];\n      }, this);\n    }\n\n    if (nalUnit.nalUnitType === 'pic_parameter_set_rbsp' &&\n        !pps) {\n      pps = nalUnit.data;\n      track.pps = [nalUnit.data];\n    }\n\n    // buffer video until flush() is called\n    nalUnits.push(nalUnit);\n  };\n\n  /**\n    * Pass constructed ISO BMFF track and boxes on to the\n    * next stream in the pipeline\n   **/\n  this.flush = function() {\n    var\n      frames,\n      gopForFusion,\n      gops,\n      moof,\n      mdat,\n      boxes;\n\n    // Throw away nalUnits at the start of the byte stream until\n    // we find the first AUD\n    while (nalUnits.length) {\n      if (nalUnits[0].nalUnitType === 'access_unit_delimiter_rbsp') {\n        break;\n      }\n      nalUnits.shift();\n    }\n\n    // Return early if no video data has been observed\n    if (nalUnits.length === 0) {\n      this.resetStream_();\n      this.trigger('done', 'VideoSegmentStream');\n      return;\n    }\n\n    // Organize the raw nal-units into arrays that represent\n    // higher-level constructs such as frames and gops\n    // (group-of-pictures)\n    frames = frameUtils.groupNalsIntoFrames(nalUnits);\n    gops = frameUtils.groupFramesIntoGops(frames);\n\n    // If the first frame of this fragment is not a keyframe we have\n    // a problem since MSE (on Chrome) requires a leading keyframe.\n    //\n    // We have two approaches to repairing this situation:\n    // 1) GOP-FUSION:\n    //    This is where we keep track of the GOPS (group-of-pictures)\n    //    from previous fragments and attempt to find one that we can\n    //    prepend to the current fragment in order to create a valid\n    //    fragment.\n    // 2) KEYFRAME-PULLING:\n    //    Here we search for the first keyframe in the fragment and\n    //    throw away all the frames between the start of the fragment\n    //    and that keyframe. We then extend the duration and pull the\n    //    PTS of the keyframe forward so that it covers the time range\n    //    of the frames that were disposed of.\n    //\n    // #1 is far prefereable over #2 which can cause \"stuttering\" but\n    // requires more things to be just right.\n    if (!gops[0][0].keyFrame) {\n      // Search for a gop for fusion from our gopCache\n      gopForFusion = this.getGopForFusion_(nalUnits[0], track);\n\n      if (gopForFusion) {\n        gops.unshift(gopForFusion);\n        // Adjust Gops' metadata to account for the inclusion of the\n        // new gop at the beginning\n        gops.byteLength += gopForFusion.byteLength;\n        gops.nalCount += gopForFusion.nalCount;\n        gops.pts = gopForFusion.pts;\n        gops.dts = gopForFusion.dts;\n        gops.duration += gopForFusion.duration;\n      } else {\n        // If we didn't find a candidate gop fall back to keyframe-pulling\n        gops = frameUtils.extendFirstKeyFrame(gops);\n      }\n    }\n\n    // Trim gops to align with gopsToAlignWith\n    if (gopsToAlignWith.length) {\n      var alignedGops;\n\n      if (options.alignGopsAtEnd) {\n        alignedGops = this.alignGopsAtEnd_(gops);\n      } else {\n        alignedGops = this.alignGopsAtStart_(gops);\n      }\n\n      if (!alignedGops) {\n        // save all the nals in the last GOP into the gop cache\n        this.gopCache_.unshift({\n          gop: gops.pop(),\n          pps: track.pps,\n          sps: track.sps\n        });\n\n        // Keep a maximum of 6 GOPs in the cache\n        this.gopCache_.length = Math.min(6, this.gopCache_.length);\n\n        // Clear nalUnits\n        nalUnits = [];\n\n        // return early no gops can be aligned with desired gopsToAlignWith\n        this.resetStream_();\n        this.trigger('done', 'VideoSegmentStream');\n        return;\n      }\n\n      // Some gops were trimmed. clear dts info so minSegmentDts and pts are correct\n      // when recalculated before sending off to CoalesceStream\n      trackDecodeInfo.clearDtsInfo(track);\n\n      gops = alignedGops;\n    }\n\n    trackDecodeInfo.collectDtsInfo(track, gops);\n\n    // First, we have to build the index from byte locations to\n    // samples (that is, frames) in the video data\n    track.samples = frameUtils.generateSampleTable(gops);\n\n    // Concatenate the video data and construct the mdat\n    mdat = mp4.mdat(frameUtils.concatenateNalData(gops));\n\n    track.baseMediaDecodeTime = trackDecodeInfo.calculateTrackBaseMediaDecodeTime(\n      track, options.keepOriginalTimestamps);\n\n    this.trigger('processedGopsInfo', gops.map(function(gop) {\n      return {\n        pts: gop.pts,\n        dts: gop.dts,\n        byteLength: gop.byteLength\n      };\n    }));\n\n    // save all the nals in the last GOP into the gop cache\n    this.gopCache_.unshift({\n      gop: gops.pop(),\n      pps: track.pps,\n      sps: track.sps\n    });\n\n    // Keep a maximum of 6 GOPs in the cache\n    this.gopCache_.length = Math.min(6, this.gopCache_.length);\n\n    // Clear nalUnits\n    nalUnits = [];\n\n    this.trigger('baseMediaDecodeTime', track.baseMediaDecodeTime);\n    this.trigger('timelineStartInfo', track.timelineStartInfo);\n\n    moof = mp4.moof(sequenceNumber, [track]);\n\n    // it would be great to allocate this array up front instead of\n    // throwing away hundreds of media segment fragments\n    boxes = new Uint8Array(moof.byteLength + mdat.byteLength);\n\n    // Bump the sequence number for next time\n    sequenceNumber++;\n\n    boxes.set(moof);\n    boxes.set(mdat, moof.byteLength);\n\n    this.trigger('data', {track: track, boxes: boxes});\n\n    this.resetStream_();\n\n    // Continue with the flush process now\n    this.trigger('done', 'VideoSegmentStream');\n  };\n\n  this.resetStream_ = function() {\n    trackDecodeInfo.clearDtsInfo(track);\n\n    // reset config and pps because they may differ across segments\n    // for instance, when we are rendition switching\n    config = undefined;\n    pps = undefined;\n  };\n\n  // Search for a candidate Gop for gop-fusion from the gop cache and\n  // return it or return null if no good candidate was found\n  this.getGopForFusion_ = function(nalUnit) {\n    var\n      halfSecond = 45000, // Half-a-second in a 90khz clock\n      allowableOverlap = 10000, // About 3 frames @ 30fps\n      nearestDistance = Infinity,\n      dtsDistance,\n      nearestGopObj,\n      currentGop,\n      currentGopObj,\n      i;\n\n    // Search for the GOP nearest to the beginning of this nal unit\n    for (i = 0; i < this.gopCache_.length; i++) {\n      currentGopObj = this.gopCache_[i];\n      currentGop = currentGopObj.gop;\n\n      // Reject Gops with different SPS or PPS\n      if (!(track.pps && arrayEquals(track.pps[0], currentGopObj.pps[0])) ||\n          !(track.sps && arrayEquals(track.sps[0], currentGopObj.sps[0]))) {\n        continue;\n      }\n\n      // Reject Gops that would require a negative baseMediaDecodeTime\n      if (currentGop.dts < track.timelineStartInfo.dts) {\n        continue;\n      }\n\n      // The distance between the end of the gop and the start of the nalUnit\n      dtsDistance = (nalUnit.dts - currentGop.dts) - currentGop.duration;\n\n      // Only consider GOPS that start before the nal unit and end within\n      // a half-second of the nal unit\n      if (dtsDistance >= -allowableOverlap &&\n          dtsDistance <= halfSecond) {\n\n        // Always use the closest GOP we found if there is more than\n        // one candidate\n        if (!nearestGopObj ||\n            nearestDistance > dtsDistance) {\n          nearestGopObj = currentGopObj;\n          nearestDistance = dtsDistance;\n        }\n      }\n    }\n\n    if (nearestGopObj) {\n      return nearestGopObj.gop;\n    }\n    return null;\n  };\n\n  // trim gop list to the first gop found that has a matching pts with a gop in the list\n  // of gopsToAlignWith starting from the START of the list\n  this.alignGopsAtStart_ = function(gops) {\n    var alignIndex, gopIndex, align, gop, byteLength, nalCount, duration, alignedGops;\n\n    byteLength = gops.byteLength;\n    nalCount = gops.nalCount;\n    duration = gops.duration;\n    alignIndex = gopIndex = 0;\n\n    while (alignIndex < gopsToAlignWith.length && gopIndex < gops.length) {\n      align = gopsToAlignWith[alignIndex];\n      gop = gops[gopIndex];\n\n      if (align.pts === gop.pts) {\n        break;\n      }\n\n      if (gop.pts > align.pts) {\n        // this current gop starts after the current gop we want to align on, so increment\n        // align index\n        alignIndex++;\n        continue;\n      }\n\n      // current gop starts before the current gop we want to align on. so increment gop\n      // index\n      gopIndex++;\n      byteLength -= gop.byteLength;\n      nalCount -= gop.nalCount;\n      duration -= gop.duration;\n    }\n\n    if (gopIndex === 0) {\n      // no gops to trim\n      return gops;\n    }\n\n    if (gopIndex === gops.length) {\n      // all gops trimmed, skip appending all gops\n      return null;\n    }\n\n    alignedGops = gops.slice(gopIndex);\n    alignedGops.byteLength = byteLength;\n    alignedGops.duration = duration;\n    alignedGops.nalCount = nalCount;\n    alignedGops.pts = alignedGops[0].pts;\n    alignedGops.dts = alignedGops[0].dts;\n\n    return alignedGops;\n  };\n\n  // trim gop list to the first gop found that has a matching pts with a gop in the list\n  // of gopsToAlignWith starting from the END of the list\n  this.alignGopsAtEnd_ = function(gops) {\n    var alignIndex, gopIndex, align, gop, alignEndIndex, matchFound;\n\n    alignIndex = gopsToAlignWith.length - 1;\n    gopIndex = gops.length - 1;\n    alignEndIndex = null;\n    matchFound = false;\n\n    while (alignIndex >= 0 && gopIndex >= 0) {\n      align = gopsToAlignWith[alignIndex];\n      gop = gops[gopIndex];\n\n      if (align.pts === gop.pts) {\n        matchFound = true;\n        break;\n      }\n\n      if (align.pts > gop.pts) {\n        alignIndex--;\n        continue;\n      }\n\n      if (alignIndex === gopsToAlignWith.length - 1) {\n        // gop.pts is greater than the last alignment candidate. If no match is found\n        // by the end of this loop, we still want to append gops that come after this\n        // point\n        alignEndIndex = gopIndex;\n      }\n\n      gopIndex--;\n    }\n\n    if (!matchFound && alignEndIndex === null) {\n      return null;\n    }\n\n    var trimIndex;\n\n    if (matchFound) {\n      trimIndex = gopIndex;\n    } else {\n      trimIndex = alignEndIndex;\n    }\n\n    if (trimIndex === 0) {\n      return gops;\n    }\n\n    var alignedGops = gops.slice(trimIndex);\n    var metadata = alignedGops.reduce(function(total, gop) {\n      total.byteLength += gop.byteLength;\n      total.duration += gop.duration;\n      total.nalCount += gop.nalCount;\n      return total;\n    }, { byteLength: 0, duration: 0, nalCount: 0 });\n\n    alignedGops.byteLength = metadata.byteLength;\n    alignedGops.duration = metadata.duration;\n    alignedGops.nalCount = metadata.nalCount;\n    alignedGops.pts = alignedGops[0].pts;\n    alignedGops.dts = alignedGops[0].dts;\n\n    return alignedGops;\n  };\n\n  this.alignGopsWith = function(newGopsToAlignWith) {\n    gopsToAlignWith = newGopsToAlignWith;\n  };\n};\n\nVideoSegmentStream.prototype = new Stream();\n\n/**\n * A Stream that can combine multiple streams (ie. audio & video)\n * into a single output segment for MSE. Also supports audio-only\n * and video-only streams.\n */\nCoalesceStream = function(options, metadataStream) {\n  // Number of Tracks per output segment\n  // If greater than 1, we combine multiple\n  // tracks into a single segment\n  this.numberOfTracks = 0;\n  this.metadataStream = metadataStream;\n\n  if (typeof options.remux !== 'undefined') {\n    this.remuxTracks = !!options.remux;\n  } else {\n    this.remuxTracks = true;\n  }\n\n  this.pendingTracks = [];\n  this.videoTrack = null;\n  this.pendingBoxes = [];\n  this.pendingCaptions = [];\n  this.pendingMetadata = [];\n  this.pendingBytes = 0;\n  this.emittedTracks = 0;\n\n  CoalesceStream.prototype.init.call(this);\n\n  // Take output from multiple\n  this.push = function(output) {\n    // buffer incoming captions until the associated video segment\n    // finishes\n    if (output.text) {\n      return this.pendingCaptions.push(output);\n    }\n    // buffer incoming id3 tags until the final flush\n    if (output.frames) {\n      return this.pendingMetadata.push(output);\n    }\n\n    // Add this track to the list of pending tracks and store\n    // important information required for the construction of\n    // the final segment\n    this.pendingTracks.push(output.track);\n    this.pendingBoxes.push(output.boxes);\n    this.pendingBytes += output.boxes.byteLength;\n\n    if (output.track.type === 'video') {\n      this.videoTrack = output.track;\n    }\n    if (output.track.type === 'audio') {\n      this.audioTrack = output.track;\n    }\n  };\n};\n\nCoalesceStream.prototype = new Stream();\nCoalesceStream.prototype.flush = function(flushSource) {\n  var\n    offset = 0,\n    event = {\n      captions: [],\n      captionStreams: {},\n      metadata: [],\n      info: {}\n    },\n    caption,\n    id3,\n    initSegment,\n    timelineStartPts = 0,\n    i;\n\n  if (this.pendingTracks.length < this.numberOfTracks) {\n    if (flushSource !== 'VideoSegmentStream' &&\n        flushSource !== 'AudioSegmentStream') {\n      // Return because we haven't received a flush from a data-generating\n      // portion of the segment (meaning that we have only recieved meta-data\n      // or captions.)\n      return;\n    } else if (this.remuxTracks) {\n      // Return until we have enough tracks from the pipeline to remux (if we\n      // are remuxing audio and video into a single MP4)\n      return;\n    } else if (this.pendingTracks.length === 0) {\n      // In the case where we receive a flush without any data having been\n      // received we consider it an emitted track for the purposes of coalescing\n      // `done` events.\n      // We do this for the case where there is an audio and video track in the\n      // segment but no audio data. (seen in several playlists with alternate\n      // audio tracks and no audio present in the main TS segments.)\n      this.emittedTracks++;\n\n      if (this.emittedTracks >= this.numberOfTracks) {\n        this.trigger('done');\n        this.emittedTracks = 0;\n      }\n      return;\n    }\n  }\n\n  if (this.videoTrack) {\n    timelineStartPts = this.videoTrack.timelineStartInfo.pts;\n    VIDEO_PROPERTIES.forEach(function(prop) {\n      event.info[prop] = this.videoTrack[prop];\n    }, this);\n  } else if (this.audioTrack) {\n    timelineStartPts = this.audioTrack.timelineStartInfo.pts;\n    AUDIO_PROPERTIES.forEach(function(prop) {\n      event.info[prop] = this.audioTrack[prop];\n    }, this);\n  }\n\n  if (this.pendingTracks.length === 1) {\n    event.type = this.pendingTracks[0].type;\n  } else {\n    event.type = 'combined';\n  }\n\n  this.emittedTracks += this.pendingTracks.length;\n\n  initSegment = mp4.initSegment(this.pendingTracks);\n\n  // Create a new typed array to hold the init segment\n  event.initSegment = new Uint8Array(initSegment.byteLength);\n\n  // Create an init segment containing a moov\n  // and track definitions\n  event.initSegment.set(initSegment);\n\n  // Create a new typed array to hold the moof+mdats\n  event.data = new Uint8Array(this.pendingBytes);\n\n  // Append each moof+mdat (one per track) together\n  for (i = 0; i < this.pendingBoxes.length; i++) {\n    event.data.set(this.pendingBoxes[i], offset);\n    offset += this.pendingBoxes[i].byteLength;\n  }\n\n  // Translate caption PTS times into second offsets into the\n  // video timeline for the segment, and add track info\n  for (i = 0; i < this.pendingCaptions.length; i++) {\n    caption = this.pendingCaptions[i];\n    caption.startTime = (caption.startPts - timelineStartPts);\n    caption.startTime /= 90e3;\n    caption.endTime = (caption.endPts - timelineStartPts);\n    caption.endTime /= 90e3;\n    event.captionStreams[caption.stream] = true;\n    event.captions.push(caption);\n  }\n\n  // Translate ID3 frame PTS times into second offsets into the\n  // video timeline for the segment\n  for (i = 0; i < this.pendingMetadata.length; i++) {\n    id3 = this.pendingMetadata[i];\n    id3.cueTime = (id3.pts - timelineStartPts);\n    id3.cueTime /= 90e3;\n    event.metadata.push(id3);\n  }\n  // We add this to every single emitted segment even though we only need\n  // it for the first\n  event.metadata.dispatchType = this.metadataStream.dispatchType;\n\n  // Reset stream state\n  this.pendingTracks.length = 0;\n  this.videoTrack = null;\n  this.pendingBoxes.length = 0;\n  this.pendingCaptions.length = 0;\n  this.pendingBytes = 0;\n  this.pendingMetadata.length = 0;\n\n  // Emit the built segment\n  this.trigger('data', event);\n\n  // Only emit `done` if all tracks have been flushed and emitted\n  if (this.emittedTracks >= this.numberOfTracks) {\n    this.trigger('done');\n    this.emittedTracks = 0;\n  }\n};\n/**\n * A Stream that expects MP2T binary data as input and produces\n * corresponding media segments, suitable for use with Media Source\n * Extension (MSE) implementations that support the ISO BMFF byte\n * stream format, like Chrome.\n */\nTransmuxer = function(options) {\n  var\n    self = this,\n    hasFlushed = true,\n    videoTrack,\n    audioTrack;\n\n  Transmuxer.prototype.init.call(this);\n\n  options = options || {};\n  this.baseMediaDecodeTime = options.baseMediaDecodeTime || 0;\n  this.transmuxPipeline_ = {};\n\n  this.setupAacPipeline = function() {\n    var pipeline = {};\n    this.transmuxPipeline_ = pipeline;\n\n    pipeline.type = 'aac';\n    pipeline.metadataStream = new m2ts.MetadataStream();\n\n    // set up the parsing pipeline\n    pipeline.aacStream = new AacStream();\n    pipeline.audioTimestampRolloverStream = new m2ts.TimestampRolloverStream('audio');\n    pipeline.timedMetadataTimestampRolloverStream = new m2ts.TimestampRolloverStream('timed-metadata');\n    pipeline.adtsStream = new AdtsStream();\n    pipeline.coalesceStream = new CoalesceStream(options, pipeline.metadataStream);\n    pipeline.headOfPipeline = pipeline.aacStream;\n\n    pipeline.aacStream\n      .pipe(pipeline.audioTimestampRolloverStream)\n      .pipe(pipeline.adtsStream);\n    pipeline.aacStream\n      .pipe(pipeline.timedMetadataTimestampRolloverStream)\n      .pipe(pipeline.metadataStream)\n      .pipe(pipeline.coalesceStream);\n\n    pipeline.metadataStream.on('timestamp', function(frame) {\n      pipeline.aacStream.setTimestamp(frame.timeStamp);\n    });\n\n    pipeline.aacStream.on('data', function(data) {\n      if (data.type === 'timed-metadata' && !pipeline.audioSegmentStream) {\n        audioTrack = audioTrack || {\n          timelineStartInfo: {\n            baseMediaDecodeTime: self.baseMediaDecodeTime\n          },\n          codec: 'adts',\n          type: 'audio'\n        };\n        // hook up the audio segment stream to the first track with aac data\n        pipeline.coalesceStream.numberOfTracks++;\n        pipeline.audioSegmentStream = new AudioSegmentStream(audioTrack, options);\n        // Set up the final part of the audio pipeline\n        pipeline.adtsStream\n          .pipe(pipeline.audioSegmentStream)\n          .pipe(pipeline.coalesceStream);\n      }\n    });\n\n    // Re-emit any data coming from the coalesce stream to the outside world\n    pipeline.coalesceStream.on('data', this.trigger.bind(this, 'data'));\n    // Let the consumer know we have finished flushing the entire pipeline\n    pipeline.coalesceStream.on('done', this.trigger.bind(this, 'done'));\n  };\n\n  this.setupTsPipeline = function() {\n    var pipeline = {};\n    this.transmuxPipeline_ = pipeline;\n\n    pipeline.type = 'ts';\n    pipeline.metadataStream = new m2ts.MetadataStream();\n\n    // set up the parsing pipeline\n    pipeline.packetStream = new m2ts.TransportPacketStream();\n    pipeline.parseStream = new m2ts.TransportParseStream();\n    pipeline.elementaryStream = new m2ts.ElementaryStream();\n    pipeline.videoTimestampRolloverStream = new m2ts.TimestampRolloverStream('video');\n    pipeline.audioTimestampRolloverStream = new m2ts.TimestampRolloverStream('audio');\n    pipeline.timedMetadataTimestampRolloverStream = new m2ts.TimestampRolloverStream('timed-metadata');\n    pipeline.adtsStream = new AdtsStream();\n    pipeline.h264Stream = new H264Stream();\n    pipeline.captionStream = new m2ts.CaptionStream();\n    pipeline.coalesceStream = new CoalesceStream(options, pipeline.metadataStream);\n    pipeline.headOfPipeline = pipeline.packetStream;\n\n    // disassemble MPEG2-TS packets into elementary streams\n    pipeline.packetStream\n      .pipe(pipeline.parseStream)\n      .pipe(pipeline.elementaryStream);\n\n    // !!THIS ORDER IS IMPORTANT!!\n    // demux the streams\n    pipeline.elementaryStream\n      .pipe(pipeline.videoTimestampRolloverStream)\n      .pipe(pipeline.h264Stream);\n    pipeline.elementaryStream\n      .pipe(pipeline.audioTimestampRolloverStream)\n      .pipe(pipeline.adtsStream);\n\n    pipeline.elementaryStream\n      .pipe(pipeline.timedMetadataTimestampRolloverStream)\n      .pipe(pipeline.metadataStream)\n      .pipe(pipeline.coalesceStream);\n\n    // Hook up CEA-608/708 caption stream\n    pipeline.h264Stream.pipe(pipeline.captionStream)\n      .pipe(pipeline.coalesceStream);\n\n    pipeline.elementaryStream.on('data', function(data) {\n      var i;\n\n      if (data.type === 'metadata') {\n        i = data.tracks.length;\n\n        // scan the tracks listed in the metadata\n        while (i--) {\n          if (!videoTrack && data.tracks[i].type === 'video') {\n            videoTrack = data.tracks[i];\n            videoTrack.timelineStartInfo.baseMediaDecodeTime = self.baseMediaDecodeTime;\n          } else if (!audioTrack && data.tracks[i].type === 'audio') {\n            audioTrack = data.tracks[i];\n            audioTrack.timelineStartInfo.baseMediaDecodeTime = self.baseMediaDecodeTime;\n          }\n        }\n\n        // hook up the video segment stream to the first track with h264 data\n        if (videoTrack && !pipeline.videoSegmentStream) {\n          pipeline.coalesceStream.numberOfTracks++;\n          pipeline.videoSegmentStream = new VideoSegmentStream(videoTrack, options);\n\n          pipeline.videoSegmentStream.on('timelineStartInfo', function(timelineStartInfo) {\n          // When video emits timelineStartInfo data after a flush, we forward that\n          // info to the AudioSegmentStream, if it exists, because video timeline\n          // data takes precedence.\n            if (audioTrack) {\n              audioTrack.timelineStartInfo = timelineStartInfo;\n              // On the first segment we trim AAC frames that exist before the\n              // very earliest DTS we have seen in video because Chrome will\n              // interpret any video track with a baseMediaDecodeTime that is\n              // non-zero as a gap.\n              pipeline.audioSegmentStream.setEarliestDts(timelineStartInfo.dts);\n            }\n          });\n\n          pipeline.videoSegmentStream.on('processedGopsInfo',\n            self.trigger.bind(self, 'gopInfo'));\n\n          pipeline.videoSegmentStream.on('baseMediaDecodeTime', function(baseMediaDecodeTime) {\n            if (audioTrack) {\n              pipeline.audioSegmentStream.setVideoBaseMediaDecodeTime(baseMediaDecodeTime);\n            }\n          });\n\n          // Set up the final part of the video pipeline\n          pipeline.h264Stream\n            .pipe(pipeline.videoSegmentStream)\n            .pipe(pipeline.coalesceStream);\n        }\n\n        if (audioTrack && !pipeline.audioSegmentStream) {\n          // hook up the audio segment stream to the first track with aac data\n          pipeline.coalesceStream.numberOfTracks++;\n          pipeline.audioSegmentStream = new AudioSegmentStream(audioTrack, options);\n\n          // Set up the final part of the audio pipeline\n          pipeline.adtsStream\n            .pipe(pipeline.audioSegmentStream)\n            .pipe(pipeline.coalesceStream);\n        }\n      }\n    });\n\n    // Re-emit any data coming from the coalesce stream to the outside world\n    pipeline.coalesceStream.on('data', this.trigger.bind(this, 'data'));\n    // Let the consumer know we have finished flushing the entire pipeline\n    pipeline.coalesceStream.on('done', this.trigger.bind(this, 'done'));\n  };\n\n  // hook up the segment streams once track metadata is delivered\n  this.setBaseMediaDecodeTime = function(baseMediaDecodeTime) {\n    var pipeline = this.transmuxPipeline_;\n\n    this.baseMediaDecodeTime = baseMediaDecodeTime;\n    if (audioTrack) {\n      audioTrack.timelineStartInfo.dts = undefined;\n      audioTrack.timelineStartInfo.pts = undefined;\n      trackDecodeInfo.clearDtsInfo(audioTrack);\n      audioTrack.timelineStartInfo.baseMediaDecodeTime = baseMediaDecodeTime;\n      if (pipeline.audioTimestampRolloverStream) {\n        pipeline.audioTimestampRolloverStream.discontinuity();\n      }\n    }\n    if (videoTrack) {\n      if (pipeline.videoSegmentStream) {\n        pipeline.videoSegmentStream.gopCache_ = [];\n        pipeline.videoTimestampRolloverStream.discontinuity();\n      }\n      videoTrack.timelineStartInfo.dts = undefined;\n      videoTrack.timelineStartInfo.pts = undefined;\n      trackDecodeInfo.clearDtsInfo(videoTrack);\n      pipeline.captionStream.reset();\n      videoTrack.timelineStartInfo.baseMediaDecodeTime = baseMediaDecodeTime;\n    }\n\n    if (pipeline.timedMetadataTimestampRolloverStream) {\n      pipeline.timedMetadataTimestampRolloverStream.discontinuity();\n    }\n  };\n\n  this.setAudioAppendStart = function(timestamp) {\n    if (audioTrack) {\n      this.transmuxPipeline_.audioSegmentStream.setAudioAppendStart(timestamp);\n    }\n  };\n\n  this.alignGopsWith = function(gopsToAlignWith) {\n    if (videoTrack && this.transmuxPipeline_.videoSegmentStream) {\n      this.transmuxPipeline_.videoSegmentStream.alignGopsWith(gopsToAlignWith);\n    }\n  };\n\n  // feed incoming data to the front of the parsing pipeline\n  this.push = function(data) {\n    if (hasFlushed) {\n      var isAac = isLikelyAacData(data);\n\n      if (isAac && this.transmuxPipeline_.type !== 'aac') {\n        this.setupAacPipeline();\n      } else if (!isAac && this.transmuxPipeline_.type !== 'ts') {\n        this.setupTsPipeline();\n      }\n      hasFlushed = false;\n    }\n    this.transmuxPipeline_.headOfPipeline.push(data);\n  };\n\n  // flush any buffered data\n  this.flush = function() {\n      hasFlushed = true;\n    // Start at the top of the pipeline and flush all pending work\n    this.transmuxPipeline_.headOfPipeline.flush();\n  };\n\n  // Caption data has to be reset when seeking outside buffered range\n  this.resetCaptions = function() {\n    if (this.transmuxPipeline_.captionStream) {\n      this.transmuxPipeline_.captionStream.reset();\n    }\n  };\n\n};\nTransmuxer.prototype = new Stream();\n\nmodule.exports = {\n  Transmuxer: Transmuxer,\n  VideoSegmentStream: VideoSegmentStream,\n  AudioSegmentStream: AudioSegmentStream,\n  AUDIO_PROPERTIES: AUDIO_PROPERTIES,\n  VIDEO_PROPERTIES: VIDEO_PROPERTIES\n};\n","/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg) && arg.length) {\n\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\tif (inner) {\n\t\t\t\t\tclasses.push(inner);\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","// see https://tools.ietf.org/html/rfc1808\n\n/* jshint ignore:start */\n(function(root) { \n/* jshint ignore:end */\n\n  var URL_REGEX = /^((?:[a-zA-Z0-9+\\-.]+:)?)(\\/\\/[^\\/?#]*)?((?:[^\\/\\?#]*\\/)*.*?)??(;.*?)?(\\?.*?)?(#.*?)?$/;\n  var FIRST_SEGMENT_REGEX = /^([^\\/?#]*)(.*)$/;\n  var SLASH_DOT_REGEX = /(?:\\/|^)\\.(?=\\/)/g;\n  var SLASH_DOT_DOT_REGEX = /(?:\\/|^)\\.\\.\\/(?!\\.\\.\\/).*?(?=\\/)/g;\n\n  var URLToolkit = { // jshint ignore:line\n    // If opts.alwaysNormalize is true then the path will always be normalized even when it starts with / or //\n    // E.g\n    // With opts.alwaysNormalize = false (default, spec compliant)\n    // http://a.com/b/cd + /e/f/../g => http://a.com/e/f/../g\n    // With opts.alwaysNormalize = true (not spec compliant)\n    // http://a.com/b/cd + /e/f/../g => http://a.com/e/g\n    buildAbsoluteURL: function(baseURL, relativeURL, opts) {\n      opts = opts || {};\n      // remove any remaining space and CRLF\n      baseURL = baseURL.trim();\n      relativeURL = relativeURL.trim();\n      if (!relativeURL) {\n        // 2a) If the embedded URL is entirely empty, it inherits the\n        // entire base URL (i.e., is set equal to the base URL)\n        // and we are done.\n        if (!opts.alwaysNormalize) {\n          return baseURL;\n        }\n        var basePartsForNormalise = URLToolkit.parseURL(baseURL);\n        if (!basePartsForNormalise) {\n          throw new Error('Error trying to parse base URL.');\n        }\n        basePartsForNormalise.path = URLToolkit.normalizePath(basePartsForNormalise.path);\n        return URLToolkit.buildURLFromParts(basePartsForNormalise);\n      }\n      var relativeParts = URLToolkit.parseURL(relativeURL);\n      if (!relativeParts) {\n        throw new Error('Error trying to parse relative URL.');\n      }\n      if (relativeParts.scheme) {\n        // 2b) If the embedded URL starts with a scheme name, it is\n        // interpreted as an absolute URL and we are done.\n        if (!opts.alwaysNormalize) {\n          return relativeURL;\n        }\n        relativeParts.path = URLToolkit.normalizePath(relativeParts.path);\n        return URLToolkit.buildURLFromParts(relativeParts);\n      }\n      var baseParts = URLToolkit.parseURL(baseURL);\n      if (!baseParts) {\n        throw new Error('Error trying to parse base URL.');\n      }\n      if (!baseParts.netLoc && baseParts.path && baseParts.path[0] !== '/') {\n        // If netLoc missing and path doesn't start with '/', assume everthing before the first '/' is the netLoc\n        // This causes 'example.com/a' to be handled as '//example.com/a' instead of '/example.com/a'\n        var pathParts = FIRST_SEGMENT_REGEX.exec(baseParts.path);\n        baseParts.netLoc = pathParts[1];\n        baseParts.path = pathParts[2];\n      }\n      if (baseParts.netLoc && !baseParts.path) {\n        baseParts.path = '/';\n      }\n      var builtParts = {\n        // 2c) Otherwise, the embedded URL inherits the scheme of\n        // the base URL.\n        scheme: baseParts.scheme,\n        netLoc: relativeParts.netLoc,\n        path: null,\n        params: relativeParts.params,\n        query: relativeParts.query,\n        fragment: relativeParts.fragment\n      };\n      if (!relativeParts.netLoc) {\n        // 3) If the embedded URL's <net_loc> is non-empty, we skip to\n        // Step 7.  Otherwise, the embedded URL inherits the <net_loc>\n        // (if any) of the base URL.\n        builtParts.netLoc = baseParts.netLoc;\n        // 4) If the embedded URL path is preceded by a slash \"/\", the\n        // path is not relative and we skip to Step 7.\n        if (relativeParts.path[0] !== '/') {\n          if (!relativeParts.path) {\n            // 5) If the embedded URL path is empty (and not preceded by a\n            // slash), then the embedded URL inherits the base URL path\n            builtParts.path = baseParts.path;\n            // 5a) if the embedded URL's <params> is non-empty, we skip to\n            // step 7; otherwise, it inherits the <params> of the base\n            // URL (if any) and\n            if (!relativeParts.params) {\n              builtParts.params = baseParts.params;\n              // 5b) if the embedded URL's <query> is non-empty, we skip to\n              // step 7; otherwise, it inherits the <query> of the base\n              // URL (if any) and we skip to step 7.\n              if (!relativeParts.query) {\n                builtParts.query = baseParts.query;\n              }\n            }\n          } else {\n            // 6) The last segment of the base URL's path (anything\n            // following the rightmost slash \"/\", or the entire path if no\n            // slash is present) is removed and the embedded URL's path is\n            // appended in its place.\n            var baseURLPath = baseParts.path;\n            var newPath = baseURLPath.substring(0, baseURLPath.lastIndexOf('/') + 1) + relativeParts.path;\n            builtParts.path = URLToolkit.normalizePath(newPath);\n          }\n        }\n      }\n      if (builtParts.path === null) {\n        builtParts.path = opts.alwaysNormalize ? URLToolkit.normalizePath(relativeParts.path) : relativeParts.path;\n      }\n      return URLToolkit.buildURLFromParts(builtParts);\n    },\n    parseURL: function(url) {\n      var parts = URL_REGEX.exec(url);\n      if (!parts) {\n        return null;\n      }\n      return {\n        scheme: parts[1] || '',\n        netLoc: parts[2] || '',\n        path: parts[3] || '',\n        params: parts[4] || '',\n        query: parts[5] || '',\n        fragment: parts[6] || ''\n      };\n    },\n    normalizePath: function(path) {\n      // The following operations are\n      // then applied, in order, to the new path:\n      // 6a) All occurrences of \"./\", where \".\" is a complete path\n      // segment, are removed.\n      // 6b) If the path ends with \".\" as a complete path segment,\n      // that \".\" is removed.\n      path = path.split('').reverse().join('').replace(SLASH_DOT_REGEX, '');\n      // 6c) All occurrences of \"<segment>/../\", where <segment> is a\n      // complete path segment not equal to \"..\", are removed.\n      // Removal of these path segments is performed iteratively,\n      // removing the leftmost matching pattern on each iteration,\n      // until no matching pattern remains.\n      // 6d) If the path ends with \"<segment>/..\", where <segment> is a\n      // complete path segment not equal to \"..\", that\n      // \"<segment>/..\" is removed.\n      while (path.length !== (path = path.replace(SLASH_DOT_DOT_REGEX, '')).length) {} // jshint ignore:line\n      return path.split('').reverse().join('');\n    },\n    buildURLFromParts: function(parts) {\n      return parts.scheme + parts.netLoc + parts.path + parts.params + parts.query + parts.fragment;\n    }\n  };\n\n/* jshint ignore:start */\n  if(typeof exports === 'object' && typeof module === 'object')\n    module.exports = URLToolkit;\n  else if(typeof define === 'function' && define.amd)\n    define([], function() { return URLToolkit; });\n  else if(typeof exports === 'object')\n    exports[\"URLToolkit\"] = URLToolkit;\n  else\n    root[\"URLToolkit\"] = URLToolkit;\n})(this);\n/* jshint ignore:end */\n","/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * Functions that generate fragmented MP4s suitable for use with Media\n * Source Extensions.\n */\n'use strict';\n\nvar UINT32_MAX = Math.pow(2, 32) - 1;\n\nvar box, dinf, esds, ftyp, mdat, mfhd, minf, moof, moov, mvex, mvhd,\n    trak, tkhd, mdia, mdhd, hdlr, sdtp, stbl, stsd, traf, trex,\n    trun, types, MAJOR_BRAND, MINOR_VERSION, AVC1_BRAND, VIDEO_HDLR,\n    AUDIO_HDLR, HDLR_TYPES, VMHD, SMHD, DREF, STCO, STSC, STSZ, STTS;\n\n// pre-calculate constants\n(function() {\n  var i;\n  types = {\n    avc1: [], // codingname\n    avcC: [],\n    btrt: [],\n    dinf: [],\n    dref: [],\n    esds: [],\n    ftyp: [],\n    hdlr: [],\n    mdat: [],\n    mdhd: [],\n    mdia: [],\n    mfhd: [],\n    minf: [],\n    moof: [],\n    moov: [],\n    mp4a: [], // codingname\n    mvex: [],\n    mvhd: [],\n    sdtp: [],\n    smhd: [],\n    stbl: [],\n    stco: [],\n    stsc: [],\n    stsd: [],\n    stsz: [],\n    stts: [],\n    styp: [],\n    tfdt: [],\n    tfhd: [],\n    traf: [],\n    trak: [],\n    trun: [],\n    trex: [],\n    tkhd: [],\n    vmhd: []\n  };\n\n  // In environments where Uint8Array is undefined (e.g., IE8), skip set up so that we\n  // don't throw an error\n  if (typeof Uint8Array === 'undefined') {\n    return;\n  }\n\n  for (i in types) {\n    if (types.hasOwnProperty(i)) {\n      types[i] = [\n        i.charCodeAt(0),\n        i.charCodeAt(1),\n        i.charCodeAt(2),\n        i.charCodeAt(3)\n      ];\n    }\n  }\n\n  MAJOR_BRAND = new Uint8Array([\n    'i'.charCodeAt(0),\n    's'.charCodeAt(0),\n    'o'.charCodeAt(0),\n    'm'.charCodeAt(0)\n  ]);\n  AVC1_BRAND = new Uint8Array([\n    'a'.charCodeAt(0),\n    'v'.charCodeAt(0),\n    'c'.charCodeAt(0),\n    '1'.charCodeAt(0)\n  ]);\n  MINOR_VERSION = new Uint8Array([0, 0, 0, 1]);\n  VIDEO_HDLR = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00, // pre_defined\n    0x76, 0x69, 0x64, 0x65, // handler_type: 'vide'\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x56, 0x69, 0x64, 0x65,\n    0x6f, 0x48, 0x61, 0x6e,\n    0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'VideoHandler'\n  ]);\n  AUDIO_HDLR = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00, // pre_defined\n    0x73, 0x6f, 0x75, 0x6e, // handler_type: 'soun'\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x53, 0x6f, 0x75, 0x6e,\n    0x64, 0x48, 0x61, 0x6e,\n    0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'SoundHandler'\n  ]);\n  HDLR_TYPES = {\n    video: VIDEO_HDLR,\n    audio: AUDIO_HDLR\n  };\n  DREF = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x01, // entry_count\n    0x00, 0x00, 0x00, 0x0c, // entry_size\n    0x75, 0x72, 0x6c, 0x20, // 'url' type\n    0x00, // version 0\n    0x00, 0x00, 0x01 // entry_flags\n  ]);\n  SMHD = new Uint8Array([\n    0x00,             // version\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00,       // balance, 0 means centered\n    0x00, 0x00        // reserved\n  ]);\n  STCO = new Uint8Array([\n    0x00, // version\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00 // entry_count\n  ]);\n  STSC = STCO;\n  STSZ = new Uint8Array([\n    0x00, // version\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00, // sample_size\n    0x00, 0x00, 0x00, 0x00 // sample_count\n  ]);\n  STTS = STCO;\n  VMHD = new Uint8Array([\n    0x00, // version\n    0x00, 0x00, 0x01, // flags\n    0x00, 0x00, // graphicsmode\n    0x00, 0x00,\n    0x00, 0x00,\n    0x00, 0x00 // opcolor\n  ]);\n}());\n\nbox = function(type) {\n  var\n    payload = [],\n    size = 0,\n    i,\n    result,\n    view;\n\n  for (i = 1; i < arguments.length; i++) {\n    payload.push(arguments[i]);\n  }\n\n  i = payload.length;\n\n  // calculate the total size we need to allocate\n  while (i--) {\n    size += payload[i].byteLength;\n  }\n  result = new Uint8Array(size + 8);\n  view = new DataView(result.buffer, result.byteOffset, result.byteLength);\n  view.setUint32(0, result.byteLength);\n  result.set(type, 4);\n\n  // copy the payload into the result\n  for (i = 0, size = 8; i < payload.length; i++) {\n    result.set(payload[i], size);\n    size += payload[i].byteLength;\n  }\n  return result;\n};\n\ndinf = function() {\n  return box(types.dinf, box(types.dref, DREF));\n};\n\nesds = function(track) {\n  return box(types.esds, new Uint8Array([\n    0x00, // version\n    0x00, 0x00, 0x00, // flags\n\n    // ES_Descriptor\n    0x03, // tag, ES_DescrTag\n    0x19, // length\n    0x00, 0x00, // ES_ID\n    0x00, // streamDependenceFlag, URL_flag, reserved, streamPriority\n\n    // DecoderConfigDescriptor\n    0x04, // tag, DecoderConfigDescrTag\n    0x11, // length\n    0x40, // object type\n    0x15,  // streamType\n    0x00, 0x06, 0x00, // bufferSizeDB\n    0x00, 0x00, 0xda, 0xc0, // maxBitrate\n    0x00, 0x00, 0xda, 0xc0, // avgBitrate\n\n    // DecoderSpecificInfo\n    0x05, // tag, DecoderSpecificInfoTag\n    0x02, // length\n    // ISO/IEC 14496-3, AudioSpecificConfig\n    // for samplingFrequencyIndex see ISO/IEC 13818-7:2006, 8.1.3.2.2, Table 35\n    (track.audioobjecttype << 3) | (track.samplingfrequencyindex >>> 1),\n    (track.samplingfrequencyindex << 7) | (track.channelcount << 3),\n    0x06, 0x01, 0x02 // GASpecificConfig\n  ]));\n};\n\nftyp = function() {\n  return box(types.ftyp, MAJOR_BRAND, MINOR_VERSION, MAJOR_BRAND, AVC1_BRAND);\n};\n\nhdlr = function(type) {\n  return box(types.hdlr, HDLR_TYPES[type]);\n};\nmdat = function(data) {\n  return box(types.mdat, data);\n};\nmdhd = function(track) {\n  var result = new Uint8Array([\n    0x00,                   // version 0\n    0x00, 0x00, 0x00,       // flags\n    0x00, 0x00, 0x00, 0x02, // creation_time\n    0x00, 0x00, 0x00, 0x03, // modification_time\n    0x00, 0x01, 0x5f, 0x90, // timescale, 90,000 \"ticks\" per second\n\n    (track.duration >>> 24) & 0xFF,\n    (track.duration >>> 16) & 0xFF,\n    (track.duration >>>  8) & 0xFF,\n    track.duration & 0xFF,  // duration\n    0x55, 0xc4,             // 'und' language (undetermined)\n    0x00, 0x00\n  ]);\n\n  // Use the sample rate from the track metadata, when it is\n  // defined. The sample rate can be parsed out of an ADTS header, for\n  // instance.\n  if (track.samplerate) {\n    result[12] = (track.samplerate >>> 24) & 0xFF;\n    result[13] = (track.samplerate >>> 16) & 0xFF;\n    result[14] = (track.samplerate >>>  8) & 0xFF;\n    result[15] = (track.samplerate)        & 0xFF;\n  }\n\n  return box(types.mdhd, result);\n};\nmdia = function(track) {\n  return box(types.mdia, mdhd(track), hdlr(track.type), minf(track));\n};\nmfhd = function(sequenceNumber) {\n  return box(types.mfhd, new Uint8Array([\n    0x00,\n    0x00, 0x00, 0x00, // flags\n    (sequenceNumber & 0xFF000000) >> 24,\n    (sequenceNumber & 0xFF0000) >> 16,\n    (sequenceNumber & 0xFF00) >> 8,\n    sequenceNumber & 0xFF // sequence_number\n  ]));\n};\nminf = function(track) {\n  return box(types.minf,\n             track.type === 'video' ? box(types.vmhd, VMHD) : box(types.smhd, SMHD),\n             dinf(),\n             stbl(track));\n};\nmoof = function(sequenceNumber, tracks) {\n  var\n    trackFragments = [],\n    i = tracks.length;\n  // build traf boxes for each track fragment\n  while (i--) {\n    trackFragments[i] = traf(tracks[i]);\n  }\n  return box.apply(null, [\n    types.moof,\n    mfhd(sequenceNumber)\n  ].concat(trackFragments));\n};\n/**\n * Returns a movie box.\n * @param tracks {array} the tracks associated with this movie\n * @see ISO/IEC 14496-12:2012(E), section 8.2.1\n */\nmoov = function(tracks) {\n  var\n    i = tracks.length,\n    boxes = [];\n\n  while (i--) {\n    boxes[i] = trak(tracks[i]);\n  }\n\n  return box.apply(null, [types.moov, mvhd(0xffffffff)].concat(boxes).concat(mvex(tracks)));\n};\nmvex = function(tracks) {\n  var\n    i = tracks.length,\n    boxes = [];\n\n  while (i--) {\n    boxes[i] = trex(tracks[i]);\n  }\n  return box.apply(null, [types.mvex].concat(boxes));\n};\nmvhd = function(duration) {\n  var\n    bytes = new Uint8Array([\n      0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x01, // creation_time\n      0x00, 0x00, 0x00, 0x02, // modification_time\n      0x00, 0x01, 0x5f, 0x90, // timescale, 90,000 \"ticks\" per second\n      (duration & 0xFF000000) >> 24,\n      (duration & 0xFF0000) >> 16,\n      (duration & 0xFF00) >> 8,\n      duration & 0xFF, // duration\n      0x00, 0x01, 0x00, 0x00, // 1.0 rate\n      0x01, 0x00, // 1.0 volume\n      0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x01, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, // pre_defined\n      0xff, 0xff, 0xff, 0xff // next_track_ID\n    ]);\n  return box(types.mvhd, bytes);\n};\n\nsdtp = function(track) {\n  var\n    samples = track.samples || [],\n    bytes = new Uint8Array(4 + samples.length),\n    flags,\n    i;\n\n  // leave the full box header (4 bytes) all zero\n\n  // write the sample table\n  for (i = 0; i < samples.length; i++) {\n    flags = samples[i].flags;\n\n    bytes[i + 4] = (flags.dependsOn << 4) |\n      (flags.isDependedOn << 2) |\n      (flags.hasRedundancy);\n  }\n\n  return box(types.sdtp,\n             bytes);\n};\n\nstbl = function(track) {\n  return box(types.stbl,\n             stsd(track),\n             box(types.stts, STTS),\n             box(types.stsc, STSC),\n             box(types.stsz, STSZ),\n             box(types.stco, STCO));\n};\n\n(function() {\n  var videoSample, audioSample;\n\n  stsd = function(track) {\n\n    return box(types.stsd, new Uint8Array([\n      0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x01\n    ]), track.type === 'video' ? videoSample(track) : audioSample(track));\n  };\n\n  videoSample = function(track) {\n    var\n      sps = track.sps || [],\n      pps = track.pps || [],\n      sequenceParameterSets = [],\n      pictureParameterSets = [],\n      i;\n\n    // assemble the SPSs\n    for (i = 0; i < sps.length; i++) {\n      sequenceParameterSets.push((sps[i].byteLength & 0xFF00) >>> 8);\n      sequenceParameterSets.push((sps[i].byteLength & 0xFF)); // sequenceParameterSetLength\n      sequenceParameterSets = sequenceParameterSets.concat(Array.prototype.slice.call(sps[i])); // SPS\n    }\n\n    // assemble the PPSs\n    for (i = 0; i < pps.length; i++) {\n      pictureParameterSets.push((pps[i].byteLength & 0xFF00) >>> 8);\n      pictureParameterSets.push((pps[i].byteLength & 0xFF));\n      pictureParameterSets = pictureParameterSets.concat(Array.prototype.slice.call(pps[i]));\n    }\n\n    return box(types.avc1, new Uint8Array([\n      0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, // data_reference_index\n      0x00, 0x00, // pre_defined\n      0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, // pre_defined\n      (track.width & 0xff00) >> 8,\n      track.width & 0xff, // width\n      (track.height & 0xff00) >> 8,\n      track.height & 0xff, // height\n      0x00, 0x48, 0x00, 0x00, // horizresolution\n      0x00, 0x48, 0x00, 0x00, // vertresolution\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, // frame_count\n      0x13,\n      0x76, 0x69, 0x64, 0x65,\n      0x6f, 0x6a, 0x73, 0x2d,\n      0x63, 0x6f, 0x6e, 0x74,\n      0x72, 0x69, 0x62, 0x2d,\n      0x68, 0x6c, 0x73, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, // compressorname\n      0x00, 0x18, // depth = 24\n      0x11, 0x11 // pre_defined = -1\n    ]), box(types.avcC, new Uint8Array([\n      0x01, // configurationVersion\n      track.profileIdc, // AVCProfileIndication\n      track.profileCompatibility, // profile_compatibility\n      track.levelIdc, // AVCLevelIndication\n      0xff // lengthSizeMinusOne, hard-coded to 4 bytes\n    ].concat([\n      sps.length // numOfSequenceParameterSets\n    ]).concat(sequenceParameterSets).concat([\n      pps.length // numOfPictureParameterSets\n    ]).concat(pictureParameterSets))), // \"PPS\"\n            box(types.btrt, new Uint8Array([\n              0x00, 0x1c, 0x9c, 0x80, // bufferSizeDB\n              0x00, 0x2d, 0xc6, 0xc0, // maxBitrate\n              0x00, 0x2d, 0xc6, 0xc0\n            ])) // avgBitrate\n              );\n  };\n\n  audioSample = function(track) {\n    return box(types.mp4a, new Uint8Array([\n\n      // SampleEntry, ISO/IEC 14496-12\n      0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, // data_reference_index\n\n      // AudioSampleEntry, ISO/IEC 14496-12\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      (track.channelcount & 0xff00) >> 8,\n      (track.channelcount & 0xff), // channelcount\n\n      (track.samplesize & 0xff00) >> 8,\n      (track.samplesize & 0xff), // samplesize\n      0x00, 0x00, // pre_defined\n      0x00, 0x00, // reserved\n\n      (track.samplerate & 0xff00) >> 8,\n      (track.samplerate & 0xff),\n      0x00, 0x00 // samplerate, 16.16\n\n      // MP4AudioSampleEntry, ISO/IEC 14496-14\n    ]), esds(track));\n  };\n}());\n\ntkhd = function(track) {\n  var result = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x07, // flags\n    0x00, 0x00, 0x00, 0x00, // creation_time\n    0x00, 0x00, 0x00, 0x00, // modification_time\n    (track.id & 0xFF000000) >> 24,\n    (track.id & 0xFF0000) >> 16,\n    (track.id & 0xFF00) >> 8,\n    track.id & 0xFF, // track_ID\n    0x00, 0x00, 0x00, 0x00, // reserved\n    (track.duration & 0xFF000000) >> 24,\n    (track.duration & 0xFF0000) >> 16,\n    (track.duration & 0xFF00) >> 8,\n    track.duration & 0xFF, // duration\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, // layer\n    0x00, 0x00, // alternate_group\n    0x01, 0x00, // non-audio track volume\n    0x00, 0x00, // reserved\n    0x00, 0x01, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x01, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\n    (track.width & 0xFF00) >> 8,\n    track.width & 0xFF,\n    0x00, 0x00, // width\n    (track.height & 0xFF00) >> 8,\n    track.height & 0xFF,\n    0x00, 0x00 // height\n  ]);\n\n  return box(types.tkhd, result);\n};\n\n/**\n * Generate a track fragment (traf) box. A traf box collects metadata\n * about tracks in a movie fragment (moof) box.\n */\ntraf = function(track) {\n  var trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun,\n      sampleDependencyTable, dataOffset,\n      upperWordBaseMediaDecodeTime, lowerWordBaseMediaDecodeTime;\n\n  trackFragmentHeader = box(types.tfhd, new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x3a, // flags\n    (track.id & 0xFF000000) >> 24,\n    (track.id & 0xFF0000) >> 16,\n    (track.id & 0xFF00) >> 8,\n    (track.id & 0xFF), // track_ID\n    0x00, 0x00, 0x00, 0x01, // sample_description_index\n    0x00, 0x00, 0x00, 0x00, // default_sample_duration\n    0x00, 0x00, 0x00, 0x00, // default_sample_size\n    0x00, 0x00, 0x00, 0x00  // default_sample_flags\n  ]));\n\n  upperWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime / (UINT32_MAX + 1));\n  lowerWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime % (UINT32_MAX + 1));\n\n  trackFragmentDecodeTime = box(types.tfdt, new Uint8Array([\n    0x01, // version 1\n    0x00, 0x00, 0x00, // flags\n    // baseMediaDecodeTime\n    (upperWordBaseMediaDecodeTime >>> 24) & 0xFF,\n    (upperWordBaseMediaDecodeTime >>> 16) & 0xFF,\n    (upperWordBaseMediaDecodeTime >>>  8) & 0xFF,\n    upperWordBaseMediaDecodeTime & 0xFF,\n    (lowerWordBaseMediaDecodeTime >>> 24) & 0xFF,\n    (lowerWordBaseMediaDecodeTime >>> 16) & 0xFF,\n    (lowerWordBaseMediaDecodeTime >>>  8) & 0xFF,\n    lowerWordBaseMediaDecodeTime & 0xFF\n  ]));\n\n  // the data offset specifies the number of bytes from the start of\n  // the containing moof to the first payload byte of the associated\n  // mdat\n  dataOffset = (32 + // tfhd\n                20 + // tfdt\n                8 +  // traf header\n                16 + // mfhd\n                8 +  // moof header\n                8);  // mdat header\n\n  // audio tracks require less metadata\n  if (track.type === 'audio') {\n    trackFragmentRun = trun(track, dataOffset);\n    return box(types.traf,\n               trackFragmentHeader,\n               trackFragmentDecodeTime,\n               trackFragmentRun);\n  }\n\n  // video tracks should contain an independent and disposable samples\n  // box (sdtp)\n  // generate one and adjust offsets to match\n  sampleDependencyTable = sdtp(track);\n  trackFragmentRun = trun(track,\n                          sampleDependencyTable.length + dataOffset);\n  return box(types.traf,\n             trackFragmentHeader,\n             trackFragmentDecodeTime,\n             trackFragmentRun,\n             sampleDependencyTable);\n};\n\n/**\n * Generate a track box.\n * @param track {object} a track definition\n * @return {Uint8Array} the track box\n */\ntrak = function(track) {\n  track.duration = track.duration || 0xffffffff;\n  return box(types.trak,\n             tkhd(track),\n             mdia(track));\n};\n\ntrex = function(track) {\n  var result = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    (track.id & 0xFF000000) >> 24,\n    (track.id & 0xFF0000) >> 16,\n    (track.id & 0xFF00) >> 8,\n    (track.id & 0xFF), // track_ID\n    0x00, 0x00, 0x00, 0x01, // default_sample_description_index\n    0x00, 0x00, 0x00, 0x00, // default_sample_duration\n    0x00, 0x00, 0x00, 0x00, // default_sample_size\n    0x00, 0x01, 0x00, 0x01 // default_sample_flags\n  ]);\n  // the last two bytes of default_sample_flags is the sample\n  // degradation priority, a hint about the importance of this sample\n  // relative to others. Lower the degradation priority for all sample\n  // types other than video.\n  if (track.type !== 'video') {\n    result[result.length - 1] = 0x00;\n  }\n\n  return box(types.trex, result);\n};\n\n(function() {\n  var audioTrun, videoTrun, trunHeader;\n\n  // This method assumes all samples are uniform. That is, if a\n  // duration is present for the first sample, it will be present for\n  // all subsequent samples.\n  // see ISO/IEC 14496-12:2012, Section 8.8.8.1\n  trunHeader = function(samples, offset) {\n    var durationPresent = 0, sizePresent = 0,\n        flagsPresent = 0, compositionTimeOffset = 0;\n\n    // trun flag constants\n    if (samples.length) {\n      if (samples[0].duration !== undefined) {\n        durationPresent = 0x1;\n      }\n      if (samples[0].size !== undefined) {\n        sizePresent = 0x2;\n      }\n      if (samples[0].flags !== undefined) {\n        flagsPresent = 0x4;\n      }\n      if (samples[0].compositionTimeOffset !== undefined) {\n        compositionTimeOffset = 0x8;\n      }\n    }\n\n    return [\n      0x00, // version 0\n      0x00,\n      durationPresent | sizePresent | flagsPresent | compositionTimeOffset,\n      0x01, // flags\n      (samples.length & 0xFF000000) >>> 24,\n      (samples.length & 0xFF0000) >>> 16,\n      (samples.length & 0xFF00) >>> 8,\n      samples.length & 0xFF, // sample_count\n      (offset & 0xFF000000) >>> 24,\n      (offset & 0xFF0000) >>> 16,\n      (offset & 0xFF00) >>> 8,\n      offset & 0xFF // data_offset\n    ];\n  };\n\n  videoTrun = function(track, offset) {\n    var bytes, samples, sample, i;\n\n    samples = track.samples || [];\n    offset += 8 + 12 + (16 * samples.length);\n\n    bytes = trunHeader(samples, offset);\n\n    for (i = 0; i < samples.length; i++) {\n      sample = samples[i];\n      bytes = bytes.concat([\n        (sample.duration & 0xFF000000) >>> 24,\n        (sample.duration & 0xFF0000) >>> 16,\n        (sample.duration & 0xFF00) >>> 8,\n        sample.duration & 0xFF, // sample_duration\n        (sample.size & 0xFF000000) >>> 24,\n        (sample.size & 0xFF0000) >>> 16,\n        (sample.size & 0xFF00) >>> 8,\n        sample.size & 0xFF, // sample_size\n        (sample.flags.isLeading << 2) | sample.flags.dependsOn,\n        (sample.flags.isDependedOn << 6) |\n          (sample.flags.hasRedundancy << 4) |\n          (sample.flags.paddingValue << 1) |\n          sample.flags.isNonSyncSample,\n        sample.flags.degradationPriority & 0xF0 << 8,\n        sample.flags.degradationPriority & 0x0F, // sample_flags\n        (sample.compositionTimeOffset & 0xFF000000) >>> 24,\n        (sample.compositionTimeOffset & 0xFF0000) >>> 16,\n        (sample.compositionTimeOffset & 0xFF00) >>> 8,\n        sample.compositionTimeOffset & 0xFF // sample_composition_time_offset\n      ]);\n    }\n    return box(types.trun, new Uint8Array(bytes));\n  };\n\n  audioTrun = function(track, offset) {\n    var bytes, samples, sample, i;\n\n    samples = track.samples || [];\n    offset += 8 + 12 + (8 * samples.length);\n\n    bytes = trunHeader(samples, offset);\n\n    for (i = 0; i < samples.length; i++) {\n      sample = samples[i];\n      bytes = bytes.concat([\n        (sample.duration & 0xFF000000) >>> 24,\n        (sample.duration & 0xFF0000) >>> 16,\n        (sample.duration & 0xFF00) >>> 8,\n        sample.duration & 0xFF, // sample_duration\n        (sample.size & 0xFF000000) >>> 24,\n        (sample.size & 0xFF0000) >>> 16,\n        (sample.size & 0xFF00) >>> 8,\n        sample.size & 0xFF]); // sample_size\n    }\n\n    return box(types.trun, new Uint8Array(bytes));\n  };\n\n  trun = function(track, offset) {\n    if (track.type === 'audio') {\n      return audioTrun(track, offset);\n    }\n\n    return videoTrun(track, offset);\n  };\n}());\n\nmodule.exports = {\n  ftyp: ftyp,\n  mdat: mdat,\n  moof: moof,\n  moov: moov,\n  initSegment: function(tracks) {\n    var\n      fileType = ftyp(),\n      movie = moov(tracks),\n      result;\n\n    result = new Uint8Array(fileType.byteLength + movie.byteLength);\n    result.set(fileType);\n    result.set(movie, fileType.byteLength);\n    return result;\n  }\n};\n","/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * Reads in-band caption information from a video elementary\n * stream. Captions must follow the CEA-708 standard for injection\n * into an MPEG-2 transport streams.\n * @see https://en.wikipedia.org/wiki/CEA-708\n * @see https://www.gpo.gov/fdsys/pkg/CFR-2007-title47-vol1/pdf/CFR-2007-title47-vol1-sec15-119.pdf\n */\n\n'use strict';\n\n// -----------------\n// Link To Transport\n// -----------------\n\nvar Stream = require('../utils/stream');\nvar cea708Parser = require('../tools/caption-packet-parser');\n\nvar CaptionStream = function() {\n\n  CaptionStream.prototype.init.call(this);\n\n  this.captionPackets_ = [];\n\n  this.ccStreams_ = [\n    new Cea608Stream(0, 0), // eslint-disable-line no-use-before-define\n    new Cea608Stream(0, 1), // eslint-disable-line no-use-before-define\n    new Cea608Stream(1, 0), // eslint-disable-line no-use-before-define\n    new Cea608Stream(1, 1) // eslint-disable-line no-use-before-define\n  ];\n\n  this.reset();\n\n  // forward data and done events from CCs to this CaptionStream\n  this.ccStreams_.forEach(function(cc) {\n    cc.on('data', this.trigger.bind(this, 'data'));\n    cc.on('done', this.trigger.bind(this, 'done'));\n  }, this);\n\n};\n\nCaptionStream.prototype = new Stream();\nCaptionStream.prototype.push = function(event) {\n  var sei, userData, newCaptionPackets;\n\n  // only examine SEI NALs\n  if (event.nalUnitType !== 'sei_rbsp') {\n    return;\n  }\n\n  // parse the sei\n  sei = cea708Parser.parseSei(event.escapedRBSP);\n\n  // ignore everything but user_data_registered_itu_t_t35\n  if (sei.payloadType !== cea708Parser.USER_DATA_REGISTERED_ITU_T_T35) {\n    return;\n  }\n\n  // parse out the user data payload\n  userData = cea708Parser.parseUserData(sei);\n\n  // ignore unrecognized userData\n  if (!userData) {\n    return;\n  }\n\n  // Sometimes, the same segment # will be downloaded twice. To stop the\n  // caption data from being processed twice, we track the latest dts we've\n  // received and ignore everything with a dts before that. However, since\n  // data for a specific dts can be split across packets on either side of\n  // a segment boundary, we need to make sure we *don't* ignore the packets\n  // from the *next* segment that have dts === this.latestDts_. By constantly\n  // tracking the number of packets received with dts === this.latestDts_, we\n  // know how many should be ignored once we start receiving duplicates.\n  if (event.dts < this.latestDts_) {\n    // We've started getting older data, so set the flag.\n    this.ignoreNextEqualDts_ = true;\n    return;\n  } else if ((event.dts === this.latestDts_) && (this.ignoreNextEqualDts_)) {\n    this.numSameDts_--;\n    if (!this.numSameDts_) {\n      // We've received the last duplicate packet, time to start processing again\n      this.ignoreNextEqualDts_ = false;\n    }\n    return;\n  }\n\n  // parse out CC data packets and save them for later\n  newCaptionPackets = cea708Parser.parseCaptionPackets(event.pts, userData);\n  this.captionPackets_ = this.captionPackets_.concat(newCaptionPackets);\n  if (this.latestDts_ !== event.dts) {\n    this.numSameDts_ = 0;\n  }\n  this.numSameDts_++;\n  this.latestDts_ = event.dts;\n};\n\nCaptionStream.prototype.flush = function() {\n  // make sure we actually parsed captions before proceeding\n  if (!this.captionPackets_.length) {\n    this.ccStreams_.forEach(function(cc) {\n      cc.flush();\n    }, this);\n    return;\n  }\n\n  // In Chrome, the Array#sort function is not stable so add a\n  // presortIndex that we can use to ensure we get a stable-sort\n  this.captionPackets_.forEach(function(elem, idx) {\n    elem.presortIndex = idx;\n  });\n\n  // sort caption byte-pairs based on their PTS values\n  this.captionPackets_.sort(function(a, b) {\n    if (a.pts === b.pts) {\n      return a.presortIndex - b.presortIndex;\n    }\n    return a.pts - b.pts;\n  });\n\n  this.captionPackets_.forEach(function(packet) {\n    if (packet.type < 2) {\n      // Dispatch packet to the right Cea608Stream\n      this.dispatchCea608Packet(packet);\n    }\n    // this is where an 'else' would go for a dispatching packets\n    // to a theoretical Cea708Stream that handles SERVICEn data\n  }, this);\n\n  this.captionPackets_.length = 0;\n  this.ccStreams_.forEach(function(cc) {\n    cc.flush();\n  }, this);\n  return;\n};\n\nCaptionStream.prototype.reset = function() {\n  this.latestDts_ = null;\n  this.ignoreNextEqualDts_ = false;\n  this.numSameDts_ = 0;\n  this.activeCea608Channel_ = [null, null];\n  this.ccStreams_.forEach(function(ccStream) {\n    ccStream.reset();\n  });\n};\n\nCaptionStream.prototype.dispatchCea608Packet = function(packet) {\n  // NOTE: packet.type is the CEA608 field\n  if (this.setsChannel1Active(packet)) {\n    this.activeCea608Channel_[packet.type] = 0;\n  } else if (this.setsChannel2Active(packet)) {\n    this.activeCea608Channel_[packet.type] = 1;\n  }\n  if (this.activeCea608Channel_[packet.type] === null) {\n    // If we haven't received anything to set the active channel, discard the\n    // data; we don't want jumbled captions\n    return;\n  }\n  this.ccStreams_[(packet.type << 1) + this.activeCea608Channel_[packet.type]].push(packet);\n};\n\nCaptionStream.prototype.setsChannel1Active = function(packet) {\n  return ((packet.ccData & 0x7800) === 0x1000);\n};\nCaptionStream.prototype.setsChannel2Active = function(packet) {\n  return ((packet.ccData & 0x7800) === 0x1800);\n};\n\n// ----------------------\n// Session to Application\n// ----------------------\n\n// This hash maps non-ASCII, special, and extended character codes to their\n// proper Unicode equivalent. The first keys that are only a single byte\n// are the non-standard ASCII characters, which simply map the CEA608 byte\n// to the standard ASCII/Unicode. The two-byte keys that follow are the CEA608\n// character codes, but have their MSB bitmasked with 0x03 so that a lookup\n// can be performed regardless of the field and data channel on which the\n// character code was received.\nvar CHARACTER_TRANSLATION = {\n  0x2a: 0xe1,     // á\n  0x5c: 0xe9,     // é\n  0x5e: 0xed,     // í\n  0x5f: 0xf3,     // ó\n  0x60: 0xfa,     // ú\n  0x7b: 0xe7,     // ç\n  0x7c: 0xf7,     // ÷\n  0x7d: 0xd1,     // Ñ\n  0x7e: 0xf1,     // ñ\n  0x7f: 0x2588,   // █\n  0x0130: 0xae,   // ®\n  0x0131: 0xb0,   // °\n  0x0132: 0xbd,   // ½\n  0x0133: 0xbf,   // ¿\n  0x0134: 0x2122, // ™\n  0x0135: 0xa2,   // ¢\n  0x0136: 0xa3,   // £\n  0x0137: 0x266a, // ♪\n  0x0138: 0xe0,   // à\n  0x0139: 0xa0,   //\n  0x013a: 0xe8,   // è\n  0x013b: 0xe2,   // â\n  0x013c: 0xea,   // ê\n  0x013d: 0xee,   // î\n  0x013e: 0xf4,   // ô\n  0x013f: 0xfb,   // û\n  0x0220: 0xc1,   // Á\n  0x0221: 0xc9,   // É\n  0x0222: 0xd3,   // Ó\n  0x0223: 0xda,   // Ú\n  0x0224: 0xdc,   // Ü\n  0x0225: 0xfc,   // ü\n  0x0226: 0x2018, // ‘\n  0x0227: 0xa1,   // ¡\n  0x0228: 0x2a,   // *\n  0x0229: 0x27,   // '\n  0x022a: 0x2014, // —\n  0x022b: 0xa9,   // ©\n  0x022c: 0x2120, // ℠\n  0x022d: 0x2022, // •\n  0x022e: 0x201c, // “\n  0x022f: 0x201d, // ”\n  0x0230: 0xc0,   // À\n  0x0231: 0xc2,   // Â\n  0x0232: 0xc7,   // Ç\n  0x0233: 0xc8,   // È\n  0x0234: 0xca,   // Ê\n  0x0235: 0xcb,   // Ë\n  0x0236: 0xeb,   // ë\n  0x0237: 0xce,   // Î\n  0x0238: 0xcf,   // Ï\n  0x0239: 0xef,   // ï\n  0x023a: 0xd4,   // Ô\n  0x023b: 0xd9,   // Ù\n  0x023c: 0xf9,   // ù\n  0x023d: 0xdb,   // Û\n  0x023e: 0xab,   // «\n  0x023f: 0xbb,   // »\n  0x0320: 0xc3,   // Ã\n  0x0321: 0xe3,   // ã\n  0x0322: 0xcd,   // Í\n  0x0323: 0xcc,   // Ì\n  0x0324: 0xec,   // ì\n  0x0325: 0xd2,   // Ò\n  0x0326: 0xf2,   // ò\n  0x0327: 0xd5,   // Õ\n  0x0328: 0xf5,   // õ\n  0x0329: 0x7b,   // {\n  0x032a: 0x7d,   // }\n  0x032b: 0x5c,   // \\\n  0x032c: 0x5e,   // ^\n  0x032d: 0x5f,   // _\n  0x032e: 0x7c,   // |\n  0x032f: 0x7e,   // ~\n  0x0330: 0xc4,   // Ä\n  0x0331: 0xe4,   // ä\n  0x0332: 0xd6,   // Ö\n  0x0333: 0xf6,   // ö\n  0x0334: 0xdf,   // ß\n  0x0335: 0xa5,   // ¥\n  0x0336: 0xa4,   // ¤\n  0x0337: 0x2502, // │\n  0x0338: 0xc5,   // Å\n  0x0339: 0xe5,   // å\n  0x033a: 0xd8,   // Ø\n  0x033b: 0xf8,   // ø\n  0x033c: 0x250c, // ┌\n  0x033d: 0x2510, // ┐\n  0x033e: 0x2514, // └\n  0x033f: 0x2518  // ┘\n};\n\nvar getCharFromCode = function(code) {\n  if (code === null) {\n    return '';\n  }\n  code = CHARACTER_TRANSLATION[code] || code;\n  return String.fromCharCode(code);\n};\n\n// the index of the last row in a CEA-608 display buffer\nvar BOTTOM_ROW = 14;\n\n// This array is used for mapping PACs -> row #, since there's no way of\n// getting it through bit logic.\nvar ROWS = [0x1100, 0x1120, 0x1200, 0x1220, 0x1500, 0x1520, 0x1600, 0x1620,\n            0x1700, 0x1720, 0x1000, 0x1300, 0x1320, 0x1400, 0x1420];\n\n// CEA-608 captions are rendered onto a 34x15 matrix of character\n// cells. The \"bottom\" row is the last element in the outer array.\nvar createDisplayBuffer = function() {\n  var result = [], i = BOTTOM_ROW + 1;\n  while (i--) {\n    result.push('');\n  }\n  return result;\n};\n\nvar Cea608Stream = function(field, dataChannel) {\n  Cea608Stream.prototype.init.call(this);\n\n  this.field_ = field || 0;\n  this.dataChannel_ = dataChannel || 0;\n\n  this.name_ = 'CC' + (((this.field_ << 1) | this.dataChannel_) + 1);\n\n  this.setConstants();\n  this.reset();\n\n  this.push = function(packet) {\n    var data, swap, char0, char1, text;\n    // remove the parity bits\n    data = packet.ccData & 0x7f7f;\n\n    // ignore duplicate control codes; the spec demands they're sent twice\n    if (data === this.lastControlCode_) {\n      this.lastControlCode_ = null;\n      return;\n    }\n\n    // Store control codes\n    if ((data & 0xf000) === 0x1000) {\n      this.lastControlCode_ = data;\n    } else if (data !== this.PADDING_) {\n      this.lastControlCode_ = null;\n    }\n\n    char0 = data >>> 8;\n    char1 = data & 0xff;\n\n    if (data === this.PADDING_) {\n      return;\n\n    } else if (data === this.RESUME_CAPTION_LOADING_) {\n      this.mode_ = 'popOn';\n\n    } else if (data === this.END_OF_CAPTION_) {\n      // If an EOC is received while in paint-on mode, the displayed caption\n      // text should be swapped to non-displayed memory as if it was a pop-on\n      // caption. Because of that, we should explicitly switch back to pop-on\n      // mode\n      this.mode_ = 'popOn';\n      this.clearFormatting(packet.pts);\n      // if a caption was being displayed, it's gone now\n      this.flushDisplayed(packet.pts);\n\n      // flip memory\n      swap = this.displayed_;\n      this.displayed_ = this.nonDisplayed_;\n      this.nonDisplayed_ = swap;\n\n      // start measuring the time to display the caption\n      this.startPts_ = packet.pts;\n\n    } else if (data === this.ROLL_UP_2_ROWS_) {\n      this.rollUpRows_ = 2;\n      this.setRollUp(packet.pts);\n    } else if (data === this.ROLL_UP_3_ROWS_) {\n      this.rollUpRows_ = 3;\n      this.setRollUp(packet.pts);\n    } else if (data === this.ROLL_UP_4_ROWS_) {\n      this.rollUpRows_ = 4;\n      this.setRollUp(packet.pts);\n    } else if (data === this.CARRIAGE_RETURN_) {\n      this.clearFormatting(packet.pts);\n      this.flushDisplayed(packet.pts);\n      this.shiftRowsUp_();\n      this.startPts_ = packet.pts;\n\n    } else if (data === this.BACKSPACE_) {\n      if (this.mode_ === 'popOn') {\n        this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);\n      } else {\n        this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1);\n      }\n    } else if (data === this.ERASE_DISPLAYED_MEMORY_) {\n      this.flushDisplayed(packet.pts);\n      this.displayed_ = createDisplayBuffer();\n    } else if (data === this.ERASE_NON_DISPLAYED_MEMORY_) {\n      this.nonDisplayed_ = createDisplayBuffer();\n\n    } else if (data === this.RESUME_DIRECT_CAPTIONING_) {\n      if (this.mode_ !== 'paintOn') {\n        // NOTE: This should be removed when proper caption positioning is\n        // implemented\n        this.flushDisplayed(packet.pts);\n        this.displayed_ = createDisplayBuffer();\n      }\n      this.mode_ = 'paintOn';\n      this.startPts_ = packet.pts;\n\n    // Append special characters to caption text\n    } else if (this.isSpecialCharacter(char0, char1)) {\n      // Bitmask char0 so that we can apply character transformations\n      // regardless of field and data channel.\n      // Then byte-shift to the left and OR with char1 so we can pass the\n      // entire character code to `getCharFromCode`.\n      char0 = (char0 & 0x03) << 8;\n      text = getCharFromCode(char0 | char1);\n      this[this.mode_](packet.pts, text);\n      this.column_++;\n\n    // Append extended characters to caption text\n    } else if (this.isExtCharacter(char0, char1)) {\n      // Extended characters always follow their \"non-extended\" equivalents.\n      // IE if a \"è\" is desired, you'll always receive \"eè\"; non-compliant\n      // decoders are supposed to drop the \"è\", while compliant decoders\n      // backspace the \"e\" and insert \"è\".\n\n      // Delete the previous character\n      if (this.mode_ === 'popOn') {\n        this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);\n      } else {\n        this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1);\n      }\n\n      // Bitmask char0 so that we can apply character transformations\n      // regardless of field and data channel.\n      // Then byte-shift to the left and OR with char1 so we can pass the\n      // entire character code to `getCharFromCode`.\n      char0 = (char0 & 0x03) << 8;\n      text = getCharFromCode(char0 | char1);\n      this[this.mode_](packet.pts, text);\n      this.column_++;\n\n    // Process mid-row codes\n    } else if (this.isMidRowCode(char0, char1)) {\n      // Attributes are not additive, so clear all formatting\n      this.clearFormatting(packet.pts);\n\n      // According to the standard, mid-row codes\n      // should be replaced with spaces, so add one now\n      this[this.mode_](packet.pts, ' ');\n      this.column_++;\n\n      if ((char1 & 0xe) === 0xe) {\n        this.addFormatting(packet.pts, ['i']);\n      }\n\n      if ((char1 & 0x1) === 0x1) {\n        this.addFormatting(packet.pts, ['u']);\n      }\n\n    // Detect offset control codes and adjust cursor\n    } else if (this.isOffsetControlCode(char0, char1)) {\n      // Cursor position is set by indent PAC (see below) in 4-column\n      // increments, with an additional offset code of 1-3 to reach any\n      // of the 32 columns specified by CEA-608. So all we need to do\n      // here is increment the column cursor by the given offset.\n      this.column_ += (char1 & 0x03);\n\n    // Detect PACs (Preamble Address Codes)\n    } else if (this.isPAC(char0, char1)) {\n\n      // There's no logic for PAC -> row mapping, so we have to just\n      // find the row code in an array and use its index :(\n      var row = ROWS.indexOf(data & 0x1f20);\n\n      // Configure the caption window if we're in roll-up mode\n      if (this.mode_ === 'rollUp') {\n        this.setRollUp(packet.pts, row);\n      }\n\n      if (row !== this.row_) {\n        // formatting is only persistent for current row\n        this.clearFormatting(packet.pts);\n        this.row_ = row;\n      }\n      // All PACs can apply underline, so detect and apply\n      // (All odd-numbered second bytes set underline)\n      if ((char1 & 0x1) && (this.formatting_.indexOf('u') === -1)) {\n          this.addFormatting(packet.pts, ['u']);\n      }\n\n      if ((data & 0x10) === 0x10) {\n        // We've got an indent level code. Each successive even number\n        // increments the column cursor by 4, so we can get the desired\n        // column position by bit-shifting to the right (to get n/2)\n        // and multiplying by 4.\n        this.column_ = ((data & 0xe) >> 1) * 4;\n      }\n\n      if (this.isColorPAC(char1)) {\n        // it's a color code, though we only support white, which\n        // can be either normal or italicized. white italics can be\n        // either 0x4e or 0x6e depending on the row, so we just\n        // bitwise-and with 0xe to see if italics should be turned on\n        if ((char1 & 0xe) === 0xe) {\n          this.addFormatting(packet.pts, ['i']);\n        }\n      }\n\n    // We have a normal character in char0, and possibly one in char1\n    } else if (this.isNormalChar(char0)) {\n      if (char1 === 0x00) {\n        char1 = null;\n      }\n      text = getCharFromCode(char0);\n      text += getCharFromCode(char1);\n      this[this.mode_](packet.pts, text);\n      this.column_ += text.length;\n\n    } // finish data processing\n\n  };\n};\nCea608Stream.prototype = new Stream();\n// Trigger a cue point that captures the current state of the\n// display buffer\nCea608Stream.prototype.flushDisplayed = function(pts) {\n  var content = this.displayed_\n    // remove spaces from the start and end of the string\n    .map(function(row) {\n      return row.trim();\n    })\n    // combine all text rows to display in one cue\n    .join('\\n')\n    // and remove blank rows from the start and end, but not the middle\n    .replace(/^\\n+|\\n+$/g, '');\n\n  if (content.length) {\n    this.trigger('data', {\n      startPts: this.startPts_,\n      endPts: pts,\n      text: content,\n      stream: this.name_\n    });\n  }\n};\n\n/**\n * Zero out the data, used for startup and on seek\n */\nCea608Stream.prototype.reset = function() {\n  this.mode_ = 'popOn';\n  // When in roll-up mode, the index of the last row that will\n  // actually display captions. If a caption is shifted to a row\n  // with a lower index than this, it is cleared from the display\n  // buffer\n  this.topRow_ = 0;\n  this.startPts_ = 0;\n  this.displayed_ = createDisplayBuffer();\n  this.nonDisplayed_ = createDisplayBuffer();\n  this.lastControlCode_ = null;\n\n  // Track row and column for proper line-breaking and spacing\n  this.column_ = 0;\n  this.row_ = BOTTOM_ROW;\n  this.rollUpRows_ = 2;\n\n  // This variable holds currently-applied formatting\n  this.formatting_ = [];\n};\n\n/**\n * Sets up control code and related constants for this instance\n */\nCea608Stream.prototype.setConstants = function() {\n  // The following attributes have these uses:\n  // ext_ :    char0 for mid-row codes, and the base for extended\n  //           chars (ext_+0, ext_+1, and ext_+2 are char0s for\n  //           extended codes)\n  // control_: char0 for control codes, except byte-shifted to the\n  //           left so that we can do this.control_ | CONTROL_CODE\n  // offset_:  char0 for tab offset codes\n  //\n  // It's also worth noting that control codes, and _only_ control codes,\n  // differ between field 1 and field2. Field 2 control codes are always\n  // their field 1 value plus 1. That's why there's the \"| field\" on the\n  // control value.\n  if (this.dataChannel_ === 0) {\n    this.BASE_     = 0x10;\n    this.EXT_      = 0x11;\n    this.CONTROL_  = (0x14 | this.field_) << 8;\n    this.OFFSET_   = 0x17;\n  } else if (this.dataChannel_ === 1) {\n    this.BASE_     = 0x18;\n    this.EXT_      = 0x19;\n    this.CONTROL_  = (0x1c | this.field_) << 8;\n    this.OFFSET_   = 0x1f;\n  }\n\n  // Constants for the LSByte command codes recognized by Cea608Stream. This\n  // list is not exhaustive. For a more comprehensive listing and semantics see\n  // http://www.gpo.gov/fdsys/pkg/CFR-2010-title47-vol1/pdf/CFR-2010-title47-vol1-sec15-119.pdf\n  // Padding\n  this.PADDING_                    = 0x0000;\n  // Pop-on Mode\n  this.RESUME_CAPTION_LOADING_     = this.CONTROL_ | 0x20;\n  this.END_OF_CAPTION_             = this.CONTROL_ | 0x2f;\n  // Roll-up Mode\n  this.ROLL_UP_2_ROWS_             = this.CONTROL_ | 0x25;\n  this.ROLL_UP_3_ROWS_             = this.CONTROL_ | 0x26;\n  this.ROLL_UP_4_ROWS_             = this.CONTROL_ | 0x27;\n  this.CARRIAGE_RETURN_            = this.CONTROL_ | 0x2d;\n  // paint-on mode\n  this.RESUME_DIRECT_CAPTIONING_   = this.CONTROL_ | 0x29;\n  // Erasure\n  this.BACKSPACE_                  = this.CONTROL_ | 0x21;\n  this.ERASE_DISPLAYED_MEMORY_     = this.CONTROL_ | 0x2c;\n  this.ERASE_NON_DISPLAYED_MEMORY_ = this.CONTROL_ | 0x2e;\n};\n\n/**\n * Detects if the 2-byte packet data is a special character\n *\n * Special characters have a second byte in the range 0x30 to 0x3f,\n * with the first byte being 0x11 (for data channel 1) or 0x19 (for\n * data channel 2).\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are an special character\n */\nCea608Stream.prototype.isSpecialCharacter = function(char0, char1) {\n  return (char0 === this.EXT_ && char1 >= 0x30 && char1 <= 0x3f);\n};\n\n/**\n * Detects if the 2-byte packet data is an extended character\n *\n * Extended characters have a second byte in the range 0x20 to 0x3f,\n * with the first byte being 0x12 or 0x13 (for data channel 1) or\n * 0x1a or 0x1b (for data channel 2).\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are an extended character\n */\nCea608Stream.prototype.isExtCharacter = function(char0, char1) {\n  return ((char0 === (this.EXT_ + 1) || char0 === (this.EXT_ + 2)) &&\n    (char1 >= 0x20 && char1 <= 0x3f));\n};\n\n/**\n * Detects if the 2-byte packet is a mid-row code\n *\n * Mid-row codes have a second byte in the range 0x20 to 0x2f, with\n * the first byte being 0x11 (for data channel 1) or 0x19 (for data\n * channel 2).\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are a mid-row code\n */\nCea608Stream.prototype.isMidRowCode = function(char0, char1) {\n  return (char0 === this.EXT_ && (char1 >= 0x20 && char1 <= 0x2f));\n};\n\n/**\n * Detects if the 2-byte packet is an offset control code\n *\n * Offset control codes have a second byte in the range 0x21 to 0x23,\n * with the first byte being 0x17 (for data channel 1) or 0x1f (for\n * data channel 2).\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are an offset control code\n */\nCea608Stream.prototype.isOffsetControlCode = function(char0, char1) {\n  return (char0 === this.OFFSET_ && (char1 >= 0x21 && char1 <= 0x23));\n};\n\n/**\n * Detects if the 2-byte packet is a Preamble Address Code\n *\n * PACs have a first byte in the range 0x10 to 0x17 (for data channel 1)\n * or 0x18 to 0x1f (for data channel 2), with the second byte in the\n * range 0x40 to 0x7f.\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are a PAC\n */\nCea608Stream.prototype.isPAC = function(char0, char1) {\n  return (char0 >= this.BASE_ && char0 < (this.BASE_ + 8) &&\n    (char1 >= 0x40 && char1 <= 0x7f));\n};\n\n/**\n * Detects if a packet's second byte is in the range of a PAC color code\n *\n * PAC color codes have the second byte be in the range 0x40 to 0x4f, or\n * 0x60 to 0x6f.\n *\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the byte is a color PAC\n */\nCea608Stream.prototype.isColorPAC = function(char1) {\n  return ((char1 >= 0x40 && char1 <= 0x4f) || (char1 >= 0x60 && char1 <= 0x7f));\n};\n\n/**\n * Detects if a single byte is in the range of a normal character\n *\n * Normal text bytes are in the range 0x20 to 0x7f.\n *\n * @param  {Integer} char  The byte\n * @return {Boolean}       Whether the byte is a normal character\n */\nCea608Stream.prototype.isNormalChar = function(char) {\n  return (char >= 0x20 && char <= 0x7f);\n};\n\n/**\n * Configures roll-up\n *\n * @param  {Integer} pts         Current PTS\n * @param  {Integer} newBaseRow  Used by PACs to slide the current window to\n *                               a new position\n */\nCea608Stream.prototype.setRollUp = function(pts, newBaseRow) {\n  // Reset the base row to the bottom row when switching modes\n  if (this.mode_ !== 'rollUp') {\n    this.row_ = BOTTOM_ROW;\n    this.mode_ = 'rollUp';\n    // Spec says to wipe memories when switching to roll-up\n    this.flushDisplayed(pts);\n    this.nonDisplayed_ = createDisplayBuffer();\n    this.displayed_ = createDisplayBuffer();\n  }\n\n  if (newBaseRow !== undefined && newBaseRow !== this.row_) {\n    // move currently displayed captions (up or down) to the new base row\n    for (var i = 0; i < this.rollUpRows_; i++) {\n      this.displayed_[newBaseRow - i] = this.displayed_[this.row_ - i];\n      this.displayed_[this.row_ - i] = '';\n    }\n  }\n\n  if (newBaseRow === undefined) {\n    newBaseRow = this.row_;\n  }\n  this.topRow_ = newBaseRow - this.rollUpRows_ + 1;\n};\n\n// Adds the opening HTML tag for the passed character to the caption text,\n// and keeps track of it for later closing\nCea608Stream.prototype.addFormatting = function(pts, format) {\n  this.formatting_ = this.formatting_.concat(format);\n  var text = format.reduce(function(text, format) {\n    return text + '<' + format + '>';\n  }, '');\n  this[this.mode_](pts, text);\n};\n\n// Adds HTML closing tags for current formatting to caption text and\n// clears remembered formatting\nCea608Stream.prototype.clearFormatting = function(pts) {\n  if (!this.formatting_.length) {\n    return;\n  }\n  var text = this.formatting_.reverse().reduce(function(text, format) {\n    return text + '</' + format + '>';\n  }, '');\n  this.formatting_ = [];\n  this[this.mode_](pts, text);\n};\n\n// Mode Implementations\nCea608Stream.prototype.popOn = function(pts, text) {\n  var baseRow = this.nonDisplayed_[this.row_];\n\n  // buffer characters\n  baseRow += text;\n  this.nonDisplayed_[this.row_] = baseRow;\n};\n\nCea608Stream.prototype.rollUp = function(pts, text) {\n  var baseRow = this.displayed_[this.row_];\n\n  baseRow += text;\n  this.displayed_[this.row_] = baseRow;\n\n};\n\nCea608Stream.prototype.shiftRowsUp_ = function() {\n  var i;\n  // clear out inactive rows\n  for (i = 0; i < this.topRow_; i++) {\n    this.displayed_[i] = '';\n  }\n  for (i = this.row_ + 1; i < BOTTOM_ROW + 1; i++) {\n    this.displayed_[i] = '';\n  }\n  // shift displayed rows up\n  for (i = this.topRow_; i < this.row_; i++) {\n    this.displayed_[i] = this.displayed_[i + 1];\n  }\n  // clear out the bottom row\n  this.displayed_[this.row_] = '';\n};\n\nCea608Stream.prototype.paintOn = function(pts, text) {\n  var baseRow = this.displayed_[this.row_];\n\n  baseRow += text;\n  this.displayed_[this.row_] = baseRow;\n};\n\n// exports\nmodule.exports = {\n  CaptionStream: CaptionStream,\n  Cea608Stream: Cea608Stream\n};\n","/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * Reads in-band caption information from a video elementary\n * stream. Captions must follow the CEA-708 standard for injection\n * into an MPEG-2 transport streams.\n * @see https://en.wikipedia.org/wiki/CEA-708\n * @see https://www.gpo.gov/fdsys/pkg/CFR-2007-title47-vol1/pdf/CFR-2007-title47-vol1-sec15-119.pdf\n */\n\n'use strict';\n\n// Supplemental enhancement information (SEI) NAL units have a\n// payload type field to indicate how they are to be\n// interpreted. CEAS-708 caption content is always transmitted with\n// payload type 0x04.\nvar USER_DATA_REGISTERED_ITU_T_T35 = 4,\n    RBSP_TRAILING_BITS = 128;\n\n/**\n  * Parse a supplemental enhancement information (SEI) NAL unit.\n  * Stops parsing once a message of type ITU T T35 has been found.\n  *\n  * @param bytes {Uint8Array} the bytes of a SEI NAL unit\n  * @return {object} the parsed SEI payload\n  * @see Rec. ITU-T H.264, 7.3.2.3.1\n  */\nvar parseSei = function(bytes) {\n  var\n    i = 0,\n    result = {\n      payloadType: -1,\n      payloadSize: 0\n    },\n    payloadType = 0,\n    payloadSize = 0;\n\n  // go through the sei_rbsp parsing each each individual sei_message\n  while (i < bytes.byteLength) {\n    // stop once we have hit the end of the sei_rbsp\n    if (bytes[i] === RBSP_TRAILING_BITS) {\n      break;\n    }\n\n    // Parse payload type\n    while (bytes[i] === 0xFF) {\n      payloadType += 255;\n      i++;\n    }\n    payloadType += bytes[i++];\n\n    // Parse payload size\n    while (bytes[i] === 0xFF) {\n      payloadSize += 255;\n      i++;\n    }\n    payloadSize += bytes[i++];\n\n    // this sei_message is a 608/708 caption so save it and break\n    // there can only ever be one caption message in a frame's sei\n    if (!result.payload && payloadType === USER_DATA_REGISTERED_ITU_T_T35) {\n      result.payloadType = payloadType;\n      result.payloadSize = payloadSize;\n      result.payload = bytes.subarray(i, i + payloadSize);\n      break;\n    }\n\n    // skip the payload and parse the next message\n    i += payloadSize;\n    payloadType = 0;\n    payloadSize = 0;\n  }\n\n  return result;\n};\n\n// see ANSI/SCTE 128-1 (2013), section 8.1\nvar parseUserData = function(sei) {\n  // itu_t_t35_contry_code must be 181 (United States) for\n  // captions\n  if (sei.payload[0] !== 181) {\n    return null;\n  }\n\n  // itu_t_t35_provider_code should be 49 (ATSC) for captions\n  if (((sei.payload[1] << 8) | sei.payload[2]) !== 49) {\n    return null;\n  }\n\n  // the user_identifier should be \"GA94\" to indicate ATSC1 data\n  if (String.fromCharCode(sei.payload[3],\n                          sei.payload[4],\n                          sei.payload[5],\n                          sei.payload[6]) !== 'GA94') {\n    return null;\n  }\n\n  // finally, user_data_type_code should be 0x03 for caption data\n  if (sei.payload[7] !== 0x03) {\n    return null;\n  }\n\n  // return the user_data_type_structure and strip the trailing\n  // marker bits\n  return sei.payload.subarray(8, sei.payload.length - 1);\n};\n\n// see CEA-708-D, section 4.4\nvar parseCaptionPackets = function(pts, userData) {\n  var results = [], i, count, offset, data;\n\n  // if this is just filler, return immediately\n  if (!(userData[0] & 0x40)) {\n    return results;\n  }\n\n  // parse out the cc_data_1 and cc_data_2 fields\n  count = userData[0] & 0x1f;\n  for (i = 0; i < count; i++) {\n    offset = i * 3;\n    data = {\n      type: userData[offset + 2] & 0x03,\n      pts: pts\n    };\n\n    // capture cc data when cc_valid is 1\n    if (userData[offset + 2] & 0x04) {\n      data.ccData = (userData[offset + 3] << 8) | userData[offset + 4];\n      results.push(data);\n    }\n  }\n  return results;\n};\n\nvar discardEmulationPreventionBytes = function(data) {\n    var\n      length = data.byteLength,\n      emulationPreventionBytesPositions = [],\n      i = 1,\n      newLength, newData;\n\n    // Find all `Emulation Prevention Bytes`\n    while (i < length - 2) {\n      if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {\n        emulationPreventionBytesPositions.push(i + 2);\n        i += 2;\n      } else {\n        i++;\n      }\n    }\n\n    // If no Emulation Prevention Bytes were found just return the original\n    // array\n    if (emulationPreventionBytesPositions.length === 0) {\n      return data;\n    }\n\n    // Create a new array to hold the NAL unit data\n    newLength = length - emulationPreventionBytesPositions.length;\n    newData = new Uint8Array(newLength);\n    var sourceIndex = 0;\n\n    for (i = 0; i < newLength; sourceIndex++, i++) {\n      if (sourceIndex === emulationPreventionBytesPositions[0]) {\n        // Skip this byte\n        sourceIndex++;\n        // Remove this position index\n        emulationPreventionBytesPositions.shift();\n      }\n      newData[i] = data[sourceIndex];\n    }\n\n    return newData;\n};\n\n// exports\nmodule.exports = {\n  parseSei: parseSei,\n  parseUserData: parseUserData,\n  parseCaptionPackets: parseCaptionPackets,\n  discardEmulationPreventionBytes: discardEmulationPreventionBytes,\n  USER_DATA_REGISTERED_ITU_T_T35: USER_DATA_REGISTERED_ITU_T_T35\n};\n","/**\n * mux.js\n *\n * Copyright (c) 2016 Brightcove\n * All rights reserved.\n *\n * Accepts program elementary stream (PES) data events and corrects\n * decode and presentation time stamps to account for a rollover\n * of the 33 bit value.\n */\n\n'use strict';\n\nvar Stream = require('../utils/stream');\n\nvar MAX_TS = 8589934592;\n\nvar RO_THRESH = 4294967296;\n\nvar handleRollover = function(value, reference) {\n  var direction = 1;\n\n  if (value > reference) {\n    // If the current timestamp value is greater than our reference timestamp and we detect a\n    // timestamp rollover, this means the roll over is happening in the opposite direction.\n    // Example scenario: Enter a long stream/video just after a rollover occurred. The reference\n    // point will be set to a small number, e.g. 1. The user then seeks backwards over the\n    // rollover point. In loading this segment, the timestamp values will be very large,\n    // e.g. 2^33 - 1. Since this comes before the data we loaded previously, we want to adjust\n    // the time stamp to be `value - 2^33`.\n    direction = -1;\n  }\n\n  // Note: A seek forwards or back that is greater than the RO_THRESH (2^32, ~13 hours) will\n  // cause an incorrect adjustment.\n  while (Math.abs(reference - value) > RO_THRESH) {\n    value += (direction * MAX_TS);\n  }\n\n  return value;\n};\n\nvar TimestampRolloverStream = function(type) {\n  var lastDTS, referenceDTS;\n\n  TimestampRolloverStream.prototype.init.call(this);\n\n  this.type_ = type;\n\n  this.push = function(data) {\n    if (data.type !== this.type_) {\n      return;\n    }\n\n    if (referenceDTS === undefined) {\n      referenceDTS = data.dts;\n    }\n\n    data.dts = handleRollover(data.dts, referenceDTS);\n    data.pts = handleRollover(data.pts, referenceDTS);\n\n    lastDTS = data.dts;\n\n    this.trigger('data', data);\n  };\n\n  this.flush = function() {\n    referenceDTS = lastDTS;\n    this.trigger('done');\n  };\n\n  this.discontinuity = function() {\n    referenceDTS = void 0;\n    lastDTS = void 0;\n  };\n\n};\n\nTimestampRolloverStream.prototype = new Stream();\n\nmodule.exports = {\n  TimestampRolloverStream: TimestampRolloverStream,\n  handleRollover: handleRollover\n};\n","var topLevel = typeof global !== 'undefined' ? global :\n    typeof window !== 'undefined' ? window : {}\nvar minDoc = require('min-document');\n\nvar doccy;\n\nif (typeof document !== 'undefined') {\n    doccy = document;\n} else {\n    doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];\n\n    if (!doccy) {\n        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;\n    }\n}\n\nmodule.exports = doccy;\n","function clean (s) {\n  return s.replace(/\\n\\r?\\s*/g, '')\n}\n\n\nmodule.exports = function tsml (sa) {\n  var s = ''\n    , i = 0\n\n  for (; i < arguments.length; i++)\n    s += clean(sa[i]) + (arguments[i + 1] || '')\n\n  return s\n}","\"use strict\";\nvar window = require(\"global/window\")\nvar isFunction = require(\"is-function\")\nvar parseHeaders = require(\"parse-headers\")\nvar xtend = require(\"xtend\")\n\nmodule.exports = createXHR\ncreateXHR.XMLHttpRequest = window.XMLHttpRequest || noop\ncreateXHR.XDomainRequest = \"withCredentials\" in (new createXHR.XMLHttpRequest()) ? createXHR.XMLHttpRequest : window.XDomainRequest\n\nforEachArray([\"get\", \"put\", \"post\", \"patch\", \"head\", \"delete\"], function(method) {\n    createXHR[method === \"delete\" ? \"del\" : method] = function(uri, options, callback) {\n        options = initParams(uri, options, callback)\n        options.method = method.toUpperCase()\n        return _createXHR(options)\n    }\n})\n\nfunction forEachArray(array, iterator) {\n    for (var i = 0; i < array.length; i++) {\n        iterator(array[i])\n    }\n}\n\nfunction isEmpty(obj){\n    for(var i in obj){\n        if(obj.hasOwnProperty(i)) return false\n    }\n    return true\n}\n\nfunction initParams(uri, options, callback) {\n    var params = uri\n\n    if (isFunction(options)) {\n        callback = options\n        if (typeof uri === \"string\") {\n            params = {uri:uri}\n        }\n    } else {\n        params = xtend(options, {uri: uri})\n    }\n\n    params.callback = callback\n    return params\n}\n\nfunction createXHR(uri, options, callback) {\n    options = initParams(uri, options, callback)\n    return _createXHR(options)\n}\n\nfunction _createXHR(options) {\n    if(typeof options.callback === \"undefined\"){\n        throw new Error(\"callback argument missing\")\n    }\n\n    var called = false\n    var callback = function cbOnce(err, response, body){\n        if(!called){\n            called = true\n            options.callback(err, response, body)\n        }\n    }\n\n    function readystatechange() {\n        if (xhr.readyState === 4) {\n            setTimeout(loadFunc, 0)\n        }\n    }\n\n    function getBody() {\n        // Chrome with requestType=blob throws errors arround when even testing access to responseText\n        var body = undefined\n\n        if (xhr.response) {\n            body = xhr.response\n        } else {\n            body = xhr.responseText || getXml(xhr)\n        }\n\n        if (isJson) {\n            try {\n                body = JSON.parse(body)\n            } catch (e) {}\n        }\n\n        return body\n    }\n\n    function errorFunc(evt) {\n        clearTimeout(timeoutTimer)\n        if(!(evt instanceof Error)){\n            evt = new Error(\"\" + (evt || \"Unknown XMLHttpRequest Error\") )\n        }\n        evt.statusCode = 0\n        return callback(evt, failureResponse)\n    }\n\n    // will load the data & process the response in a special response object\n    function loadFunc() {\n        if (aborted) return\n        var status\n        clearTimeout(timeoutTimer)\n        if(options.useXDR && xhr.status===undefined) {\n            //IE8 CORS GET successful response doesn't have a status field, but body is fine\n            status = 200\n        } else {\n            status = (xhr.status === 1223 ? 204 : xhr.status)\n        }\n        var response = failureResponse\n        var err = null\n\n        if (status !== 0){\n            response = {\n                body: getBody(),\n                statusCode: status,\n                method: method,\n                headers: {},\n                url: uri,\n                rawRequest: xhr\n            }\n            if(xhr.getAllResponseHeaders){ //remember xhr can in fact be XDR for CORS in IE\n                response.headers = parseHeaders(xhr.getAllResponseHeaders())\n            }\n        } else {\n            err = new Error(\"Internal XMLHttpRequest Error\")\n        }\n        return callback(err, response, response.body)\n    }\n\n    var xhr = options.xhr || null\n\n    if (!xhr) {\n        if (options.cors || options.useXDR) {\n            xhr = new createXHR.XDomainRequest()\n        }else{\n            xhr = new createXHR.XMLHttpRequest()\n        }\n    }\n\n    var key\n    var aborted\n    var uri = xhr.url = options.uri || options.url\n    var method = xhr.method = options.method || \"GET\"\n    var body = options.body || options.data\n    var headers = xhr.headers = options.headers || {}\n    var sync = !!options.sync\n    var isJson = false\n    var timeoutTimer\n    var failureResponse = {\n        body: undefined,\n        headers: {},\n        statusCode: 0,\n        method: method,\n        url: uri,\n        rawRequest: xhr\n    }\n\n    if (\"json\" in options && options.json !== false) {\n        isJson = true\n        headers[\"accept\"] || headers[\"Accept\"] || (headers[\"Accept\"] = \"application/json\") //Don't override existing accept header declared by user\n        if (method !== \"GET\" && method !== \"HEAD\") {\n            headers[\"content-type\"] || headers[\"Content-Type\"] || (headers[\"Content-Type\"] = \"application/json\") //Don't override existing accept header declared by user\n            body = JSON.stringify(options.json === true ? body : options.json)\n        }\n    }\n\n    xhr.onreadystatechange = readystatechange\n    xhr.onload = loadFunc\n    xhr.onerror = errorFunc\n    // IE9 must have onprogress be set to a unique function.\n    xhr.onprogress = function () {\n        // IE must die\n    }\n    xhr.onabort = function(){\n        aborted = true;\n    }\n    xhr.ontimeout = errorFunc\n    xhr.open(method, uri, !sync, options.username, options.password)\n    //has to be after open\n    if(!sync) {\n        xhr.withCredentials = !!options.withCredentials\n    }\n    // Cannot set timeout with sync request\n    // not setting timeout on the xhr object, because of old webkits etc. not handling that correctly\n    // both npm's request and jquery 1.x use this kind of timeout, so this is being consistent\n    if (!sync && options.timeout > 0 ) {\n        timeoutTimer = setTimeout(function(){\n            if (aborted) return\n            aborted = true//IE9 may still call readystatechange\n            xhr.abort(\"timeout\")\n            var e = new Error(\"XMLHttpRequest timeout\")\n            e.code = \"ETIMEDOUT\"\n            errorFunc(e)\n        }, options.timeout )\n    }\n\n    if (xhr.setRequestHeader) {\n        for(key in headers){\n            if(headers.hasOwnProperty(key)){\n                xhr.setRequestHeader(key, headers[key])\n            }\n        }\n    } else if (options.headers && !isEmpty(options.headers)) {\n        throw new Error(\"Headers cannot be set on an XDomainRequest object\")\n    }\n\n    if (\"responseType\" in options) {\n        xhr.responseType = options.responseType\n    }\n\n    if (\"beforeSend\" in options &&\n        typeof options.beforeSend === \"function\"\n    ) {\n        options.beforeSend(xhr)\n    }\n\n    // Microsoft Edge browser sends \"undefined\" when send is called with undefined value.\n    // XMLHttpRequest spec says to pass null as body to indicate no body\n    // See https://github.com/naugtur/xhr/issues/100.\n    xhr.send(body || null)\n\n    return xhr\n\n\n}\n\nfunction getXml(xhr) {\n    if (xhr.responseType === \"document\") {\n        return xhr.responseXML\n    }\n    var firefoxBugTakenEffect = xhr.responseXML && xhr.responseXML.documentElement.nodeName === \"parsererror\"\n    if (xhr.responseType === \"\" && !firefoxBugTakenEffect) {\n        return xhr.responseXML\n    }\n\n    return null\n}\n\nfunction noop() {}\n","module.exports = isFunction\n\nvar toString = Object.prototype.toString\n\nfunction isFunction (fn) {\n  var string = toString.call(fn)\n  return string === '[object Function]' ||\n    (typeof fn === 'function' && string !== '[object RegExp]') ||\n    (typeof window !== 'undefined' &&\n     // IE8 and below\n     (fn === window.setTimeout ||\n      fn === window.alert ||\n      fn === window.confirm ||\n      fn === window.prompt))\n};\n","var trim = require('trim')\n  , forEach = require('for-each')\n  , isArray = function(arg) {\n      return Object.prototype.toString.call(arg) === '[object Array]';\n    }\n\nmodule.exports = function (headers) {\n  if (!headers)\n    return {}\n\n  var result = {}\n\n  forEach(\n      trim(headers).split('\\n')\n    , function (row) {\n        var index = row.indexOf(':')\n          , key = trim(row.slice(0, index)).toLowerCase()\n          , value = trim(row.slice(index + 1))\n\n        if (typeof(result[key]) === 'undefined') {\n          result[key] = value\n        } else if (isArray(result[key])) {\n          result[key].push(value)\n        } else {\n          result[key] = [ result[key], value ]\n        }\n      }\n  )\n\n  return result\n}","\nexports = module.exports = trim;\n\nfunction trim(str){\n  return str.replace(/^\\s*|\\s*$/g, '');\n}\n\nexports.left = function(str){\n  return str.replace(/^\\s*/, '');\n};\n\nexports.right = function(str){\n  return str.replace(/\\s*$/, '');\n};\n","'use strict';\n\nvar isCallable = require('is-callable');\n\nvar toStr = Object.prototype.toString;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar forEachArray = function forEachArray(array, iterator, receiver) {\n    for (var i = 0, len = array.length; i < len; i++) {\n        if (hasOwnProperty.call(array, i)) {\n            if (receiver == null) {\n                iterator(array[i], i, array);\n            } else {\n                iterator.call(receiver, array[i], i, array);\n            }\n        }\n    }\n};\n\nvar forEachString = function forEachString(string, iterator, receiver) {\n    for (var i = 0, len = string.length; i < len; i++) {\n        // no such thing as a sparse string.\n        if (receiver == null) {\n            iterator(string.charAt(i), i, string);\n        } else {\n            iterator.call(receiver, string.charAt(i), i, string);\n        }\n    }\n};\n\nvar forEachObject = function forEachObject(object, iterator, receiver) {\n    for (var k in object) {\n        if (hasOwnProperty.call(object, k)) {\n            if (receiver == null) {\n                iterator(object[k], k, object);\n            } else {\n                iterator.call(receiver, object[k], k, object);\n            }\n        }\n    }\n};\n\nvar forEach = function forEach(list, iterator, thisArg) {\n    if (!isCallable(iterator)) {\n        throw new TypeError('iterator must be a function');\n    }\n\n    var receiver;\n    if (arguments.length >= 3) {\n        receiver = thisArg;\n    }\n\n    if (toStr.call(list) === '[object Array]') {\n        forEachArray(list, iterator, receiver);\n    } else if (typeof list === 'string') {\n        forEachString(list, iterator, receiver);\n    } else {\n        forEachObject(list, iterator, receiver);\n    }\n};\n\nmodule.exports = forEach;\n","'use strict';\n\nvar fnToStr = Function.prototype.toString;\n\nvar constructorRegex = /^\\s*class\\b/;\nvar isES6ClassFn = function isES6ClassFunction(value) {\n\ttry {\n\t\tvar fnStr = fnToStr.call(value);\n\t\treturn constructorRegex.test(fnStr);\n\t} catch (e) {\n\t\treturn false; // not a function\n\t}\n};\n\nvar tryFunctionObject = function tryFunctionToStr(value) {\n\ttry {\n\t\tif (isES6ClassFn(value)) { return false; }\n\t\tfnToStr.call(value);\n\t\treturn true;\n\t} catch (e) {\n\t\treturn false;\n\t}\n};\nvar toStr = Object.prototype.toString;\nvar fnClass = '[object Function]';\nvar genClass = '[object GeneratorFunction]';\nvar hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';\n\nmodule.exports = function isCallable(value) {\n\tif (!value) { return false; }\n\tif (typeof value !== 'function' && typeof value !== 'object') { return false; }\n\tif (typeof value === 'function' && !value.prototype) { return true; }\n\tif (hasToStringTag) { return tryFunctionObject(value); }\n\tif (isES6ClassFn(value)) { return false; }\n\tvar strClass = toStr.call(value);\n\treturn strClass === fnClass || strClass === genClass;\n};\n","module.exports = extend\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction extend() {\n    var target = {}\n\n    for (var i = 0; i < arguments.length; i++) {\n        var source = arguments[i]\n\n        for (var key in source) {\n            if (hasOwnProperty.call(source, key)) {\n                target[key] = source[key]\n            }\n        }\n    }\n\n    return target\n}\n","/**\n * Copyright 2013 vtt.js Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Default exports for Node. Export the extended versions of VTTCue and\n// VTTRegion in Node since we likely want the capability to convert back and\n// forth between JSON. If we don't then it's not that big of a deal since we're\n// off browser.\n\nvar window = require('global/window');\n\nvar vttjs = module.exports = {\n  WebVTT: require(\"./vtt.js\"),\n  VTTCue: require(\"./vttcue.js\"),\n  VTTRegion: require(\"./vttregion.js\")\n};\n\nwindow.vttjs = vttjs;\nwindow.WebVTT = vttjs.WebVTT;\n\nvar cueShim = vttjs.VTTCue;\nvar regionShim = vttjs.VTTRegion;\nvar nativeVTTCue = window.VTTCue;\nvar nativeVTTRegion = window.VTTRegion;\n\nvttjs.shim = function() {\n  window.VTTCue = cueShim;\n  window.VTTRegion = regionShim;\n};\n\nvttjs.restore = function() {\n  window.VTTCue = nativeVTTCue;\n  window.VTTRegion = nativeVTTRegion;\n};\n\nif (!window.VTTCue) {\n  vttjs.shim();\n}\n","/**\n * Copyright 2013 vtt.js Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */\nvar _objCreate = Object.create || (function() {\n  function F() {}\n  return function(o) {\n    if (arguments.length !== 1) {\n      throw new Error('Object.create shim only accepts one parameter.');\n    }\n    F.prototype = o;\n    return new F();\n  };\n})();\n\n// Creates a new ParserError object from an errorData object. The errorData\n// object should have default code and message properties. The default message\n// property can be overriden by passing in a message parameter.\n// See ParsingError.Errors below for acceptable errors.\nfunction ParsingError(errorData, message) {\n  this.name = \"ParsingError\";\n  this.code = errorData.code;\n  this.message = message || errorData.message;\n}\nParsingError.prototype = _objCreate(Error.prototype);\nParsingError.prototype.constructor = ParsingError;\n\n// ParsingError metadata for acceptable ParsingErrors.\nParsingError.Errors = {\n  BadSignature: {\n    code: 0,\n    message: \"Malformed WebVTT signature.\"\n  },\n  BadTimeStamp: {\n    code: 1,\n    message: \"Malformed time stamp.\"\n  }\n};\n\n// Try to parse input as a time stamp.\nfunction parseTimeStamp(input) {\n\n  function computeSeconds(h, m, s, f) {\n    return (h | 0) * 3600 + (m | 0) * 60 + (s | 0) + (f | 0) / 1000;\n  }\n\n  var m = input.match(/^(\\d+):(\\d{2})(:\\d{2})?\\.(\\d{3})/);\n  if (!m) {\n    return null;\n  }\n\n  if (m[3]) {\n    // Timestamp takes the form of [hours]:[minutes]:[seconds].[milliseconds]\n    return computeSeconds(m[1], m[2], m[3].replace(\":\", \"\"), m[4]);\n  } else if (m[1] > 59) {\n    // Timestamp takes the form of [hours]:[minutes].[milliseconds]\n    // First position is hours as it's over 59.\n    return computeSeconds(m[1], m[2], 0,  m[4]);\n  } else {\n    // Timestamp takes the form of [minutes]:[seconds].[milliseconds]\n    return computeSeconds(0, m[1], m[2], m[4]);\n  }\n}\n\n// A settings object holds key/value pairs and will ignore anything but the first\n// assignment to a specific key.\nfunction Settings() {\n  this.values = _objCreate(null);\n}\n\nSettings.prototype = {\n  // Only accept the first assignment to any key.\n  set: function(k, v) {\n    if (!this.get(k) && v !== \"\") {\n      this.values[k] = v;\n    }\n  },\n  // Return the value for a key, or a default value.\n  // If 'defaultKey' is passed then 'dflt' is assumed to be an object with\n  // a number of possible default values as properties where 'defaultKey' is\n  // the key of the property that will be chosen; otherwise it's assumed to be\n  // a single value.\n  get: function(k, dflt, defaultKey) {\n    if (defaultKey) {\n      return this.has(k) ? this.values[k] : dflt[defaultKey];\n    }\n    return this.has(k) ? this.values[k] : dflt;\n  },\n  // Check whether we have a value for a key.\n  has: function(k) {\n    return k in this.values;\n  },\n  // Accept a setting if its one of the given alternatives.\n  alt: function(k, v, a) {\n    for (var n = 0; n < a.length; ++n) {\n      if (v === a[n]) {\n        this.set(k, v);\n        break;\n      }\n    }\n  },\n  // Accept a setting if its a valid (signed) integer.\n  integer: function(k, v) {\n    if (/^-?\\d+$/.test(v)) { // integer\n      this.set(k, parseInt(v, 10));\n    }\n  },\n  // Accept a setting if its a valid percentage.\n  percent: function(k, v) {\n    var m;\n    if ((m = v.match(/^([\\d]{1,3})(\\.[\\d]*)?%$/))) {\n      v = parseFloat(v);\n      if (v >= 0 && v <= 100) {\n        this.set(k, v);\n        return true;\n      }\n    }\n    return false;\n  }\n};\n\n// Helper function to parse input into groups separated by 'groupDelim', and\n// interprete each group as a key/value pair separated by 'keyValueDelim'.\nfunction parseOptions(input, callback, keyValueDelim, groupDelim) {\n  var groups = groupDelim ? input.split(groupDelim) : [input];\n  for (var i in groups) {\n    if (typeof groups[i] !== \"string\") {\n      continue;\n    }\n    var kv = groups[i].split(keyValueDelim);\n    if (kv.length !== 2) {\n      continue;\n    }\n    var k = kv[0];\n    var v = kv[1];\n    callback(k, v);\n  }\n}\n\nfunction parseCue(input, cue, regionList) {\n  // Remember the original input if we need to throw an error.\n  var oInput = input;\n  // 4.1 WebVTT timestamp\n  function consumeTimeStamp() {\n    var ts = parseTimeStamp(input);\n    if (ts === null) {\n      throw new ParsingError(ParsingError.Errors.BadTimeStamp,\n                            \"Malformed timestamp: \" + oInput);\n    }\n    // Remove time stamp from input.\n    input = input.replace(/^[^\\sa-zA-Z-]+/, \"\");\n    return ts;\n  }\n\n  // 4.4.2 WebVTT cue settings\n  function consumeCueSettings(input, cue) {\n    var settings = new Settings();\n\n    parseOptions(input, function (k, v) {\n      switch (k) {\n      case \"region\":\n        // Find the last region we parsed with the same region id.\n        for (var i = regionList.length - 1; i >= 0; i--) {\n          if (regionList[i].id === v) {\n            settings.set(k, regionList[i].region);\n            break;\n          }\n        }\n        break;\n      case \"vertical\":\n        settings.alt(k, v, [\"rl\", \"lr\"]);\n        break;\n      case \"line\":\n        var vals = v.split(\",\"),\n            vals0 = vals[0];\n        settings.integer(k, vals0);\n        settings.percent(k, vals0) ? settings.set(\"snapToLines\", false) : null;\n        settings.alt(k, vals0, [\"auto\"]);\n        if (vals.length === 2) {\n          settings.alt(\"lineAlign\", vals[1], [\"start\", \"middle\", \"end\"]);\n        }\n        break;\n      case \"position\":\n        vals = v.split(\",\");\n        settings.percent(k, vals[0]);\n        if (vals.length === 2) {\n          settings.alt(\"positionAlign\", vals[1], [\"start\", \"middle\", \"end\"]);\n        }\n        break;\n      case \"size\":\n        settings.percent(k, v);\n        break;\n      case \"align\":\n        settings.alt(k, v, [\"start\", \"middle\", \"end\", \"left\", \"right\"]);\n        break;\n      }\n    }, /:/, /\\s/);\n\n    // Apply default values for any missing fields.\n    cue.region = settings.get(\"region\", null);\n    cue.vertical = settings.get(\"vertical\", \"\");\n    cue.line = settings.get(\"line\", \"auto\");\n    cue.lineAlign = settings.get(\"lineAlign\", \"start\");\n    cue.snapToLines = settings.get(\"snapToLines\", true);\n    cue.size = settings.get(\"size\", 100);\n    cue.align = settings.get(\"align\", \"middle\");\n    cue.position = settings.get(\"position\", {\n      start: 0,\n      left: 0,\n      middle: 50,\n      end: 100,\n      right: 100\n    }, cue.align);\n    cue.positionAlign = settings.get(\"positionAlign\", {\n      start: \"start\",\n      left: \"start\",\n      middle: \"middle\",\n      end: \"end\",\n      right: \"end\"\n    }, cue.align);\n  }\n\n  function skipWhitespace() {\n    input = input.replace(/^\\s+/, \"\");\n  }\n\n  // 4.1 WebVTT cue timings.\n  skipWhitespace();\n  cue.startTime = consumeTimeStamp();   // (1) collect cue start time\n  skipWhitespace();\n  if (input.substr(0, 3) !== \"-->\") {     // (3) next characters must match \"-->\"\n    throw new ParsingError(ParsingError.Errors.BadTimeStamp,\n                           \"Malformed time stamp (time stamps must be separated by '-->'): \" +\n                           oInput);\n  }\n  input = input.substr(3);\n  skipWhitespace();\n  cue.endTime = consumeTimeStamp();     // (5) collect cue end time\n\n  // 4.1 WebVTT cue settings list.\n  skipWhitespace();\n  consumeCueSettings(input, cue);\n}\n\nvar ESCAPE = {\n  \"&amp;\": \"&\",\n  \"&lt;\": \"<\",\n  \"&gt;\": \">\",\n  \"&lrm;\": \"\\u200e\",\n  \"&rlm;\": \"\\u200f\",\n  \"&nbsp;\": \"\\u00a0\"\n};\n\nvar TAG_NAME = {\n  c: \"span\",\n  i: \"i\",\n  b: \"b\",\n  u: \"u\",\n  ruby: \"ruby\",\n  rt: \"rt\",\n  v: \"span\",\n  lang: \"span\"\n};\n\nvar TAG_ANNOTATION = {\n  v: \"title\",\n  lang: \"lang\"\n};\n\nvar NEEDS_PARENT = {\n  rt: \"ruby\"\n};\n\n// Parse content into a document fragment.\nfunction parseContent(window, input) {\n  function nextToken() {\n    // Check for end-of-string.\n    if (!input) {\n      return null;\n    }\n\n    // Consume 'n' characters from the input.\n    function consume(result) {\n      input = input.substr(result.length);\n      return result;\n    }\n\n    var m = input.match(/^([^<]*)(<[^>]*>?)?/);\n    // If there is some text before the next tag, return it, otherwise return\n    // the tag.\n    return consume(m[1] ? m[1] : m[2]);\n  }\n\n  // Unescape a string 's'.\n  function unescape1(e) {\n    return ESCAPE[e];\n  }\n  function unescape(s) {\n    while ((m = s.match(/&(amp|lt|gt|lrm|rlm|nbsp);/))) {\n      s = s.replace(m[0], unescape1);\n    }\n    return s;\n  }\n\n  function shouldAdd(current, element) {\n    return !NEEDS_PARENT[element.localName] ||\n           NEEDS_PARENT[element.localName] === current.localName;\n  }\n\n  // Create an element for this tag.\n  function createElement(type, annotation) {\n    var tagName = TAG_NAME[type];\n    if (!tagName) {\n      return null;\n    }\n    var element = window.document.createElement(tagName);\n    element.localName = tagName;\n    var name = TAG_ANNOTATION[type];\n    if (name && annotation) {\n      element[name] = annotation.trim();\n    }\n    return element;\n  }\n\n  var rootDiv = window.document.createElement(\"div\"),\n      current = rootDiv,\n      t,\n      tagStack = [];\n\n  while ((t = nextToken()) !== null) {\n    if (t[0] === '<') {\n      if (t[1] === \"/\") {\n        // If the closing tag matches, move back up to the parent node.\n        if (tagStack.length &&\n            tagStack[tagStack.length - 1] === t.substr(2).replace(\">\", \"\")) {\n          tagStack.pop();\n          current = current.parentNode;\n        }\n        // Otherwise just ignore the end tag.\n        continue;\n      }\n      var ts = parseTimeStamp(t.substr(1, t.length - 2));\n      var node;\n      if (ts) {\n        // Timestamps are lead nodes as well.\n        node = window.document.createProcessingInstruction(\"timestamp\", ts);\n        current.appendChild(node);\n        continue;\n      }\n      var m = t.match(/^<([^.\\s/0-9>]+)(\\.[^\\s\\\\>]+)?([^>\\\\]+)?(\\\\?)>?$/);\n      // If we can't parse the tag, skip to the next tag.\n      if (!m) {\n        continue;\n      }\n      // Try to construct an element, and ignore the tag if we couldn't.\n      node = createElement(m[1], m[3]);\n      if (!node) {\n        continue;\n      }\n      // Determine if the tag should be added based on the context of where it\n      // is placed in the cuetext.\n      if (!shouldAdd(current, node)) {\n        continue;\n      }\n      // Set the class list (as a list of classes, separated by space).\n      if (m[2]) {\n        node.className = m[2].substr(1).replace('.', ' ');\n      }\n      // Append the node to the current node, and enter the scope of the new\n      // node.\n      tagStack.push(m[1]);\n      current.appendChild(node);\n      current = node;\n      continue;\n    }\n\n    // Text nodes are leaf nodes.\n    current.appendChild(window.document.createTextNode(unescape(t)));\n  }\n\n  return rootDiv;\n}\n\n// This is a list of all the Unicode characters that have a strong\n// right-to-left category. What this means is that these characters are\n// written right-to-left for sure. It was generated by pulling all the strong\n// right-to-left characters out of the Unicode data table. That table can\n// found at: http://www.unicode.org/Public/UNIDATA/UnicodeData.txt\nvar strongRTLRanges = [[0x5be, 0x5be], [0x5c0, 0x5c0], [0x5c3, 0x5c3], [0x5c6, 0x5c6],\n [0x5d0, 0x5ea], [0x5f0, 0x5f4], [0x608, 0x608], [0x60b, 0x60b], [0x60d, 0x60d],\n [0x61b, 0x61b], [0x61e, 0x64a], [0x66d, 0x66f], [0x671, 0x6d5], [0x6e5, 0x6e6],\n [0x6ee, 0x6ef], [0x6fa, 0x70d], [0x70f, 0x710], [0x712, 0x72f], [0x74d, 0x7a5],\n [0x7b1, 0x7b1], [0x7c0, 0x7ea], [0x7f4, 0x7f5], [0x7fa, 0x7fa], [0x800, 0x815],\n [0x81a, 0x81a], [0x824, 0x824], [0x828, 0x828], [0x830, 0x83e], [0x840, 0x858],\n [0x85e, 0x85e], [0x8a0, 0x8a0], [0x8a2, 0x8ac], [0x200f, 0x200f],\n [0xfb1d, 0xfb1d], [0xfb1f, 0xfb28], [0xfb2a, 0xfb36], [0xfb38, 0xfb3c],\n [0xfb3e, 0xfb3e], [0xfb40, 0xfb41], [0xfb43, 0xfb44], [0xfb46, 0xfbc1],\n [0xfbd3, 0xfd3d], [0xfd50, 0xfd8f], [0xfd92, 0xfdc7], [0xfdf0, 0xfdfc],\n [0xfe70, 0xfe74], [0xfe76, 0xfefc], [0x10800, 0x10805], [0x10808, 0x10808],\n [0x1080a, 0x10835], [0x10837, 0x10838], [0x1083c, 0x1083c], [0x1083f, 0x10855],\n [0x10857, 0x1085f], [0x10900, 0x1091b], [0x10920, 0x10939], [0x1093f, 0x1093f],\n [0x10980, 0x109b7], [0x109be, 0x109bf], [0x10a00, 0x10a00], [0x10a10, 0x10a13],\n [0x10a15, 0x10a17], [0x10a19, 0x10a33], [0x10a40, 0x10a47], [0x10a50, 0x10a58],\n [0x10a60, 0x10a7f], [0x10b00, 0x10b35], [0x10b40, 0x10b55], [0x10b58, 0x10b72],\n [0x10b78, 0x10b7f], [0x10c00, 0x10c48], [0x1ee00, 0x1ee03], [0x1ee05, 0x1ee1f],\n [0x1ee21, 0x1ee22], [0x1ee24, 0x1ee24], [0x1ee27, 0x1ee27], [0x1ee29, 0x1ee32],\n [0x1ee34, 0x1ee37], [0x1ee39, 0x1ee39], [0x1ee3b, 0x1ee3b], [0x1ee42, 0x1ee42],\n [0x1ee47, 0x1ee47], [0x1ee49, 0x1ee49], [0x1ee4b, 0x1ee4b], [0x1ee4d, 0x1ee4f],\n [0x1ee51, 0x1ee52], [0x1ee54, 0x1ee54], [0x1ee57, 0x1ee57], [0x1ee59, 0x1ee59],\n [0x1ee5b, 0x1ee5b], [0x1ee5d, 0x1ee5d], [0x1ee5f, 0x1ee5f], [0x1ee61, 0x1ee62],\n [0x1ee64, 0x1ee64], [0x1ee67, 0x1ee6a], [0x1ee6c, 0x1ee72], [0x1ee74, 0x1ee77],\n [0x1ee79, 0x1ee7c], [0x1ee7e, 0x1ee7e], [0x1ee80, 0x1ee89], [0x1ee8b, 0x1ee9b],\n [0x1eea1, 0x1eea3], [0x1eea5, 0x1eea9], [0x1eeab, 0x1eebb], [0x10fffd, 0x10fffd]];\n\nfunction isStrongRTLChar(charCode) {\n  for (var i = 0; i < strongRTLRanges.length; i++) {\n    var currentRange = strongRTLRanges[i];\n    if (charCode >= currentRange[0] && charCode <= currentRange[1]) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction determineBidi(cueDiv) {\n  var nodeStack = [],\n      text = \"\",\n      charCode;\n\n  if (!cueDiv || !cueDiv.childNodes) {\n    return \"ltr\";\n  }\n\n  function pushNodes(nodeStack, node) {\n    for (var i = node.childNodes.length - 1; i >= 0; i--) {\n      nodeStack.push(node.childNodes[i]);\n    }\n  }\n\n  function nextTextNode(nodeStack) {\n    if (!nodeStack || !nodeStack.length) {\n      return null;\n    }\n\n    var node = nodeStack.pop(),\n        text = node.textContent || node.innerText;\n    if (text) {\n      // TODO: This should match all unicode type B characters (paragraph\n      // separator characters). See issue #115.\n      var m = text.match(/^.*(\\n|\\r)/);\n      if (m) {\n        nodeStack.length = 0;\n        return m[0];\n      }\n      return text;\n    }\n    if (node.tagName === \"ruby\") {\n      return nextTextNode(nodeStack);\n    }\n    if (node.childNodes) {\n      pushNodes(nodeStack, node);\n      return nextTextNode(nodeStack);\n    }\n  }\n\n  pushNodes(nodeStack, cueDiv);\n  while ((text = nextTextNode(nodeStack))) {\n    for (var i = 0; i < text.length; i++) {\n      charCode = text.charCodeAt(i);\n      if (isStrongRTLChar(charCode)) {\n        return \"rtl\";\n      }\n    }\n  }\n  return \"ltr\";\n}\n\nfunction computeLinePos(cue) {\n  if (typeof cue.line === \"number\" &&\n      (cue.snapToLines || (cue.line >= 0 && cue.line <= 100))) {\n    return cue.line;\n  }\n  if (!cue.track || !cue.track.textTrackList ||\n      !cue.track.textTrackList.mediaElement) {\n    return -1;\n  }\n  var track = cue.track,\n      trackList = track.textTrackList,\n      count = 0;\n  for (var i = 0; i < trackList.length && trackList[i] !== track; i++) {\n    if (trackList[i].mode === \"showing\") {\n      count++;\n    }\n  }\n  return ++count * -1;\n}\n\nfunction StyleBox() {\n}\n\n// Apply styles to a div. If there is no div passed then it defaults to the\n// div on 'this'.\nStyleBox.prototype.applyStyles = function(styles, div) {\n  div = div || this.div;\n  for (var prop in styles) {\n    if (styles.hasOwnProperty(prop)) {\n      div.style[prop] = styles[prop];\n    }\n  }\n};\n\nStyleBox.prototype.formatStyle = function(val, unit) {\n  return val === 0 ? 0 : val + unit;\n};\n\n// Constructs the computed display state of the cue (a div). Places the div\n// into the overlay which should be a block level element (usually a div).\nfunction CueStyleBox(window, cue, styleOptions) {\n  StyleBox.call(this);\n  this.cue = cue;\n\n  // Parse our cue's text into a DOM tree rooted at 'cueDiv'. This div will\n  // have inline positioning and will function as the cue background box.\n  this.cueDiv = parseContent(window, cue.text);\n  var styles = {\n    color: \"rgba(255, 255, 255, 1)\",\n    backgroundColor:  \"rgba(0, 0, 0, 0.8)\",\n    position: \"relative\",\n    left: 0,\n    right: 0,\n    top: 0,\n    bottom: 0,\n    display: \"inline\",\n    writingMode: cue.vertical === \"\" ? \"horizontal-tb\"\n                                     : cue.vertical === \"lr\" ? \"vertical-lr\"\n                                                             : \"vertical-rl\",\n    unicodeBidi: \"plaintext\"\n  };\n\n  this.applyStyles(styles, this.cueDiv);\n\n  // Create an absolutely positioned div that will be used to position the cue\n  // div. Note, all WebVTT cue-setting alignments are equivalent to the CSS\n  // mirrors of them except \"middle\" which is \"center\" in CSS.\n  this.div = window.document.createElement(\"div\");\n  styles = {\n    direction: determineBidi(this.cueDiv),\n    writingMode: cue.vertical === \"\" ? \"horizontal-tb\"\n                                     : cue.vertical === \"lr\" ? \"vertical-lr\"\n                                                             : \"vertical-rl\",\n    unicodeBidi: \"plaintext\",\n    textAlign: cue.align === \"middle\" ? \"center\" : cue.align,\n    font: styleOptions.font,\n    whiteSpace: \"pre-line\",\n    position: \"absolute\"\n  };\n\n  this.applyStyles(styles);\n  this.div.appendChild(this.cueDiv);\n\n  // Calculate the distance from the reference edge of the viewport to the text\n  // position of the cue box. The reference edge will be resolved later when\n  // the box orientation styles are applied.\n  var textPos = 0;\n  switch (cue.positionAlign) {\n  case \"start\":\n    textPos = cue.position;\n    break;\n  case \"middle\":\n    textPos = cue.position - (cue.size / 2);\n    break;\n  case \"end\":\n    textPos = cue.position - cue.size;\n    break;\n  }\n\n  // Horizontal box orientation; textPos is the distance from the left edge of the\n  // area to the left edge of the box and cue.size is the distance extending to\n  // the right from there.\n  if (cue.vertical === \"\") {\n    this.applyStyles({\n      left:  this.formatStyle(textPos, \"%\"),\n      width: this.formatStyle(cue.size, \"%\")\n    });\n  // Vertical box orientation; textPos is the distance from the top edge of the\n  // area to the top edge of the box and cue.size is the height extending\n  // downwards from there.\n  } else {\n    this.applyStyles({\n      top: this.formatStyle(textPos, \"%\"),\n      height: this.formatStyle(cue.size, \"%\")\n    });\n  }\n\n  this.move = function(box) {\n    this.applyStyles({\n      top: this.formatStyle(box.top, \"px\"),\n      bottom: this.formatStyle(box.bottom, \"px\"),\n      left: this.formatStyle(box.left, \"px\"),\n      right: this.formatStyle(box.right, \"px\"),\n      height: this.formatStyle(box.height, \"px\"),\n      width: this.formatStyle(box.width, \"px\")\n    });\n  };\n}\nCueStyleBox.prototype = _objCreate(StyleBox.prototype);\nCueStyleBox.prototype.constructor = CueStyleBox;\n\n// Represents the co-ordinates of an Element in a way that we can easily\n// compute things with such as if it overlaps or intersects with another Element.\n// Can initialize it with either a StyleBox or another BoxPosition.\nfunction BoxPosition(obj) {\n  // Either a BoxPosition was passed in and we need to copy it, or a StyleBox\n  // was passed in and we need to copy the results of 'getBoundingClientRect'\n  // as the object returned is readonly. All co-ordinate values are in reference\n  // to the viewport origin (top left).\n  var lh, height, width, top;\n  if (obj.div) {\n    height = obj.div.offsetHeight;\n    width = obj.div.offsetWidth;\n    top = obj.div.offsetTop;\n\n    var rects = (rects = obj.div.childNodes) && (rects = rects[0]) &&\n                rects.getClientRects && rects.getClientRects();\n    obj = obj.div.getBoundingClientRect();\n    // In certain cases the outter div will be slightly larger then the sum of\n    // the inner div's lines. This could be due to bold text, etc, on some platforms.\n    // In this case we should get the average line height and use that. This will\n    // result in the desired behaviour.\n    lh = rects ? Math.max((rects[0] && rects[0].height) || 0, obj.height / rects.length)\n               : 0;\n\n  }\n  this.left = obj.left;\n  this.right = obj.right;\n  this.top = obj.top || top;\n  this.height = obj.height || height;\n  this.bottom = obj.bottom || (top + (obj.height || height));\n  this.width = obj.width || width;\n  this.lineHeight = lh !== undefined ? lh : obj.lineHeight;\n}\n\n// Move the box along a particular axis. Optionally pass in an amount to move\n// the box. If no amount is passed then the default is the line height of the\n// box.\nBoxPosition.prototype.move = function(axis, toMove) {\n  toMove = toMove !== undefined ? toMove : this.lineHeight;\n  switch (axis) {\n  case \"+x\":\n    this.left += toMove;\n    this.right += toMove;\n    break;\n  case \"-x\":\n    this.left -= toMove;\n    this.right -= toMove;\n    break;\n  case \"+y\":\n    this.top += toMove;\n    this.bottom += toMove;\n    break;\n  case \"-y\":\n    this.top -= toMove;\n    this.bottom -= toMove;\n    break;\n  }\n};\n\n// Check if this box overlaps another box, b2.\nBoxPosition.prototype.overlaps = function(b2) {\n  return this.left < b2.right &&\n         this.right > b2.left &&\n         this.top < b2.bottom &&\n         this.bottom > b2.top;\n};\n\n// Check if this box overlaps any other boxes in boxes.\nBoxPosition.prototype.overlapsAny = function(boxes) {\n  for (var i = 0; i < boxes.length; i++) {\n    if (this.overlaps(boxes[i])) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Check if this box is within another box.\nBoxPosition.prototype.within = function(container) {\n  return this.top >= container.top &&\n         this.bottom <= container.bottom &&\n         this.left >= container.left &&\n         this.right <= container.right;\n};\n\n// Check if this box is entirely within the container or it is overlapping\n// on the edge opposite of the axis direction passed. For example, if \"+x\" is\n// passed and the box is overlapping on the left edge of the container, then\n// return true.\nBoxPosition.prototype.overlapsOppositeAxis = function(container, axis) {\n  switch (axis) {\n  case \"+x\":\n    return this.left < container.left;\n  case \"-x\":\n    return this.right > container.right;\n  case \"+y\":\n    return this.top < container.top;\n  case \"-y\":\n    return this.bottom > container.bottom;\n  }\n};\n\n// Find the percentage of the area that this box is overlapping with another\n// box.\nBoxPosition.prototype.intersectPercentage = function(b2) {\n  var x = Math.max(0, Math.min(this.right, b2.right) - Math.max(this.left, b2.left)),\n      y = Math.max(0, Math.min(this.bottom, b2.bottom) - Math.max(this.top, b2.top)),\n      intersectArea = x * y;\n  return intersectArea / (this.height * this.width);\n};\n\n// Convert the positions from this box to CSS compatible positions using\n// the reference container's positions. This has to be done because this\n// box's positions are in reference to the viewport origin, whereas, CSS\n// values are in referecne to their respective edges.\nBoxPosition.prototype.toCSSCompatValues = function(reference) {\n  return {\n    top: this.top - reference.top,\n    bottom: reference.bottom - this.bottom,\n    left: this.left - reference.left,\n    right: reference.right - this.right,\n    height: this.height,\n    width: this.width\n  };\n};\n\n// Get an object that represents the box's position without anything extra.\n// Can pass a StyleBox, HTMLElement, or another BoxPositon.\nBoxPosition.getSimpleBoxPosition = function(obj) {\n  var height = obj.div ? obj.div.offsetHeight : obj.tagName ? obj.offsetHeight : 0;\n  var width = obj.div ? obj.div.offsetWidth : obj.tagName ? obj.offsetWidth : 0;\n  var top = obj.div ? obj.div.offsetTop : obj.tagName ? obj.offsetTop : 0;\n\n  obj = obj.div ? obj.div.getBoundingClientRect() :\n                obj.tagName ? obj.getBoundingClientRect() : obj;\n  var ret = {\n    left: obj.left,\n    right: obj.right,\n    top: obj.top || top,\n    height: obj.height || height,\n    bottom: obj.bottom || (top + (obj.height || height)),\n    width: obj.width || width\n  };\n  return ret;\n};\n\n// Move a StyleBox to its specified, or next best, position. The containerBox\n// is the box that contains the StyleBox, such as a div. boxPositions are\n// a list of other boxes that the styleBox can't overlap with.\nfunction moveBoxToLinePosition(window, styleBox, containerBox, boxPositions) {\n\n  // Find the best position for a cue box, b, on the video. The axis parameter\n  // is a list of axis, the order of which, it will move the box along. For example:\n  // Passing [\"+x\", \"-x\"] will move the box first along the x axis in the positive\n  // direction. If it doesn't find a good position for it there it will then move\n  // it along the x axis in the negative direction.\n  function findBestPosition(b, axis) {\n    var bestPosition,\n        specifiedPosition = new BoxPosition(b),\n        percentage = 1; // Highest possible so the first thing we get is better.\n\n    for (var i = 0; i < axis.length; i++) {\n      while (b.overlapsOppositeAxis(containerBox, axis[i]) ||\n             (b.within(containerBox) && b.overlapsAny(boxPositions))) {\n        b.move(axis[i]);\n      }\n      // We found a spot where we aren't overlapping anything. This is our\n      // best position.\n      if (b.within(containerBox)) {\n        return b;\n      }\n      var p = b.intersectPercentage(containerBox);\n      // If we're outside the container box less then we were on our last try\n      // then remember this position as the best position.\n      if (percentage > p) {\n        bestPosition = new BoxPosition(b);\n        percentage = p;\n      }\n      // Reset the box position to the specified position.\n      b = new BoxPosition(specifiedPosition);\n    }\n    return bestPosition || specifiedPosition;\n  }\n\n  var boxPosition = new BoxPosition(styleBox),\n      cue = styleBox.cue,\n      linePos = computeLinePos(cue),\n      axis = [];\n\n  // If we have a line number to align the cue to.\n  if (cue.snapToLines) {\n    var size;\n    switch (cue.vertical) {\n    case \"\":\n      axis = [ \"+y\", \"-y\" ];\n      size = \"height\";\n      break;\n    case \"rl\":\n      axis = [ \"+x\", \"-x\" ];\n      size = \"width\";\n      break;\n    case \"lr\":\n      axis = [ \"-x\", \"+x\" ];\n      size = \"width\";\n      break;\n    }\n\n    var step = boxPosition.lineHeight,\n        position = step * Math.round(linePos),\n        maxPosition = containerBox[size] + step,\n        initialAxis = axis[0];\n\n    // If the specified intial position is greater then the max position then\n    // clamp the box to the amount of steps it would take for the box to\n    // reach the max position.\n    if (Math.abs(position) > maxPosition) {\n      position = position < 0 ? -1 : 1;\n      position *= Math.ceil(maxPosition / step) * step;\n    }\n\n    // If computed line position returns negative then line numbers are\n    // relative to the bottom of the video instead of the top. Therefore, we\n    // need to increase our initial position by the length or width of the\n    // video, depending on the writing direction, and reverse our axis directions.\n    if (linePos < 0) {\n      position += cue.vertical === \"\" ? containerBox.height : containerBox.width;\n      axis = axis.reverse();\n    }\n\n    // Move the box to the specified position. This may not be its best\n    // position.\n    boxPosition.move(initialAxis, position);\n\n  } else {\n    // If we have a percentage line value for the cue.\n    var calculatedPercentage = (boxPosition.lineHeight / containerBox.height) * 100;\n\n    switch (cue.lineAlign) {\n    case \"middle\":\n      linePos -= (calculatedPercentage / 2);\n      break;\n    case \"end\":\n      linePos -= calculatedPercentage;\n      break;\n    }\n\n    // Apply initial line position to the cue box.\n    switch (cue.vertical) {\n    case \"\":\n      styleBox.applyStyles({\n        top: styleBox.formatStyle(linePos, \"%\")\n      });\n      break;\n    case \"rl\":\n      styleBox.applyStyles({\n        left: styleBox.formatStyle(linePos, \"%\")\n      });\n      break;\n    case \"lr\":\n      styleBox.applyStyles({\n        right: styleBox.formatStyle(linePos, \"%\")\n      });\n      break;\n    }\n\n    axis = [ \"+y\", \"-x\", \"+x\", \"-y\" ];\n\n    // Get the box position again after we've applied the specified positioning\n    // to it.\n    boxPosition = new BoxPosition(styleBox);\n  }\n\n  var bestPosition = findBestPosition(boxPosition, axis);\n  styleBox.move(bestPosition.toCSSCompatValues(containerBox));\n}\n\nfunction WebVTT() {\n  // Nothing\n}\n\n// Helper to allow strings to be decoded instead of the default binary utf8 data.\nWebVTT.StringDecoder = function() {\n  return {\n    decode: function(data) {\n      if (!data) {\n        return \"\";\n      }\n      if (typeof data !== \"string\") {\n        throw new Error(\"Error - expected string data.\");\n      }\n      return decodeURIComponent(encodeURIComponent(data));\n    }\n  };\n};\n\nWebVTT.convertCueToDOMTree = function(window, cuetext) {\n  if (!window || !cuetext) {\n    return null;\n  }\n  return parseContent(window, cuetext);\n};\n\nvar FONT_SIZE_PERCENT = 0.05;\nvar FONT_STYLE = \"sans-serif\";\nvar CUE_BACKGROUND_PADDING = \"1.5%\";\n\n// Runs the processing model over the cues and regions passed to it.\n// @param overlay A block level element (usually a div) that the computed cues\n//                and regions will be placed into.\nWebVTT.processCues = function(window, cues, overlay) {\n  if (!window || !cues || !overlay) {\n    return null;\n  }\n\n  // Remove all previous children.\n  while (overlay.firstChild) {\n    overlay.removeChild(overlay.firstChild);\n  }\n\n  var paddedOverlay = window.document.createElement(\"div\");\n  paddedOverlay.style.position = \"absolute\";\n  paddedOverlay.style.left = \"0\";\n  paddedOverlay.style.right = \"0\";\n  paddedOverlay.style.top = \"0\";\n  paddedOverlay.style.bottom = \"0\";\n  paddedOverlay.style.margin = CUE_BACKGROUND_PADDING;\n  overlay.appendChild(paddedOverlay);\n\n  // Determine if we need to compute the display states of the cues. This could\n  // be the case if a cue's state has been changed since the last computation or\n  // if it has not been computed yet.\n  function shouldCompute(cues) {\n    for (var i = 0; i < cues.length; i++) {\n      if (cues[i].hasBeenReset || !cues[i].displayState) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // We don't need to recompute the cues' display states. Just reuse them.\n  if (!shouldCompute(cues)) {\n    for (var i = 0; i < cues.length; i++) {\n      paddedOverlay.appendChild(cues[i].displayState);\n    }\n    return;\n  }\n\n  var boxPositions = [],\n      containerBox = BoxPosition.getSimpleBoxPosition(paddedOverlay),\n      fontSize = Math.round(containerBox.height * FONT_SIZE_PERCENT * 100) / 100;\n  var styleOptions = {\n    font: fontSize + \"px \" + FONT_STYLE\n  };\n\n  (function() {\n    var styleBox, cue;\n\n    for (var i = 0; i < cues.length; i++) {\n      cue = cues[i];\n\n      // Compute the intial position and styles of the cue div.\n      styleBox = new CueStyleBox(window, cue, styleOptions);\n      paddedOverlay.appendChild(styleBox.div);\n\n      // Move the cue div to it's correct line position.\n      moveBoxToLinePosition(window, styleBox, containerBox, boxPositions);\n\n      // Remember the computed div so that we don't have to recompute it later\n      // if we don't have too.\n      cue.displayState = styleBox.div;\n\n      boxPositions.push(BoxPosition.getSimpleBoxPosition(styleBox));\n    }\n  })();\n};\n\nWebVTT.Parser = function(window, vttjs, decoder) {\n  if (!decoder) {\n    decoder = vttjs;\n    vttjs = {};\n  }\n  if (!vttjs) {\n    vttjs = {};\n  }\n\n  this.window = window;\n  this.vttjs = vttjs;\n  this.state = \"INITIAL\";\n  this.buffer = \"\";\n  this.decoder = decoder || new TextDecoder(\"utf8\");\n  this.regionList = [];\n};\n\nWebVTT.Parser.prototype = {\n  // If the error is a ParsingError then report it to the consumer if\n  // possible. If it's not a ParsingError then throw it like normal.\n  reportOrThrowError: function(e) {\n    if (e instanceof ParsingError) {\n      this.onparsingerror && this.onparsingerror(e);\n    } else {\n      throw e;\n    }\n  },\n  parse: function (data) {\n    var self = this;\n\n    // If there is no data then we won't decode it, but will just try to parse\n    // whatever is in buffer already. This may occur in circumstances, for\n    // example when flush() is called.\n    if (data) {\n      // Try to decode the data that we received.\n      self.buffer += self.decoder.decode(data, {stream: true});\n    }\n\n    function collectNextLine() {\n      var buffer = self.buffer;\n      var pos = 0;\n      while (pos < buffer.length && buffer[pos] !== '\\r' && buffer[pos] !== '\\n') {\n        ++pos;\n      }\n      var line = buffer.substr(0, pos);\n      // Advance the buffer early in case we fail below.\n      if (buffer[pos] === '\\r') {\n        ++pos;\n      }\n      if (buffer[pos] === '\\n') {\n        ++pos;\n      }\n      self.buffer = buffer.substr(pos);\n      return line;\n    }\n\n    // 3.4 WebVTT region and WebVTT region settings syntax\n    function parseRegion(input) {\n      var settings = new Settings();\n\n      parseOptions(input, function (k, v) {\n        switch (k) {\n        case \"id\":\n          settings.set(k, v);\n          break;\n        case \"width\":\n          settings.percent(k, v);\n          break;\n        case \"lines\":\n          settings.integer(k, v);\n          break;\n        case \"regionanchor\":\n        case \"viewportanchor\":\n          var xy = v.split(',');\n          if (xy.length !== 2) {\n            break;\n          }\n          // We have to make sure both x and y parse, so use a temporary\n          // settings object here.\n          var anchor = new Settings();\n          anchor.percent(\"x\", xy[0]);\n          anchor.percent(\"y\", xy[1]);\n          if (!anchor.has(\"x\") || !anchor.has(\"y\")) {\n            break;\n          }\n          settings.set(k + \"X\", anchor.get(\"x\"));\n          settings.set(k + \"Y\", anchor.get(\"y\"));\n          break;\n        case \"scroll\":\n          settings.alt(k, v, [\"up\"]);\n          break;\n        }\n      }, /=/, /\\s/);\n\n      // Create the region, using default values for any values that were not\n      // specified.\n      if (settings.has(\"id\")) {\n        var region = new (self.vttjs.VTTRegion || self.window.VTTRegion)();\n        region.width = settings.get(\"width\", 100);\n        region.lines = settings.get(\"lines\", 3);\n        region.regionAnchorX = settings.get(\"regionanchorX\", 0);\n        region.regionAnchorY = settings.get(\"regionanchorY\", 100);\n        region.viewportAnchorX = settings.get(\"viewportanchorX\", 0);\n        region.viewportAnchorY = settings.get(\"viewportanchorY\", 100);\n        region.scroll = settings.get(\"scroll\", \"\");\n        // Register the region.\n        self.onregion && self.onregion(region);\n        // Remember the VTTRegion for later in case we parse any VTTCues that\n        // reference it.\n        self.regionList.push({\n          id: settings.get(\"id\"),\n          region: region\n        });\n      }\n    }\n\n    // draft-pantos-http-live-streaming-20\n    // https://tools.ietf.org/html/draft-pantos-http-live-streaming-20#section-3.5\n    // 3.5 WebVTT\n    function parseTimestampMap(input) {\n      var settings = new Settings();\n\n      parseOptions(input, function(k, v) {\n        switch(k) {\n        case \"MPEGT\":\n          settings.integer(k + 'S', v);\n          break;\n        case \"LOCA\":\n          settings.set(k + 'L', parseTimeStamp(v));\n          break;\n        }\n      }, /[^\\d]:/, /,/);\n\n      self.ontimestampmap && self.ontimestampmap({\n        \"MPEGTS\": settings.get(\"MPEGTS\"),\n        \"LOCAL\": settings.get(\"LOCAL\")\n      });\n    }\n\n    // 3.2 WebVTT metadata header syntax\n    function parseHeader(input) {\n      if (input.match(/X-TIMESTAMP-MAP/)) {\n        // This line contains HLS X-TIMESTAMP-MAP metadata\n        parseOptions(input, function(k, v) {\n          switch(k) {\n          case \"X-TIMESTAMP-MAP\":\n            parseTimestampMap(v);\n            break;\n          }\n        }, /=/);\n      } else {\n        parseOptions(input, function (k, v) {\n          switch (k) {\n          case \"Region\":\n            // 3.3 WebVTT region metadata header syntax\n            parseRegion(v);\n            break;\n          }\n        }, /:/);\n      }\n\n    }\n\n    // 5.1 WebVTT file parsing.\n    try {\n      var line;\n      if (self.state === \"INITIAL\") {\n        // We can't start parsing until we have the first line.\n        if (!/\\r\\n|\\n/.test(self.buffer)) {\n          return this;\n        }\n\n        line = collectNextLine();\n\n        var m = line.match(/^WEBVTT([ \\t].*)?$/);\n        if (!m || !m[0]) {\n          throw new ParsingError(ParsingError.Errors.BadSignature);\n        }\n\n        self.state = \"HEADER\";\n      }\n\n      var alreadyCollectedLine = false;\n      while (self.buffer) {\n        // We can't parse a line until we have the full line.\n        if (!/\\r\\n|\\n/.test(self.buffer)) {\n          return this;\n        }\n\n        if (!alreadyCollectedLine) {\n          line = collectNextLine();\n        } else {\n          alreadyCollectedLine = false;\n        }\n\n        switch (self.state) {\n        case \"HEADER\":\n          // 13-18 - Allow a header (metadata) under the WEBVTT line.\n          if (/:/.test(line)) {\n            parseHeader(line);\n          } else if (!line) {\n            // An empty line terminates the header and starts the body (cues).\n            self.state = \"ID\";\n          }\n          continue;\n        case \"NOTE\":\n          // Ignore NOTE blocks.\n          if (!line) {\n            self.state = \"ID\";\n          }\n          continue;\n        case \"ID\":\n          // Check for the start of NOTE blocks.\n          if (/^NOTE($|[ \\t])/.test(line)) {\n            self.state = \"NOTE\";\n            break;\n          }\n          // 19-29 - Allow any number of line terminators, then initialize new cue values.\n          if (!line) {\n            continue;\n          }\n          self.cue = new (self.vttjs.VTTCue || self.window.VTTCue)(0, 0, \"\");\n          self.state = \"CUE\";\n          // 30-39 - Check if self line contains an optional identifier or timing data.\n          if (line.indexOf(\"-->\") === -1) {\n            self.cue.id = line;\n            continue;\n          }\n          // Process line as start of a cue.\n          /*falls through*/\n        case \"CUE\":\n          // 40 - Collect cue timings and settings.\n          try {\n            parseCue(line, self.cue, self.regionList);\n          } catch (e) {\n            self.reportOrThrowError(e);\n            // In case of an error ignore rest of the cue.\n            self.cue = null;\n            self.state = \"BADCUE\";\n            continue;\n          }\n          self.state = \"CUETEXT\";\n          continue;\n        case \"CUETEXT\":\n          var hasSubstring = line.indexOf(\"-->\") !== -1;\n          // 34 - If we have an empty line then report the cue.\n          // 35 - If we have the special substring '-->' then report the cue,\n          // but do not collect the line as we need to process the current\n          // one as a new cue.\n          if (!line || hasSubstring && (alreadyCollectedLine = true)) {\n            // We are done parsing self cue.\n            self.oncue && self.oncue(self.cue);\n            self.cue = null;\n            self.state = \"ID\";\n            continue;\n          }\n          if (self.cue.text) {\n            self.cue.text += \"\\n\";\n          }\n          self.cue.text += line;\n          continue;\n        case \"BADCUE\": // BADCUE\n          // 54-62 - Collect and discard the remaining cue.\n          if (!line) {\n            self.state = \"ID\";\n          }\n          continue;\n        }\n      }\n    } catch (e) {\n      self.reportOrThrowError(e);\n\n      // If we are currently parsing a cue, report what we have.\n      if (self.state === \"CUETEXT\" && self.cue && self.oncue) {\n        self.oncue(self.cue);\n      }\n      self.cue = null;\n      // Enter BADWEBVTT state if header was not parsed correctly otherwise\n      // another exception occurred so enter BADCUE state.\n      self.state = self.state === \"INITIAL\" ? \"BADWEBVTT\" : \"BADCUE\";\n    }\n    return this;\n  },\n  flush: function () {\n    var self = this;\n    try {\n      // Finish decoding the stream.\n      self.buffer += self.decoder.decode();\n      // Synthesize the end of the current cue or region.\n      if (self.cue || self.state === \"HEADER\") {\n        self.buffer += \"\\n\\n\";\n        self.parse();\n      }\n      // If we've flushed, parsed, and we're still on the INITIAL state then\n      // that means we don't have enough of the stream to parse the first\n      // line.\n      if (self.state === \"INITIAL\") {\n        throw new ParsingError(ParsingError.Errors.BadSignature);\n      }\n    } catch(e) {\n      self.reportOrThrowError(e);\n    }\n    self.onflush && self.onflush();\n    return this;\n  }\n};\n\nmodule.exports = WebVTT;\n","/**\n * Copyright 2013 vtt.js Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar autoKeyword = \"auto\";\nvar directionSetting = {\n  \"\": 1,\n  \"lr\": 1,\n  \"rl\": 1\n};\nvar alignSetting = {\n  \"start\": 1,\n  \"middle\": 1,\n  \"end\": 1,\n  \"left\": 1,\n  \"right\": 1\n};\n\nfunction findDirectionSetting(value) {\n  if (typeof value !== \"string\") {\n    return false;\n  }\n  var dir = directionSetting[value.toLowerCase()];\n  return dir ? value.toLowerCase() : false;\n}\n\nfunction findAlignSetting(value) {\n  if (typeof value !== \"string\") {\n    return false;\n  }\n  var align = alignSetting[value.toLowerCase()];\n  return align ? value.toLowerCase() : false;\n}\n\nfunction VTTCue(startTime, endTime, text) {\n  /**\n   * Shim implementation specific properties. These properties are not in\n   * the spec.\n   */\n\n  // Lets us know when the VTTCue's data has changed in such a way that we need\n  // to recompute its display state. This lets us compute its display state\n  // lazily.\n  this.hasBeenReset = false;\n\n  /**\n   * VTTCue and TextTrackCue properties\n   * http://dev.w3.org/html5/webvtt/#vttcue-interface\n   */\n\n  var _id = \"\";\n  var _pauseOnExit = false;\n  var _startTime = startTime;\n  var _endTime = endTime;\n  var _text = text;\n  var _region = null;\n  var _vertical = \"\";\n  var _snapToLines = true;\n  var _line = \"auto\";\n  var _lineAlign = \"start\";\n  var _position = 50;\n  var _positionAlign = \"middle\";\n  var _size = 50;\n  var _align = \"middle\";\n\n  Object.defineProperties(this, {\n    \"id\": {\n      enumerable: true,\n      get: function() {\n        return _id;\n      },\n      set: function(value) {\n        _id = \"\" + value;\n      }\n    },\n\n    \"pauseOnExit\": {\n      enumerable: true,\n      get: function() {\n        return _pauseOnExit;\n      },\n      set: function(value) {\n        _pauseOnExit = !!value;\n      }\n    },\n\n    \"startTime\": {\n      enumerable: true,\n      get: function() {\n        return _startTime;\n      },\n      set: function(value) {\n        if (typeof value !== \"number\") {\n          throw new TypeError(\"Start time must be set to a number.\");\n        }\n        _startTime = value;\n        this.hasBeenReset = true;\n      }\n    },\n\n    \"endTime\": {\n      enumerable: true,\n      get: function() {\n        return _endTime;\n      },\n      set: function(value) {\n        if (typeof value !== \"number\") {\n          throw new TypeError(\"End time must be set to a number.\");\n        }\n        _endTime = value;\n        this.hasBeenReset = true;\n      }\n    },\n\n    \"text\": {\n      enumerable: true,\n      get: function() {\n        return _text;\n      },\n      set: function(value) {\n        _text = \"\" + value;\n        this.hasBeenReset = true;\n      }\n    },\n\n    \"region\": {\n      enumerable: true,\n      get: function() {\n        return _region;\n      },\n      set: function(value) {\n        _region = value;\n        this.hasBeenReset = true;\n      }\n    },\n\n    \"vertical\": {\n      enumerable: true,\n      get: function() {\n        return _vertical;\n      },\n      set: function(value) {\n        var setting = findDirectionSetting(value);\n        // Have to check for false because the setting an be an empty string.\n        if (setting === false) {\n          throw new SyntaxError(\"An invalid or illegal string was specified.\");\n        }\n        _vertical = setting;\n        this.hasBeenReset = true;\n      }\n    },\n\n    \"snapToLines\": {\n      enumerable: true,\n      get: function() {\n        return _snapToLines;\n      },\n      set: function(value) {\n        _snapToLines = !!value;\n        this.hasBeenReset = true;\n      }\n    },\n\n    \"line\": {\n      enumerable: true,\n      get: function() {\n        return _line;\n      },\n      set: function(value) {\n        if (typeof value !== \"number\" && value !== autoKeyword) {\n          throw new SyntaxError(\"An invalid number or illegal string was specified.\");\n        }\n        _line = value;\n        this.hasBeenReset = true;\n      }\n    },\n\n    \"lineAlign\": {\n      enumerable: true,\n      get: function() {\n        return _lineAlign;\n      },\n      set: function(value) {\n        var setting = findAlignSetting(value);\n        if (!setting) {\n          throw new SyntaxError(\"An invalid or illegal string was specified.\");\n        }\n        _lineAlign = setting;\n        this.hasBeenReset = true;\n      }\n    },\n\n    \"position\": {\n      enumerable: true,\n      get: function() {\n        return _position;\n      },\n      set: function(value) {\n        if (value < 0 || value > 100) {\n          throw new Error(\"Position must be between 0 and 100.\");\n        }\n        _position = value;\n        this.hasBeenReset = true;\n      }\n    },\n\n    \"positionAlign\": {\n      enumerable: true,\n      get: function() {\n        return _positionAlign;\n      },\n      set: function(value) {\n        var setting = findAlignSetting(value);\n        if (!setting) {\n          throw new SyntaxError(\"An invalid or illegal string was specified.\");\n        }\n        _positionAlign = setting;\n        this.hasBeenReset = true;\n      }\n    },\n\n    \"size\": {\n      enumerable: true,\n      get: function() {\n        return _size;\n      },\n      set: function(value) {\n        if (value < 0 || value > 100) {\n          throw new Error(\"Size must be between 0 and 100.\");\n        }\n        _size = value;\n        this.hasBeenReset = true;\n      }\n    },\n\n    \"align\": {\n      enumerable: true,\n      get: function() {\n        return _align;\n      },\n      set: function(value) {\n        var setting = findAlignSetting(value);\n        if (!setting) {\n          throw new SyntaxError(\"An invalid or illegal string was specified.\");\n        }\n        _align = setting;\n        this.hasBeenReset = true;\n      }\n    }\n  });\n\n  /**\n   * Other <track> spec defined properties\n   */\n\n  // http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html#text-track-cue-display-state\n  this.displayState = undefined;\n}\n\n/**\n * VTTCue methods\n */\n\nVTTCue.prototype.getCueAsHTML = function() {\n  // Assume WebVTT.convertCueToDOMTree is on the global.\n  return WebVTT.convertCueToDOMTree(window, this.text);\n};\n\nmodule.exports = VTTCue;\n","/**\n * Copyright 2013 vtt.js Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar scrollSetting = {\n  \"\": true,\n  \"up\": true\n};\n\nfunction findScrollSetting(value) {\n  if (typeof value !== \"string\") {\n    return false;\n  }\n  var scroll = scrollSetting[value.toLowerCase()];\n  return scroll ? value.toLowerCase() : false;\n}\n\nfunction isValidPercentValue(value) {\n  return typeof value === \"number\" && (value >= 0 && value <= 100);\n}\n\n// VTTRegion shim http://dev.w3.org/html5/webvtt/#vttregion-interface\nfunction VTTRegion() {\n  var _width = 100;\n  var _lines = 3;\n  var _regionAnchorX = 0;\n  var _regionAnchorY = 100;\n  var _viewportAnchorX = 0;\n  var _viewportAnchorY = 100;\n  var _scroll = \"\";\n\n  Object.defineProperties(this, {\n    \"width\": {\n      enumerable: true,\n      get: function() {\n        return _width;\n      },\n      set: function(value) {\n        if (!isValidPercentValue(value)) {\n          throw new Error(\"Width must be between 0 and 100.\");\n        }\n        _width = value;\n      }\n    },\n    \"lines\": {\n      enumerable: true,\n      get: function() {\n        return _lines;\n      },\n      set: function(value) {\n        if (typeof value !== \"number\") {\n          throw new TypeError(\"Lines must be set to a number.\");\n        }\n        _lines = value;\n      }\n    },\n    \"regionAnchorY\": {\n      enumerable: true,\n      get: function() {\n        return _regionAnchorY;\n      },\n      set: function(value) {\n        if (!isValidPercentValue(value)) {\n          throw new Error(\"RegionAnchorX must be between 0 and 100.\");\n        }\n        _regionAnchorY = value;\n      }\n    },\n    \"regionAnchorX\": {\n      enumerable: true,\n      get: function() {\n        return _regionAnchorX;\n      },\n      set: function(value) {\n        if(!isValidPercentValue(value)) {\n          throw new Error(\"RegionAnchorY must be between 0 and 100.\");\n        }\n        _regionAnchorX = value;\n      }\n    },\n    \"viewportAnchorY\": {\n      enumerable: true,\n      get: function() {\n        return _viewportAnchorY;\n      },\n      set: function(value) {\n        if (!isValidPercentValue(value)) {\n          throw new Error(\"ViewportAnchorY must be between 0 and 100.\");\n        }\n        _viewportAnchorY = value;\n      }\n    },\n    \"viewportAnchorX\": {\n      enumerable: true,\n      get: function() {\n        return _viewportAnchorX;\n      },\n      set: function(value) {\n        if (!isValidPercentValue(value)) {\n          throw new Error(\"ViewportAnchorX must be between 0 and 100.\");\n        }\n        _viewportAnchorX = value;\n      }\n    },\n    \"scroll\": {\n      enumerable: true,\n      get: function() {\n        return _scroll;\n      },\n      set: function(value) {\n        var setting = findScrollSetting(value);\n        // Have to check for false as an empty string is a legal value.\n        if (setting === false) {\n          throw new SyntaxError(\"An invalid or illegal string was specified.\");\n        }\n        _scroll = setting;\n      }\n    }\n  });\n}\n\nmodule.exports = VTTRegion;\n","module.exports = SafeParseTuple\n\nfunction SafeParseTuple(obj, reviver) {\n    var json\n    var error = null\n\n    try {\n        json = JSON.parse(obj, reviver)\n    } catch (err) {\n        error = err\n    }\n\n    return [error, json]\n}\n","var toUnsigned = function(value) {\n  return value >>> 0;\n};\n\nmodule.exports = {\n  toUnsigned: toUnsigned\n};\n","module.exports = {\n  generator: require('./mp4-generator'),\n  probe: require('./probe'),\n  Transmuxer: require('./transmuxer').Transmuxer,\n  AudioSegmentStream: require('./transmuxer').AudioSegmentStream,\n  VideoSegmentStream: require('./transmuxer').VideoSegmentStream,\n  CaptionParser: require('./caption-parser')\n};\n","// Convert an array of nal units into an array of frames with each frame being\n// composed of the nal units that make up that frame\n// Also keep track of cummulative data about the frame from the nal units such\n// as the frame duration, starting pts, etc.\nvar groupNalsIntoFrames = function(nalUnits) {\n  var\n    i,\n    currentNal,\n    currentFrame = [],\n    frames = [];\n\n  currentFrame.byteLength = 0;\n\n  for (i = 0; i < nalUnits.length; i++) {\n    currentNal = nalUnits[i];\n\n    // Split on 'aud'-type nal units\n    if (currentNal.nalUnitType === 'access_unit_delimiter_rbsp') {\n      // Since the very first nal unit is expected to be an AUD\n      // only push to the frames array when currentFrame is not empty\n      if (currentFrame.length) {\n        currentFrame.duration = currentNal.dts - currentFrame.dts;\n        frames.push(currentFrame);\n      }\n      currentFrame = [currentNal];\n      currentFrame.byteLength = currentNal.data.byteLength;\n      currentFrame.pts = currentNal.pts;\n      currentFrame.dts = currentNal.dts;\n    } else {\n      // Specifically flag key frames for ease of use later\n      if (currentNal.nalUnitType === 'slice_layer_without_partitioning_rbsp_idr') {\n        currentFrame.keyFrame = true;\n      }\n      currentFrame.duration = currentNal.dts - currentFrame.dts;\n      currentFrame.byteLength += currentNal.data.byteLength;\n      currentFrame.push(currentNal);\n    }\n  }\n\n  // For the last frame, use the duration of the previous frame if we\n  // have nothing better to go on\n  if (frames.length &&\n      (!currentFrame.duration ||\n       currentFrame.duration <= 0)) {\n    currentFrame.duration = frames[frames.length - 1].duration;\n  }\n\n  // Push the final frame\n  frames.push(currentFrame);\n  return frames;\n};\n\n// Convert an array of frames into an array of Gop with each Gop being composed\n// of the frames that make up that Gop\n// Also keep track of cummulative data about the Gop from the frames such as the\n// Gop duration, starting pts, etc.\nvar groupFramesIntoGops = function(frames) {\n  var\n    i,\n    currentFrame,\n    currentGop = [],\n    gops = [];\n\n  // We must pre-set some of the values on the Gop since we\n  // keep running totals of these values\n  currentGop.byteLength = 0;\n  currentGop.nalCount = 0;\n  currentGop.duration = 0;\n  currentGop.pts = frames[0].pts;\n  currentGop.dts = frames[0].dts;\n\n  // store some metadata about all the Gops\n  gops.byteLength = 0;\n  gops.nalCount = 0;\n  gops.duration = 0;\n  gops.pts = frames[0].pts;\n  gops.dts = frames[0].dts;\n\n  for (i = 0; i < frames.length; i++) {\n    currentFrame = frames[i];\n\n    if (currentFrame.keyFrame) {\n      // Since the very first frame is expected to be an keyframe\n      // only push to the gops array when currentGop is not empty\n      if (currentGop.length) {\n        gops.push(currentGop);\n        gops.byteLength += currentGop.byteLength;\n        gops.nalCount += currentGop.nalCount;\n        gops.duration += currentGop.duration;\n      }\n\n      currentGop = [currentFrame];\n      currentGop.nalCount = currentFrame.length;\n      currentGop.byteLength = currentFrame.byteLength;\n      currentGop.pts = currentFrame.pts;\n      currentGop.dts = currentFrame.dts;\n      currentGop.duration = currentFrame.duration;\n    } else {\n      currentGop.duration += currentFrame.duration;\n      currentGop.nalCount += currentFrame.length;\n      currentGop.byteLength += currentFrame.byteLength;\n      currentGop.push(currentFrame);\n    }\n  }\n\n  if (gops.length && currentGop.duration <= 0) {\n    currentGop.duration = gops[gops.length - 1].duration;\n  }\n  gops.byteLength += currentGop.byteLength;\n  gops.nalCount += currentGop.nalCount;\n  gops.duration += currentGop.duration;\n\n  // push the final Gop\n  gops.push(currentGop);\n  return gops;\n};\n\n/*\n * Search for the first keyframe in the GOPs and throw away all frames\n * until that keyframe. Then extend the duration of the pulled keyframe\n * and pull the PTS and DTS of the keyframe so that it covers the time\n * range of the frames that were disposed.\n *\n * @param {Array} gops video GOPs\n * @returns {Array} modified video GOPs\n */\nvar extendFirstKeyFrame = function(gops) {\n  var currentGop;\n\n  if (!gops[0][0].keyFrame && gops.length > 1) {\n    // Remove the first GOP\n    currentGop = gops.shift();\n\n    gops.byteLength -= currentGop.byteLength;\n    gops.nalCount -= currentGop.nalCount;\n\n    // Extend the first frame of what is now the\n    // first gop to cover the time period of the\n    // frames we just removed\n    gops[0][0].dts = currentGop.dts;\n    gops[0][0].pts = currentGop.pts;\n    gops[0][0].duration += currentGop.duration;\n  }\n\n  return gops;\n};\n\n/**\n * Default sample object\n * see ISO/IEC 14496-12:2012, section 8.6.4.3\n */\nvar createDefaultSample = function() {\n  return {\n    size: 0,\n    flags: {\n      isLeading: 0,\n      dependsOn: 1,\n      isDependedOn: 0,\n      hasRedundancy: 0,\n      degradationPriority: 0,\n      isNonSyncSample: 1\n    }\n  };\n};\n\n/*\n * Collates information from a video frame into an object for eventual\n * entry into an MP4 sample table.\n *\n * @param {Object} frame the video frame\n * @param {Number} dataOffset the byte offset to position the sample\n * @return {Object} object containing sample table info for a frame\n */\nvar sampleForFrame = function(frame, dataOffset) {\n  var sample = createDefaultSample();\n\n  sample.dataOffset = dataOffset;\n  sample.compositionTimeOffset = frame.pts - frame.dts;\n  sample.duration = frame.duration;\n  sample.size = 4 * frame.length; // Space for nal unit size\n  sample.size += frame.byteLength;\n\n  if (frame.keyFrame) {\n    sample.flags.dependsOn = 2;\n    sample.flags.isNonSyncSample = 0;\n  }\n\n  return sample;\n};\n\n// generate the track's sample table from an array of gops\nvar generateSampleTable = function(gops, baseDataOffset) {\n  var\n    h, i,\n    sample,\n    currentGop,\n    currentFrame,\n    dataOffset = baseDataOffset || 0,\n    samples = [];\n\n  for (h = 0; h < gops.length; h++) {\n    currentGop = gops[h];\n\n    for (i = 0; i < currentGop.length; i++) {\n      currentFrame = currentGop[i];\n\n      sample = sampleForFrame(currentFrame, dataOffset);\n\n      dataOffset += sample.size;\n\n      samples.push(sample);\n    }\n  }\n  return samples;\n};\n\n// generate the track's raw mdat data from an array of gops\nvar concatenateNalData = function(gops) {\n  var\n    h, i, j,\n    currentGop,\n    currentFrame,\n    currentNal,\n    dataOffset = 0,\n    nalsByteLength = gops.byteLength,\n    numberOfNals = gops.nalCount,\n    totalByteLength = nalsByteLength + 4 * numberOfNals,\n    data = new Uint8Array(totalByteLength),\n    view = new DataView(data.buffer);\n\n  // For each Gop..\n  for (h = 0; h < gops.length; h++) {\n    currentGop = gops[h];\n\n    // For each Frame..\n    for (i = 0; i < currentGop.length; i++) {\n      currentFrame = currentGop[i];\n\n      // For each NAL..\n      for (j = 0; j < currentFrame.length; j++) {\n        currentNal = currentFrame[j];\n\n        view.setUint32(dataOffset, currentNal.data.byteLength);\n        dataOffset += 4;\n        data.set(currentNal.data, dataOffset);\n        dataOffset += currentNal.data.byteLength;\n      }\n    }\n  }\n  return data;\n};\n\nmodule.exports = {\n  groupNalsIntoFrames: groupNalsIntoFrames,\n  groupFramesIntoGops: groupFramesIntoGops,\n  extendFirstKeyFrame: extendFirstKeyFrame,\n  generateSampleTable: generateSampleTable,\n  concatenateNalData: concatenateNalData\n};\n","var ONE_SECOND_IN_TS = 90000; // 90kHz clock\n\n/**\n * Store information about the start and end of the track and the\n * duration for each frame/sample we process in order to calculate\n * the baseMediaDecodeTime\n */\nvar collectDtsInfo = function(track, data) {\n  if (typeof data.pts === 'number') {\n    if (track.timelineStartInfo.pts === undefined) {\n      track.timelineStartInfo.pts = data.pts;\n    }\n\n    if (track.minSegmentPts === undefined) {\n      track.minSegmentPts = data.pts;\n    } else {\n      track.minSegmentPts = Math.min(track.minSegmentPts, data.pts);\n    }\n\n    if (track.maxSegmentPts === undefined) {\n      track.maxSegmentPts = data.pts;\n    } else {\n      track.maxSegmentPts = Math.max(track.maxSegmentPts, data.pts);\n    }\n  }\n\n  if (typeof data.dts === 'number') {\n    if (track.timelineStartInfo.dts === undefined) {\n      track.timelineStartInfo.dts = data.dts;\n    }\n\n    if (track.minSegmentDts === undefined) {\n      track.minSegmentDts = data.dts;\n    } else {\n      track.minSegmentDts = Math.min(track.minSegmentDts, data.dts);\n    }\n\n    if (track.maxSegmentDts === undefined) {\n      track.maxSegmentDts = data.dts;\n    } else {\n      track.maxSegmentDts = Math.max(track.maxSegmentDts, data.dts);\n    }\n  }\n};\n\n/**\n * Clear values used to calculate the baseMediaDecodeTime between\n * tracks\n */\nvar clearDtsInfo = function(track) {\n  delete track.minSegmentDts;\n  delete track.maxSegmentDts;\n  delete track.minSegmentPts;\n  delete track.maxSegmentPts;\n};\n\n/**\n * Calculate the track's baseMediaDecodeTime based on the earliest\n * DTS the transmuxer has ever seen and the minimum DTS for the\n * current track\n * @param track {object} track metadata configuration\n * @param keepOriginalTimestamps {boolean} If true, keep the timestamps\n *        in the source; false to adjust the first segment to start at 0.\n */\nvar calculateTrackBaseMediaDecodeTime = function(track, keepOriginalTimestamps) {\n  var\n    baseMediaDecodeTime,\n    scale,\n    minSegmentDts = track.minSegmentDts;\n\n  // Optionally adjust the time so the first segment starts at zero.\n  if (!keepOriginalTimestamps) {\n    minSegmentDts -= track.timelineStartInfo.dts;\n  }\n\n  // track.timelineStartInfo.baseMediaDecodeTime is the location, in time, where\n  // we want the start of the first segment to be placed\n  baseMediaDecodeTime = track.timelineStartInfo.baseMediaDecodeTime;\n\n  // Add to that the distance this segment is from the very first\n  baseMediaDecodeTime += minSegmentDts;\n\n  // baseMediaDecodeTime must not become negative\n  baseMediaDecodeTime = Math.max(0, baseMediaDecodeTime);\n\n  if (track.type === 'audio') {\n    // Audio has a different clock equal to the sampling_rate so we need to\n    // scale the PTS values into the clock rate of the track\n    scale = track.samplerate / ONE_SECOND_IN_TS;\n    baseMediaDecodeTime *= scale;\n    baseMediaDecodeTime = Math.floor(baseMediaDecodeTime);\n  }\n\n  return baseMediaDecodeTime;\n};\n\nmodule.exports = {\n  clearDtsInfo: clearDtsInfo,\n  calculateTrackBaseMediaDecodeTime: calculateTrackBaseMediaDecodeTime,\n  collectDtsInfo: collectDtsInfo\n};\n","/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * A stream-based mp2t to mp4 converter. This utility can be used to\n * deliver mp4s to a SourceBuffer on platforms that support native\n * Media Source Extensions.\n */\n'use strict';\nvar Stream = require('../utils/stream.js'),\n  CaptionStream = require('./caption-stream'),\n  StreamTypes = require('./stream-types'),\n  TimestampRolloverStream = require('./timestamp-rollover-stream').TimestampRolloverStream;\n\nvar m2tsStreamTypes = require('./stream-types.js');\n\n// object types\nvar TransportPacketStream, TransportParseStream, ElementaryStream;\n\n// constants\nvar\n  MP2T_PACKET_LENGTH = 188, // bytes\n  SYNC_BYTE = 0x47;\n\n/**\n * Splits an incoming stream of binary data into MPEG-2 Transport\n * Stream packets.\n */\nTransportPacketStream = function() {\n  var\n    buffer = new Uint8Array(MP2T_PACKET_LENGTH),\n    bytesInBuffer = 0;\n\n  TransportPacketStream.prototype.init.call(this);\n\n   // Deliver new bytes to the stream.\n\n  /**\n   * Split a stream of data into M2TS packets\n  **/\n  this.push = function(bytes) {\n    var\n      startIndex = 0,\n      endIndex = MP2T_PACKET_LENGTH,\n      everything;\n\n    // If there are bytes remaining from the last segment, prepend them to the\n    // bytes that were pushed in\n    if (bytesInBuffer) {\n      everything = new Uint8Array(bytes.byteLength + bytesInBuffer);\n      everything.set(buffer.subarray(0, bytesInBuffer));\n      everything.set(bytes, bytesInBuffer);\n      bytesInBuffer = 0;\n    } else {\n      everything = bytes;\n    }\n\n    // While we have enough data for a packet\n    while (endIndex < everything.byteLength) {\n      // Look for a pair of start and end sync bytes in the data..\n      if (everything[startIndex] === SYNC_BYTE && everything[endIndex] === SYNC_BYTE) {\n        // We found a packet so emit it and jump one whole packet forward in\n        // the stream\n        this.trigger('data', everything.subarray(startIndex, endIndex));\n        startIndex += MP2T_PACKET_LENGTH;\n        endIndex += MP2T_PACKET_LENGTH;\n        continue;\n      }\n      // If we get here, we have somehow become de-synchronized and we need to step\n      // forward one byte at a time until we find a pair of sync bytes that denote\n      // a packet\n      startIndex++;\n      endIndex++;\n    }\n\n    // If there was some data left over at the end of the segment that couldn't\n    // possibly be a whole packet, keep it because it might be the start of a packet\n    // that continues in the next segment\n    if (startIndex < everything.byteLength) {\n      buffer.set(everything.subarray(startIndex), 0);\n      bytesInBuffer = everything.byteLength - startIndex;\n    }\n  };\n\n  /**\n   * Passes identified M2TS packets to the TransportParseStream to be parsed\n  **/\n  this.flush = function() {\n    // If the buffer contains a whole packet when we are being flushed, emit it\n    // and empty the buffer. Otherwise hold onto the data because it may be\n    // important for decoding the next segment\n    if (bytesInBuffer === MP2T_PACKET_LENGTH && buffer[0] === SYNC_BYTE) {\n      this.trigger('data', buffer);\n      bytesInBuffer = 0;\n    }\n    this.trigger('done');\n  };\n};\nTransportPacketStream.prototype = new Stream();\n\n/**\n * Accepts an MP2T TransportPacketStream and emits data events with parsed\n * forms of the individual transport stream packets.\n */\nTransportParseStream = function() {\n  var parsePsi, parsePat, parsePmt, self;\n  TransportParseStream.prototype.init.call(this);\n  self = this;\n\n  this.packetsWaitingForPmt = [];\n  this.programMapTable = undefined;\n\n  parsePsi = function(payload, psi) {\n    var offset = 0;\n\n    // PSI packets may be split into multiple sections and those\n    // sections may be split into multiple packets. If a PSI\n    // section starts in this packet, the payload_unit_start_indicator\n    // will be true and the first byte of the payload will indicate\n    // the offset from the current position to the start of the\n    // section.\n    if (psi.payloadUnitStartIndicator) {\n      offset += payload[offset] + 1;\n    }\n\n    if (psi.type === 'pat') {\n      parsePat(payload.subarray(offset), psi);\n    } else {\n      parsePmt(payload.subarray(offset), psi);\n    }\n  };\n\n  parsePat = function(payload, pat) {\n    pat.section_number = payload[7]; // eslint-disable-line camelcase\n    pat.last_section_number = payload[8]; // eslint-disable-line camelcase\n\n    // skip the PSI header and parse the first PMT entry\n    self.pmtPid = (payload[10] & 0x1F) << 8 | payload[11];\n    pat.pmtPid = self.pmtPid;\n  };\n\n  /**\n   * Parse out the relevant fields of a Program Map Table (PMT).\n   * @param payload {Uint8Array} the PMT-specific portion of an MP2T\n   * packet. The first byte in this array should be the table_id\n   * field.\n   * @param pmt {object} the object that should be decorated with\n   * fields parsed from the PMT.\n   */\n  parsePmt = function(payload, pmt) {\n    var sectionLength, tableEnd, programInfoLength, offset;\n\n    // PMTs can be sent ahead of the time when they should actually\n    // take effect. We don't believe this should ever be the case\n    // for HLS but we'll ignore \"forward\" PMT declarations if we see\n    // them. Future PMT declarations have the current_next_indicator\n    // set to zero.\n    if (!(payload[5] & 0x01)) {\n      return;\n    }\n\n    // overwrite any existing program map table\n    self.programMapTable = {\n      video: null,\n      audio: null,\n      'timed-metadata': {}\n    };\n\n    // the mapping table ends at the end of the current section\n    sectionLength = (payload[1] & 0x0f) << 8 | payload[2];\n    tableEnd = 3 + sectionLength - 4;\n\n    // to determine where the table is, we have to figure out how\n    // long the program info descriptors are\n    programInfoLength = (payload[10] & 0x0f) << 8 | payload[11];\n\n    // advance the offset to the first entry in the mapping table\n    offset = 12 + programInfoLength;\n    while (offset < tableEnd) {\n      var streamType = payload[offset];\n      var pid = (payload[offset + 1] & 0x1F) << 8 | payload[offset + 2];\n\n      // only map a single elementary_pid for audio and video stream types\n      // TODO: should this be done for metadata too? for now maintain behavior of\n      //       multiple metadata streams\n      if (streamType === StreamTypes.H264_STREAM_TYPE &&\n          self.programMapTable.video === null) {\n        self.programMapTable.video = pid;\n      } else if (streamType === StreamTypes.ADTS_STREAM_TYPE &&\n                 self.programMapTable.audio === null) {\n        self.programMapTable.audio = pid;\n      } else if (streamType === StreamTypes.METADATA_STREAM_TYPE) {\n        // map pid to stream type for metadata streams\n        self.programMapTable['timed-metadata'][pid] = streamType;\n      }\n\n      // move to the next table entry\n      // skip past the elementary stream descriptors, if present\n      offset += ((payload[offset + 3] & 0x0F) << 8 | payload[offset + 4]) + 5;\n    }\n\n    // record the map on the packet as well\n    pmt.programMapTable = self.programMapTable;\n  };\n\n  /**\n   * Deliver a new MP2T packet to the next stream in the pipeline.\n   */\n  this.push = function(packet) {\n    var\n      result = {},\n      offset = 4;\n\n    result.payloadUnitStartIndicator = !!(packet[1] & 0x40);\n\n    // pid is a 13-bit field starting at the last bit of packet[1]\n    result.pid = packet[1] & 0x1f;\n    result.pid <<= 8;\n    result.pid |= packet[2];\n\n    // if an adaption field is present, its length is specified by the\n    // fifth byte of the TS packet header. The adaptation field is\n    // used to add stuffing to PES packets that don't fill a complete\n    // TS packet, and to specify some forms of timing and control data\n    // that we do not currently use.\n    if (((packet[3] & 0x30) >>> 4) > 0x01) {\n      offset += packet[offset] + 1;\n    }\n\n    // parse the rest of the packet based on the type\n    if (result.pid === 0) {\n      result.type = 'pat';\n      parsePsi(packet.subarray(offset), result);\n      this.trigger('data', result);\n    } else if (result.pid === this.pmtPid) {\n      result.type = 'pmt';\n      parsePsi(packet.subarray(offset), result);\n      this.trigger('data', result);\n\n      // if there are any packets waiting for a PMT to be found, process them now\n      while (this.packetsWaitingForPmt.length) {\n        this.processPes_.apply(this, this.packetsWaitingForPmt.shift());\n      }\n    } else if (this.programMapTable === undefined) {\n      // When we have not seen a PMT yet, defer further processing of\n      // PES packets until one has been parsed\n      this.packetsWaitingForPmt.push([packet, offset, result]);\n    } else {\n      this.processPes_(packet, offset, result);\n    }\n  };\n\n  this.processPes_ = function(packet, offset, result) {\n    // set the appropriate stream type\n    if (result.pid === this.programMapTable.video) {\n      result.streamType = StreamTypes.H264_STREAM_TYPE;\n    } else if (result.pid === this.programMapTable.audio) {\n      result.streamType = StreamTypes.ADTS_STREAM_TYPE;\n    } else {\n      // if not video or audio, it is timed-metadata or unknown\n      // if unknown, streamType will be undefined\n      result.streamType = this.programMapTable['timed-metadata'][result.pid];\n    }\n\n    result.type = 'pes';\n    result.data = packet.subarray(offset);\n\n    this.trigger('data', result);\n  };\n\n};\nTransportParseStream.prototype = new Stream();\nTransportParseStream.STREAM_TYPES  = {\n  h264: 0x1b,\n  adts: 0x0f\n};\n\n/**\n * Reconsistutes program elementary stream (PES) packets from parsed\n * transport stream packets. That is, if you pipe an\n * mp2t.TransportParseStream into a mp2t.ElementaryStream, the output\n * events will be events which capture the bytes for individual PES\n * packets plus relevant metadata that has been extracted from the\n * container.\n */\nElementaryStream = function() {\n  var\n    self = this,\n    // PES packet fragments\n    video = {\n      data: [],\n      size: 0\n    },\n    audio = {\n      data: [],\n      size: 0\n    },\n    timedMetadata = {\n      data: [],\n      size: 0\n    },\n    parsePes = function(payload, pes) {\n      var ptsDtsFlags;\n\n      // get the packet length, this will be 0 for video\n      pes.packetLength = 6 + ((payload[4] << 8) | payload[5]);\n\n      // find out if this packets starts a new keyframe\n      pes.dataAlignmentIndicator = (payload[6] & 0x04) !== 0;\n      // PES packets may be annotated with a PTS value, or a PTS value\n      // and a DTS value. Determine what combination of values is\n      // available to work with.\n      ptsDtsFlags = payload[7];\n\n      // PTS and DTS are normally stored as a 33-bit number.  Javascript\n      // performs all bitwise operations on 32-bit integers but javascript\n      // supports a much greater range (52-bits) of integer using standard\n      // mathematical operations.\n      // We construct a 31-bit value using bitwise operators over the 31\n      // most significant bits and then multiply by 4 (equal to a left-shift\n      // of 2) before we add the final 2 least significant bits of the\n      // timestamp (equal to an OR.)\n      if (ptsDtsFlags & 0xC0) {\n        // the PTS and DTS are not written out directly. For information\n        // on how they are encoded, see\n        // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n        pes.pts = (payload[9] & 0x0E) << 27 |\n          (payload[10] & 0xFF) << 20 |\n          (payload[11] & 0xFE) << 12 |\n          (payload[12] & 0xFF) <<  5 |\n          (payload[13] & 0xFE) >>>  3;\n        pes.pts *= 4; // Left shift by 2\n        pes.pts += (payload[13] & 0x06) >>> 1; // OR by the two LSBs\n        pes.dts = pes.pts;\n        if (ptsDtsFlags & 0x40) {\n          pes.dts = (payload[14] & 0x0E) << 27 |\n            (payload[15] & 0xFF) << 20 |\n            (payload[16] & 0xFE) << 12 |\n            (payload[17] & 0xFF) << 5 |\n            (payload[18] & 0xFE) >>> 3;\n          pes.dts *= 4; // Left shift by 2\n          pes.dts += (payload[18] & 0x06) >>> 1; // OR by the two LSBs\n        }\n      }\n      // the data section starts immediately after the PES header.\n      // pes_header_data_length specifies the number of header bytes\n      // that follow the last byte of the field.\n      pes.data = payload.subarray(9 + payload[8]);\n    },\n    /**\n      * Pass completely parsed PES packets to the next stream in the pipeline\n     **/\n    flushStream = function(stream, type, forceFlush) {\n      var\n        packetData = new Uint8Array(stream.size),\n        event = {\n          type: type\n        },\n        i = 0,\n        offset = 0,\n        packetFlushable = false,\n        fragment;\n\n      // do nothing if there is not enough buffered data for a complete\n      // PES header\n      if (!stream.data.length || stream.size < 9) {\n        return;\n      }\n      event.trackId = stream.data[0].pid;\n\n      // reassemble the packet\n      for (i = 0; i < stream.data.length; i++) {\n        fragment = stream.data[i];\n\n        packetData.set(fragment.data, offset);\n        offset += fragment.data.byteLength;\n      }\n\n      // parse assembled packet's PES header\n      parsePes(packetData, event);\n\n      // non-video PES packets MUST have a non-zero PES_packet_length\n      // check that there is enough stream data to fill the packet\n      packetFlushable = type === 'video' || event.packetLength <= stream.size;\n\n      // flush pending packets if the conditions are right\n      if (forceFlush || packetFlushable) {\n        stream.size = 0;\n        stream.data.length = 0;\n      }\n\n      // only emit packets that are complete. this is to avoid assembling\n      // incomplete PES packets due to poor segmentation\n      if (packetFlushable) {\n        self.trigger('data', event);\n      }\n    };\n\n  ElementaryStream.prototype.init.call(this);\n\n  /**\n   * Identifies M2TS packet types and parses PES packets using metadata\n   * parsed from the PMT\n   **/\n  this.push = function(data) {\n    ({\n      pat: function() {\n        // we have to wait for the PMT to arrive as well before we\n        // have any meaningful metadata\n      },\n      pes: function() {\n        var stream, streamType;\n\n        switch (data.streamType) {\n        case StreamTypes.H264_STREAM_TYPE:\n        case m2tsStreamTypes.H264_STREAM_TYPE:\n          stream = video;\n          streamType = 'video';\n          break;\n        case StreamTypes.ADTS_STREAM_TYPE:\n          stream = audio;\n          streamType = 'audio';\n          break;\n        case StreamTypes.METADATA_STREAM_TYPE:\n          stream = timedMetadata;\n          streamType = 'timed-metadata';\n          break;\n        default:\n          // ignore unknown stream types\n          return;\n        }\n\n        // if a new packet is starting, we can flush the completed\n        // packet\n        if (data.payloadUnitStartIndicator) {\n          flushStream(stream, streamType, true);\n        }\n\n        // buffer this fragment until we are sure we've received the\n        // complete payload\n        stream.data.push(data);\n        stream.size += data.data.byteLength;\n      },\n      pmt: function() {\n        var\n          event = {\n            type: 'metadata',\n            tracks: []\n          },\n          programMapTable = data.programMapTable;\n\n        // translate audio and video streams to tracks\n        if (programMapTable.video !== null) {\n          event.tracks.push({\n            timelineStartInfo: {\n              baseMediaDecodeTime: 0\n            },\n            id: +programMapTable.video,\n            codec: 'avc',\n            type: 'video'\n          });\n        }\n        if (programMapTable.audio !== null) {\n          event.tracks.push({\n            timelineStartInfo: {\n              baseMediaDecodeTime: 0\n            },\n            id: +programMapTable.audio,\n            codec: 'adts',\n            type: 'audio'\n          });\n        }\n\n        self.trigger('data', event);\n      }\n    })[data.type]();\n  };\n\n  /**\n   * Flush any remaining input. Video PES packets may be of variable\n   * length. Normally, the start of a new video packet can trigger the\n   * finalization of the previous packet. That is not possible if no\n   * more video is forthcoming, however. In that case, some other\n   * mechanism (like the end of the file) has to be employed. When it is\n   * clear that no additional data is forthcoming, calling this method\n   * will flush the buffered packets.\n   */\n  this.flush = function() {\n    // !!THIS ORDER IS IMPORTANT!!\n    // video first then audio\n    flushStream(video, 'video');\n    flushStream(audio, 'audio');\n    flushStream(timedMetadata, 'timed-metadata');\n    this.trigger('done');\n  };\n};\nElementaryStream.prototype = new Stream();\n\nvar m2ts = {\n  PAT_PID: 0x0000,\n  MP2T_PACKET_LENGTH: MP2T_PACKET_LENGTH,\n  TransportPacketStream: TransportPacketStream,\n  TransportParseStream: TransportParseStream,\n  ElementaryStream: ElementaryStream,\n  TimestampRolloverStream: TimestampRolloverStream,\n  CaptionStream: CaptionStream.CaptionStream,\n  Cea608Stream: CaptionStream.Cea608Stream,\n  MetadataStream: require('./metadata-stream')\n};\n\nfor (var type in StreamTypes) {\n  if (StreamTypes.hasOwnProperty(type)) {\n    m2ts[type] = StreamTypes[type];\n  }\n}\n\nmodule.exports = m2ts;\n","/**\n * Accepts program elementary stream (PES) data events and parses out\n * ID3 metadata from them, if present.\n * @see http://id3.org/id3v2.3.0\n */\n'use strict';\nvar\n  Stream = require('../utils/stream'),\n  StreamTypes = require('./stream-types'),\n  // return a percent-encoded representation of the specified byte range\n  // @see http://en.wikipedia.org/wiki/Percent-encoding\n  percentEncode = function(bytes, start, end) {\n    var i, result = '';\n    for (i = start; i < end; i++) {\n      result += '%' + ('00' + bytes[i].toString(16)).slice(-2);\n    }\n    return result;\n  },\n  // return the string representation of the specified byte range,\n  // interpreted as UTf-8.\n  parseUtf8 = function(bytes, start, end) {\n    return decodeURIComponent(percentEncode(bytes, start, end));\n  },\n  // return the string representation of the specified byte range,\n  // interpreted as ISO-8859-1.\n  parseIso88591 = function(bytes, start, end) {\n    return unescape(percentEncode(bytes, start, end)); // jshint ignore:line\n  },\n  parseSyncSafeInteger = function(data) {\n    return (data[0] << 21) |\n            (data[1] << 14) |\n            (data[2] << 7) |\n            (data[3]);\n  },\n  tagParsers = {\n    TXXX: function(tag) {\n      var i;\n      if (tag.data[0] !== 3) {\n        // ignore frames with unrecognized character encodings\n        return;\n      }\n\n      for (i = 1; i < tag.data.length; i++) {\n        if (tag.data[i] === 0) {\n          // parse the text fields\n          tag.description = parseUtf8(tag.data, 1, i);\n          // do not include the null terminator in the tag value\n          tag.value = parseUtf8(tag.data, i + 1, tag.data.length).replace(/\\0*$/, '');\n          break;\n        }\n      }\n      tag.data = tag.value;\n    },\n    WXXX: function(tag) {\n      var i;\n      if (tag.data[0] !== 3) {\n        // ignore frames with unrecognized character encodings\n        return;\n      }\n\n      for (i = 1; i < tag.data.length; i++) {\n        if (tag.data[i] === 0) {\n          // parse the description and URL fields\n          tag.description = parseUtf8(tag.data, 1, i);\n          tag.url = parseUtf8(tag.data, i + 1, tag.data.length);\n          break;\n        }\n      }\n    },\n    PRIV: function(tag) {\n      var i;\n\n      for (i = 0; i < tag.data.length; i++) {\n        if (tag.data[i] === 0) {\n          // parse the description and URL fields\n          tag.owner = parseIso88591(tag.data, 0, i);\n          break;\n        }\n      }\n      tag.privateData = tag.data.subarray(i + 1);\n      tag.data = tag.privateData;\n    }\n  },\n  MetadataStream;\n\nMetadataStream = function(options) {\n  var\n    settings = {\n      debug: !!(options && options.debug),\n\n      // the bytes of the program-level descriptor field in MP2T\n      // see ISO/IEC 13818-1:2013 (E), section 2.6 \"Program and\n      // program element descriptors\"\n      descriptor: options && options.descriptor\n    },\n    // the total size in bytes of the ID3 tag being parsed\n    tagSize = 0,\n    // tag data that is not complete enough to be parsed\n    buffer = [],\n    // the total number of bytes currently in the buffer\n    bufferSize = 0,\n    i;\n\n  MetadataStream.prototype.init.call(this);\n\n  // calculate the text track in-band metadata track dispatch type\n  // https://html.spec.whatwg.org/multipage/embedded-content.html#steps-to-expose-a-media-resource-specific-text-track\n  this.dispatchType = StreamTypes.METADATA_STREAM_TYPE.toString(16);\n  if (settings.descriptor) {\n    for (i = 0; i < settings.descriptor.length; i++) {\n      this.dispatchType += ('00' + settings.descriptor[i].toString(16)).slice(-2);\n    }\n  }\n\n  this.push = function(chunk) {\n    var tag, frameStart, frameSize, frame, i, frameHeader;\n    if (chunk.type !== 'timed-metadata') {\n      return;\n    }\n\n    // if data_alignment_indicator is set in the PES header,\n    // we must have the start of a new ID3 tag. Assume anything\n    // remaining in the buffer was malformed and throw it out\n    if (chunk.dataAlignmentIndicator) {\n      bufferSize = 0;\n      buffer.length = 0;\n    }\n\n    // ignore events that don't look like ID3 data\n    if (buffer.length === 0 &&\n        (chunk.data.length < 10 ||\n          chunk.data[0] !== 'I'.charCodeAt(0) ||\n          chunk.data[1] !== 'D'.charCodeAt(0) ||\n          chunk.data[2] !== '3'.charCodeAt(0))) {\n      if (settings.debug) {\n        // eslint-disable-next-line no-console\n        console.log('Skipping unrecognized metadata packet');\n      }\n      return;\n    }\n\n    // add this chunk to the data we've collected so far\n\n    buffer.push(chunk);\n    bufferSize += chunk.data.byteLength;\n\n    // grab the size of the entire frame from the ID3 header\n    if (buffer.length === 1) {\n      // the frame size is transmitted as a 28-bit integer in the\n      // last four bytes of the ID3 header.\n      // The most significant bit of each byte is dropped and the\n      // results concatenated to recover the actual value.\n      tagSize = parseSyncSafeInteger(chunk.data.subarray(6, 10));\n\n      // ID3 reports the tag size excluding the header but it's more\n      // convenient for our comparisons to include it\n      tagSize += 10;\n    }\n\n    // if the entire frame has not arrived, wait for more data\n    if (bufferSize < tagSize) {\n      return;\n    }\n\n    // collect the entire frame so it can be parsed\n    tag = {\n      data: new Uint8Array(tagSize),\n      frames: [],\n      pts: buffer[0].pts,\n      dts: buffer[0].dts\n    };\n    for (i = 0; i < tagSize;) {\n      tag.data.set(buffer[0].data.subarray(0, tagSize - i), i);\n      i += buffer[0].data.byteLength;\n      bufferSize -= buffer[0].data.byteLength;\n      buffer.shift();\n    }\n\n    // find the start of the first frame and the end of the tag\n    frameStart = 10;\n    if (tag.data[5] & 0x40) {\n      // advance the frame start past the extended header\n      frameStart += 4; // header size field\n      frameStart += parseSyncSafeInteger(tag.data.subarray(10, 14));\n\n      // clip any padding off the end\n      tagSize -= parseSyncSafeInteger(tag.data.subarray(16, 20));\n    }\n\n    // parse one or more ID3 frames\n    // http://id3.org/id3v2.3.0#ID3v2_frame_overview\n    do {\n      // determine the number of bytes in this frame\n      frameSize = parseSyncSafeInteger(tag.data.subarray(frameStart + 4, frameStart + 8));\n      if (frameSize < 1) {\n         // eslint-disable-next-line no-console\n        return console.log('Malformed ID3 frame encountered. Skipping metadata parsing.');\n      }\n      frameHeader = String.fromCharCode(tag.data[frameStart],\n                                        tag.data[frameStart + 1],\n                                        tag.data[frameStart + 2],\n                                        tag.data[frameStart + 3]);\n\n\n      frame = {\n        id: frameHeader,\n        data: tag.data.subarray(frameStart + 10, frameStart + frameSize + 10)\n      };\n      frame.key = frame.id;\n      if (tagParsers[frame.id]) {\n        tagParsers[frame.id](frame);\n\n        // handle the special PRIV frame used to indicate the start\n        // time for raw AAC data\n        if (frame.owner === 'com.apple.streaming.transportStreamTimestamp') {\n          var\n            d = frame.data,\n            size = ((d[3] & 0x01)  << 30) |\n                   (d[4]  << 22) |\n                   (d[5] << 14) |\n                   (d[6] << 6) |\n                   (d[7] >>> 2);\n\n          size *= 4;\n          size += d[7] & 0x03;\n          frame.timeStamp = size;\n          // in raw AAC, all subsequent data will be timestamped based\n          // on the value of this frame\n          // we couldn't have known the appropriate pts and dts before\n          // parsing this ID3 tag so set those values now\n          if (tag.pts === undefined && tag.dts === undefined) {\n            tag.pts = frame.timeStamp;\n            tag.dts = frame.timeStamp;\n          }\n          this.trigger('timestamp', frame);\n        }\n      }\n      tag.frames.push(frame);\n\n      frameStart += 10; // advance past the frame header\n      frameStart += frameSize; // advance past the frame body\n    } while (frameStart < tagSize);\n    this.trigger('data', tag);\n  };\n};\nMetadataStream.prototype = new Stream();\n\nmodule.exports = MetadataStream;\n","'use strict';\n\nvar Stream = require('../utils/stream.js');\n\nvar AdtsStream;\n\nvar\n  ADTS_SAMPLING_FREQUENCIES = [\n    96000,\n    88200,\n    64000,\n    48000,\n    44100,\n    32000,\n    24000,\n    22050,\n    16000,\n    12000,\n    11025,\n    8000,\n    7350\n  ];\n\n/*\n * Accepts a ElementaryStream and emits data events with parsed\n * AAC Audio Frames of the individual packets. Input audio in ADTS\n * format is unpacked and re-emitted as AAC frames.\n *\n * @see http://wiki.multimedia.cx/index.php?title=ADTS\n * @see http://wiki.multimedia.cx/?title=Understanding_AAC\n */\nAdtsStream = function() {\n  var buffer;\n\n  AdtsStream.prototype.init.call(this);\n\n  this.push = function(packet) {\n    var\n      i = 0,\n      frameNum = 0,\n      frameLength,\n      protectionSkipBytes,\n      frameEnd,\n      oldBuffer,\n      sampleCount,\n      adtsFrameDuration;\n\n    if (packet.type !== 'audio') {\n      // ignore non-audio data\n      return;\n    }\n\n    // Prepend any data in the buffer to the input data so that we can parse\n    // aac frames the cross a PES packet boundary\n    if (buffer) {\n      oldBuffer = buffer;\n      buffer = new Uint8Array(oldBuffer.byteLength + packet.data.byteLength);\n      buffer.set(oldBuffer);\n      buffer.set(packet.data, oldBuffer.byteLength);\n    } else {\n      buffer = packet.data;\n    }\n\n    // unpack any ADTS frames which have been fully received\n    // for details on the ADTS header, see http://wiki.multimedia.cx/index.php?title=ADTS\n    while (i + 5 < buffer.length) {\n\n      // Loook for the start of an ADTS header..\n      if (buffer[i] !== 0xFF || (buffer[i + 1] & 0xF6) !== 0xF0) {\n        // If a valid header was not found,  jump one forward and attempt to\n        // find a valid ADTS header starting at the next byte\n        i++;\n        continue;\n      }\n\n      // The protection skip bit tells us if we have 2 bytes of CRC data at the\n      // end of the ADTS header\n      protectionSkipBytes = (~buffer[i + 1] & 0x01) * 2;\n\n      // Frame length is a 13 bit integer starting 16 bits from the\n      // end of the sync sequence\n      frameLength = ((buffer[i + 3] & 0x03) << 11) |\n        (buffer[i + 4] << 3) |\n        ((buffer[i + 5] & 0xe0) >> 5);\n\n      sampleCount = ((buffer[i + 6] & 0x03) + 1) * 1024;\n      adtsFrameDuration = (sampleCount * 90000) /\n        ADTS_SAMPLING_FREQUENCIES[(buffer[i + 2] & 0x3c) >>> 2];\n\n      frameEnd = i + frameLength;\n\n      // If we don't have enough data to actually finish this ADTS frame, return\n      // and wait for more data\n      if (buffer.byteLength < frameEnd) {\n        return;\n      }\n\n      // Otherwise, deliver the complete AAC frame\n      this.trigger('data', {\n        pts: packet.pts + (frameNum * adtsFrameDuration),\n        dts: packet.dts + (frameNum * adtsFrameDuration),\n        sampleCount: sampleCount,\n        audioobjecttype: ((buffer[i + 2] >>> 6) & 0x03) + 1,\n        channelcount: ((buffer[i + 2] & 1) << 2) |\n          ((buffer[i + 3] & 0xc0) >>> 6),\n        samplerate: ADTS_SAMPLING_FREQUENCIES[(buffer[i + 2] & 0x3c) >>> 2],\n        samplingfrequencyindex: (buffer[i + 2] & 0x3c) >>> 2,\n        // assume ISO/IEC 14496-12 AudioSampleEntry default of 16\n        samplesize: 16,\n        data: buffer.subarray(i + 7 + protectionSkipBytes, frameEnd)\n      });\n\n      // If the buffer is empty, clear it and return\n      if (buffer.byteLength === frameEnd) {\n        buffer = undefined;\n        return;\n      }\n\n      frameNum++;\n\n      // Remove the finished frame from the buffer and start the process again\n      buffer = buffer.subarray(frameEnd);\n    }\n  };\n  this.flush = function() {\n    this.trigger('done');\n  };\n};\n\nAdtsStream.prototype = new Stream();\n\nmodule.exports = AdtsStream;\n","'use strict';\n\nvar Stream = require('../utils/stream.js');\nvar ExpGolomb = require('../utils/exp-golomb.js');\n\nvar H264Stream, NalByteStream;\nvar PROFILES_WITH_OPTIONAL_SPS_DATA;\n\n/**\n * Accepts a NAL unit byte stream and unpacks the embedded NAL units.\n */\nNalByteStream = function() {\n  var\n    syncPoint = 0,\n    i,\n    buffer;\n  NalByteStream.prototype.init.call(this);\n\n  /*\n   * Scans a byte stream and triggers a data event with the NAL units found.\n   * @param {Object} data Event received from H264Stream\n   * @param {Uint8Array} data.data The h264 byte stream to be scanned\n   *\n   * @see H264Stream.push\n   */\n  this.push = function(data) {\n    var swapBuffer;\n\n    if (!buffer) {\n      buffer = data.data;\n    } else {\n      swapBuffer = new Uint8Array(buffer.byteLength + data.data.byteLength);\n      swapBuffer.set(buffer);\n      swapBuffer.set(data.data, buffer.byteLength);\n      buffer = swapBuffer;\n    }\n\n    // Rec. ITU-T H.264, Annex B\n    // scan for NAL unit boundaries\n\n    // a match looks like this:\n    // 0 0 1 .. NAL .. 0 0 1\n    // ^ sync point        ^ i\n    // or this:\n    // 0 0 1 .. NAL .. 0 0 0\n    // ^ sync point        ^ i\n\n    // advance the sync point to a NAL start, if necessary\n    for (; syncPoint < buffer.byteLength - 3; syncPoint++) {\n      if (buffer[syncPoint + 2] === 1) {\n        // the sync point is properly aligned\n        i = syncPoint + 5;\n        break;\n      }\n    }\n\n    while (i < buffer.byteLength) {\n      // look at the current byte to determine if we've hit the end of\n      // a NAL unit boundary\n      switch (buffer[i]) {\n      case 0:\n        // skip past non-sync sequences\n        if (buffer[i - 1] !== 0) {\n          i += 2;\n          break;\n        } else if (buffer[i - 2] !== 0) {\n          i++;\n          break;\n        }\n\n        // deliver the NAL unit if it isn't empty\n        if (syncPoint + 3 !== i - 2) {\n          this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));\n        }\n\n        // drop trailing zeroes\n        do {\n          i++;\n        } while (buffer[i] !== 1 && i < buffer.length);\n        syncPoint = i - 2;\n        i += 3;\n        break;\n      case 1:\n        // skip past non-sync sequences\n        if (buffer[i - 1] !== 0 ||\n            buffer[i - 2] !== 0) {\n          i += 3;\n          break;\n        }\n\n        // deliver the NAL unit\n        this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));\n        syncPoint = i - 2;\n        i += 3;\n        break;\n      default:\n        // the current byte isn't a one or zero, so it cannot be part\n        // of a sync sequence\n        i += 3;\n        break;\n      }\n    }\n    // filter out the NAL units that were delivered\n    buffer = buffer.subarray(syncPoint);\n    i -= syncPoint;\n    syncPoint = 0;\n  };\n\n  this.flush = function() {\n    // deliver the last buffered NAL unit\n    if (buffer && buffer.byteLength > 3) {\n      this.trigger('data', buffer.subarray(syncPoint + 3));\n    }\n    // reset the stream state\n    buffer = null;\n    syncPoint = 0;\n    this.trigger('done');\n  };\n};\nNalByteStream.prototype = new Stream();\n\n// values of profile_idc that indicate additional fields are included in the SPS\n// see Recommendation ITU-T H.264 (4/2013),\n// 7.3.2.1.1 Sequence parameter set data syntax\nPROFILES_WITH_OPTIONAL_SPS_DATA = {\n  100: true,\n  110: true,\n  122: true,\n  244: true,\n  44: true,\n  83: true,\n  86: true,\n  118: true,\n  128: true,\n  138: true,\n  139: true,\n  134: true\n};\n\n/**\n * Accepts input from a ElementaryStream and produces H.264 NAL unit data\n * events.\n */\nH264Stream = function() {\n  var\n    nalByteStream = new NalByteStream(),\n    self,\n    trackId,\n    currentPts,\n    currentDts,\n\n    discardEmulationPreventionBytes,\n    readSequenceParameterSet,\n    skipScalingList;\n\n  H264Stream.prototype.init.call(this);\n  self = this;\n\n  /*\n   * Pushes a packet from a stream onto the NalByteStream\n   *\n   * @param {Object} packet - A packet received from a stream\n   * @param {Uint8Array} packet.data - The raw bytes of the packet\n   * @param {Number} packet.dts - Decode timestamp of the packet\n   * @param {Number} packet.pts - Presentation timestamp of the packet\n   * @param {Number} packet.trackId - The id of the h264 track this packet came from\n   * @param {('video'|'audio')} packet.type - The type of packet\n   *\n   */\n  this.push = function(packet) {\n    if (packet.type !== 'video') {\n      return;\n    }\n    trackId = packet.trackId;\n    currentPts = packet.pts;\n    currentDts = packet.dts;\n\n    nalByteStream.push(packet);\n  };\n\n  /*\n   * Identify NAL unit types and pass on the NALU, trackId, presentation and decode timestamps\n   * for the NALUs to the next stream component.\n   * Also, preprocess caption and sequence parameter NALUs.\n   *\n   * @param {Uint8Array} data - A NAL unit identified by `NalByteStream.push`\n   * @see NalByteStream.push\n   */\n  nalByteStream.on('data', function(data) {\n    var\n      event = {\n        trackId: trackId,\n        pts: currentPts,\n        dts: currentDts,\n        data: data\n      };\n\n    switch (data[0] & 0x1f) {\n    case 0x05:\n      event.nalUnitType = 'slice_layer_without_partitioning_rbsp_idr';\n      break;\n    case 0x06:\n      event.nalUnitType = 'sei_rbsp';\n      event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));\n      break;\n    case 0x07:\n      event.nalUnitType = 'seq_parameter_set_rbsp';\n      event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));\n      event.config = readSequenceParameterSet(event.escapedRBSP);\n      break;\n    case 0x08:\n      event.nalUnitType = 'pic_parameter_set_rbsp';\n      break;\n    case 0x09:\n      event.nalUnitType = 'access_unit_delimiter_rbsp';\n      break;\n\n    default:\n      break;\n    }\n    // This triggers data on the H264Stream\n    self.trigger('data', event);\n  });\n  nalByteStream.on('done', function() {\n    self.trigger('done');\n  });\n\n  this.flush = function() {\n    nalByteStream.flush();\n  };\n\n  /**\n   * Advance the ExpGolomb decoder past a scaling list. The scaling\n   * list is optionally transmitted as part of a sequence parameter\n   * set and is not relevant to transmuxing.\n   * @param count {number} the number of entries in this scaling list\n   * @param expGolombDecoder {object} an ExpGolomb pointed to the\n   * start of a scaling list\n   * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1\n   */\n  skipScalingList = function(count, expGolombDecoder) {\n    var\n      lastScale = 8,\n      nextScale = 8,\n      j,\n      deltaScale;\n\n    for (j = 0; j < count; j++) {\n      if (nextScale !== 0) {\n        deltaScale = expGolombDecoder.readExpGolomb();\n        nextScale = (lastScale + deltaScale + 256) % 256;\n      }\n\n      lastScale = (nextScale === 0) ? lastScale : nextScale;\n    }\n  };\n\n  /**\n   * Expunge any \"Emulation Prevention\" bytes from a \"Raw Byte\n   * Sequence Payload\"\n   * @param data {Uint8Array} the bytes of a RBSP from a NAL\n   * unit\n   * @return {Uint8Array} the RBSP without any Emulation\n   * Prevention Bytes\n   */\n  discardEmulationPreventionBytes = function(data) {\n    var\n      length = data.byteLength,\n      emulationPreventionBytesPositions = [],\n      i = 1,\n      newLength, newData;\n\n    // Find all `Emulation Prevention Bytes`\n    while (i < length - 2) {\n      if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {\n        emulationPreventionBytesPositions.push(i + 2);\n        i += 2;\n      } else {\n        i++;\n      }\n    }\n\n    // If no Emulation Prevention Bytes were found just return the original\n    // array\n    if (emulationPreventionBytesPositions.length === 0) {\n      return data;\n    }\n\n    // Create a new array to hold the NAL unit data\n    newLength = length - emulationPreventionBytesPositions.length;\n    newData = new Uint8Array(newLength);\n    var sourceIndex = 0;\n\n    for (i = 0; i < newLength; sourceIndex++, i++) {\n      if (sourceIndex === emulationPreventionBytesPositions[0]) {\n        // Skip this byte\n        sourceIndex++;\n        // Remove this position index\n        emulationPreventionBytesPositions.shift();\n      }\n      newData[i] = data[sourceIndex];\n    }\n\n    return newData;\n  };\n\n  /**\n   * Read a sequence parameter set and return some interesting video\n   * properties. A sequence parameter set is the H264 metadata that\n   * describes the properties of upcoming video frames.\n   * @param data {Uint8Array} the bytes of a sequence parameter set\n   * @return {object} an object with configuration parsed from the\n   * sequence parameter set, including the dimensions of the\n   * associated video frames.\n   */\n  readSequenceParameterSet = function(data) {\n    var\n      frameCropLeftOffset = 0,\n      frameCropRightOffset = 0,\n      frameCropTopOffset = 0,\n      frameCropBottomOffset = 0,\n      sarScale = 1,\n      expGolombDecoder, profileIdc, levelIdc, profileCompatibility,\n      chromaFormatIdc, picOrderCntType,\n      numRefFramesInPicOrderCntCycle, picWidthInMbsMinus1,\n      picHeightInMapUnitsMinus1,\n      frameMbsOnlyFlag,\n      scalingListCount,\n      sarRatio,\n      aspectRatioIdc,\n      i;\n\n    expGolombDecoder = new ExpGolomb(data);\n    profileIdc = expGolombDecoder.readUnsignedByte(); // profile_idc\n    profileCompatibility = expGolombDecoder.readUnsignedByte(); // constraint_set[0-5]_flag\n    levelIdc = expGolombDecoder.readUnsignedByte(); // level_idc u(8)\n    expGolombDecoder.skipUnsignedExpGolomb(); // seq_parameter_set_id\n\n    // some profiles have more optional data we don't need\n    if (PROFILES_WITH_OPTIONAL_SPS_DATA[profileIdc]) {\n      chromaFormatIdc = expGolombDecoder.readUnsignedExpGolomb();\n      if (chromaFormatIdc === 3) {\n        expGolombDecoder.skipBits(1); // separate_colour_plane_flag\n      }\n      expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_luma_minus8\n      expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_chroma_minus8\n      expGolombDecoder.skipBits(1); // qpprime_y_zero_transform_bypass_flag\n      if (expGolombDecoder.readBoolean()) { // seq_scaling_matrix_present_flag\n        scalingListCount = (chromaFormatIdc !== 3) ? 8 : 12;\n        for (i = 0; i < scalingListCount; i++) {\n          if (expGolombDecoder.readBoolean()) { // seq_scaling_list_present_flag[ i ]\n            if (i < 6) {\n              skipScalingList(16, expGolombDecoder);\n            } else {\n              skipScalingList(64, expGolombDecoder);\n            }\n          }\n        }\n      }\n    }\n\n    expGolombDecoder.skipUnsignedExpGolomb(); // log2_max_frame_num_minus4\n    picOrderCntType = expGolombDecoder.readUnsignedExpGolomb();\n\n    if (picOrderCntType === 0) {\n      expGolombDecoder.readUnsignedExpGolomb(); // log2_max_pic_order_cnt_lsb_minus4\n    } else if (picOrderCntType === 1) {\n      expGolombDecoder.skipBits(1); // delta_pic_order_always_zero_flag\n      expGolombDecoder.skipExpGolomb(); // offset_for_non_ref_pic\n      expGolombDecoder.skipExpGolomb(); // offset_for_top_to_bottom_field\n      numRefFramesInPicOrderCntCycle = expGolombDecoder.readUnsignedExpGolomb();\n      for (i = 0; i < numRefFramesInPicOrderCntCycle; i++) {\n        expGolombDecoder.skipExpGolomb(); // offset_for_ref_frame[ i ]\n      }\n    }\n\n    expGolombDecoder.skipUnsignedExpGolomb(); // max_num_ref_frames\n    expGolombDecoder.skipBits(1); // gaps_in_frame_num_value_allowed_flag\n\n    picWidthInMbsMinus1 = expGolombDecoder.readUnsignedExpGolomb();\n    picHeightInMapUnitsMinus1 = expGolombDecoder.readUnsignedExpGolomb();\n\n    frameMbsOnlyFlag = expGolombDecoder.readBits(1);\n    if (frameMbsOnlyFlag === 0) {\n      expGolombDecoder.skipBits(1); // mb_adaptive_frame_field_flag\n    }\n\n    expGolombDecoder.skipBits(1); // direct_8x8_inference_flag\n    if (expGolombDecoder.readBoolean()) { // frame_cropping_flag\n      frameCropLeftOffset = expGolombDecoder.readUnsignedExpGolomb();\n      frameCropRightOffset = expGolombDecoder.readUnsignedExpGolomb();\n      frameCropTopOffset = expGolombDecoder.readUnsignedExpGolomb();\n      frameCropBottomOffset = expGolombDecoder.readUnsignedExpGolomb();\n    }\n    if (expGolombDecoder.readBoolean()) {\n      // vui_parameters_present_flag\n      if (expGolombDecoder.readBoolean()) {\n        // aspect_ratio_info_present_flag\n        aspectRatioIdc = expGolombDecoder.readUnsignedByte();\n        switch (aspectRatioIdc) {\n          case 1: sarRatio = [1, 1]; break;\n          case 2: sarRatio = [12, 11]; break;\n          case 3: sarRatio = [10, 11]; break;\n          case 4: sarRatio = [16, 11]; break;\n          case 5: sarRatio = [40, 33]; break;\n          case 6: sarRatio = [24, 11]; break;\n          case 7: sarRatio = [20, 11]; break;\n          case 8: sarRatio = [32, 11]; break;\n          case 9: sarRatio = [80, 33]; break;\n          case 10: sarRatio = [18, 11]; break;\n          case 11: sarRatio = [15, 11]; break;\n          case 12: sarRatio = [64, 33]; break;\n          case 13: sarRatio = [160, 99]; break;\n          case 14: sarRatio = [4, 3]; break;\n          case 15: sarRatio = [3, 2]; break;\n          case 16: sarRatio = [2, 1]; break;\n          case 255: {\n            sarRatio = [expGolombDecoder.readUnsignedByte() << 8 |\n                        expGolombDecoder.readUnsignedByte(),\n                        expGolombDecoder.readUnsignedByte() << 8 |\n                        expGolombDecoder.readUnsignedByte() ];\n            break;\n          }\n        }\n        if (sarRatio) {\n          sarScale = sarRatio[0] / sarRatio[1];\n        }\n      }\n    }\n    return {\n      profileIdc: profileIdc,\n      levelIdc: levelIdc,\n      profileCompatibility: profileCompatibility,\n      width: Math.ceil((((picWidthInMbsMinus1 + 1) * 16) - frameCropLeftOffset * 2 - frameCropRightOffset * 2) * sarScale),\n      height: ((2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16) - (frameCropTopOffset * 2) - (frameCropBottomOffset * 2)\n    };\n  };\n\n};\nH264Stream.prototype = new Stream();\n\nmodule.exports = {\n  H264Stream: H264Stream,\n  NalByteStream: NalByteStream\n};\n","'use strict';\n\nvar ExpGolomb;\n\n/**\n * Parser for exponential Golomb codes, a variable-bitwidth number encoding\n * scheme used by h264.\n */\nExpGolomb = function(workingData) {\n  var\n    // the number of bytes left to examine in workingData\n    workingBytesAvailable = workingData.byteLength,\n\n    // the current word being examined\n    workingWord = 0, // :uint\n\n    // the number of bits left to examine in the current word\n    workingBitsAvailable = 0; // :uint;\n\n  // ():uint\n  this.length = function() {\n    return (8 * workingBytesAvailable);\n  };\n\n  // ():uint\n  this.bitsAvailable = function() {\n    return (8 * workingBytesAvailable) + workingBitsAvailable;\n  };\n\n  // ():void\n  this.loadWord = function() {\n    var\n      position = workingData.byteLength - workingBytesAvailable,\n      workingBytes = new Uint8Array(4),\n      availableBytes = Math.min(4, workingBytesAvailable);\n\n    if (availableBytes === 0) {\n      throw new Error('no bytes available');\n    }\n\n    workingBytes.set(workingData.subarray(position,\n                                          position + availableBytes));\n    workingWord = new DataView(workingBytes.buffer).getUint32(0);\n\n    // track the amount of workingData that has been processed\n    workingBitsAvailable = availableBytes * 8;\n    workingBytesAvailable -= availableBytes;\n  };\n\n  // (count:int):void\n  this.skipBits = function(count) {\n    var skipBytes; // :int\n    if (workingBitsAvailable > count) {\n      workingWord          <<= count;\n      workingBitsAvailable -= count;\n    } else {\n      count -= workingBitsAvailable;\n      skipBytes = Math.floor(count / 8);\n\n      count -= (skipBytes * 8);\n      workingBytesAvailable -= skipBytes;\n\n      this.loadWord();\n\n      workingWord <<= count;\n      workingBitsAvailable -= count;\n    }\n  };\n\n  // (size:int):uint\n  this.readBits = function(size) {\n    var\n      bits = Math.min(workingBitsAvailable, size), // :uint\n      valu = workingWord >>> (32 - bits); // :uint\n    // if size > 31, handle error\n    workingBitsAvailable -= bits;\n    if (workingBitsAvailable > 0) {\n      workingWord <<= bits;\n    } else if (workingBytesAvailable > 0) {\n      this.loadWord();\n    }\n\n    bits = size - bits;\n    if (bits > 0) {\n      return valu << bits | this.readBits(bits);\n    }\n    return valu;\n  };\n\n  // ():uint\n  this.skipLeadingZeros = function() {\n    var leadingZeroCount; // :uint\n    for (leadingZeroCount = 0; leadingZeroCount < workingBitsAvailable; ++leadingZeroCount) {\n      if ((workingWord & (0x80000000 >>> leadingZeroCount)) !== 0) {\n        // the first bit of working word is 1\n        workingWord <<= leadingZeroCount;\n        workingBitsAvailable -= leadingZeroCount;\n        return leadingZeroCount;\n      }\n    }\n\n    // we exhausted workingWord and still have not found a 1\n    this.loadWord();\n    return leadingZeroCount + this.skipLeadingZeros();\n  };\n\n  // ():void\n  this.skipUnsignedExpGolomb = function() {\n    this.skipBits(1 + this.skipLeadingZeros());\n  };\n\n  // ():void\n  this.skipExpGolomb = function() {\n    this.skipBits(1 + this.skipLeadingZeros());\n  };\n\n  // ():uint\n  this.readUnsignedExpGolomb = function() {\n    var clz = this.skipLeadingZeros(); // :uint\n    return this.readBits(clz + 1) - 1;\n  };\n\n  // ():int\n  this.readExpGolomb = function() {\n    var valu = this.readUnsignedExpGolomb(); // :int\n    if (0x01 & valu) {\n      // the number is odd if the low order bit is set\n      return (1 + valu) >>> 1; // add 1 to make it even, and divide by 2\n    }\n    return -1 * (valu >>> 1); // divide by two then make it negative\n  };\n\n  // Some convenience functions\n  // :Boolean\n  this.readBoolean = function() {\n    return this.readBits(1) === 1;\n  };\n\n  // ():int\n  this.readUnsignedByte = function() {\n    return this.readBits(8);\n  };\n\n  this.loadWord();\n};\n\nmodule.exports = ExpGolomb;\n","/**\n * mux.js\n *\n * Copyright (c) 2016 Brightcove\n * All rights reserved.\n *\n * A stream-based aac to mp4 converter. This utility can be used to\n * deliver mp4s to a SourceBuffer on platforms that support native\n * Media Source Extensions.\n */\n'use strict';\nvar Stream = require('../utils/stream.js');\n\n// Constants\nvar AacStream;\n\n/**\n * Splits an incoming stream of binary data into ADTS and ID3 Frames.\n */\n\nAacStream = function() {\n  var\n    everything = new Uint8Array(),\n    timeStamp = 0;\n\n  AacStream.prototype.init.call(this);\n\n  this.setTimestamp = function(timestamp) {\n    timeStamp = timestamp;\n  };\n\n  this.parseId3TagSize = function(header, byteIndex) {\n    var\n      returnSize = (header[byteIndex + 6] << 21) |\n                   (header[byteIndex + 7] << 14) |\n                   (header[byteIndex + 8] << 7) |\n                   (header[byteIndex + 9]),\n      flags = header[byteIndex + 5],\n      footerPresent = (flags & 16) >> 4;\n\n    if (footerPresent) {\n      return returnSize + 20;\n    }\n    return returnSize + 10;\n  };\n\n  this.parseAdtsSize = function(header, byteIndex) {\n    var\n      lowThree = (header[byteIndex + 5] & 0xE0) >> 5,\n      middle = header[byteIndex + 4] << 3,\n      highTwo = header[byteIndex + 3] & 0x3 << 11;\n\n    return (highTwo | middle) | lowThree;\n  };\n\n  this.push = function(bytes) {\n    var\n      frameSize = 0,\n      byteIndex = 0,\n      bytesLeft,\n      chunk,\n      packet,\n      tempLength;\n\n    // If there are bytes remaining from the last segment, prepend them to the\n    // bytes that were pushed in\n    if (everything.length) {\n      tempLength = everything.length;\n      everything = new Uint8Array(bytes.byteLength + tempLength);\n      everything.set(everything.subarray(0, tempLength));\n      everything.set(bytes, tempLength);\n    } else {\n      everything = bytes;\n    }\n\n    while (everything.length - byteIndex >= 3) {\n      if ((everything[byteIndex] === 'I'.charCodeAt(0)) &&\n          (everything[byteIndex + 1] === 'D'.charCodeAt(0)) &&\n          (everything[byteIndex + 2] === '3'.charCodeAt(0))) {\n\n        // Exit early because we don't have enough to parse\n        // the ID3 tag header\n        if (everything.length - byteIndex < 10) {\n          break;\n        }\n\n        // check framesize\n        frameSize = this.parseId3TagSize(everything, byteIndex);\n\n        // Exit early if we don't have enough in the buffer\n        // to emit a full packet\n        if (frameSize > everything.length) {\n          break;\n        }\n        chunk = {\n          type: 'timed-metadata',\n          data: everything.subarray(byteIndex, byteIndex + frameSize)\n        };\n        this.trigger('data', chunk);\n        byteIndex += frameSize;\n        continue;\n      } else if ((everything[byteIndex] & 0xff === 0xff) &&\n                 ((everything[byteIndex + 1] & 0xf0) === 0xf0)) {\n\n        // Exit early because we don't have enough to parse\n        // the ADTS frame header\n        if (everything.length - byteIndex < 7) {\n          break;\n        }\n\n        frameSize = this.parseAdtsSize(everything, byteIndex);\n\n        // Exit early if we don't have enough in the buffer\n        // to emit a full packet\n        if (frameSize > everything.length) {\n          break;\n        }\n\n        packet = {\n          type: 'audio',\n          data: everything.subarray(byteIndex, byteIndex + frameSize),\n          pts: timeStamp,\n          dts: timeStamp\n        };\n        this.trigger('data', packet);\n        byteIndex += frameSize;\n        continue;\n      }\n      byteIndex++;\n    }\n    bytesLeft = everything.length - byteIndex;\n\n    if (bytesLeft > 0) {\n      everything = everything.subarray(byteIndex);\n    } else {\n      everything = new Uint8Array();\n    }\n  };\n};\n\nAacStream.prototype = new Stream();\n\nmodule.exports = AacStream;\n","var highPrefix = [33, 16, 5, 32, 164, 27];\nvar lowPrefix = [33, 65, 108, 84, 1, 2, 4, 8, 168, 2, 4, 8, 17, 191, 252];\nvar zeroFill = function(count) {\n  var a = [];\n  while (count--) {\n    a.push(0);\n  }\n  return a;\n};\n\nvar makeTable = function(metaTable) {\n  return Object.keys(metaTable).reduce(function(obj, key) {\n    obj[key] = new Uint8Array(metaTable[key].reduce(function(arr, part) {\n      return arr.concat(part);\n    }, []));\n    return obj;\n  }, {});\n};\n\n// Frames-of-silence to use for filling in missing AAC frames\nvar coneOfSilence = {\n  96000: [highPrefix, [227, 64], zeroFill(154), [56]],\n  88200: [highPrefix, [231], zeroFill(170), [56]],\n  64000: [highPrefix, [248, 192], zeroFill(240), [56]],\n  48000: [highPrefix, [255, 192], zeroFill(268), [55, 148, 128], zeroFill(54), [112]],\n  44100: [highPrefix, [255, 192], zeroFill(268), [55, 163, 128], zeroFill(84), [112]],\n  32000: [highPrefix, [255, 192], zeroFill(268), [55, 234], zeroFill(226), [112]],\n  24000: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 112], zeroFill(126), [224]],\n  16000: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 255], zeroFill(269), [223, 108], zeroFill(195), [1, 192]],\n  12000: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 253, 128], zeroFill(259), [56]],\n  11025: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 255, 192], zeroFill(268), [55, 175, 128], zeroFill(108), [112]],\n  8000: [lowPrefix, zeroFill(268), [3, 121, 16], zeroFill(47), [7]]\n};\n\nmodule.exports = makeTable(coneOfSilence);\n","var\n  ONE_SECOND_IN_TS = 90000, // 90kHz clock\n  secondsToVideoTs,\n  secondsToAudioTs,\n  videoTsToSeconds,\n  audioTsToSeconds,\n  audioTsToVideoTs,\n  videoTsToAudioTs;\n\nsecondsToVideoTs = function(seconds) {\n  return seconds * ONE_SECOND_IN_TS;\n};\n\nsecondsToAudioTs = function(seconds, sampleRate) {\n  return seconds * sampleRate;\n};\n\nvideoTsToSeconds = function(timestamp) {\n  return timestamp / ONE_SECOND_IN_TS;\n};\n\naudioTsToSeconds = function(timestamp, sampleRate) {\n  return timestamp / sampleRate;\n};\n\naudioTsToVideoTs = function(timestamp, sampleRate) {\n  return secondsToVideoTs(audioTsToSeconds(timestamp, sampleRate));\n};\n\nvideoTsToAudioTs = function(timestamp, sampleRate) {\n  return secondsToAudioTs(videoTsToSeconds(timestamp), sampleRate);\n};\n\nmodule.exports = {\n  secondsToVideoTs: secondsToVideoTs,\n  secondsToAudioTs: secondsToAudioTs,\n  videoTsToSeconds: videoTsToSeconds,\n  audioTsToSeconds: audioTsToSeconds,\n  audioTsToVideoTs: audioTsToVideoTs,\n  videoTsToAudioTs: videoTsToAudioTs\n};\n","/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * Reads in-band CEA-708 captions out of FMP4 segments.\n * @see https://en.wikipedia.org/wiki/CEA-708\n */\n'use strict';\n\nvar discardEmulationPreventionBytes = require('../tools/caption-packet-parser').discardEmulationPreventionBytes;\nvar CaptionStream = require('../m2ts/caption-stream').CaptionStream;\nvar probe = require('./probe');\nvar inspect = require('../tools/mp4-inspector');\n\n/**\n  * Maps an offset in the mdat to a sample based on the the size of the samples.\n  * Assumes that `parseSamples` has been called first.\n  *\n  * @param {Number} offset - The offset into the mdat\n  * @param {Object[]} samples - An array of samples, parsed using `parseSamples`\n  * @return {?Object} The matching sample, or null if no match was found.\n  *\n  * @see ISO-BMFF-12/2015, Section 8.8.8\n **/\nvar mapToSample = function(offset, samples) {\n  var approximateOffset = offset;\n\n  for (var i = 0; i < samples.length; i++) {\n    var sample = samples[i];\n\n    if (approximateOffset < sample.size) {\n      return sample;\n    }\n\n    approximateOffset -= sample.size;\n  }\n\n  return null;\n};\n\n/**\n  * Finds SEI nal units contained in a Media Data Box.\n  * Assumes that `parseSamples` has been called first.\n  *\n  * @param {Uint8Array} avcStream - The bytes of the mdat\n  * @param {Object[]} samples - The samples parsed out by `parseSamples`\n  * @param {Number} trackId - The trackId of this video track\n  * @return {Object[]} seiNals - the parsed SEI NALUs found.\n  *   The contents of the seiNal should match what is expected by\n  *   CaptionStream.push (nalUnitType, size, data, escapedRBSP, pts, dts)\n  *\n  * @see ISO-BMFF-12/2015, Section 8.1.1\n  * @see Rec. ITU-T H.264, 7.3.2.3.1\n **/\nvar findSeiNals = function(avcStream, samples, trackId) {\n  var\n    avcView = new DataView(avcStream.buffer, avcStream.byteOffset, avcStream.byteLength),\n    result = [],\n    seiNal,\n    i,\n    length,\n    lastMatchedSample;\n\n  for (i = 0; i + 4 < avcStream.length; i += length) {\n    length = avcView.getUint32(i);\n    i += 4;\n\n    // Bail if this doesn't appear to be an H264 stream\n    if (length <= 0) {\n      continue;\n    }\n\n    switch (avcStream[i] & 0x1F) {\n    case 0x06:\n      var data = avcStream.subarray(i + 1, i + 1 + length);\n      var matchingSample = mapToSample(i, samples);\n\n      seiNal = {\n        nalUnitType: 'sei_rbsp',\n        size: length,\n        data: data,\n        escapedRBSP: discardEmulationPreventionBytes(data),\n        trackId: trackId\n      };\n\n      if (matchingSample) {\n        seiNal.pts = matchingSample.pts;\n        seiNal.dts = matchingSample.dts;\n        lastMatchedSample = matchingSample;\n      } else {\n        // If a matching sample cannot be found, use the last\n        // sample's values as they should be as close as possible\n        seiNal.pts = lastMatchedSample.pts;\n        seiNal.dts = lastMatchedSample.dts;\n      }\n\n      result.push(seiNal);\n      break;\n    default:\n      break;\n    }\n  }\n\n  return result;\n};\n\n/**\n  * Parses sample information out of Track Run Boxes and calculates\n  * the absolute presentation and decode timestamps of each sample.\n  *\n  * @param {Array<Uint8Array>} truns - The Trun Run boxes to be parsed\n  * @param {Number} baseMediaDecodeTime - base media decode time from tfdt\n      @see ISO-BMFF-12/2015, Section 8.8.12\n  * @param {Object} tfhd - The parsed Track Fragment Header\n  *   @see inspect.parseTfhd\n  * @return {Object[]} the parsed samples\n  *\n  * @see ISO-BMFF-12/2015, Section 8.8.8\n **/\nvar parseSamples = function(truns, baseMediaDecodeTime, tfhd) {\n  var currentDts = baseMediaDecodeTime;\n  var defaultSampleDuration = tfhd.defaultSampleDuration || 0;\n  var defaultSampleSize = tfhd.defaultSampleSize || 0;\n  var trackId = tfhd.trackId;\n  var allSamples = [];\n\n  truns.forEach(function(trun) {\n    // Note: We currently do not parse the sample table as well\n    // as the trun. It's possible some sources will require this.\n    // moov > trak > mdia > minf > stbl\n    var trackRun = inspect.parseTrun(trun);\n    var samples = trackRun.samples;\n\n    samples.forEach(function(sample) {\n      if (sample.duration === undefined) {\n        sample.duration = defaultSampleDuration;\n      }\n      if (sample.size === undefined) {\n        sample.size = defaultSampleSize;\n      }\n      sample.trackId = trackId;\n      sample.dts = currentDts;\n      if (sample.compositionTimeOffset === undefined) {\n        sample.compositionTimeOffset = 0;\n      }\n      sample.pts = currentDts + sample.compositionTimeOffset;\n\n      currentDts += sample.duration;\n    });\n\n    allSamples = allSamples.concat(samples);\n  });\n\n  return allSamples;\n};\n\n/**\n  * Parses out caption nals from an FMP4 segment's video tracks.\n  *\n  * @param {Uint8Array} segment - The bytes of a single segment\n  * @param {Number} videoTrackId - The trackId of a video track in the segment\n  * @return {Object.<Number, Object[]>} A mapping of video trackId to\n  *   a list of seiNals found in that track\n **/\nvar parseCaptionNals = function(segment, videoTrackId) {\n  // To get the samples\n  var trafs = probe.findBox(segment, ['moof', 'traf']);\n  // To get SEI NAL units\n  var mdats = probe.findBox(segment, ['mdat']);\n  var captionNals = {};\n  var mdatTrafPairs = [];\n\n  // Pair up each traf with a mdat as moofs and mdats are in pairs\n  mdats.forEach(function(mdat, index) {\n    var matchingTraf = trafs[index];\n    mdatTrafPairs.push({\n      mdat: mdat,\n      traf: matchingTraf\n    });\n  });\n\n  mdatTrafPairs.forEach(function(pair) {\n    var mdat = pair.mdat;\n    var traf = pair.traf;\n    var tfhd = probe.findBox(traf, ['tfhd']);\n    // Exactly 1 tfhd per traf\n    var headerInfo = inspect.parseTfhd(tfhd[0]);\n    var trackId = headerInfo.trackId;\n    var tfdt = probe.findBox(traf, ['tfdt']);\n    // Either 0 or 1 tfdt per traf\n    var baseMediaDecodeTime = (tfdt.length > 0) ? inspect.parseTfdt(tfdt[0]).baseMediaDecodeTime : 0;\n    var truns = probe.findBox(traf, ['trun']);\n    var samples;\n    var seiNals;\n\n    // Only parse video data for the chosen video track\n    if (videoTrackId === trackId && truns.length > 0) {\n      samples = parseSamples(truns, baseMediaDecodeTime, headerInfo);\n\n      seiNals = findSeiNals(mdat, samples, trackId);\n\n      if (!captionNals[trackId]) {\n        captionNals[trackId] = [];\n      }\n\n      captionNals[trackId] = captionNals[trackId].concat(seiNals);\n    }\n  });\n\n  return captionNals;\n};\n\n/**\n  * Parses out inband captions from an MP4 container and returns\n  * caption objects that can be used by WebVTT and the TextTrack API.\n  * @see https://developer.mozilla.org/en-US/docs/Web/API/VTTCue\n  * @see https://developer.mozilla.org/en-US/docs/Web/API/TextTrack\n  * Assumes that `probe.getVideoTrackIds` and `probe.timescale` have been called first\n  *\n  * @param {Uint8Array} segment - The fmp4 segment containing embedded captions\n  * @param {Number} trackId - The id of the video track to parse\n  * @param {Number} timescale - The timescale for the video track from the init segment\n  *\n  * @return {?Object[]} parsedCaptions - A list of captions or null if no video tracks\n  * @return {Number} parsedCaptions[].startTime - The time to show the caption in seconds\n  * @return {Number} parsedCaptions[].endTime - The time to stop showing the caption in seconds\n  * @return {String} parsedCaptions[].text - The visible content of the caption\n **/\nvar parseEmbeddedCaptions = function(segment, trackId, timescale) {\n  var seiNals;\n\n  if (!trackId) {\n    return null;\n  }\n\n  seiNals = parseCaptionNals(segment, trackId);\n\n  return {\n    seiNals: seiNals[trackId],\n    timescale: timescale\n  };\n};\n\n/**\n  * Converts SEI NALUs into captions that can be used by video.js\n **/\nvar CaptionParser = function() {\n  var isInitialized = false;\n  var captionStream;\n\n  // Stores segments seen before trackId and timescale are set\n  var segmentCache;\n  // Stores video track ID of the track being parsed\n  var trackId;\n  // Stores the timescale of the track being parsed\n  var timescale;\n  // Stores captions parsed so far\n  var parsedCaptions;\n\n  /**\n    * A method to indicate whether a CaptionParser has been initalized\n    * @returns {Boolean}\n   **/\n  this.isInitialized = function() {\n    return isInitialized;\n  };\n\n  /**\n    * Initializes the underlying CaptionStream, SEI NAL parsing\n    * and management, and caption collection\n   **/\n  this.init = function() {\n    captionStream = new CaptionStream();\n    isInitialized = true;\n\n    // Collect dispatched captions\n    captionStream.on('data', function(event) {\n      // Convert to seconds in the source's timescale\n      event.startTime = event.startPts / timescale;\n      event.endTime = event.endPts / timescale;\n\n      parsedCaptions.captions.push(event);\n      parsedCaptions.captionStreams[event.stream] = true;\n    });\n  };\n\n  /**\n    * Determines if a new video track will be selected\n    * or if the timescale changed\n    * @return {Boolean}\n   **/\n  this.isNewInit = function(videoTrackIds, timescales) {\n    if ((videoTrackIds && videoTrackIds.length === 0) ||\n        (timescales && typeof timescales === 'object' &&\n          Object.keys(timescales).length === 0)) {\n      return false;\n    }\n\n    return trackId !== videoTrackIds[0] ||\n      timescale !== timescales[trackId];\n  };\n\n  /**\n    * Parses out SEI captions and interacts with underlying\n    * CaptionStream to return dispatched captions\n    *\n    * @param {Uint8Array} segment - The fmp4 segment containing embedded captions\n    * @param {Number[]} videoTrackIds - A list of video tracks found in the init segment\n    * @param {Object.<Number, Number>} timescales - The timescales found in the init segment\n    * @see parseEmbeddedCaptions\n    * @see m2ts/caption-stream.js\n   **/\n  this.parse = function(segment, videoTrackIds, timescales) {\n    var parsedData;\n\n    if (!this.isInitialized()) {\n      return null;\n\n    // This is not likely to be a video segment\n    } else if (!videoTrackIds || !timescales) {\n      return null;\n\n    } else if (this.isNewInit(videoTrackIds, timescales)) {\n      // Use the first video track only as there is no\n      // mechanism to switch to other video tracks\n      trackId = videoTrackIds[0];\n      timescale = timescales[trackId];\n\n    // If an init segment has not been seen yet, hold onto segment\n    // data until we have one\n    } else if (!trackId || !timescale) {\n      segmentCache.push(segment);\n      return null;\n    }\n\n    // Now that a timescale and trackId is set, parse cached segments\n    while (segmentCache.length > 0) {\n      var cachedSegment = segmentCache.shift();\n\n      this.parse(cachedSegment, videoTrackIds, timescales);\n    }\n\n    parsedData = parseEmbeddedCaptions(segment, trackId, timescale);\n\n    if (parsedData === null || !parsedData.seiNals) {\n      return null;\n    }\n\n    this.pushNals(parsedData.seiNals);\n    // Force the parsed captions to be dispatched\n    this.flushStream();\n\n    return parsedCaptions;\n  };\n\n  /**\n    * Pushes SEI NALUs onto CaptionStream\n    * @param {Object[]} nals - A list of SEI nals parsed using `parseCaptionNals`\n    * Assumes that `parseCaptionNals` has been called first\n    * @see m2ts/caption-stream.js\n    **/\n  this.pushNals = function(nals) {\n    if (!this.isInitialized() || !nals || nals.length === 0) {\n      return null;\n    }\n\n    nals.forEach(function(nal) {\n      captionStream.push(nal);\n    });\n  };\n\n  /**\n    * Flushes underlying CaptionStream to dispatch processed, displayable captions\n    * @see m2ts/caption-stream.js\n   **/\n  this.flushStream = function() {\n    if (!this.isInitialized()) {\n      return null;\n    }\n\n    captionStream.flush();\n  };\n\n  /**\n    * Reset caption buckets for new data\n   **/\n  this.clearParsedCaptions = function() {\n    parsedCaptions.captions = [];\n    parsedCaptions.captionStreams = {};\n  };\n\n  /**\n    * Resets underlying CaptionStream\n    * @see m2ts/caption-stream.js\n   **/\n  this.resetCaptionStream = function() {\n    if (!this.isInitialized()) {\n      return null;\n    }\n\n    captionStream.reset();\n  };\n\n  /**\n    * Convenience method to clear all captions flushed from the\n    * CaptionStream and still being parsed\n    * @see m2ts/caption-stream.js\n   **/\n  this.clearAllCaptions = function() {\n    this.clearParsedCaptions();\n    this.resetCaptionStream();\n  };\n\n  /**\n    * Reset caption parser\n   **/\n  this.reset = function() {\n    segmentCache = [];\n    trackId = null;\n    timescale = null;\n\n    if (!parsedCaptions) {\n      parsedCaptions = {\n        captions: [],\n        // CC1, CC2, CC3, CC4\n        captionStreams: {}\n      };\n    } else {\n      this.clearParsedCaptions();\n    }\n\n    this.resetCaptionStream();\n  };\n\n  this.reset();\n};\n\nmodule.exports = CaptionParser;\n","/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * Parse the internal MP4 structure into an equivalent javascript\n * object.\n */\n'use strict';\n\nvar\n  inspectMp4,\n  textifyMp4,\n\n  parseType = require('../mp4/probe').parseType,\n  parseMp4Date = function(seconds) {\n    return new Date(seconds * 1000 - 2082844800000);\n  },\n  parseSampleFlags = function(flags) {\n    return {\n      isLeading: (flags[0] & 0x0c) >>> 2,\n      dependsOn: flags[0] & 0x03,\n      isDependedOn: (flags[1] & 0xc0) >>> 6,\n      hasRedundancy: (flags[1] & 0x30) >>> 4,\n      paddingValue: (flags[1] & 0x0e) >>> 1,\n      isNonSyncSample: flags[1] & 0x01,\n      degradationPriority: (flags[2] << 8) | flags[3]\n    };\n  },\n  nalParse = function(avcStream) {\n    var\n      avcView = new DataView(avcStream.buffer, avcStream.byteOffset, avcStream.byteLength),\n      result = [],\n      i,\n      length;\n    for (i = 0; i + 4 < avcStream.length; i += length) {\n      length = avcView.getUint32(i);\n      i += 4;\n\n      // bail if this doesn't appear to be an H264 stream\n      if (length <= 0) {\n        result.push('<span style=\\'color:red;\\'>MALFORMED DATA</span>');\n        continue;\n      }\n\n      switch (avcStream[i] & 0x1F) {\n      case 0x01:\n        result.push('slice_layer_without_partitioning_rbsp');\n        break;\n      case 0x05:\n        result.push('slice_layer_without_partitioning_rbsp_idr');\n        break;\n      case 0x06:\n        result.push('sei_rbsp');\n        break;\n      case 0x07:\n        result.push('seq_parameter_set_rbsp');\n        break;\n      case 0x08:\n        result.push('pic_parameter_set_rbsp');\n        break;\n      case 0x09:\n        result.push('access_unit_delimiter_rbsp');\n        break;\n      default:\n        result.push('UNKNOWN NAL - ' + avcStream[i] & 0x1F);\n        break;\n      }\n    }\n    return result;\n  },\n\n  // registry of handlers for individual mp4 box types\n  parse = {\n    // codingname, not a first-class box type. stsd entries share the\n    // same format as real boxes so the parsing infrastructure can be\n    // shared\n    avc1: function(data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n      return {\n        dataReferenceIndex: view.getUint16(6),\n        width: view.getUint16(24),\n        height: view.getUint16(26),\n        horizresolution: view.getUint16(28) + (view.getUint16(30) / 16),\n        vertresolution: view.getUint16(32) + (view.getUint16(34) / 16),\n        frameCount: view.getUint16(40),\n        depth: view.getUint16(74),\n        config: inspectMp4(data.subarray(78, data.byteLength))\n      };\n    },\n    avcC: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n          configurationVersion: data[0],\n          avcProfileIndication: data[1],\n          profileCompatibility: data[2],\n          avcLevelIndication: data[3],\n          lengthSizeMinusOne: data[4] & 0x03,\n          sps: [],\n          pps: []\n        },\n        numOfSequenceParameterSets = data[5] & 0x1f,\n        numOfPictureParameterSets,\n        nalSize,\n        offset,\n        i;\n\n      // iterate past any SPSs\n      offset = 6;\n      for (i = 0; i < numOfSequenceParameterSets; i++) {\n        nalSize = view.getUint16(offset);\n        offset += 2;\n        result.sps.push(new Uint8Array(data.subarray(offset, offset + nalSize)));\n        offset += nalSize;\n      }\n      // iterate past any PPSs\n      numOfPictureParameterSets = data[offset];\n      offset++;\n      for (i = 0; i < numOfPictureParameterSets; i++) {\n        nalSize = view.getUint16(offset);\n        offset += 2;\n        result.pps.push(new Uint8Array(data.subarray(offset, offset + nalSize)));\n        offset += nalSize;\n      }\n      return result;\n    },\n    btrt: function(data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n      return {\n        bufferSizeDB: view.getUint32(0),\n        maxBitrate: view.getUint32(4),\n        avgBitrate: view.getUint32(8)\n      };\n    },\n    esds: function(data) {\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        esId: (data[6] << 8) | data[7],\n        streamPriority: data[8] & 0x1f,\n        decoderConfig: {\n          objectProfileIndication: data[11],\n          streamType: (data[12] >>> 2) & 0x3f,\n          bufferSize: (data[13] << 16) | (data[14] << 8) | data[15],\n          maxBitrate: (data[16] << 24) |\n            (data[17] << 16) |\n            (data[18] <<  8) |\n            data[19],\n          avgBitrate: (data[20] << 24) |\n            (data[21] << 16) |\n            (data[22] <<  8) |\n            data[23],\n          decoderConfigDescriptor: {\n            tag: data[24],\n            length: data[25],\n            audioObjectType: (data[26] >>> 3) & 0x1f,\n            samplingFrequencyIndex: ((data[26] & 0x07) << 1) |\n              ((data[27] >>> 7) & 0x01),\n            channelConfiguration: (data[27] >>> 3) & 0x0f\n          }\n        }\n      };\n    },\n    ftyp: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n          majorBrand: parseType(data.subarray(0, 4)),\n          minorVersion: view.getUint32(4),\n          compatibleBrands: []\n        },\n        i = 8;\n      while (i < data.byteLength) {\n        result.compatibleBrands.push(parseType(data.subarray(i, i + 4)));\n        i += 4;\n      }\n      return result;\n    },\n    dinf: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    dref: function(data) {\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        dataReferences: inspectMp4(data.subarray(8))\n      };\n    },\n    hdlr: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4)),\n          handlerType: parseType(data.subarray(8, 12)),\n          name: ''\n        },\n        i = 8;\n\n      // parse out the name field\n      for (i = 24; i < data.byteLength; i++) {\n        if (data[i] === 0x00) {\n          // the name field is null-terminated\n          i++;\n          break;\n        }\n        result.name += String.fromCharCode(data[i]);\n      }\n      // decode UTF-8 to javascript's internal representation\n      // see http://ecmanaut.blogspot.com/2006/07/encoding-decoding-utf8-in-javascript.html\n      result.name = decodeURIComponent(escape(result.name));\n\n      return result;\n    },\n    mdat: function(data) {\n      return {\n        byteLength: data.byteLength,\n        nals: nalParse(data)\n      };\n    },\n    mdhd: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        i = 4,\n        language,\n        result = {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4)),\n          language: ''\n        };\n      if (result.version === 1) {\n        i += 4;\n        result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n        i += 8;\n        result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n        i += 4;\n        result.timescale = view.getUint32(i);\n        i += 8;\n        result.duration = view.getUint32(i); // truncating top 4 bytes\n      } else {\n        result.creationTime = parseMp4Date(view.getUint32(i));\n        i += 4;\n        result.modificationTime = parseMp4Date(view.getUint32(i));\n        i += 4;\n        result.timescale = view.getUint32(i);\n        i += 4;\n        result.duration = view.getUint32(i);\n      }\n      i += 4;\n      // language is stored as an ISO-639-2/T code in an array of three 5-bit fields\n      // each field is the packed difference between its ASCII value and 0x60\n      language = view.getUint16(i);\n      result.language += String.fromCharCode((language >> 10) + 0x60);\n      result.language += String.fromCharCode(((language & 0x03e0) >> 5) + 0x60);\n      result.language += String.fromCharCode((language & 0x1f) + 0x60);\n\n      return result;\n    },\n    mdia: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    mfhd: function(data) {\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        sequenceNumber: (data[4] << 24) |\n          (data[5] << 16) |\n          (data[6] << 8) |\n          (data[7])\n      };\n    },\n    minf: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    // codingname, not a first-class box type. stsd entries share the\n    // same format as real boxes so the parsing infrastructure can be\n    // shared\n    mp4a: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n          // 6 bytes reserved\n          dataReferenceIndex: view.getUint16(6),\n          // 4 + 4 bytes reserved\n          channelcount: view.getUint16(16),\n          samplesize: view.getUint16(18),\n          // 2 bytes pre_defined\n          // 2 bytes reserved\n          samplerate: view.getUint16(24) + (view.getUint16(26) / 65536)\n        };\n\n      // if there are more bytes to process, assume this is an ISO/IEC\n      // 14496-14 MP4AudioSampleEntry and parse the ESDBox\n      if (data.byteLength > 28) {\n        result.streamDescriptor = inspectMp4(data.subarray(28))[0];\n      }\n      return result;\n    },\n    moof: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    moov: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    mvex: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    mvhd: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        i = 4,\n        result = {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4))\n        };\n\n      if (result.version === 1) {\n        i += 4;\n        result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n        i += 8;\n        result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n        i += 4;\n        result.timescale = view.getUint32(i);\n        i += 8;\n        result.duration = view.getUint32(i); // truncating top 4 bytes\n      } else {\n        result.creationTime = parseMp4Date(view.getUint32(i));\n        i += 4;\n        result.modificationTime = parseMp4Date(view.getUint32(i));\n        i += 4;\n        result.timescale = view.getUint32(i);\n        i += 4;\n        result.duration = view.getUint32(i);\n      }\n      i += 4;\n\n      // convert fixed-point, base 16 back to a number\n      result.rate = view.getUint16(i) + (view.getUint16(i + 2) / 16);\n      i += 4;\n      result.volume = view.getUint8(i) + (view.getUint8(i + 1) / 8);\n      i += 2;\n      i += 2;\n      i += 2 * 4;\n      result.matrix = new Uint32Array(data.subarray(i, i + (9 * 4)));\n      i += 9 * 4;\n      i += 6 * 4;\n      result.nextTrackId = view.getUint32(i);\n      return result;\n    },\n    pdin: function(data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n      return {\n        version: view.getUint8(0),\n        flags: new Uint8Array(data.subarray(1, 4)),\n        rate: view.getUint32(4),\n        initialDelay: view.getUint32(8)\n      };\n    },\n    sdtp: function(data) {\n      var\n        result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          samples: []\n        }, i;\n\n      for (i = 4; i < data.byteLength; i++) {\n        result.samples.push({\n          dependsOn: (data[i] & 0x30) >> 4,\n          isDependedOn: (data[i] & 0x0c) >> 2,\n          hasRedundancy: data[i] & 0x03\n        });\n      }\n      return result;\n    },\n    sidx: function(data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n          result = {\n            version: data[0],\n            flags: new Uint8Array(data.subarray(1, 4)),\n            references: [],\n            referenceId: view.getUint32(4),\n            timescale: view.getUint32(8),\n            earliestPresentationTime: view.getUint32(12),\n            firstOffset: view.getUint32(16)\n          },\n          referenceCount = view.getUint16(22),\n          i;\n\n      for (i = 24; referenceCount; i += 12, referenceCount--) {\n        result.references.push({\n          referenceType: (data[i] & 0x80) >>> 7,\n          referencedSize: view.getUint32(i) & 0x7FFFFFFF,\n          subsegmentDuration: view.getUint32(i + 4),\n          startsWithSap: !!(data[i + 8] & 0x80),\n          sapType: (data[i + 8] & 0x70) >>> 4,\n          sapDeltaTime: view.getUint32(i + 8) & 0x0FFFFFFF\n        });\n      }\n\n      return result;\n    },\n    smhd: function(data) {\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        balance: data[4] + (data[5] / 256)\n      };\n    },\n    stbl: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    stco: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          chunkOffsets: []\n        },\n        entryCount = view.getUint32(4),\n        i;\n      for (i = 8; entryCount; i += 4, entryCount--) {\n        result.chunkOffsets.push(view.getUint32(i));\n      }\n      return result;\n    },\n    stsc: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        entryCount = view.getUint32(4),\n        result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          sampleToChunks: []\n        },\n        i;\n      for (i = 8; entryCount; i += 12, entryCount--) {\n        result.sampleToChunks.push({\n          firstChunk: view.getUint32(i),\n          samplesPerChunk: view.getUint32(i + 4),\n          sampleDescriptionIndex: view.getUint32(i + 8)\n        });\n      }\n      return result;\n    },\n    stsd: function(data) {\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        sampleDescriptions: inspectMp4(data.subarray(8))\n      };\n    },\n    stsz: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          sampleSize: view.getUint32(4),\n          entries: []\n        },\n        i;\n      for (i = 12; i < data.byteLength; i += 4) {\n        result.entries.push(view.getUint32(i));\n      }\n      return result;\n    },\n    stts: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          timeToSamples: []\n        },\n        entryCount = view.getUint32(4),\n        i;\n\n      for (i = 8; entryCount; i += 8, entryCount--) {\n        result.timeToSamples.push({\n          sampleCount: view.getUint32(i),\n          sampleDelta: view.getUint32(i + 4)\n        });\n      }\n      return result;\n    },\n    styp: function(data) {\n      return parse.ftyp(data);\n    },\n    tfdt: function(data) {\n      var result = {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        baseMediaDecodeTime: data[4] << 24 | data[5] << 16 | data[6] << 8 | data[7]\n      };\n      if (result.version === 1) {\n        result.baseMediaDecodeTime *= Math.pow(2, 32);\n        result.baseMediaDecodeTime += data[8] << 24 | data[9] << 16 | data[10] << 8 | data[11];\n      }\n      return result;\n    },\n    tfhd: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          trackId: view.getUint32(4)\n        },\n        baseDataOffsetPresent = result.flags[2] & 0x01,\n        sampleDescriptionIndexPresent = result.flags[2] & 0x02,\n        defaultSampleDurationPresent = result.flags[2] & 0x08,\n        defaultSampleSizePresent = result.flags[2] & 0x10,\n        defaultSampleFlagsPresent = result.flags[2] & 0x20,\n        durationIsEmpty = result.flags[0] & 0x010000,\n        defaultBaseIsMoof =  result.flags[0] & 0x020000,\n        i;\n\n      i = 8;\n      if (baseDataOffsetPresent) {\n        i += 4; // truncate top 4 bytes\n        // FIXME: should we read the full 64 bits?\n        result.baseDataOffset = view.getUint32(12);\n        i += 4;\n      }\n      if (sampleDescriptionIndexPresent) {\n        result.sampleDescriptionIndex = view.getUint32(i);\n        i += 4;\n      }\n      if (defaultSampleDurationPresent) {\n        result.defaultSampleDuration = view.getUint32(i);\n        i += 4;\n      }\n      if (defaultSampleSizePresent) {\n        result.defaultSampleSize = view.getUint32(i);\n        i += 4;\n      }\n      if (defaultSampleFlagsPresent) {\n        result.defaultSampleFlags = view.getUint32(i);\n      }\n      if (durationIsEmpty) {\n        result.durationIsEmpty = true;\n      }\n      if (!baseDataOffsetPresent && defaultBaseIsMoof) {\n        result.baseDataOffsetIsMoof = true;\n      }\n      return result;\n    },\n    tkhd: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        i = 4,\n        result = {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4))\n        };\n      if (result.version === 1) {\n        i += 4;\n        result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n        i += 8;\n        result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n        i += 4;\n        result.trackId = view.getUint32(i);\n        i += 4;\n        i += 8;\n        result.duration = view.getUint32(i); // truncating top 4 bytes\n      } else {\n        result.creationTime = parseMp4Date(view.getUint32(i));\n        i += 4;\n        result.modificationTime = parseMp4Date(view.getUint32(i));\n        i += 4;\n        result.trackId = view.getUint32(i);\n        i += 4;\n        i += 4;\n        result.duration = view.getUint32(i);\n      }\n      i += 4;\n      i += 2 * 4;\n      result.layer = view.getUint16(i);\n      i += 2;\n      result.alternateGroup = view.getUint16(i);\n      i += 2;\n      // convert fixed-point, base 16 back to a number\n      result.volume = view.getUint8(i) + (view.getUint8(i + 1) / 8);\n      i += 2;\n      i += 2;\n      result.matrix = new Uint32Array(data.subarray(i, i + (9 * 4)));\n      i += 9 * 4;\n      result.width = view.getUint16(i) + (view.getUint16(i + 2) / 16);\n      i += 4;\n      result.height = view.getUint16(i) + (view.getUint16(i + 2) / 16);\n      return result;\n    },\n    traf: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    trak: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    trex: function(data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        trackId: view.getUint32(4),\n        defaultSampleDescriptionIndex: view.getUint32(8),\n        defaultSampleDuration: view.getUint32(12),\n        defaultSampleSize: view.getUint32(16),\n        sampleDependsOn: data[20] & 0x03,\n        sampleIsDependedOn: (data[21] & 0xc0) >> 6,\n        sampleHasRedundancy: (data[21] & 0x30) >> 4,\n        samplePaddingValue: (data[21] & 0x0e) >> 1,\n        sampleIsDifferenceSample: !!(data[21] & 0x01),\n        sampleDegradationPriority: view.getUint16(22)\n      };\n    },\n    trun: function(data) {\n      var\n        result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          samples: []\n        },\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        // Flag interpretation\n        dataOffsetPresent = result.flags[2] & 0x01, // compare with 2nd byte of 0x1\n        firstSampleFlagsPresent = result.flags[2] & 0x04, // compare with 2nd byte of 0x4\n        sampleDurationPresent = result.flags[1] & 0x01, // compare with 2nd byte of 0x100\n        sampleSizePresent = result.flags[1] & 0x02, // compare with 2nd byte of 0x200\n        sampleFlagsPresent = result.flags[1] & 0x04, // compare with 2nd byte of 0x400\n        sampleCompositionTimeOffsetPresent = result.flags[1] & 0x08, // compare with 2nd byte of 0x800\n        sampleCount = view.getUint32(4),\n        offset = 8,\n        sample;\n\n      if (dataOffsetPresent) {\n        // 32 bit signed integer\n        result.dataOffset = view.getInt32(offset);\n        offset += 4;\n      }\n\n      // Overrides the flags for the first sample only. The order of\n      // optional values will be: duration, size, compositionTimeOffset\n      if (firstSampleFlagsPresent && sampleCount) {\n        sample = {\n          flags: parseSampleFlags(data.subarray(offset, offset + 4))\n        };\n        offset += 4;\n        if (sampleDurationPresent) {\n          sample.duration = view.getUint32(offset);\n          offset += 4;\n        }\n        if (sampleSizePresent) {\n          sample.size = view.getUint32(offset);\n          offset += 4;\n        }\n        if (sampleCompositionTimeOffsetPresent) {\n          // Note: this should be a signed int if version is 1\n          sample.compositionTimeOffset = view.getUint32(offset);\n          offset += 4;\n        }\n        result.samples.push(sample);\n        sampleCount--;\n      }\n\n      while (sampleCount--) {\n        sample = {};\n        if (sampleDurationPresent) {\n          sample.duration = view.getUint32(offset);\n          offset += 4;\n        }\n        if (sampleSizePresent) {\n          sample.size = view.getUint32(offset);\n          offset += 4;\n        }\n        if (sampleFlagsPresent) {\n          sample.flags = parseSampleFlags(data.subarray(offset, offset + 4));\n          offset += 4;\n        }\n        if (sampleCompositionTimeOffsetPresent) {\n          // Note: this should be a signed int if version is 1\n          sample.compositionTimeOffset = view.getUint32(offset);\n          offset += 4;\n        }\n        result.samples.push(sample);\n      }\n      return result;\n    },\n    'url ': function(data) {\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4))\n      };\n    },\n    vmhd: function(data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        graphicsmode: view.getUint16(4),\n        opcolor: new Uint16Array([view.getUint16(6),\n                                  view.getUint16(8),\n                                  view.getUint16(10)])\n      };\n    }\n  };\n\n\n/**\n * Return a javascript array of box objects parsed from an ISO base\n * media file.\n * @param data {Uint8Array} the binary data of the media to be inspected\n * @return {array} a javascript array of potentially nested box objects\n */\ninspectMp4 = function(data) {\n  var\n    i = 0,\n    result = [],\n    view,\n    size,\n    type,\n    end,\n    box;\n\n  // Convert data from Uint8Array to ArrayBuffer, to follow Dataview API\n  var ab = new ArrayBuffer(data.length);\n  var v = new Uint8Array(ab);\n  for (var z = 0; z < data.length; ++z) {\n      v[z] = data[z];\n  }\n  view = new DataView(ab);\n\n  while (i < data.byteLength) {\n    // parse box data\n    size = view.getUint32(i);\n    type =  parseType(data.subarray(i + 4, i + 8));\n    end = size > 1 ? i + size : data.byteLength;\n\n    // parse type-specific data\n    box = (parse[type] || function(data) {\n      return {\n        data: data\n      };\n    })(data.subarray(i + 8, end));\n    box.size = size;\n    box.type = type;\n\n    // store this box and move to the next\n    result.push(box);\n    i = end;\n  }\n  return result;\n};\n\n/**\n * Returns a textual representation of the javascript represtentation\n * of an MP4 file. You can use it as an alternative to\n * JSON.stringify() to compare inspected MP4s.\n * @param inspectedMp4 {array} the parsed array of boxes in an MP4\n * file\n * @param depth {number} (optional) the number of ancestor boxes of\n * the elements of inspectedMp4. Assumed to be zero if unspecified.\n * @return {string} a text representation of the parsed MP4\n */\ntextifyMp4 = function(inspectedMp4, depth) {\n  var indent;\n  depth = depth || 0;\n  indent = new Array(depth * 2 + 1).join(' ');\n\n  // iterate over all the boxes\n  return inspectedMp4.map(function(box, index) {\n\n    // list the box type first at the current indentation level\n    return indent + box.type + '\\n' +\n\n      // the type is already included and handle child boxes separately\n      Object.keys(box).filter(function(key) {\n        return key !== 'type' && key !== 'boxes';\n\n      // output all the box properties\n      }).map(function(key) {\n        var prefix = indent + '  ' + key + ': ',\n            value = box[key];\n\n        // print out raw bytes as hexademical\n        if (value instanceof Uint8Array || value instanceof Uint32Array) {\n          var bytes = Array.prototype.slice.call(new Uint8Array(value.buffer, value.byteOffset, value.byteLength))\n              .map(function(byte) {\n                return ' ' + ('00' + byte.toString(16)).slice(-2);\n              }).join('').match(/.{1,24}/g);\n          if (!bytes) {\n            return prefix + '<>';\n          }\n          if (bytes.length === 1) {\n            return prefix + '<' + bytes.join('').slice(1) + '>';\n          }\n          return prefix + '<\\n' + bytes.map(function(line) {\n            return indent + '  ' + line;\n          }).join('\\n') + '\\n' + indent + '  >';\n        }\n\n        // stringify generic objects\n        return prefix +\n            JSON.stringify(value, null, 2)\n              .split('\\n').map(function(line, index) {\n                if (index === 0) {\n                  return line;\n                }\n                return indent + '  ' + line;\n              }).join('\\n');\n      }).join('\\n') +\n\n    // recursively textify the child boxes\n    (box.boxes ? '\\n' + textifyMp4(box.boxes, depth + 1) : '');\n  }).join('\\n');\n};\n\nmodule.exports = {\n  inspect: inspectMp4,\n  textify: textifyMp4,\n  parseTfdt: parse.tfdt,\n  parseHdlr: parse.hdlr,\n  parseTfhd: parse.tfhd,\n  parseTrun: parse.trun\n};\n","/**\n * mux.js\n *\n * Copyright (c) 2016 Brightcove\n * All rights reserved.\n *\n * Parse mpeg2 transport stream packets to extract basic timing information\n */\n'use strict';\n\nvar StreamTypes = require('../m2ts/stream-types.js');\nvar handleRollover = require('../m2ts/timestamp-rollover-stream.js').handleRollover;\nvar probe = {};\nprobe.ts = require('../m2ts/probe.js');\nprobe.aac = require('../aac/probe.js');\n\n\nvar\n  PES_TIMESCALE = 90000,\n  MP2T_PACKET_LENGTH = 188, // bytes\n  SYNC_BYTE = 0x47;\n\nvar isLikelyAacData = function(data) {\n  if ((data[0] === 'I'.charCodeAt(0)) &&\n      (data[1] === 'D'.charCodeAt(0)) &&\n      (data[2] === '3'.charCodeAt(0))) {\n    return true;\n  }\n  return false;\n};\n\n/**\n * walks through segment data looking for pat and pmt packets to parse out\n * program map table information\n */\nvar parsePsi_ = function(bytes, pmt) {\n  var\n    startIndex = 0,\n    endIndex = MP2T_PACKET_LENGTH,\n    packet, type;\n\n  while (endIndex < bytes.byteLength) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pat':\n          if (!pmt.pid) {\n            pmt.pid = probe.ts.parsePat(packet);\n          }\n          break;\n        case 'pmt':\n          if (!pmt.table) {\n            pmt.table = probe.ts.parsePmt(packet);\n          }\n          break;\n        default:\n          break;\n      }\n\n      // Found the pat and pmt, we can stop walking the segment\n      if (pmt.pid && pmt.table) {\n        return;\n      }\n\n      startIndex += MP2T_PACKET_LENGTH;\n      endIndex += MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex++;\n    endIndex++;\n  }\n};\n\n/**\n * walks through the segment data from the start and end to get timing information\n * for the first and last audio pes packets\n */\nvar parseAudioPes_ = function(bytes, pmt, result) {\n  var\n    startIndex = 0,\n    endIndex = MP2T_PACKET_LENGTH,\n    packet, type, pesType, pusi, parsed;\n\n  var endLoop = false;\n\n  // Start walking from start of segment to get first audio packet\n  while (endIndex < bytes.byteLength) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pes':\n          pesType = probe.ts.parsePesType(packet, pmt.table);\n          pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n          if (pesType === 'audio' && pusi) {\n            parsed = probe.ts.parsePesTime(packet);\n            if (parsed) {\n              parsed.type = 'audio';\n              result.audio.push(parsed);\n              endLoop = true;\n            }\n          }\n          break;\n        default:\n          break;\n      }\n\n      if (endLoop) {\n        break;\n      }\n\n      startIndex += MP2T_PACKET_LENGTH;\n      endIndex += MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex++;\n    endIndex++;\n  }\n\n  // Start walking from end of segment to get last audio packet\n  endIndex = bytes.byteLength;\n  startIndex = endIndex - MP2T_PACKET_LENGTH;\n  endLoop = false;\n  while (startIndex >= 0) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pes':\n          pesType = probe.ts.parsePesType(packet, pmt.table);\n          pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n          if (pesType === 'audio' && pusi) {\n            parsed = probe.ts.parsePesTime(packet);\n            if (parsed) {\n              parsed.type = 'audio';\n              result.audio.push(parsed);\n              endLoop = true;\n            }\n          }\n          break;\n        default:\n          break;\n      }\n\n      if (endLoop) {\n        break;\n      }\n\n      startIndex -= MP2T_PACKET_LENGTH;\n      endIndex -= MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex--;\n    endIndex--;\n  }\n};\n\n/**\n * walks through the segment data from the start and end to get timing information\n * for the first and last video pes packets as well as timing information for the first\n * key frame.\n */\nvar parseVideoPes_ = function(bytes, pmt, result) {\n  var\n    startIndex = 0,\n    endIndex = MP2T_PACKET_LENGTH,\n    packet, type, pesType, pusi, parsed, frame, i, pes;\n\n  var endLoop = false;\n\n  var currentFrame = {\n    data: [],\n    size: 0\n  };\n\n  // Start walking from start of segment to get first video packet\n  while (endIndex < bytes.byteLength) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pes':\n          pesType = probe.ts.parsePesType(packet, pmt.table);\n          pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n          if (pesType === 'video') {\n            if (pusi && !endLoop) {\n              parsed = probe.ts.parsePesTime(packet);\n              if (parsed) {\n                parsed.type = 'video';\n                result.video.push(parsed);\n                endLoop = true;\n              }\n            }\n            if (!result.firstKeyFrame) {\n              if (pusi) {\n                if (currentFrame.size !== 0) {\n                  frame = new Uint8Array(currentFrame.size);\n                  i = 0;\n                  while (currentFrame.data.length) {\n                    pes = currentFrame.data.shift();\n                    frame.set(pes, i);\n                    i += pes.byteLength;\n                  }\n                  if (probe.ts.videoPacketContainsKeyFrame(frame)) {\n                    result.firstKeyFrame = probe.ts.parsePesTime(frame);\n                    result.firstKeyFrame.type = 'video';\n                  }\n                  currentFrame.size = 0;\n                }\n              }\n              currentFrame.data.push(packet);\n              currentFrame.size += packet.byteLength;\n            }\n          }\n          break;\n        default:\n          break;\n      }\n\n      if (endLoop && result.firstKeyFrame) {\n        break;\n      }\n\n      startIndex += MP2T_PACKET_LENGTH;\n      endIndex += MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex++;\n    endIndex++;\n  }\n\n  // Start walking from end of segment to get last video packet\n  endIndex = bytes.byteLength;\n  startIndex = endIndex - MP2T_PACKET_LENGTH;\n  endLoop = false;\n  while (startIndex >= 0) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pes':\n          pesType = probe.ts.parsePesType(packet, pmt.table);\n          pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n          if (pesType === 'video' && pusi) {\n              parsed = probe.ts.parsePesTime(packet);\n              if (parsed) {\n                parsed.type = 'video';\n                result.video.push(parsed);\n                endLoop = true;\n              }\n          }\n          break;\n        default:\n          break;\n      }\n\n      if (endLoop) {\n        break;\n      }\n\n      startIndex -= MP2T_PACKET_LENGTH;\n      endIndex -= MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex--;\n    endIndex--;\n  }\n};\n\n/**\n * Adjusts the timestamp information for the segment to account for\n * rollover and convert to seconds based on pes packet timescale (90khz clock)\n */\nvar adjustTimestamp_ = function(segmentInfo, baseTimestamp) {\n  if (segmentInfo.audio && segmentInfo.audio.length) {\n    var audioBaseTimestamp = baseTimestamp;\n    if (typeof audioBaseTimestamp === 'undefined') {\n      audioBaseTimestamp = segmentInfo.audio[0].dts;\n    }\n    segmentInfo.audio.forEach(function(info) {\n      info.dts = handleRollover(info.dts, audioBaseTimestamp);\n      info.pts = handleRollover(info.pts, audioBaseTimestamp);\n      // time in seconds\n      info.dtsTime = info.dts / PES_TIMESCALE;\n      info.ptsTime = info.pts / PES_TIMESCALE;\n    });\n  }\n\n  if (segmentInfo.video && segmentInfo.video.length) {\n    var videoBaseTimestamp = baseTimestamp;\n    if (typeof videoBaseTimestamp === 'undefined') {\n      videoBaseTimestamp = segmentInfo.video[0].dts;\n    }\n    segmentInfo.video.forEach(function(info) {\n      info.dts = handleRollover(info.dts, videoBaseTimestamp);\n      info.pts = handleRollover(info.pts, videoBaseTimestamp);\n      // time in seconds\n      info.dtsTime = info.dts / PES_TIMESCALE;\n      info.ptsTime = info.pts / PES_TIMESCALE;\n    });\n    if (segmentInfo.firstKeyFrame) {\n      var frame = segmentInfo.firstKeyFrame;\n      frame.dts = handleRollover(frame.dts, videoBaseTimestamp);\n      frame.pts = handleRollover(frame.pts, videoBaseTimestamp);\n      // time in seconds\n      frame.dtsTime = frame.dts / PES_TIMESCALE;\n      frame.ptsTime = frame.dts / PES_TIMESCALE;\n    }\n  }\n};\n\n/**\n * inspects the aac data stream for start and end time information\n */\nvar inspectAac_ = function(bytes) {\n  var\n    endLoop = false,\n    audioCount = 0,\n    sampleRate = null,\n    timestamp = null,\n    frameSize = 0,\n    byteIndex = 0,\n    packet;\n\n  while (bytes.length - byteIndex >= 3) {\n    var type = probe.aac.parseType(bytes, byteIndex);\n    switch (type) {\n      case 'timed-metadata':\n        // Exit early because we don't have enough to parse\n        // the ID3 tag header\n        if (bytes.length - byteIndex < 10) {\n          endLoop = true;\n          break;\n        }\n\n        frameSize = probe.aac.parseId3TagSize(bytes, byteIndex);\n\n        // Exit early if we don't have enough in the buffer\n        // to emit a full packet\n        if (frameSize > bytes.length) {\n          endLoop = true;\n          break;\n        }\n        if (timestamp === null) {\n          packet = bytes.subarray(byteIndex, byteIndex + frameSize);\n          timestamp = probe.aac.parseAacTimestamp(packet);\n        }\n        byteIndex += frameSize;\n        break;\n      case 'audio':\n        // Exit early because we don't have enough to parse\n        // the ADTS frame header\n        if (bytes.length - byteIndex < 7) {\n          endLoop = true;\n          break;\n        }\n\n        frameSize = probe.aac.parseAdtsSize(bytes, byteIndex);\n\n        // Exit early if we don't have enough in the buffer\n        // to emit a full packet\n        if (frameSize > bytes.length) {\n          endLoop = true;\n          break;\n        }\n        if (sampleRate === null) {\n          packet = bytes.subarray(byteIndex, byteIndex + frameSize);\n          sampleRate = probe.aac.parseSampleRate(packet);\n        }\n        audioCount++;\n        byteIndex += frameSize;\n        break;\n      default:\n        byteIndex++;\n        break;\n    }\n    if (endLoop) {\n      return null;\n    }\n  }\n  if (sampleRate === null || timestamp === null) {\n    return null;\n  }\n\n  var audioTimescale = PES_TIMESCALE / sampleRate;\n\n  var result = {\n    audio: [\n      {\n        type: 'audio',\n        dts: timestamp,\n        pts: timestamp\n      },\n      {\n        type: 'audio',\n        dts: timestamp + (audioCount * 1024 * audioTimescale),\n        pts: timestamp + (audioCount * 1024 * audioTimescale)\n      }\n    ]\n  };\n\n  return result;\n};\n\n/**\n * inspects the transport stream segment data for start and end time information\n * of the audio and video tracks (when present) as well as the first key frame's\n * start time.\n */\nvar inspectTs_ = function(bytes) {\n  var pmt = {\n    pid: null,\n    table: null\n  };\n\n  var result = {};\n\n  parsePsi_(bytes, pmt);\n\n  for (var pid in pmt.table) {\n    if (pmt.table.hasOwnProperty(pid)) {\n      var type = pmt.table[pid];\n      switch (type) {\n        case StreamTypes.H264_STREAM_TYPE:\n          result.video = [];\n          parseVideoPes_(bytes, pmt, result);\n          if (result.video.length === 0) {\n            delete result.video;\n          }\n          break;\n        case StreamTypes.ADTS_STREAM_TYPE:\n          result.audio = [];\n          parseAudioPes_(bytes, pmt, result);\n          if (result.audio.length === 0) {\n            delete result.audio;\n          }\n          break;\n        default:\n          break;\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Inspects segment byte data and returns an object with start and end timing information\n *\n * @param {Uint8Array} bytes The segment byte data\n * @param {Number} baseTimestamp Relative reference timestamp used when adjusting frame\n *  timestamps for rollover. This value must be in 90khz clock.\n * @return {Object} Object containing start and end frame timing info of segment.\n */\nvar inspect = function(bytes, baseTimestamp) {\n  var isAacData = isLikelyAacData(bytes);\n\n  var result;\n\n  if (isAacData) {\n    result = inspectAac_(bytes);\n  } else {\n    result = inspectTs_(bytes);\n  }\n\n  if (!result || (!result.audio && !result.video)) {\n    return null;\n  }\n\n  adjustTimestamp_(result, baseTimestamp);\n\n  return result;\n};\n\nmodule.exports = {\n  inspect: inspect\n};\n","/**\n * mux.js\n *\n * Copyright (c) 2016 Brightcove\n * All rights reserved.\n *\n * Utilities to detect basic properties and metadata about TS Segments.\n */\n'use strict';\n\nvar StreamTypes = require('./stream-types.js');\n\nvar parsePid = function(packet) {\n  var pid = packet[1] & 0x1f;\n  pid <<= 8;\n  pid |= packet[2];\n  return pid;\n};\n\nvar parsePayloadUnitStartIndicator = function(packet) {\n  return !!(packet[1] & 0x40);\n};\n\nvar parseAdaptionField = function(packet) {\n  var offset = 0;\n  // if an adaption field is present, its length is specified by the\n  // fifth byte of the TS packet header. The adaptation field is\n  // used to add stuffing to PES packets that don't fill a complete\n  // TS packet, and to specify some forms of timing and control data\n  // that we do not currently use.\n  if (((packet[3] & 0x30) >>> 4) > 0x01) {\n    offset += packet[4] + 1;\n  }\n  return offset;\n};\n\nvar parseType = function(packet, pmtPid) {\n  var pid = parsePid(packet);\n  if (pid === 0) {\n    return 'pat';\n  } else if (pid === pmtPid) {\n    return 'pmt';\n  } else if (pmtPid) {\n    return 'pes';\n  }\n  return null;\n};\n\nvar parsePat = function(packet) {\n  var pusi = parsePayloadUnitStartIndicator(packet);\n  var offset = 4 + parseAdaptionField(packet);\n\n  if (pusi) {\n    offset += packet[offset] + 1;\n  }\n\n  return (packet[offset + 10] & 0x1f) << 8 | packet[offset + 11];\n};\n\nvar parsePmt = function(packet) {\n  var programMapTable = {};\n  var pusi = parsePayloadUnitStartIndicator(packet);\n  var payloadOffset = 4 + parseAdaptionField(packet);\n\n  if (pusi) {\n    payloadOffset += packet[payloadOffset] + 1;\n  }\n\n  // PMTs can be sent ahead of the time when they should actually\n  // take effect. We don't believe this should ever be the case\n  // for HLS but we'll ignore \"forward\" PMT declarations if we see\n  // them. Future PMT declarations have the current_next_indicator\n  // set to zero.\n  if (!(packet[payloadOffset + 5] & 0x01)) {\n    return;\n  }\n\n  var sectionLength, tableEnd, programInfoLength;\n  // the mapping table ends at the end of the current section\n  sectionLength = (packet[payloadOffset + 1] & 0x0f) << 8 | packet[payloadOffset + 2];\n  tableEnd = 3 + sectionLength - 4;\n\n  // to determine where the table is, we have to figure out how\n  // long the program info descriptors are\n  programInfoLength = (packet[payloadOffset + 10] & 0x0f) << 8 | packet[payloadOffset + 11];\n\n  // advance the offset to the first entry in the mapping table\n  var offset = 12 + programInfoLength;\n  while (offset < tableEnd) {\n    var i = payloadOffset + offset;\n    // add an entry that maps the elementary_pid to the stream_type\n    programMapTable[(packet[i + 1] & 0x1F) << 8 | packet[i + 2]] = packet[i];\n\n    // move to the next table entry\n    // skip past the elementary stream descriptors, if present\n    offset += ((packet[i + 3] & 0x0F) << 8 | packet[i + 4]) + 5;\n  }\n  return programMapTable;\n};\n\nvar parsePesType = function(packet, programMapTable) {\n  var pid = parsePid(packet);\n  var type = programMapTable[pid];\n  switch (type) {\n    case StreamTypes.H264_STREAM_TYPE:\n      return 'video';\n    case StreamTypes.ADTS_STREAM_TYPE:\n      return 'audio';\n    case StreamTypes.METADATA_STREAM_TYPE:\n      return 'timed-metadata';\n    default:\n      return null;\n  }\n};\n\nvar parsePesTime = function(packet) {\n  var pusi = parsePayloadUnitStartIndicator(packet);\n  if (!pusi) {\n    return null;\n  }\n\n  var offset = 4 + parseAdaptionField(packet);\n\n  if (offset >= packet.byteLength) {\n    // From the H 222.0 MPEG-TS spec\n    // \"For transport stream packets carrying PES packets, stuffing is needed when there\n    //  is insufficient PES packet data to completely fill the transport stream packet\n    //  payload bytes. Stuffing is accomplished by defining an adaptation field longer than\n    //  the sum of the lengths of the data elements in it, so that the payload bytes\n    //  remaining after the adaptation field exactly accommodates the available PES packet\n    //  data.\"\n    //\n    // If the offset is >= the length of the packet, then the packet contains no data\n    // and instead is just adaption field stuffing bytes\n    return null;\n  }\n\n  var pes = null;\n  var ptsDtsFlags;\n\n  // PES packets may be annotated with a PTS value, or a PTS value\n  // and a DTS value. Determine what combination of values is\n  // available to work with.\n  ptsDtsFlags = packet[offset + 7];\n\n  // PTS and DTS are normally stored as a 33-bit number.  Javascript\n  // performs all bitwise operations on 32-bit integers but javascript\n  // supports a much greater range (52-bits) of integer using standard\n  // mathematical operations.\n  // We construct a 31-bit value using bitwise operators over the 31\n  // most significant bits and then multiply by 4 (equal to a left-shift\n  // of 2) before we add the final 2 least significant bits of the\n  // timestamp (equal to an OR.)\n  if (ptsDtsFlags & 0xC0) {\n    pes = {};\n    // the PTS and DTS are not written out directly. For information\n    // on how they are encoded, see\n    // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n    pes.pts = (packet[offset + 9] & 0x0E) << 27 |\n      (packet[offset + 10] & 0xFF) << 20 |\n      (packet[offset + 11] & 0xFE) << 12 |\n      (packet[offset + 12] & 0xFF) <<  5 |\n      (packet[offset + 13] & 0xFE) >>>  3;\n    pes.pts *= 4; // Left shift by 2\n    pes.pts += (packet[offset + 13] & 0x06) >>> 1; // OR by the two LSBs\n    pes.dts = pes.pts;\n    if (ptsDtsFlags & 0x40) {\n      pes.dts = (packet[offset + 14] & 0x0E) << 27 |\n        (packet[offset + 15] & 0xFF) << 20 |\n        (packet[offset + 16] & 0xFE) << 12 |\n        (packet[offset + 17] & 0xFF) << 5 |\n        (packet[offset + 18] & 0xFE) >>> 3;\n      pes.dts *= 4; // Left shift by 2\n      pes.dts += (packet[offset + 18] & 0x06) >>> 1; // OR by the two LSBs\n    }\n  }\n  return pes;\n};\n\nvar parseNalUnitType = function(type) {\n  switch (type) {\n    case 0x05:\n      return 'slice_layer_without_partitioning_rbsp_idr';\n    case 0x06:\n      return 'sei_rbsp';\n    case 0x07:\n      return 'seq_parameter_set_rbsp';\n    case 0x08:\n      return 'pic_parameter_set_rbsp';\n    case 0x09:\n      return 'access_unit_delimiter_rbsp';\n    default:\n      return null;\n  }\n};\n\nvar videoPacketContainsKeyFrame = function(packet) {\n  var offset = 4 + parseAdaptionField(packet);\n  var frameBuffer = packet.subarray(offset);\n  var frameI = 0;\n  var frameSyncPoint = 0;\n  var foundKeyFrame = false;\n  var nalType;\n\n  // advance the sync point to a NAL start, if necessary\n  for (; frameSyncPoint < frameBuffer.byteLength - 3; frameSyncPoint++) {\n    if (frameBuffer[frameSyncPoint + 2] === 1) {\n      // the sync point is properly aligned\n      frameI = frameSyncPoint + 5;\n      break;\n    }\n  }\n\n  while (frameI < frameBuffer.byteLength) {\n    // look at the current byte to determine if we've hit the end of\n    // a NAL unit boundary\n    switch (frameBuffer[frameI]) {\n    case 0:\n      // skip past non-sync sequences\n      if (frameBuffer[frameI - 1] !== 0) {\n        frameI += 2;\n        break;\n      } else if (frameBuffer[frameI - 2] !== 0) {\n        frameI++;\n        break;\n      }\n\n      if (frameSyncPoint + 3 !== frameI - 2) {\n        nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n        if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n          foundKeyFrame = true;\n        }\n      }\n\n      // drop trailing zeroes\n      do {\n        frameI++;\n      } while (frameBuffer[frameI] !== 1 && frameI < frameBuffer.length);\n      frameSyncPoint = frameI - 2;\n      frameI += 3;\n      break;\n    case 1:\n      // skip past non-sync sequences\n      if (frameBuffer[frameI - 1] !== 0 ||\n          frameBuffer[frameI - 2] !== 0) {\n        frameI += 3;\n        break;\n      }\n\n      nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n      if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n        foundKeyFrame = true;\n      }\n      frameSyncPoint = frameI - 2;\n      frameI += 3;\n      break;\n    default:\n      // the current byte isn't a one or zero, so it cannot be part\n      // of a sync sequence\n      frameI += 3;\n      break;\n    }\n  }\n  frameBuffer = frameBuffer.subarray(frameSyncPoint);\n  frameI -= frameSyncPoint;\n  frameSyncPoint = 0;\n  // parse the final nal\n  if (frameBuffer && frameBuffer.byteLength > 3) {\n    nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n    if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n      foundKeyFrame = true;\n    }\n  }\n\n  return foundKeyFrame;\n};\n\n\nmodule.exports = {\n  parseType: parseType,\n  parsePat: parsePat,\n  parsePmt: parsePmt,\n  parsePayloadUnitStartIndicator: parsePayloadUnitStartIndicator,\n  parsePesType: parsePesType,\n  parsePesTime: parsePesTime,\n  videoPacketContainsKeyFrame: videoPacketContainsKeyFrame\n};\n","/**\n * mux.js\n *\n * Copyright (c) 2016 Brightcove\n * All rights reserved.\n *\n * Utilities to detect basic properties and metadata about Aac data.\n */\n'use strict';\n\nvar ADTS_SAMPLING_FREQUENCIES = [\n  96000,\n  88200,\n  64000,\n  48000,\n  44100,\n  32000,\n  24000,\n  22050,\n  16000,\n  12000,\n  11025,\n  8000,\n  7350\n];\n\nvar parseSyncSafeInteger = function(data) {\n  return (data[0] << 21) |\n          (data[1] << 14) |\n          (data[2] << 7) |\n          (data[3]);\n};\n\n// return a percent-encoded representation of the specified byte range\n// @see http://en.wikipedia.org/wiki/Percent-encoding\nvar percentEncode = function(bytes, start, end) {\n  var i, result = '';\n  for (i = start; i < end; i++) {\n    result += '%' + ('00' + bytes[i].toString(16)).slice(-2);\n  }\n  return result;\n};\n\n// return the string representation of the specified byte range,\n// interpreted as ISO-8859-1.\nvar parseIso88591 = function(bytes, start, end) {\n  return unescape(percentEncode(bytes, start, end)); // jshint ignore:line\n};\n\nvar parseId3TagSize = function(header, byteIndex) {\n  var\n    returnSize = (header[byteIndex + 6] << 21) |\n                 (header[byteIndex + 7] << 14) |\n                 (header[byteIndex + 8] << 7) |\n                 (header[byteIndex + 9]),\n    flags = header[byteIndex + 5],\n    footerPresent = (flags & 16) >> 4;\n\n  if (footerPresent) {\n    return returnSize + 20;\n  }\n  return returnSize + 10;\n};\n\nvar parseAdtsSize = function(header, byteIndex) {\n  var\n    lowThree = (header[byteIndex + 5] & 0xE0) >> 5,\n    middle = header[byteIndex + 4] << 3,\n    highTwo = header[byteIndex + 3] & 0x3 << 11;\n\n  return (highTwo | middle) | lowThree;\n};\n\nvar parseType = function(header, byteIndex) {\n  if ((header[byteIndex] === 'I'.charCodeAt(0)) &&\n      (header[byteIndex + 1] === 'D'.charCodeAt(0)) &&\n      (header[byteIndex + 2] === '3'.charCodeAt(0))) {\n    return 'timed-metadata';\n  } else if ((header[byteIndex] & 0xff === 0xff) &&\n             ((header[byteIndex + 1] & 0xf0) === 0xf0)) {\n    return 'audio';\n  }\n  return null;\n};\n\nvar parseSampleRate = function(packet) {\n  var i = 0;\n\n  while (i + 5 < packet.length) {\n    if (packet[i] !== 0xFF || (packet[i + 1] & 0xF6) !== 0xF0) {\n      // If a valid header was not found,  jump one forward and attempt to\n      // find a valid ADTS header starting at the next byte\n      i++;\n      continue;\n    }\n    return ADTS_SAMPLING_FREQUENCIES[(packet[i + 2] & 0x3c) >>> 2];\n  }\n\n  return null;\n};\n\nvar parseAacTimestamp = function(packet) {\n  var frameStart, frameSize, frame, frameHeader;\n\n  // find the start of the first frame and the end of the tag\n  frameStart = 10;\n  if (packet[5] & 0x40) {\n    // advance the frame start past the extended header\n    frameStart += 4; // header size field\n    frameStart += parseSyncSafeInteger(packet.subarray(10, 14));\n  }\n\n  // parse one or more ID3 frames\n  // http://id3.org/id3v2.3.0#ID3v2_frame_overview\n  do {\n    // determine the number of bytes in this frame\n    frameSize = parseSyncSafeInteger(packet.subarray(frameStart + 4, frameStart + 8));\n    if (frameSize < 1) {\n      return null;\n    }\n    frameHeader = String.fromCharCode(packet[frameStart],\n                                      packet[frameStart + 1],\n                                      packet[frameStart + 2],\n                                      packet[frameStart + 3]);\n\n    if (frameHeader === 'PRIV') {\n      frame = packet.subarray(frameStart + 10, frameStart + frameSize + 10);\n\n      for (var i = 0; i < frame.byteLength; i++) {\n        if (frame[i] === 0) {\n          var owner = parseIso88591(frame, 0, i);\n          if (owner === 'com.apple.streaming.transportStreamTimestamp') {\n            var d = frame.subarray(i + 1);\n            var size = ((d[3] & 0x01)  << 30) |\n                       (d[4]  << 22) |\n                       (d[5] << 14) |\n                       (d[6] << 6) |\n                       (d[7] >>> 2);\n            size *= 4;\n            size += d[7] & 0x03;\n\n            return size;\n          }\n          break;\n        }\n      }\n    }\n\n    frameStart += 10; // advance past the frame header\n    frameStart += frameSize; // advance past the frame body\n  } while (frameStart < packet.byteLength);\n  return null;\n};\n\nmodule.exports = {\n  parseId3TagSize: parseId3TagSize,\n  parseAdtsSize: parseAdtsSize,\n  parseType: parseType,\n  parseSampleRate: parseSampleRate,\n  parseAacTimestamp: parseAacTimestamp\n};\n","var classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\n\n\n\n\n\n\n\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\n\n\n\n\n\n\n\n\n\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\n/**\n * @file stream.js\n */\n/**\n * A lightweight readable stream implemention that handles event dispatching.\n *\n * @class Stream\n */\nvar Stream = function () {\n  function Stream() {\n    classCallCheck(this, Stream);\n\n    this.listeners = {};\n  }\n\n  /**\n   * Add a listener for a specified event type.\n   *\n   * @param {String} type the event name\n   * @param {Function} listener the callback to be invoked when an event of\n   * the specified type occurs\n   */\n\n\n  Stream.prototype.on = function on(type, listener) {\n    if (!this.listeners[type]) {\n      this.listeners[type] = [];\n    }\n    this.listeners[type].push(listener);\n  };\n\n  /**\n   * Remove a listener for a specified event type.\n   *\n   * @param {String} type the event name\n   * @param {Function} listener  a function previously registered for this\n   * type of event through `on`\n   * @return {Boolean} if we could turn it off or not\n   */\n\n\n  Stream.prototype.off = function off(type, listener) {\n    if (!this.listeners[type]) {\n      return false;\n    }\n\n    var index = this.listeners[type].indexOf(listener);\n\n    this.listeners[type].splice(index, 1);\n    return index > -1;\n  };\n\n  /**\n   * Trigger an event of the specified type on this stream. Any additional\n   * arguments to this function are passed as parameters to event listeners.\n   *\n   * @param {String} type the event name\n   */\n\n\n  Stream.prototype.trigger = function trigger(type) {\n    var callbacks = this.listeners[type];\n    var i = void 0;\n    var length = void 0;\n    var args = void 0;\n\n    if (!callbacks) {\n      return;\n    }\n    // Slicing the arguments on every invocation of this method\n    // can add a significant amount of overhead. Avoid the\n    // intermediate object creation for the common case of a\n    // single callback argument\n    if (arguments.length === 2) {\n      length = callbacks.length;\n      for (i = 0; i < length; ++i) {\n        callbacks[i].call(this, arguments[1]);\n      }\n    } else {\n      args = Array.prototype.slice.call(arguments, 1);\n      length = callbacks.length;\n      for (i = 0; i < length; ++i) {\n        callbacks[i].apply(this, args);\n      }\n    }\n  };\n\n  /**\n   * Destroys the stream and cleans up.\n   */\n\n\n  Stream.prototype.dispose = function dispose() {\n    this.listeners = {};\n  };\n  /**\n   * Forwards all `data` events on this stream to the destination stream. The\n   * destination stream should provide a method `push` to receive the data\n   * events as they arrive.\n   *\n   * @param {Stream} destination the stream that will receive all `data` events\n   * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n   */\n\n\n  Stream.prototype.pipe = function pipe(destination) {\n    this.on('data', function (data) {\n      destination.push(data);\n    });\n  };\n\n  return Stream;\n}();\n\n/**\n * @file m3u8/line-stream.js\n */\n/**\n * A stream that buffers string input and generates a `data` event for each\n * line.\n *\n * @class LineStream\n * @extends Stream\n */\n\nvar LineStream = function (_Stream) {\n  inherits(LineStream, _Stream);\n\n  function LineStream() {\n    classCallCheck(this, LineStream);\n\n    var _this = possibleConstructorReturn(this, _Stream.call(this));\n\n    _this.buffer = '';\n    return _this;\n  }\n\n  /**\n   * Add new data to be parsed.\n   *\n   * @param {String} data the text to process\n   */\n\n\n  LineStream.prototype.push = function push(data) {\n    var nextNewline = void 0;\n\n    this.buffer += data;\n    nextNewline = this.buffer.indexOf('\\n');\n\n    for (; nextNewline > -1; nextNewline = this.buffer.indexOf('\\n')) {\n      this.trigger('data', this.buffer.substring(0, nextNewline));\n      this.buffer = this.buffer.substring(nextNewline + 1);\n    }\n  };\n\n  return LineStream;\n}(Stream);\n\n/**\n * @file m3u8/parse-stream.js\n */\n/**\n * \"forgiving\" attribute list psuedo-grammar:\n * attributes -> keyvalue (',' keyvalue)*\n * keyvalue   -> key '=' value\n * key        -> [^=]*\n * value      -> '\"' [^\"]* '\"' | [^,]*\n */\nvar attributeSeparator = function attributeSeparator() {\n  var key = '[^=]*';\n  var value = '\"[^\"]*\"|[^,]*';\n  var keyvalue = '(?:' + key + ')=(?:' + value + ')';\n\n  return new RegExp('(?:^|,)(' + keyvalue + ')');\n};\n\n/**\n * Parse attributes from a line given the seperator\n *\n * @param {String} attributes the attibute line to parse\n */\nvar parseAttributes = function parseAttributes(attributes) {\n  // split the string using attributes as the separator\n  var attrs = attributes.split(attributeSeparator());\n  var result = {};\n  var i = attrs.length;\n  var attr = void 0;\n\n  while (i--) {\n    // filter out unmatched portions of the string\n    if (attrs[i] === '') {\n      continue;\n    }\n\n    // split the key and value\n    attr = /([^=]*)=(.*)/.exec(attrs[i]).slice(1);\n    // trim whitespace and remove optional quotes around the value\n    attr[0] = attr[0].replace(/^\\s+|\\s+$/g, '');\n    attr[1] = attr[1].replace(/^\\s+|\\s+$/g, '');\n    attr[1] = attr[1].replace(/^['\"](.*)['\"]$/g, '$1');\n    result[attr[0]] = attr[1];\n  }\n  return result;\n};\n\n/**\n * A line-level M3U8 parser event stream. It expects to receive input one\n * line at a time and performs a context-free parse of its contents. A stream\n * interpretation of a manifest can be useful if the manifest is expected to\n * be too large to fit comfortably into memory or the entirety of the input\n * is not immediately available. Otherwise, it's probably much easier to work\n * with a regular `Parser` object.\n *\n * Produces `data` events with an object that captures the parser's\n * interpretation of the input. That object has a property `tag` that is one\n * of `uri`, `comment`, or `tag`. URIs only have a single additional\n * property, `line`, which captures the entirety of the input without\n * interpretation. Comments similarly have a single additional property\n * `text` which is the input without the leading `#`.\n *\n * Tags always have a property `tagType` which is the lower-cased version of\n * the M3U8 directive without the `#EXT` or `#EXT-X-` prefix. For instance,\n * `#EXT-X-MEDIA-SEQUENCE` becomes `media-sequence` when parsed. Unrecognized\n * tags are given the tag type `unknown` and a single additional property\n * `data` with the remainder of the input.\n *\n * @class ParseStream\n * @extends Stream\n */\n\nvar ParseStream = function (_Stream) {\n  inherits(ParseStream, _Stream);\n\n  function ParseStream() {\n    classCallCheck(this, ParseStream);\n\n    var _this = possibleConstructorReturn(this, _Stream.call(this));\n\n    _this.customParsers = [];\n    return _this;\n  }\n\n  /**\n   * Parses an additional line of input.\n   *\n   * @param {String} line a single line of an M3U8 file to parse\n   */\n\n\n  ParseStream.prototype.push = function push(line) {\n    var match = void 0;\n    var event = void 0;\n\n    // strip whitespace\n    line = line.replace(/^[\\u0000\\s]+|[\\u0000\\s]+$/g, '');\n    if (line.length === 0) {\n      // ignore empty lines\n      return;\n    }\n\n    // URIs\n    if (line[0] !== '#') {\n      this.trigger('data', {\n        type: 'uri',\n        uri: line\n      });\n      return;\n    }\n\n    for (var i = 0; i < this.customParsers.length; i++) {\n      if (this.customParsers[i].call(this, line)) {\n        return;\n      }\n    }\n\n    // Comments\n    if (line.indexOf('#EXT') !== 0) {\n      this.trigger('data', {\n        type: 'comment',\n        text: line.slice(1)\n      });\n      return;\n    }\n\n    // strip off any carriage returns here so the regex matching\n    // doesn't have to account for them.\n    line = line.replace('\\r', '');\n\n    // Tags\n    match = /^#EXTM3U/.exec(line);\n    if (match) {\n      this.trigger('data', {\n        type: 'tag',\n        tagType: 'm3u'\n      });\n      return;\n    }\n    match = /^#EXTINF:?([0-9\\.]*)?,?(.*)?$/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'inf'\n      };\n      if (match[1]) {\n        event.duration = parseFloat(match[1]);\n      }\n      if (match[2]) {\n        event.title = match[2];\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-TARGETDURATION:?([0-9.]*)?/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'targetduration'\n      };\n      if (match[1]) {\n        event.duration = parseInt(match[1], 10);\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#ZEN-TOTAL-DURATION:?([0-9.]*)?/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'totalduration'\n      };\n      if (match[1]) {\n        event.duration = parseInt(match[1], 10);\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-VERSION:?([0-9.]*)?/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'version'\n      };\n      if (match[1]) {\n        event.version = parseInt(match[1], 10);\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-MEDIA-SEQUENCE:?(\\-?[0-9.]*)?/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'media-sequence'\n      };\n      if (match[1]) {\n        event.number = parseInt(match[1], 10);\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-DISCONTINUITY-SEQUENCE:?(\\-?[0-9.]*)?/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'discontinuity-sequence'\n      };\n      if (match[1]) {\n        event.number = parseInt(match[1], 10);\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-PLAYLIST-TYPE:?(.*)?$/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'playlist-type'\n      };\n      if (match[1]) {\n        event.playlistType = match[1];\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-BYTERANGE:?([0-9.]*)?@?([0-9.]*)?/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'byterange'\n      };\n      if (match[1]) {\n        event.length = parseInt(match[1], 10);\n      }\n      if (match[2]) {\n        event.offset = parseInt(match[2], 10);\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-ALLOW-CACHE:?(YES|NO)?/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'allow-cache'\n      };\n      if (match[1]) {\n        event.allowed = !/NO/.test(match[1]);\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-MAP:?(.*)$/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'map'\n      };\n\n      if (match[1]) {\n        var attributes = parseAttributes(match[1]);\n\n        if (attributes.URI) {\n          event.uri = attributes.URI;\n        }\n        if (attributes.BYTERANGE) {\n          var _attributes$BYTERANGE = attributes.BYTERANGE.split('@'),\n              length = _attributes$BYTERANGE[0],\n              offset = _attributes$BYTERANGE[1];\n\n          event.byterange = {};\n          if (length) {\n            event.byterange.length = parseInt(length, 10);\n          }\n          if (offset) {\n            event.byterange.offset = parseInt(offset, 10);\n          }\n        }\n      }\n\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-STREAM-INF:?(.*)$/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'stream-inf'\n      };\n      if (match[1]) {\n        event.attributes = parseAttributes(match[1]);\n\n        if (event.attributes.RESOLUTION) {\n          var split = event.attributes.RESOLUTION.split('x');\n          var resolution = {};\n\n          if (split[0]) {\n            resolution.width = parseInt(split[0], 10);\n          }\n          if (split[1]) {\n            resolution.height = parseInt(split[1], 10);\n          }\n          event.attributes.RESOLUTION = resolution;\n        }\n        if (event.attributes.BANDWIDTH) {\n          event.attributes.BANDWIDTH = parseInt(event.attributes.BANDWIDTH, 10);\n        }\n        if (event.attributes['PROGRAM-ID']) {\n          event.attributes['PROGRAM-ID'] = parseInt(event.attributes['PROGRAM-ID'], 10);\n        }\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-MEDIA:?(.*)$/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'media'\n      };\n      if (match[1]) {\n        event.attributes = parseAttributes(match[1]);\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-ENDLIST/.exec(line);\n    if (match) {\n      this.trigger('data', {\n        type: 'tag',\n        tagType: 'endlist'\n      });\n      return;\n    }\n    match = /^#EXT-X-DISCONTINUITY/.exec(line);\n    if (match) {\n      this.trigger('data', {\n        type: 'tag',\n        tagType: 'discontinuity'\n      });\n      return;\n    }\n    match = /^#EXT-X-PROGRAM-DATE-TIME:?(.*)$/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'program-date-time'\n      };\n      if (match[1]) {\n        event.dateTimeString = match[1];\n        event.dateTimeObject = new Date(match[1]);\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-KEY:?(.*)$/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'key'\n      };\n      if (match[1]) {\n        event.attributes = parseAttributes(match[1]);\n        // parse the IV string into a Uint32Array\n        if (event.attributes.IV) {\n          if (event.attributes.IV.substring(0, 2).toLowerCase() === '0x') {\n            event.attributes.IV = event.attributes.IV.substring(2);\n          }\n\n          event.attributes.IV = event.attributes.IV.match(/.{8}/g);\n          event.attributes.IV[0] = parseInt(event.attributes.IV[0], 16);\n          event.attributes.IV[1] = parseInt(event.attributes.IV[1], 16);\n          event.attributes.IV[2] = parseInt(event.attributes.IV[2], 16);\n          event.attributes.IV[3] = parseInt(event.attributes.IV[3], 16);\n          event.attributes.IV = new Uint32Array(event.attributes.IV);\n        }\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-START:?(.*)$/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'start'\n      };\n      if (match[1]) {\n        event.attributes = parseAttributes(match[1]);\n\n        event.attributes['TIME-OFFSET'] = parseFloat(event.attributes['TIME-OFFSET']);\n        event.attributes.PRECISE = /YES/.test(event.attributes.PRECISE);\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-CUE-OUT-CONT:?(.*)?$/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'cue-out-cont'\n      };\n      if (match[1]) {\n        event.data = match[1];\n      } else {\n        event.data = '';\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-CUE-OUT:?(.*)?$/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'cue-out'\n      };\n      if (match[1]) {\n        event.data = match[1];\n      } else {\n        event.data = '';\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-CUE-IN:?(.*)?$/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'cue-in'\n      };\n      if (match[1]) {\n        event.data = match[1];\n      } else {\n        event.data = '';\n      }\n      this.trigger('data', event);\n      return;\n    }\n\n    // unknown tag type\n    this.trigger('data', {\n      type: 'tag',\n      data: line.slice(4)\n    });\n  };\n\n  /**\n   * Add a parser for custom headers\n   *\n   * @param {Object}   options              a map of options for the added parser\n   * @param {RegExp}   options.expression   a regular expression to match the custom header\n   * @param {string}   options.customType   the custom type to register to the output\n   * @param {Function} [options.dataParser] function to parse the line into an object\n   * @param {boolean}  [options.segment]    should tag data be attached to the segment object\n   */\n\n\n  ParseStream.prototype.addParser = function addParser(_ref) {\n    var _this2 = this;\n\n    var expression = _ref.expression,\n        customType = _ref.customType,\n        dataParser = _ref.dataParser,\n        segment = _ref.segment;\n\n    if (typeof dataParser !== 'function') {\n      dataParser = function dataParser(line) {\n        return line;\n      };\n    }\n    this.customParsers.push(function (line) {\n      var match = expression.exec(line);\n\n      if (match) {\n        _this2.trigger('data', {\n          type: 'custom',\n          data: dataParser(line),\n          customType: customType,\n          segment: segment\n        });\n        return true;\n      }\n    });\n  };\n\n  return ParseStream;\n}(Stream);\n\n/**\n * @file m3u8/parser.js\n */\n/**\n * A parser for M3U8 files. The current interpretation of the input is\n * exposed as a property `manifest` on parser objects. It's just two lines to\n * create and parse a manifest once you have the contents available as a string:\n *\n * ```js\n * var parser = new m3u8.Parser();\n * parser.push(xhr.responseText);\n * ```\n *\n * New input can later be applied to update the manifest object by calling\n * `push` again.\n *\n * The parser attempts to create a usable manifest object even if the\n * underlying input is somewhat nonsensical. It emits `info` and `warning`\n * events during the parse if it encounters input that seems invalid or\n * requires some property of the manifest object to be defaulted.\n *\n * @class Parser\n * @extends Stream\n */\n\nvar Parser = function (_Stream) {\n  inherits(Parser, _Stream);\n\n  function Parser() {\n    classCallCheck(this, Parser);\n\n    var _this = possibleConstructorReturn(this, _Stream.call(this));\n\n    _this.lineStream = new LineStream();\n    _this.parseStream = new ParseStream();\n    _this.lineStream.pipe(_this.parseStream);\n\n    /* eslint-disable consistent-this */\n    var self = _this;\n    /* eslint-enable consistent-this */\n    var uris = [];\n    var currentUri = {};\n    // if specified, the active EXT-X-MAP definition\n    var currentMap = void 0;\n    // if specified, the active decryption key\n    var _key = void 0;\n    var noop = function noop() {};\n    var defaultMediaGroups = {\n      'AUDIO': {},\n      'VIDEO': {},\n      'CLOSED-CAPTIONS': {},\n      'SUBTITLES': {}\n    };\n    // group segments into numbered timelines delineated by discontinuities\n    var currentTimeline = 0;\n\n    // the manifest is empty until the parse stream begins delivering data\n    _this.manifest = {\n      allowCache: true,\n      discontinuityStarts: [],\n      segments: []\n    };\n\n    // update the manifest with the m3u8 entry from the parse stream\n    _this.parseStream.on('data', function (entry) {\n      var mediaGroup = void 0;\n      var rendition = void 0;\n\n      ({\n        tag: function tag() {\n          // switch based on the tag type\n          (({\n            'allow-cache': function allowCache() {\n              this.manifest.allowCache = entry.allowed;\n              if (!('allowed' in entry)) {\n                this.trigger('info', {\n                  message: 'defaulting allowCache to YES'\n                });\n                this.manifest.allowCache = true;\n              }\n            },\n            byterange: function byterange() {\n              var byterange = {};\n\n              if ('length' in entry) {\n                currentUri.byterange = byterange;\n                byterange.length = entry.length;\n\n                if (!('offset' in entry)) {\n                  this.trigger('info', {\n                    message: 'defaulting offset to zero'\n                  });\n                  entry.offset = 0;\n                }\n              }\n              if ('offset' in entry) {\n                currentUri.byterange = byterange;\n                byterange.offset = entry.offset;\n              }\n            },\n            endlist: function endlist() {\n              this.manifest.endList = true;\n            },\n            inf: function inf() {\n              if (!('mediaSequence' in this.manifest)) {\n                this.manifest.mediaSequence = 0;\n                this.trigger('info', {\n                  message: 'defaulting media sequence to zero'\n                });\n              }\n              if (!('discontinuitySequence' in this.manifest)) {\n                this.manifest.discontinuitySequence = 0;\n                this.trigger('info', {\n                  message: 'defaulting discontinuity sequence to zero'\n                });\n              }\n              if (entry.duration > 0) {\n                currentUri.duration = entry.duration;\n              }\n\n              if (entry.duration === 0) {\n                currentUri.duration = 0.01;\n                this.trigger('info', {\n                  message: 'updating zero segment duration to a small value'\n                });\n              }\n\n              this.manifest.segments = uris;\n            },\n            key: function key() {\n              if (!entry.attributes) {\n                this.trigger('warn', {\n                  message: 'ignoring key declaration without attribute list'\n                });\n                return;\n              }\n              // clear the active encryption key\n              if (entry.attributes.METHOD === 'NONE') {\n                _key = null;\n                return;\n              }\n              if (!entry.attributes.URI) {\n                this.trigger('warn', {\n                  message: 'ignoring key declaration without URI'\n                });\n                return;\n              }\n              if (!entry.attributes.METHOD) {\n                this.trigger('warn', {\n                  message: 'defaulting key method to AES-128'\n                });\n              }\n\n              // setup an encryption key for upcoming segments\n              _key = {\n                method: entry.attributes.METHOD || 'AES-128',\n                uri: entry.attributes.URI\n              };\n\n              if (typeof entry.attributes.IV !== 'undefined') {\n                _key.iv = entry.attributes.IV;\n              }\n            },\n            'media-sequence': function mediaSequence() {\n              if (!isFinite(entry.number)) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid media sequence: ' + entry.number\n                });\n                return;\n              }\n              this.manifest.mediaSequence = entry.number;\n            },\n            'discontinuity-sequence': function discontinuitySequence() {\n              if (!isFinite(entry.number)) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid discontinuity sequence: ' + entry.number\n                });\n                return;\n              }\n              this.manifest.discontinuitySequence = entry.number;\n              currentTimeline = entry.number;\n            },\n            'playlist-type': function playlistType() {\n              if (!/VOD|EVENT/.test(entry.playlistType)) {\n                this.trigger('warn', {\n                  message: 'ignoring unknown playlist type: ' + entry.playlist\n                });\n                return;\n              }\n              this.manifest.playlistType = entry.playlistType;\n            },\n            map: function map() {\n              currentMap = {};\n              if (entry.uri) {\n                currentMap.uri = entry.uri;\n              }\n              if (entry.byterange) {\n                currentMap.byterange = entry.byterange;\n              }\n            },\n            'stream-inf': function streamInf() {\n              this.manifest.playlists = uris;\n              this.manifest.mediaGroups = this.manifest.mediaGroups || defaultMediaGroups;\n\n              if (!entry.attributes) {\n                this.trigger('warn', {\n                  message: 'ignoring empty stream-inf attributes'\n                });\n                return;\n              }\n\n              if (!currentUri.attributes) {\n                currentUri.attributes = {};\n              }\n              _extends(currentUri.attributes, entry.attributes);\n            },\n            media: function media() {\n              this.manifest.mediaGroups = this.manifest.mediaGroups || defaultMediaGroups;\n\n              if (!(entry.attributes && entry.attributes.TYPE && entry.attributes['GROUP-ID'] && entry.attributes.NAME)) {\n                this.trigger('warn', {\n                  message: 'ignoring incomplete or missing media group'\n                });\n                return;\n              }\n\n              // find the media group, creating defaults as necessary\n              var mediaGroupType = this.manifest.mediaGroups[entry.attributes.TYPE];\n\n              mediaGroupType[entry.attributes['GROUP-ID']] = mediaGroupType[entry.attributes['GROUP-ID']] || {};\n              mediaGroup = mediaGroupType[entry.attributes['GROUP-ID']];\n\n              // collect the rendition metadata\n              rendition = {\n                'default': /yes/i.test(entry.attributes.DEFAULT)\n              };\n              if (rendition['default']) {\n                rendition.autoselect = true;\n              } else {\n                rendition.autoselect = /yes/i.test(entry.attributes.AUTOSELECT);\n              }\n              if (entry.attributes.LANGUAGE) {\n                rendition.language = entry.attributes.LANGUAGE;\n              }\n              if (entry.attributes.URI) {\n                rendition.uri = entry.attributes.URI;\n              }\n              if (entry.attributes['INSTREAM-ID']) {\n                rendition.instreamId = entry.attributes['INSTREAM-ID'];\n              }\n              if (entry.attributes.CHARACTERISTICS) {\n                rendition.characteristics = entry.attributes.CHARACTERISTICS;\n              }\n              if (entry.attributes.FORCED) {\n                rendition.forced = /yes/i.test(entry.attributes.FORCED);\n              }\n\n              // insert the new rendition\n              mediaGroup[entry.attributes.NAME] = rendition;\n            },\n            discontinuity: function discontinuity() {\n              currentTimeline += 1;\n              currentUri.discontinuity = true;\n              this.manifest.discontinuityStarts.push(uris.length);\n            },\n            'program-date-time': function programDateTime() {\n              if (typeof this.manifest.dateTimeString === 'undefined') {\n                // PROGRAM-DATE-TIME is a media-segment tag, but for backwards\n                // compatibility, we add the first occurence of the PROGRAM-DATE-TIME tag\n                // to the manifest object\n                // TODO: Consider removing this in future major version\n                this.manifest.dateTimeString = entry.dateTimeString;\n                this.manifest.dateTimeObject = entry.dateTimeObject;\n              }\n\n              currentUri.dateTimeString = entry.dateTimeString;\n              currentUri.dateTimeObject = entry.dateTimeObject;\n            },\n            targetduration: function targetduration() {\n              if (!isFinite(entry.duration) || entry.duration < 0) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid target duration: ' + entry.duration\n                });\n                return;\n              }\n              this.manifest.targetDuration = entry.duration;\n            },\n            totalduration: function totalduration() {\n              if (!isFinite(entry.duration) || entry.duration < 0) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid total duration: ' + entry.duration\n                });\n                return;\n              }\n              this.manifest.totalDuration = entry.duration;\n            },\n            start: function start() {\n              if (!entry.attributes || isNaN(entry.attributes['TIME-OFFSET'])) {\n                this.trigger('warn', {\n                  message: 'ignoring start declaration without appropriate attribute list'\n                });\n                return;\n              }\n              this.manifest.start = {\n                timeOffset: entry.attributes['TIME-OFFSET'],\n                precise: entry.attributes.PRECISE\n              };\n            },\n            'cue-out': function cueOut() {\n              currentUri.cueOut = entry.data;\n            },\n            'cue-out-cont': function cueOutCont() {\n              currentUri.cueOutCont = entry.data;\n            },\n            'cue-in': function cueIn() {\n              currentUri.cueIn = entry.data;\n            }\n          })[entry.tagType] || noop).call(self);\n        },\n        uri: function uri() {\n          currentUri.uri = entry.uri;\n          uris.push(currentUri);\n\n          // if no explicit duration was declared, use the target duration\n          if (this.manifest.targetDuration && !('duration' in currentUri)) {\n            this.trigger('warn', {\n              message: 'defaulting segment duration to the target duration'\n            });\n            currentUri.duration = this.manifest.targetDuration;\n          }\n          // annotate with encryption information, if necessary\n          if (_key) {\n            currentUri.key = _key;\n          }\n          currentUri.timeline = currentTimeline;\n          // annotate with initialization segment information, if necessary\n          if (currentMap) {\n            currentUri.map = currentMap;\n          }\n\n          // prepare for the next URI\n          currentUri = {};\n        },\n        comment: function comment() {\n          // comments are not important for playback\n        },\n        custom: function custom() {\n          // if this is segment-level data attach the output to the segment\n          if (entry.segment) {\n            currentUri.custom = currentUri.custom || {};\n            currentUri.custom[entry.customType] = entry.data;\n            // if this is manifest-level data attach to the top level manifest object\n          } else {\n            this.manifest.custom = this.manifest.custom || {};\n            this.manifest.custom[entry.customType] = entry.data;\n          }\n        }\n      })[entry.type].call(self);\n    });\n    return _this;\n  }\n\n  /**\n   * Parse the input string and update the manifest object.\n   *\n   * @param {String} chunk a potentially incomplete portion of the manifest\n   */\n\n\n  Parser.prototype.push = function push(chunk) {\n    this.lineStream.push(chunk);\n  };\n\n  /**\n   * Flush any remaining input. This can be handy if the last line of an M3U8\n   * manifest did not contain a trailing newline but the file has been\n   * completely received.\n   */\n\n\n  Parser.prototype.end = function end() {\n    // flush any buffered input\n    this.lineStream.push('\\n');\n  };\n  /**\n   * Add an additional parser for non-standard tags\n   *\n   * @param {Object}   options              a map of options for the added parser\n   * @param {RegExp}   options.expression   a regular expression to match the custom header\n   * @param {string}   options.type         the type to register to the output\n   * @param {Function} [options.dataParser] function to parse the line into an object\n   * @param {boolean}  [options.segment]    should tag data be attached to the segment object\n   */\n\n\n  Parser.prototype.addParser = function addParser(options) {\n    this.parseStream.addParser(options);\n  };\n\n  return Parser;\n}(Stream);\n\n/**\n * @file m3u8/index.js\n *\n * Utilities for parsing M3U8 files. If the entire manifest is available,\n * `Parser` will create an object representation with enough detail for managing\n * playback. `ParseStream` and `LineStream` are lower-level parsing primitives\n * that do not assume the entirety of the manifest is ready and expose a\n * ReadableStream-like interface.\n */\n\nexport { LineStream, ParseStream, Parser };\n","/**\n * mpd-parser\n * @version 0.6.1\n * @copyright 2018 Brightcove, Inc\n * @license Apache-2.0\n */\nimport URLToolkit from 'url-toolkit';\nimport window from 'global/window';\n\nvar version = \"0.6.1\";\n\nvar formatAudioPlaylist = function formatAudioPlaylist(_ref) {\n  var _attributes;\n\n  var attributes = _ref.attributes,\n      segments = _ref.segments;\n\n  var playlist = {\n    attributes: (_attributes = {\n      NAME: attributes.id,\n      BANDWIDTH: attributes.bandwidth,\n      CODECS: attributes.codecs\n    }, _attributes['PROGRAM-ID'] = 1, _attributes),\n    uri: '',\n    endList: (attributes.type || 'static') === 'static',\n    timeline: attributes.periodIndex,\n    resolvedUri: '',\n    targetDuration: attributes.duration,\n    segments: segments,\n    mediaSequence: segments.length ? segments[0].number : 1\n  };\n\n  if (attributes.contentProtection) {\n    playlist.contentProtection = attributes.contentProtection;\n  }\n\n  return playlist;\n};\n\nvar formatVttPlaylist = function formatVttPlaylist(_ref2) {\n  var _attributes2;\n\n  var attributes = _ref2.attributes,\n      segments = _ref2.segments;\n\n  if (typeof segments === 'undefined') {\n    // vtt tracks may use single file in BaseURL\n    segments = [{\n      uri: attributes.baseUrl,\n      timeline: attributes.periodIndex,\n      resolvedUri: attributes.baseUrl || '',\n      duration: attributes.sourceDuration,\n      number: 0\n    }];\n    // targetDuration should be the same duration as the only segment\n    attributes.duration = attributes.sourceDuration;\n  }\n  return {\n    attributes: (_attributes2 = {\n      NAME: attributes.id,\n      BANDWIDTH: attributes.bandwidth\n    }, _attributes2['PROGRAM-ID'] = 1, _attributes2),\n    uri: '',\n    endList: (attributes.type || 'static') === 'static',\n    timeline: attributes.periodIndex,\n    resolvedUri: attributes.baseUrl || '',\n    targetDuration: attributes.duration,\n    segments: segments,\n    mediaSequence: segments.length ? segments[0].number : 1\n  };\n};\n\nvar organizeAudioPlaylists = function organizeAudioPlaylists(playlists) {\n  return playlists.reduce(function (a, playlist) {\n    var role = playlist.attributes.role && playlist.attributes.role.value || 'main';\n    var language = playlist.attributes.lang || '';\n\n    var label = 'main';\n\n    if (language) {\n      label = playlist.attributes.lang + ' (' + role + ')';\n    }\n\n    // skip if we already have the highest quality audio for a language\n    if (a[label] && a[label].playlists[0].attributes.BANDWIDTH > playlist.attributes.bandwidth) {\n      return a;\n    }\n\n    a[label] = {\n      language: language,\n      autoselect: true,\n      'default': role === 'main',\n      playlists: [formatAudioPlaylist(playlist)],\n      uri: ''\n    };\n\n    return a;\n  }, {});\n};\n\nvar organizeVttPlaylists = function organizeVttPlaylists(playlists) {\n  return playlists.reduce(function (a, playlist) {\n    var label = playlist.attributes.lang || 'text';\n\n    // skip if we already have subtitles\n    if (a[label]) {\n      return a;\n    }\n\n    a[label] = {\n      language: label,\n      'default': false,\n      autoselect: false,\n      playlists: [formatVttPlaylist(playlist)],\n      uri: ''\n    };\n\n    return a;\n  }, {});\n};\n\nvar formatVideoPlaylist = function formatVideoPlaylist(_ref3) {\n  var _attributes3;\n\n  var attributes = _ref3.attributes,\n      segments = _ref3.segments;\n\n  var playlist = {\n    attributes: (_attributes3 = {\n      NAME: attributes.id,\n      AUDIO: 'audio',\n      SUBTITLES: 'subs',\n      RESOLUTION: {\n        width: attributes.width,\n        height: attributes.height\n      },\n      CODECS: attributes.codecs,\n      BANDWIDTH: attributes.bandwidth\n    }, _attributes3['PROGRAM-ID'] = 1, _attributes3),\n    uri: '',\n    endList: (attributes.type || 'static') === 'static',\n    timeline: attributes.periodIndex,\n    resolvedUri: '',\n    targetDuration: attributes.duration,\n    segments: segments,\n    mediaSequence: segments.length ? segments[0].number : 1\n  };\n\n  if (attributes.contentProtection) {\n    playlist.contentProtection = attributes.contentProtection;\n  }\n\n  return playlist;\n};\n\nvar toM3u8 = function toM3u8(dashPlaylists) {\n  var _mediaGroups;\n\n  if (!dashPlaylists.length) {\n    return {};\n  }\n\n  // grab all master attributes\n  var _dashPlaylists$0$attr = dashPlaylists[0].attributes,\n      duration = _dashPlaylists$0$attr.sourceDuration,\n      _dashPlaylists$0$attr2 = _dashPlaylists$0$attr.minimumUpdatePeriod,\n      minimumUpdatePeriod = _dashPlaylists$0$attr2 === undefined ? 0 : _dashPlaylists$0$attr2;\n\n\n  var videoOnly = function videoOnly(_ref4) {\n    var attributes = _ref4.attributes;\n    return attributes.mimeType === 'video/mp4' || attributes.contentType === 'video';\n  };\n  var audioOnly = function audioOnly(_ref5) {\n    var attributes = _ref5.attributes;\n    return attributes.mimeType === 'audio/mp4' || attributes.contentType === 'audio';\n  };\n  var vttOnly = function vttOnly(_ref6) {\n    var attributes = _ref6.attributes;\n    return attributes.mimeType === 'text/vtt' || attributes.contentType === 'text';\n  };\n\n  var videoPlaylists = dashPlaylists.filter(videoOnly).map(formatVideoPlaylist);\n  var audioPlaylists = dashPlaylists.filter(audioOnly);\n  var vttPlaylists = dashPlaylists.filter(vttOnly);\n\n  var master = {\n    allowCache: true,\n    discontinuityStarts: [],\n    segments: [],\n    endList: true,\n    mediaGroups: (_mediaGroups = {\n      AUDIO: {},\n      VIDEO: {}\n    }, _mediaGroups['CLOSED-CAPTIONS'] = {}, _mediaGroups.SUBTITLES = {}, _mediaGroups),\n    uri: '',\n    duration: duration,\n    playlists: videoPlaylists,\n    minimumUpdatePeriod: minimumUpdatePeriod * 1000\n  };\n\n  if (audioPlaylists.length) {\n    master.mediaGroups.AUDIO.audio = organizeAudioPlaylists(audioPlaylists);\n  }\n\n  if (vttPlaylists.length) {\n    master.mediaGroups.SUBTITLES.subs = organizeVttPlaylists(vttPlaylists);\n  }\n\n  return master;\n};\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar isObject = function isObject(obj) {\n  return !!obj && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object';\n};\n\nvar merge = function merge() {\n  for (var _len = arguments.length, objects = Array(_len), _key = 0; _key < _len; _key++) {\n    objects[_key] = arguments[_key];\n  }\n\n  return objects.reduce(function (result, source) {\n\n    Object.keys(source).forEach(function (key) {\n\n      if (Array.isArray(result[key]) && Array.isArray(source[key])) {\n        result[key] = result[key].concat(source[key]);\n      } else if (isObject(result[key]) && isObject(source[key])) {\n        result[key] = merge(result[key], source[key]);\n      } else {\n        result[key] = source[key];\n      }\n    });\n    return result;\n  }, {});\n};\n\nvar resolveUrl = function resolveUrl(baseUrl, relativeUrl) {\n  // return early if we don't need to resolve\n  if (/^[a-z]+:/i.test(relativeUrl)) {\n    return relativeUrl;\n  }\n\n  // if the base URL is relative then combine with the current location\n  if (!/\\/\\//i.test(baseUrl)) {\n    baseUrl = URLToolkit.buildAbsoluteURL(window.location.href, baseUrl);\n  }\n\n  return URLToolkit.buildAbsoluteURL(baseUrl, relativeUrl);\n};\n\n/**\n * @typedef {Object} SingleUri\n * @property {string} uri - relative location of segment\n * @property {string} resolvedUri - resolved location of segment\n * @property {Object} byterange - Object containing information on how to make byte range\n *   requests following byte-range-spec per RFC2616.\n * @property {String} byterange.length - length of range request\n * @property {String} byterange.offset - byte offset of range request\n *\n * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.1\n */\n\n/**\n * Converts a URLType node (5.3.9.2.3 Table 13) to a segment object\n * that conforms to how m3u8-parser is structured\n *\n * @see https://github.com/videojs/m3u8-parser\n *\n * @param {string} baseUrl - baseUrl provided by <BaseUrl> nodes\n * @param {string} source - source url for segment\n * @param {string} range - optional range used for range calls, follows\n * @return {SingleUri} full segment information transformed into a format similar\n *   to m3u8-parser\n */\nvar urlTypeToSegment = function urlTypeToSegment(_ref) {\n  var _ref$baseUrl = _ref.baseUrl,\n      baseUrl = _ref$baseUrl === undefined ? '' : _ref$baseUrl,\n      _ref$source = _ref.source,\n      source = _ref$source === undefined ? '' : _ref$source,\n      _ref$range = _ref.range,\n      range = _ref$range === undefined ? '' : _ref$range;\n\n  var init = {\n    uri: source,\n    resolvedUri: resolveUrl(baseUrl || '', source)\n  };\n\n  if (range) {\n    var ranges = range.split('-');\n    var startRange = parseInt(ranges[0], 10);\n    var endRange = parseInt(ranges[1], 10);\n\n    init.byterange = {\n      length: endRange - startRange,\n      offset: startRange\n    };\n  }\n\n  return init;\n};\n\n/**\n * Calculates the R (repetition) value for a live stream (for the final segment\n * in a manifest where the r value is negative 1)\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {number} time\n *        current time (typically the total time up until the final segment)\n * @param {number} duration\n *        duration property for the given <S />\n *\n * @return {number}\n *        R value to reach the end of the given period\n */\nvar getLiveRValue = function getLiveRValue(attributes, time, duration) {\n  var NOW = attributes.NOW,\n      clientOffset = attributes.clientOffset,\n      availabilityStartTime = attributes.availabilityStartTime,\n      _attributes$timescale = attributes.timescale,\n      timescale = _attributes$timescale === undefined ? 1 : _attributes$timescale,\n      _attributes$start = attributes.start,\n      start = _attributes$start === undefined ? 0 : _attributes$start,\n      _attributes$minimumUp = attributes.minimumUpdatePeriod,\n      minimumUpdatePeriod = _attributes$minimumUp === undefined ? 0 : _attributes$minimumUp;\n\n  var now = (NOW + clientOffset) / 1000;\n  var periodStartWC = availabilityStartTime + start;\n  var periodEndWC = now + minimumUpdatePeriod;\n  var periodDuration = periodEndWC - periodStartWC;\n\n  return Math.ceil((periodDuration * timescale - time) / duration);\n};\n\n/**\n * Uses information provided by SegmentTemplate.SegmentTimeline to determine segment\n * timing and duration\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */\nvar parseByTimeline = function parseByTimeline(attributes, segmentTimeline) {\n  var _attributes$type = attributes.type,\n      type = _attributes$type === undefined ? 'static' : _attributes$type,\n      _attributes$minimumUp2 = attributes.minimumUpdatePeriod,\n      minimumUpdatePeriod = _attributes$minimumUp2 === undefined ? 0 : _attributes$minimumUp2,\n      _attributes$media = attributes.media,\n      media = _attributes$media === undefined ? '' : _attributes$media,\n      sourceDuration = attributes.sourceDuration,\n      _attributes$timescale2 = attributes.timescale,\n      timescale = _attributes$timescale2 === undefined ? 1 : _attributes$timescale2,\n      _attributes$startNumb = attributes.startNumber,\n      startNumber = _attributes$startNumb === undefined ? 1 : _attributes$startNumb,\n      timeline = attributes.periodIndex;\n\n  var segments = [];\n  var time = -1;\n\n  for (var sIndex = 0; sIndex < segmentTimeline.length; sIndex++) {\n    var S = segmentTimeline[sIndex];\n    var duration = S.d;\n    var repeat = S.r || 0;\n    var segmentTime = S.t || 0;\n\n    if (time < 0) {\n      // first segment\n      time = segmentTime;\n    }\n\n    if (segmentTime && segmentTime > time) {\n      // discontinuity\n\n      // TODO: How to handle this type of discontinuity\n      // timeline++ here would treat it like HLS discontuity and content would\n      // get appended without gap\n      // E.G.\n      //  <S t=\"0\" d=\"1\" />\n      //  <S d=\"1\" />\n      //  <S d=\"1\" />\n      //  <S t=\"5\" d=\"1\" />\n      // would have $Time$ values of [0, 1, 2, 5]\n      // should this be appened at time positions [0, 1, 2, 3],(#EXT-X-DISCONTINUITY)\n      // or [0, 1, 2, gap, gap, 5]? (#EXT-X-GAP)\n      // does the value of sourceDuration consider this when calculating arbitrary\n      // negative @r repeat value?\n      // E.G. Same elements as above with this added at the end\n      //  <S d=\"1\" r=\"-1\" />\n      //  with a sourceDuration of 10\n      // Would the 2 gaps be included in the time duration calculations resulting in\n      // 8 segments with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9] or 10 segments\n      // with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9, 10, 11] ?\n\n      time = segmentTime;\n    }\n\n    var count = void 0;\n\n    if (repeat < 0) {\n      var nextS = sIndex + 1;\n\n      if (nextS === segmentTimeline.length) {\n        // last segment\n        if (type === 'dynamic' && minimumUpdatePeriod > 0 && media.indexOf('$Number$') > 0) {\n          count = getLiveRValue(attributes, time, duration);\n        } else {\n          // TODO: This may be incorrect depending on conclusion of TODO above\n          count = (sourceDuration * timescale - time) / duration;\n        }\n      } else {\n        count = (segmentTimeline[nextS].t - time) / duration;\n      }\n    } else {\n      count = repeat + 1;\n    }\n\n    var end = startNumber + segments.length + count;\n    var number = startNumber + segments.length;\n\n    while (number < end) {\n      segments.push({ number: number, duration: duration / timescale, time: time, timeline: timeline });\n      time += duration;\n      number++;\n    }\n  }\n\n  return segments;\n};\n\nvar range = function range(start, end) {\n  var result = [];\n\n  for (var i = start; i < end; i++) {\n    result.push(i);\n  }\n\n  return result;\n};\n\nvar flatten = function flatten(lists) {\n  return lists.reduce(function (x, y) {\n    return x.concat(y);\n  }, []);\n};\n\nvar from = function from(list) {\n  if (!list.length) {\n    return [];\n  }\n\n  var result = [];\n\n  for (var i = 0; i < list.length; i++) {\n    result.push(list[i]);\n  }\n\n  return result;\n};\n\n/**\n * Functions for calculating the range of available segments in static and dynamic\n * manifests.\n */\nvar segmentRange = {\n  /**\n   * Returns the entire range of available segments for a static MPD\n   *\n   * @param {Object} attributes\n   *        Inheritied MPD attributes\n   * @return {{ start: number, end: number }}\n   *         The start and end numbers for available segments\n   */\n  'static': function _static(attributes) {\n    var duration = attributes.duration,\n        _attributes$timescale = attributes.timescale,\n        timescale = _attributes$timescale === undefined ? 1 : _attributes$timescale,\n        sourceDuration = attributes.sourceDuration;\n\n\n    return {\n      start: 0,\n      end: Math.ceil(sourceDuration / (duration / timescale))\n    };\n  },\n\n\n  /**\n   * Returns the current live window range of available segments for a dynamic MPD\n   *\n   * @param {Object} attributes\n   *        Inheritied MPD attributes\n   * @return {{ start: number, end: number }}\n   *         The start and end numbers for available segments\n   */\n  dynamic: function dynamic(attributes) {\n    var NOW = attributes.NOW,\n        clientOffset = attributes.clientOffset,\n        availabilityStartTime = attributes.availabilityStartTime,\n        _attributes$timescale2 = attributes.timescale,\n        timescale = _attributes$timescale2 === undefined ? 1 : _attributes$timescale2,\n        duration = attributes.duration,\n        _attributes$start = attributes.start,\n        start = _attributes$start === undefined ? 0 : _attributes$start,\n        _attributes$minimumUp = attributes.minimumUpdatePeriod,\n        minimumUpdatePeriod = _attributes$minimumUp === undefined ? 0 : _attributes$minimumUp,\n        _attributes$timeShift = attributes.timeShiftBufferDepth,\n        timeShiftBufferDepth = _attributes$timeShift === undefined ? Infinity : _attributes$timeShift;\n\n    var now = (NOW + clientOffset) / 1000;\n    var periodStartWC = availabilityStartTime + start;\n    var periodEndWC = now + minimumUpdatePeriod;\n    var periodDuration = periodEndWC - periodStartWC;\n    var segmentCount = Math.ceil(periodDuration * timescale / duration);\n    var availableStart = Math.floor((now - periodStartWC - timeShiftBufferDepth) * timescale / duration);\n    var availableEnd = Math.floor((now - periodStartWC) * timescale / duration);\n\n    return {\n      start: Math.max(0, availableStart),\n      end: Math.min(segmentCount, availableEnd)\n    };\n  }\n};\n\n/**\n * Maps a range of numbers to objects with information needed to build the corresponding\n * segment list\n *\n * @name toSegmentsCallback\n * @function\n * @param {number} number\n *        Number of the segment\n * @param {number} index\n *        Index of the number in the range list\n * @return {{ number: Number, duration: Number, timeline: Number, time: Number }}\n *         Object with segment timing and duration info\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping a range of numbers to\n * information needed to build the segment list.\n *\n * @param {Object} attributes\n *        Inherited MPD attributes\n * @return {toSegmentsCallback}\n *         Callback map function\n */\nvar toSegments = function toSegments(attributes) {\n  return function (number, index) {\n    var duration = attributes.duration,\n        _attributes$timescale3 = attributes.timescale,\n        timescale = _attributes$timescale3 === undefined ? 1 : _attributes$timescale3,\n        periodIndex = attributes.periodIndex,\n        _attributes$startNumb = attributes.startNumber,\n        startNumber = _attributes$startNumb === undefined ? 1 : _attributes$startNumb;\n\n\n    return {\n      number: startNumber + number,\n      duration: duration / timescale,\n      timeline: periodIndex,\n      time: index * duration\n    };\n  };\n};\n\n/**\n * Returns a list of objects containing segment timing and duration info used for\n * building the list of segments. This uses the @duration attribute specified\n * in the MPD manifest to derive the range of segments.\n *\n * @param {Object} attributes\n *        Inherited MPD attributes\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */\nvar parseByDuration = function parseByDuration(attributes) {\n  var _attributes$type = attributes.type,\n      type = _attributes$type === undefined ? 'static' : _attributes$type,\n      duration = attributes.duration,\n      _attributes$timescale4 = attributes.timescale,\n      timescale = _attributes$timescale4 === undefined ? 1 : _attributes$timescale4,\n      sourceDuration = attributes.sourceDuration;\n\n  var _segmentRange$type = segmentRange[type](attributes),\n      start = _segmentRange$type.start,\n      end = _segmentRange$type.end;\n\n  var segments = range(start, end).map(toSegments(attributes));\n\n  if (type === 'static') {\n    var index = segments.length - 1;\n\n    // final segment may be less than full segment duration\n    segments[index].duration = sourceDuration - duration / timescale * index;\n  }\n\n  return segments;\n};\n\nvar identifierPattern = /\\$([A-z]*)(?:(%0)([0-9]+)d)?\\$/g;\n\n/**\n * Replaces template identifiers with corresponding values. To be used as the callback\n * for String.prototype.replace\n *\n * @name replaceCallback\n * @function\n * @param {string} match\n *        Entire match of identifier\n * @param {string} identifier\n *        Name of matched identifier\n * @param {string} format\n *        Format tag string. Its presence indicates that padding is expected\n * @param {string} width\n *        Desired length of the replaced value. Values less than this width shall be left\n *        zero padded\n * @return {string}\n *         Replacement for the matched identifier\n */\n\n/**\n * Returns a function to be used as a callback for String.prototype.replace to replace\n * template identifiers\n *\n * @param {Obect} values\n *        Object containing values that shall be used to replace known identifiers\n * @param {number} values.RepresentationID\n *        Value of the Representation@id attribute\n * @param {number} values.Number\n *        Number of the corresponding segment\n * @param {number} values.Bandwidth\n *        Value of the Representation@bandwidth attribute.\n * @param {number} values.Time\n *        Timestamp value of the corresponding segment\n * @return {replaceCallback}\n *         Callback to be used with String.prototype.replace to replace identifiers\n */\nvar identifierReplacement = function identifierReplacement(values) {\n  return function (match, identifier, format, width) {\n    if (match === '$$') {\n      // escape sequence\n      return '$';\n    }\n\n    if (typeof values[identifier] === 'undefined') {\n      return match;\n    }\n\n    var value = '' + values[identifier];\n\n    if (identifier === 'RepresentationID') {\n      // Format tag shall not be present with RepresentationID\n      return value;\n    }\n\n    if (!format) {\n      width = 1;\n    } else {\n      width = parseInt(width, 10);\n    }\n\n    if (value.length >= width) {\n      return value;\n    }\n\n    return '' + new Array(width - value.length + 1).join('0') + value;\n  };\n};\n\n/**\n * Constructs a segment url from a template string\n *\n * @param {string} url\n *        Template string to construct url from\n * @param {Obect} values\n *        Object containing values that shall be used to replace known identifiers\n * @param {number} values.RepresentationID\n *        Value of the Representation@id attribute\n * @param {number} values.Number\n *        Number of the corresponding segment\n * @param {number} values.Bandwidth\n *        Value of the Representation@bandwidth attribute.\n * @param {number} values.Time\n *        Timestamp value of the corresponding segment\n * @return {string}\n *         Segment url with identifiers replaced\n */\nvar constructTemplateUrl = function constructTemplateUrl(url, values) {\n  return url.replace(identifierPattern, identifierReplacement(values));\n};\n\n/**\n * Generates a list of objects containing timing and duration information about each\n * segment needed to generate segment uris and the complete segment object\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */\nvar parseTemplateInfo = function parseTemplateInfo(attributes, segmentTimeline) {\n  if (!attributes.duration && !segmentTimeline) {\n    // if neither @duration or SegmentTimeline are present, then there shall be exactly\n    // one media segment\n    return [{\n      number: attributes.startNumber || 1,\n      duration: attributes.sourceDuration,\n      time: 0,\n      timeline: attributes.periodIndex\n    }];\n  }\n\n  if (attributes.duration) {\n    return parseByDuration(attributes);\n  }\n\n  return parseByTimeline(attributes, segmentTimeline);\n};\n\n/**\n * Generates a list of segments using information provided by the SegmentTemplate element\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {Object[]}\n *         List of segment objects\n */\nvar segmentsFromTemplate = function segmentsFromTemplate(attributes, segmentTimeline) {\n  var templateValues = {\n    RepresentationID: attributes.id,\n    Bandwidth: attributes.bandwidth || 0\n  };\n\n  var _attributes$initializ = attributes.initialization,\n      initialization = _attributes$initializ === undefined ? { sourceURL: '', range: '' } : _attributes$initializ;\n\n\n  var mapSegment = urlTypeToSegment({\n    baseUrl: attributes.baseUrl,\n    source: constructTemplateUrl(initialization.sourceURL, templateValues),\n    range: initialization.range\n  });\n\n  var segments = parseTemplateInfo(attributes, segmentTimeline);\n\n  return segments.map(function (segment) {\n    templateValues.Number = segment.number;\n    templateValues.Time = segment.time;\n\n    var uri = constructTemplateUrl(attributes.media || '', templateValues);\n\n    return {\n      uri: uri,\n      timeline: segment.timeline,\n      duration: segment.duration,\n      resolvedUri: resolveUrl(attributes.baseUrl || '', uri),\n      map: mapSegment,\n      number: segment.number\n    };\n  });\n};\n\nvar errors = {\n  INVALID_NUMBER_OF_PERIOD: 'INVALID_NUMBER_OF_PERIOD',\n  DASH_EMPTY_MANIFEST: 'DASH_EMPTY_MANIFEST',\n  DASH_INVALID_XML: 'DASH_INVALID_XML',\n  NO_BASE_URL: 'NO_BASE_URL',\n  MISSING_SEGMENT_INFORMATION: 'MISSING_SEGMENT_INFORMATION',\n  SEGMENT_TIME_UNSPECIFIED: 'SEGMENT_TIME_UNSPECIFIED',\n  UNSUPPORTED_UTC_TIMING_SCHEME: 'UNSUPPORTED_UTC_TIMING_SCHEME'\n};\n\n/**\n * Converts a <SegmentUrl> (of type URLType from the DASH spec 5.3.9.2 Table 14)\n * to an object that matches the output of a segment in videojs/mpd-parser\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @param {Object} segmentUrl\n *   <SegmentURL> node to translate into a segment object\n * @return {Object} translated segment object\n */\nvar SegmentURLToSegmentObject = function SegmentURLToSegmentObject(attributes, segmentUrl) {\n  var baseUrl = attributes.baseUrl,\n      _attributes$initializ = attributes.initialization,\n      initialization = _attributes$initializ === undefined ? {} : _attributes$initializ;\n\n\n  var initSegment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: initialization.sourceURL,\n    range: initialization.range\n  });\n\n  var segment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: segmentUrl.media,\n    range: segmentUrl.mediaRange\n  });\n\n  segment.map = initSegment;\n\n  return segment;\n};\n\n/**\n * Generates a list of segments using information provided by the SegmentList element\n * SegmentList (DASH SPEC Section 5.3.9.3.2) contains a set of <SegmentURL> nodes.  Each\n * node should be translated into segment.\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {Object.<Array>} list of segments\n */\nvar segmentsFromList = function segmentsFromList(attributes, segmentTimeline) {\n  var duration = attributes.duration,\n      _attributes$segmentUr = attributes.segmentUrls,\n      segmentUrls = _attributes$segmentUr === undefined ? [] : _attributes$segmentUr;\n\n  // Per spec (5.3.9.2.1) no way to determine segment duration OR\n  // if both SegmentTimeline and @duration are defined, it is outside of spec.\n\n  if (!duration && !segmentTimeline || duration && segmentTimeline) {\n    throw new Error(errors.SEGMENT_TIME_UNSPECIFIED);\n  }\n\n  var segmentUrlMap = segmentUrls.map(function (segmentUrlObject) {\n    return SegmentURLToSegmentObject(attributes, segmentUrlObject);\n  });\n  var segmentTimeInfo = void 0;\n\n  if (duration) {\n    segmentTimeInfo = parseByDuration(attributes);\n  }\n\n  if (segmentTimeline) {\n    segmentTimeInfo = parseByTimeline(attributes, segmentTimeline);\n  }\n\n  var segments = segmentTimeInfo.map(function (segmentTime, index) {\n    if (segmentUrlMap[index]) {\n      var segment = segmentUrlMap[index];\n\n      segment.timeline = segmentTime.timeline;\n      segment.duration = segmentTime.duration;\n      segment.number = segmentTime.number;\n      return segment;\n    }\n    // Since we're mapping we should get rid of any blank segments (in case\n    // the given SegmentTimeline is handling for more elements than we have\n    // SegmentURLs for).\n  }).filter(function (segment) {\n    return segment;\n  });\n\n  return segments;\n};\n\n/**\n * Translates SegmentBase into a set of segments.\n * (DASH SPEC Section 5.3.9.3.2) contains a set of <SegmentURL> nodes.  Each\n * node should be translated into segment.\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @return {Object.<Array>} list of segments\n */\nvar segmentsFromBase = function segmentsFromBase(attributes) {\n  var baseUrl = attributes.baseUrl,\n      _attributes$initializ = attributes.initialization,\n      initialization = _attributes$initializ === undefined ? {} : _attributes$initializ,\n      sourceDuration = attributes.sourceDuration,\n      _attributes$timescale = attributes.timescale,\n      timescale = _attributes$timescale === undefined ? 1 : _attributes$timescale,\n      _attributes$indexRang = attributes.indexRange,\n      indexRange = _attributes$indexRang === undefined ? '' : _attributes$indexRang,\n      duration = attributes.duration;\n\n  // base url is required for SegmentBase to work, per spec (Section 5.3.9.2.1)\n\n  if (!baseUrl) {\n    throw new Error(errors.NO_BASE_URL);\n  }\n\n  var initSegment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: initialization.sourceURL,\n    range: initialization.range\n  });\n  var segment = urlTypeToSegment({ baseUrl: baseUrl, source: baseUrl, range: indexRange });\n\n  segment.map = initSegment;\n\n  // If there is a duration, use it, otherwise use the given duration of the source\n  // (since SegmentBase is only for one total segment)\n  if (duration) {\n    var segmentTimeInfo = parseByDuration(attributes);\n\n    if (segmentTimeInfo.length) {\n      segment.duration = segmentTimeInfo[0].duration;\n      segment.timeline = segmentTimeInfo[0].timeline;\n    }\n  } else if (sourceDuration) {\n    segment.duration = sourceDuration / timescale;\n    segment.timeline = 0;\n  }\n\n  // This is used for mediaSequence\n  segment.number = 0;\n\n  return [segment];\n};\n\nvar generateSegments = function generateSegments(_ref) {\n  var attributes = _ref.attributes,\n      segmentInfo = _ref.segmentInfo;\n\n  var segmentAttributes = void 0;\n  var segmentsFn = void 0;\n\n  if (segmentInfo.template) {\n    segmentsFn = segmentsFromTemplate;\n    segmentAttributes = merge(attributes, segmentInfo.template);\n  } else if (segmentInfo.base) {\n    segmentsFn = segmentsFromBase;\n    segmentAttributes = merge(attributes, segmentInfo.base);\n  } else if (segmentInfo.list) {\n    segmentsFn = segmentsFromList;\n    segmentAttributes = merge(attributes, segmentInfo.list);\n  }\n\n  if (!segmentsFn) {\n    return { attributes: attributes };\n  }\n\n  var segments = segmentsFn(segmentAttributes, segmentInfo.timeline);\n\n  // The @duration attribute will be used to determin the playlist's targetDuration which\n  // must be in seconds. Since we've generated the segment list, we no longer need\n  // @duration to be in @timescale units, so we can convert it here.\n  if (segmentAttributes.duration) {\n    var _segmentAttributes = segmentAttributes,\n        duration = _segmentAttributes.duration,\n        _segmentAttributes$ti = _segmentAttributes.timescale,\n        timescale = _segmentAttributes$ti === undefined ? 1 : _segmentAttributes$ti;\n\n\n    segmentAttributes.duration = duration / timescale;\n  } else if (segments.length) {\n    // if there is no @duration attribute, use the largest segment duration as\n    // as target duration\n    segmentAttributes.duration = segments.reduce(function (max, segment) {\n      return Math.max(max, Math.ceil(segment.duration));\n    }, 0);\n  } else {\n    segmentAttributes.duration = 0;\n  }\n\n  return {\n    attributes: segmentAttributes,\n    segments: segments\n  };\n};\n\nvar toPlaylists = function toPlaylists(representations) {\n  return representations.map(generateSegments);\n};\n\nvar findChildren = function findChildren(element, name) {\n  return from(element.childNodes).filter(function (_ref) {\n    var tagName = _ref.tagName;\n    return tagName === name;\n  });\n};\n\nvar getContent = function getContent(element) {\n  return element.textContent.trim();\n};\n\nvar parseDuration = function parseDuration(str) {\n  var SECONDS_IN_YEAR = 365 * 24 * 60 * 60;\n  var SECONDS_IN_MONTH = 30 * 24 * 60 * 60;\n  var SECONDS_IN_DAY = 24 * 60 * 60;\n  var SECONDS_IN_HOUR = 60 * 60;\n  var SECONDS_IN_MIN = 60;\n\n  // P10Y10M10DT10H10M10.1S\n  var durationRegex = /P(?:(\\d*)Y)?(?:(\\d*)M)?(?:(\\d*)D)?(?:T(?:(\\d*)H)?(?:(\\d*)M)?(?:([\\d.]*)S)?)?/;\n  var match = durationRegex.exec(str);\n\n  if (!match) {\n    return 0;\n  }\n\n  var _match$slice = match.slice(1),\n      year = _match$slice[0],\n      month = _match$slice[1],\n      day = _match$slice[2],\n      hour = _match$slice[3],\n      minute = _match$slice[4],\n      second = _match$slice[5];\n\n  return parseFloat(year || 0) * SECONDS_IN_YEAR + parseFloat(month || 0) * SECONDS_IN_MONTH + parseFloat(day || 0) * SECONDS_IN_DAY + parseFloat(hour || 0) * SECONDS_IN_HOUR + parseFloat(minute || 0) * SECONDS_IN_MIN + parseFloat(second || 0);\n};\n\nvar parseDate = function parseDate(str) {\n  // Date format without timezone according to ISO 8601\n  // YYY-MM-DDThh:mm:ss.ssssss\n  var dateRegex = /^\\d+-\\d+-\\d+T\\d+:\\d+:\\d+(\\.\\d+)?$/;\n\n  // If the date string does not specifiy a timezone, we must specifiy UTC. This is\n  // expressed by ending with 'Z'\n  if (dateRegex.test(str)) {\n    str += 'Z';\n  }\n\n  return Date.parse(str);\n};\n\n// TODO: maybe order these in some way that makes it easy to find specific attributes\nvar parsers = {\n  /**\n   * Specifies the duration of the entire Media Presentation. Format is a duration string\n   * as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  mediaPresentationDuration: function mediaPresentationDuration(value) {\n    return parseDuration(value);\n  },\n\n\n  /**\n   * Specifies the Segment availability start time for all Segments referred to in this\n   * MPD. For a dynamic manifest, it specifies the anchor for the earliest availability\n   * time. Format is a date string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The date as seconds from unix epoch\n   */\n  availabilityStartTime: function availabilityStartTime(value) {\n    return parseDate(value) / 1000;\n  },\n\n\n  /**\n   * Specifies the smallest period between potential changes to the MPD. Format is a\n   * duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  minimumUpdatePeriod: function minimumUpdatePeriod(value) {\n    return parseDuration(value);\n  },\n\n\n  /**\n   * Specifies the duration of the smallest time shifting buffer for any Representation\n   * in the MPD. Format is a duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  timeShiftBufferDepth: function timeShiftBufferDepth(value) {\n    return parseDuration(value);\n  },\n\n\n  /**\n   * Specifies the PeriodStart time of the Period relative to the availabilityStarttime.\n   * Format is a duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  start: function start(value) {\n    return parseDuration(value);\n  },\n\n\n  /**\n   * Specifies the width of the visual presentation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed width\n   */\n  width: function width(value) {\n    return parseInt(value, 10);\n  },\n\n\n  /**\n   * Specifies the height of the visual presentation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed height\n   */\n  height: function height(value) {\n    return parseInt(value, 10);\n  },\n\n\n  /**\n   * Specifies the bitrate of the representation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed bandwidth\n   */\n  bandwidth: function bandwidth(value) {\n    return parseInt(value, 10);\n  },\n\n\n  /**\n   * Specifies the number of the first Media Segment in this Representation in the Period\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed number\n   */\n  startNumber: function startNumber(value) {\n    return parseInt(value, 10);\n  },\n\n\n  /**\n   * Specifies the timescale in units per seconds\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The aprsed timescale\n   */\n  timescale: function timescale(value) {\n    return parseInt(value, 10);\n  },\n\n\n  /**\n   * Specifies the constant approximate Segment duration\n   * NOTE: The <Period> element also contains an @duration attribute. This duration\n   *       specifies the duration of the Period. This attribute is currently not\n   *       supported by the rest of the parser, however we still check for it to prevent\n   *       errors.\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed duration\n   */\n  duration: function duration(value) {\n    var parsedValue = parseInt(value, 10);\n\n    if (isNaN(parsedValue)) {\n      return parseDuration(value);\n    }\n\n    return parsedValue;\n  },\n\n\n  /**\n   * Specifies the Segment duration, in units of the value of the @timescale.\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed duration\n   */\n  d: function d(value) {\n    return parseInt(value, 10);\n  },\n\n\n  /**\n   * Specifies the MPD start time, in @timescale units, the first Segment in the series\n   * starts relative to the beginning of the Period\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed time\n   */\n  t: function t(value) {\n    return parseInt(value, 10);\n  },\n\n\n  /**\n   * Specifies the repeat count of the number of following contiguous Segments with the\n   * same duration expressed by the value of @d\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed number\n   */\n  r: function r(value) {\n    return parseInt(value, 10);\n  },\n\n\n  /**\n   * Default parser for all other attributes. Acts as a no-op and just returns the value\n   * as a string\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {string}\n   *         Unparsed value\n   */\n  DEFAULT: function DEFAULT(value) {\n    return value;\n  }\n};\n\n/**\n * Gets all the attributes and values of the provided node, parses attributes with known\n * types, and returns an object with attribute names mapped to values.\n *\n * @param {Node} el\n *        The node to parse attributes from\n * @return {Object}\n *         Object with all attributes of el parsed\n */\nvar parseAttributes = function parseAttributes(el) {\n  if (!(el && el.attributes)) {\n    return {};\n  }\n\n  return from(el.attributes).reduce(function (a, e) {\n    var parseFn = parsers[e.name] || parsers.DEFAULT;\n\n    a[e.name] = parseFn(e.value);\n\n    return a;\n  }, {});\n};\n\nfunction decodeB64ToUint8Array(b64Text) {\n  var decodedString = window.atob(b64Text);\n  var array = new Uint8Array(decodedString.length);\n\n  for (var i = 0; i < decodedString.length; i++) {\n    array[i] = decodedString.charCodeAt(i);\n  }\n  return array;\n}\n\nvar keySystemsMap = {\n  'urn:uuid:1077efec-c0b2-4d02-ace3-3c1e52e2fb4b': 'org.w3.clearkey',\n  'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed': 'com.widevine.alpha',\n  'urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95': 'com.microsoft.playready',\n  'urn:uuid:f239e769-efa3-4850-9c16-a903c6932efb': 'com.adobe.primetime'\n};\n\n/**\n * Builds a list of urls that is the product of the reference urls and BaseURL values\n *\n * @param {string[]} referenceUrls\n *        List of reference urls to resolve to\n * @param {Node[]} baseUrlElements\n *        List of BaseURL nodes from the mpd\n * @return {string[]}\n *         List of resolved urls\n */\nvar buildBaseUrls = function buildBaseUrls(referenceUrls, baseUrlElements) {\n  if (!baseUrlElements.length) {\n    return referenceUrls;\n  }\n\n  return flatten(referenceUrls.map(function (reference) {\n    return baseUrlElements.map(function (baseUrlElement) {\n      return resolveUrl(reference, getContent(baseUrlElement));\n    });\n  }));\n};\n\n/**\n * Contains all Segment information for its containing AdaptationSet\n *\n * @typedef {Object} SegmentInformation\n * @property {Object|undefined} template\n *           Contains the attributes for the SegmentTemplate node\n * @property {Object[]|undefined} timeline\n *           Contains a list of atrributes for each S node within the SegmentTimeline node\n * @property {Object|undefined} list\n *           Contains the attributes for the SegmentList node\n * @property {Object|undefined} base\n *           Contains the attributes for the SegmentBase node\n */\n\n/**\n * Returns all available Segment information contained within the AdaptationSet node\n *\n * @param {Node} adaptationSet\n *        The AdaptationSet node to get Segment information from\n * @return {SegmentInformation}\n *         The Segment information contained within the provided AdaptationSet\n */\nvar getSegmentInformation = function getSegmentInformation(adaptationSet) {\n  var segmentTemplate = findChildren(adaptationSet, 'SegmentTemplate')[0];\n  var segmentList = findChildren(adaptationSet, 'SegmentList')[0];\n  var segmentUrls = segmentList && findChildren(segmentList, 'SegmentURL').map(function (s) {\n    return merge({ tag: 'SegmentURL' }, parseAttributes(s));\n  });\n  var segmentBase = findChildren(adaptationSet, 'SegmentBase')[0];\n  var segmentTimelineParentNode = segmentList || segmentTemplate;\n  var segmentTimeline = segmentTimelineParentNode && findChildren(segmentTimelineParentNode, 'SegmentTimeline')[0];\n  var segmentInitializationParentNode = segmentList || segmentBase || segmentTemplate;\n  var segmentInitialization = segmentInitializationParentNode && findChildren(segmentInitializationParentNode, 'Initialization')[0];\n\n  // SegmentTemplate is handled slightly differently, since it can have both\n  // @initialization and an <Initialization> node.  @initialization can be templated,\n  // while the node can have a url and range specified.  If the <SegmentTemplate> has\n  // both @initialization and an <Initialization> subelement we opt to override with\n  // the node, as this interaction is not defined in the spec.\n  var template = segmentTemplate && parseAttributes(segmentTemplate);\n\n  if (template && segmentInitialization) {\n    template.initialization = segmentInitialization && parseAttributes(segmentInitialization);\n  } else if (template && template.initialization) {\n    // If it is @initialization we convert it to an object since this is the format that\n    // later functions will rely on for the initialization segment.  This is only valid\n    // for <SegmentTemplate>\n    template.initialization = { sourceURL: template.initialization };\n  }\n\n  var segmentInfo = {\n    template: template,\n    timeline: segmentTimeline && findChildren(segmentTimeline, 'S').map(function (s) {\n      return parseAttributes(s);\n    }),\n    list: segmentList && merge(parseAttributes(segmentList), {\n      segmentUrls: segmentUrls,\n      initialization: parseAttributes(segmentInitialization)\n    }),\n    base: segmentBase && merge(parseAttributes(segmentBase), {\n      initialization: parseAttributes(segmentInitialization)\n    })\n  };\n\n  Object.keys(segmentInfo).forEach(function (key) {\n    if (!segmentInfo[key]) {\n      delete segmentInfo[key];\n    }\n  });\n\n  return segmentInfo;\n};\n\n/**\n * Contains Segment information and attributes needed to construct a Playlist object\n * from a Representation\n *\n * @typedef {Object} RepresentationInformation\n * @property {SegmentInformation} segmentInfo\n *           Segment information for this Representation\n * @property {Object} attributes\n *           Inherited attributes for this Representation\n */\n\n/**\n * Maps a Representation node to an object containing Segment information and attributes\n *\n * @name inheritBaseUrlsCallback\n * @function\n * @param {Node} representation\n *        Representation node from the mpd\n * @return {RepresentationInformation}\n *         Representation information needed to construct a Playlist object\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping Representation nodes to\n * Segment information and attributes using inherited BaseURL nodes.\n *\n * @param {Object} adaptationSetAttributes\n *        Contains attributes inherited by the AdaptationSet\n * @param {string[]} adaptationSetBaseUrls\n *        Contains list of resolved base urls inherited by the AdaptationSet\n * @param {SegmentInformation} adaptationSetSegmentInfo\n *        Contains Segment information for the AdaptationSet\n * @return {inheritBaseUrlsCallback}\n *         Callback map function\n */\nvar inheritBaseUrls = function inheritBaseUrls(adaptationSetAttributes, adaptationSetBaseUrls, adaptationSetSegmentInfo) {\n  return function (representation) {\n    var repBaseUrlElements = findChildren(representation, 'BaseURL');\n    var repBaseUrls = buildBaseUrls(adaptationSetBaseUrls, repBaseUrlElements);\n    var attributes = merge(adaptationSetAttributes, parseAttributes(representation));\n    var representationSegmentInfo = getSegmentInformation(representation);\n\n    return repBaseUrls.map(function (baseUrl) {\n      return {\n        segmentInfo: merge(adaptationSetSegmentInfo, representationSegmentInfo),\n        attributes: merge(attributes, { baseUrl: baseUrl })\n      };\n    });\n  };\n};\n\n/**\n * Tranforms a series of content protection nodes to\n * an object containing pssh data by key system\n *\n * @param {Node[]} contentProtectionNodes\n *        Content protection nodes\n * @return {Object}\n *        Object containing pssh data by key system\n */\nvar generateKeySystemInformation = function generateKeySystemInformation(contentProtectionNodes) {\n  return contentProtectionNodes.reduce(function (acc, node) {\n    var attributes = parseAttributes(node);\n    var keySystem = keySystemsMap[attributes.schemeIdUri];\n\n    if (keySystem) {\n      acc[keySystem] = { attributes: attributes };\n\n      var psshNode = findChildren(node, 'cenc:pssh')[0];\n\n      if (psshNode) {\n        var pssh = getContent(psshNode);\n        var psshBuffer = pssh && decodeB64ToUint8Array(pssh);\n\n        acc[keySystem].pssh = psshBuffer;\n      }\n    }\n\n    return acc;\n  }, {});\n};\n\n/**\n * Maps an AdaptationSet node to a list of Representation information objects\n *\n * @name toRepresentationsCallback\n * @function\n * @param {Node} adaptationSet\n *        AdaptationSet node from the mpd\n * @return {RepresentationInformation[]}\n *         List of objects containing Representaion information\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping AdaptationSet nodes to a list of\n * Representation information objects\n *\n * @param {Object} periodAttributes\n *        Contains attributes inherited by the Period\n * @param {string[]} periodBaseUrls\n *        Contains list of resolved base urls inherited by the Period\n * @param {string[]} periodSegmentInfo\n *        Contains Segment Information at the period level\n * @return {toRepresentationsCallback}\n *         Callback map function\n */\nvar toRepresentations = function toRepresentations(periodAttributes, periodBaseUrls, periodSegmentInfo) {\n  return function (adaptationSet) {\n    var adaptationSetAttributes = parseAttributes(adaptationSet);\n    var adaptationSetBaseUrls = buildBaseUrls(periodBaseUrls, findChildren(adaptationSet, 'BaseURL'));\n    var role = findChildren(adaptationSet, 'Role')[0];\n    var roleAttributes = { role: parseAttributes(role) };\n\n    var attrs = merge(periodAttributes, adaptationSetAttributes, roleAttributes);\n\n    var contentProtection = generateKeySystemInformation(findChildren(adaptationSet, 'ContentProtection'));\n\n    if (Object.keys(contentProtection).length) {\n      attrs = merge(attrs, { contentProtection: contentProtection });\n    }\n\n    var segmentInfo = getSegmentInformation(adaptationSet);\n    var representations = findChildren(adaptationSet, 'Representation');\n    var adaptationSetSegmentInfo = merge(periodSegmentInfo, segmentInfo);\n\n    return flatten(representations.map(inheritBaseUrls(attrs, adaptationSetBaseUrls, adaptationSetSegmentInfo)));\n  };\n};\n\n/**\n * Maps an Period node to a list of Representation inforamtion objects for all\n * AdaptationSet nodes contained within the Period\n *\n * @name toAdaptationSetsCallback\n * @function\n * @param {Node} period\n *        Period node from the mpd\n * @param {number} periodIndex\n *        Index of the Period within the mpd\n * @return {RepresentationInformation[]}\n *         List of objects containing Representaion information\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping Period nodes to a list of\n * Representation information objects\n *\n * @param {Object} mpdAttributes\n *        Contains attributes inherited by the mpd\n * @param {string[]} mpdBaseUrls\n *        Contains list of resolved base urls inherited by the mpd\n * @return {toAdaptationSetsCallback}\n *         Callback map function\n */\nvar toAdaptationSets = function toAdaptationSets(mpdAttributes, mpdBaseUrls) {\n  return function (period, periodIndex) {\n    var periodBaseUrls = buildBaseUrls(mpdBaseUrls, findChildren(period, 'BaseURL'));\n    var periodAtt = parseAttributes(period);\n    var periodAttributes = merge(mpdAttributes, periodAtt, { periodIndex: periodIndex });\n    var adaptationSets = findChildren(period, 'AdaptationSet');\n    var periodSegmentInfo = getSegmentInformation(period);\n\n    return flatten(adaptationSets.map(toRepresentations(periodAttributes, periodBaseUrls, periodSegmentInfo)));\n  };\n};\n\n/**\n * Traverses the mpd xml tree to generate a list of Representation information objects\n * that have inherited attributes from parent nodes\n *\n * @param {Node} mpd\n *        The root node of the mpd\n * @param {Object} options\n *        Available options for inheritAttributes\n * @param {string} options.manifestUri\n *        The uri source of the mpd\n * @param {number} options.NOW\n *        Current time per DASH IOP.  Default is current time in ms since epoch\n * @param {number} options.clientOffset\n *        Client time difference from NOW (in milliseconds)\n * @return {RepresentationInformation[]}\n *         List of objects containing Representation information\n */\nvar inheritAttributes = function inheritAttributes(mpd) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$manifestUri = options.manifestUri,\n      manifestUri = _options$manifestUri === undefined ? '' : _options$manifestUri,\n      _options$NOW = options.NOW,\n      NOW = _options$NOW === undefined ? Date.now() : _options$NOW,\n      _options$clientOffset = options.clientOffset,\n      clientOffset = _options$clientOffset === undefined ? 0 : _options$clientOffset;\n\n  var periods = findChildren(mpd, 'Period');\n\n  if (periods.length !== 1) {\n    // TODO add support for multiperiod\n    throw new Error(errors.INVALID_NUMBER_OF_PERIOD);\n  }\n\n  var mpdAttributes = parseAttributes(mpd);\n  var mpdBaseUrls = buildBaseUrls([manifestUri], findChildren(mpd, 'BaseURL'));\n\n  mpdAttributes.sourceDuration = mpdAttributes.mediaPresentationDuration || 0;\n  mpdAttributes.NOW = NOW;\n  mpdAttributes.clientOffset = clientOffset;\n\n  return flatten(periods.map(toAdaptationSets(mpdAttributes, mpdBaseUrls)));\n};\n\nvar stringToMpdXml = function stringToMpdXml(manifestString) {\n  if (manifestString === '') {\n    throw new Error(errors.DASH_EMPTY_MANIFEST);\n  }\n\n  var parser = new window.DOMParser();\n  var xml = parser.parseFromString(manifestString, 'application/xml');\n  var mpd = xml && xml.documentElement.tagName === 'MPD' ? xml.documentElement : null;\n\n  if (!mpd || mpd && mpd.getElementsByTagName('parsererror').length > 0) {\n    throw new Error(errors.DASH_INVALID_XML);\n  }\n\n  return mpd;\n};\n\n/**\n * Parses the manifest for a UTCTiming node, returning the nodes attributes if found\n *\n * @param {string} mpd\n *        XML string of the MPD manifest\n * @return {Object|null}\n *         Attributes of UTCTiming node specified in the manifest. Null if none found\n */\nvar parseUTCTimingScheme = function parseUTCTimingScheme(mpd) {\n  var UTCTimingNode = findChildren(mpd, 'UTCTiming')[0];\n\n  if (!UTCTimingNode) {\n    return null;\n  }\n\n  var attributes = parseAttributes(UTCTimingNode);\n\n  switch (attributes.schemeIdUri) {\n    case 'urn:mpeg:dash:utc:http-head:2014':\n    case 'urn:mpeg:dash:utc:http-head:2012':\n      attributes.method = 'HEAD';\n      break;\n    case 'urn:mpeg:dash:utc:http-xsdate:2014':\n    case 'urn:mpeg:dash:utc:http-iso:2014':\n    case 'urn:mpeg:dash:utc:http-xsdate:2012':\n    case 'urn:mpeg:dash:utc:http-iso:2012':\n      attributes.method = 'GET';\n      break;\n    case 'urn:mpeg:dash:utc:direct:2014':\n    case 'urn:mpeg:dash:utc:direct:2012':\n      attributes.method = 'DIRECT';\n      attributes.value = Date.parse(attributes.value);\n      break;\n    case 'urn:mpeg:dash:utc:http-ntp:2014':\n    case 'urn:mpeg:dash:utc:ntp:2014':\n    case 'urn:mpeg:dash:utc:sntp:2014':\n    default:\n      throw new Error(errors.UNSUPPORTED_UTC_TIMING_SCHEME);\n  }\n\n  return attributes;\n};\n\nvar VERSION = version;\n\nvar parse = function parse(manifestString, options) {\n  return toM3u8(toPlaylists(inheritAttributes(stringToMpdXml(manifestString), options)));\n};\n\n/**\n * Parses the manifest for a UTCTiming node, returning the nodes attributes if found\n *\n * @param {string} manifestString\n *        XML string of the MPD manifest\n * @return {Object|null}\n *         Attributes of UTCTiming node specified in the manifest. Null if none found\n */\nvar parseUTCTiming = function parseUTCTiming(manifestString) {\n  return parseUTCTimingScheme(stringToMpdXml(manifestString));\n};\n\nexport { VERSION, parse, parseUTCTiming };\n","/*\n * pkcs7.pad\n * https://github.com/brightcove/pkcs7\n *\n * Copyright (c) 2014 Brightcove\n * Licensed under the apache2 license.\n */\n\nvar PADDING = void 0;\n\n/**\n * Returns a new Uint8Array that is padded with PKCS#7 padding.\n * @param plaintext {Uint8Array} the input bytes before encryption\n * @return {Uint8Array} the padded bytes\n * @see http://tools.ietf.org/html/rfc5652\n */\nfunction pad(plaintext) {\n  var padding = PADDING[plaintext.byteLength % 16 || 0];\n  var result = new Uint8Array(plaintext.byteLength + padding.length);\n\n  result.set(plaintext);\n  result.set(padding, plaintext.byteLength);\n\n  return result;\n}\n\n// pre-define the padding values\nPADDING = [[16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16], [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15], [14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14], [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13], [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12], [11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11], [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], [9, 9, 9, 9, 9, 9, 9, 9, 9], [8, 8, 8, 8, 8, 8, 8, 8], [7, 7, 7, 7, 7, 7, 7], [6, 6, 6, 6, 6, 6], [5, 5, 5, 5, 5], [4, 4, 4, 4], [3, 3, 3], [2, 2], [1]];\n\n/**\n * Returns the subarray of a Uint8Array without PKCS#7 padding.\n * @param padded {Uint8Array} unencrypted bytes that have been padded\n * @return {Uint8Array} the unpadded bytes\n * @see http://tools.ietf.org/html/rfc5652\n */\nfunction unpad(padded) {\n  return padded.subarray(0, padded.byteLength - padded[padded.byteLength - 1]);\n}\n\nvar version = \"1.0.2\";\n\nexport { pad, unpad, version as VERSION };\n","import { unpad } from 'pkcs7';\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\n\n\n\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\n\n\n\n\n\n\n\n\n\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\n/**\n * @file aes.js\n *\n * This file contains an adaptation of the AES decryption algorithm\n * from the Standford Javascript Cryptography Library. That work is\n * covered by the following copyright and permissions notice:\n *\n * Copyright 2009-2010 Emily Stark, Mike Hamburg, Dan Boneh.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR\n * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\n * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN\n * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * The views and conclusions contained in the software and documentation\n * are those of the authors and should not be interpreted as representing\n * official policies, either expressed or implied, of the authors.\n */\n\n/**\n * Expand the S-box tables.\n *\n * @private\n */\nvar precompute = function precompute() {\n  var tables = [[[], [], [], [], []], [[], [], [], [], []]];\n  var encTable = tables[0];\n  var decTable = tables[1];\n  var sbox = encTable[4];\n  var sboxInv = decTable[4];\n  var i = void 0;\n  var x = void 0;\n  var xInv = void 0;\n  var d = [];\n  var th = [];\n  var x2 = void 0;\n  var x4 = void 0;\n  var x8 = void 0;\n  var s = void 0;\n  var tEnc = void 0;\n  var tDec = void 0;\n\n  // Compute double and third tables\n  for (i = 0; i < 256; i++) {\n    th[(d[i] = i << 1 ^ (i >> 7) * 283) ^ i] = i;\n  }\n\n  for (x = xInv = 0; !sbox[x]; x ^= x2 || 1, xInv = th[xInv] || 1) {\n    // Compute sbox\n    s = xInv ^ xInv << 1 ^ xInv << 2 ^ xInv << 3 ^ xInv << 4;\n    s = s >> 8 ^ s & 255 ^ 99;\n    sbox[x] = s;\n    sboxInv[s] = x;\n\n    // Compute MixColumns\n    x8 = d[x4 = d[x2 = d[x]]];\n    tDec = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;\n    tEnc = d[s] * 0x101 ^ s * 0x1010100;\n\n    for (i = 0; i < 4; i++) {\n      encTable[i][x] = tEnc = tEnc << 24 ^ tEnc >>> 8;\n      decTable[i][s] = tDec = tDec << 24 ^ tDec >>> 8;\n    }\n  }\n\n  // Compactify. Considerable speedup on Firefox.\n  for (i = 0; i < 5; i++) {\n    encTable[i] = encTable[i].slice(0);\n    decTable[i] = decTable[i].slice(0);\n  }\n  return tables;\n};\nvar aesTables = null;\n\n/**\n * Schedule out an AES key for both encryption and decryption. This\n * is a low-level class. Use a cipher mode to do bulk encryption.\n *\n * @class AES\n * @param key {Array} The key as an array of 4, 6 or 8 words.\n */\n\nvar AES = function () {\n  function AES(key) {\n    classCallCheck(this, AES);\n\n    /**\n     * The expanded S-box and inverse S-box tables. These will be computed\n     * on the client so that we don't have to send them down the wire.\n     *\n     * There are two tables, _tables[0] is for encryption and\n     * _tables[1] is for decryption.\n     *\n     * The first 4 sub-tables are the expanded S-box with MixColumns. The\n     * last (_tables[01][4]) is the S-box itself.\n     *\n     * @private\n     */\n    // if we have yet to precompute the S-box tables\n    // do so now\n    if (!aesTables) {\n      aesTables = precompute();\n    }\n    // then make a copy of that object for use\n    this._tables = [[aesTables[0][0].slice(), aesTables[0][1].slice(), aesTables[0][2].slice(), aesTables[0][3].slice(), aesTables[0][4].slice()], [aesTables[1][0].slice(), aesTables[1][1].slice(), aesTables[1][2].slice(), aesTables[1][3].slice(), aesTables[1][4].slice()]];\n    var i = void 0;\n    var j = void 0;\n    var tmp = void 0;\n    var encKey = void 0;\n    var decKey = void 0;\n    var sbox = this._tables[0][4];\n    var decTable = this._tables[1];\n    var keyLen = key.length;\n    var rcon = 1;\n\n    if (keyLen !== 4 && keyLen !== 6 && keyLen !== 8) {\n      throw new Error('Invalid aes key size');\n    }\n\n    encKey = key.slice(0);\n    decKey = [];\n    this._key = [encKey, decKey];\n\n    // schedule encryption keys\n    for (i = keyLen; i < 4 * keyLen + 28; i++) {\n      tmp = encKey[i - 1];\n\n      // apply sbox\n      if (i % keyLen === 0 || keyLen === 8 && i % keyLen === 4) {\n        tmp = sbox[tmp >>> 24] << 24 ^ sbox[tmp >> 16 & 255] << 16 ^ sbox[tmp >> 8 & 255] << 8 ^ sbox[tmp & 255];\n\n        // shift rows and add rcon\n        if (i % keyLen === 0) {\n          tmp = tmp << 8 ^ tmp >>> 24 ^ rcon << 24;\n          rcon = rcon << 1 ^ (rcon >> 7) * 283;\n        }\n      }\n\n      encKey[i] = encKey[i - keyLen] ^ tmp;\n    }\n\n    // schedule decryption keys\n    for (j = 0; i; j++, i--) {\n      tmp = encKey[j & 3 ? i : i - 4];\n      if (i <= 4 || j < 4) {\n        decKey[j] = tmp;\n      } else {\n        decKey[j] = decTable[0][sbox[tmp >>> 24]] ^ decTable[1][sbox[tmp >> 16 & 255]] ^ decTable[2][sbox[tmp >> 8 & 255]] ^ decTable[3][sbox[tmp & 255]];\n      }\n    }\n  }\n\n  /**\n   * Decrypt 16 bytes, specified as four 32-bit words.\n   *\n   * @param {Number} encrypted0 the first word to decrypt\n   * @param {Number} encrypted1 the second word to decrypt\n   * @param {Number} encrypted2 the third word to decrypt\n   * @param {Number} encrypted3 the fourth word to decrypt\n   * @param {Int32Array} out the array to write the decrypted words\n   * into\n   * @param {Number} offset the offset into the output array to start\n   * writing results\n   * @return {Array} The plaintext.\n   */\n\n\n  AES.prototype.decrypt = function decrypt(encrypted0, encrypted1, encrypted2, encrypted3, out, offset) {\n    var key = this._key[1];\n    // state variables a,b,c,d are loaded with pre-whitened data\n    var a = encrypted0 ^ key[0];\n    var b = encrypted3 ^ key[1];\n    var c = encrypted2 ^ key[2];\n    var d = encrypted1 ^ key[3];\n    var a2 = void 0;\n    var b2 = void 0;\n    var c2 = void 0;\n\n    // key.length === 2 ?\n    var nInnerRounds = key.length / 4 - 2;\n    var i = void 0;\n    var kIndex = 4;\n    var table = this._tables[1];\n\n    // load up the tables\n    var table0 = table[0];\n    var table1 = table[1];\n    var table2 = table[2];\n    var table3 = table[3];\n    var sbox = table[4];\n\n    // Inner rounds. Cribbed from OpenSSL.\n    for (i = 0; i < nInnerRounds; i++) {\n      a2 = table0[a >>> 24] ^ table1[b >> 16 & 255] ^ table2[c >> 8 & 255] ^ table3[d & 255] ^ key[kIndex];\n      b2 = table0[b >>> 24] ^ table1[c >> 16 & 255] ^ table2[d >> 8 & 255] ^ table3[a & 255] ^ key[kIndex + 1];\n      c2 = table0[c >>> 24] ^ table1[d >> 16 & 255] ^ table2[a >> 8 & 255] ^ table3[b & 255] ^ key[kIndex + 2];\n      d = table0[d >>> 24] ^ table1[a >> 16 & 255] ^ table2[b >> 8 & 255] ^ table3[c & 255] ^ key[kIndex + 3];\n      kIndex += 4;\n      a = a2;b = b2;c = c2;\n    }\n\n    // Last round.\n    for (i = 0; i < 4; i++) {\n      out[(3 & -i) + offset] = sbox[a >>> 24] << 24 ^ sbox[b >> 16 & 255] << 16 ^ sbox[c >> 8 & 255] << 8 ^ sbox[d & 255] ^ key[kIndex++];\n      a2 = a;a = b;b = c;c = d;d = a2;\n    }\n  };\n\n  return AES;\n}();\n\n/**\n * @file stream.js\n */\n/**\n * A lightweight readable stream implemention that handles event dispatching.\n *\n * @class Stream\n */\nvar Stream = function () {\n  function Stream() {\n    classCallCheck(this, Stream);\n\n    this.listeners = {};\n  }\n\n  /**\n   * Add a listener for a specified event type.\n   *\n   * @param {String} type the event name\n   * @param {Function} listener the callback to be invoked when an event of\n   * the specified type occurs\n   */\n\n\n  Stream.prototype.on = function on(type, listener) {\n    if (!this.listeners[type]) {\n      this.listeners[type] = [];\n    }\n    this.listeners[type].push(listener);\n  };\n\n  /**\n   * Remove a listener for a specified event type.\n   *\n   * @param {String} type the event name\n   * @param {Function} listener  a function previously registered for this\n   * type of event through `on`\n   * @return {Boolean} if we could turn it off or not\n   */\n\n\n  Stream.prototype.off = function off(type, listener) {\n    if (!this.listeners[type]) {\n      return false;\n    }\n\n    var index = this.listeners[type].indexOf(listener);\n\n    this.listeners[type].splice(index, 1);\n    return index > -1;\n  };\n\n  /**\n   * Trigger an event of the specified type on this stream. Any additional\n   * arguments to this function are passed as parameters to event listeners.\n   *\n   * @param {String} type the event name\n   */\n\n\n  Stream.prototype.trigger = function trigger(type) {\n    var callbacks = this.listeners[type];\n\n    if (!callbacks) {\n      return;\n    }\n\n    // Slicing the arguments on every invocation of this method\n    // can add a significant amount of overhead. Avoid the\n    // intermediate object creation for the common case of a\n    // single callback argument\n    if (arguments.length === 2) {\n      var length = callbacks.length;\n\n      for (var i = 0; i < length; ++i) {\n        callbacks[i].call(this, arguments[1]);\n      }\n    } else {\n      var args = Array.prototype.slice.call(arguments, 1);\n      var _length = callbacks.length;\n\n      for (var _i = 0; _i < _length; ++_i) {\n        callbacks[_i].apply(this, args);\n      }\n    }\n  };\n\n  /**\n   * Destroys the stream and cleans up.\n   */\n\n\n  Stream.prototype.dispose = function dispose() {\n    this.listeners = {};\n  };\n  /**\n   * Forwards all `data` events on this stream to the destination stream. The\n   * destination stream should provide a method `push` to receive the data\n   * events as they arrive.\n   *\n   * @param {Stream} destination the stream that will receive all `data` events\n   * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n   */\n\n\n  Stream.prototype.pipe = function pipe(destination) {\n    this.on('data', function (data) {\n      destination.push(data);\n    });\n  };\n\n  return Stream;\n}();\n\n/**\n * @file async-stream.js\n */\n/**\n * A wrapper around the Stream class to use setTiemout\n * and run stream \"jobs\" Asynchronously\n *\n * @class AsyncStream\n * @extends Stream\n */\n\nvar AsyncStream = function (_Stream) {\n  inherits(AsyncStream, _Stream);\n\n  function AsyncStream() {\n    classCallCheck(this, AsyncStream);\n\n    var _this = possibleConstructorReturn(this, _Stream.call(this, Stream));\n\n    _this.jobs = [];\n    _this.delay = 1;\n    _this.timeout_ = null;\n    return _this;\n  }\n\n  /**\n   * process an async job\n   *\n   * @private\n   */\n\n\n  AsyncStream.prototype.processJob_ = function processJob_() {\n    this.jobs.shift()();\n    if (this.jobs.length) {\n      this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);\n    } else {\n      this.timeout_ = null;\n    }\n  };\n\n  /**\n   * push a job into the stream\n   *\n   * @param {Function} job the job to push into the stream\n   */\n\n\n  AsyncStream.prototype.push = function push(job) {\n    this.jobs.push(job);\n    if (!this.timeout_) {\n      this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);\n    }\n  };\n\n  return AsyncStream;\n}(Stream);\n\n/**\n * @file decrypter.js\n *\n * An asynchronous implementation of AES-128 CBC decryption with\n * PKCS#7 padding.\n */\n\n/**\n * Convert network-order (big-endian) bytes into their little-endian\n * representation.\n */\nvar ntoh = function ntoh(word) {\n  return word << 24 | (word & 0xff00) << 8 | (word & 0xff0000) >> 8 | word >>> 24;\n};\n\n/**\n * Decrypt bytes using AES-128 with CBC and PKCS#7 padding.\n *\n * @param {Uint8Array} encrypted the encrypted bytes\n * @param {Uint32Array} key the bytes of the decryption key\n * @param {Uint32Array} initVector the initialization vector (IV) to\n * use for the first round of CBC.\n * @return {Uint8Array} the decrypted bytes\n *\n * @see http://en.wikipedia.org/wiki/Advanced_Encryption_Standard\n * @see http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_.28CBC.29\n * @see https://tools.ietf.org/html/rfc2315\n */\nvar decrypt = function decrypt(encrypted, key, initVector) {\n  // word-level access to the encrypted bytes\n  var encrypted32 = new Int32Array(encrypted.buffer, encrypted.byteOffset, encrypted.byteLength >> 2);\n\n  var decipher = new AES(Array.prototype.slice.call(key));\n\n  // byte and word-level access for the decrypted output\n  var decrypted = new Uint8Array(encrypted.byteLength);\n  var decrypted32 = new Int32Array(decrypted.buffer);\n\n  // temporary variables for working with the IV, encrypted, and\n  // decrypted data\n  var init0 = void 0;\n  var init1 = void 0;\n  var init2 = void 0;\n  var init3 = void 0;\n  var encrypted0 = void 0;\n  var encrypted1 = void 0;\n  var encrypted2 = void 0;\n  var encrypted3 = void 0;\n\n  // iteration variable\n  var wordIx = void 0;\n\n  // pull out the words of the IV to ensure we don't modify the\n  // passed-in reference and easier access\n  init0 = initVector[0];\n  init1 = initVector[1];\n  init2 = initVector[2];\n  init3 = initVector[3];\n\n  // decrypt four word sequences, applying cipher-block chaining (CBC)\n  // to each decrypted block\n  for (wordIx = 0; wordIx < encrypted32.length; wordIx += 4) {\n    // convert big-endian (network order) words into little-endian\n    // (javascript order)\n    encrypted0 = ntoh(encrypted32[wordIx]);\n    encrypted1 = ntoh(encrypted32[wordIx + 1]);\n    encrypted2 = ntoh(encrypted32[wordIx + 2]);\n    encrypted3 = ntoh(encrypted32[wordIx + 3]);\n\n    // decrypt the block\n    decipher.decrypt(encrypted0, encrypted1, encrypted2, encrypted3, decrypted32, wordIx);\n\n    // XOR with the IV, and restore network byte-order to obtain the\n    // plaintext\n    decrypted32[wordIx] = ntoh(decrypted32[wordIx] ^ init0);\n    decrypted32[wordIx + 1] = ntoh(decrypted32[wordIx + 1] ^ init1);\n    decrypted32[wordIx + 2] = ntoh(decrypted32[wordIx + 2] ^ init2);\n    decrypted32[wordIx + 3] = ntoh(decrypted32[wordIx + 3] ^ init3);\n\n    // setup the IV for the next round\n    init0 = encrypted0;\n    init1 = encrypted1;\n    init2 = encrypted2;\n    init3 = encrypted3;\n  }\n\n  return decrypted;\n};\n\n/**\n * The `Decrypter` class that manages decryption of AES\n * data through `AsyncStream` objects and the `decrypt`\n * function\n *\n * @param {Uint8Array} encrypted the encrypted bytes\n * @param {Uint32Array} key the bytes of the decryption key\n * @param {Uint32Array} initVector the initialization vector (IV) to\n * @param {Function} done the function to run when done\n * @class Decrypter\n */\n\nvar Decrypter = function () {\n  function Decrypter(encrypted, key, initVector, done) {\n    classCallCheck(this, Decrypter);\n\n    var step = Decrypter.STEP;\n    var encrypted32 = new Int32Array(encrypted.buffer);\n    var decrypted = new Uint8Array(encrypted.byteLength);\n    var i = 0;\n\n    this.asyncStream_ = new AsyncStream();\n\n    // split up the encryption job and do the individual chunks asynchronously\n    this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));\n    for (i = step; i < encrypted32.length; i += step) {\n      initVector = new Uint32Array([ntoh(encrypted32[i - 4]), ntoh(encrypted32[i - 3]), ntoh(encrypted32[i - 2]), ntoh(encrypted32[i - 1])]);\n      this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));\n    }\n    // invoke the done() callback when everything is finished\n    this.asyncStream_.push(function () {\n      // remove pkcs#7 padding from the decrypted bytes\n      done(null, unpad(decrypted));\n    });\n  }\n\n  /**\n   * a getter for step the maximum number of bytes to process at one time\n   *\n   * @return {Number} the value of step 32000\n   */\n\n\n  /**\n   * @private\n   */\n  Decrypter.prototype.decryptChunk_ = function decryptChunk_(encrypted, key, initVector, decrypted) {\n    return function () {\n      var bytes = decrypt(encrypted, key, initVector);\n\n      decrypted.set(bytes, encrypted.byteOffset);\n    };\n  };\n\n  createClass(Decrypter, null, [{\n    key: 'STEP',\n    get: function get$$1() {\n      // 4 * 8000;\n      return 32000;\n    }\n  }]);\n  return Decrypter;\n}();\n\n/**\n * @file index.js\n *\n * Index module to easily import the primary components of AES-128\n * decryption. Like this:\n *\n * ```js\n * import {Decrypter, decrypt, AsyncStream} from 'aes-decrypter';\n * ```\n */\n\nexport { decrypt, Decrypter, AsyncStream };\n","/**\n * @license\n * Video.js 7.2.3 <http://videojs.com/>\n * Copyright Brightcove, Inc. <https://www.brightcove.com/>\n * Available under Apache License Version 2.0\n * <https://github.com/videojs/video.js/blob/master/LICENSE>\n *\n * Includes vtt.js <https://github.com/mozilla/vtt.js>\n * Available under Apache License Version 2.0\n * <https://github.com/mozilla/vtt.js/blob/master/LICENSE>\n */\n\nimport window$1 from 'global/window';\nimport document from 'global/document';\nimport tsml from 'tsml';\nimport xhr from 'xhr';\nimport vtt from 'videojs-vtt.js';\nimport safeParseTuple from 'safe-json-parse/tuple';\nimport URLToolkit from 'url-toolkit';\nimport { Parser } from 'm3u8-parser';\nimport { parse, parseUTCTiming } from 'mpd-parser';\nimport mp4probe from 'mux.js/lib/mp4/probe';\nimport { CaptionParser } from 'mux.js/lib/mp4';\nimport tsInspector from 'mux.js/lib/tools/ts-inspector.js';\nimport { Decrypter, AsyncStream, decrypt } from 'aes-decrypter';\n\nvar version = \"7.2.3\";\n\n/**\n * @file log.js\n * @module log\n */\n\nvar log = void 0;\n\n// This is the private tracking variable for logging level.\nvar level = 'info';\n\n// This is the private tracking variable for the logging history.\nvar history = [];\n\n/**\n * Log messages to the console and history based on the type of message\n *\n * @private\n * @param  {string} type\n *         The name of the console method to use.\n *\n * @param  {Array} args\n *         The arguments to be passed to the matching console method.\n */\nvar logByType = function logByType(type, args) {\n  var lvl = log.levels[level];\n  var lvlRegExp = new RegExp('^(' + lvl + ')$');\n\n  if (type !== 'log') {\n\n    // Add the type to the front of the message when it's not \"log\".\n    args.unshift(type.toUpperCase() + ':');\n  }\n\n  // Add a clone of the args at this point to history.\n  if (history) {\n    history.push([].concat(args));\n  }\n\n  // Add console prefix after adding to history.\n  args.unshift('VIDEOJS:');\n\n  // If there's no console then don't try to output messages, but they will\n  // still be stored in history.\n  if (!window$1.console) {\n    return;\n  }\n\n  // Was setting these once outside of this function, but containing them\n  // in the function makes it easier to test cases where console doesn't exist\n  // when the module is executed.\n  var fn = window$1.console[type];\n\n  if (!fn && type === 'debug') {\n    // Certain browsers don't have support for console.debug. For those, we\n    // should default to the closest comparable log.\n    fn = window$1.console.info || window$1.console.log;\n  }\n\n  // Bail out if there's no console or if this type is not allowed by the\n  // current logging level.\n  if (!fn || !lvl || !lvlRegExp.test(type)) {\n    return;\n  }\n\n  fn[Array.isArray(args) ? 'apply' : 'call'](window$1.console, args);\n};\n\n/**\n * Logs plain debug messages. Similar to `console.log`.\n *\n * @class\n * @param    {Mixed[]} args\n *           One or more messages or objects that should be logged.\n */\nlog = function log() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  logByType('log', args);\n};\n\n/**\n * Enumeration of available logging levels, where the keys are the level names\n * and the values are `|`-separated strings containing logging methods allowed\n * in that logging level. These strings are used to create a regular expression\n * matching the function name being called.\n *\n * Levels provided by video.js are:\n *\n * - `off`: Matches no calls. Any value that can be cast to `false` will have\n *   this effect. The most restrictive.\n * - `all`: Matches only Video.js-provided functions (`debug`, `log`,\n *   `log.warn`, and `log.error`).\n * - `debug`: Matches `log.debug`, `log`, `log.warn`, and `log.error` calls.\n * - `info` (default): Matches `log`, `log.warn`, and `log.error` calls.\n * - `warn`: Matches `log.warn` and `log.error` calls.\n * - `error`: Matches only `log.error` calls.\n *\n * @type {Object}\n */\nlog.levels = {\n  all: 'debug|log|warn|error',\n  off: '',\n  debug: 'debug|log|warn|error',\n  info: 'log|warn|error',\n  warn: 'warn|error',\n  error: 'error',\n  DEFAULT: level\n};\n\n/**\n * Get or set the current logging level. If a string matching a key from\n * {@link log.levels} is provided, acts as a setter. Regardless of argument,\n * returns the current logging level.\n *\n * @param  {string} [lvl]\n *         Pass to set a new logging level.\n *\n * @return {string}\n *         The current logging level.\n */\nlog.level = function (lvl) {\n  if (typeof lvl === 'string') {\n    if (!log.levels.hasOwnProperty(lvl)) {\n      throw new Error('\"' + lvl + '\" in not a valid log level');\n    }\n    level = lvl;\n  }\n  return level;\n};\n\n/**\n * Returns an array containing everything that has been logged to the history.\n *\n * This array is a shallow clone of the internal history record. However, its\n * contents are _not_ cloned; so, mutating objects inside this array will\n * mutate them in history.\n *\n * @return {Array}\n */\nlog.history = function () {\n  return history ? [].concat(history) : [];\n};\n\n/**\n * Clears the internal history tracking, but does not prevent further history\n * tracking.\n */\nlog.history.clear = function () {\n  if (history) {\n    history.length = 0;\n  }\n};\n\n/**\n * Disable history tracking if it is currently enabled.\n */\nlog.history.disable = function () {\n  if (history !== null) {\n    history.length = 0;\n    history = null;\n  }\n};\n\n/**\n * Enable history tracking if it is currently disabled.\n */\nlog.history.enable = function () {\n  if (history === null) {\n    history = [];\n  }\n};\n\n/**\n * Logs error messages. Similar to `console.error`.\n *\n * @param {Mixed[]} args\n *        One or more messages or objects that should be logged as an error\n */\nlog.error = function () {\n  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  return logByType('error', args);\n};\n\n/**\n * Logs warning messages. Similar to `console.warn`.\n *\n * @param {Mixed[]} args\n *        One or more messages or objects that should be logged as a warning.\n */\nlog.warn = function () {\n  for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    args[_key3] = arguments[_key3];\n  }\n\n  return logByType('warn', args);\n};\n\n/**\n * Logs debug messages. Similar to `console.debug`, but may also act as a comparable\n * log if `console.debug` is not available\n *\n * @param {Mixed[]} args\n *        One or more messages or objects that should be logged as debug.\n */\nlog.debug = function () {\n  for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    args[_key4] = arguments[_key4];\n  }\n\n  return logByType('debug', args);\n};\n\nvar log$1 = log;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar taggedTemplateLiteralLoose = function (strings, raw) {\n  strings.raw = raw;\n  return strings;\n};\n\n/**\n * @file obj.js\n * @module obj\n */\n\n/**\n * @callback obj:EachCallback\n *\n * @param {Mixed} value\n *        The current key for the object that is being iterated over.\n *\n * @param {string} key\n *        The current key-value for object that is being iterated over\n */\n\n/**\n * @callback obj:ReduceCallback\n *\n * @param {Mixed} accum\n *        The value that is accumulating over the reduce loop.\n *\n * @param {Mixed} value\n *        The current key for the object that is being iterated over.\n *\n * @param {string} key\n *        The current key-value for object that is being iterated over\n *\n * @return {Mixed}\n *         The new accumulated value.\n */\nvar toString = Object.prototype.toString;\n\n/**\n * Get the keys of an Object\n *\n * @param {Object}\n *        The Object to get the keys from\n *\n * @return {string[]}\n *         An array of the keys from the object. Returns an empty array if the\n *         object passed in was invalid or had no keys.\n *\n * @private\n */\nvar keys = function keys(object) {\n  return isObject(object) ? Object.keys(object) : [];\n};\n\n/**\n * Array-like iteration for objects.\n *\n * @param {Object} object\n *        The object to iterate over\n *\n * @param {obj:EachCallback} fn\n *        The callback function which is called for each key in the object.\n */\nfunction each(object, fn) {\n  keys(object).forEach(function (key) {\n    return fn(object[key], key);\n  });\n}\n\n/**\n * Array-like reduce for objects.\n *\n * @param {Object} object\n *        The Object that you want to reduce.\n *\n * @param {Function} fn\n *         A callback function which is called for each key in the object. It\n *         receives the accumulated value and the per-iteration value and key\n *         as arguments.\n *\n * @param {Mixed} [initial = 0]\n *        Starting value\n *\n * @return {Mixed}\n *         The final accumulated value.\n */\nfunction reduce(object, fn) {\n  var initial = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  return keys(object).reduce(function (accum, key) {\n    return fn(accum, object[key], key);\n  }, initial);\n}\n\n/**\n * Object.assign-style object shallow merge/extend.\n *\n * @param  {Object} target\n * @param  {Object} ...sources\n * @return {Object}\n */\nfunction assign(target) {\n  for (var _len = arguments.length, sources = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    sources[_key - 1] = arguments[_key];\n  }\n\n  if (Object.assign) {\n    return Object.assign.apply(Object, [target].concat(sources));\n  }\n\n  sources.forEach(function (source) {\n    if (!source) {\n      return;\n    }\n\n    each(source, function (value, key) {\n      target[key] = value;\n    });\n  });\n\n  return target;\n}\n\n/**\n * Returns whether a value is an object of any kind - including DOM nodes,\n * arrays, regular expressions, etc. Not functions, though.\n *\n * This avoids the gotcha where using `typeof` on a `null` value\n * results in `'object'`.\n *\n * @param  {Object} value\n * @return {Boolean}\n */\nfunction isObject(value) {\n  return !!value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object';\n}\n\n/**\n * Returns whether an object appears to be a \"plain\" object - that is, a\n * direct instance of `Object`.\n *\n * @param  {Object} value\n * @return {Boolean}\n */\nfunction isPlain(value) {\n  return isObject(value) && toString.call(value) === '[object Object]' && value.constructor === Object;\n}\n\n/**\n * @file computed-style.js\n * @module computed-style\n */\n\n/**\n * A safe getComputedStyle.\n *\n * This is needed because in Firefox, if the player is loaded in an iframe with\n * `display:none`, then `getComputedStyle` returns `null`, so, we do a null-check to\n * make sure  that the player doesn't break in these cases.\n *\n * @param {Element} el\n *        The element you want the computed style of\n *\n * @param {string} prop\n *        The property name you want\n *\n * @see https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n *\n * @static\n * @const\n */\nfunction computedStyle(el, prop) {\n  if (!el || !prop) {\n    return '';\n  }\n\n  if (typeof window$1.getComputedStyle === 'function') {\n    var cs = window$1.getComputedStyle(el);\n\n    return cs ? cs[prop] : '';\n  }\n\n  return '';\n}\n\nvar _templateObject = taggedTemplateLiteralLoose(['Setting attributes in the second argument of createEl()\\n                has been deprecated. Use the third argument instead.\\n                createEl(type, properties, attributes). Attempting to set ', ' to ', '.'], ['Setting attributes in the second argument of createEl()\\n                has been deprecated. Use the third argument instead.\\n                createEl(type, properties, attributes). Attempting to set ', ' to ', '.']);\n\n/**\n * Detect if a value is a string with any non-whitespace characters.\n *\n * @param {string} str\n *        The string to check\n *\n * @return {boolean}\n *         - True if the string is non-blank\n *         - False otherwise\n *\n */\nfunction isNonBlankString(str) {\n  return typeof str === 'string' && /\\S/.test(str);\n}\n\n/**\n * Throws an error if the passed string has whitespace. This is used by\n * class methods to be relatively consistent with the classList API.\n *\n * @param {string} str\n *         The string to check for whitespace.\n *\n * @throws {Error}\n *         Throws an error if there is whitespace in the string.\n *\n */\nfunction throwIfWhitespace(str) {\n  if (/\\s/.test(str)) {\n    throw new Error('class has illegal whitespace characters');\n  }\n}\n\n/**\n * Produce a regular expression for matching a className within an elements className.\n *\n * @param {string} className\n *         The className to generate the RegExp for.\n *\n * @return {RegExp}\n *         The RegExp that will check for a specific `className` in an elements\n *         className.\n */\nfunction classRegExp(className) {\n  return new RegExp('(^|\\\\s)' + className + '($|\\\\s)');\n}\n\n/**\n * Whether the current DOM interface appears to be real.\n *\n * @return {Boolean}\n */\nfunction isReal() {\n  // Both document and window will never be undefined thanks to `global`.\n  return document === window$1.document;\n}\n\n/**\n * Determines, via duck typing, whether or not a value is a DOM element.\n *\n * @param {Mixed} value\n *        The thing to check\n *\n * @return {boolean}\n *         - True if it is a DOM element\n *         - False otherwise\n */\nfunction isEl(value) {\n  return isObject(value) && value.nodeType === 1;\n}\n\n/**\n * Determines if the current DOM is embedded in an iframe.\n *\n * @return {boolean}\n *\n */\nfunction isInFrame() {\n\n  // We need a try/catch here because Safari will throw errors when attempting\n  // to get either `parent` or `self`\n  try {\n    return window$1.parent !== window$1.self;\n  } catch (x) {\n    return true;\n  }\n}\n\n/**\n * Creates functions to query the DOM using a given method.\n *\n * @param {string} method\n *         The method to create the query with.\n *\n * @return {Function}\n *         The query method\n */\nfunction createQuerier(method) {\n  return function (selector, context) {\n    if (!isNonBlankString(selector)) {\n      return document[method](null);\n    }\n    if (isNonBlankString(context)) {\n      context = document.querySelector(context);\n    }\n\n    var ctx = isEl(context) ? context : document;\n\n    return ctx[method] && ctx[method](selector);\n  };\n}\n\n/**\n * Creates an element and applies properties.\n *\n * @param {string} [tagName='div']\n *         Name of tag to be created.\n *\n * @param {Object} [properties={}]\n *         Element properties to be applied.\n *\n * @param {Object} [attributes={}]\n *         Element attributes to be applied.\n *\n * @param {String|Element|TextNode|Array|Function} [content]\n *         Contents for the element (see: {@link dom:normalizeContent})\n *\n * @return {Element}\n *         The element that was created.\n */\nfunction createEl() {\n  var tagName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'div';\n  var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var content = arguments[3];\n\n  var el = document.createElement(tagName);\n\n  Object.getOwnPropertyNames(properties).forEach(function (propName) {\n    var val = properties[propName];\n\n    // See #2176\n    // We originally were accepting both properties and attributes in the\n    // same object, but that doesn't work so well.\n    if (propName.indexOf('aria-') !== -1 || propName === 'role' || propName === 'type') {\n      log$1.warn(tsml(_templateObject, propName, val));\n      el.setAttribute(propName, val);\n\n      // Handle textContent since it's not supported everywhere and we have a\n      // method for it.\n    } else if (propName === 'textContent') {\n      textContent(el, val);\n    } else {\n      el[propName] = val;\n    }\n  });\n\n  Object.getOwnPropertyNames(attributes).forEach(function (attrName) {\n    el.setAttribute(attrName, attributes[attrName]);\n  });\n\n  if (content) {\n    appendContent(el, content);\n  }\n\n  return el;\n}\n\n/**\n * Injects text into an element, replacing any existing contents entirely.\n *\n * @param {Element} el\n *        The element to add text content into\n *\n * @param {string} text\n *        The text content to add.\n *\n * @return {Element}\n *         The element with added text content.\n */\nfunction textContent(el, text) {\n  if (typeof el.textContent === 'undefined') {\n    el.innerText = text;\n  } else {\n    el.textContent = text;\n  }\n  return el;\n}\n\n/**\n * Insert an element as the first child node of another\n *\n * @param {Element} child\n *        Element to insert\n *\n * @param {Element} parent\n *        Element to insert child into\n */\nfunction prependTo(child, parent) {\n  if (parent.firstChild) {\n    parent.insertBefore(child, parent.firstChild);\n  } else {\n    parent.appendChild(child);\n  }\n}\n\n/**\n * Check if an element has a CSS class\n *\n * @param {Element} element\n *        Element to check\n *\n * @param {string} classToCheck\n *        Class name to check for\n *\n * @return {boolean}\n *         - True if the element had the class\n *         - False otherwise.\n *\n * @throws {Error}\n *         Throws an error if `classToCheck` has white space.\n */\nfunction hasClass(element, classToCheck) {\n  throwIfWhitespace(classToCheck);\n  if (element.classList) {\n    return element.classList.contains(classToCheck);\n  }\n  return classRegExp(classToCheck).test(element.className);\n}\n\n/**\n * Add a CSS class name to an element\n *\n * @param {Element} element\n *        Element to add class name to.\n *\n * @param {string} classToAdd\n *        Class name to add.\n *\n * @return {Element}\n *         The dom element with the added class name.\n */\nfunction addClass(element, classToAdd) {\n  if (element.classList) {\n    element.classList.add(classToAdd);\n\n    // Don't need to `throwIfWhitespace` here because `hasElClass` will do it\n    // in the case of classList not being supported.\n  } else if (!hasClass(element, classToAdd)) {\n    element.className = (element.className + ' ' + classToAdd).trim();\n  }\n\n  return element;\n}\n\n/**\n * Remove a CSS class name from an element\n *\n * @param {Element} element\n *        Element to remove a class name from.\n *\n * @param {string} classToRemove\n *        Class name to remove\n *\n * @return {Element}\n *         The dom element with class name removed.\n */\nfunction removeClass(element, classToRemove) {\n  if (element.classList) {\n    element.classList.remove(classToRemove);\n  } else {\n    throwIfWhitespace(classToRemove);\n    element.className = element.className.split(/\\s+/).filter(function (c) {\n      return c !== classToRemove;\n    }).join(' ');\n  }\n\n  return element;\n}\n\n/**\n * The callback definition for toggleElClass.\n *\n * @callback Dom~PredicateCallback\n * @param {Element} element\n *        The DOM element of the Component.\n *\n * @param {string} classToToggle\n *        The `className` that wants to be toggled\n *\n * @return {boolean|undefined}\n *         - If true the `classToToggle` will get added to `element`.\n *         - If false the `classToToggle` will get removed from `element`.\n *         - If undefined this callback will be ignored\n */\n\n/**\n * Adds or removes a CSS class name on an element depending on an optional\n * condition or the presence/absence of the class name.\n *\n * @param {Element} element\n *        The element to toggle a class name on.\n *\n * @param {string} classToToggle\n *        The class that should be toggled\n *\n * @param {boolean|PredicateCallback} [predicate]\n *        See the return value for {@link Dom~PredicateCallback}\n *\n * @return {Element}\n *         The element with a class that has been toggled.\n */\nfunction toggleClass(element, classToToggle, predicate) {\n\n  // This CANNOT use `classList` internally because IE11 does not support the\n  // second parameter to the `classList.toggle()` method! Which is fine because\n  // `classList` will be used by the add/remove functions.\n  var has = hasClass(element, classToToggle);\n\n  if (typeof predicate === 'function') {\n    predicate = predicate(element, classToToggle);\n  }\n\n  if (typeof predicate !== 'boolean') {\n    predicate = !has;\n  }\n\n  // If the necessary class operation matches the current state of the\n  // element, no action is required.\n  if (predicate === has) {\n    return;\n  }\n\n  if (predicate) {\n    addClass(element, classToToggle);\n  } else {\n    removeClass(element, classToToggle);\n  }\n\n  return element;\n}\n\n/**\n * Apply attributes to an HTML element.\n *\n * @param {Element} el\n *        Element to add attributes to.\n *\n * @param {Object} [attributes]\n *        Attributes to be applied.\n */\nfunction setAttributes(el, attributes) {\n  Object.getOwnPropertyNames(attributes).forEach(function (attrName) {\n    var attrValue = attributes[attrName];\n\n    if (attrValue === null || typeof attrValue === 'undefined' || attrValue === false) {\n      el.removeAttribute(attrName);\n    } else {\n      el.setAttribute(attrName, attrValue === true ? '' : attrValue);\n    }\n  });\n}\n\n/**\n * Get an element's attribute values, as defined on the HTML tag\n * Attributes are not the same as properties. They're defined on the tag\n * or with setAttribute (which shouldn't be used with HTML)\n * This will return true or false for boolean attributes.\n *\n * @param {Element} tag\n *        Element from which to get tag attributes.\n *\n * @return {Object}\n *         All attributes of the element.\n */\nfunction getAttributes(tag) {\n  var obj = {};\n\n  // known boolean attributes\n  // we can check for matching boolean properties, but not all browsers\n  // and not all tags know about these attributes, so, we still want to check them manually\n  var knownBooleans = ',' + 'autoplay,controls,playsinline,loop,muted,default,defaultMuted' + ',';\n\n  if (tag && tag.attributes && tag.attributes.length > 0) {\n    var attrs = tag.attributes;\n\n    for (var i = attrs.length - 1; i >= 0; i--) {\n      var attrName = attrs[i].name;\n      var attrVal = attrs[i].value;\n\n      // check for known booleans\n      // the matching element property will return a value for typeof\n      if (typeof tag[attrName] === 'boolean' || knownBooleans.indexOf(',' + attrName + ',') !== -1) {\n        // the value of an included boolean attribute is typically an empty\n        // string ('') which would equal false if we just check for a false value.\n        // we also don't want support bad code like autoplay='false'\n        attrVal = attrVal !== null ? true : false;\n      }\n\n      obj[attrName] = attrVal;\n    }\n  }\n\n  return obj;\n}\n\n/**\n * Get the value of an element's attribute\n *\n * @param {Element} el\n *        A DOM element\n *\n * @param {string} attribute\n *        Attribute to get the value of\n *\n * @return {string}\n *         value of the attribute\n */\nfunction getAttribute(el, attribute) {\n  return el.getAttribute(attribute);\n}\n\n/**\n * Set the value of an element's attribute\n *\n * @param {Element} el\n *        A DOM element\n *\n * @param {string} attribute\n *        Attribute to set\n *\n * @param {string} value\n *        Value to set the attribute to\n */\nfunction setAttribute(el, attribute, value) {\n  el.setAttribute(attribute, value);\n}\n\n/**\n * Remove an element's attribute\n *\n * @param {Element} el\n *        A DOM element\n *\n * @param {string} attribute\n *        Attribute to remove\n */\nfunction removeAttribute(el, attribute) {\n  el.removeAttribute(attribute);\n}\n\n/**\n * Attempt to block the ability to select text while dragging controls\n */\nfunction blockTextSelection() {\n  document.body.focus();\n  document.onselectstart = function () {\n    return false;\n  };\n}\n\n/**\n * Turn off text selection blocking\n */\nfunction unblockTextSelection() {\n  document.onselectstart = function () {\n    return true;\n  };\n}\n\n/**\n * Identical to the native `getBoundingClientRect` function, but ensures that\n * the method is supported at all (it is in all browsers we claim to support)\n * and that the element is in the DOM before continuing.\n *\n * This wrapper function also shims properties which are not provided by some\n * older browsers (namely, IE8).\n *\n * Additionally, some browsers do not support adding properties to a\n * `ClientRect`/`DOMRect` object; so, we shallow-copy it with the standard\n * properties (except `x` and `y` which are not widely supported). This helps\n * avoid implementations where keys are non-enumerable.\n *\n * @param  {Element} el\n *         Element whose `ClientRect` we want to calculate.\n *\n * @return {Object|undefined}\n *         Always returns a plain\n */\nfunction getBoundingClientRect(el) {\n  if (el && el.getBoundingClientRect && el.parentNode) {\n    var rect = el.getBoundingClientRect();\n    var result = {};\n\n    ['bottom', 'height', 'left', 'right', 'top', 'width'].forEach(function (k) {\n      if (rect[k] !== undefined) {\n        result[k] = rect[k];\n      }\n    });\n\n    if (!result.height) {\n      result.height = parseFloat(computedStyle(el, 'height'));\n    }\n\n    if (!result.width) {\n      result.width = parseFloat(computedStyle(el, 'width'));\n    }\n\n    return result;\n  }\n}\n\n/**\n * The postion of a DOM element on the page.\n *\n * @typedef {Object} module:dom~Position\n *\n * @property {number} left\n *           Pixels to the left\n *\n * @property {number} top\n *           Pixels on top\n */\n\n/**\n * Offset Left.\n * getBoundingClientRect technique from\n * John Resig\n *\n * @see http://ejohn.org/blog/getboundingclientrect-is-awesome/\n *\n * @param {Element} el\n *        Element from which to get offset\n *\n * @return {module:dom~Position}\n *         The position of the element that was passed in.\n */\nfunction findPosition(el) {\n  var box = void 0;\n\n  if (el.getBoundingClientRect && el.parentNode) {\n    box = el.getBoundingClientRect();\n  }\n\n  if (!box) {\n    return {\n      left: 0,\n      top: 0\n    };\n  }\n\n  var docEl = document.documentElement;\n  var body = document.body;\n\n  var clientLeft = docEl.clientLeft || body.clientLeft || 0;\n  var scrollLeft = window$1.pageXOffset || body.scrollLeft;\n  var left = box.left + scrollLeft - clientLeft;\n\n  var clientTop = docEl.clientTop || body.clientTop || 0;\n  var scrollTop = window$1.pageYOffset || body.scrollTop;\n  var top = box.top + scrollTop - clientTop;\n\n  // Android sometimes returns slightly off decimal values, so need to round\n  return {\n    left: Math.round(left),\n    top: Math.round(top)\n  };\n}\n\n/**\n * x and y coordinates for a dom element or mouse pointer\n *\n * @typedef {Object} Dom~Coordinates\n *\n * @property {number} x\n *           x coordinate in pixels\n *\n * @property {number} y\n *           y coordinate in pixels\n */\n\n/**\n * Get pointer position in element\n * Returns an object with x and y coordinates.\n * The base on the coordinates are the bottom left of the element.\n *\n * @param {Element} el\n *        Element on which to get the pointer position on\n *\n * @param {EventTarget~Event} event\n *        Event object\n *\n * @return {Dom~Coordinates}\n *         A Coordinates object corresponding to the mouse position.\n *\n */\nfunction getPointerPosition(el, event) {\n  var position = {};\n  var box = findPosition(el);\n  var boxW = el.offsetWidth;\n  var boxH = el.offsetHeight;\n\n  var boxY = box.top;\n  var boxX = box.left;\n  var pageY = event.pageY;\n  var pageX = event.pageX;\n\n  if (event.changedTouches) {\n    pageX = event.changedTouches[0].pageX;\n    pageY = event.changedTouches[0].pageY;\n  }\n\n  position.y = Math.max(0, Math.min(1, (boxY - pageY + boxH) / boxH));\n  position.x = Math.max(0, Math.min(1, (pageX - boxX) / boxW));\n\n  return position;\n}\n\n/**\n * Determines, via duck typing, whether or not a value is a text node.\n *\n * @param {Mixed} value\n *        Check if this value is a text node.\n *\n * @return {boolean}\n *         - True if it is a text node\n *         - False otherwise\n */\nfunction isTextNode(value) {\n  return isObject(value) && value.nodeType === 3;\n}\n\n/**\n * Empties the contents of an element.\n *\n * @param {Element} el\n *        The element to empty children from\n *\n * @return {Element}\n *         The element with no children\n */\nfunction emptyEl(el) {\n  while (el.firstChild) {\n    el.removeChild(el.firstChild);\n  }\n  return el;\n}\n\n/**\n * Normalizes content for eventual insertion into the DOM.\n *\n * This allows a wide range of content definition methods, but protects\n * from falling into the trap of simply writing to `innerHTML`, which is\n * an XSS concern.\n *\n * The content for an element can be passed in multiple types and\n * combinations, whose behavior is as follows:\n *\n * @param {String|Element|TextNode|Array|Function} content\n *        - String: Normalized into a text node.\n *        - Element/TextNode: Passed through.\n *        - Array: A one-dimensional array of strings, elements, nodes, or functions\n *          (which return single strings, elements, or nodes).\n *        - Function: If the sole argument, is expected to produce a string, element,\n *          node, or array as defined above.\n *\n * @return {Array}\n *         All of the content that was passed in normalized.\n */\nfunction normalizeContent(content) {\n\n  // First, invoke content if it is a function. If it produces an array,\n  // that needs to happen before normalization.\n  if (typeof content === 'function') {\n    content = content();\n  }\n\n  // Next up, normalize to an array, so one or many items can be normalized,\n  // filtered, and returned.\n  return (Array.isArray(content) ? content : [content]).map(function (value) {\n\n    // First, invoke value if it is a function to produce a new value,\n    // which will be subsequently normalized to a Node of some kind.\n    if (typeof value === 'function') {\n      value = value();\n    }\n\n    if (isEl(value) || isTextNode(value)) {\n      return value;\n    }\n\n    if (typeof value === 'string' && /\\S/.test(value)) {\n      return document.createTextNode(value);\n    }\n  }).filter(function (value) {\n    return value;\n  });\n}\n\n/**\n * Normalizes and appends content to an element.\n *\n * @param {Element} el\n *        Element to append normalized content to.\n *\n *\n * @param {String|Element|TextNode|Array|Function} content\n *        See the `content` argument of {@link dom:normalizeContent}\n *\n * @return {Element}\n *         The element with appended normalized content.\n */\nfunction appendContent(el, content) {\n  normalizeContent(content).forEach(function (node) {\n    return el.appendChild(node);\n  });\n  return el;\n}\n\n/**\n * Normalizes and inserts content into an element; this is identical to\n * `appendContent()`, except it empties the element first.\n *\n * @param {Element} el\n *        Element to insert normalized content into.\n *\n * @param {String|Element|TextNode|Array|Function} content\n *        See the `content` argument of {@link dom:normalizeContent}\n *\n * @return {Element}\n *         The element with inserted normalized content.\n *\n */\nfunction insertContent(el, content) {\n  return appendContent(emptyEl(el), content);\n}\n\n/**\n * Check if event was a single left click\n *\n * @param {EventTarget~Event} event\n *        Event object\n *\n * @return {boolean}\n *         - True if a left click\n *         - False if not a left click\n */\nfunction isSingleLeftClick(event) {\n  // Note: if you create something draggable, be sure to\n  // call it on both `mousedown` and `mousemove` event,\n  // otherwise `mousedown` should be enough for a button\n\n  if (event.button === undefined && event.buttons === undefined) {\n    // Why do we need `buttons` ?\n    // Because, middle mouse sometimes have this:\n    // e.button === 0 and e.buttons === 4\n    // Furthermore, we want to prevent combination click, something like\n    // HOLD middlemouse then left click, that would be\n    // e.button === 0, e.buttons === 5\n    // just `button` is not gonna work\n\n    // Alright, then what this block does ?\n    // this is for chrome `simulate mobile devices`\n    // I want to support this as well\n\n    return true;\n  }\n\n  if (event.button === 0 && event.buttons === undefined) {\n    // Touch screen, sometimes on some specific device, `buttons`\n    // doesn't have anything (safari on ios, blackberry...)\n\n    return true;\n  }\n\n  if (event.button !== 0 || event.buttons !== 1) {\n    // This is the reason we have those if else block above\n    // if any special case we can catch and let it slide\n    // we do it above, when get to here, this definitely\n    // is-not-left-click\n\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Finds a single DOM element matching `selector` within the optional\n * `context` of another DOM element (defaulting to `document`).\n *\n * @param {string} selector\n *        A valid CSS selector, which will be passed to `querySelector`.\n *\n * @param {Element|String} [context=document]\n *        A DOM element within which to query. Can also be a selector\n *        string in which case the first matching element will be used\n *        as context. If missing (or no element matches selector), falls\n *        back to `document`.\n *\n * @return {Element|null}\n *         The element that was found or null.\n */\nvar $ = createQuerier('querySelector');\n\n/**\n * Finds a all DOM elements matching `selector` within the optional\n * `context` of another DOM element (defaulting to `document`).\n *\n * @param {string} selector\n *           A valid CSS selector, which will be passed to `querySelectorAll`.\n *\n * @param {Element|String} [context=document]\n *           A DOM element within which to query. Can also be a selector\n *           string in which case the first matching element will be used\n *           as context. If missing (or no element matches selector), falls\n *           back to `document`.\n *\n * @return {NodeList}\n *         A element list of elements that were found. Will be empty if none were found.\n *\n */\nvar $$ = createQuerier('querySelectorAll');\n\nvar Dom = /*#__PURE__*/Object.freeze({\n  isReal: isReal,\n  isEl: isEl,\n  isInFrame: isInFrame,\n  createEl: createEl,\n  textContent: textContent,\n  prependTo: prependTo,\n  hasClass: hasClass,\n  addClass: addClass,\n  removeClass: removeClass,\n  toggleClass: toggleClass,\n  setAttributes: setAttributes,\n  getAttributes: getAttributes,\n  getAttribute: getAttribute,\n  setAttribute: setAttribute,\n  removeAttribute: removeAttribute,\n  blockTextSelection: blockTextSelection,\n  unblockTextSelection: unblockTextSelection,\n  getBoundingClientRect: getBoundingClientRect,\n  findPosition: findPosition,\n  getPointerPosition: getPointerPosition,\n  isTextNode: isTextNode,\n  emptyEl: emptyEl,\n  normalizeContent: normalizeContent,\n  appendContent: appendContent,\n  insertContent: insertContent,\n  isSingleLeftClick: isSingleLeftClick,\n  $: $,\n  $$: $$\n});\n\n/**\n * @file guid.js\n * @module guid\n */\n\n/**\n * Unique ID for an element or function\n * @type {Number}\n */\nvar _guid = 1;\n\n/**\n * Get a unique auto-incrementing ID by number that has not been returned before.\n *\n * @return {number}\n *         A new unique ID.\n */\nfunction newGUID() {\n  return _guid++;\n}\n\n/**\n * @file dom-data.js\n * @module dom-data\n */\n\n/**\n * Element Data Store.\n *\n * Allows for binding data to an element without putting it directly on the\n * element. Ex. Event listeners are stored here.\n * (also from jsninja.com, slightly modified and updated for closure compiler)\n *\n * @type {Object}\n * @private\n */\nvar elData = {};\n\n/*\n * Unique attribute name to store an element's guid in\n *\n * @type {String}\n * @constant\n * @private\n */\nvar elIdAttr = 'vdata' + new Date().getTime();\n\n/**\n * Returns the cache object where data for an element is stored\n *\n * @param {Element} el\n *        Element to store data for.\n *\n * @return {Object}\n *         The cache object for that el that was passed in.\n */\nfunction getData(el) {\n  var id = el[elIdAttr];\n\n  if (!id) {\n    id = el[elIdAttr] = newGUID();\n  }\n\n  if (!elData[id]) {\n    elData[id] = {};\n  }\n\n  return elData[id];\n}\n\n/**\n * Returns whether or not an element has cached data\n *\n * @param {Element} el\n *        Check if this element has cached data.\n *\n * @return {boolean}\n *         - True if the DOM element has cached data.\n *         - False otherwise.\n */\nfunction hasData(el) {\n  var id = el[elIdAttr];\n\n  if (!id) {\n    return false;\n  }\n\n  return !!Object.getOwnPropertyNames(elData[id]).length;\n}\n\n/**\n * Delete data for the element from the cache and the guid attr from getElementById\n *\n * @param {Element} el\n *        Remove cached data for this element.\n */\nfunction removeData(el) {\n  var id = el[elIdAttr];\n\n  if (!id) {\n    return;\n  }\n\n  // Remove all stored data\n  delete elData[id];\n\n  // Remove the elIdAttr property from the DOM node\n  try {\n    delete el[elIdAttr];\n  } catch (e) {\n    if (el.removeAttribute) {\n      el.removeAttribute(elIdAttr);\n    } else {\n      // IE doesn't appear to support removeAttribute on the document element\n      el[elIdAttr] = null;\n    }\n  }\n}\n\n/**\n * @file events.js. An Event System (John Resig - Secrets of a JS Ninja http://jsninja.com/)\n * (Original book version wasn't completely usable, so fixed some things and made Closure Compiler compatible)\n * This should work very similarly to jQuery's events, however it's based off the book version which isn't as\n * robust as jquery's, so there's probably some differences.\n *\n * @module events\n */\n\n/**\n * Clean up the listener cache and dispatchers\n *\n * @param {Element|Object} elem\n *        Element to clean up\n *\n * @param {string} type\n *        Type of event to clean up\n */\nfunction _cleanUpEvents(elem, type) {\n  var data = getData(elem);\n\n  // Remove the events of a particular type if there are none left\n  if (data.handlers[type].length === 0) {\n    delete data.handlers[type];\n    // data.handlers[type] = null;\n    // Setting to null was causing an error with data.handlers\n\n    // Remove the meta-handler from the element\n    if (elem.removeEventListener) {\n      elem.removeEventListener(type, data.dispatcher, false);\n    } else if (elem.detachEvent) {\n      elem.detachEvent('on' + type, data.dispatcher);\n    }\n  }\n\n  // Remove the events object if there are no types left\n  if (Object.getOwnPropertyNames(data.handlers).length <= 0) {\n    delete data.handlers;\n    delete data.dispatcher;\n    delete data.disabled;\n  }\n\n  // Finally remove the element data if there is no data left\n  if (Object.getOwnPropertyNames(data).length === 0) {\n    removeData(elem);\n  }\n}\n\n/**\n * Loops through an array of event types and calls the requested method for each type.\n *\n * @param {Function} fn\n *        The event method we want to use.\n *\n * @param {Element|Object} elem\n *        Element or object to bind listeners to\n *\n * @param {string} type\n *        Type of event to bind to.\n *\n * @param {EventTarget~EventListener} callback\n *        Event listener.\n */\nfunction _handleMultipleEvents(fn, elem, types, callback) {\n  types.forEach(function (type) {\n    // Call the event method for each one of the types\n    fn(elem, type, callback);\n  });\n}\n\n/**\n * Fix a native event to have standard property values\n *\n * @param {Object} event\n *        Event object to fix.\n *\n * @return {Object}\n *         Fixed event object.\n */\nfunction fixEvent(event) {\n\n  function returnTrue() {\n    return true;\n  }\n\n  function returnFalse() {\n    return false;\n  }\n\n  // Test if fixing up is needed\n  // Used to check if !event.stopPropagation instead of isPropagationStopped\n  // But native events return true for stopPropagation, but don't have\n  // other expected methods like isPropagationStopped. Seems to be a problem\n  // with the Javascript Ninja code. So we're just overriding all events now.\n  if (!event || !event.isPropagationStopped) {\n    var old = event || window$1.event;\n\n    event = {};\n    // Clone the old object so that we can modify the values event = {};\n    // IE8 Doesn't like when you mess with native event properties\n    // Firefox returns false for event.hasOwnProperty('type') and other props\n    //  which makes copying more difficult.\n    // TODO: Probably best to create a whitelist of event props\n    for (var key in old) {\n      // Safari 6.0.3 warns you if you try to copy deprecated layerX/Y\n      // Chrome warns you if you try to copy deprecated keyboardEvent.keyLocation\n      // and webkitMovementX/Y\n      if (key !== 'layerX' && key !== 'layerY' && key !== 'keyLocation' && key !== 'webkitMovementX' && key !== 'webkitMovementY') {\n        // Chrome 32+ warns if you try to copy deprecated returnValue, but\n        // we still want to if preventDefault isn't supported (IE8).\n        if (!(key === 'returnValue' && old.preventDefault)) {\n          event[key] = old[key];\n        }\n      }\n    }\n\n    // The event occurred on this element\n    if (!event.target) {\n      event.target = event.srcElement || document;\n    }\n\n    // Handle which other element the event is related to\n    if (!event.relatedTarget) {\n      event.relatedTarget = event.fromElement === event.target ? event.toElement : event.fromElement;\n    }\n\n    // Stop the default browser action\n    event.preventDefault = function () {\n      if (old.preventDefault) {\n        old.preventDefault();\n      }\n      event.returnValue = false;\n      old.returnValue = false;\n      event.defaultPrevented = true;\n    };\n\n    event.defaultPrevented = false;\n\n    // Stop the event from bubbling\n    event.stopPropagation = function () {\n      if (old.stopPropagation) {\n        old.stopPropagation();\n      }\n      event.cancelBubble = true;\n      old.cancelBubble = true;\n      event.isPropagationStopped = returnTrue;\n    };\n\n    event.isPropagationStopped = returnFalse;\n\n    // Stop the event from bubbling and executing other handlers\n    event.stopImmediatePropagation = function () {\n      if (old.stopImmediatePropagation) {\n        old.stopImmediatePropagation();\n      }\n      event.isImmediatePropagationStopped = returnTrue;\n      event.stopPropagation();\n    };\n\n    event.isImmediatePropagationStopped = returnFalse;\n\n    // Handle mouse position\n    if (event.clientX !== null && event.clientX !== undefined) {\n      var doc = document.documentElement;\n      var body = document.body;\n\n      event.pageX = event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);\n      event.pageY = event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);\n    }\n\n    // Handle key presses\n    event.which = event.charCode || event.keyCode;\n\n    // Fix button for mouse clicks:\n    // 0 == left; 1 == middle; 2 == right\n    if (event.button !== null && event.button !== undefined) {\n\n      // The following is disabled because it does not pass videojs-standard\n      // and... yikes.\n      /* eslint-disable */\n      event.button = event.button & 1 ? 0 : event.button & 4 ? 1 : event.button & 2 ? 2 : 0;\n      /* eslint-enable */\n    }\n  }\n\n  // Returns fixed-up instance\n  return event;\n}\n\n/**\n * Whether passive event listeners are supported\n */\nvar _supportsPassive = false;\n\n(function () {\n  try {\n    var opts = Object.defineProperty({}, 'passive', {\n      get: function get() {\n        _supportsPassive = true;\n      }\n    });\n\n    window$1.addEventListener('test', null, opts);\n    window$1.removeEventListener('test', null, opts);\n  } catch (e) {\n    // disregard\n  }\n})();\n\n/**\n * Touch events Chrome expects to be passive\n */\nvar passiveEvents = ['touchstart', 'touchmove'];\n\n/**\n * Add an event listener to element\n * It stores the handler function in a separate cache object\n * and adds a generic handler to the element's event,\n * along with a unique id (guid) to the element.\n *\n * @param {Element|Object} elem\n *        Element or object to bind listeners to\n *\n * @param {string|string[]} type\n *        Type of event to bind to.\n *\n * @param {EventTarget~EventListener} fn\n *        Event listener.\n */\nfunction on(elem, type, fn) {\n  if (Array.isArray(type)) {\n    return _handleMultipleEvents(on, elem, type, fn);\n  }\n\n  var data = getData(elem);\n\n  // We need a place to store all our handler data\n  if (!data.handlers) {\n    data.handlers = {};\n  }\n\n  if (!data.handlers[type]) {\n    data.handlers[type] = [];\n  }\n\n  if (!fn.guid) {\n    fn.guid = newGUID();\n  }\n\n  data.handlers[type].push(fn);\n\n  if (!data.dispatcher) {\n    data.disabled = false;\n\n    data.dispatcher = function (event, hash) {\n\n      if (data.disabled) {\n        return;\n      }\n\n      event = fixEvent(event);\n\n      var handlers = data.handlers[event.type];\n\n      if (handlers) {\n        // Copy handlers so if handlers are added/removed during the process it doesn't throw everything off.\n        var handlersCopy = handlers.slice(0);\n\n        for (var m = 0, n = handlersCopy.length; m < n; m++) {\n          if (event.isImmediatePropagationStopped()) {\n            break;\n          } else {\n            try {\n              handlersCopy[m].call(elem, event, hash);\n            } catch (e) {\n              log$1.error(e);\n            }\n          }\n        }\n      }\n    };\n  }\n\n  if (data.handlers[type].length === 1) {\n    if (elem.addEventListener) {\n      var options = false;\n\n      if (_supportsPassive && passiveEvents.indexOf(type) > -1) {\n        options = { passive: true };\n      }\n      elem.addEventListener(type, data.dispatcher, options);\n    } else if (elem.attachEvent) {\n      elem.attachEvent('on' + type, data.dispatcher);\n    }\n  }\n}\n\n/**\n * Removes event listeners from an element\n *\n * @param {Element|Object} elem\n *        Object to remove listeners from.\n *\n * @param {string|string[]} [type]\n *        Type of listener to remove. Don't include to remove all events from element.\n *\n * @param {EventTarget~EventListener} [fn]\n *        Specific listener to remove. Don't include to remove listeners for an event\n *        type.\n */\nfunction off(elem, type, fn) {\n  // Don't want to add a cache object through getElData if not needed\n  if (!hasData(elem)) {\n    return;\n  }\n\n  var data = getData(elem);\n\n  // If no events exist, nothing to unbind\n  if (!data.handlers) {\n    return;\n  }\n\n  if (Array.isArray(type)) {\n    return _handleMultipleEvents(off, elem, type, fn);\n  }\n\n  // Utility function\n  var removeType = function removeType(el, t) {\n    data.handlers[t] = [];\n    _cleanUpEvents(el, t);\n  };\n\n  // Are we removing all bound events?\n  if (type === undefined) {\n    for (var t in data.handlers) {\n      if (Object.prototype.hasOwnProperty.call(data.handlers || {}, t)) {\n        removeType(elem, t);\n      }\n    }\n    return;\n  }\n\n  var handlers = data.handlers[type];\n\n  // If no handlers exist, nothing to unbind\n  if (!handlers) {\n    return;\n  }\n\n  // If no listener was provided, remove all listeners for type\n  if (!fn) {\n    removeType(elem, type);\n    return;\n  }\n\n  // We're only removing a single handler\n  if (fn.guid) {\n    for (var n = 0; n < handlers.length; n++) {\n      if (handlers[n].guid === fn.guid) {\n        handlers.splice(n--, 1);\n      }\n    }\n  }\n\n  _cleanUpEvents(elem, type);\n}\n\n/**\n * Trigger an event for an element\n *\n * @param {Element|Object} elem\n *        Element to trigger an event on\n *\n * @param {EventTarget~Event|string} event\n *        A string (the type) or an event object with a type attribute\n *\n * @param {Object} [hash]\n *        data hash to pass along with the event\n *\n * @return {boolean|undefined}\n *         - Returns the opposite of `defaultPrevented` if default was prevented\n *         - Otherwise returns undefined\n */\nfunction trigger(elem, event, hash) {\n  // Fetches element data and a reference to the parent (for bubbling).\n  // Don't want to add a data object to cache for every parent,\n  // so checking hasElData first.\n  var elemData = hasData(elem) ? getData(elem) : {};\n  var parent = elem.parentNode || elem.ownerDocument;\n  // type = event.type || event,\n  // handler;\n\n  // If an event name was passed as a string, creates an event out of it\n  if (typeof event === 'string') {\n    event = { type: event, target: elem };\n  } else if (!event.target) {\n    event.target = elem;\n  }\n\n  // Normalizes the event properties.\n  event = fixEvent(event);\n\n  // If the passed element has a dispatcher, executes the established handlers.\n  if (elemData.dispatcher) {\n    elemData.dispatcher.call(elem, event, hash);\n  }\n\n  // Unless explicitly stopped or the event does not bubble (e.g. media events)\n  // recursively calls this function to bubble the event up the DOM.\n  if (parent && !event.isPropagationStopped() && event.bubbles === true) {\n    trigger.call(null, parent, event, hash);\n\n    // If at the top of the DOM, triggers the default action unless disabled.\n  } else if (!parent && !event.defaultPrevented) {\n    var targetData = getData(event.target);\n\n    // Checks if the target has a default action for this event.\n    if (event.target[event.type]) {\n      // Temporarily disables event dispatching on the target as we have already executed the handler.\n      targetData.disabled = true;\n      // Executes the default action.\n      if (typeof event.target[event.type] === 'function') {\n        event.target[event.type]();\n      }\n      // Re-enables event dispatching.\n      targetData.disabled = false;\n    }\n  }\n\n  // Inform the triggerer if the default was prevented by returning false\n  return !event.defaultPrevented;\n}\n\n/**\n * Trigger a listener only once for an event\n *\n * @param {Element|Object} elem\n *        Element or object to bind to.\n *\n * @param {string|string[]} type\n *        Name/type of event\n *\n * @param {Event~EventListener} fn\n *        Event Listener function\n */\nfunction one(elem, type, fn) {\n  if (Array.isArray(type)) {\n    return _handleMultipleEvents(one, elem, type, fn);\n  }\n  var func = function func() {\n    off(elem, type, func);\n    fn.apply(this, arguments);\n  };\n\n  // copy the guid to the new function so it can removed using the original function's ID\n  func.guid = fn.guid = fn.guid || newGUID();\n  on(elem, type, func);\n}\n\nvar Events = /*#__PURE__*/Object.freeze({\n  fixEvent: fixEvent,\n  on: on,\n  off: off,\n  trigger: trigger,\n  one: one\n});\n\n/**\n * @file setup.js - Functions for setting up a player without\n * user interaction based on the data-setup `attribute` of the video tag.\n *\n * @module setup\n */\n\nvar _windowLoaded = false;\nvar videojs = void 0;\n\n/**\n * Set up any tags that have a data-setup `attribute` when the player is started.\n */\nvar autoSetup = function autoSetup() {\n\n  // Protect against breakage in non-browser environments and check global autoSetup option.\n  if (!isReal() || videojs.options.autoSetup === false) {\n    return;\n  }\n\n  var vids = Array.prototype.slice.call(document.getElementsByTagName('video'));\n  var audios = Array.prototype.slice.call(document.getElementsByTagName('audio'));\n  var divs = Array.prototype.slice.call(document.getElementsByTagName('video-js'));\n  var mediaEls = vids.concat(audios, divs);\n\n  // Check if any media elements exist\n  if (mediaEls && mediaEls.length > 0) {\n\n    for (var i = 0, e = mediaEls.length; i < e; i++) {\n      var mediaEl = mediaEls[i];\n\n      // Check if element exists, has getAttribute func.\n      if (mediaEl && mediaEl.getAttribute) {\n\n        // Make sure this player hasn't already been set up.\n        if (mediaEl.player === undefined) {\n          var options = mediaEl.getAttribute('data-setup');\n\n          // Check if data-setup attr exists.\n          // We only auto-setup if they've added the data-setup attr.\n          if (options !== null) {\n            // Create new video.js instance.\n            videojs(mediaEl);\n          }\n        }\n\n        // If getAttribute isn't defined, we need to wait for the DOM.\n      } else {\n        autoSetupTimeout(1);\n        break;\n      }\n    }\n\n    // No videos were found, so keep looping unless page is finished loading.\n  } else if (!_windowLoaded) {\n    autoSetupTimeout(1);\n  }\n};\n\n/**\n * Wait until the page is loaded before running autoSetup. This will be called in\n * autoSetup if `hasLoaded` returns false.\n *\n * @param {number} wait\n *        How long to wait in ms\n *\n * @param {module:videojs} [vjs]\n *        The videojs library function\n */\nfunction autoSetupTimeout(wait, vjs) {\n  if (vjs) {\n    videojs = vjs;\n  }\n\n  window$1.setTimeout(autoSetup, wait);\n}\n\nif (isReal() && document.readyState === 'complete') {\n  _windowLoaded = true;\n} else {\n  /**\n   * Listen for the load event on window, and set _windowLoaded to true.\n   *\n   * @listens load\n   */\n  one(window$1, 'load', function () {\n    _windowLoaded = true;\n  });\n}\n\n/**\n * @file stylesheet.js\n * @module stylesheet\n */\n\n/**\n * Create a DOM syle element given a className for it.\n *\n * @param {string} className\n *        The className to add to the created style element.\n *\n * @return {Element}\n *         The element that was created.\n */\nvar createStyleElement = function createStyleElement(className) {\n  var style = document.createElement('style');\n\n  style.className = className;\n\n  return style;\n};\n\n/**\n * Add text to a DOM element.\n *\n * @param {Element} el\n *        The Element to add text content to.\n *\n * @param {string} content\n *        The text to add to the element.\n */\nvar setTextContent = function setTextContent(el, content) {\n  if (el.styleSheet) {\n    el.styleSheet.cssText = content;\n  } else {\n    el.textContent = content;\n  }\n};\n\n/**\n * @file fn.js\n * @module fn\n */\n\n/**\n * Bind (a.k.a proxy or Context). A simple method for changing the context of a function\n * It also stores a unique id on the function so it can be easily removed from events.\n *\n * @param {Mixed} context\n *        The object to bind as scope.\n *\n * @param {Function} fn\n *        The function to be bound to a scope.\n *\n * @param {number} [uid]\n *        An optional unique ID for the function to be set\n *\n * @return {Function}\n *         The new function that will be bound into the context given\n */\nvar bind = function bind(context, fn, uid) {\n  // Make sure the function has a unique ID\n  if (!fn.guid) {\n    fn.guid = newGUID();\n  }\n\n  // Create the new function that changes the context\n  var bound = function bound() {\n    return fn.apply(context, arguments);\n  };\n\n  // Allow for the ability to individualize this function\n  // Needed in the case where multiple objects might share the same prototype\n  // IF both items add an event listener with the same function, then you try to remove just one\n  // it will remove both because they both have the same guid.\n  // when using this, you need to use the bind method when you remove the listener as well.\n  // currently used in text tracks\n  bound.guid = uid ? uid + '_' + fn.guid : fn.guid;\n\n  return bound;\n};\n\n/**\n * Wraps the given function, `fn`, with a new function that only invokes `fn`\n * at most once per every `wait` milliseconds.\n *\n * @param  {Function} fn\n *         The function to be throttled.\n *\n * @param  {Number}   wait\n *         The number of milliseconds by which to throttle.\n *\n * @return {Function}\n */\nvar throttle = function throttle(fn, wait) {\n  var last = Date.now();\n\n  var throttled = function throttled() {\n    var now = Date.now();\n\n    if (now - last >= wait) {\n      fn.apply(undefined, arguments);\n      last = now;\n    }\n  };\n\n  return throttled;\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked.\n *\n * Inspired by lodash and underscore implementations.\n *\n * @param  {Function} func\n *         The function to wrap with debounce behavior.\n *\n * @param  {number} wait\n *         The number of milliseconds to wait after the last invocation.\n *\n * @param  {boolean} [immediate]\n *         Whether or not to invoke the function immediately upon creation.\n *\n * @param  {Object} [context=window]\n *         The \"context\" in which the debounced function should debounce. For\n *         example, if this function should be tied to a Video.js player,\n *         the player can be passed here. Alternatively, defaults to the\n *         global `window` object.\n *\n * @return {Function}\n *         A debounced function.\n */\nvar debounce = function debounce(func, wait, immediate) {\n  var context = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : window$1;\n\n  var timeout = void 0;\n\n  var cancel = function cancel() {\n    context.clearTimeout(timeout);\n    timeout = null;\n  };\n\n  /* eslint-disable consistent-this */\n  var debounced = function debounced() {\n    var self = this;\n    var args = arguments;\n\n    var _later = function later() {\n      timeout = null;\n      _later = null;\n      if (!immediate) {\n        func.apply(self, args);\n      }\n    };\n\n    if (!timeout && immediate) {\n      func.apply(self, args);\n    }\n\n    context.clearTimeout(timeout);\n    timeout = context.setTimeout(_later, wait);\n  };\n  /* eslint-enable consistent-this */\n\n  debounced.cancel = cancel;\n\n  return debounced;\n};\n\n/**\n * @file src/js/event-target.js\n */\n\n/**\n * `EventTarget` is a class that can have the same API as the DOM `EventTarget`. It\n * adds shorthand functions that wrap around lengthy functions. For example:\n * the `on` function is a wrapper around `addEventListener`.\n *\n * @see [EventTarget Spec]{@link https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget}\n * @class EventTarget\n */\nvar EventTarget = function EventTarget() {};\n\n/**\n * A Custom DOM event.\n *\n * @typedef {Object} EventTarget~Event\n * @see [Properties]{@link https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent}\n */\n\n/**\n * All event listeners should follow the following format.\n *\n * @callback EventTarget~EventListener\n * @this {EventTarget}\n *\n * @param {EventTarget~Event} event\n *        the event that triggered this function\n *\n * @param {Object} [hash]\n *        hash of data sent during the event\n */\n\n/**\n * An object containing event names as keys and booleans as values.\n *\n * > NOTE: If an event name is set to a true value here {@link EventTarget#trigger}\n *         will have extra functionality. See that function for more information.\n *\n * @property EventTarget.prototype.allowedEvents_\n * @private\n */\nEventTarget.prototype.allowedEvents_ = {};\n\n/**\n * Adds an `event listener` to an instance of an `EventTarget`. An `event listener` is a\n * function that will get called when an event with a certain name gets triggered.\n *\n * @param {string|string[]} type\n *        An event name or an array of event names.\n *\n * @param {EventTarget~EventListener} fn\n *        The function to call with `EventTarget`s\n */\nEventTarget.prototype.on = function (type, fn) {\n  // Remove the addEventListener alias before calling Events.on\n  // so we don't get into an infinite type loop\n  var ael = this.addEventListener;\n\n  this.addEventListener = function () {};\n  on(this, type, fn);\n  this.addEventListener = ael;\n};\n\n/**\n * An alias of {@link EventTarget#on}. Allows `EventTarget` to mimic\n * the standard DOM API.\n *\n * @function\n * @see {@link EventTarget#on}\n */\nEventTarget.prototype.addEventListener = EventTarget.prototype.on;\n\n/**\n * Removes an `event listener` for a specific event from an instance of `EventTarget`.\n * This makes it so that the `event listener` will no longer get called when the\n * named event happens.\n *\n * @param {string|string[]} type\n *        An event name or an array of event names.\n *\n * @param {EventTarget~EventListener} fn\n *        The function to remove.\n */\nEventTarget.prototype.off = function (type, fn) {\n  off(this, type, fn);\n};\n\n/**\n * An alias of {@link EventTarget#off}. Allows `EventTarget` to mimic\n * the standard DOM API.\n *\n * @function\n * @see {@link EventTarget#off}\n */\nEventTarget.prototype.removeEventListener = EventTarget.prototype.off;\n\n/**\n * This function will add an `event listener` that gets triggered only once. After the\n * first trigger it will get removed. This is like adding an `event listener`\n * with {@link EventTarget#on} that calls {@link EventTarget#off} on itself.\n *\n * @param {string|string[]} type\n *        An event name or an array of event names.\n *\n * @param {EventTarget~EventListener} fn\n *        The function to be called once for each event name.\n */\nEventTarget.prototype.one = function (type, fn) {\n  // Remove the addEventListener alialing Events.on\n  // so we don't get into an infinite type loop\n  var ael = this.addEventListener;\n\n  this.addEventListener = function () {};\n  one(this, type, fn);\n  this.addEventListener = ael;\n};\n\n/**\n * This function causes an event to happen. This will then cause any `event listeners`\n * that are waiting for that event, to get called. If there are no `event listeners`\n * for an event then nothing will happen.\n *\n * If the name of the `Event` that is being triggered is in `EventTarget.allowedEvents_`.\n * Trigger will also call the `on` + `uppercaseEventName` function.\n *\n * Example:\n * 'click' is in `EventTarget.allowedEvents_`, so, trigger will attempt to call\n * `onClick` if it exists.\n *\n * @param {string|EventTarget~Event|Object} event\n *        The name of the event, an `Event`, or an object with a key of type set to\n *        an event name.\n */\nEventTarget.prototype.trigger = function (event) {\n  var type = event.type || event;\n\n  if (typeof event === 'string') {\n    event = { type: type };\n  }\n  event = fixEvent(event);\n\n  if (this.allowedEvents_[type] && this['on' + type]) {\n    this['on' + type](event);\n  }\n\n  trigger(this, event);\n};\n\n/**\n * An alias of {@link EventTarget#trigger}. Allows `EventTarget` to mimic\n * the standard DOM API.\n *\n * @function\n * @see {@link EventTarget#trigger}\n */\nEventTarget.prototype.dispatchEvent = EventTarget.prototype.trigger;\n\nvar EVENT_MAP = void 0;\n\nEventTarget.prototype.queueTrigger = function (event) {\n  var _this = this;\n\n  // only set up EVENT_MAP if it'll be used\n  if (!EVENT_MAP) {\n    EVENT_MAP = new Map();\n  }\n\n  var type = event.type || event;\n  var map = EVENT_MAP.get(this);\n\n  if (!map) {\n    map = new Map();\n    EVENT_MAP.set(this, map);\n  }\n\n  var oldTimeout = map.get(type);\n\n  map.delete(type);\n  window$1.clearTimeout(oldTimeout);\n\n  var timeout = window$1.setTimeout(function () {\n    // if we cleared out all timeouts for the current target, delete its map\n    if (map.size === 0) {\n      map = null;\n      EVENT_MAP.delete(_this);\n    }\n\n    _this.trigger(event);\n  }, 0);\n\n  map.set(type, timeout);\n};\n\n/**\n * @file mixins/evented.js\n * @module evented\n */\n\n/**\n * Returns whether or not an object has had the evented mixin applied.\n *\n * @param  {Object} object\n *         An object to test.\n *\n * @return {boolean}\n *         Whether or not the object appears to be evented.\n */\nvar isEvented = function isEvented(object) {\n  return object instanceof EventTarget || !!object.eventBusEl_ && ['on', 'one', 'off', 'trigger'].every(function (k) {\n    return typeof object[k] === 'function';\n  });\n};\n\n/**\n * Whether a value is a valid event type - non-empty string or array.\n *\n * @private\n * @param  {string|Array} type\n *         The type value to test.\n *\n * @return {boolean}\n *         Whether or not the type is a valid event type.\n */\nvar isValidEventType = function isValidEventType(type) {\n  return (\n    // The regex here verifies that the `type` contains at least one non-\n    // whitespace character.\n    typeof type === 'string' && /\\S/.test(type) || Array.isArray(type) && !!type.length\n  );\n};\n\n/**\n * Validates a value to determine if it is a valid event target. Throws if not.\n *\n * @private\n * @throws {Error}\n *         If the target does not appear to be a valid event target.\n *\n * @param  {Object} target\n *         The object to test.\n */\nvar validateTarget = function validateTarget(target) {\n  if (!target.nodeName && !isEvented(target)) {\n    throw new Error('Invalid target; must be a DOM node or evented object.');\n  }\n};\n\n/**\n * Validates a value to determine if it is a valid event target. Throws if not.\n *\n * @private\n * @throws {Error}\n *         If the type does not appear to be a valid event type.\n *\n * @param  {string|Array} type\n *         The type to test.\n */\nvar validateEventType = function validateEventType(type) {\n  if (!isValidEventType(type)) {\n    throw new Error('Invalid event type; must be a non-empty string or array.');\n  }\n};\n\n/**\n * Validates a value to determine if it is a valid listener. Throws if not.\n *\n * @private\n * @throws {Error}\n *         If the listener is not a function.\n *\n * @param  {Function} listener\n *         The listener to test.\n */\nvar validateListener = function validateListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new Error('Invalid listener; must be a function.');\n  }\n};\n\n/**\n * Takes an array of arguments given to `on()` or `one()`, validates them, and\n * normalizes them into an object.\n *\n * @private\n * @param  {Object} self\n *         The evented object on which `on()` or `one()` was called. This\n *         object will be bound as the `this` value for the listener.\n *\n * @param  {Array} args\n *         An array of arguments passed to `on()` or `one()`.\n *\n * @return {Object}\n *         An object containing useful values for `on()` or `one()` calls.\n */\nvar normalizeListenArgs = function normalizeListenArgs(self, args) {\n\n  // If the number of arguments is less than 3, the target is always the\n  // evented object itself.\n  var isTargetingSelf = args.length < 3 || args[0] === self || args[0] === self.eventBusEl_;\n  var target = void 0;\n  var type = void 0;\n  var listener = void 0;\n\n  if (isTargetingSelf) {\n    target = self.eventBusEl_;\n\n    // Deal with cases where we got 3 arguments, but we are still listening to\n    // the evented object itself.\n    if (args.length >= 3) {\n      args.shift();\n    }\n\n    type = args[0];\n    listener = args[1];\n  } else {\n    target = args[0];\n    type = args[1];\n    listener = args[2];\n  }\n\n  validateTarget(target);\n  validateEventType(type);\n  validateListener(listener);\n\n  listener = bind(self, listener);\n\n  return { isTargetingSelf: isTargetingSelf, target: target, type: type, listener: listener };\n};\n\n/**\n * Adds the listener to the event type(s) on the target, normalizing for\n * the type of target.\n *\n * @private\n * @param  {Element|Object} target\n *         A DOM node or evented object.\n *\n * @param  {string} method\n *         The event binding method to use (\"on\" or \"one\").\n *\n * @param  {string|Array} type\n *         One or more event type(s).\n *\n * @param  {Function} listener\n *         A listener function.\n */\nvar listen = function listen(target, method, type, listener) {\n  validateTarget(target);\n\n  if (target.nodeName) {\n    Events[method](target, type, listener);\n  } else {\n    target[method](type, listener);\n  }\n};\n\n/**\n * Contains methods that provide event capabilities to an object which is passed\n * to {@link module:evented|evented}.\n *\n * @mixin EventedMixin\n */\nvar EventedMixin = {\n\n  /**\n   * Add a listener to an event (or events) on this object or another evented\n   * object.\n   *\n   * @param  {string|Array|Element|Object} targetOrType\n   *         If this is a string or array, it represents the event type(s)\n   *         that will trigger the listener.\n   *\n   *         Another evented object can be passed here instead, which will\n   *         cause the listener to listen for events on _that_ object.\n   *\n   *         In either case, the listener's `this` value will be bound to\n   *         this object.\n   *\n   * @param  {string|Array|Function} typeOrListener\n   *         If the first argument was a string or array, this should be the\n   *         listener function. Otherwise, this is a string or array of event\n   *         type(s).\n   *\n   * @param  {Function} [listener]\n   *         If the first argument was another evented object, this will be\n   *         the listener function.\n   */\n  on: function on$$1() {\n    var _this = this;\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var _normalizeListenArgs = normalizeListenArgs(this, args),\n        isTargetingSelf = _normalizeListenArgs.isTargetingSelf,\n        target = _normalizeListenArgs.target,\n        type = _normalizeListenArgs.type,\n        listener = _normalizeListenArgs.listener;\n\n    listen(target, 'on', type, listener);\n\n    // If this object is listening to another evented object.\n    if (!isTargetingSelf) {\n\n      // If this object is disposed, remove the listener.\n      var removeListenerOnDispose = function removeListenerOnDispose() {\n        return _this.off(target, type, listener);\n      };\n\n      // Use the same function ID as the listener so we can remove it later it\n      // using the ID of the original listener.\n      removeListenerOnDispose.guid = listener.guid;\n\n      // Add a listener to the target's dispose event as well. This ensures\n      // that if the target is disposed BEFORE this object, we remove the\n      // removal listener that was just added. Otherwise, we create a memory leak.\n      var removeRemoverOnTargetDispose = function removeRemoverOnTargetDispose() {\n        return _this.off('dispose', removeListenerOnDispose);\n      };\n\n      // Use the same function ID as the listener so we can remove it later\n      // it using the ID of the original listener.\n      removeRemoverOnTargetDispose.guid = listener.guid;\n\n      listen(this, 'on', 'dispose', removeListenerOnDispose);\n      listen(target, 'on', 'dispose', removeRemoverOnTargetDispose);\n    }\n  },\n\n\n  /**\n   * Add a listener to an event (or events) on this object or another evented\n   * object. The listener will only be called once and then removed.\n   *\n   * @param  {string|Array|Element|Object} targetOrType\n   *         If this is a string or array, it represents the event type(s)\n   *         that will trigger the listener.\n   *\n   *         Another evented object can be passed here instead, which will\n   *         cause the listener to listen for events on _that_ object.\n   *\n   *         In either case, the listener's `this` value will be bound to\n   *         this object.\n   *\n   * @param  {string|Array|Function} typeOrListener\n   *         If the first argument was a string or array, this should be the\n   *         listener function. Otherwise, this is a string or array of event\n   *         type(s).\n   *\n   * @param  {Function} [listener]\n   *         If the first argument was another evented object, this will be\n   *         the listener function.\n   */\n  one: function one$$1() {\n    var _this2 = this;\n\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    var _normalizeListenArgs2 = normalizeListenArgs(this, args),\n        isTargetingSelf = _normalizeListenArgs2.isTargetingSelf,\n        target = _normalizeListenArgs2.target,\n        type = _normalizeListenArgs2.type,\n        listener = _normalizeListenArgs2.listener;\n\n    // Targeting this evented object.\n\n\n    if (isTargetingSelf) {\n      listen(target, 'one', type, listener);\n\n      // Targeting another evented object.\n    } else {\n      var wrapper = function wrapper() {\n        for (var _len3 = arguments.length, largs = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          largs[_key3] = arguments[_key3];\n        }\n\n        _this2.off(target, type, wrapper);\n        listener.apply(null, largs);\n      };\n\n      // Use the same function ID as the listener so we can remove it later\n      // it using the ID of the original listener.\n      wrapper.guid = listener.guid;\n      listen(target, 'one', type, wrapper);\n    }\n  },\n\n\n  /**\n   * Removes listener(s) from event(s) on an evented object.\n   *\n   * @param  {string|Array|Element|Object} [targetOrType]\n   *         If this is a string or array, it represents the event type(s).\n   *\n   *         Another evented object can be passed here instead, in which case\n   *         ALL 3 arguments are _required_.\n   *\n   * @param  {string|Array|Function} [typeOrListener]\n   *         If the first argument was a string or array, this may be the\n   *         listener function. Otherwise, this is a string or array of event\n   *         type(s).\n   *\n   * @param  {Function} [listener]\n   *         If the first argument was another evented object, this will be\n   *         the listener function; otherwise, _all_ listeners bound to the\n   *         event type(s) will be removed.\n   */\n  off: function off$$1(targetOrType, typeOrListener, listener) {\n\n    // Targeting this evented object.\n    if (!targetOrType || isValidEventType(targetOrType)) {\n      off(this.eventBusEl_, targetOrType, typeOrListener);\n\n      // Targeting another evented object.\n    } else {\n      var target = targetOrType;\n      var type = typeOrListener;\n\n      // Fail fast and in a meaningful way!\n      validateTarget(target);\n      validateEventType(type);\n      validateListener(listener);\n\n      // Ensure there's at least a guid, even if the function hasn't been used\n      listener = bind(this, listener);\n\n      // Remove the dispose listener on this evented object, which was given\n      // the same guid as the event listener in on().\n      this.off('dispose', listener);\n\n      if (target.nodeName) {\n        off(target, type, listener);\n        off(target, 'dispose', listener);\n      } else if (isEvented(target)) {\n        target.off(type, listener);\n        target.off('dispose', listener);\n      }\n    }\n  },\n\n\n  /**\n   * Fire an event on this evented object, causing its listeners to be called.\n   *\n   * @param   {string|Object} event\n   *          An event type or an object with a type property.\n   *\n   * @param   {Object} [hash]\n   *          An additional object to pass along to listeners.\n   *\n   * @returns {boolean}\n   *          Whether or not the default behavior was prevented.\n   */\n  trigger: function trigger$$1(event, hash) {\n    return trigger(this.eventBusEl_, event, hash);\n  }\n};\n\n/**\n * Applies {@link module:evented~EventedMixin|EventedMixin} to a target object.\n *\n * @param  {Object} target\n *         The object to which to add event methods.\n *\n * @param  {Object} [options={}]\n *         Options for customizing the mixin behavior.\n *\n * @param  {String} [options.eventBusKey]\n *         By default, adds a `eventBusEl_` DOM element to the target object,\n *         which is used as an event bus. If the target object already has a\n *         DOM element that should be used, pass its key here.\n *\n * @return {Object}\n *         The target object.\n */\nfunction evented(target) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var eventBusKey = options.eventBusKey;\n\n  // Set or create the eventBusEl_.\n\n  if (eventBusKey) {\n    if (!target[eventBusKey].nodeName) {\n      throw new Error('The eventBusKey \"' + eventBusKey + '\" does not refer to an element.');\n    }\n    target.eventBusEl_ = target[eventBusKey];\n  } else {\n    target.eventBusEl_ = createEl('span', { className: 'vjs-event-bus' });\n  }\n\n  assign(target, EventedMixin);\n\n  // When any evented object is disposed, it removes all its listeners.\n  target.on('dispose', function () {\n    target.off();\n    window$1.setTimeout(function () {\n      target.eventBusEl_ = null;\n    }, 0);\n  });\n\n  return target;\n}\n\n/**\n * @file mixins/stateful.js\n * @module stateful\n */\n\n/**\n * Contains methods that provide statefulness to an object which is passed\n * to {@link module:stateful}.\n *\n * @mixin StatefulMixin\n */\nvar StatefulMixin = {\n\n  /**\n   * A hash containing arbitrary keys and values representing the state of\n   * the object.\n   *\n   * @type {Object}\n   */\n  state: {},\n\n  /**\n   * Set the state of an object by mutating its\n   * {@link module:stateful~StatefulMixin.state|state} object in place.\n   *\n   * @fires   module:stateful~StatefulMixin#statechanged\n   * @param   {Object|Function} stateUpdates\n   *          A new set of properties to shallow-merge into the plugin state.\n   *          Can be a plain object or a function returning a plain object.\n   *\n   * @returns {Object|undefined}\n   *          An object containing changes that occurred. If no changes\n   *          occurred, returns `undefined`.\n   */\n  setState: function setState(stateUpdates) {\n    var _this = this;\n\n    // Support providing the `stateUpdates` state as a function.\n    if (typeof stateUpdates === 'function') {\n      stateUpdates = stateUpdates();\n    }\n\n    var changes = void 0;\n\n    each(stateUpdates, function (value, key) {\n\n      // Record the change if the value is different from what's in the\n      // current state.\n      if (_this.state[key] !== value) {\n        changes = changes || {};\n        changes[key] = {\n          from: _this.state[key],\n          to: value\n        };\n      }\n\n      _this.state[key] = value;\n    });\n\n    // Only trigger \"statechange\" if there were changes AND we have a trigger\n    // function. This allows us to not require that the target object be an\n    // evented object.\n    if (changes && isEvented(this)) {\n\n      /**\n       * An event triggered on an object that is both\n       * {@link module:stateful|stateful} and {@link module:evented|evented}\n       * indicating that its state has changed.\n       *\n       * @event    module:stateful~StatefulMixin#statechanged\n       * @type     {Object}\n       * @property {Object} changes\n       *           A hash containing the properties that were changed and\n       *           the values they were changed `from` and `to`.\n       */\n      this.trigger({\n        changes: changes,\n        type: 'statechanged'\n      });\n    }\n\n    return changes;\n  }\n};\n\n/**\n * Applies {@link module:stateful~StatefulMixin|StatefulMixin} to a target\n * object.\n *\n * If the target object is {@link module:evented|evented} and has a\n * `handleStateChanged` method, that method will be automatically bound to the\n * `statechanged` event on itself.\n *\n * @param   {Object} target\n *          The object to be made stateful.\n *\n * @param   {Object} [defaultState]\n *          A default set of properties to populate the newly-stateful object's\n *          `state` property.\n *\n * @returns {Object}\n *          Returns the `target`.\n */\nfunction stateful(target, defaultState) {\n  assign(target, StatefulMixin);\n\n  // This happens after the mixing-in because we need to replace the `state`\n  // added in that step.\n  target.state = assign({}, target.state, defaultState);\n\n  // Auto-bind the `handleStateChanged` method of the target object if it exists.\n  if (typeof target.handleStateChanged === 'function' && isEvented(target)) {\n    target.on('statechanged', target.handleStateChanged);\n  }\n\n  return target;\n}\n\n/**\n * @file to-title-case.js\n * @module to-title-case\n */\n\n/**\n * Uppercase the first letter of a string.\n *\n * @param {string} string\n *        String to be uppercased\n *\n * @return {string}\n *         The string with an uppercased first letter\n */\nfunction toTitleCase(string) {\n  if (typeof string !== 'string') {\n    return string;\n  }\n\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n/**\n * Compares the TitleCase versions of the two strings for equality.\n *\n * @param {string} str1\n *        The first string to compare\n *\n * @param {string} str2\n *        The second string to compare\n *\n * @return {boolean}\n *         Whether the TitleCase versions of the strings are equal\n */\nfunction titleCaseEquals(str1, str2) {\n  return toTitleCase(str1) === toTitleCase(str2);\n}\n\n/**\n * @file merge-options.js\n * @module merge-options\n */\n\n/**\n * Deep-merge one or more options objects, recursively merging **only** plain\n * object properties.\n *\n * @param   {Object[]} sources\n *          One or more objects to merge into a new object.\n *\n * @returns {Object}\n *          A new object that is the merged result of all sources.\n */\nfunction mergeOptions() {\n  var result = {};\n\n  for (var _len = arguments.length, sources = Array(_len), _key = 0; _key < _len; _key++) {\n    sources[_key] = arguments[_key];\n  }\n\n  sources.forEach(function (source) {\n    if (!source) {\n      return;\n    }\n\n    each(source, function (value, key) {\n      if (!isPlain(value)) {\n        result[key] = value;\n        return;\n      }\n\n      if (!isPlain(result[key])) {\n        result[key] = {};\n      }\n\n      result[key] = mergeOptions(result[key], value);\n    });\n  });\n\n  return result;\n}\n\n/**\n * Player Component - Base class for all UI objects\n *\n * @file component.js\n */\n\n/**\n * Base class for all UI Components.\n * Components are UI objects which represent both a javascript object and an element\n * in the DOM. They can be children of other components, and can have\n * children themselves.\n *\n * Components can also use methods from {@link EventTarget}\n */\n\nvar Component = function () {\n\n  /**\n   * A callback that is called when a component is ready. Does not have any\n   * paramters and any callback value will be ignored.\n   *\n   * @callback Component~ReadyCallback\n   * @this Component\n   */\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Object[]} [options.children]\n   *        An array of children objects to intialize this component with. Children objects have\n   *        a name property that will be used if more than one component of the same type needs to be\n   *        added.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        Function that gets called when the `Component` is ready.\n   */\n  function Component(player, options, ready) {\n    classCallCheck(this, Component);\n\n\n    // The component might be the player itself and we can't pass `this` to super\n    if (!player && this.play) {\n      this.player_ = player = this; // eslint-disable-line\n    } else {\n      this.player_ = player;\n    }\n\n    // Make a copy of prototype.options_ to protect against overriding defaults\n    this.options_ = mergeOptions({}, this.options_);\n\n    // Updated options with supplied options\n    options = this.options_ = mergeOptions(this.options_, options);\n\n    // Get ID from options or options element if one is supplied\n    this.id_ = options.id || options.el && options.el.id;\n\n    // If there was no ID from the options, generate one\n    if (!this.id_) {\n      // Don't require the player ID function in the case of mock players\n      var id = player && player.id && player.id() || 'no_player';\n\n      this.id_ = id + '_component_' + newGUID();\n    }\n\n    this.name_ = options.name || null;\n\n    // Create element if one wasn't provided in options\n    if (options.el) {\n      this.el_ = options.el;\n    } else if (options.createEl !== false) {\n      this.el_ = this.createEl();\n    }\n\n    // if evented is anything except false, we want to mixin in evented\n    if (options.evented !== false) {\n      // Make this an evented object and use `el_`, if available, as its event bus\n      evented(this, { eventBusKey: this.el_ ? 'el_' : null });\n    }\n    stateful(this, this.constructor.defaultState);\n\n    this.children_ = [];\n    this.childIndex_ = {};\n    this.childNameIndex_ = {};\n\n    // Add any child components in options\n    if (options.initChildren !== false) {\n      this.initChildren();\n    }\n\n    this.ready(ready);\n    // Don't want to trigger ready here or it will before init is actually\n    // finished for all children that run this constructor\n\n    if (options.reportTouchActivity !== false) {\n      this.enableTouchActivity();\n    }\n  }\n\n  /**\n   * Dispose of the `Component` and all child components.\n   *\n   * @fires Component#dispose\n   */\n\n\n  Component.prototype.dispose = function dispose() {\n\n    /**\n     * Triggered when a `Component` is disposed.\n     *\n     * @event Component#dispose\n     * @type {EventTarget~Event}\n     *\n     * @property {boolean} [bubbles=false]\n     *           set to false so that the close event does not\n     *           bubble up\n     */\n    this.trigger({ type: 'dispose', bubbles: false });\n\n    // Dispose all children.\n    if (this.children_) {\n      for (var i = this.children_.length - 1; i >= 0; i--) {\n        if (this.children_[i].dispose) {\n          this.children_[i].dispose();\n        }\n      }\n    }\n\n    // Delete child references\n    this.children_ = null;\n    this.childIndex_ = null;\n    this.childNameIndex_ = null;\n\n    if (this.el_) {\n      // Remove element from DOM\n      if (this.el_.parentNode) {\n        this.el_.parentNode.removeChild(this.el_);\n      }\n\n      removeData(this.el_);\n      this.el_ = null;\n    }\n\n    // remove reference to the player after disposing of the element\n    this.player_ = null;\n  };\n\n  /**\n   * Return the {@link Player} that the `Component` has attached to.\n   *\n   * @return {Player}\n   *         The player that this `Component` has attached to.\n   */\n\n\n  Component.prototype.player = function player() {\n    return this.player_;\n  };\n\n  /**\n   * Deep merge of options objects with new options.\n   * > Note: When both `obj` and `options` contain properties whose values are objects.\n   *         The two properties get merged using {@link module:mergeOptions}\n   *\n   * @param {Object} obj\n   *        The object that contains new options.\n   *\n   * @return {Object}\n   *         A new object of `this.options_` and `obj` merged together.\n   *\n   * @deprecated since version 5\n   */\n\n\n  Component.prototype.options = function options(obj) {\n    log$1.warn('this.options() has been deprecated and will be moved to the constructor in 6.0');\n\n    if (!obj) {\n      return this.options_;\n    }\n\n    this.options_ = mergeOptions(this.options_, obj);\n    return this.options_;\n  };\n\n  /**\n   * Get the `Component`s DOM element\n   *\n   * @return {Element}\n   *         The DOM element for this `Component`.\n   */\n\n\n  Component.prototype.el = function el() {\n    return this.el_;\n  };\n\n  /**\n   * Create the `Component`s DOM element.\n   *\n   * @param {string} [tagName]\n   *        Element's DOM node type. e.g. 'div'\n   *\n   * @param {Object} [properties]\n   *        An object of properties that should be set.\n   *\n   * @param {Object} [attributes]\n   *        An object of attributes that should be set.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n\n\n  Component.prototype.createEl = function createEl$$1(tagName, properties, attributes) {\n    return createEl(tagName, properties, attributes);\n  };\n\n  /**\n   * Localize a string given the string in english.\n   *\n   * If tokens are provided, it'll try and run a simple token replacement on the provided string.\n   * The tokens it looks for look like `{1}` with the index being 1-indexed into the tokens array.\n   *\n   * If a `defaultValue` is provided, it'll use that over `string`,\n   * if a value isn't found in provided language files.\n   * This is useful if you want to have a descriptive key for token replacement\n   * but have a succinct localized string and not require `en.json` to be included.\n   *\n   * Currently, it is used for the progress bar timing.\n   * ```js\n   * {\n   *   \"progress bar timing: currentTime={1} duration={2}\": \"{1} of {2}\"\n   * }\n   * ```\n   * It is then used like so:\n   * ```js\n   * this.localize('progress bar timing: currentTime={1} duration{2}',\n   *               [this.player_.currentTime(), this.player_.duration()],\n   *               '{1} of {2}');\n   * ```\n   *\n   * Which outputs something like: `01:23 of 24:56`.\n   *\n   *\n   * @param {string} string\n   *        The string to localize and the key to lookup in the language files.\n   * @param {string[]} [tokens]\n   *        If the current item has token replacements, provide the tokens here.\n   * @param {string} [defaultValue]\n   *        Defaults to `string`. Can be a default value to use for token replacement\n   *        if the lookup key is needed to be separate.\n   *\n   * @return {string}\n   *         The localized string or if no localization exists the english string.\n   */\n\n\n  Component.prototype.localize = function localize(string, tokens) {\n    var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : string;\n\n    var code = this.player_.language && this.player_.language();\n    var languages = this.player_.languages && this.player_.languages();\n    var language = languages && languages[code];\n    var primaryCode = code && code.split('-')[0];\n    var primaryLang = languages && languages[primaryCode];\n\n    var localizedString = defaultValue;\n\n    if (language && language[string]) {\n      localizedString = language[string];\n    } else if (primaryLang && primaryLang[string]) {\n      localizedString = primaryLang[string];\n    }\n\n    if (tokens) {\n      localizedString = localizedString.replace(/\\{(\\d+)\\}/g, function (match, index) {\n        var value = tokens[index - 1];\n        var ret = value;\n\n        if (typeof value === 'undefined') {\n          ret = match;\n        }\n\n        return ret;\n      });\n    }\n\n    return localizedString;\n  };\n\n  /**\n   * Return the `Component`s DOM element. This is where children get inserted.\n   * This will usually be the the same as the element returned in {@link Component#el}.\n   *\n   * @return {Element}\n   *         The content element for this `Component`.\n   */\n\n\n  Component.prototype.contentEl = function contentEl() {\n    return this.contentEl_ || this.el_;\n  };\n\n  /**\n   * Get this `Component`s ID\n   *\n   * @return {string}\n   *         The id of this `Component`\n   */\n\n\n  Component.prototype.id = function id() {\n    return this.id_;\n  };\n\n  /**\n   * Get the `Component`s name. The name gets used to reference the `Component`\n   * and is set during registration.\n   *\n   * @return {string}\n   *         The name of this `Component`.\n   */\n\n\n  Component.prototype.name = function name() {\n    return this.name_;\n  };\n\n  /**\n   * Get an array of all child components\n   *\n   * @return {Array}\n   *         The children\n   */\n\n\n  Component.prototype.children = function children() {\n    return this.children_;\n  };\n\n  /**\n   * Returns the child `Component` with the given `id`.\n   *\n   * @param {string} id\n   *        The id of the child `Component` to get.\n   *\n   * @return {Component|undefined}\n   *         The child `Component` with the given `id` or undefined.\n   */\n\n\n  Component.prototype.getChildById = function getChildById(id) {\n    return this.childIndex_[id];\n  };\n\n  /**\n   * Returns the child `Component` with the given `name`.\n   *\n   * @param {string} name\n   *        The name of the child `Component` to get.\n   *\n   * @return {Component|undefined}\n   *         The child `Component` with the given `name` or undefined.\n   */\n\n\n  Component.prototype.getChild = function getChild(name) {\n    if (!name) {\n      return;\n    }\n\n    name = toTitleCase(name);\n\n    return this.childNameIndex_[name];\n  };\n\n  /**\n   * Add a child `Component` inside the current `Component`.\n   *\n   *\n   * @param {string|Component} child\n   *        The name or instance of a child to add.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of options that will get passed to children of\n   *        the child.\n   *\n   * @param {number} [index=this.children_.length]\n   *        The index to attempt to add a child into.\n   *\n   * @return {Component}\n   *         The `Component` that gets added as a child. When using a string the\n   *         `Component` will get created by this process.\n   */\n\n\n  Component.prototype.addChild = function addChild(child) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.children_.length;\n\n    var component = void 0;\n    var componentName = void 0;\n\n    // If child is a string, create component with options\n    if (typeof child === 'string') {\n      componentName = toTitleCase(child);\n\n      var componentClassName = options.componentClass || componentName;\n\n      // Set name through options\n      options.name = componentName;\n\n      // Create a new object & element for this controls set\n      // If there's no .player_, this is a player\n      var ComponentClass = Component.getComponent(componentClassName);\n\n      if (!ComponentClass) {\n        throw new Error('Component ' + componentClassName + ' does not exist');\n      }\n\n      // data stored directly on the videojs object may be\n      // misidentified as a component to retain\n      // backwards-compatibility with 4.x. check to make sure the\n      // component class can be instantiated.\n      if (typeof ComponentClass !== 'function') {\n        return null;\n      }\n\n      component = new ComponentClass(this.player_ || this, options);\n\n      // child is a component instance\n    } else {\n      component = child;\n    }\n\n    this.children_.splice(index, 0, component);\n\n    if (typeof component.id === 'function') {\n      this.childIndex_[component.id()] = component;\n    }\n\n    // If a name wasn't used to create the component, check if we can use the\n    // name function of the component\n    componentName = componentName || component.name && toTitleCase(component.name());\n\n    if (componentName) {\n      this.childNameIndex_[componentName] = component;\n    }\n\n    // Add the UI object's element to the container div (box)\n    // Having an element is not required\n    if (typeof component.el === 'function' && component.el()) {\n      var childNodes = this.contentEl().children;\n      var refNode = childNodes[index] || null;\n\n      this.contentEl().insertBefore(component.el(), refNode);\n    }\n\n    // Return so it can stored on parent object if desired.\n    return component;\n  };\n\n  /**\n   * Remove a child `Component` from this `Component`s list of children. Also removes\n   * the child `Component`s element from this `Component`s element.\n   *\n   * @param {Component} component\n   *        The child `Component` to remove.\n   */\n\n\n  Component.prototype.removeChild = function removeChild(component) {\n    if (typeof component === 'string') {\n      component = this.getChild(component);\n    }\n\n    if (!component || !this.children_) {\n      return;\n    }\n\n    var childFound = false;\n\n    for (var i = this.children_.length - 1; i >= 0; i--) {\n      if (this.children_[i] === component) {\n        childFound = true;\n        this.children_.splice(i, 1);\n        break;\n      }\n    }\n\n    if (!childFound) {\n      return;\n    }\n\n    this.childIndex_[component.id()] = null;\n    this.childNameIndex_[component.name()] = null;\n\n    var compEl = component.el();\n\n    if (compEl && compEl.parentNode === this.contentEl()) {\n      this.contentEl().removeChild(component.el());\n    }\n  };\n\n  /**\n   * Add and initialize default child `Component`s based upon options.\n   */\n\n\n  Component.prototype.initChildren = function initChildren() {\n    var _this = this;\n\n    var children = this.options_.children;\n\n    if (children) {\n      // `this` is `parent`\n      var parentOptions = this.options_;\n\n      var handleAdd = function handleAdd(child) {\n        var name = child.name;\n        var opts = child.opts;\n\n        // Allow options for children to be set at the parent options\n        // e.g. videojs(id, { controlBar: false });\n        // instead of videojs(id, { children: { controlBar: false });\n        if (parentOptions[name] !== undefined) {\n          opts = parentOptions[name];\n        }\n\n        // Allow for disabling default components\n        // e.g. options['children']['posterImage'] = false\n        if (opts === false) {\n          return;\n        }\n\n        // Allow options to be passed as a simple boolean if no configuration\n        // is necessary.\n        if (opts === true) {\n          opts = {};\n        }\n\n        // We also want to pass the original player options\n        // to each component as well so they don't need to\n        // reach back into the player for options later.\n        opts.playerOptions = _this.options_.playerOptions;\n\n        // Create and add the child component.\n        // Add a direct reference to the child by name on the parent instance.\n        // If two of the same component are used, different names should be supplied\n        // for each\n        var newChild = _this.addChild(name, opts);\n\n        if (newChild) {\n          _this[name] = newChild;\n        }\n      };\n\n      // Allow for an array of children details to passed in the options\n      var workingChildren = void 0;\n      var Tech = Component.getComponent('Tech');\n\n      if (Array.isArray(children)) {\n        workingChildren = children;\n      } else {\n        workingChildren = Object.keys(children);\n      }\n\n      workingChildren\n      // children that are in this.options_ but also in workingChildren  would\n      // give us extra children we do not want. So, we want to filter them out.\n      .concat(Object.keys(this.options_).filter(function (child) {\n        return !workingChildren.some(function (wchild) {\n          if (typeof wchild === 'string') {\n            return child === wchild;\n          }\n          return child === wchild.name;\n        });\n      })).map(function (child) {\n        var name = void 0;\n        var opts = void 0;\n\n        if (typeof child === 'string') {\n          name = child;\n          opts = children[name] || _this.options_[name] || {};\n        } else {\n          name = child.name;\n          opts = child;\n        }\n\n        return { name: name, opts: opts };\n      }).filter(function (child) {\n        // we have to make sure that child.name isn't in the techOrder since\n        // techs are registerd as Components but can't aren't compatible\n        // See https://github.com/videojs/video.js/issues/2772\n        var c = Component.getComponent(child.opts.componentClass || toTitleCase(child.name));\n\n        return c && !Tech.isTech(c);\n      }).forEach(handleAdd);\n    }\n  };\n\n  /**\n   * Builds the default DOM class name. Should be overriden by sub-components.\n   *\n   * @return {string}\n   *         The DOM class name for this object.\n   *\n   * @abstract\n   */\n\n\n  Component.prototype.buildCSSClass = function buildCSSClass() {\n    // Child classes can include a function that does:\n    // return 'CLASS NAME' + this._super();\n    return '';\n  };\n\n  /**\n   * Bind a listener to the component's ready state.\n   * Different from event listeners in that if the ready event has already happened\n   * it will trigger the function immediately.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n\n\n  Component.prototype.ready = function ready(fn) {\n    var sync = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (!fn) {\n      return;\n    }\n\n    if (!this.isReady_) {\n      this.readyQueue_ = this.readyQueue_ || [];\n      this.readyQueue_.push(fn);\n      return;\n    }\n\n    if (sync) {\n      fn.call(this);\n    } else {\n      // Call the function asynchronously by default for consistency\n      this.setTimeout(fn, 1);\n    }\n  };\n\n  /**\n   * Trigger all the ready listeners for this `Component`.\n   *\n   * @fires Component#ready\n   */\n\n\n  Component.prototype.triggerReady = function triggerReady() {\n    this.isReady_ = true;\n\n    // Ensure ready is triggered asynchronously\n    this.setTimeout(function () {\n      var readyQueue = this.readyQueue_;\n\n      // Reset Ready Queue\n      this.readyQueue_ = [];\n\n      if (readyQueue && readyQueue.length > 0) {\n        readyQueue.forEach(function (fn) {\n          fn.call(this);\n        }, this);\n      }\n\n      // Allow for using event listeners also\n      /**\n       * Triggered when a `Component` is ready.\n       *\n       * @event Component#ready\n       * @type {EventTarget~Event}\n       */\n      this.trigger('ready');\n    }, 1);\n  };\n\n  /**\n   * Find a single DOM element matching a `selector`. This can be within the `Component`s\n   * `contentEl()` or another custom context.\n   *\n   * @param {string} selector\n   *        A valid CSS selector, which will be passed to `querySelector`.\n   *\n   * @param {Element|string} [context=this.contentEl()]\n   *        A DOM element within which to query. Can also be a selector string in\n   *        which case the first matching element will get used as context. If\n   *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns\n   *        nothing it falls back to `document`.\n   *\n   * @return {Element|null}\n   *         the dom element that was found, or null\n   *\n   * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)\n   */\n\n\n  Component.prototype.$ = function $$$1(selector, context) {\n    return $(selector, context || this.contentEl());\n  };\n\n  /**\n   * Finds all DOM element matching a `selector`. This can be within the `Component`s\n   * `contentEl()` or another custom context.\n   *\n   * @param {string} selector\n   *        A valid CSS selector, which will be passed to `querySelectorAll`.\n   *\n   * @param {Element|string} [context=this.contentEl()]\n   *        A DOM element within which to query. Can also be a selector string in\n   *        which case the first matching element will get used as context. If\n   *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns\n   *        nothing it falls back to `document`.\n   *\n   * @return {NodeList}\n   *         a list of dom elements that were found\n   *\n   * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)\n   */\n\n\n  Component.prototype.$$ = function $$$$1(selector, context) {\n    return $$(selector, context || this.contentEl());\n  };\n\n  /**\n   * Check if a component's element has a CSS class name.\n   *\n   * @param {string} classToCheck\n   *        CSS class name to check.\n   *\n   * @return {boolean}\n   *         - True if the `Component` has the class.\n   *         - False if the `Component` does not have the class`\n   */\n\n\n  Component.prototype.hasClass = function hasClass$$1(classToCheck) {\n    return hasClass(this.el_, classToCheck);\n  };\n\n  /**\n   * Add a CSS class name to the `Component`s element.\n   *\n   * @param {string} classToAdd\n   *        CSS class name to add\n   */\n\n\n  Component.prototype.addClass = function addClass$$1(classToAdd) {\n    addClass(this.el_, classToAdd);\n  };\n\n  /**\n   * Remove a CSS class name from the `Component`s element.\n   *\n   * @param {string} classToRemove\n   *        CSS class name to remove\n   */\n\n\n  Component.prototype.removeClass = function removeClass$$1(classToRemove) {\n    removeClass(this.el_, classToRemove);\n  };\n\n  /**\n   * Add or remove a CSS class name from the component's element.\n   * - `classToToggle` gets added when {@link Component#hasClass} would return false.\n   * - `classToToggle` gets removed when {@link Component#hasClass} would return true.\n   *\n   * @param  {string} classToToggle\n   *         The class to add or remove based on (@link Component#hasClass}\n   *\n   * @param  {boolean|Dom~predicate} [predicate]\n   *         An {@link Dom~predicate} function or a boolean\n   */\n\n\n  Component.prototype.toggleClass = function toggleClass$$1(classToToggle, predicate) {\n    toggleClass(this.el_, classToToggle, predicate);\n  };\n\n  /**\n   * Show the `Component`s element if it is hidden by removing the\n   * 'vjs-hidden' class name from it.\n   */\n\n\n  Component.prototype.show = function show() {\n    this.removeClass('vjs-hidden');\n  };\n\n  /**\n   * Hide the `Component`s element if it is currently showing by adding the\n   * 'vjs-hidden` class name to it.\n   */\n\n\n  Component.prototype.hide = function hide() {\n    this.addClass('vjs-hidden');\n  };\n\n  /**\n   * Lock a `Component`s element in its visible state by adding the 'vjs-lock-showing'\n   * class name to it. Used during fadeIn/fadeOut.\n   *\n   * @private\n   */\n\n\n  Component.prototype.lockShowing = function lockShowing() {\n    this.addClass('vjs-lock-showing');\n  };\n\n  /**\n   * Unlock a `Component`s element from its visible state by removing the 'vjs-lock-showing'\n   * class name from it. Used during fadeIn/fadeOut.\n   *\n   * @private\n   */\n\n\n  Component.prototype.unlockShowing = function unlockShowing() {\n    this.removeClass('vjs-lock-showing');\n  };\n\n  /**\n   * Get the value of an attribute on the `Component`s element.\n   *\n   * @param {string} attribute\n   *        Name of the attribute to get the value from.\n   *\n   * @return {string|null}\n   *         - The value of the attribute that was asked for.\n   *         - Can be an empty string on some browsers if the attribute does not exist\n   *           or has no value\n   *         - Most browsers will return null if the attibute does not exist or has\n   *           no value.\n   *\n   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute}\n   */\n\n\n  Component.prototype.getAttribute = function getAttribute$$1(attribute) {\n    return getAttribute(this.el_, attribute);\n  };\n\n  /**\n   * Set the value of an attribute on the `Component`'s element\n   *\n   * @param {string} attribute\n   *        Name of the attribute to set.\n   *\n   * @param {string} value\n   *        Value to set the attribute to.\n   *\n   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute}\n   */\n\n\n  Component.prototype.setAttribute = function setAttribute$$1(attribute, value) {\n    setAttribute(this.el_, attribute, value);\n  };\n\n  /**\n   * Remove an attribute from the `Component`s element.\n   *\n   * @param {string} attribute\n   *        Name of the attribute to remove.\n   *\n   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute}\n   */\n\n\n  Component.prototype.removeAttribute = function removeAttribute$$1(attribute) {\n    removeAttribute(this.el_, attribute);\n  };\n\n  /**\n   * Get or set the width of the component based upon the CSS styles.\n   * See {@link Component#dimension} for more detailed information.\n   *\n   * @param {number|string} [num]\n   *        The width that you want to set postfixed with '%', 'px' or nothing.\n   *\n   * @param {boolean} [skipListeners]\n   *        Skip the componentresize event trigger\n   *\n   * @return {number|string}\n   *         The width when getting, zero if there is no width. Can be a string\n   *           postpixed with '%' or 'px'.\n   */\n\n\n  Component.prototype.width = function width(num, skipListeners) {\n    return this.dimension('width', num, skipListeners);\n  };\n\n  /**\n   * Get or set the height of the component based upon the CSS styles.\n   * See {@link Component#dimension} for more detailed information.\n   *\n   * @param {number|string} [num]\n   *        The height that you want to set postfixed with '%', 'px' or nothing.\n   *\n   * @param {boolean} [skipListeners]\n   *        Skip the componentresize event trigger\n   *\n   * @return {number|string}\n   *         The width when getting, zero if there is no width. Can be a string\n   *         postpixed with '%' or 'px'.\n   */\n\n\n  Component.prototype.height = function height(num, skipListeners) {\n    return this.dimension('height', num, skipListeners);\n  };\n\n  /**\n   * Set both the width and height of the `Component` element at the same time.\n   *\n   * @param  {number|string} width\n   *         Width to set the `Component`s element to.\n   *\n   * @param  {number|string} height\n   *         Height to set the `Component`s element to.\n   */\n\n\n  Component.prototype.dimensions = function dimensions(width, height) {\n    // Skip componentresize listeners on width for optimization\n    this.width(width, true);\n    this.height(height);\n  };\n\n  /**\n   * Get or set width or height of the `Component` element. This is the shared code\n   * for the {@link Component#width} and {@link Component#height}.\n   *\n   * Things to know:\n   * - If the width or height in an number this will return the number postfixed with 'px'.\n   * - If the width/height is a percent this will return the percent postfixed with '%'\n   * - Hidden elements have a width of 0 with `window.getComputedStyle`. This function\n   *   defaults to the `Component`s `style.width` and falls back to `window.getComputedStyle`.\n   *   See [this]{@link http://www.foliotek.com/devblog/getting-the-width-of-a-hidden-element-with-jquery-using-width/}\n   *   for more information\n   * - If you want the computed style of the component, use {@link Component#currentWidth}\n   *   and {@link {Component#currentHeight}\n   *\n   * @fires Component#componentresize\n   *\n   * @param {string} widthOrHeight\n   8        'width' or 'height'\n   *\n   * @param  {number|string} [num]\n   8         New dimension\n   *\n   * @param  {boolean} [skipListeners]\n   *         Skip componentresize event trigger\n   *\n   * @return {number}\n   *         The dimension when getting or 0 if unset\n   */\n\n\n  Component.prototype.dimension = function dimension(widthOrHeight, num, skipListeners) {\n    if (num !== undefined) {\n      // Set to zero if null or literally NaN (NaN !== NaN)\n      if (num === null || num !== num) {\n        num = 0;\n      }\n\n      // Check if using css width/height (% or px) and adjust\n      if (('' + num).indexOf('%') !== -1 || ('' + num).indexOf('px') !== -1) {\n        this.el_.style[widthOrHeight] = num;\n      } else if (num === 'auto') {\n        this.el_.style[widthOrHeight] = '';\n      } else {\n        this.el_.style[widthOrHeight] = num + 'px';\n      }\n\n      // skipListeners allows us to avoid triggering the resize event when setting both width and height\n      if (!skipListeners) {\n        /**\n         * Triggered when a component is resized.\n         *\n         * @event Component#componentresize\n         * @type {EventTarget~Event}\n         */\n        this.trigger('componentresize');\n      }\n\n      return;\n    }\n\n    // Not setting a value, so getting it\n    // Make sure element exists\n    if (!this.el_) {\n      return 0;\n    }\n\n    // Get dimension value from style\n    var val = this.el_.style[widthOrHeight];\n    var pxIndex = val.indexOf('px');\n\n    if (pxIndex !== -1) {\n      // Return the pixel value with no 'px'\n      return parseInt(val.slice(0, pxIndex), 10);\n    }\n\n    // No px so using % or no style was set, so falling back to offsetWidth/height\n    // If component has display:none, offset will return 0\n    // TODO: handle display:none and no dimension style using px\n    return parseInt(this.el_['offset' + toTitleCase(widthOrHeight)], 10);\n  };\n\n  /**\n   * Get the width or the height of the `Component` elements computed style. Uses\n   * `window.getComputedStyle`.\n   *\n   * @param {string} widthOrHeight\n   *        A string containing 'width' or 'height'. Whichever one you want to get.\n   *\n   * @return {number}\n   *         The dimension that gets asked for or 0 if nothing was set\n   *         for that dimension.\n   */\n\n\n  Component.prototype.currentDimension = function currentDimension(widthOrHeight) {\n    var computedWidthOrHeight = 0;\n\n    if (widthOrHeight !== 'width' && widthOrHeight !== 'height') {\n      throw new Error('currentDimension only accepts width or height value');\n    }\n\n    if (typeof window$1.getComputedStyle === 'function') {\n      var computedStyle = window$1.getComputedStyle(this.el_);\n\n      computedWidthOrHeight = computedStyle.getPropertyValue(widthOrHeight) || computedStyle[widthOrHeight];\n    }\n\n    // remove 'px' from variable and parse as integer\n    computedWidthOrHeight = parseFloat(computedWidthOrHeight);\n\n    // if the computed value is still 0, it's possible that the browser is lying\n    // and we want to check the offset values.\n    // This code also runs wherever getComputedStyle doesn't exist.\n    if (computedWidthOrHeight === 0) {\n      var rule = 'offset' + toTitleCase(widthOrHeight);\n\n      computedWidthOrHeight = this.el_[rule];\n    }\n\n    return computedWidthOrHeight;\n  };\n\n  /**\n   * An object that contains width and height values of the `Component`s\n   * computed style. Uses `window.getComputedStyle`.\n   *\n   * @typedef {Object} Component~DimensionObject\n   *\n   * @property {number} width\n   *           The width of the `Component`s computed style.\n   *\n   * @property {number} height\n   *           The height of the `Component`s computed style.\n   */\n\n  /**\n   * Get an object that contains width and height values of the `Component`s\n   * computed style.\n   *\n   * @return {Component~DimensionObject}\n   *         The dimensions of the components element\n   */\n\n\n  Component.prototype.currentDimensions = function currentDimensions() {\n    return {\n      width: this.currentDimension('width'),\n      height: this.currentDimension('height')\n    };\n  };\n\n  /**\n   * Get the width of the `Component`s computed style. Uses `window.getComputedStyle`.\n   *\n   * @return {number} width\n   *           The width of the `Component`s computed style.\n   */\n\n\n  Component.prototype.currentWidth = function currentWidth() {\n    return this.currentDimension('width');\n  };\n\n  /**\n   * Get the height of the `Component`s computed style. Uses `window.getComputedStyle`.\n   *\n   * @return {number} height\n   *           The height of the `Component`s computed style.\n   */\n\n\n  Component.prototype.currentHeight = function currentHeight() {\n    return this.currentDimension('height');\n  };\n\n  /**\n   * Set the focus to this component\n   */\n\n\n  Component.prototype.focus = function focus() {\n    this.el_.focus();\n  };\n\n  /**\n   * Remove the focus from this component\n   */\n\n\n  Component.prototype.blur = function blur() {\n    this.el_.blur();\n  };\n\n  /**\n   * Emit a 'tap' events when touch event support gets detected. This gets used to\n   * support toggling the controls through a tap on the video. They get enabled\n   * because every sub-component would have extra overhead otherwise.\n   *\n   * @private\n   * @fires Component#tap\n   * @listens Component#touchstart\n   * @listens Component#touchmove\n   * @listens Component#touchleave\n   * @listens Component#touchcancel\n   * @listens Component#touchend\n    */\n\n\n  Component.prototype.emitTapEvents = function emitTapEvents() {\n    // Track the start time so we can determine how long the touch lasted\n    var touchStart = 0;\n    var firstTouch = null;\n\n    // Maximum movement allowed during a touch event to still be considered a tap\n    // Other popular libs use anywhere from 2 (hammer.js) to 15,\n    // so 10 seems like a nice, round number.\n    var tapMovementThreshold = 10;\n\n    // The maximum length a touch can be while still being considered a tap\n    var touchTimeThreshold = 200;\n\n    var couldBeTap = void 0;\n\n    this.on('touchstart', function (event) {\n      // If more than one finger, don't consider treating this as a click\n      if (event.touches.length === 1) {\n        // Copy pageX/pageY from the object\n        firstTouch = {\n          pageX: event.touches[0].pageX,\n          pageY: event.touches[0].pageY\n        };\n        // Record start time so we can detect a tap vs. \"touch and hold\"\n        touchStart = new Date().getTime();\n        // Reset couldBeTap tracking\n        couldBeTap = true;\n      }\n    });\n\n    this.on('touchmove', function (event) {\n      // If more than one finger, don't consider treating this as a click\n      if (event.touches.length > 1) {\n        couldBeTap = false;\n      } else if (firstTouch) {\n        // Some devices will throw touchmoves for all but the slightest of taps.\n        // So, if we moved only a small distance, this could still be a tap\n        var xdiff = event.touches[0].pageX - firstTouch.pageX;\n        var ydiff = event.touches[0].pageY - firstTouch.pageY;\n        var touchDistance = Math.sqrt(xdiff * xdiff + ydiff * ydiff);\n\n        if (touchDistance > tapMovementThreshold) {\n          couldBeTap = false;\n        }\n      }\n    });\n\n    var noTap = function noTap() {\n      couldBeTap = false;\n    };\n\n    // TODO: Listen to the original target. http://youtu.be/DujfpXOKUp8?t=13m8s\n    this.on('touchleave', noTap);\n    this.on('touchcancel', noTap);\n\n    // When the touch ends, measure how long it took and trigger the appropriate\n    // event\n    this.on('touchend', function (event) {\n      firstTouch = null;\n      // Proceed only if the touchmove/leave/cancel event didn't happen\n      if (couldBeTap === true) {\n        // Measure how long the touch lasted\n        var touchTime = new Date().getTime() - touchStart;\n\n        // Make sure the touch was less than the threshold to be considered a tap\n        if (touchTime < touchTimeThreshold) {\n          // Don't let browser turn this into a click\n          event.preventDefault();\n          /**\n           * Triggered when a `Component` is tapped.\n           *\n           * @event Component#tap\n           * @type {EventTarget~Event}\n           */\n          this.trigger('tap');\n          // It may be good to copy the touchend event object and change the\n          // type to tap, if the other event properties aren't exact after\n          // Events.fixEvent runs (e.g. event.target)\n        }\n      }\n    });\n  };\n\n  /**\n   * This function reports user activity whenever touch events happen. This can get\n   * turned off by any sub-components that wants touch events to act another way.\n   *\n   * Report user touch activity when touch events occur. User activity gets used to\n   * determine when controls should show/hide. It is simple when it comes to mouse\n   * events, because any mouse event should show the controls. So we capture mouse\n   * events that bubble up to the player and report activity when that happens.\n   * With touch events it isn't as easy as `touchstart` and `touchend` toggle player\n   * controls. So touch events can't help us at the player level either.\n   *\n   * User activity gets checked asynchronously. So what could happen is a tap event\n   * on the video turns the controls off. Then the `touchend` event bubbles up to\n   * the player. Which, if it reported user activity, would turn the controls right\n   * back on. We also don't want to completely block touch events from bubbling up.\n   * Furthermore a `touchmove` event and anything other than a tap, should not turn\n   * controls back on.\n   *\n   * @listens Component#touchstart\n   * @listens Component#touchmove\n   * @listens Component#touchend\n   * @listens Component#touchcancel\n   */\n\n\n  Component.prototype.enableTouchActivity = function enableTouchActivity() {\n    // Don't continue if the root player doesn't support reporting user activity\n    if (!this.player() || !this.player().reportUserActivity) {\n      return;\n    }\n\n    // listener for reporting that the user is active\n    var report = bind(this.player(), this.player().reportUserActivity);\n\n    var touchHolding = void 0;\n\n    this.on('touchstart', function () {\n      report();\n      // For as long as the they are touching the device or have their mouse down,\n      // we consider them active even if they're not moving their finger or mouse.\n      // So we want to continue to update that they are active\n      this.clearInterval(touchHolding);\n      // report at the same interval as activityCheck\n      touchHolding = this.setInterval(report, 250);\n    });\n\n    var touchEnd = function touchEnd(event) {\n      report();\n      // stop the interval that maintains activity if the touch is holding\n      this.clearInterval(touchHolding);\n    };\n\n    this.on('touchmove', report);\n    this.on('touchend', touchEnd);\n    this.on('touchcancel', touchEnd);\n  };\n\n  /**\n   * A callback that has no parameters and is bound into `Component`s context.\n   *\n   * @callback Component~GenericCallback\n   * @this Component\n   */\n\n  /**\n   * Creates a function that runs after an `x` millisecond timeout. This function is a\n   * wrapper around `window.setTimeout`. There are a few reasons to use this one\n   * instead though:\n   * 1. It gets cleared via  {@link Component#clearTimeout} when\n   *    {@link Component#dispose} gets called.\n   * 2. The function callback will gets turned into a {@link Component~GenericCallback}\n   *\n   * > Note: You can't use `window.clearTimeout` on the id returned by this function. This\n   *         will cause its dispose listener not to get cleaned up! Please use\n   *         {@link Component#clearTimeout} or {@link Component#dispose} instead.\n   *\n   * @param {Component~GenericCallback} fn\n   *        The function that will be run after `timeout`.\n   *\n   * @param {number} timeout\n   *        Timeout in milliseconds to delay before executing the specified function.\n   *\n   * @return {number}\n   *         Returns a timeout ID that gets used to identify the timeout. It can also\n   *         get used in {@link Component#clearTimeout} to clear the timeout that\n   *         was set.\n   *\n   * @listens Component#dispose\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout}\n   */\n\n\n  Component.prototype.setTimeout = function setTimeout(fn, timeout) {\n    var _this2 = this;\n\n    // declare as variables so they are properly available in timeout function\n    // eslint-disable-next-line\n    var timeoutId, disposeFn;\n\n    fn = bind(this, fn);\n\n    timeoutId = window$1.setTimeout(function () {\n      _this2.off('dispose', disposeFn);\n      fn();\n    }, timeout);\n\n    disposeFn = function disposeFn() {\n      return _this2.clearTimeout(timeoutId);\n    };\n\n    disposeFn.guid = 'vjs-timeout-' + timeoutId;\n\n    this.on('dispose', disposeFn);\n\n    return timeoutId;\n  };\n\n  /**\n   * Clears a timeout that gets created via `window.setTimeout` or\n   * {@link Component#setTimeout}. If you set a timeout via {@link Component#setTimeout}\n   * use this function instead of `window.clearTimout`. If you don't your dispose\n   * listener will not get cleaned up until {@link Component#dispose}!\n   *\n   * @param {number} timeoutId\n   *        The id of the timeout to clear. The return value of\n   *        {@link Component#setTimeout} or `window.setTimeout`.\n   *\n   * @return {number}\n   *         Returns the timeout id that was cleared.\n   *\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearTimeout}\n   */\n\n\n  Component.prototype.clearTimeout = function clearTimeout(timeoutId) {\n    window$1.clearTimeout(timeoutId);\n\n    var disposeFn = function disposeFn() {};\n\n    disposeFn.guid = 'vjs-timeout-' + timeoutId;\n\n    this.off('dispose', disposeFn);\n\n    return timeoutId;\n  };\n\n  /**\n   * Creates a function that gets run every `x` milliseconds. This function is a wrapper\n   * around `window.setInterval`. There are a few reasons to use this one instead though.\n   * 1. It gets cleared via  {@link Component#clearInterval} when\n   *    {@link Component#dispose} gets called.\n   * 2. The function callback will be a {@link Component~GenericCallback}\n   *\n   * @param {Component~GenericCallback} fn\n   *        The function to run every `x` seconds.\n   *\n   * @param {number} interval\n   *        Execute the specified function every `x` milliseconds.\n   *\n   * @return {number}\n   *         Returns an id that can be used to identify the interval. It can also be be used in\n   *         {@link Component#clearInterval} to clear the interval.\n   *\n   * @listens Component#dispose\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval}\n   */\n\n\n  Component.prototype.setInterval = function setInterval(fn, interval) {\n    var _this3 = this;\n\n    fn = bind(this, fn);\n\n    var intervalId = window$1.setInterval(fn, interval);\n\n    var disposeFn = function disposeFn() {\n      return _this3.clearInterval(intervalId);\n    };\n\n    disposeFn.guid = 'vjs-interval-' + intervalId;\n\n    this.on('dispose', disposeFn);\n\n    return intervalId;\n  };\n\n  /**\n   * Clears an interval that gets created via `window.setInterval` or\n   * {@link Component#setInterval}. If you set an inteval via {@link Component#setInterval}\n   * use this function instead of `window.clearInterval`. If you don't your dispose\n   * listener will not get cleaned up until {@link Component#dispose}!\n   *\n   * @param {number} intervalId\n   *        The id of the interval to clear. The return value of\n   *        {@link Component#setInterval} or `window.setInterval`.\n   *\n   * @return {number}\n   *         Returns the interval id that was cleared.\n   *\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearInterval}\n   */\n\n\n  Component.prototype.clearInterval = function clearInterval(intervalId) {\n    window$1.clearInterval(intervalId);\n\n    var disposeFn = function disposeFn() {};\n\n    disposeFn.guid = 'vjs-interval-' + intervalId;\n\n    this.off('dispose', disposeFn);\n\n    return intervalId;\n  };\n\n  /**\n   * Queues up a callback to be passed to requestAnimationFrame (rAF), but\n   * with a few extra bonuses:\n   *\n   * - Supports browsers that do not support rAF by falling back to\n   *   {@link Component#setTimeout}.\n   *\n   * - The callback is turned into a {@link Component~GenericCallback} (i.e.\n   *   bound to the component).\n   *\n   * - Automatic cancellation of the rAF callback is handled if the component\n   *   is disposed before it is called.\n   *\n   * @param  {Component~GenericCallback} fn\n   *         A function that will be bound to this component and executed just\n   *         before the browser's next repaint.\n   *\n   * @return {number}\n   *         Returns an rAF ID that gets used to identify the timeout. It can\n   *         also be used in {@link Component#cancelAnimationFrame} to cancel\n   *         the animation frame callback.\n   *\n   * @listens Component#dispose\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame}\n   */\n\n\n  Component.prototype.requestAnimationFrame = function requestAnimationFrame(fn) {\n    var _this4 = this;\n\n    // declare as variables so they are properly available in rAF function\n    // eslint-disable-next-line\n    var id, disposeFn;\n\n    if (this.supportsRaf_) {\n      fn = bind(this, fn);\n\n      id = window$1.requestAnimationFrame(function () {\n        _this4.off('dispose', disposeFn);\n        fn();\n      });\n\n      disposeFn = function disposeFn() {\n        return _this4.cancelAnimationFrame(id);\n      };\n\n      disposeFn.guid = 'vjs-raf-' + id;\n      this.on('dispose', disposeFn);\n\n      return id;\n    }\n\n    // Fall back to using a timer.\n    return this.setTimeout(fn, 1000 / 60);\n  };\n\n  /**\n   * Cancels a queued callback passed to {@link Component#requestAnimationFrame}\n   * (rAF).\n   *\n   * If you queue an rAF callback via {@link Component#requestAnimationFrame},\n   * use this function instead of `window.cancelAnimationFrame`. If you don't,\n   * your dispose listener will not get cleaned up until {@link Component#dispose}!\n   *\n   * @param {number} id\n   *        The rAF ID to clear. The return value of {@link Component#requestAnimationFrame}.\n   *\n   * @return {number}\n   *         Returns the rAF ID that was cleared.\n   *\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/window/cancelAnimationFrame}\n   */\n\n\n  Component.prototype.cancelAnimationFrame = function cancelAnimationFrame(id) {\n    if (this.supportsRaf_) {\n      window$1.cancelAnimationFrame(id);\n\n      var disposeFn = function disposeFn() {};\n\n      disposeFn.guid = 'vjs-raf-' + id;\n\n      this.off('dispose', disposeFn);\n\n      return id;\n    }\n\n    // Fall back to using a timer.\n    return this.clearTimeout(id);\n  };\n\n  /**\n   * Register a `Component` with `videojs` given the name and the component.\n   *\n   * > NOTE: {@link Tech}s should not be registered as a `Component`. {@link Tech}s\n   *         should be registered using {@link Tech.registerTech} or\n   *         {@link videojs:videojs.registerTech}.\n   *\n   * > NOTE: This function can also be seen on videojs as\n   *         {@link videojs:videojs.registerComponent}.\n   *\n   * @param {string} name\n   *        The name of the `Component` to register.\n   *\n   * @param {Component} ComponentToRegister\n   *        The `Component` class to register.\n   *\n   * @return {Component}\n   *         The `Component` that was registered.\n   */\n\n\n  Component.registerComponent = function registerComponent(name, ComponentToRegister) {\n    if (typeof name !== 'string' || !name) {\n      throw new Error('Illegal component name, \"' + name + '\"; must be a non-empty string.');\n    }\n\n    var Tech = Component.getComponent('Tech');\n\n    // We need to make sure this check is only done if Tech has been registered.\n    var isTech = Tech && Tech.isTech(ComponentToRegister);\n    var isComp = Component === ComponentToRegister || Component.prototype.isPrototypeOf(ComponentToRegister.prototype);\n\n    if (isTech || !isComp) {\n      var reason = void 0;\n\n      if (isTech) {\n        reason = 'techs must be registered using Tech.registerTech()';\n      } else {\n        reason = 'must be a Component subclass';\n      }\n\n      throw new Error('Illegal component, \"' + name + '\"; ' + reason + '.');\n    }\n\n    name = toTitleCase(name);\n\n    if (!Component.components_) {\n      Component.components_ = {};\n    }\n\n    var Player = Component.getComponent('Player');\n\n    if (name === 'Player' && Player && Player.players) {\n      var players = Player.players;\n      var playerNames = Object.keys(players);\n\n      // If we have players that were disposed, then their name will still be\n      // in Players.players. So, we must loop through and verify that the value\n      // for each item is not null. This allows registration of the Player component\n      // after all players have been disposed or before any were created.\n      if (players && playerNames.length > 0 && playerNames.map(function (pname) {\n        return players[pname];\n      }).every(Boolean)) {\n        throw new Error('Can not register Player component after player has been created.');\n      }\n    }\n\n    Component.components_[name] = ComponentToRegister;\n\n    return ComponentToRegister;\n  };\n\n  /**\n   * Get a `Component` based on the name it was registered with.\n   *\n   * @param {string} name\n   *        The Name of the component to get.\n   *\n   * @return {Component}\n   *         The `Component` that got registered under the given name.\n   *\n   * @deprecated In `videojs` 6 this will not return `Component`s that were not\n   *             registered using {@link Component.registerComponent}. Currently we\n   *             check the global `videojs` object for a `Component` name and\n   *             return that if it exists.\n   */\n\n\n  Component.getComponent = function getComponent(name) {\n    if (!name) {\n      return;\n    }\n\n    name = toTitleCase(name);\n\n    if (Component.components_ && Component.components_[name]) {\n      return Component.components_[name];\n    }\n  };\n\n  return Component;\n}();\n\n/**\n * Whether or not this component supports `requestAnimationFrame`.\n *\n * This is exposed primarily for testing purposes.\n *\n * @private\n * @type {Boolean}\n */\n\n\nComponent.prototype.supportsRaf_ = typeof window$1.requestAnimationFrame === 'function' && typeof window$1.cancelAnimationFrame === 'function';\n\nComponent.registerComponent('Component', Component);\n\n/**\n * @file browser.js\n * @module browser\n */\n\nvar USER_AGENT = window$1.navigator && window$1.navigator.userAgent || '';\nvar webkitVersionMap = /AppleWebKit\\/([\\d.]+)/i.exec(USER_AGENT);\nvar appleWebkitVersion = webkitVersionMap ? parseFloat(webkitVersionMap.pop()) : null;\n\n/*\n * Device is an iPhone\n *\n * @type {Boolean}\n * @constant\n * @private\n */\nvar IS_IPAD = /iPad/i.test(USER_AGENT);\n\n// The Facebook app's UIWebView identifies as both an iPhone and iPad, so\n// to identify iPhones, we need to exclude iPads.\n// http://artsy.github.io/blog/2012/10/18/the-perils-of-ios-user-agent-sniffing/\nvar IS_IPHONE = /iPhone/i.test(USER_AGENT) && !IS_IPAD;\nvar IS_IPOD = /iPod/i.test(USER_AGENT);\nvar IS_IOS = IS_IPHONE || IS_IPAD || IS_IPOD;\n\nvar IOS_VERSION = function () {\n  var match = USER_AGENT.match(/OS (\\d+)_/i);\n\n  if (match && match[1]) {\n    return match[1];\n  }\n  return null;\n}();\n\nvar IS_ANDROID = /Android/i.test(USER_AGENT);\nvar ANDROID_VERSION = function () {\n  // This matches Android Major.Minor.Patch versions\n  // ANDROID_VERSION is Major.Minor as a Number, if Minor isn't available, then only Major is returned\n  var match = USER_AGENT.match(/Android (\\d+)(?:\\.(\\d+))?(?:\\.(\\d+))*/i);\n\n  if (!match) {\n    return null;\n  }\n\n  var major = match[1] && parseFloat(match[1]);\n  var minor = match[2] && parseFloat(match[2]);\n\n  if (major && minor) {\n    return parseFloat(match[1] + '.' + match[2]);\n  } else if (major) {\n    return major;\n  }\n  return null;\n}();\n\nvar IS_NATIVE_ANDROID = IS_ANDROID && ANDROID_VERSION < 5 && appleWebkitVersion < 537;\n\nvar IS_FIREFOX = /Firefox/i.test(USER_AGENT);\nvar IS_EDGE = /Edge/i.test(USER_AGENT);\nvar IS_CHROME = !IS_EDGE && (/Chrome/i.test(USER_AGENT) || /CriOS/i.test(USER_AGENT));\nvar CHROME_VERSION = function () {\n  var match = USER_AGENT.match(/(Chrome|CriOS)\\/(\\d+)/);\n\n  if (match && match[2]) {\n    return parseFloat(match[2]);\n  }\n  return null;\n}();\nvar IE_VERSION = function () {\n  var result = /MSIE\\s(\\d+)\\.\\d/.exec(USER_AGENT);\n  var version = result && parseFloat(result[1]);\n\n  if (!version && /Trident\\/7.0/i.test(USER_AGENT) && /rv:11.0/.test(USER_AGENT)) {\n    // IE 11 has a different user agent string than other IE versions\n    version = 11.0;\n  }\n\n  return version;\n}();\n\nvar IS_SAFARI = /Safari/i.test(USER_AGENT) && !IS_CHROME && !IS_ANDROID && !IS_EDGE;\nvar IS_ANY_SAFARI = (IS_SAFARI || IS_IOS) && !IS_CHROME;\n\nvar TOUCH_ENABLED = isReal() && ('ontouchstart' in window$1 || window$1.navigator.maxTouchPoints || window$1.DocumentTouch && window$1.document instanceof window$1.DocumentTouch);\n\nvar browser = /*#__PURE__*/Object.freeze({\n  IS_IPAD: IS_IPAD,\n  IS_IPHONE: IS_IPHONE,\n  IS_IPOD: IS_IPOD,\n  IS_IOS: IS_IOS,\n  IOS_VERSION: IOS_VERSION,\n  IS_ANDROID: IS_ANDROID,\n  ANDROID_VERSION: ANDROID_VERSION,\n  IS_NATIVE_ANDROID: IS_NATIVE_ANDROID,\n  IS_FIREFOX: IS_FIREFOX,\n  IS_EDGE: IS_EDGE,\n  IS_CHROME: IS_CHROME,\n  CHROME_VERSION: CHROME_VERSION,\n  IE_VERSION: IE_VERSION,\n  IS_SAFARI: IS_SAFARI,\n  IS_ANY_SAFARI: IS_ANY_SAFARI,\n  TOUCH_ENABLED: TOUCH_ENABLED\n});\n\n/**\n * @file time-ranges.js\n * @module time-ranges\n */\n\n/**\n * Returns the time for the specified index at the start or end\n * of a TimeRange object.\n *\n * @function time-ranges:indexFunction\n *\n * @param {number} [index=0]\n *        The range number to return the time for.\n *\n * @return {number}\n *         The time that offset at the specified index.\n *\n * @depricated index must be set to a value, in the future this will throw an error.\n */\n\n/**\n * An object that contains ranges of time for various reasons.\n *\n * @typedef {Object} TimeRange\n *\n * @property {number} length\n *           The number of time ranges represented by this Object\n *\n * @property {time-ranges:indexFunction} start\n *           Returns the time offset at which a specified time range begins.\n *\n * @property {time-ranges:indexFunction} end\n *           Returns the time offset at which a specified time range ends.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges\n */\n\n/**\n * Check if any of the time ranges are over the maximum index.\n *\n * @param {string} fnName\n *        The function name to use for logging\n *\n * @param {number} index\n *        The index to check\n *\n * @param {number} maxIndex\n *        The maximum possible index\n *\n * @throws {Error} if the timeRanges provided are over the maxIndex\n */\nfunction rangeCheck(fnName, index, maxIndex) {\n  if (typeof index !== 'number' || index < 0 || index > maxIndex) {\n    throw new Error('Failed to execute \\'' + fnName + '\\' on \\'TimeRanges\\': The index provided (' + index + ') is non-numeric or out of bounds (0-' + maxIndex + ').');\n  }\n}\n\n/**\n * Get the time for the specified index at the start or end\n * of a TimeRange object.\n *\n * @param {string} fnName\n *        The function name to use for logging\n *\n * @param {string} valueIndex\n *        The property that should be used to get the time. should be 'start' or 'end'\n *\n * @param {Array} ranges\n *        An array of time ranges\n *\n * @param {Array} [rangeIndex=0]\n *        The index to start the search at\n *\n * @return {number}\n *         The time that offset at the specified index.\n *\n *\n * @depricated rangeIndex must be set to a value, in the future this will throw an error.\n * @throws {Error} if rangeIndex is more than the length of ranges\n */\nfunction getRange(fnName, valueIndex, ranges, rangeIndex) {\n  rangeCheck(fnName, rangeIndex, ranges.length - 1);\n  return ranges[rangeIndex][valueIndex];\n}\n\n/**\n * Create a time range object given ranges of time.\n *\n * @param {Array} [ranges]\n *        An array of time ranges.\n */\nfunction createTimeRangesObj(ranges) {\n  if (ranges === undefined || ranges.length === 0) {\n    return {\n      length: 0,\n      start: function start() {\n        throw new Error('This TimeRanges object is empty');\n      },\n      end: function end() {\n        throw new Error('This TimeRanges object is empty');\n      }\n    };\n  }\n  return {\n    length: ranges.length,\n    start: getRange.bind(null, 'start', 0, ranges),\n    end: getRange.bind(null, 'end', 1, ranges)\n  };\n}\n\n/**\n * Should create a fake `TimeRange` object which mimics an HTML5 time range instance.\n *\n * @param {number|Array} start\n *        The start of a single range or an array of ranges\n *\n * @param {number} end\n *        The end of a single range.\n *\n * @private\n */\nfunction createTimeRanges(start, end) {\n  if (Array.isArray(start)) {\n    return createTimeRangesObj(start);\n  } else if (start === undefined || end === undefined) {\n    return createTimeRangesObj();\n  }\n  return createTimeRangesObj([[start, end]]);\n}\n\n/**\n * @file buffer.js\n * @module buffer\n */\n\n/**\n * Compute the percentage of the media that has been buffered.\n *\n * @param {TimeRange} buffered\n *        The current `TimeRange` object representing buffered time ranges\n *\n * @param {number} duration\n *        Total duration of the media\n *\n * @return {number}\n *         Percent buffered of the total duration in decimal form.\n */\nfunction bufferedPercent(buffered, duration) {\n  var bufferedDuration = 0;\n  var start = void 0;\n  var end = void 0;\n\n  if (!duration) {\n    return 0;\n  }\n\n  if (!buffered || !buffered.length) {\n    buffered = createTimeRanges(0, 0);\n  }\n\n  for (var i = 0; i < buffered.length; i++) {\n    start = buffered.start(i);\n    end = buffered.end(i);\n\n    // buffered end can be bigger than duration by a very small fraction\n    if (end > duration) {\n      end = duration;\n    }\n\n    bufferedDuration += end - start;\n  }\n\n  return bufferedDuration / duration;\n}\n\n/**\n * @file fullscreen-api.js\n * @module fullscreen-api\n * @private\n */\n\n/**\n * Store the browser-specific methods for the fullscreen API.\n *\n * @type {Object}\n * @see [Specification]{@link https://fullscreen.spec.whatwg.org}\n * @see [Map Approach From Screenfull.js]{@link https://github.com/sindresorhus/screenfull.js}\n */\nvar FullscreenApi = {};\n\n// browser API methods\nvar apiMap = [['requestFullscreen', 'exitFullscreen', 'fullscreenElement', 'fullscreenEnabled', 'fullscreenchange', 'fullscreenerror'],\n// WebKit\n['webkitRequestFullscreen', 'webkitExitFullscreen', 'webkitFullscreenElement', 'webkitFullscreenEnabled', 'webkitfullscreenchange', 'webkitfullscreenerror'],\n// Old WebKit (Safari 5.1)\n['webkitRequestFullScreen', 'webkitCancelFullScreen', 'webkitCurrentFullScreenElement', 'webkitCancelFullScreen', 'webkitfullscreenchange', 'webkitfullscreenerror'],\n// Mozilla\n['mozRequestFullScreen', 'mozCancelFullScreen', 'mozFullScreenElement', 'mozFullScreenEnabled', 'mozfullscreenchange', 'mozfullscreenerror'],\n// Microsoft\n['msRequestFullscreen', 'msExitFullscreen', 'msFullscreenElement', 'msFullscreenEnabled', 'MSFullscreenChange', 'MSFullscreenError']];\n\nvar specApi = apiMap[0];\nvar browserApi = void 0;\n\n// determine the supported set of functions\nfor (var i = 0; i < apiMap.length; i++) {\n  // check for exitFullscreen function\n  if (apiMap[i][1] in document) {\n    browserApi = apiMap[i];\n    break;\n  }\n}\n\n// map the browser API names to the spec API names\nif (browserApi) {\n  for (var _i = 0; _i < browserApi.length; _i++) {\n    FullscreenApi[specApi[_i]] = browserApi[_i];\n  }\n}\n\n/**\n * @file media-error.js\n */\n\n/**\n * A Custom `MediaError` class which mimics the standard HTML5 `MediaError` class.\n *\n * @param {number|string|Object|MediaError} value\n *        This can be of multiple types:\n *        - number: should be a standard error code\n *        - string: an error message (the code will be 0)\n *        - Object: arbitrary properties\n *        - `MediaError` (native): used to populate a video.js `MediaError` object\n *        - `MediaError` (video.js): will return itself if it's already a\n *          video.js `MediaError` object.\n *\n * @see [MediaError Spec]{@link https://dev.w3.org/html5/spec-author-view/video.html#mediaerror}\n * @see [Encrypted MediaError Spec]{@link https://www.w3.org/TR/2013/WD-encrypted-media-20130510/#error-codes}\n *\n * @class MediaError\n */\nfunction MediaError(value) {\n\n  // Allow redundant calls to this constructor to avoid having `instanceof`\n  // checks peppered around the code.\n  if (value instanceof MediaError) {\n    return value;\n  }\n\n  if (typeof value === 'number') {\n    this.code = value;\n  } else if (typeof value === 'string') {\n    // default code is zero, so this is a custom error\n    this.message = value;\n  } else if (isObject(value)) {\n\n    // We assign the `code` property manually because native `MediaError` objects\n    // do not expose it as an own/enumerable property of the object.\n    if (typeof value.code === 'number') {\n      this.code = value.code;\n    }\n\n    assign(this, value);\n  }\n\n  if (!this.message) {\n    this.message = MediaError.defaultMessages[this.code] || '';\n  }\n}\n\n/**\n * The error code that refers two one of the defined `MediaError` types\n *\n * @type {Number}\n */\nMediaError.prototype.code = 0;\n\n/**\n * An optional message that to show with the error. Message is not part of the HTML5\n * video spec but allows for more informative custom errors.\n *\n * @type {String}\n */\nMediaError.prototype.message = '';\n\n/**\n * An optional status code that can be set by plugins to allow even more detail about\n * the error. For example a plugin might provide a specific HTTP status code and an\n * error message for that code. Then when the plugin gets that error this class will\n * know how to display an error message for it. This allows a custom message to show\n * up on the `Player` error overlay.\n *\n * @type {Array}\n */\nMediaError.prototype.status = null;\n\n/**\n * Errors indexed by the W3C standard. The order **CANNOT CHANGE**! See the\n * specification listed under {@link MediaError} for more information.\n *\n * @enum {array}\n * @readonly\n * @property {string} 0 - MEDIA_ERR_CUSTOM\n * @property {string} 1 - MEDIA_ERR_CUSTOM\n * @property {string} 2 - MEDIA_ERR_ABORTED\n * @property {string} 3 - MEDIA_ERR_NETWORK\n * @property {string} 4 - MEDIA_ERR_SRC_NOT_SUPPORTED\n * @property {string} 5 - MEDIA_ERR_ENCRYPTED\n */\nMediaError.errorTypes = ['MEDIA_ERR_CUSTOM', 'MEDIA_ERR_ABORTED', 'MEDIA_ERR_NETWORK', 'MEDIA_ERR_DECODE', 'MEDIA_ERR_SRC_NOT_SUPPORTED', 'MEDIA_ERR_ENCRYPTED'];\n\n/**\n * The default `MediaError` messages based on the {@link MediaError.errorTypes}.\n *\n * @type {Array}\n * @constant\n */\nMediaError.defaultMessages = {\n  1: 'You aborted the media playback',\n  2: 'A network error caused the media download to fail part-way.',\n  3: 'The media playback was aborted due to a corruption problem or because the media used features your browser did not support.',\n  4: 'The media could not be loaded, either because the server or network failed or because the format is not supported.',\n  5: 'The media is encrypted and we do not have the keys to decrypt it.'\n};\n\n// Add types as properties on MediaError\n// e.g. MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED = 4;\nfor (var errNum = 0; errNum < MediaError.errorTypes.length; errNum++) {\n  MediaError[MediaError.errorTypes[errNum]] = errNum;\n  // values should be accessible on both the class and instance\n  MediaError.prototype[MediaError.errorTypes[errNum]] = errNum;\n}\n\n/**\n * Returns whether an object is `Promise`-like (i.e. has a `then` method).\n *\n * @param  {Object}  value\n *         An object that may or may not be `Promise`-like.\n *\n * @return {Boolean}\n *         Whether or not the object is `Promise`-like.\n */\nfunction isPromise(value) {\n  return value !== undefined && value !== null && typeof value.then === 'function';\n}\n\n/**\n * Silence a Promise-like object.\n *\n * This is useful for avoiding non-harmful, but potentially confusing \"uncaught\n * play promise\" rejection error messages.\n *\n * @param  {Object} value\n *         An object that may or may not be `Promise`-like.\n */\nfunction silencePromise(value) {\n  if (isPromise(value)) {\n    value.then(null, function (e) {});\n  }\n}\n\n/**\n * @file text-track-list-converter.js Utilities for capturing text track state and\n * re-creating tracks based on a capture.\n *\n * @module text-track-list-converter\n */\n\n/**\n * Examine a single {@link TextTrack} and return a JSON-compatible javascript object that\n * represents the {@link TextTrack}'s state.\n *\n * @param {TextTrack} track\n *        The text track to query.\n *\n * @return {Object}\n *         A serializable javascript representation of the TextTrack.\n * @private\n */\nvar trackToJson_ = function trackToJson_(track) {\n  var ret = ['kind', 'label', 'language', 'id', 'inBandMetadataTrackDispatchType', 'mode', 'src'].reduce(function (acc, prop, i) {\n\n    if (track[prop]) {\n      acc[prop] = track[prop];\n    }\n\n    return acc;\n  }, {\n    cues: track.cues && Array.prototype.map.call(track.cues, function (cue) {\n      return {\n        startTime: cue.startTime,\n        endTime: cue.endTime,\n        text: cue.text,\n        id: cue.id\n      };\n    })\n  });\n\n  return ret;\n};\n\n/**\n * Examine a {@link Tech} and return a JSON-compatible javascript array that represents the\n * state of all {@link TextTrack}s currently configured. The return array is compatible with\n * {@link text-track-list-converter:jsonToTextTracks}.\n *\n * @param {Tech} tech\n *        The tech object to query\n *\n * @return {Array}\n *         A serializable javascript representation of the {@link Tech}s\n *         {@link TextTrackList}.\n */\nvar textTracksToJson = function textTracksToJson(tech) {\n\n  var trackEls = tech.$$('track');\n\n  var trackObjs = Array.prototype.map.call(trackEls, function (t) {\n    return t.track;\n  });\n  var tracks = Array.prototype.map.call(trackEls, function (trackEl) {\n    var json = trackToJson_(trackEl.track);\n\n    if (trackEl.src) {\n      json.src = trackEl.src;\n    }\n    return json;\n  });\n\n  return tracks.concat(Array.prototype.filter.call(tech.textTracks(), function (track) {\n    return trackObjs.indexOf(track) === -1;\n  }).map(trackToJson_));\n};\n\n/**\n * Create a set of remote {@link TextTrack}s on a {@link Tech} based on an array of javascript\n * object {@link TextTrack} representations.\n *\n * @param {Array} json\n *        An array of `TextTrack` representation objects, like those that would be\n *        produced by `textTracksToJson`.\n *\n * @param {Tech} tech\n *        The `Tech` to create the `TextTrack`s on.\n */\nvar jsonToTextTracks = function jsonToTextTracks(json, tech) {\n  json.forEach(function (track) {\n    var addedTrack = tech.addRemoteTextTrack(track).track;\n\n    if (!track.src && track.cues) {\n      track.cues.forEach(function (cue) {\n        return addedTrack.addCue(cue);\n      });\n    }\n  });\n\n  return tech.textTracks();\n};\n\nvar textTrackConverter = { textTracksToJson: textTracksToJson, jsonToTextTracks: jsonToTextTracks, trackToJson_: trackToJson_ };\n\n/**\n * @file modal-dialog.js\n */\n\nvar MODAL_CLASS_NAME = 'vjs-modal-dialog';\nvar ESC = 27;\n\n/**\n * The `ModalDialog` displays over the video and its controls, which blocks\n * interaction with the player until it is closed.\n *\n * Modal dialogs include a \"Close\" button and will close when that button\n * is activated - or when ESC is pressed anywhere.\n *\n * @extends Component\n */\n\nvar ModalDialog = function (_Component) {\n  inherits(ModalDialog, _Component);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Mixed} [options.content=undefined]\n   *        Provide customized content for this modal.\n   *\n   * @param {string} [options.description]\n   *        A text description for the modal, primarily for accessibility.\n   *\n   * @param {boolean} [options.fillAlways=false]\n   *        Normally, modals are automatically filled only the first time\n   *        they open. This tells the modal to refresh its content\n   *        every time it opens.\n   *\n   * @param {string} [options.label]\n   *        A text label for the modal, primarily for accessibility.\n   *\n   * @param {boolean} [options.temporary=true]\n   *        If `true`, the modal can only be opened once; it will be\n   *        disposed as soon as it's closed.\n   *\n   * @param {boolean} [options.uncloseable=false]\n   *        If `true`, the user will not be able to close the modal\n   *        through the UI in the normal ways. Programmatic closing is\n   *        still possible.\n   */\n  function ModalDialog(player, options) {\n    classCallCheck(this, ModalDialog);\n\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));\n\n    _this.opened_ = _this.hasBeenOpened_ = _this.hasBeenFilled_ = false;\n\n    _this.closeable(!_this.options_.uncloseable);\n    _this.content(_this.options_.content);\n\n    // Make sure the contentEl is defined AFTER any children are initialized\n    // because we only want the contents of the modal in the contentEl\n    // (not the UI elements like the close button).\n    _this.contentEl_ = createEl('div', {\n      className: MODAL_CLASS_NAME + '-content'\n    }, {\n      role: 'document'\n    });\n\n    _this.descEl_ = createEl('p', {\n      className: MODAL_CLASS_NAME + '-description vjs-control-text',\n      id: _this.el().getAttribute('aria-describedby')\n    });\n\n    textContent(_this.descEl_, _this.description());\n    _this.el_.appendChild(_this.descEl_);\n    _this.el_.appendChild(_this.contentEl_);\n    return _this;\n  }\n\n  /**\n   * Create the `ModalDialog`'s DOM element\n   *\n   * @return {Element}\n   *         The DOM element that gets created.\n   */\n\n\n  ModalDialog.prototype.createEl = function createEl$$1() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: this.buildCSSClass(),\n      tabIndex: -1\n    }, {\n      'aria-describedby': this.id() + '_description',\n      'aria-hidden': 'true',\n      'aria-label': this.label(),\n      'role': 'dialog'\n    });\n  };\n\n  ModalDialog.prototype.dispose = function dispose() {\n    this.contentEl_ = null;\n    this.descEl_ = null;\n    this.previouslyActiveEl_ = null;\n\n    _Component.prototype.dispose.call(this);\n  };\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  ModalDialog.prototype.buildCSSClass = function buildCSSClass() {\n    return MODAL_CLASS_NAME + ' vjs-hidden ' + _Component.prototype.buildCSSClass.call(this);\n  };\n\n  /**\n   * Handles `keydown` events on the document, looking for ESC, which closes\n   * the modal.\n   *\n   * @param {EventTarget~Event} e\n   *        The keypress that triggered this event.\n   *\n   * @listens keydown\n   */\n\n\n  ModalDialog.prototype.handleKeyPress = function handleKeyPress(e) {\n    if (e.which === ESC && this.closeable()) {\n      this.close();\n    }\n  };\n\n  /**\n   * Returns the label string for this modal. Primarily used for accessibility.\n   *\n   * @return {string}\n   *         the localized or raw label of this modal.\n   */\n\n\n  ModalDialog.prototype.label = function label() {\n    return this.localize(this.options_.label || 'Modal Window');\n  };\n\n  /**\n   * Returns the description string for this modal. Primarily used for\n   * accessibility.\n   *\n   * @return {string}\n   *         The localized or raw description of this modal.\n   */\n\n\n  ModalDialog.prototype.description = function description() {\n    var desc = this.options_.description || this.localize('This is a modal window.');\n\n    // Append a universal closeability message if the modal is closeable.\n    if (this.closeable()) {\n      desc += ' ' + this.localize('This modal can be closed by pressing the Escape key or activating the close button.');\n    }\n\n    return desc;\n  };\n\n  /**\n   * Opens the modal.\n   *\n   * @fires ModalDialog#beforemodalopen\n   * @fires ModalDialog#modalopen\n   */\n\n\n  ModalDialog.prototype.open = function open() {\n    if (!this.opened_) {\n      var player = this.player();\n\n      /**\n        * Fired just before a `ModalDialog` is opened.\n        *\n        * @event ModalDialog#beforemodalopen\n        * @type {EventTarget~Event}\n        */\n      this.trigger('beforemodalopen');\n      this.opened_ = true;\n\n      // Fill content if the modal has never opened before and\n      // never been filled.\n      if (this.options_.fillAlways || !this.hasBeenOpened_ && !this.hasBeenFilled_) {\n        this.fill();\n      }\n\n      // If the player was playing, pause it and take note of its previously\n      // playing state.\n      this.wasPlaying_ = !player.paused();\n\n      if (this.options_.pauseOnOpen && this.wasPlaying_) {\n        player.pause();\n      }\n\n      if (this.closeable()) {\n        this.on(this.el_.ownerDocument, 'keydown', bind(this, this.handleKeyPress));\n      }\n\n      // Hide controls and note if they were enabled.\n      this.hadControls_ = player.controls();\n      player.controls(false);\n\n      this.show();\n      this.conditionalFocus_();\n      this.el().setAttribute('aria-hidden', 'false');\n\n      /**\n        * Fired just after a `ModalDialog` is opened.\n        *\n        * @event ModalDialog#modalopen\n        * @type {EventTarget~Event}\n        */\n      this.trigger('modalopen');\n      this.hasBeenOpened_ = true;\n    }\n  };\n\n  /**\n   * If the `ModalDialog` is currently open or closed.\n   *\n   * @param  {boolean} [value]\n   *         If given, it will open (`true`) or close (`false`) the modal.\n   *\n   * @return {boolean}\n   *         the current open state of the modaldialog\n   */\n\n\n  ModalDialog.prototype.opened = function opened(value) {\n    if (typeof value === 'boolean') {\n      this[value ? 'open' : 'close']();\n    }\n    return this.opened_;\n  };\n\n  /**\n   * Closes the modal, does nothing if the `ModalDialog` is\n   * not open.\n   *\n   * @fires ModalDialog#beforemodalclose\n   * @fires ModalDialog#modalclose\n   */\n\n\n  ModalDialog.prototype.close = function close() {\n    if (!this.opened_) {\n      return;\n    }\n    var player = this.player();\n\n    /**\n      * Fired just before a `ModalDialog` is closed.\n      *\n      * @event ModalDialog#beforemodalclose\n      * @type {EventTarget~Event}\n      */\n    this.trigger('beforemodalclose');\n    this.opened_ = false;\n\n    if (this.wasPlaying_ && this.options_.pauseOnOpen) {\n      player.play();\n    }\n\n    if (this.closeable()) {\n      this.off(this.el_.ownerDocument, 'keydown', bind(this, this.handleKeyPress));\n    }\n\n    if (this.hadControls_) {\n      player.controls(true);\n    }\n\n    this.hide();\n    this.el().setAttribute('aria-hidden', 'true');\n\n    /**\n      * Fired just after a `ModalDialog` is closed.\n      *\n      * @event ModalDialog#modalclose\n      * @type {EventTarget~Event}\n      */\n    this.trigger('modalclose');\n    this.conditionalBlur_();\n\n    if (this.options_.temporary) {\n      this.dispose();\n    }\n  };\n\n  /**\n   * Check to see if the `ModalDialog` is closeable via the UI.\n   *\n   * @param  {boolean} [value]\n   *         If given as a boolean, it will set the `closeable` option.\n   *\n   * @return {boolean}\n   *         Returns the final value of the closable option.\n   */\n\n\n  ModalDialog.prototype.closeable = function closeable(value) {\n    if (typeof value === 'boolean') {\n      var closeable = this.closeable_ = !!value;\n      var close = this.getChild('closeButton');\n\n      // If this is being made closeable and has no close button, add one.\n      if (closeable && !close) {\n\n        // The close button should be a child of the modal - not its\n        // content element, so temporarily change the content element.\n        var temp = this.contentEl_;\n\n        this.contentEl_ = this.el_;\n        close = this.addChild('closeButton', { controlText: 'Close Modal Dialog' });\n        this.contentEl_ = temp;\n        this.on(close, 'close', this.close);\n      }\n\n      // If this is being made uncloseable and has a close button, remove it.\n      if (!closeable && close) {\n        this.off(close, 'close', this.close);\n        this.removeChild(close);\n        close.dispose();\n      }\n    }\n    return this.closeable_;\n  };\n\n  /**\n   * Fill the modal's content element with the modal's \"content\" option.\n   * The content element will be emptied before this change takes place.\n   */\n\n\n  ModalDialog.prototype.fill = function fill() {\n    this.fillWith(this.content());\n  };\n\n  /**\n   * Fill the modal's content element with arbitrary content.\n   * The content element will be emptied before this change takes place.\n   *\n   * @fires ModalDialog#beforemodalfill\n   * @fires ModalDialog#modalfill\n   *\n   * @param {Mixed} [content]\n   *        The same rules apply to this as apply to the `content` option.\n   */\n\n\n  ModalDialog.prototype.fillWith = function fillWith(content) {\n    var contentEl = this.contentEl();\n    var parentEl = contentEl.parentNode;\n    var nextSiblingEl = contentEl.nextSibling;\n\n    /**\n     * Fired just before a `ModalDialog` is filled with content.\n     *\n     * @event ModalDialog#beforemodalfill\n     * @type {EventTarget~Event}\n     */\n    this.trigger('beforemodalfill');\n    this.hasBeenFilled_ = true;\n\n    // Detach the content element from the DOM before performing\n    // manipulation to avoid modifying the live DOM multiple times.\n    parentEl.removeChild(contentEl);\n    this.empty();\n    insertContent(contentEl, content);\n    /**\n     * Fired just after a `ModalDialog` is filled with content.\n     *\n     * @event ModalDialog#modalfill\n     * @type {EventTarget~Event}\n     */\n    this.trigger('modalfill');\n\n    // Re-inject the re-filled content element.\n    if (nextSiblingEl) {\n      parentEl.insertBefore(contentEl, nextSiblingEl);\n    } else {\n      parentEl.appendChild(contentEl);\n    }\n\n    // make sure that the close button is last in the dialog DOM\n    var closeButton = this.getChild('closeButton');\n\n    if (closeButton) {\n      parentEl.appendChild(closeButton.el_);\n    }\n  };\n\n  /**\n   * Empties the content element. This happens anytime the modal is filled.\n   *\n   * @fires ModalDialog#beforemodalempty\n   * @fires ModalDialog#modalempty\n   */\n\n\n  ModalDialog.prototype.empty = function empty() {\n    /**\n     * Fired just before a `ModalDialog` is emptied.\n     *\n     * @event ModalDialog#beforemodalempty\n     * @type {EventTarget~Event}\n     */\n    this.trigger('beforemodalempty');\n    emptyEl(this.contentEl());\n\n    /**\n     * Fired just after a `ModalDialog` is emptied.\n     *\n     * @event ModalDialog#modalempty\n     * @type {EventTarget~Event}\n     */\n    this.trigger('modalempty');\n  };\n\n  /**\n   * Gets or sets the modal content, which gets normalized before being\n   * rendered into the DOM.\n   *\n   * This does not update the DOM or fill the modal, but it is called during\n   * that process.\n   *\n   * @param  {Mixed} [value]\n   *         If defined, sets the internal content value to be used on the\n   *         next call(s) to `fill`. This value is normalized before being\n   *         inserted. To \"clear\" the internal content value, pass `null`.\n   *\n   * @return {Mixed}\n   *         The current content of the modal dialog\n   */\n\n\n  ModalDialog.prototype.content = function content(value) {\n    if (typeof value !== 'undefined') {\n      this.content_ = value;\n    }\n    return this.content_;\n  };\n\n  /**\n   * conditionally focus the modal dialog if focus was previously on the player.\n   *\n   * @private\n   */\n\n\n  ModalDialog.prototype.conditionalFocus_ = function conditionalFocus_() {\n    var activeEl = document.activeElement;\n    var playerEl = this.player_.el_;\n\n    this.previouslyActiveEl_ = null;\n\n    if (playerEl.contains(activeEl) || playerEl === activeEl) {\n      this.previouslyActiveEl_ = activeEl;\n\n      this.focus();\n\n      this.on(document, 'keydown', this.handleKeyDown);\n    }\n  };\n\n  /**\n   * conditionally blur the element and refocus the last focused element\n   *\n   * @private\n   */\n\n\n  ModalDialog.prototype.conditionalBlur_ = function conditionalBlur_() {\n    if (this.previouslyActiveEl_) {\n      this.previouslyActiveEl_.focus();\n      this.previouslyActiveEl_ = null;\n    }\n\n    this.off(document, 'keydown', this.handleKeyDown);\n  };\n\n  /**\n   * Keydown handler. Attached when modal is focused.\n   *\n   * @listens keydown\n   */\n\n\n  ModalDialog.prototype.handleKeyDown = function handleKeyDown(event) {\n    // exit early if it isn't a tab key\n    if (event.which !== 9) {\n      return;\n    }\n\n    var focusableEls = this.focusableEls_();\n    var activeEl = this.el_.querySelector(':focus');\n    var focusIndex = void 0;\n\n    for (var i = 0; i < focusableEls.length; i++) {\n      if (activeEl === focusableEls[i]) {\n        focusIndex = i;\n        break;\n      }\n    }\n\n    if (document.activeElement === this.el_) {\n      focusIndex = 0;\n    }\n\n    if (event.shiftKey && focusIndex === 0) {\n      focusableEls[focusableEls.length - 1].focus();\n      event.preventDefault();\n    } else if (!event.shiftKey && focusIndex === focusableEls.length - 1) {\n      focusableEls[0].focus();\n      event.preventDefault();\n    }\n  };\n\n  /**\n   * get all focusable elements\n   *\n   * @private\n   */\n\n\n  ModalDialog.prototype.focusableEls_ = function focusableEls_() {\n    var allChildren = this.el_.querySelectorAll('*');\n\n    return Array.prototype.filter.call(allChildren, function (child) {\n      return (child instanceof window$1.HTMLAnchorElement || child instanceof window$1.HTMLAreaElement) && child.hasAttribute('href') || (child instanceof window$1.HTMLInputElement || child instanceof window$1.HTMLSelectElement || child instanceof window$1.HTMLTextAreaElement || child instanceof window$1.HTMLButtonElement) && !child.hasAttribute('disabled') || child instanceof window$1.HTMLIFrameElement || child instanceof window$1.HTMLObjectElement || child instanceof window$1.HTMLEmbedElement || child.hasAttribute('tabindex') && child.getAttribute('tabindex') !== -1 || child.hasAttribute('contenteditable');\n    });\n  };\n\n  return ModalDialog;\n}(Component);\n\n/**\n * Default options for `ModalDialog` default options.\n *\n * @type {Object}\n * @private\n */\n\n\nModalDialog.prototype.options_ = {\n  pauseOnOpen: true,\n  temporary: true\n};\n\nComponent.registerComponent('ModalDialog', ModalDialog);\n\n/**\n * @file track-list.js\n */\n\n/**\n * Common functionaliy between {@link TextTrackList}, {@link AudioTrackList}, and\n * {@link VideoTrackList}\n *\n * @extends EventTarget\n */\n\nvar TrackList = function (_EventTarget) {\n  inherits(TrackList, _EventTarget);\n\n  /**\n   * Create an instance of this class\n   *\n   * @param {Track[]} tracks\n   *        A list of tracks to initialize the list with.\n   *\n   * @abstract\n   */\n  function TrackList() {\n    var tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    classCallCheck(this, TrackList);\n\n    var _this = possibleConstructorReturn(this, _EventTarget.call(this));\n\n    _this.tracks_ = [];\n\n    /**\n     * @memberof TrackList\n     * @member {number} length\n     *         The current number of `Track`s in the this Trackist.\n     * @instance\n     */\n    Object.defineProperty(_this, 'length', {\n      get: function get$$1() {\n        return this.tracks_.length;\n      }\n    });\n\n    for (var i = 0; i < tracks.length; i++) {\n      _this.addTrack(tracks[i]);\n    }\n    return _this;\n  }\n\n  /**\n   * Add a {@link Track} to the `TrackList`\n   *\n   * @param {Track} track\n   *        The audio, video, or text track to add to the list.\n   *\n   * @fires TrackList#addtrack\n   */\n\n\n  TrackList.prototype.addTrack = function addTrack(track) {\n    var index = this.tracks_.length;\n\n    if (!('' + index in this)) {\n      Object.defineProperty(this, index, {\n        get: function get$$1() {\n          return this.tracks_[index];\n        }\n      });\n    }\n\n    // Do not add duplicate tracks\n    if (this.tracks_.indexOf(track) === -1) {\n      this.tracks_.push(track);\n      /**\n       * Triggered when a track is added to a track list.\n       *\n       * @event TrackList#addtrack\n       * @type {EventTarget~Event}\n       * @property {Track} track\n       *           A reference to track that was added.\n       */\n      this.trigger({\n        track: track,\n        type: 'addtrack'\n      });\n    }\n  };\n\n  /**\n   * Remove a {@link Track} from the `TrackList`\n   *\n   * @param {Track} rtrack\n   *        The audio, video, or text track to remove from the list.\n   *\n   * @fires TrackList#removetrack\n   */\n\n\n  TrackList.prototype.removeTrack = function removeTrack(rtrack) {\n    var track = void 0;\n\n    for (var i = 0, l = this.length; i < l; i++) {\n      if (this[i] === rtrack) {\n        track = this[i];\n        if (track.off) {\n          track.off();\n        }\n\n        this.tracks_.splice(i, 1);\n\n        break;\n      }\n    }\n\n    if (!track) {\n      return;\n    }\n\n    /**\n     * Triggered when a track is removed from track list.\n     *\n     * @event TrackList#removetrack\n     * @type {EventTarget~Event}\n     * @property {Track} track\n     *           A reference to track that was removed.\n     */\n    this.trigger({\n      track: track,\n      type: 'removetrack'\n    });\n  };\n\n  /**\n   * Get a Track from the TrackList by a tracks id\n   *\n   * @param {String} id - the id of the track to get\n   * @method getTrackById\n   * @return {Track}\n   * @private\n   */\n\n\n  TrackList.prototype.getTrackById = function getTrackById(id) {\n    var result = null;\n\n    for (var i = 0, l = this.length; i < l; i++) {\n      var track = this[i];\n\n      if (track.id === id) {\n        result = track;\n        break;\n      }\n    }\n\n    return result;\n  };\n\n  return TrackList;\n}(EventTarget);\n\n/**\n * Triggered when a different track is selected/enabled.\n *\n * @event TrackList#change\n * @type {EventTarget~Event}\n */\n\n/**\n * Events that can be called with on + eventName. See {@link EventHandler}.\n *\n * @property {Object} TrackList#allowedEvents_\n * @private\n */\n\n\nTrackList.prototype.allowedEvents_ = {\n  change: 'change',\n  addtrack: 'addtrack',\n  removetrack: 'removetrack'\n};\n\n// emulate attribute EventHandler support to allow for feature detection\nfor (var event in TrackList.prototype.allowedEvents_) {\n  TrackList.prototype['on' + event] = null;\n}\n\n/**\n * @file audio-track-list.js\n */\n\n/**\n * Anywhere we call this function we diverge from the spec\n * as we only support one enabled audiotrack at a time\n *\n * @param {AudioTrackList} list\n *        list to work on\n *\n * @param {AudioTrack} track\n *        The track to skip\n *\n * @private\n */\nvar disableOthers = function disableOthers(list, track) {\n  for (var i = 0; i < list.length; i++) {\n    if (!Object.keys(list[i]).length || track.id === list[i].id) {\n      continue;\n    }\n    // another audio track is enabled, disable it\n    list[i].enabled = false;\n  }\n};\n\n/**\n * The current list of {@link AudioTrack} for a media file.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist}\n * @extends TrackList\n */\n\nvar AudioTrackList = function (_TrackList) {\n  inherits(AudioTrackList, _TrackList);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {AudioTrack[]} [tracks=[]]\n   *        A list of `AudioTrack` to instantiate the list with.\n   */\n  function AudioTrackList() {\n    var tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    classCallCheck(this, AudioTrackList);\n\n    // make sure only 1 track is enabled\n    // sorted from last index to first index\n    for (var i = tracks.length - 1; i >= 0; i--) {\n      if (tracks[i].enabled) {\n        disableOthers(tracks, tracks[i]);\n        break;\n      }\n    }\n\n    var _this = possibleConstructorReturn(this, _TrackList.call(this, tracks));\n\n    _this.changing_ = false;\n    return _this;\n  }\n\n  /**\n   * Add an {@link AudioTrack} to the `AudioTrackList`.\n   *\n   * @param {AudioTrack} track\n   *        The AudioTrack to add to the list\n   *\n   * @fires TrackList#addtrack\n   */\n\n\n  AudioTrackList.prototype.addTrack = function addTrack(track) {\n    var _this2 = this;\n\n    if (track.enabled) {\n      disableOthers(this, track);\n    }\n\n    _TrackList.prototype.addTrack.call(this, track);\n    // native tracks don't have this\n    if (!track.addEventListener) {\n      return;\n    }\n\n    /**\n     * @listens AudioTrack#enabledchange\n     * @fires TrackList#change\n     */\n    track.addEventListener('enabledchange', function () {\n      // when we are disabling other tracks (since we don't support\n      // more than one track at a time) we will set changing_\n      // to true so that we don't trigger additional change events\n      if (_this2.changing_) {\n        return;\n      }\n      _this2.changing_ = true;\n      disableOthers(_this2, track);\n      _this2.changing_ = false;\n      _this2.trigger('change');\n    });\n  };\n\n  return AudioTrackList;\n}(TrackList);\n\n/**\n * @file video-track-list.js\n */\n\n/**\n * Un-select all other {@link VideoTrack}s that are selected.\n *\n * @param {VideoTrackList} list\n *        list to work on\n *\n * @param {VideoTrack} track\n *        The track to skip\n *\n * @private\n */\nvar disableOthers$1 = function disableOthers(list, track) {\n  for (var i = 0; i < list.length; i++) {\n    if (!Object.keys(list[i]).length || track.id === list[i].id) {\n      continue;\n    }\n    // another video track is enabled, disable it\n    list[i].selected = false;\n  }\n};\n\n/**\n * The current list of {@link VideoTrack} for a video.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist}\n * @extends TrackList\n */\n\nvar VideoTrackList = function (_TrackList) {\n  inherits(VideoTrackList, _TrackList);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {VideoTrack[]} [tracks=[]]\n   *        A list of `VideoTrack` to instantiate the list with.\n   */\n  function VideoTrackList() {\n    var tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    classCallCheck(this, VideoTrackList);\n\n    // make sure only 1 track is enabled\n    // sorted from last index to first index\n    for (var i = tracks.length - 1; i >= 0; i--) {\n      if (tracks[i].selected) {\n        disableOthers$1(tracks, tracks[i]);\n        break;\n      }\n    }\n\n    var _this = possibleConstructorReturn(this, _TrackList.call(this, tracks));\n\n    _this.changing_ = false;\n\n    /**\n     * @member {number} VideoTrackList#selectedIndex\n     *         The current index of the selected {@link VideoTrack`}.\n     */\n    Object.defineProperty(_this, 'selectedIndex', {\n      get: function get$$1() {\n        for (var _i = 0; _i < this.length; _i++) {\n          if (this[_i].selected) {\n            return _i;\n          }\n        }\n        return -1;\n      },\n      set: function set$$1() {}\n    });\n    return _this;\n  }\n\n  /**\n   * Add a {@link VideoTrack} to the `VideoTrackList`.\n   *\n   * @param {VideoTrack} track\n   *        The VideoTrack to add to the list\n   *\n   * @fires TrackList#addtrack\n   */\n\n\n  VideoTrackList.prototype.addTrack = function addTrack(track) {\n    var _this2 = this;\n\n    if (track.selected) {\n      disableOthers$1(this, track);\n    }\n\n    _TrackList.prototype.addTrack.call(this, track);\n    // native tracks don't have this\n    if (!track.addEventListener) {\n      return;\n    }\n\n    /**\n     * @listens VideoTrack#selectedchange\n     * @fires TrackList#change\n     */\n    track.addEventListener('selectedchange', function () {\n      if (_this2.changing_) {\n        return;\n      }\n      _this2.changing_ = true;\n      disableOthers$1(_this2, track);\n      _this2.changing_ = false;\n      _this2.trigger('change');\n    });\n  };\n\n  return VideoTrackList;\n}(TrackList);\n\n/**\n * @file text-track-list.js\n */\n\n/**\n * The current list of {@link TextTrack} for a media file.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttracklist}\n * @extends TrackList\n */\n\nvar TextTrackList = function (_TrackList) {\n  inherits(TextTrackList, _TrackList);\n\n  function TextTrackList() {\n    classCallCheck(this, TextTrackList);\n    return possibleConstructorReturn(this, _TrackList.apply(this, arguments));\n  }\n\n  /**\n   * Add a {@link TextTrack} to the `TextTrackList`\n   *\n   * @param {TextTrack} track\n   *        The text track to add to the list.\n   *\n   * @fires TrackList#addtrack\n   */\n  TextTrackList.prototype.addTrack = function addTrack(track) {\n    _TrackList.prototype.addTrack.call(this, track);\n\n    /**\n     * @listens TextTrack#modechange\n     * @fires TrackList#change\n     */\n    track.addEventListener('modechange', bind(this, function () {\n      this.queueTrigger('change');\n    }));\n\n    var nonLanguageTextTrackKind = ['metadata', 'chapters'];\n\n    if (nonLanguageTextTrackKind.indexOf(track.kind) === -1) {\n      track.addEventListener('modechange', bind(this, function () {\n        this.trigger('selectedlanguagechange');\n      }));\n    }\n  };\n\n  return TextTrackList;\n}(TrackList);\n\n/**\n * @file html-track-element-list.js\n */\n\n/**\n * The current list of {@link HtmlTrackElement}s.\n */\nvar HtmlTrackElementList = function () {\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {HtmlTrackElement[]} [tracks=[]]\n   *        A list of `HtmlTrackElement` to instantiate the list with.\n   */\n  function HtmlTrackElementList() {\n    var trackElements = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    classCallCheck(this, HtmlTrackElementList);\n\n    this.trackElements_ = [];\n\n    /**\n     * @memberof HtmlTrackElementList\n     * @member {number} length\n     *         The current number of `Track`s in the this Trackist.\n     * @instance\n     */\n    Object.defineProperty(this, 'length', {\n      get: function get$$1() {\n        return this.trackElements_.length;\n      }\n    });\n\n    for (var i = 0, length = trackElements.length; i < length; i++) {\n      this.addTrackElement_(trackElements[i]);\n    }\n  }\n\n  /**\n   * Add an {@link HtmlTrackElement} to the `HtmlTrackElementList`\n   *\n   * @param {HtmlTrackElement} trackElement\n   *        The track element to add to the list.\n   *\n   * @private\n   */\n\n\n  HtmlTrackElementList.prototype.addTrackElement_ = function addTrackElement_(trackElement) {\n    var index = this.trackElements_.length;\n\n    if (!('' + index in this)) {\n      Object.defineProperty(this, index, {\n        get: function get$$1() {\n          return this.trackElements_[index];\n        }\n      });\n    }\n\n    // Do not add duplicate elements\n    if (this.trackElements_.indexOf(trackElement) === -1) {\n      this.trackElements_.push(trackElement);\n    }\n  };\n\n  /**\n   * Get an {@link HtmlTrackElement} from the `HtmlTrackElementList` given an\n   * {@link TextTrack}.\n   *\n   * @param {TextTrack} track\n   *        The track associated with a track element.\n   *\n   * @return {HtmlTrackElement|undefined}\n   *         The track element that was found or undefined.\n   *\n   * @private\n   */\n\n\n  HtmlTrackElementList.prototype.getTrackElementByTrack_ = function getTrackElementByTrack_(track) {\n    var trackElement_ = void 0;\n\n    for (var i = 0, length = this.trackElements_.length; i < length; i++) {\n      if (track === this.trackElements_[i].track) {\n        trackElement_ = this.trackElements_[i];\n\n        break;\n      }\n    }\n\n    return trackElement_;\n  };\n\n  /**\n   * Remove a {@link HtmlTrackElement} from the `HtmlTrackElementList`\n   *\n   * @param {HtmlTrackElement} trackElement\n   *        The track element to remove from the list.\n   *\n   * @private\n   */\n\n\n  HtmlTrackElementList.prototype.removeTrackElement_ = function removeTrackElement_(trackElement) {\n    for (var i = 0, length = this.trackElements_.length; i < length; i++) {\n      if (trackElement === this.trackElements_[i]) {\n        this.trackElements_.splice(i, 1);\n\n        break;\n      }\n    }\n  };\n\n  return HtmlTrackElementList;\n}();\n\n/**\n * @file text-track-cue-list.js\n */\n\n/**\n * @typedef {Object} TextTrackCueList~TextTrackCue\n *\n * @property {string} id\n *           The unique id for this text track cue\n *\n * @property {number} startTime\n *           The start time for this text track cue\n *\n * @property {number} endTime\n *           The end time for this text track cue\n *\n * @property {boolean} pauseOnExit\n *           Pause when the end time is reached if true.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackcue}\n */\n\n/**\n * A List of TextTrackCues.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackcuelist}\n */\nvar TextTrackCueList = function () {\n\n  /**\n   * Create an instance of this class..\n   *\n   * @param {Array} cues\n   *        A list of cues to be initialized with\n   */\n  function TextTrackCueList(cues) {\n    classCallCheck(this, TextTrackCueList);\n\n    TextTrackCueList.prototype.setCues_.call(this, cues);\n\n    /**\n     * @memberof TextTrackCueList\n     * @member {number} length\n     *         The current number of `TextTrackCue`s in the TextTrackCueList.\n     * @instance\n     */\n    Object.defineProperty(this, 'length', {\n      get: function get$$1() {\n        return this.length_;\n      }\n    });\n  }\n\n  /**\n   * A setter for cues in this list. Creates getters\n   * an an index for the cues.\n   *\n   * @param {Array} cues\n   *        An array of cues to set\n   *\n   * @private\n   */\n\n\n  TextTrackCueList.prototype.setCues_ = function setCues_(cues) {\n    var oldLength = this.length || 0;\n    var i = 0;\n    var l = cues.length;\n\n    this.cues_ = cues;\n    this.length_ = cues.length;\n\n    var defineProp = function defineProp(index) {\n      if (!('' + index in this)) {\n        Object.defineProperty(this, '' + index, {\n          get: function get$$1() {\n            return this.cues_[index];\n          }\n        });\n      }\n    };\n\n    if (oldLength < l) {\n      i = oldLength;\n\n      for (; i < l; i++) {\n        defineProp.call(this, i);\n      }\n    }\n  };\n\n  /**\n   * Get a `TextTrackCue` that is currently in the `TextTrackCueList` by id.\n   *\n   * @param {string} id\n   *        The id of the cue that should be searched for.\n   *\n   * @return {TextTrackCueList~TextTrackCue|null}\n   *         A single cue or null if none was found.\n   */\n\n\n  TextTrackCueList.prototype.getCueById = function getCueById(id) {\n    var result = null;\n\n    for (var i = 0, l = this.length; i < l; i++) {\n      var cue = this[i];\n\n      if (cue.id === id) {\n        result = cue;\n        break;\n      }\n    }\n\n    return result;\n  };\n\n  return TextTrackCueList;\n}();\n\n/**\n * @file track-kinds.js\n */\n\n/**\n * All possible `VideoTrackKind`s\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-videotrack-kind\n * @typedef VideoTrack~Kind\n * @enum\n */\nvar VideoTrackKind = {\n  alternative: 'alternative',\n  captions: 'captions',\n  main: 'main',\n  sign: 'sign',\n  subtitles: 'subtitles',\n  commentary: 'commentary'\n};\n\n/**\n * All possible `AudioTrackKind`s\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-audiotrack-kind\n * @typedef AudioTrack~Kind\n * @enum\n */\nvar AudioTrackKind = {\n  'alternative': 'alternative',\n  'descriptions': 'descriptions',\n  'main': 'main',\n  'main-desc': 'main-desc',\n  'translation': 'translation',\n  'commentary': 'commentary'\n};\n\n/**\n * All possible `TextTrackKind`s\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-texttrack-kind\n * @typedef TextTrack~Kind\n * @enum\n */\nvar TextTrackKind = {\n  subtitles: 'subtitles',\n  captions: 'captions',\n  descriptions: 'descriptions',\n  chapters: 'chapters',\n  metadata: 'metadata'\n};\n\n/**\n * All possible `TextTrackMode`s\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackmode\n * @typedef TextTrack~Mode\n * @enum\n */\nvar TextTrackMode = {\n  disabled: 'disabled',\n  hidden: 'hidden',\n  showing: 'showing'\n};\n\n/**\n * @file track.js\n */\n\n/**\n * A Track class that contains all of the common functionality for {@link AudioTrack},\n * {@link VideoTrack}, and {@link TextTrack}.\n *\n * > Note: This class should not be used directly\n *\n * @see {@link https://html.spec.whatwg.org/multipage/embedded-content.html}\n * @extends EventTarget\n * @abstract\n */\n\nvar Track = function (_EventTarget) {\n  inherits(Track, _EventTarget);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Object} [options={}]\n   *        Object of option names and values\n   *\n   * @param {string} [options.kind='']\n   *        A valid kind for the track type you are creating.\n   *\n   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\n   *        A unique id for this AudioTrack.\n   *\n   * @param {string} [options.label='']\n   *        The menu label for this track.\n   *\n   * @param {string} [options.language='']\n   *        A valid two character language code.\n   *\n   * @abstract\n   */\n  function Track() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    classCallCheck(this, Track);\n\n    var _this = possibleConstructorReturn(this, _EventTarget.call(this));\n\n    var trackProps = {\n      id: options.id || 'vjs_track_' + newGUID(),\n      kind: options.kind || '',\n      label: options.label || '',\n      language: options.language || ''\n    };\n\n    /**\n     * @memberof Track\n     * @member {string} id\n     *         The id of this track. Cannot be changed after creation.\n     * @instance\n     *\n     * @readonly\n     */\n\n    /**\n     * @memberof Track\n     * @member {string} kind\n     *         The kind of track that this is. Cannot be changed after creation.\n     * @instance\n     *\n     * @readonly\n     */\n\n    /**\n     * @memberof Track\n     * @member {string} label\n     *         The label of this track. Cannot be changed after creation.\n     * @instance\n     *\n     * @readonly\n     */\n\n    /**\n     * @memberof Track\n     * @member {string} language\n     *         The two letter language code for this track. Cannot be changed after\n     *         creation.\n     * @instance\n     *\n     * @readonly\n     */\n\n    var _loop = function _loop(key) {\n      Object.defineProperty(_this, key, {\n        get: function get$$1() {\n          return trackProps[key];\n        },\n        set: function set$$1() {}\n      });\n    };\n\n    for (var key in trackProps) {\n      _loop(key);\n    }\n    return _this;\n  }\n\n  return Track;\n}(EventTarget);\n\n/**\n * @file url.js\n * @module url\n */\n\n/**\n * @typedef {Object} url:URLObject\n *\n * @property {string} protocol\n *           The protocol of the url that was parsed.\n *\n * @property {string} hostname\n *           The hostname of the url that was parsed.\n *\n * @property {string} port\n *           The port of the url that was parsed.\n *\n * @property {string} pathname\n *           The pathname of the url that was parsed.\n *\n * @property {string} search\n *           The search query of the url that was parsed.\n *\n * @property {string} hash\n *           The hash of the url that was parsed.\n *\n * @property {string} host\n *           The host of the url that was parsed.\n */\n\n/**\n * Resolve and parse the elements of a URL.\n *\n * @param  {String} url\n *         The url to parse\n *\n * @return {url:URLObject}\n *         An object of url details\n */\nvar parseUrl = function parseUrl(url) {\n  var props = ['protocol', 'hostname', 'port', 'pathname', 'search', 'hash', 'host'];\n\n  // add the url to an anchor and let the browser parse the URL\n  var a = document.createElement('a');\n\n  a.href = url;\n\n  // IE8 (and 9?) Fix\n  // ie8 doesn't parse the URL correctly until the anchor is actually\n  // added to the body, and an innerHTML is needed to trigger the parsing\n  var addToBody = a.host === '' && a.protocol !== 'file:';\n  var div = void 0;\n\n  if (addToBody) {\n    div = document.createElement('div');\n    div.innerHTML = '<a href=\"' + url + '\"></a>';\n    a = div.firstChild;\n    // prevent the div from affecting layout\n    div.setAttribute('style', 'display:none; position:absolute;');\n    document.body.appendChild(div);\n  }\n\n  // Copy the specific URL properties to a new object\n  // This is also needed for IE8 because the anchor loses its\n  // properties when it's removed from the dom\n  var details = {};\n\n  for (var i = 0; i < props.length; i++) {\n    details[props[i]] = a[props[i]];\n  }\n\n  // IE9 adds the port to the host property unlike everyone else. If\n  // a port identifier is added for standard ports, strip it.\n  if (details.protocol === 'http:') {\n    details.host = details.host.replace(/:80$/, '');\n  }\n\n  if (details.protocol === 'https:') {\n    details.host = details.host.replace(/:443$/, '');\n  }\n\n  if (!details.protocol) {\n    details.protocol = window$1.location.protocol;\n  }\n\n  if (addToBody) {\n    document.body.removeChild(div);\n  }\n\n  return details;\n};\n\n/**\n * Get absolute version of relative URL. Used to tell flash correct URL.\n *\n *\n * @param  {string} url\n *         URL to make absolute\n *\n * @return {string}\n *         Absolute URL\n *\n * @see http://stackoverflow.com/questions/470832/getting-an-absolute-url-from-a-relative-one-ie6-issue\n */\nvar getAbsoluteURL = function getAbsoluteURL(url) {\n  // Check if absolute URL\n  if (!url.match(/^https?:\\/\\//)) {\n    // Convert to absolute URL. Flash hosted off-site needs an absolute URL.\n    var div = document.createElement('div');\n\n    div.innerHTML = '<a href=\"' + url + '\">x</a>';\n    url = div.firstChild.href;\n  }\n\n  return url;\n};\n\n/**\n * Returns the extension of the passed file name. It will return an empty string\n * if passed an invalid path.\n *\n * @param {string} path\n *        The fileName path like '/path/to/file.mp4'\n *\n * @returns {string}\n *          The extension in lower case or an empty string if no\n *          extension could be found.\n */\nvar getFileExtension = function getFileExtension(path) {\n  if (typeof path === 'string') {\n    var splitPathRe = /^(\\/?)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?)(\\.([^\\.\\/\\?]+)))(?:[\\/]*|[\\?].*)$/i;\n    var pathParts = splitPathRe.exec(path);\n\n    if (pathParts) {\n      return pathParts.pop().toLowerCase();\n    }\n  }\n\n  return '';\n};\n\n/**\n * Returns whether the url passed is a cross domain request or not.\n *\n * @param {string} url\n *        The url to check.\n *\n * @return {boolean}\n *         Whether it is a cross domain request or not.\n */\nvar isCrossOrigin = function isCrossOrigin(url) {\n  var winLoc = window$1.location;\n  var urlInfo = parseUrl(url);\n\n  // IE8 protocol relative urls will return ':' for protocol\n  var srcProtocol = urlInfo.protocol === ':' ? winLoc.protocol : urlInfo.protocol;\n\n  // Check if url is for another domain/origin\n  // IE8 doesn't know location.origin, so we won't rely on it here\n  var crossOrigin = srcProtocol + urlInfo.host !== winLoc.protocol + winLoc.host;\n\n  return crossOrigin;\n};\n\nvar Url = /*#__PURE__*/Object.freeze({\n  parseUrl: parseUrl,\n  getAbsoluteURL: getAbsoluteURL,\n  getFileExtension: getFileExtension,\n  isCrossOrigin: isCrossOrigin\n});\n\n/**\n * @file text-track.js\n */\n\n/**\n * Takes a webvtt file contents and parses it into cues\n *\n * @param {string} srcContent\n *        webVTT file contents\n *\n * @param {TextTrack} track\n *        TextTrack to add cues to. Cues come from the srcContent.\n *\n * @private\n */\nvar parseCues = function parseCues(srcContent, track) {\n  var parser = new window$1.WebVTT.Parser(window$1, window$1.vttjs, window$1.WebVTT.StringDecoder());\n  var errors = [];\n\n  parser.oncue = function (cue) {\n    track.addCue(cue);\n  };\n\n  parser.onparsingerror = function (error) {\n    errors.push(error);\n  };\n\n  parser.onflush = function () {\n    track.trigger({\n      type: 'loadeddata',\n      target: track\n    });\n  };\n\n  parser.parse(srcContent);\n  if (errors.length > 0) {\n    if (window$1.console && window$1.console.groupCollapsed) {\n      window$1.console.groupCollapsed('Text Track parsing errors for ' + track.src);\n    }\n    errors.forEach(function (error) {\n      return log$1.error(error);\n    });\n    if (window$1.console && window$1.console.groupEnd) {\n      window$1.console.groupEnd();\n    }\n  }\n\n  parser.flush();\n};\n\n/**\n * Load a `TextTrack` from a specified url.\n *\n * @param {string} src\n *        Url to load track from.\n *\n * @param {TextTrack} track\n *        Track to add cues to. Comes from the content at the end of `url`.\n *\n * @private\n */\nvar loadTrack = function loadTrack(src, track) {\n  var opts = {\n    uri: src\n  };\n  var crossOrigin = isCrossOrigin(src);\n\n  if (crossOrigin) {\n    opts.cors = crossOrigin;\n  }\n\n  xhr(opts, bind(this, function (err, response, responseBody) {\n    if (err) {\n      return log$1.error(err, response);\n    }\n\n    track.loaded_ = true;\n\n    // Make sure that vttjs has loaded, otherwise, wait till it finished loading\n    // NOTE: this is only used for the alt/video.novtt.js build\n    if (typeof window$1.WebVTT !== 'function') {\n      if (track.tech_) {\n        var loadHandler = function loadHandler() {\n          return parseCues(responseBody, track);\n        };\n\n        track.tech_.on('vttjsloaded', loadHandler);\n        track.tech_.on('vttjserror', function () {\n          log$1.error('vttjs failed to load, stopping trying to process ' + track.src);\n          track.tech_.off('vttjsloaded', loadHandler);\n        });\n      }\n    } else {\n      parseCues(responseBody, track);\n    }\n  }));\n};\n\n/**\n * A representation of a single `TextTrack`.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrack}\n * @extends Track\n */\n\nvar TextTrack = function (_Track) {\n  inherits(TextTrack, _Track);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Object} options={}\n   *        Object of option names and values\n   *\n   * @param {Tech} options.tech\n   *        A reference to the tech that owns this TextTrack.\n   *\n   * @param {TextTrack~Kind} [options.kind='subtitles']\n   *        A valid text track kind.\n   *\n   * @param {TextTrack~Mode} [options.mode='disabled']\n   *        A valid text track mode.\n   *\n   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\n   *        A unique id for this TextTrack.\n   *\n   * @param {string} [options.label='']\n   *        The menu label for this track.\n   *\n   * @param {string} [options.language='']\n   *        A valid two character language code.\n   *\n   * @param {string} [options.srclang='']\n   *        A valid two character language code. An alternative, but deprioritized\n   *        version of `options.language`\n   *\n   * @param {string} [options.src]\n   *        A url to TextTrack cues.\n   *\n   * @param {boolean} [options.default]\n   *        If this track should default to on or off.\n   */\n  function TextTrack() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    classCallCheck(this, TextTrack);\n\n    if (!options.tech) {\n      throw new Error('A tech was not provided.');\n    }\n\n    var settings = mergeOptions(options, {\n      kind: TextTrackKind[options.kind] || 'subtitles',\n      language: options.language || options.srclang || ''\n    });\n    var mode = TextTrackMode[settings.mode] || 'disabled';\n    var default_ = settings.default;\n\n    if (settings.kind === 'metadata' || settings.kind === 'chapters') {\n      mode = 'hidden';\n    }\n\n    var _this = possibleConstructorReturn(this, _Track.call(this, settings));\n\n    _this.tech_ = settings.tech;\n\n    _this.cues_ = [];\n    _this.activeCues_ = [];\n\n    var cues = new TextTrackCueList(_this.cues_);\n    var activeCues = new TextTrackCueList(_this.activeCues_);\n    var changed = false;\n    var timeupdateHandler = bind(_this, function () {\n\n      // Accessing this.activeCues for the side-effects of updating itself\n      // due to it's nature as a getter function. Do not remove or cues will\n      // stop updating!\n      // Use the setter to prevent deletion from uglify (pure_getters rule)\n      this.activeCues = this.activeCues;\n      if (changed) {\n        this.trigger('cuechange');\n        changed = false;\n      }\n    });\n\n    if (mode !== 'disabled') {\n      _this.tech_.ready(function () {\n        _this.tech_.on('timeupdate', timeupdateHandler);\n      }, true);\n    }\n\n    Object.defineProperties(_this, {\n      /**\n       * @memberof TextTrack\n       * @member {boolean} default\n       *         If this track was set to be on or off by default. Cannot be changed after\n       *         creation.\n       * @instance\n       *\n       * @readonly\n       */\n      default: {\n        get: function get$$1() {\n          return default_;\n        },\n        set: function set$$1() {}\n      },\n\n      /**\n       * @memberof TextTrack\n       * @member {string} mode\n       *         Set the mode of this TextTrack to a valid {@link TextTrack~Mode}. Will\n       *         not be set if setting to an invalid mode.\n       * @instance\n       *\n       * @fires TextTrack#modechange\n       */\n      mode: {\n        get: function get$$1() {\n          return mode;\n        },\n        set: function set$$1(newMode) {\n          var _this2 = this;\n\n          if (!TextTrackMode[newMode]) {\n            return;\n          }\n          mode = newMode;\n          if (mode === 'showing') {\n\n            this.tech_.ready(function () {\n              _this2.tech_.on('timeupdate', timeupdateHandler);\n            }, true);\n          }\n          /**\n           * An event that fires when mode changes on this track. This allows\n           * the TextTrackList that holds this track to act accordingly.\n           *\n           * > Note: This is not part of the spec!\n           *\n           * @event TextTrack#modechange\n           * @type {EventTarget~Event}\n           */\n          this.trigger('modechange');\n        }\n      },\n\n      /**\n       * @memberof TextTrack\n       * @member {TextTrackCueList} cues\n       *         The text track cue list for this TextTrack.\n       * @instance\n       */\n      cues: {\n        get: function get$$1() {\n          if (!this.loaded_) {\n            return null;\n          }\n\n          return cues;\n        },\n        set: function set$$1() {}\n      },\n\n      /**\n       * @memberof TextTrack\n       * @member {TextTrackCueList} activeCues\n       *         The list text track cues that are currently active for this TextTrack.\n       * @instance\n       */\n      activeCues: {\n        get: function get$$1() {\n          if (!this.loaded_) {\n            return null;\n          }\n\n          // nothing to do\n          if (this.cues.length === 0) {\n            return activeCues;\n          }\n\n          var ct = this.tech_.currentTime();\n          var active = [];\n\n          for (var i = 0, l = this.cues.length; i < l; i++) {\n            var cue = this.cues[i];\n\n            if (cue.startTime <= ct && cue.endTime >= ct) {\n              active.push(cue);\n            } else if (cue.startTime === cue.endTime && cue.startTime <= ct && cue.startTime + 0.5 >= ct) {\n              active.push(cue);\n            }\n          }\n\n          changed = false;\n\n          if (active.length !== this.activeCues_.length) {\n            changed = true;\n          } else {\n            for (var _i = 0; _i < active.length; _i++) {\n              if (this.activeCues_.indexOf(active[_i]) === -1) {\n                changed = true;\n              }\n            }\n          }\n\n          this.activeCues_ = active;\n          activeCues.setCues_(this.activeCues_);\n\n          return activeCues;\n        },\n\n\n        // /!\\ Keep this setter empty (see the timeupdate handler above)\n        set: function set$$1() {}\n      }\n    });\n\n    if (settings.src) {\n      _this.src = settings.src;\n      loadTrack(settings.src, _this);\n    } else {\n      _this.loaded_ = true;\n    }\n    return _this;\n  }\n\n  /**\n   * Add a cue to the internal list of cues.\n   *\n   * @param {TextTrack~Cue} cue\n   *        The cue to add to our internal list\n   */\n\n\n  TextTrack.prototype.addCue = function addCue(originalCue) {\n    var cue = originalCue;\n\n    if (window$1.vttjs && !(originalCue instanceof window$1.vttjs.VTTCue)) {\n      cue = new window$1.vttjs.VTTCue(originalCue.startTime, originalCue.endTime, originalCue.text);\n\n      for (var prop in originalCue) {\n        if (!(prop in cue)) {\n          cue[prop] = originalCue[prop];\n        }\n      }\n\n      // make sure that `id` is copied over\n      cue.id = originalCue.id;\n      cue.originalCue_ = originalCue;\n    }\n\n    var tracks = this.tech_.textTracks();\n\n    for (var i = 0; i < tracks.length; i++) {\n      if (tracks[i] !== this) {\n        tracks[i].removeCue(cue);\n      }\n    }\n\n    this.cues_.push(cue);\n    this.cues.setCues_(this.cues_);\n  };\n\n  /**\n   * Remove a cue from our internal list\n   *\n   * @param {TextTrack~Cue} removeCue\n   *        The cue to remove from our internal list\n   */\n\n\n  TextTrack.prototype.removeCue = function removeCue(_removeCue) {\n    var i = this.cues_.length;\n\n    while (i--) {\n      var cue = this.cues_[i];\n\n      if (cue === _removeCue || cue.originalCue_ && cue.originalCue_ === _removeCue) {\n        this.cues_.splice(i, 1);\n        this.cues.setCues_(this.cues_);\n        break;\n      }\n    }\n  };\n\n  return TextTrack;\n}(Track);\n\n/**\n * cuechange - One or more cues in the track have become active or stopped being active.\n */\n\n\nTextTrack.prototype.allowedEvents_ = {\n  cuechange: 'cuechange'\n};\n\n/**\n * A representation of a single `AudioTrack`. If it is part of an {@link AudioTrackList}\n * only one `AudioTrack` in the list will be enabled at a time.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotrack}\n * @extends Track\n */\n\nvar AudioTrack = function (_Track) {\n  inherits(AudioTrack, _Track);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Object} [options={}]\n   *        Object of option names and values\n   *\n   * @param {AudioTrack~Kind} [options.kind='']\n   *        A valid audio track kind\n   *\n   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\n   *        A unique id for this AudioTrack.\n   *\n   * @param {string} [options.label='']\n   *        The menu label for this track.\n   *\n   * @param {string} [options.language='']\n   *        A valid two character language code.\n   *\n   * @param {boolean} [options.enabled]\n   *        If this track is the one that is currently playing. If this track is part of\n   *        an {@link AudioTrackList}, only one {@link AudioTrack} will be enabled.\n   */\n  function AudioTrack() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    classCallCheck(this, AudioTrack);\n\n    var settings = mergeOptions(options, {\n      kind: AudioTrackKind[options.kind] || ''\n    });\n\n    var _this = possibleConstructorReturn(this, _Track.call(this, settings));\n\n    var enabled = false;\n\n    /**\n     * @memberof AudioTrack\n     * @member {boolean} enabled\n     *         If this `AudioTrack` is enabled or not. When setting this will\n     *         fire {@link AudioTrack#enabledchange} if the state of enabled is changed.\n     * @instance\n     *\n     * @fires VideoTrack#selectedchange\n     */\n    Object.defineProperty(_this, 'enabled', {\n      get: function get$$1() {\n        return enabled;\n      },\n      set: function set$$1(newEnabled) {\n        // an invalid or unchanged value\n        if (typeof newEnabled !== 'boolean' || newEnabled === enabled) {\n          return;\n        }\n        enabled = newEnabled;\n\n        /**\n         * An event that fires when enabled changes on this track. This allows\n         * the AudioTrackList that holds this track to act accordingly.\n         *\n         * > Note: This is not part of the spec! Native tracks will do\n         *         this internally without an event.\n         *\n         * @event AudioTrack#enabledchange\n         * @type {EventTarget~Event}\n         */\n        this.trigger('enabledchange');\n      }\n    });\n\n    // if the user sets this track to selected then\n    // set selected to that true value otherwise\n    // we keep it false\n    if (settings.enabled) {\n      _this.enabled = settings.enabled;\n    }\n    _this.loaded_ = true;\n    return _this;\n  }\n\n  return AudioTrack;\n}(Track);\n\n/**\n * A representation of a single `VideoTrack`.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#videotrack}\n * @extends Track\n */\n\nvar VideoTrack = function (_Track) {\n  inherits(VideoTrack, _Track);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Object} [options={}]\n   *        Object of option names and values\n   *\n   * @param {string} [options.kind='']\n   *        A valid {@link VideoTrack~Kind}\n   *\n   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\n   *        A unique id for this AudioTrack.\n   *\n   * @param {string} [options.label='']\n   *        The menu label for this track.\n   *\n   * @param {string} [options.language='']\n   *        A valid two character language code.\n   *\n   * @param {boolean} [options.selected]\n   *        If this track is the one that is currently playing.\n   */\n  function VideoTrack() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    classCallCheck(this, VideoTrack);\n\n    var settings = mergeOptions(options, {\n      kind: VideoTrackKind[options.kind] || ''\n    });\n\n    var _this = possibleConstructorReturn(this, _Track.call(this, settings));\n\n    var selected = false;\n\n    /**\n     * @memberof VideoTrack\n     * @member {boolean} selected\n     *         If this `VideoTrack` is selected or not. When setting this will\n     *         fire {@link VideoTrack#selectedchange} if the state of selected changed.\n     * @instance\n     *\n     * @fires VideoTrack#selectedchange\n     */\n    Object.defineProperty(_this, 'selected', {\n      get: function get$$1() {\n        return selected;\n      },\n      set: function set$$1(newSelected) {\n        // an invalid or unchanged value\n        if (typeof newSelected !== 'boolean' || newSelected === selected) {\n          return;\n        }\n        selected = newSelected;\n\n        /**\n         * An event that fires when selected changes on this track. This allows\n         * the VideoTrackList that holds this track to act accordingly.\n         *\n         * > Note: This is not part of the spec! Native tracks will do\n         *         this internally without an event.\n         *\n         * @event VideoTrack#selectedchange\n         * @type {EventTarget~Event}\n         */\n        this.trigger('selectedchange');\n      }\n    });\n\n    // if the user sets this track to selected then\n    // set selected to that true value otherwise\n    // we keep it false\n    if (settings.selected) {\n      _this.selected = settings.selected;\n    }\n    return _this;\n  }\n\n  return VideoTrack;\n}(Track);\n\n/**\n * @file html-track-element.js\n */\n\n/**\n * @memberof HTMLTrackElement\n * @typedef {HTMLTrackElement~ReadyState}\n * @enum {number}\n */\nvar NONE = 0;\nvar LOADING = 1;\nvar LOADED = 2;\nvar ERROR = 3;\n\n/**\n * A single track represented in the DOM.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#htmltrackelement}\n * @extends EventTarget\n */\n\nvar HTMLTrackElement = function (_EventTarget) {\n  inherits(HTMLTrackElement, _EventTarget);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Object} options={}\n   *        Object of option names and values\n   *\n   * @param {Tech} options.tech\n   *        A reference to the tech that owns this HTMLTrackElement.\n   *\n   * @param {TextTrack~Kind} [options.kind='subtitles']\n   *        A valid text track kind.\n   *\n   * @param {TextTrack~Mode} [options.mode='disabled']\n   *        A valid text track mode.\n   *\n   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\n   *        A unique id for this TextTrack.\n   *\n   * @param {string} [options.label='']\n   *        The menu label for this track.\n   *\n   * @param {string} [options.language='']\n   *        A valid two character language code.\n   *\n   * @param {string} [options.srclang='']\n   *        A valid two character language code. An alternative, but deprioritized\n   *        vesion of `options.language`\n   *\n   * @param {string} [options.src]\n   *        A url to TextTrack cues.\n   *\n   * @param {boolean} [options.default]\n   *        If this track should default to on or off.\n   */\n  function HTMLTrackElement() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    classCallCheck(this, HTMLTrackElement);\n\n    var _this = possibleConstructorReturn(this, _EventTarget.call(this));\n\n    var readyState = void 0;\n\n    var track = new TextTrack(options);\n\n    _this.kind = track.kind;\n    _this.src = track.src;\n    _this.srclang = track.language;\n    _this.label = track.label;\n    _this.default = track.default;\n\n    Object.defineProperties(_this, {\n\n      /**\n       * @memberof HTMLTrackElement\n       * @member {HTMLTrackElement~ReadyState} readyState\n       *         The current ready state of the track element.\n       * @instance\n       */\n      readyState: {\n        get: function get$$1() {\n          return readyState;\n        }\n      },\n\n      /**\n       * @memberof HTMLTrackElement\n       * @member {TextTrack} track\n       *         The underlying TextTrack object.\n       * @instance\n       *\n       */\n      track: {\n        get: function get$$1() {\n          return track;\n        }\n      }\n    });\n\n    readyState = NONE;\n\n    /**\n     * @listens TextTrack#loadeddata\n     * @fires HTMLTrackElement#load\n     */\n    track.addEventListener('loadeddata', function () {\n      readyState = LOADED;\n\n      _this.trigger({\n        type: 'load',\n        target: _this\n      });\n    });\n    return _this;\n  }\n\n  return HTMLTrackElement;\n}(EventTarget);\n\nHTMLTrackElement.prototype.allowedEvents_ = {\n  load: 'load'\n};\n\nHTMLTrackElement.NONE = NONE;\nHTMLTrackElement.LOADING = LOADING;\nHTMLTrackElement.LOADED = LOADED;\nHTMLTrackElement.ERROR = ERROR;\n\n/*\n * This file contains all track properties that are used in\n * player.js, tech.js, html5.js and possibly other techs in the future.\n */\n\nvar NORMAL = {\n  audio: {\n    ListClass: AudioTrackList,\n    TrackClass: AudioTrack,\n    capitalName: 'Audio'\n  },\n  video: {\n    ListClass: VideoTrackList,\n    TrackClass: VideoTrack,\n    capitalName: 'Video'\n  },\n  text: {\n    ListClass: TextTrackList,\n    TrackClass: TextTrack,\n    capitalName: 'Text'\n  }\n};\n\nObject.keys(NORMAL).forEach(function (type) {\n  NORMAL[type].getterName = type + 'Tracks';\n  NORMAL[type].privateName = type + 'Tracks_';\n});\n\nvar REMOTE = {\n  remoteText: {\n    ListClass: TextTrackList,\n    TrackClass: TextTrack,\n    capitalName: 'RemoteText',\n    getterName: 'remoteTextTracks',\n    privateName: 'remoteTextTracks_'\n  },\n  remoteTextEl: {\n    ListClass: HtmlTrackElementList,\n    TrackClass: HTMLTrackElement,\n    capitalName: 'RemoteTextTrackEls',\n    getterName: 'remoteTextTrackEls',\n    privateName: 'remoteTextTrackEls_'\n  }\n};\n\nvar ALL = mergeOptions(NORMAL, REMOTE);\n\nREMOTE.names = Object.keys(REMOTE);\nNORMAL.names = Object.keys(NORMAL);\nALL.names = [].concat(REMOTE.names).concat(NORMAL.names);\n\n/**\n * @file tech.js\n */\n\n/**\n * An Object containing a structure like: `{src: 'url', type: 'mimetype'}` or string\n * that just contains the src url alone.\n * * `var SourceObject = {src: 'http://ex.com/video.mp4', type: 'video/mp4'};`\n   * `var SourceString = 'http://example.com/some-video.mp4';`\n *\n * @typedef {Object|string} Tech~SourceObject\n *\n * @property {string} src\n *           The url to the source\n *\n * @property {string} type\n *           The mime type of the source\n */\n\n/**\n * A function used by {@link Tech} to create a new {@link TextTrack}.\n *\n * @private\n *\n * @param {Tech} self\n *        An instance of the Tech class.\n *\n * @param {string} kind\n *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)\n *\n * @param {string} [label]\n *        Label to identify the text track\n *\n * @param {string} [language]\n *        Two letter language abbreviation\n *\n * @param {Object} [options={}]\n *        An object with additional text track options\n *\n * @return {TextTrack}\n *          The text track that was created.\n */\nfunction createTrackHelper(self, kind, label, language) {\n  var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n\n  var tracks = self.textTracks();\n\n  options.kind = kind;\n\n  if (label) {\n    options.label = label;\n  }\n  if (language) {\n    options.language = language;\n  }\n  options.tech = self;\n\n  var track = new ALL.text.TrackClass(options);\n\n  tracks.addTrack(track);\n\n  return track;\n}\n\n/**\n * This is the base class for media playback technology controllers, such as\n * {@link Flash} and {@link HTML5}\n *\n * @extends Component\n */\n\nvar Tech = function (_Component) {\n  inherits(Tech, _Component);\n\n  /**\n   * Create an instance of this Tech.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} ready\n   *        Callback function to call when the `HTML5` Tech is ready.\n   */\n  function Tech() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var ready = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\n    classCallCheck(this, Tech);\n\n    // we don't want the tech to report user activity automatically.\n    // This is done manually in addControlsListeners\n    options.reportTouchActivity = false;\n\n    // keep track of whether the current source has played at all to\n    // implement a very limited played()\n    var _this = possibleConstructorReturn(this, _Component.call(this, null, options, ready));\n\n    _this.hasStarted_ = false;\n    _this.on('playing', function () {\n      this.hasStarted_ = true;\n    });\n    _this.on('loadstart', function () {\n      this.hasStarted_ = false;\n    });\n\n    ALL.names.forEach(function (name) {\n      var props = ALL[name];\n\n      if (options && options[props.getterName]) {\n        _this[props.privateName] = options[props.getterName];\n      }\n    });\n\n    // Manually track progress in cases where the browser/flash player doesn't report it.\n    if (!_this.featuresProgressEvents) {\n      _this.manualProgressOn();\n    }\n\n    // Manually track timeupdates in cases where the browser/flash player doesn't report it.\n    if (!_this.featuresTimeupdateEvents) {\n      _this.manualTimeUpdatesOn();\n    }\n\n    ['Text', 'Audio', 'Video'].forEach(function (track) {\n      if (options['native' + track + 'Tracks'] === false) {\n        _this['featuresNative' + track + 'Tracks'] = false;\n      }\n    });\n\n    if (options.nativeCaptions === false || options.nativeTextTracks === false) {\n      _this.featuresNativeTextTracks = false;\n    } else if (options.nativeCaptions === true || options.nativeTextTracks === true) {\n      _this.featuresNativeTextTracks = true;\n    }\n\n    if (!_this.featuresNativeTextTracks) {\n      _this.emulateTextTracks();\n    }\n\n    _this.autoRemoteTextTracks_ = new ALL.text.ListClass();\n\n    _this.initTrackListeners();\n\n    // Turn on component tap events only if not using native controls\n    if (!options.nativeControlsForTouch) {\n      _this.emitTapEvents();\n    }\n\n    if (_this.constructor) {\n      _this.name_ = _this.constructor.name || 'Unknown Tech';\n    }\n    return _this;\n  }\n\n  /**\n   * A special function to trigger source set in a way that will allow player\n   * to re-trigger if the player or tech are not ready yet.\n   *\n   * @fires Tech#sourceset\n   * @param {string} src The source string at the time of the source changing.\n   */\n\n\n  Tech.prototype.triggerSourceset = function triggerSourceset(src) {\n    var _this2 = this;\n\n    if (!this.isReady_) {\n      // on initial ready we have to trigger source set\n      // 1ms after ready so that player can watch for it.\n      this.one('ready', function () {\n        return _this2.setTimeout(function () {\n          return _this2.triggerSourceset(src);\n        }, 1);\n      });\n    }\n\n    /**\n     * Fired when the source is set on the tech causing the media element\n     * to reload.\n     *\n     * @see {@link Player#event:sourceset}\n     * @event Tech#sourceset\n     * @type {EventTarget~Event}\n     */\n    this.trigger({\n      src: src,\n      type: 'sourceset'\n    });\n  };\n\n  /* Fallbacks for unsupported event types\n  ================================================================================ */\n\n  /**\n   * Polyfill the `progress` event for browsers that don't support it natively.\n   *\n   * @see {@link Tech#trackProgress}\n   */\n\n\n  Tech.prototype.manualProgressOn = function manualProgressOn() {\n    this.on('durationchange', this.onDurationChange);\n\n    this.manualProgress = true;\n\n    // Trigger progress watching when a source begins loading\n    this.one('ready', this.trackProgress);\n  };\n\n  /**\n   * Turn off the polyfill for `progress` events that was created in\n   * {@link Tech#manualProgressOn}\n   */\n\n\n  Tech.prototype.manualProgressOff = function manualProgressOff() {\n    this.manualProgress = false;\n    this.stopTrackingProgress();\n\n    this.off('durationchange', this.onDurationChange);\n  };\n\n  /**\n   * This is used to trigger a `progress` event when the buffered percent changes. It\n   * sets an interval function that will be called every 500 milliseconds to check if the\n   * buffer end percent has changed.\n   *\n   * > This function is called by {@link Tech#manualProgressOn}\n   *\n   * @param {EventTarget~Event} event\n   *        The `ready` event that caused this to run.\n   *\n   * @listens Tech#ready\n   * @fires Tech#progress\n   */\n\n\n  Tech.prototype.trackProgress = function trackProgress(event) {\n    this.stopTrackingProgress();\n    this.progressInterval = this.setInterval(bind(this, function () {\n      // Don't trigger unless buffered amount is greater than last time\n\n      var numBufferedPercent = this.bufferedPercent();\n\n      if (this.bufferedPercent_ !== numBufferedPercent) {\n        /**\n         * See {@link Player#progress}\n         *\n         * @event Tech#progress\n         * @type {EventTarget~Event}\n         */\n        this.trigger('progress');\n      }\n\n      this.bufferedPercent_ = numBufferedPercent;\n\n      if (numBufferedPercent === 1) {\n        this.stopTrackingProgress();\n      }\n    }), 500);\n  };\n\n  /**\n   * Update our internal duration on a `durationchange` event by calling\n   * {@link Tech#duration}.\n   *\n   * @param {EventTarget~Event} event\n   *        The `durationchange` event that caused this to run.\n   *\n   * @listens Tech#durationchange\n   */\n\n\n  Tech.prototype.onDurationChange = function onDurationChange(event) {\n    this.duration_ = this.duration();\n  };\n\n  /**\n   * Get and create a `TimeRange` object for buffering.\n   *\n   * @return {TimeRange}\n   *         The time range object that was created.\n   */\n\n\n  Tech.prototype.buffered = function buffered() {\n    return createTimeRanges(0, 0);\n  };\n\n  /**\n   * Get the percentage of the current video that is currently buffered.\n   *\n   * @return {number}\n   *         A number from 0 to 1 that represents the decimal percentage of the\n   *         video that is buffered.\n   *\n   */\n\n\n  Tech.prototype.bufferedPercent = function bufferedPercent$$1() {\n    return bufferedPercent(this.buffered(), this.duration_);\n  };\n\n  /**\n   * Turn off the polyfill for `progress` events that was created in\n   * {@link Tech#manualProgressOn}\n   * Stop manually tracking progress events by clearing the interval that was set in\n   * {@link Tech#trackProgress}.\n   */\n\n\n  Tech.prototype.stopTrackingProgress = function stopTrackingProgress() {\n    this.clearInterval(this.progressInterval);\n  };\n\n  /**\n   * Polyfill the `timeupdate` event for browsers that don't support it.\n   *\n   * @see {@link Tech#trackCurrentTime}\n   */\n\n\n  Tech.prototype.manualTimeUpdatesOn = function manualTimeUpdatesOn() {\n    this.manualTimeUpdates = true;\n\n    this.on('play', this.trackCurrentTime);\n    this.on('pause', this.stopTrackingCurrentTime);\n  };\n\n  /**\n   * Turn off the polyfill for `timeupdate` events that was created in\n   * {@link Tech#manualTimeUpdatesOn}\n   */\n\n\n  Tech.prototype.manualTimeUpdatesOff = function manualTimeUpdatesOff() {\n    this.manualTimeUpdates = false;\n    this.stopTrackingCurrentTime();\n    this.off('play', this.trackCurrentTime);\n    this.off('pause', this.stopTrackingCurrentTime);\n  };\n\n  /**\n   * Sets up an interval function to track current time and trigger `timeupdate` every\n   * 250 milliseconds.\n   *\n   * @listens Tech#play\n   * @triggers Tech#timeupdate\n   */\n\n\n  Tech.prototype.trackCurrentTime = function trackCurrentTime() {\n    if (this.currentTimeInterval) {\n      this.stopTrackingCurrentTime();\n    }\n    this.currentTimeInterval = this.setInterval(function () {\n      /**\n       * Triggered at an interval of 250ms to indicated that time is passing in the video.\n       *\n       * @event Tech#timeupdate\n       * @type {EventTarget~Event}\n       */\n      this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });\n\n      // 42 = 24 fps // 250 is what Webkit uses // FF uses 15\n    }, 250);\n  };\n\n  /**\n   * Stop the interval function created in {@link Tech#trackCurrentTime} so that the\n   * `timeupdate` event is no longer triggered.\n   *\n   * @listens {Tech#pause}\n   */\n\n\n  Tech.prototype.stopTrackingCurrentTime = function stopTrackingCurrentTime() {\n    this.clearInterval(this.currentTimeInterval);\n\n    // #1002 - if the video ends right before the next timeupdate would happen,\n    // the progress bar won't make it all the way to the end\n    this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });\n  };\n\n  /**\n   * Turn off all event polyfills, clear the `Tech`s {@link AudioTrackList},\n   * {@link VideoTrackList}, and {@link TextTrackList}, and dispose of this Tech.\n   *\n   * @fires Component#dispose\n   */\n\n\n  Tech.prototype.dispose = function dispose() {\n\n    // clear out all tracks because we can't reuse them between techs\n    this.clearTracks(NORMAL.names);\n\n    // Turn off any manual progress or timeupdate tracking\n    if (this.manualProgress) {\n      this.manualProgressOff();\n    }\n\n    if (this.manualTimeUpdates) {\n      this.manualTimeUpdatesOff();\n    }\n\n    _Component.prototype.dispose.call(this);\n  };\n\n  /**\n   * Clear out a single `TrackList` or an array of `TrackLists` given their names.\n   *\n   * > Note: Techs without source handlers should call this between sources for `video`\n   *         & `audio` tracks. You don't want to use them between tracks!\n   *\n   * @param {string[]|string} types\n   *        TrackList names to clear, valid names are `video`, `audio`, and\n   *        `text`.\n   */\n\n\n  Tech.prototype.clearTracks = function clearTracks(types) {\n    var _this3 = this;\n\n    types = [].concat(types);\n    // clear out all tracks because we can't reuse them between techs\n    types.forEach(function (type) {\n      var list = _this3[type + 'Tracks']() || [];\n      var i = list.length;\n\n      while (i--) {\n        var track = list[i];\n\n        if (type === 'text') {\n          _this3.removeRemoteTextTrack(track);\n        }\n        list.removeTrack(track);\n      }\n    });\n  };\n\n  /**\n   * Remove any TextTracks added via addRemoteTextTrack that are\n   * flagged for automatic garbage collection\n   */\n\n\n  Tech.prototype.cleanupAutoTextTracks = function cleanupAutoTextTracks() {\n    var list = this.autoRemoteTextTracks_ || [];\n    var i = list.length;\n\n    while (i--) {\n      var track = list[i];\n\n      this.removeRemoteTextTrack(track);\n    }\n  };\n\n  /**\n   * Reset the tech, which will removes all sources and reset the internal readyState.\n   *\n   * @abstract\n   */\n\n\n  Tech.prototype.reset = function reset() {};\n\n  /**\n   * Get or set an error on the Tech.\n   *\n   * @param {MediaError} [err]\n   *        Error to set on the Tech\n   *\n   * @return {MediaError|null}\n   *         The current error object on the tech, or null if there isn't one.\n   */\n\n\n  Tech.prototype.error = function error(err) {\n    if (err !== undefined) {\n      this.error_ = new MediaError(err);\n      this.trigger('error');\n    }\n    return this.error_;\n  };\n\n  /**\n   * Returns the `TimeRange`s that have been played through for the current source.\n   *\n   * > NOTE: This implementation is incomplete. It does not track the played `TimeRange`.\n   *         It only checks whether the source has played at all or not.\n   *\n   * @return {TimeRange}\n   *         - A single time range if this video has played\n   *         - An empty set of ranges if not.\n   */\n\n\n  Tech.prototype.played = function played() {\n    if (this.hasStarted_) {\n      return createTimeRanges(0, 0);\n    }\n    return createTimeRanges();\n  };\n\n  /**\n   * Causes a manual time update to occur if {@link Tech#manualTimeUpdatesOn} was\n   * previously called.\n   *\n   * @fires Tech#timeupdate\n   */\n\n\n  Tech.prototype.setCurrentTime = function setCurrentTime() {\n    // improve the accuracy of manual timeupdates\n    if (this.manualTimeUpdates) {\n      /**\n       * A manual `timeupdate` event.\n       *\n       * @event Tech#timeupdate\n       * @type {EventTarget~Event}\n       */\n      this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });\n    }\n  };\n\n  /**\n   * Turn on listeners for {@link VideoTrackList}, {@link {AudioTrackList}, and\n   * {@link TextTrackList} events.\n   *\n   * This adds {@link EventTarget~EventListeners} for `addtrack`, and  `removetrack`.\n   *\n   * @fires Tech#audiotrackchange\n   * @fires Tech#videotrackchange\n   * @fires Tech#texttrackchange\n   */\n\n\n  Tech.prototype.initTrackListeners = function initTrackListeners() {\n    var _this4 = this;\n\n    /**\n     * Triggered when tracks are added or removed on the Tech {@link AudioTrackList}\n     *\n     * @event Tech#audiotrackchange\n     * @type {EventTarget~Event}\n     */\n\n    /**\n     * Triggered when tracks are added or removed on the Tech {@link VideoTrackList}\n     *\n     * @event Tech#videotrackchange\n     * @type {EventTarget~Event}\n     */\n\n    /**\n     * Triggered when tracks are added or removed on the Tech {@link TextTrackList}\n     *\n     * @event Tech#texttrackchange\n     * @type {EventTarget~Event}\n     */\n    NORMAL.names.forEach(function (name) {\n      var props = NORMAL[name];\n      var trackListChanges = function trackListChanges() {\n        _this4.trigger(name + 'trackchange');\n      };\n\n      var tracks = _this4[props.getterName]();\n\n      tracks.addEventListener('removetrack', trackListChanges);\n      tracks.addEventListener('addtrack', trackListChanges);\n\n      _this4.on('dispose', function () {\n        tracks.removeEventListener('removetrack', trackListChanges);\n        tracks.removeEventListener('addtrack', trackListChanges);\n      });\n    });\n  };\n\n  /**\n   * Emulate TextTracks using vtt.js if necessary\n   *\n   * @fires Tech#vttjsloaded\n   * @fires Tech#vttjserror\n   */\n\n\n  Tech.prototype.addWebVttScript_ = function addWebVttScript_() {\n    var _this5 = this;\n\n    if (window$1.WebVTT) {\n      return;\n    }\n\n    // Initially, Tech.el_ is a child of a dummy-div wait until the Component system\n    // signals that the Tech is ready at which point Tech.el_ is part of the DOM\n    // before inserting the WebVTT script\n    if (document.body.contains(this.el())) {\n\n      // load via require if available and vtt.js script location was not passed in\n      // as an option. novtt builds will turn the above require call into an empty object\n      // which will cause this if check to always fail.\n      if (!this.options_['vtt.js'] && isPlain(vtt) && Object.keys(vtt).length > 0) {\n        this.trigger('vttjsloaded');\n        return;\n      }\n\n      // load vtt.js via the script location option or the cdn of no location was\n      // passed in\n      var script = document.createElement('script');\n\n      script.src = this.options_['vtt.js'] || 'https://vjs.zencdn.net/vttjs/0.14.1/vtt.min.js';\n      script.onload = function () {\n        /**\n         * Fired when vtt.js is loaded.\n         *\n         * @event Tech#vttjsloaded\n         * @type {EventTarget~Event}\n         */\n        _this5.trigger('vttjsloaded');\n      };\n      script.onerror = function () {\n        /**\n         * Fired when vtt.js was not loaded due to an error\n         *\n         * @event Tech#vttjsloaded\n         * @type {EventTarget~Event}\n         */\n        _this5.trigger('vttjserror');\n      };\n      this.on('dispose', function () {\n        script.onload = null;\n        script.onerror = null;\n      });\n      // but have not loaded yet and we set it to true before the inject so that\n      // we don't overwrite the injected window.WebVTT if it loads right away\n      window$1.WebVTT = true;\n      this.el().parentNode.appendChild(script);\n    } else {\n      this.ready(this.addWebVttScript_);\n    }\n  };\n\n  /**\n   * Emulate texttracks\n   *\n   */\n\n\n  Tech.prototype.emulateTextTracks = function emulateTextTracks() {\n    var _this6 = this;\n\n    var tracks = this.textTracks();\n    var remoteTracks = this.remoteTextTracks();\n    var handleAddTrack = function handleAddTrack(e) {\n      return tracks.addTrack(e.track);\n    };\n    var handleRemoveTrack = function handleRemoveTrack(e) {\n      return tracks.removeTrack(e.track);\n    };\n\n    remoteTracks.on('addtrack', handleAddTrack);\n    remoteTracks.on('removetrack', handleRemoveTrack);\n\n    this.addWebVttScript_();\n\n    var updateDisplay = function updateDisplay() {\n      return _this6.trigger('texttrackchange');\n    };\n\n    var textTracksChanges = function textTracksChanges() {\n      updateDisplay();\n\n      for (var i = 0; i < tracks.length; i++) {\n        var track = tracks[i];\n\n        track.removeEventListener('cuechange', updateDisplay);\n        if (track.mode === 'showing') {\n          track.addEventListener('cuechange', updateDisplay);\n        }\n      }\n    };\n\n    textTracksChanges();\n    tracks.addEventListener('change', textTracksChanges);\n    tracks.addEventListener('addtrack', textTracksChanges);\n    tracks.addEventListener('removetrack', textTracksChanges);\n\n    this.on('dispose', function () {\n      remoteTracks.off('addtrack', handleAddTrack);\n      remoteTracks.off('removetrack', handleRemoveTrack);\n      tracks.removeEventListener('change', textTracksChanges);\n      tracks.removeEventListener('addtrack', textTracksChanges);\n      tracks.removeEventListener('removetrack', textTracksChanges);\n\n      for (var i = 0; i < tracks.length; i++) {\n        var track = tracks[i];\n\n        track.removeEventListener('cuechange', updateDisplay);\n      }\n    });\n  };\n\n  /**\n   * Create and returns a remote {@link TextTrack} object.\n   *\n   * @param {string} kind\n   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)\n   *\n   * @param {string} [label]\n   *        Label to identify the text track\n   *\n   * @param {string} [language]\n   *        Two letter language abbreviation\n   *\n   * @return {TextTrack}\n   *         The TextTrack that gets created.\n   */\n\n\n  Tech.prototype.addTextTrack = function addTextTrack(kind, label, language) {\n    if (!kind) {\n      throw new Error('TextTrack kind is required but was not provided');\n    }\n\n    return createTrackHelper(this, kind, label, language);\n  };\n\n  /**\n   * Create an emulated TextTrack for use by addRemoteTextTrack\n   *\n   * This is intended to be overridden by classes that inherit from\n   * Tech in order to create native or custom TextTracks.\n   *\n   * @param {Object} options\n   *        The object should contain the options to initialize the TextTrack with.\n   *\n   * @param {string} [options.kind]\n   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).\n   *\n   * @param {string} [options.label].\n   *        Label to identify the text track\n   *\n   * @param {string} [options.language]\n   *        Two letter language abbreviation.\n   *\n   * @return {HTMLTrackElement}\n   *         The track element that gets created.\n   */\n\n\n  Tech.prototype.createRemoteTextTrack = function createRemoteTextTrack(options) {\n    var track = mergeOptions(options, {\n      tech: this\n    });\n\n    return new REMOTE.remoteTextEl.TrackClass(track);\n  };\n\n  /**\n   * Creates a remote text track object and returns an html track element.\n   *\n   * > Note: This can be an emulated {@link HTMLTrackElement} or a native one.\n   *\n   * @param {Object} options\n   *        See {@link Tech#createRemoteTextTrack} for more detailed properties.\n   *\n   * @param {boolean} [manualCleanup=true]\n   *        - When false: the TextTrack will be automatically removed from the video\n   *          element whenever the source changes\n   *        - When True: The TextTrack will have to be cleaned up manually\n   *\n   * @return {HTMLTrackElement}\n   *         An Html Track Element.\n   *\n   * @deprecated The default functionality for this function will be equivalent\n   *             to \"manualCleanup=false\" in the future. The manualCleanup parameter will\n   *             also be removed.\n   */\n\n\n  Tech.prototype.addRemoteTextTrack = function addRemoteTextTrack() {\n    var _this7 = this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var manualCleanup = arguments[1];\n\n    var htmlTrackElement = this.createRemoteTextTrack(options);\n\n    if (manualCleanup !== true && manualCleanup !== false) {\n      // deprecation warning\n      log$1.warn('Calling addRemoteTextTrack without explicitly setting the \"manualCleanup\" parameter to `true` is deprecated and default to `false` in future version of video.js');\n      manualCleanup = true;\n    }\n\n    // store HTMLTrackElement and TextTrack to remote list\n    this.remoteTextTrackEls().addTrackElement_(htmlTrackElement);\n    this.remoteTextTracks().addTrack(htmlTrackElement.track);\n\n    if (manualCleanup !== true) {\n      // create the TextTrackList if it doesn't exist\n      this.ready(function () {\n        return _this7.autoRemoteTextTracks_.addTrack(htmlTrackElement.track);\n      });\n    }\n\n    return htmlTrackElement;\n  };\n\n  /**\n   * Remove a remote text track from the remote `TextTrackList`.\n   *\n   * @param {TextTrack} track\n   *        `TextTrack` to remove from the `TextTrackList`\n   */\n\n\n  Tech.prototype.removeRemoteTextTrack = function removeRemoteTextTrack(track) {\n    var trackElement = this.remoteTextTrackEls().getTrackElementByTrack_(track);\n\n    // remove HTMLTrackElement and TextTrack from remote list\n    this.remoteTextTrackEls().removeTrackElement_(trackElement);\n    this.remoteTextTracks().removeTrack(track);\n    this.autoRemoteTextTracks_.removeTrack(track);\n  };\n\n  /**\n   * Gets available media playback quality metrics as specified by the W3C's Media\n   * Playback Quality API.\n   *\n   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}\n   *\n   * @return {Object}\n   *         An object with supported media playback quality metrics\n   *\n   * @abstract\n   */\n\n\n  Tech.prototype.getVideoPlaybackQuality = function getVideoPlaybackQuality() {\n    return {};\n  };\n\n  /**\n   * A method to set a poster from a `Tech`.\n   *\n   * @abstract\n   */\n\n\n  Tech.prototype.setPoster = function setPoster() {};\n\n  /**\n   * A method to check for the presence of the 'playsinline' <video> attribute.\n   *\n   * @abstract\n   */\n\n\n  Tech.prototype.playsinline = function playsinline() {};\n\n  /**\n   * A method to set or unset the 'playsinline' <video> attribute.\n   *\n   * @abstract\n   */\n\n\n  Tech.prototype.setPlaysinline = function setPlaysinline() {};\n\n  /**\n   * Attempt to force override of native audio tracks.\n   *\n   * @param {Boolean} override - If set to true native audio will be overridden,\n   * otherwise native audio will potentially be used.\n   *\n   * @abstract\n   */\n\n\n  Tech.prototype.overrideNativeAudioTracks = function overrideNativeAudioTracks() {};\n\n  /**\n   * Attempt to force override of native video tracks.\n   *\n   * @param {Boolean} override - If set to true native video will be overridden,\n   * otherwise native video will potentially be used.\n   *\n   * @abstract\n   */\n\n\n  Tech.prototype.overrideNativeVideoTracks = function overrideNativeVideoTracks() {};\n\n  /*\n   * Check if the tech can support the given mime-type.\n   *\n   * The base tech does not support any type, but source handlers might\n   * overwrite this.\n   *\n   * @param  {string} type\n   *         The mimetype to check for support\n   *\n   * @return {string}\n   *         'probably', 'maybe', or empty string\n   *\n   * @see [Spec]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canPlayType}\n   *\n   * @abstract\n   */\n\n\n  Tech.prototype.canPlayType = function canPlayType() {\n    return '';\n  };\n\n  /**\n   * Check if the type is supported by this tech.\n   *\n   * The base tech does not support any type, but source handlers might\n   * overwrite this.\n   *\n   * @param {string} type\n   *        The media type to check\n   * @return {string} Returns the native video element's response\n   */\n\n\n  Tech.canPlayType = function canPlayType() {\n    return '';\n  };\n\n  /**\n   * Check if the tech can support the given source\n   * @param {Object} srcObj\n   *        The source object\n   * @param {Object} options\n   *        The options passed to the tech\n   * @return {string} 'probably', 'maybe', or '' (empty string)\n   */\n\n\n  Tech.canPlaySource = function canPlaySource(srcObj, options) {\n    return Tech.canPlayType(srcObj.type);\n  };\n\n  /*\n   * Return whether the argument is a Tech or not.\n   * Can be passed either a Class like `Html5` or a instance like `player.tech_`\n   *\n   * @param {Object} component\n   *        The item to check\n   *\n   * @return {boolean}\n   *         Whether it is a tech or not\n   *         - True if it is a tech\n   *         - False if it is not\n   */\n\n\n  Tech.isTech = function isTech(component) {\n    return component.prototype instanceof Tech || component instanceof Tech || component === Tech;\n  };\n\n  /**\n   * Registers a `Tech` into a shared list for videojs.\n   *\n   * @param {string} name\n   *        Name of the `Tech` to register.\n   *\n   * @param {Object} tech\n   *        The `Tech` class to register.\n   */\n\n\n  Tech.registerTech = function registerTech(name, tech) {\n    if (!Tech.techs_) {\n      Tech.techs_ = {};\n    }\n\n    if (!Tech.isTech(tech)) {\n      throw new Error('Tech ' + name + ' must be a Tech');\n    }\n\n    if (!Tech.canPlayType) {\n      throw new Error('Techs must have a static canPlayType method on them');\n    }\n    if (!Tech.canPlaySource) {\n      throw new Error('Techs must have a static canPlaySource method on them');\n    }\n\n    name = toTitleCase(name);\n\n    Tech.techs_[name] = tech;\n    if (name !== 'Tech') {\n      // camel case the techName for use in techOrder\n      Tech.defaultTechOrder_.push(name);\n    }\n    return tech;\n  };\n\n  /**\n   * Get a `Tech` from the shared list by name.\n   *\n   * @param {string} name\n   *        `camelCase` or `TitleCase` name of the Tech to get\n   *\n   * @return {Tech|undefined}\n   *         The `Tech` or undefined if there was no tech with the name requested.\n   */\n\n\n  Tech.getTech = function getTech(name) {\n    if (!name) {\n      return;\n    }\n\n    name = toTitleCase(name);\n\n    if (Tech.techs_ && Tech.techs_[name]) {\n      return Tech.techs_[name];\n    }\n\n    if (window$1 && window$1.videojs && window$1.videojs[name]) {\n      log$1.warn('The ' + name + ' tech was added to the videojs object when it should be registered using videojs.registerTech(name, tech)');\n      return window$1.videojs[name];\n    }\n  };\n\n  return Tech;\n}(Component);\n\n/**\n * Get the {@link VideoTrackList}\n *\n * @returns {VideoTrackList}\n * @method Tech.prototype.videoTracks\n */\n\n/**\n * Get the {@link AudioTrackList}\n *\n * @returns {AudioTrackList}\n * @method Tech.prototype.audioTracks\n */\n\n/**\n * Get the {@link TextTrackList}\n *\n * @returns {TextTrackList}\n * @method Tech.prototype.textTracks\n */\n\n/**\n * Get the remote element {@link TextTrackList}\n *\n * @returns {TextTrackList}\n * @method Tech.prototype.remoteTextTracks\n */\n\n/**\n * Get the remote element {@link HtmlTrackElementList}\n *\n * @returns {HtmlTrackElementList}\n * @method Tech.prototype.remoteTextTrackEls\n */\n\nALL.names.forEach(function (name) {\n  var props = ALL[name];\n\n  Tech.prototype[props.getterName] = function () {\n    this[props.privateName] = this[props.privateName] || new props.ListClass();\n    return this[props.privateName];\n  };\n});\n\n/**\n * List of associated text tracks\n *\n * @type {TextTrackList}\n * @private\n * @property Tech#textTracks_\n */\n\n/**\n * List of associated audio tracks.\n *\n * @type {AudioTrackList}\n * @private\n * @property Tech#audioTracks_\n */\n\n/**\n * List of associated video tracks.\n *\n * @type {VideoTrackList}\n * @private\n * @property Tech#videoTracks_\n */\n\n/**\n * Boolean indicating whether the `Tech` supports volume control.\n *\n * @type {boolean}\n * @default\n */\nTech.prototype.featuresVolumeControl = true;\n\n/**\n * Boolean indicating whether the `Tech` supports muting volume.\n *\n * @type {bolean}\n * @default\n */\nTech.prototype.featuresMuteControl = true;\n\n/**\n * Boolean indicating whether the `Tech` supports fullscreen resize control.\n * Resizing plugins using request fullscreen reloads the plugin\n *\n * @type {boolean}\n * @default\n */\nTech.prototype.featuresFullscreenResize = false;\n\n/**\n * Boolean indicating whether the `Tech` supports changing the speed at which the video\n * plays. Examples:\n *   - Set player to play 2x (twice) as fast\n *   - Set player to play 0.5x (half) as fast\n *\n * @type {boolean}\n * @default\n */\nTech.prototype.featuresPlaybackRate = false;\n\n/**\n * Boolean indicating whether the `Tech` supports the `progress` event. This is currently\n * not triggered by video-js-swf. This will be used to determine if\n * {@link Tech#manualProgressOn} should be called.\n *\n * @type {boolean}\n * @default\n */\nTech.prototype.featuresProgressEvents = false;\n\n/**\n * Boolean indicating whether the `Tech` supports the `sourceset` event.\n *\n * A tech should set this to `true` and then use {@link Tech#triggerSourceset}\n * to trigger a {@link Tech#event:sourceset} at the earliest time after getting\n * a new source.\n *\n * @type {boolean}\n * @default\n */\nTech.prototype.featuresSourceset = false;\n\n/**\n * Boolean indicating whether the `Tech` supports the `timeupdate` event. This is currently\n * not triggered by video-js-swf. This will be used to determine if\n * {@link Tech#manualTimeUpdates} should be called.\n *\n * @type {boolean}\n * @default\n */\nTech.prototype.featuresTimeupdateEvents = false;\n\n/**\n * Boolean indicating whether the `Tech` supports the native `TextTrack`s.\n * This will help us integrate with native `TextTrack`s if the browser supports them.\n *\n * @type {boolean}\n * @default\n */\nTech.prototype.featuresNativeTextTracks = false;\n\n/**\n * A functional mixin for techs that want to use the Source Handler pattern.\n * Source handlers are scripts for handling specific formats.\n * The source handler pattern is used for adaptive formats (HLS, DASH) that\n * manually load video data and feed it into a Source Buffer (Media Source Extensions)\n * Example: `Tech.withSourceHandlers.call(MyTech);`\n *\n * @param {Tech} _Tech\n *        The tech to add source handler functions to.\n *\n * @mixes Tech~SourceHandlerAdditions\n */\nTech.withSourceHandlers = function (_Tech) {\n\n  /**\n   * Register a source handler\n   *\n   * @param {Function} handler\n   *        The source handler class\n   *\n   * @param {number} [index]\n   *        Register it at the following index\n   */\n  _Tech.registerSourceHandler = function (handler, index) {\n    var handlers = _Tech.sourceHandlers;\n\n    if (!handlers) {\n      handlers = _Tech.sourceHandlers = [];\n    }\n\n    if (index === undefined) {\n      // add to the end of the list\n      index = handlers.length;\n    }\n\n    handlers.splice(index, 0, handler);\n  };\n\n  /**\n   * Check if the tech can support the given type. Also checks the\n   * Techs sourceHandlers.\n   *\n   * @param {string} type\n   *         The mimetype to check.\n   *\n   * @return {string}\n   *         'probably', 'maybe', or '' (empty string)\n   */\n  _Tech.canPlayType = function (type) {\n    var handlers = _Tech.sourceHandlers || [];\n    var can = void 0;\n\n    for (var i = 0; i < handlers.length; i++) {\n      can = handlers[i].canPlayType(type);\n\n      if (can) {\n        return can;\n      }\n    }\n\n    return '';\n  };\n\n  /**\n   * Returns the first source handler that supports the source.\n   *\n   * TODO: Answer question: should 'probably' be prioritized over 'maybe'\n   *\n   * @param {Tech~SourceObject} source\n   *        The source object\n   *\n   * @param {Object} options\n   *        The options passed to the tech\n   *\n   * @return {SourceHandler|null}\n   *          The first source handler that supports the source or null if\n   *          no SourceHandler supports the source\n   */\n  _Tech.selectSourceHandler = function (source, options) {\n    var handlers = _Tech.sourceHandlers || [];\n    var can = void 0;\n\n    for (var i = 0; i < handlers.length; i++) {\n      can = handlers[i].canHandleSource(source, options);\n\n      if (can) {\n        return handlers[i];\n      }\n    }\n\n    return null;\n  };\n\n  /**\n   * Check if the tech can support the given source.\n   *\n   * @param {Tech~SourceObject} srcObj\n   *        The source object\n   *\n   * @param {Object} options\n   *        The options passed to the tech\n   *\n   * @return {string}\n   *         'probably', 'maybe', or '' (empty string)\n   */\n  _Tech.canPlaySource = function (srcObj, options) {\n    var sh = _Tech.selectSourceHandler(srcObj, options);\n\n    if (sh) {\n      return sh.canHandleSource(srcObj, options);\n    }\n\n    return '';\n  };\n\n  /**\n   * When using a source handler, prefer its implementation of\n   * any function normally provided by the tech.\n   */\n  var deferrable = ['seekable', 'seeking', 'duration'];\n\n  /**\n   * A wrapper around {@link Tech#seekable} that will call a `SourceHandler`s seekable\n   * function if it exists, with a fallback to the Techs seekable function.\n   *\n   * @method _Tech.seekable\n   */\n\n  /**\n   * A wrapper around {@link Tech#duration} that will call a `SourceHandler`s duration\n   * function if it exists, otherwise it will fallback to the techs duration function.\n   *\n   * @method _Tech.duration\n   */\n\n  deferrable.forEach(function (fnName) {\n    var originalFn = this[fnName];\n\n    if (typeof originalFn !== 'function') {\n      return;\n    }\n\n    this[fnName] = function () {\n      if (this.sourceHandler_ && this.sourceHandler_[fnName]) {\n        return this.sourceHandler_[fnName].apply(this.sourceHandler_, arguments);\n      }\n      return originalFn.apply(this, arguments);\n    };\n  }, _Tech.prototype);\n\n  /**\n   * Create a function for setting the source using a source object\n   * and source handlers.\n   * Should never be called unless a source handler was found.\n   *\n   * @param {Tech~SourceObject} source\n   *        A source object with src and type keys\n   */\n  _Tech.prototype.setSource = function (source) {\n    var sh = _Tech.selectSourceHandler(source, this.options_);\n\n    if (!sh) {\n      // Fall back to a native source hander when unsupported sources are\n      // deliberately set\n      if (_Tech.nativeSourceHandler) {\n        sh = _Tech.nativeSourceHandler;\n      } else {\n        log$1.error('No source handler found for the current source.');\n      }\n    }\n\n    // Dispose any existing source handler\n    this.disposeSourceHandler();\n    this.off('dispose', this.disposeSourceHandler);\n\n    if (sh !== _Tech.nativeSourceHandler) {\n      this.currentSource_ = source;\n    }\n\n    this.sourceHandler_ = sh.handleSource(source, this, this.options_);\n    this.on('dispose', this.disposeSourceHandler);\n  };\n\n  /**\n   * Clean up any existing SourceHandlers and listeners when the Tech is disposed.\n   *\n   * @listens Tech#dispose\n   */\n  _Tech.prototype.disposeSourceHandler = function () {\n    // if we have a source and get another one\n    // then we are loading something new\n    // than clear all of our current tracks\n    if (this.currentSource_) {\n      this.clearTracks(['audio', 'video']);\n      this.currentSource_ = null;\n    }\n\n    // always clean up auto-text tracks\n    this.cleanupAutoTextTracks();\n\n    if (this.sourceHandler_) {\n\n      if (this.sourceHandler_.dispose) {\n        this.sourceHandler_.dispose();\n      }\n\n      this.sourceHandler_ = null;\n    }\n  };\n};\n\n// The base Tech class needs to be registered as a Component. It is the only\n// Tech that can be registered as a Component.\nComponent.registerComponent('Tech', Tech);\nTech.registerTech('Tech', Tech);\n\n/**\n * A list of techs that should be added to techOrder on Players\n *\n * @private\n */\nTech.defaultTechOrder_ = [];\n\nvar middlewares = {};\nvar middlewareInstances = {};\n\nvar TERMINATOR = {};\n\nfunction use(type, middleware) {\n  middlewares[type] = middlewares[type] || [];\n  middlewares[type].push(middleware);\n}\n\nfunction setSource(player, src, next) {\n  player.setTimeout(function () {\n    return setSourceHelper(src, middlewares[src.type], next, player);\n  }, 1);\n}\n\nfunction setTech(middleware, tech) {\n  middleware.forEach(function (mw) {\n    return mw.setTech && mw.setTech(tech);\n  });\n}\n\n/**\n * Calls a getter on the tech first, through each middleware\n * from right to left to the player.\n */\nfunction get$1(middleware, tech, method) {\n  return middleware.reduceRight(middlewareIterator(method), tech[method]());\n}\n\n/**\n * Takes the argument given to the player and calls the setter method on each\n * middleware from left to right to the tech.\n */\nfunction set$1(middleware, tech, method, arg) {\n  return tech[method](middleware.reduce(middlewareIterator(method), arg));\n}\n\n/**\n * Takes the argument given to the player and calls the `call` version of the method\n * on each middleware from left to right.\n * Then, call the passed in method on the tech and return the result unchanged\n * back to the player, through middleware, this time from right to left.\n */\nfunction mediate(middleware, tech, method) {\n  var arg = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  var callMethod = 'call' + toTitleCase(method);\n  var middlewareValue = middleware.reduce(middlewareIterator(callMethod), arg);\n  var terminated = middlewareValue === TERMINATOR;\n  var returnValue = terminated ? null : tech[method](middlewareValue);\n\n  executeRight(middleware, method, returnValue, terminated);\n\n  return returnValue;\n}\n\nvar allowedGetters = {\n  buffered: 1,\n  currentTime: 1,\n  duration: 1,\n  seekable: 1,\n  played: 1,\n  paused: 1\n};\n\nvar allowedSetters = {\n  setCurrentTime: 1\n};\n\nvar allowedMediators = {\n  play: 1,\n  pause: 1\n};\n\nfunction middlewareIterator(method) {\n  return function (value, mw) {\n    // if the previous middleware terminated, pass along the termination\n    if (value === TERMINATOR) {\n      return TERMINATOR;\n    }\n\n    if (mw[method]) {\n      return mw[method](value);\n    }\n\n    return value;\n  };\n}\n\nfunction executeRight(mws, method, value, terminated) {\n  for (var i = mws.length - 1; i >= 0; i--) {\n    var mw = mws[i];\n\n    if (mw[method]) {\n      mw[method](terminated, value);\n    }\n  }\n}\n\nfunction clearCacheForPlayer(player) {\n  middlewareInstances[player.id()] = null;\n}\n\n/**\n * {\n *  [playerId]: [[mwFactory, mwInstance], ...]\n * }\n */\nfunction getOrCreateFactory(player, mwFactory) {\n  var mws = middlewareInstances[player.id()];\n  var mw = null;\n\n  if (mws === undefined || mws === null) {\n    mw = mwFactory(player);\n    middlewareInstances[player.id()] = [[mwFactory, mw]];\n    return mw;\n  }\n\n  for (var i = 0; i < mws.length; i++) {\n    var _mws$i = mws[i],\n        mwf = _mws$i[0],\n        mwi = _mws$i[1];\n\n\n    if (mwf !== mwFactory) {\n      continue;\n    }\n\n    mw = mwi;\n  }\n\n  if (mw === null) {\n    mw = mwFactory(player);\n    mws.push([mwFactory, mw]);\n  }\n\n  return mw;\n}\n\nfunction setSourceHelper() {\n  var src = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var middleware = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var next = arguments[2];\n  var player = arguments[3];\n  var acc = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  var lastRun = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n  var mwFactory = middleware[0],\n      mwrest = middleware.slice(1);\n\n  // if mwFactory is a string, then we're at a fork in the road\n\n  if (typeof mwFactory === 'string') {\n    setSourceHelper(src, middlewares[mwFactory], next, player, acc, lastRun);\n\n    // if we have an mwFactory, call it with the player to get the mw,\n    // then call the mw's setSource method\n  } else if (mwFactory) {\n    var mw = getOrCreateFactory(player, mwFactory);\n\n    // if setSource isn't present, implicitly select this middleware\n    if (!mw.setSource) {\n      acc.push(mw);\n      return setSourceHelper(src, mwrest, next, player, acc, lastRun);\n    }\n\n    mw.setSource(assign({}, src), function (err, _src) {\n\n      // something happened, try the next middleware on the current level\n      // make sure to use the old src\n      if (err) {\n        return setSourceHelper(src, mwrest, next, player, acc, lastRun);\n      }\n\n      // we've succeeded, now we need to go deeper\n      acc.push(mw);\n\n      // if it's the same type, continue down the current chain\n      // otherwise, we want to go down the new chain\n      setSourceHelper(_src, src.type === _src.type ? mwrest : middlewares[_src.type], next, player, acc, lastRun);\n    });\n  } else if (mwrest.length) {\n    setSourceHelper(src, mwrest, next, player, acc, lastRun);\n  } else if (lastRun) {\n    next(src, acc);\n  } else {\n    setSourceHelper(src, middlewares['*'], next, player, acc, true);\n  }\n}\n\n/**\n * Mimetypes\n *\n * @see http://hul.harvard.edu/ois/////systems/wax/wax-public-help/mimetypes.htm\n * @typedef Mimetypes~Kind\n * @enum\n */\nvar MimetypesKind = {\n  opus: 'video/ogg',\n  ogv: 'video/ogg',\n  mp4: 'video/mp4',\n  mov: 'video/mp4',\n  m4v: 'video/mp4',\n  mkv: 'video/x-matroska',\n  mp3: 'audio/mpeg',\n  aac: 'audio/aac',\n  oga: 'audio/ogg',\n  m3u8: 'application/x-mpegURL'\n};\n\n/**\n * Get the mimetype of a given src url if possible\n *\n * @param {string} src\n *        The url to the src\n *\n * @return {string}\n *         return the mimetype if it was known or empty string otherwise\n */\nvar getMimetype = function getMimetype() {\n  var src = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n  var ext = getFileExtension(src);\n  var mimetype = MimetypesKind[ext.toLowerCase()];\n\n  return mimetype || '';\n};\n\n/**\n * Find the mime type of a given source string if possible. Uses the player\n * source cache.\n *\n * @param {Player} player\n *        The player object\n *\n * @param {string} src\n *        The source string\n *\n * @return {string}\n *         The type that was found\n */\nvar findMimetype = function findMimetype(player, src) {\n  if (!src) {\n    return '';\n  }\n\n  // 1. check for the type in the `source` cache\n  if (player.cache_.source.src === src && player.cache_.source.type) {\n    return player.cache_.source.type;\n  }\n\n  // 2. see if we have this source in our `currentSources` cache\n  var matchingSources = player.cache_.sources.filter(function (s) {\n    return s.src === src;\n  });\n\n  if (matchingSources.length) {\n    return matchingSources[0].type;\n  }\n\n  // 3. look for the src url in source elements and use the type there\n  var sources = player.$$('source');\n\n  for (var i = 0; i < sources.length; i++) {\n    var s = sources[i];\n\n    if (s.type && s.src && s.src === src) {\n      return s.type;\n    }\n  }\n\n  // 4. finally fallback to our list of mime types based on src url extension\n  return getMimetype(src);\n};\n\n/**\n * @module filter-source\n */\n\n/**\n * Filter out single bad source objects or multiple source objects in an\n * array. Also flattens nested source object arrays into a 1 dimensional\n * array of source objects.\n *\n * @param {Tech~SourceObject|Tech~SourceObject[]} src\n *        The src object to filter\n *\n * @return {Tech~SourceObject[]}\n *         An array of sourceobjects containing only valid sources\n *\n * @private\n */\nvar filterSource = function filterSource(src) {\n  // traverse array\n  if (Array.isArray(src)) {\n    var newsrc = [];\n\n    src.forEach(function (srcobj) {\n      srcobj = filterSource(srcobj);\n\n      if (Array.isArray(srcobj)) {\n        newsrc = newsrc.concat(srcobj);\n      } else if (isObject(srcobj)) {\n        newsrc.push(srcobj);\n      }\n    });\n\n    src = newsrc;\n  } else if (typeof src === 'string' && src.trim()) {\n    // convert string into object\n    src = [fixSource({ src: src })];\n  } else if (isObject(src) && typeof src.src === 'string' && src.src && src.src.trim()) {\n    // src is already valid\n    src = [fixSource(src)];\n  } else {\n    // invalid source, turn it into an empty array\n    src = [];\n  }\n\n  return src;\n};\n\n/**\n * Checks src mimetype, adding it when possible\n *\n * @param {Tech~SourceObject} src\n *        The src object to check\n * @return {Tech~SourceObject}\n *        src Object with known type\n */\nfunction fixSource(src) {\n  var mimetype = getMimetype(src.src);\n\n  if (!src.type && mimetype) {\n    src.type = mimetype;\n  }\n\n  return src;\n}\n\n/**\n * @file loader.js\n */\n\n/**\n * The `MediaLoader` is the `Component` that decides which playback technology to load\n * when a player is initialized.\n *\n * @extends Component\n */\n\nvar MediaLoader = function (_Component) {\n  inherits(MediaLoader, _Component);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should attach to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        The function that is run when this component is ready.\n   */\n  function MediaLoader(player, options, ready) {\n    classCallCheck(this, MediaLoader);\n\n    // MediaLoader has no element\n    var options_ = mergeOptions({ createEl: false }, options);\n\n    // If there are no sources when the player is initialized,\n    // load the first supported playback technology.\n\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options_, ready));\n\n    if (!options.playerOptions.sources || options.playerOptions.sources.length === 0) {\n      for (var i = 0, j = options.playerOptions.techOrder; i < j.length; i++) {\n        var techName = toTitleCase(j[i]);\n        var tech = Tech.getTech(techName);\n\n        // Support old behavior of techs being registered as components.\n        // Remove once that deprecated behavior is removed.\n        if (!techName) {\n          tech = Component.getComponent(techName);\n        }\n\n        // Check if the browser supports this technology\n        if (tech && tech.isSupported()) {\n          player.loadTech_(techName);\n          break;\n        }\n      }\n    } else {\n      // Loop through playback technologies (HTML5, Flash) and check for support.\n      // Then load the best source.\n      // A few assumptions here:\n      //   All playback technologies respect preload false.\n      player.src(options.playerOptions.sources);\n    }\n    return _this;\n  }\n\n  return MediaLoader;\n}(Component);\n\nComponent.registerComponent('MediaLoader', MediaLoader);\n\n/**\n * @file clickable-component.js\n */\n\n/**\n * Clickable Component which is clickable or keyboard actionable,\n * but is not a native HTML button.\n *\n * @extends Component\n */\n\nvar ClickableComponent = function (_Component) {\n  inherits(ClickableComponent, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param  {Player} player\n   *         The `Player` that this class should be attached to.\n   *\n   * @param  {Object} [options]\n   *         The key/value store of player options.\n   */\n  function ClickableComponent(player, options) {\n    classCallCheck(this, ClickableComponent);\n\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));\n\n    _this.emitTapEvents();\n\n    _this.enable();\n    return _this;\n  }\n\n  /**\n   * Create the `Component`s DOM element.\n   *\n   * @param {string} [tag=div]\n   *        The element's node type.\n   *\n   * @param {Object} [props={}]\n   *        An object of properties that should be set on the element.\n   *\n   * @param {Object} [attributes={}]\n   *        An object of attributes that should be set on the element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n\n\n  ClickableComponent.prototype.createEl = function createEl$$1() {\n    var tag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'div';\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    props = assign({\n      innerHTML: '<span aria-hidden=\"true\" class=\"vjs-icon-placeholder\"></span>',\n      className: this.buildCSSClass(),\n      tabIndex: 0\n    }, props);\n\n    if (tag === 'button') {\n      log$1.error('Creating a ClickableComponent with an HTML element of ' + tag + ' is not supported; use a Button instead.');\n    }\n\n    // Add ARIA attributes for clickable element which is not a native HTML button\n    attributes = assign({\n      role: 'button'\n    }, attributes);\n\n    this.tabIndex_ = props.tabIndex;\n\n    var el = _Component.prototype.createEl.call(this, tag, props, attributes);\n\n    this.createControlTextEl(el);\n\n    return el;\n  };\n\n  ClickableComponent.prototype.dispose = function dispose() {\n    // remove controlTextEl_ on dispose\n    this.controlTextEl_ = null;\n\n    _Component.prototype.dispose.call(this);\n  };\n\n  /**\n   * Create a control text element on this `Component`\n   *\n   * @param {Element} [el]\n   *        Parent element for the control text.\n   *\n   * @return {Element}\n   *         The control text element that gets created.\n   */\n\n\n  ClickableComponent.prototype.createControlTextEl = function createControlTextEl(el) {\n    this.controlTextEl_ = createEl('span', {\n      className: 'vjs-control-text'\n    }, {\n      // let the screen reader user know that the text of the element may change\n      'aria-live': 'polite'\n    });\n\n    if (el) {\n      el.appendChild(this.controlTextEl_);\n    }\n\n    this.controlText(this.controlText_, el);\n\n    return this.controlTextEl_;\n  };\n\n  /**\n   * Get or set the localize text to use for the controls on the `Component`.\n   *\n   * @param {string} [text]\n   *        Control text for element.\n   *\n   * @param {Element} [el=this.el()]\n   *        Element to set the title on.\n   *\n   * @return {string}\n   *         - The control text when getting\n   */\n\n\n  ClickableComponent.prototype.controlText = function controlText(text) {\n    var el = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.el();\n\n    if (text === undefined) {\n      return this.controlText_ || 'Need Text';\n    }\n\n    var localizedText = this.localize(text);\n\n    this.controlText_ = text;\n    textContent(this.controlTextEl_, localizedText);\n    if (!this.nonIconControl) {\n      // Set title attribute if only an icon is shown\n      el.setAttribute('title', localizedText);\n    }\n  };\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  ClickableComponent.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-control vjs-button ' + _Component.prototype.buildCSSClass.call(this);\n  };\n\n  /**\n   * Enable this `Component`s element.\n   */\n\n\n  ClickableComponent.prototype.enable = function enable() {\n    if (!this.enabled_) {\n      this.enabled_ = true;\n      this.removeClass('vjs-disabled');\n      this.el_.setAttribute('aria-disabled', 'false');\n      if (typeof this.tabIndex_ !== 'undefined') {\n        this.el_.setAttribute('tabIndex', this.tabIndex_);\n      }\n      this.on(['tap', 'click'], this.handleClick);\n      this.on('focus', this.handleFocus);\n      this.on('blur', this.handleBlur);\n    }\n  };\n\n  /**\n   * Disable this `Component`s element.\n   */\n\n\n  ClickableComponent.prototype.disable = function disable() {\n    this.enabled_ = false;\n    this.addClass('vjs-disabled');\n    this.el_.setAttribute('aria-disabled', 'true');\n    if (typeof this.tabIndex_ !== 'undefined') {\n      this.el_.removeAttribute('tabIndex');\n    }\n    this.off(['tap', 'click'], this.handleClick);\n    this.off('focus', this.handleFocus);\n    this.off('blur', this.handleBlur);\n  };\n\n  /**\n   * This gets called when a `ClickableComponent` gets:\n   * - Clicked (via the `click` event, listening starts in the constructor)\n   * - Tapped (via the `tap` event, listening starts in the constructor)\n   * - The following things happen in order:\n   *   1. {@link ClickableComponent#handleFocus} is called via a `focus` event on the\n   *      `ClickableComponent`.\n   *   2. {@link ClickableComponent#handleFocus} adds a listener for `keydown` on using\n   *      {@link ClickableComponent#handleKeyPress}.\n   *   3. `ClickableComponent` has not had a `blur` event (`blur` means that focus was lost). The user presses\n   *      the space or enter key.\n   *   4. {@link ClickableComponent#handleKeyPress} calls this function with the `keydown`\n   *      event as a parameter.\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   * @abstract\n   */\n\n\n  ClickableComponent.prototype.handleClick = function handleClick(event) {};\n\n  /**\n   * This gets called when a `ClickableComponent` gains focus via a `focus` event.\n   * Turns on listening for `keydown` events. When they happen it\n   * calls `this.handleKeyPress`.\n   *\n   * @param {EventTarget~Event} event\n   *        The `focus` event that caused this function to be called.\n   *\n   * @listens focus\n   */\n\n\n  ClickableComponent.prototype.handleFocus = function handleFocus(event) {\n    on(document, 'keydown', bind(this, this.handleKeyPress));\n  };\n\n  /**\n   * Called when this ClickableComponent has focus and a key gets pressed down. By\n   * default it will call `this.handleClick` when the key is space or enter.\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown` event that caused this function to be called.\n   *\n   * @listens keydown\n   */\n\n\n  ClickableComponent.prototype.handleKeyPress = function handleKeyPress(event) {\n\n    // Support Space (32) or Enter (13) key operation to fire a click event\n    if (event.which === 32 || event.which === 13) {\n      event.preventDefault();\n      this.trigger('click');\n    } else if (_Component.prototype.handleKeyPress) {\n\n      // Pass keypress handling up for unsupported keys\n      _Component.prototype.handleKeyPress.call(this, event);\n    }\n  };\n\n  /**\n   * Called when a `ClickableComponent` loses focus. Turns off the listener for\n   * `keydown` events. Which Stops `this.handleKeyPress` from getting called.\n   *\n   * @param {EventTarget~Event} event\n   *        The `blur` event that caused this function to be called.\n   *\n   * @listens blur\n   */\n\n\n  ClickableComponent.prototype.handleBlur = function handleBlur(event) {\n    off(document, 'keydown', bind(this, this.handleKeyPress));\n  };\n\n  return ClickableComponent;\n}(Component);\n\nComponent.registerComponent('ClickableComponent', ClickableComponent);\n\n/**\n * @file poster-image.js\n */\n\n/**\n * A `ClickableComponent` that handles showing the poster image for the player.\n *\n * @extends ClickableComponent\n */\n\nvar PosterImage = function (_ClickableComponent) {\n  inherits(PosterImage, _ClickableComponent);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should attach to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function PosterImage(player, options) {\n    classCallCheck(this, PosterImage);\n\n    var _this = possibleConstructorReturn(this, _ClickableComponent.call(this, player, options));\n\n    _this.update();\n    player.on('posterchange', bind(_this, _this.update));\n    return _this;\n  }\n\n  /**\n   * Clean up and dispose of the `PosterImage`.\n   */\n\n\n  PosterImage.prototype.dispose = function dispose() {\n    this.player().off('posterchange', this.update);\n    _ClickableComponent.prototype.dispose.call(this);\n  };\n\n  /**\n   * Create the `PosterImage`s DOM element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n\n\n  PosterImage.prototype.createEl = function createEl$$1() {\n    var el = createEl('div', {\n      className: 'vjs-poster',\n\n      // Don't want poster to be tabbable.\n      tabIndex: -1\n    });\n\n    return el;\n  };\n\n  /**\n   * An {@link EventTarget~EventListener} for {@link Player#posterchange} events.\n   *\n   * @listens Player#posterchange\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `Player#posterchange` event that triggered this function.\n   */\n\n\n  PosterImage.prototype.update = function update(event) {\n    var url = this.player().poster();\n\n    this.setSrc(url);\n\n    // If there's no poster source we should display:none on this component\n    // so it's not still clickable or right-clickable\n    if (url) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  };\n\n  /**\n   * Set the source of the `PosterImage` depending on the display method.\n   *\n   * @param {string} url\n   *        The URL to the source for the `PosterImage`.\n   */\n\n\n  PosterImage.prototype.setSrc = function setSrc(url) {\n    var backgroundImage = '';\n\n    // Any falsy value should stay as an empty string, otherwise\n    // this will throw an extra error\n    if (url) {\n      backgroundImage = 'url(\"' + url + '\")';\n    }\n\n    this.el_.style.backgroundImage = backgroundImage;\n  };\n\n  /**\n   * An {@link EventTarget~EventListener} for clicks on the `PosterImage`. See\n   * {@link ClickableComponent#handleClick} for instances where this will be triggered.\n   *\n   * @listens tap\n   * @listens click\n   * @listens keydown\n   *\n   * @param {EventTarget~Event} event\n   +        The `click`, `tap` or `keydown` event that caused this function to be called.\n   */\n\n\n  PosterImage.prototype.handleClick = function handleClick(event) {\n    // We don't want a click to trigger playback when controls are disabled\n    if (!this.player_.controls()) {\n      return;\n    }\n\n    if (this.player_.paused()) {\n      silencePromise(this.player_.play());\n    } else {\n      this.player_.pause();\n    }\n  };\n\n  return PosterImage;\n}(ClickableComponent);\n\nComponent.registerComponent('PosterImage', PosterImage);\n\n/**\n * @file text-track-display.js\n */\n\nvar darkGray = '#222';\nvar lightGray = '#ccc';\nvar fontMap = {\n  monospace: 'monospace',\n  sansSerif: 'sans-serif',\n  serif: 'serif',\n  monospaceSansSerif: '\"Andale Mono\", \"Lucida Console\", monospace',\n  monospaceSerif: '\"Courier New\", monospace',\n  proportionalSansSerif: 'sans-serif',\n  proportionalSerif: 'serif',\n  casual: '\"Comic Sans MS\", Impact, fantasy',\n  script: '\"Monotype Corsiva\", cursive',\n  smallcaps: '\"Andale Mono\", \"Lucida Console\", monospace, sans-serif'\n};\n\n/**\n * Construct an rgba color from a given hex color code.\n *\n * @param {number} color\n *        Hex number for color, like #f0e or #f604e2.\n *\n * @param {number} opacity\n *        Value for opacity, 0.0 - 1.0.\n *\n * @return {string}\n *         The rgba color that was created, like 'rgba(255, 0, 0, 0.3)'.\n */\nfunction constructColor(color, opacity) {\n  var hex = void 0;\n\n  if (color.length === 4) {\n    // color looks like \"#f0e\"\n    hex = color[1] + color[1] + color[2] + color[2] + color[3] + color[3];\n  } else if (color.length === 7) {\n    // color looks like \"#f604e2\"\n    hex = color.slice(1);\n  } else {\n    throw new Error('Invalid color code provided, ' + color + '; must be formatted as e.g. #f0e or #f604e2.');\n  }\n  return 'rgba(' + parseInt(hex.slice(0, 2), 16) + ',' + parseInt(hex.slice(2, 4), 16) + ',' + parseInt(hex.slice(4, 6), 16) + ',' + opacity + ')';\n}\n\n/**\n * Try to update the style of a DOM element. Some style changes will throw an error,\n * particularly in IE8. Those should be noops.\n *\n * @param {Element} el\n *        The DOM element to be styled.\n *\n * @param {string} style\n *        The CSS property on the element that should be styled.\n *\n * @param {string} rule\n *        The style rule that should be applied to the property.\n *\n * @private\n */\nfunction tryUpdateStyle(el, style, rule) {\n  try {\n    el.style[style] = rule;\n  } catch (e) {\n\n    // Satisfies linter.\n    return;\n  }\n}\n\n/**\n * The component for displaying text track cues.\n *\n * @extends Component\n */\n\nvar TextTrackDisplay = function (_Component) {\n  inherits(TextTrackDisplay, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        The function to call when `TextTrackDisplay` is ready.\n   */\n  function TextTrackDisplay(player, options, ready) {\n    classCallCheck(this, TextTrackDisplay);\n\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options, ready));\n\n    player.on('loadstart', bind(_this, _this.toggleDisplay));\n    player.on('texttrackchange', bind(_this, _this.updateDisplay));\n    player.on('loadstart', bind(_this, _this.preselectTrack));\n\n    // This used to be called during player init, but was causing an error\n    // if a track should show by default and the display hadn't loaded yet.\n    // Should probably be moved to an external track loader when we support\n    // tracks that don't need a display.\n    player.ready(bind(_this, function () {\n      if (player.tech_ && player.tech_.featuresNativeTextTracks) {\n        this.hide();\n        return;\n      }\n\n      player.on('fullscreenchange', bind(this, this.updateDisplay));\n\n      var tracks = this.options_.playerOptions.tracks || [];\n\n      for (var i = 0; i < tracks.length; i++) {\n        this.player_.addRemoteTextTrack(tracks[i], true);\n      }\n\n      this.preselectTrack();\n    }));\n    return _this;\n  }\n\n  /**\n  * Preselect a track following this precedence:\n  * - matches the previously selected {@link TextTrack}'s language and kind\n  * - matches the previously selected {@link TextTrack}'s language only\n  * - is the first default captions track\n  * - is the first default descriptions track\n  *\n  * @listens Player#loadstart\n  */\n\n\n  TextTrackDisplay.prototype.preselectTrack = function preselectTrack() {\n    var modes = { captions: 1, subtitles: 1 };\n    var trackList = this.player_.textTracks();\n    var userPref = this.player_.cache_.selectedLanguage;\n    var firstDesc = void 0;\n    var firstCaptions = void 0;\n    var preferredTrack = void 0;\n\n    for (var i = 0; i < trackList.length; i++) {\n      var track = trackList[i];\n\n      if (userPref && userPref.enabled && userPref.language === track.language) {\n        // Always choose the track that matches both language and kind\n        if (track.kind === userPref.kind) {\n          preferredTrack = track;\n          // or choose the first track that matches language\n        } else if (!preferredTrack) {\n          preferredTrack = track;\n        }\n\n        // clear everything if offTextTrackMenuItem was clicked\n      } else if (userPref && !userPref.enabled) {\n        preferredTrack = null;\n        firstDesc = null;\n        firstCaptions = null;\n      } else if (track.default) {\n        if (track.kind === 'descriptions' && !firstDesc) {\n          firstDesc = track;\n        } else if (track.kind in modes && !firstCaptions) {\n          firstCaptions = track;\n        }\n      }\n    }\n\n    // The preferredTrack matches the user preference and takes\n    // precedence over all the other tracks.\n    // So, display the preferredTrack before the first default track\n    // and the subtitles/captions track before the descriptions track\n    if (preferredTrack) {\n      preferredTrack.mode = 'showing';\n    } else if (firstCaptions) {\n      firstCaptions.mode = 'showing';\n    } else if (firstDesc) {\n      firstDesc.mode = 'showing';\n    }\n  };\n\n  /**\n   * Turn display of {@link TextTrack}'s from the current state into the other state.\n   * There are only two states:\n   * - 'shown'\n   * - 'hidden'\n   *\n   * @listens Player#loadstart\n   */\n\n\n  TextTrackDisplay.prototype.toggleDisplay = function toggleDisplay() {\n    if (this.player_.tech_ && this.player_.tech_.featuresNativeTextTracks) {\n      this.hide();\n    } else {\n      this.show();\n    }\n  };\n\n  /**\n   * Create the {@link Component}'s DOM element.\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  TextTrackDisplay.prototype.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-text-track-display'\n    }, {\n      'aria-live': 'off',\n      'aria-atomic': 'true'\n    });\n  };\n\n  /**\n   * Clear all displayed {@link TextTrack}s.\n   */\n\n\n  TextTrackDisplay.prototype.clearDisplay = function clearDisplay() {\n    if (typeof window$1.WebVTT === 'function') {\n      window$1.WebVTT.processCues(window$1, [], this.el_);\n    }\n  };\n\n  /**\n   * Update the displayed TextTrack when a either a {@link Player#texttrackchange} or\n   * a {@link Player#fullscreenchange} is fired.\n   *\n   * @listens Player#texttrackchange\n   * @listens Player#fullscreenchange\n   */\n\n\n  TextTrackDisplay.prototype.updateDisplay = function updateDisplay() {\n    var tracks = this.player_.textTracks();\n\n    this.clearDisplay();\n\n    // Track display prioritization model: if multiple tracks are 'showing',\n    //  display the first 'subtitles' or 'captions' track which is 'showing',\n    //  otherwise display the first 'descriptions' track which is 'showing'\n\n    var descriptionsTrack = null;\n    var captionsSubtitlesTrack = null;\n    var i = tracks.length;\n\n    while (i--) {\n      var track = tracks[i];\n\n      if (track.mode === 'showing') {\n        if (track.kind === 'descriptions') {\n          descriptionsTrack = track;\n        } else {\n          captionsSubtitlesTrack = track;\n        }\n      }\n    }\n\n    if (captionsSubtitlesTrack) {\n      if (this.getAttribute('aria-live') !== 'off') {\n        this.setAttribute('aria-live', 'off');\n      }\n      this.updateForTrack(captionsSubtitlesTrack);\n    } else if (descriptionsTrack) {\n      if (this.getAttribute('aria-live') !== 'assertive') {\n        this.setAttribute('aria-live', 'assertive');\n      }\n      this.updateForTrack(descriptionsTrack);\n    }\n  };\n\n  /**\n   * Add an {@link TextTrack} to to the {@link Tech}s {@link TextTrackList}.\n   *\n   * @param {TextTrack} track\n   *        Text track object to be added to the list.\n   */\n\n\n  TextTrackDisplay.prototype.updateForTrack = function updateForTrack(track) {\n    if (typeof window$1.WebVTT !== 'function' || !track.activeCues) {\n      return;\n    }\n\n    var cues = [];\n\n    for (var _i = 0; _i < track.activeCues.length; _i++) {\n      cues.push(track.activeCues[_i]);\n    }\n\n    window$1.WebVTT.processCues(window$1, cues, this.el_);\n\n    if (!this.player_.textTrackSettings) {\n      return;\n    }\n\n    var overrides = this.player_.textTrackSettings.getValues();\n\n    var i = cues.length;\n\n    while (i--) {\n      var cue = cues[i];\n\n      if (!cue) {\n        continue;\n      }\n\n      var cueDiv = cue.displayState;\n\n      if (overrides.color) {\n        cueDiv.firstChild.style.color = overrides.color;\n      }\n      if (overrides.textOpacity) {\n        tryUpdateStyle(cueDiv.firstChild, 'color', constructColor(overrides.color || '#fff', overrides.textOpacity));\n      }\n      if (overrides.backgroundColor) {\n        cueDiv.firstChild.style.backgroundColor = overrides.backgroundColor;\n      }\n      if (overrides.backgroundOpacity) {\n        tryUpdateStyle(cueDiv.firstChild, 'backgroundColor', constructColor(overrides.backgroundColor || '#000', overrides.backgroundOpacity));\n      }\n      if (overrides.windowColor) {\n        if (overrides.windowOpacity) {\n          tryUpdateStyle(cueDiv, 'backgroundColor', constructColor(overrides.windowColor, overrides.windowOpacity));\n        } else {\n          cueDiv.style.backgroundColor = overrides.windowColor;\n        }\n      }\n      if (overrides.edgeStyle) {\n        if (overrides.edgeStyle === 'dropshadow') {\n          cueDiv.firstChild.style.textShadow = '2px 2px 3px ' + darkGray + ', 2px 2px 4px ' + darkGray + ', 2px 2px 5px ' + darkGray;\n        } else if (overrides.edgeStyle === 'raised') {\n          cueDiv.firstChild.style.textShadow = '1px 1px ' + darkGray + ', 2px 2px ' + darkGray + ', 3px 3px ' + darkGray;\n        } else if (overrides.edgeStyle === 'depressed') {\n          cueDiv.firstChild.style.textShadow = '1px 1px ' + lightGray + ', 0 1px ' + lightGray + ', -1px -1px ' + darkGray + ', 0 -1px ' + darkGray;\n        } else if (overrides.edgeStyle === 'uniform') {\n          cueDiv.firstChild.style.textShadow = '0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray;\n        }\n      }\n      if (overrides.fontPercent && overrides.fontPercent !== 1) {\n        var fontSize = window$1.parseFloat(cueDiv.style.fontSize);\n\n        cueDiv.style.fontSize = fontSize * overrides.fontPercent + 'px';\n        cueDiv.style.height = 'auto';\n        cueDiv.style.top = 'auto';\n        cueDiv.style.bottom = '2px';\n      }\n      if (overrides.fontFamily && overrides.fontFamily !== 'default') {\n        if (overrides.fontFamily === 'small-caps') {\n          cueDiv.firstChild.style.fontVariant = 'small-caps';\n        } else {\n          cueDiv.firstChild.style.fontFamily = fontMap[overrides.fontFamily];\n        }\n      }\n    }\n  };\n\n  return TextTrackDisplay;\n}(Component);\n\nComponent.registerComponent('TextTrackDisplay', TextTrackDisplay);\n\n/**\n * @file loading-spinner.js\n */\n\n/**\n * A loading spinner for use during waiting/loading events.\n *\n * @extends Component\n */\n\nvar LoadingSpinner = function (_Component) {\n  inherits(LoadingSpinner, _Component);\n\n  function LoadingSpinner() {\n    classCallCheck(this, LoadingSpinner);\n    return possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  /**\n   * Create the `LoadingSpinner`s DOM element.\n   *\n   * @return {Element}\n   *         The dom element that gets created.\n   */\n  LoadingSpinner.prototype.createEl = function createEl$$1() {\n    var isAudio = this.player_.isAudio();\n    var playerType = this.localize(isAudio ? 'Audio Player' : 'Video Player');\n    var controlText = createEl('span', {\n      className: 'vjs-control-text',\n      innerHTML: this.localize('{1} is loading.', [playerType])\n    });\n\n    var el = _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-loading-spinner',\n      dir: 'ltr'\n    });\n\n    el.appendChild(controlText);\n\n    return el;\n  };\n\n  return LoadingSpinner;\n}(Component);\n\nComponent.registerComponent('LoadingSpinner', LoadingSpinner);\n\n/**\n * @file button.js\n */\n\n/**\n * Base class for all buttons.\n *\n * @extends ClickableComponent\n */\n\nvar Button = function (_ClickableComponent) {\n  inherits(Button, _ClickableComponent);\n\n  function Button() {\n    classCallCheck(this, Button);\n    return possibleConstructorReturn(this, _ClickableComponent.apply(this, arguments));\n  }\n\n  /**\n   * Create the `Button`s DOM element.\n   *\n   * @param {string} [tag=\"button\"]\n   *        The element's node type. This argument is IGNORED: no matter what\n   *        is passed, it will always create a `button` element.\n   *\n   * @param {Object} [props={}]\n   *        An object of properties that should be set on the element.\n   *\n   * @param {Object} [attributes={}]\n   *        An object of attributes that should be set on the element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n  Button.prototype.createEl = function createEl(tag) {\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    tag = 'button';\n\n    props = assign({\n      innerHTML: '<span aria-hidden=\"true\" class=\"vjs-icon-placeholder\"></span>',\n      className: this.buildCSSClass()\n    }, props);\n\n    // Add attributes for button element\n    attributes = assign({\n\n      // Necessary since the default button type is \"submit\"\n      type: 'button'\n    }, attributes);\n\n    var el = Component.prototype.createEl.call(this, tag, props, attributes);\n\n    this.createControlTextEl(el);\n\n    return el;\n  };\n\n  /**\n   * Add a child `Component` inside of this `Button`.\n   *\n   * @param {string|Component} child\n   *        The name or instance of a child to add.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of options that will get passed to children of\n   *        the child.\n   *\n   * @return {Component}\n   *         The `Component` that gets added as a child. When using a string the\n   *         `Component` will get created by this process.\n   *\n   * @deprecated since version 5\n   */\n\n\n  Button.prototype.addChild = function addChild(child) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var className = this.constructor.name;\n\n    log$1.warn('Adding an actionable (user controllable) child to a Button (' + className + ') is not supported; use a ClickableComponent instead.');\n\n    // Avoid the error message generated by ClickableComponent's addChild method\n    return Component.prototype.addChild.call(this, child, options);\n  };\n\n  /**\n   * Enable the `Button` element so that it can be activated or clicked. Use this with\n   * {@link Button#disable}.\n   */\n\n\n  Button.prototype.enable = function enable() {\n    _ClickableComponent.prototype.enable.call(this);\n    this.el_.removeAttribute('disabled');\n  };\n\n  /**\n   * Disable the `Button` element so that it cannot be activated or clicked. Use this with\n   * {@link Button#enable}.\n   */\n\n\n  Button.prototype.disable = function disable() {\n    _ClickableComponent.prototype.disable.call(this);\n    this.el_.setAttribute('disabled', 'disabled');\n  };\n\n  /**\n   * This gets called when a `Button` has focus and `keydown` is triggered via a key\n   * press.\n   *\n   * @param {EventTarget~Event} event\n   *        The event that caused this function to get called.\n   *\n   * @listens keydown\n   */\n\n\n  Button.prototype.handleKeyPress = function handleKeyPress(event) {\n\n    // Ignore Space (32) or Enter (13) key operation, which is handled by the browser for a button.\n    if (event.which === 32 || event.which === 13) {\n      return;\n    }\n\n    // Pass keypress handling up for unsupported keys\n    _ClickableComponent.prototype.handleKeyPress.call(this, event);\n  };\n\n  return Button;\n}(ClickableComponent);\n\nComponent.registerComponent('Button', Button);\n\n/**\n * @file big-play-button.js\n */\n\n/**\n * The initial play button that shows before the video has played. The hiding of the\n * `BigPlayButton` get done via CSS and `Player` states.\n *\n * @extends Button\n */\n\nvar BigPlayButton = function (_Button) {\n  inherits(BigPlayButton, _Button);\n\n  function BigPlayButton(player, options) {\n    classCallCheck(this, BigPlayButton);\n\n    var _this = possibleConstructorReturn(this, _Button.call(this, player, options));\n\n    _this.mouseused_ = false;\n\n    _this.on('mousedown', _this.handleMouseDown);\n    return _this;\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object. Always returns 'vjs-big-play-button'.\n   */\n\n\n  BigPlayButton.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-big-play-button';\n  };\n\n  /**\n   * This gets called when a `BigPlayButton` \"clicked\". See {@link ClickableComponent}\n   * for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n\n\n  BigPlayButton.prototype.handleClick = function handleClick(event) {\n    var playPromise = this.player_.play();\n\n    // exit early if clicked via the mouse\n    if (this.mouseused_ && event.clientX && event.clientY) {\n      silencePromise(playPromise);\n      return;\n    }\n\n    var cb = this.player_.getChild('controlBar');\n    var playToggle = cb && cb.getChild('playToggle');\n\n    if (!playToggle) {\n      this.player_.focus();\n      return;\n    }\n\n    var playFocus = function playFocus() {\n      return playToggle.focus();\n    };\n\n    if (isPromise(playPromise)) {\n      playPromise.then(playFocus, function () {});\n    } else {\n      this.setTimeout(playFocus, 1);\n    }\n  };\n\n  BigPlayButton.prototype.handleKeyPress = function handleKeyPress(event) {\n    this.mouseused_ = false;\n\n    _Button.prototype.handleKeyPress.call(this, event);\n  };\n\n  BigPlayButton.prototype.handleMouseDown = function handleMouseDown(event) {\n    this.mouseused_ = true;\n  };\n\n  return BigPlayButton;\n}(Button);\n\n/**\n * The text that should display over the `BigPlayButton`s controls. Added to for localization.\n *\n * @type {string}\n * @private\n */\n\n\nBigPlayButton.prototype.controlText_ = 'Play Video';\n\nComponent.registerComponent('BigPlayButton', BigPlayButton);\n\n/**\n * @file close-button.js\n */\n\n/**\n * The `CloseButton` is a `{@link Button}` that fires a `close` event when\n * it gets clicked.\n *\n * @extends Button\n */\n\nvar CloseButton = function (_Button) {\n  inherits(CloseButton, _Button);\n\n  /**\n   * Creates an instance of the this class.\n   *\n   * @param  {Player} player\n   *         The `Player` that this class should be attached to.\n   *\n   * @param  {Object} [options]\n   *         The key/value store of player options.\n   */\n  function CloseButton(player, options) {\n    classCallCheck(this, CloseButton);\n\n    var _this = possibleConstructorReturn(this, _Button.call(this, player, options));\n\n    _this.controlText(options && options.controlText || _this.localize('Close'));\n    return _this;\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  CloseButton.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-close-button ' + _Button.prototype.buildCSSClass.call(this);\n  };\n\n  /**\n   * This gets called when a `CloseButton` gets clicked. See\n   * {@link ClickableComponent#handleClick} for more information on when this will be\n   * triggered\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   * @fires CloseButton#close\n   */\n\n\n  CloseButton.prototype.handleClick = function handleClick(event) {\n\n    /**\n     * Triggered when the a `CloseButton` is clicked.\n     *\n     * @event CloseButton#close\n     * @type {EventTarget~Event}\n     *\n     * @property {boolean} [bubbles=false]\n     *           set to false so that the close event does not\n     *           bubble up to parents if there is no listener\n     */\n    this.trigger({ type: 'close', bubbles: false });\n  };\n\n  return CloseButton;\n}(Button);\n\nComponent.registerComponent('CloseButton', CloseButton);\n\n/**\n * @file play-toggle.js\n */\n\n/**\n * Button to toggle between play and pause.\n *\n * @extends Button\n */\n\nvar PlayToggle = function (_Button) {\n  inherits(PlayToggle, _Button);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function PlayToggle(player, options) {\n    classCallCheck(this, PlayToggle);\n\n    var _this = possibleConstructorReturn(this, _Button.call(this, player, options));\n\n    _this.on(player, 'play', _this.handlePlay);\n    _this.on(player, 'pause', _this.handlePause);\n    _this.on(player, 'ended', _this.handleEnded);\n    return _this;\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  PlayToggle.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-play-control ' + _Button.prototype.buildCSSClass.call(this);\n  };\n\n  /**\n   * This gets called when an `PlayToggle` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n\n\n  PlayToggle.prototype.handleClick = function handleClick(event) {\n    if (this.player_.paused()) {\n      this.player_.play();\n    } else {\n      this.player_.pause();\n    }\n  };\n\n  /**\n   * This gets called once after the video has ended and the user seeks so that\n   * we can change the replay button back to a play button.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The event that caused this function to run.\n   *\n   * @listens Player#seeked\n   */\n\n\n  PlayToggle.prototype.handleSeeked = function handleSeeked(event) {\n    this.removeClass('vjs-ended');\n\n    if (this.player_.paused()) {\n      this.handlePause(event);\n    } else {\n      this.handlePlay(event);\n    }\n  };\n\n  /**\n   * Add the vjs-playing class to the element so it can change appearance.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The event that caused this function to run.\n   *\n   * @listens Player#play\n   */\n\n\n  PlayToggle.prototype.handlePlay = function handlePlay(event) {\n    this.removeClass('vjs-ended');\n    this.removeClass('vjs-paused');\n    this.addClass('vjs-playing');\n    // change the button text to \"Pause\"\n    this.controlText('Pause');\n  };\n\n  /**\n   * Add the vjs-paused class to the element so it can change appearance.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The event that caused this function to run.\n   *\n   * @listens Player#pause\n   */\n\n\n  PlayToggle.prototype.handlePause = function handlePause(event) {\n    this.removeClass('vjs-playing');\n    this.addClass('vjs-paused');\n    // change the button text to \"Play\"\n    this.controlText('Play');\n  };\n\n  /**\n   * Add the vjs-ended class to the element so it can change appearance\n   *\n   * @param {EventTarget~Event} [event]\n   *        The event that caused this function to run.\n   *\n   * @listens Player#ended\n   */\n\n\n  PlayToggle.prototype.handleEnded = function handleEnded(event) {\n    this.removeClass('vjs-playing');\n    this.addClass('vjs-ended');\n    // change the button text to \"Replay\"\n    this.controlText('Replay');\n\n    // on the next seek remove the replay button\n    this.one(this.player_, 'seeked', this.handleSeeked);\n  };\n\n  return PlayToggle;\n}(Button);\n\n/**\n * The text that should display over the `PlayToggle`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\n\n\nPlayToggle.prototype.controlText_ = 'Play';\n\nComponent.registerComponent('PlayToggle', PlayToggle);\n\n/**\n * @file format-time.js\n * @module format-time\n */\n\n/**\n* Format seconds as a time string, H:MM:SS or M:SS. Supplying a guide (in seconds)\n* will force a number of leading zeros to cover the length of the guide.\n*\n* @param {number} seconds\n*        Number of seconds to be turned into a string\n*\n* @param {number} guide\n*        Number (in seconds) to model the string after\n*\n* @return {string}\n*         Time formatted as H:MM:SS or M:SS\n*/\nvar defaultImplementation = function defaultImplementation(seconds, guide) {\n  seconds = seconds < 0 ? 0 : seconds;\n  var s = Math.floor(seconds % 60);\n  var m = Math.floor(seconds / 60 % 60);\n  var h = Math.floor(seconds / 3600);\n  var gm = Math.floor(guide / 60 % 60);\n  var gh = Math.floor(guide / 3600);\n\n  // handle invalid times\n  if (isNaN(seconds) || seconds === Infinity) {\n    // '-' is false for all relational operators (e.g. <, >=) so this setting\n    // will add the minimum number of fields specified by the guide\n    h = m = s = '-';\n  }\n\n  // Check if we need to show hours\n  h = h > 0 || gh > 0 ? h + ':' : '';\n\n  // If hours are showing, we may need to add a leading zero.\n  // Always show at least one digit of minutes.\n  m = ((h || gm >= 10) && m < 10 ? '0' + m : m) + ':';\n\n  // Check if leading zero is need for seconds\n  s = s < 10 ? '0' + s : s;\n\n  return h + m + s;\n};\n\nvar implementation = defaultImplementation;\n\n/**\n * Replaces the default formatTime implementation with a custom implementation.\n *\n * @param {Function} customImplementation\n *        A function which will be used in place of the default formatTime implementation.\n *        Will receive the current time in seconds and the guide (in seconds) as arguments.\n */\nfunction setFormatTime(customImplementation) {\n  implementation = customImplementation;\n}\n\n/**\n * Resets formatTime to the default implementation.\n */\nfunction resetFormatTime() {\n  implementation = defaultImplementation;\n}\n\nfunction formatTime (seconds) {\n  var guide = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : seconds;\n\n  return implementation(seconds, guide);\n}\n\n/**\n * @file time-display.js\n */\n\n/**\n * Displays the time left in the video\n *\n * @extends Component\n */\n\nvar TimeDisplay = function (_Component) {\n  inherits(TimeDisplay, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function TimeDisplay(player, options) {\n    classCallCheck(this, TimeDisplay);\n\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));\n\n    _this.throttledUpdateContent = throttle(bind(_this, _this.updateContent), 25);\n    _this.on(player, 'timeupdate', _this.throttledUpdateContent);\n    return _this;\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  TimeDisplay.prototype.createEl = function createEl$$1(plainName) {\n    var className = this.buildCSSClass();\n    var el = _Component.prototype.createEl.call(this, 'div', {\n      className: className + ' vjs-time-control vjs-control',\n      innerHTML: '<span class=\"vjs-control-text\">' + this.localize(this.labelText_) + '\\xA0</span>'\n    });\n\n    this.contentEl_ = createEl('span', {\n      className: className + '-display'\n    }, {\n      // tell screen readers not to automatically read the time as it changes\n      'aria-live': 'off'\n    });\n\n    this.updateTextNode_();\n    el.appendChild(this.contentEl_);\n    return el;\n  };\n\n  TimeDisplay.prototype.dispose = function dispose() {\n    this.contentEl_ = null;\n    this.textNode_ = null;\n\n    _Component.prototype.dispose.call(this);\n  };\n\n  /**\n   * Updates the \"remaining time\" text node with new content using the\n   * contents of the `formattedTime_` property.\n   *\n   * @private\n   */\n\n\n  TimeDisplay.prototype.updateTextNode_ = function updateTextNode_() {\n    if (!this.contentEl_) {\n      return;\n    }\n\n    while (this.contentEl_.firstChild) {\n      this.contentEl_.removeChild(this.contentEl_.firstChild);\n    }\n\n    this.textNode_ = document.createTextNode(this.formattedTime_ || this.formatTime_(0));\n    this.contentEl_.appendChild(this.textNode_);\n  };\n\n  /**\n   * Generates a formatted time for this component to use in display.\n   *\n   * @param  {number} time\n   *         A numeric time, in seconds.\n   *\n   * @return {string}\n   *         A formatted time\n   *\n   * @private\n   */\n\n\n  TimeDisplay.prototype.formatTime_ = function formatTime_(time) {\n    return formatTime(time);\n  };\n\n  /**\n   * Updates the time display text node if it has what was passed in changed\n   * the formatted time.\n   *\n   * @param {number} time\n   *        The time to update to\n   *\n   * @private\n   */\n\n\n  TimeDisplay.prototype.updateFormattedTime_ = function updateFormattedTime_(time) {\n    var formattedTime = this.formatTime_(time);\n\n    if (formattedTime === this.formattedTime_) {\n      return;\n    }\n\n    this.formattedTime_ = formattedTime;\n    this.requestAnimationFrame(this.updateTextNode_);\n  };\n\n  /**\n   * To be filled out in the child class, should update the displayed time\n   * in accordance with the fact that the current time has changed.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `timeupdate`  event that caused this to run.\n   *\n   * @listens Player#timeupdate\n   */\n\n\n  TimeDisplay.prototype.updateContent = function updateContent(event) {};\n\n  return TimeDisplay;\n}(Component);\n\n/**\n * The text that is added to the `TimeDisplay` for screen reader users.\n *\n * @type {string}\n * @private\n */\n\n\nTimeDisplay.prototype.labelText_ = 'Time';\n\n/**\n * The text that should display over the `TimeDisplay`s controls. Added to for localization.\n *\n * @type {string}\n * @private\n *\n * @deprecated in v7; controlText_ is not used in non-active display Components\n */\nTimeDisplay.prototype.controlText_ = 'Time';\n\nComponent.registerComponent('TimeDisplay', TimeDisplay);\n\n/**\n * @file current-time-display.js\n */\n\n/**\n * Displays the current time\n *\n * @extends Component\n */\n\nvar CurrentTimeDisplay = function (_TimeDisplay) {\n  inherits(CurrentTimeDisplay, _TimeDisplay);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function CurrentTimeDisplay(player, options) {\n    classCallCheck(this, CurrentTimeDisplay);\n\n    var _this = possibleConstructorReturn(this, _TimeDisplay.call(this, player, options));\n\n    _this.on(player, 'ended', _this.handleEnded);\n    return _this;\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  CurrentTimeDisplay.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-current-time';\n  };\n\n  /**\n   * Update current time display\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `timeupdate` event that caused this function to run.\n   *\n   * @listens Player#timeupdate\n   */\n\n\n  CurrentTimeDisplay.prototype.updateContent = function updateContent(event) {\n    // Allows for smooth scrubbing, when player can't keep up.\n    var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();\n\n    this.updateFormattedTime_(time);\n  };\n\n  /**\n   * When the player fires ended there should be no time left. Sadly\n   * this is not always the case, lets make it seem like that is the case\n   * for users.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `ended` event that caused this to run.\n   *\n   * @listens Player#ended\n   */\n\n\n  CurrentTimeDisplay.prototype.handleEnded = function handleEnded(event) {\n    if (!this.player_.duration()) {\n      return;\n    }\n    this.updateFormattedTime_(this.player_.duration());\n  };\n\n  return CurrentTimeDisplay;\n}(TimeDisplay);\n\n/**\n * The text that is added to the `CurrentTimeDisplay` for screen reader users.\n *\n * @type {string}\n * @private\n */\n\n\nCurrentTimeDisplay.prototype.labelText_ = 'Current Time';\n\n/**\n * The text that should display over the `CurrentTimeDisplay`s controls. Added to for localization.\n *\n * @type {string}\n * @private\n *\n * @deprecated in v7; controlText_ is not used in non-active display Components\n */\nCurrentTimeDisplay.prototype.controlText_ = 'Current Time';\n\nComponent.registerComponent('CurrentTimeDisplay', CurrentTimeDisplay);\n\n/**\n * @file duration-display.js\n */\n\n/**\n * Displays the duration\n *\n * @extends Component\n */\n\nvar DurationDisplay = function (_TimeDisplay) {\n  inherits(DurationDisplay, _TimeDisplay);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function DurationDisplay(player, options) {\n    classCallCheck(this, DurationDisplay);\n\n    // we do not want to/need to throttle duration changes,\n    // as they should always display the changed duration as\n    // it has changed\n    var _this = possibleConstructorReturn(this, _TimeDisplay.call(this, player, options));\n\n    _this.on(player, 'durationchange', _this.updateContent);\n\n    // Also listen for timeupdate (in the parent) and loadedmetadata because removing those\n    // listeners could have broken dependent applications/libraries. These\n    // can likely be removed for 7.0.\n    _this.on(player, 'loadedmetadata', _this.throttledUpdateContent);\n    return _this;\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  DurationDisplay.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-duration';\n  };\n\n  /**\n   * Update duration time display.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `durationchange`, `timeupdate`, or `loadedmetadata` event that caused\n   *        this function to be called.\n   *\n   * @listens Player#durationchange\n   * @listens Player#timeupdate\n   * @listens Player#loadedmetadata\n   */\n\n\n  DurationDisplay.prototype.updateContent = function updateContent(event) {\n    var duration = this.player_.duration();\n\n    if (duration && this.duration_ !== duration) {\n      this.duration_ = duration;\n      this.updateFormattedTime_(duration);\n    }\n  };\n\n  return DurationDisplay;\n}(TimeDisplay);\n\n/**\n * The text that is added to the `DurationDisplay` for screen reader users.\n *\n * @type {string}\n * @private\n */\n\n\nDurationDisplay.prototype.labelText_ = 'Duration';\n\n/**\n * The text that should display over the `DurationDisplay`s controls. Added to for localization.\n *\n * @type {string}\n * @private\n *\n * @deprecated in v7; controlText_ is not used in non-active display Components\n */\nDurationDisplay.prototype.controlText_ = 'Duration';\n\nComponent.registerComponent('DurationDisplay', DurationDisplay);\n\n/**\n * @file time-divider.js\n */\n\n/**\n * The separator between the current time and duration.\n * Can be hidden if it's not needed in the design.\n *\n * @extends Component\n */\n\nvar TimeDivider = function (_Component) {\n  inherits(TimeDivider, _Component);\n\n  function TimeDivider() {\n    classCallCheck(this, TimeDivider);\n    return possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  /**\n   * Create the component's DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  TimeDivider.prototype.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-time-control vjs-time-divider',\n      innerHTML: '<div><span>/</span></div>'\n    });\n  };\n\n  return TimeDivider;\n}(Component);\n\nComponent.registerComponent('TimeDivider', TimeDivider);\n\n/**\n * @file remaining-time-display.js\n */\n/**\n * Displays the time left in the video\n *\n * @extends Component\n */\n\nvar RemainingTimeDisplay = function (_TimeDisplay) {\n  inherits(RemainingTimeDisplay, _TimeDisplay);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function RemainingTimeDisplay(player, options) {\n    classCallCheck(this, RemainingTimeDisplay);\n\n    var _this = possibleConstructorReturn(this, _TimeDisplay.call(this, player, options));\n\n    _this.on(player, 'durationchange', _this.throttledUpdateContent);\n    _this.on(player, 'ended', _this.handleEnded);\n    return _this;\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  RemainingTimeDisplay.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-remaining-time';\n  };\n\n  /**\n   * The remaining time display prefixes numbers with a \"minus\" character.\n   *\n   * @param  {number} time\n   *         A numeric time, in seconds.\n   *\n   * @return {string}\n   *         A formatted time\n   *\n   * @private\n   */\n\n\n  RemainingTimeDisplay.prototype.formatTime_ = function formatTime_(time) {\n    // TODO: The \"-\" should be decorative, and not announced by a screen reader\n    return '-' + _TimeDisplay.prototype.formatTime_.call(this, time);\n  };\n\n  /**\n   * Update remaining time display.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `timeupdate` or `durationchange` event that caused this to run.\n   *\n   * @listens Player#timeupdate\n   * @listens Player#durationchange\n   */\n\n\n  RemainingTimeDisplay.prototype.updateContent = function updateContent(event) {\n    if (!this.player_.duration()) {\n      return;\n    }\n\n    // @deprecated We should only use remainingTimeDisplay\n    // as of video.js 7\n    if (this.player_.remainingTimeDisplay) {\n      this.updateFormattedTime_(this.player_.remainingTimeDisplay());\n    } else {\n      this.updateFormattedTime_(this.player_.remainingTime());\n    }\n  };\n\n  /**\n   * When the player fires ended there should be no time left. Sadly\n   * this is not always the case, lets make it seem like that is the case\n   * for users.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `ended` event that caused this to run.\n   *\n   * @listens Player#ended\n   */\n\n\n  RemainingTimeDisplay.prototype.handleEnded = function handleEnded(event) {\n    if (!this.player_.duration()) {\n      return;\n    }\n    this.updateFormattedTime_(0);\n  };\n\n  return RemainingTimeDisplay;\n}(TimeDisplay);\n\n/**\n * The text that is added to the `RemainingTimeDisplay` for screen reader users.\n *\n * @type {string}\n * @private\n */\n\n\nRemainingTimeDisplay.prototype.labelText_ = 'Remaining Time';\n\n/**\n * The text that should display over the `RemainingTimeDisplay`s controls. Added to for localization.\n *\n * @type {string}\n * @private\n *\n * @deprecated in v7; controlText_ is not used in non-active display Components\n */\nRemainingTimeDisplay.prototype.controlText_ = 'Remaining Time';\n\nComponent.registerComponent('RemainingTimeDisplay', RemainingTimeDisplay);\n\n/**\n * @file live-display.js\n */\n\n// TODO - Future make it click to snap to live\n\n/**\n * Displays the live indicator when duration is Infinity.\n *\n * @extends Component\n */\n\nvar LiveDisplay = function (_Component) {\n  inherits(LiveDisplay, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function LiveDisplay(player, options) {\n    classCallCheck(this, LiveDisplay);\n\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));\n\n    _this.updateShowing();\n    _this.on(_this.player(), 'durationchange', _this.updateShowing);\n    return _this;\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  LiveDisplay.prototype.createEl = function createEl$$1() {\n    var el = _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-live-control vjs-control'\n    });\n\n    this.contentEl_ = createEl('div', {\n      className: 'vjs-live-display',\n      innerHTML: '<span class=\"vjs-control-text\">' + this.localize('Stream Type') + '\\xA0</span>' + this.localize('LIVE')\n    }, {\n      'aria-live': 'off'\n    });\n\n    el.appendChild(this.contentEl_);\n    return el;\n  };\n\n  LiveDisplay.prototype.dispose = function dispose() {\n    this.contentEl_ = null;\n\n    _Component.prototype.dispose.call(this);\n  };\n\n  /**\n   * Check the duration to see if the LiveDisplay should be showing or not. Then show/hide\n   * it accordingly\n   *\n   * @param {EventTarget~Event} [event]\n   *        The {@link Player#durationchange} event that caused this function to run.\n   *\n   * @listens Player#durationchange\n   */\n\n\n  LiveDisplay.prototype.updateShowing = function updateShowing(event) {\n    if (this.player().duration() === Infinity) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  };\n\n  return LiveDisplay;\n}(Component);\n\nComponent.registerComponent('LiveDisplay', LiveDisplay);\n\n/**\n * @file slider.js\n */\n\n/**\n * The base functionality for a slider. Can be vertical or horizontal.\n * For instance the volume bar or the seek bar on a video is a slider.\n *\n * @extends Component\n */\n\nvar Slider = function (_Component) {\n  inherits(Slider, _Component);\n\n  /**\n   * Create an instance of this class\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function Slider(player, options) {\n    classCallCheck(this, Slider);\n\n    // Set property names to bar to match with the child Slider class is looking for\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));\n\n    _this.bar = _this.getChild(_this.options_.barName);\n\n    // Set a horizontal or vertical class on the slider depending on the slider type\n    _this.vertical(!!_this.options_.vertical);\n\n    _this.enable();\n    return _this;\n  }\n\n  /**\n   * Are controls are currently enabled for this slider or not.\n   *\n   * @return {boolean}\n   *         true if controls are enabled, false otherwise\n   */\n\n\n  Slider.prototype.enabled = function enabled() {\n    return this.enabled_;\n  };\n\n  /**\n   * Enable controls for this slider if they are disabled\n   */\n\n\n  Slider.prototype.enable = function enable() {\n    if (this.enabled()) {\n      return;\n    }\n\n    this.on('mousedown', this.handleMouseDown);\n    this.on('touchstart', this.handleMouseDown);\n    this.on('focus', this.handleFocus);\n    this.on('blur', this.handleBlur);\n    this.on('click', this.handleClick);\n\n    this.on(this.player_, 'controlsvisible', this.update);\n\n    if (this.playerEvent) {\n      this.on(this.player_, this.playerEvent, this.update);\n    }\n\n    this.removeClass('disabled');\n    this.setAttribute('tabindex', 0);\n\n    this.enabled_ = true;\n  };\n\n  /**\n   * Disable controls for this slider if they are enabled\n   */\n\n\n  Slider.prototype.disable = function disable() {\n    if (!this.enabled()) {\n      return;\n    }\n    var doc = this.bar.el_.ownerDocument;\n\n    this.off('mousedown', this.handleMouseDown);\n    this.off('touchstart', this.handleMouseDown);\n    this.off('focus', this.handleFocus);\n    this.off('blur', this.handleBlur);\n    this.off('click', this.handleClick);\n    this.off(this.player_, 'controlsvisible', this.update);\n    this.off(doc, 'mousemove', this.handleMouseMove);\n    this.off(doc, 'mouseup', this.handleMouseUp);\n    this.off(doc, 'touchmove', this.handleMouseMove);\n    this.off(doc, 'touchend', this.handleMouseUp);\n    this.removeAttribute('tabindex');\n\n    this.addClass('disabled');\n\n    if (this.playerEvent) {\n      this.off(this.player_, this.playerEvent, this.update);\n    }\n    this.enabled_ = false;\n  };\n\n  /**\n   * Create the `Slider`s DOM element.\n   *\n   * @param {string} type\n   *        Type of element to create.\n   *\n   * @param {Object} [props={}]\n   *        List of properties in Object form.\n   *\n   * @param {Object} [attributes={}]\n   *        list of attributes in Object form.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n\n\n  Slider.prototype.createEl = function createEl$$1(type) {\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    // Add the slider element class to all sub classes\n    props.className = props.className + ' vjs-slider';\n    props = assign({\n      tabIndex: 0\n    }, props);\n\n    attributes = assign({\n      'role': 'slider',\n      'aria-valuenow': 0,\n      'aria-valuemin': 0,\n      'aria-valuemax': 100,\n      'tabIndex': 0\n    }, attributes);\n\n    return _Component.prototype.createEl.call(this, type, props, attributes);\n  };\n\n  /**\n   * Handle `mousedown` or `touchstart` events on the `Slider`.\n   *\n   * @param {EventTarget~Event} event\n   *        `mousedown` or `touchstart` event that triggered this function\n   *\n   * @listens mousedown\n   * @listens touchstart\n   * @fires Slider#slideractive\n   */\n\n\n  Slider.prototype.handleMouseDown = function handleMouseDown(event) {\n    var doc = this.bar.el_.ownerDocument;\n\n    if (event.type === 'mousedown') {\n      event.preventDefault();\n    }\n    // Do not call preventDefault() on touchstart in Chrome\n    // to avoid console warnings. Use a 'touch-action: none' style\n    // instead to prevent unintented scrolling.\n    // https://developers.google.com/web/updates/2017/01/scrolling-intervention\n    if (event.type === 'touchstart' && !IS_CHROME) {\n      event.preventDefault();\n    }\n    blockTextSelection();\n\n    this.addClass('vjs-sliding');\n    /**\n     * Triggered when the slider is in an active state\n     *\n     * @event Slider#slideractive\n     * @type {EventTarget~Event}\n     */\n    this.trigger('slideractive');\n\n    this.on(doc, 'mousemove', this.handleMouseMove);\n    this.on(doc, 'mouseup', this.handleMouseUp);\n    this.on(doc, 'touchmove', this.handleMouseMove);\n    this.on(doc, 'touchend', this.handleMouseUp);\n\n    this.handleMouseMove(event);\n  };\n\n  /**\n   * Handle the `mousemove`, `touchmove`, and `mousedown` events on this `Slider`.\n   * The `mousemove` and `touchmove` events will only only trigger this function during\n   * `mousedown` and `touchstart`. This is due to {@link Slider#handleMouseDown} and\n   * {@link Slider#handleMouseUp}.\n   *\n   * @param {EventTarget~Event} event\n   *        `mousedown`, `mousemove`, `touchstart`, or `touchmove` event that triggered\n   *        this function\n   *\n   * @listens mousemove\n   * @listens touchmove\n   */\n\n\n  Slider.prototype.handleMouseMove = function handleMouseMove(event) {};\n\n  /**\n   * Handle `mouseup` or `touchend` events on the `Slider`.\n   *\n   * @param {EventTarget~Event} event\n   *        `mouseup` or `touchend` event that triggered this function.\n   *\n   * @listens touchend\n   * @listens mouseup\n   * @fires Slider#sliderinactive\n   */\n\n\n  Slider.prototype.handleMouseUp = function handleMouseUp() {\n    var doc = this.bar.el_.ownerDocument;\n\n    unblockTextSelection();\n\n    this.removeClass('vjs-sliding');\n    /**\n     * Triggered when the slider is no longer in an active state.\n     *\n     * @event Slider#sliderinactive\n     * @type {EventTarget~Event}\n     */\n    this.trigger('sliderinactive');\n\n    this.off(doc, 'mousemove', this.handleMouseMove);\n    this.off(doc, 'mouseup', this.handleMouseUp);\n    this.off(doc, 'touchmove', this.handleMouseMove);\n    this.off(doc, 'touchend', this.handleMouseUp);\n\n    this.update();\n  };\n\n  /**\n   * Update the progress bar of the `Slider`.\n   *\n   * @returns {number}\n   *          The percentage of progress the progress bar represents as a\n   *          number from 0 to 1.\n   */\n\n\n  Slider.prototype.update = function update() {\n\n    // In VolumeBar init we have a setTimeout for update that pops and update\n    // to the end of the execution stack. The player is destroyed before then\n    // update will cause an error\n    if (!this.el_) {\n      return;\n    }\n\n    // If scrubbing, we could use a cached value to make the handle keep up\n    // with the user's mouse. On HTML5 browsers scrubbing is really smooth, but\n    // some flash players are slow, so we might want to utilize this later.\n    // var progress =  (this.player_.scrubbing()) ? this.player_.getCache().currentTime / this.player_.duration() : this.player_.currentTime() / this.player_.duration();\n    var progress = this.getPercent();\n    var bar = this.bar;\n\n    // If there's no bar...\n    if (!bar) {\n      return;\n    }\n\n    // Protect against no duration and other division issues\n    if (typeof progress !== 'number' || progress !== progress || progress < 0 || progress === Infinity) {\n      progress = 0;\n    }\n\n    // Convert to a percentage for setting\n    var percentage = (progress * 100).toFixed(2) + '%';\n    var style = bar.el().style;\n\n    // Set the new bar width or height\n    if (this.vertical()) {\n      style.height = percentage;\n    } else {\n      style.width = percentage;\n    }\n\n    return progress;\n  };\n\n  /**\n   * Calculate distance for slider\n   *\n   * @param {EventTarget~Event} event\n   *        The event that caused this function to run.\n   *\n   * @return {number}\n   *         The current position of the Slider.\n   *         - position.x for vertical `Slider`s\n   *         - position.y for horizontal `Slider`s\n   */\n\n\n  Slider.prototype.calculateDistance = function calculateDistance(event) {\n    var position = getPointerPosition(this.el_, event);\n\n    if (this.vertical()) {\n      return position.y;\n    }\n    return position.x;\n  };\n\n  /**\n   * Handle a `focus` event on this `Slider`.\n   *\n   * @param {EventTarget~Event} event\n   *        The `focus` event that caused this function to run.\n   *\n   * @listens focus\n   */\n\n\n  Slider.prototype.handleFocus = function handleFocus() {\n    this.on(this.bar.el_.ownerDocument, 'keydown', this.handleKeyPress);\n  };\n\n  /**\n   * Handle a `keydown` event on the `Slider`. Watches for left, rigth, up, and down\n   * arrow keys. This function will only be called when the slider has focus. See\n   * {@link Slider#handleFocus} and {@link Slider#handleBlur}.\n   *\n   * @param {EventTarget~Event} event\n   *        the `keydown` event that caused this function to run.\n   *\n   * @listens keydown\n   */\n\n\n  Slider.prototype.handleKeyPress = function handleKeyPress(event) {\n    // Left and Down Arrows\n    if (event.which === 37 || event.which === 40) {\n      event.preventDefault();\n      this.stepBack();\n\n      // Up and Right Arrows\n    } else if (event.which === 38 || event.which === 39) {\n      event.preventDefault();\n      this.stepForward();\n    }\n  };\n\n  /**\n   * Handle a `blur` event on this `Slider`.\n   *\n   * @param {EventTarget~Event} event\n   *        The `blur` event that caused this function to run.\n   *\n   * @listens blur\n   */\n\n  Slider.prototype.handleBlur = function handleBlur() {\n    this.off(this.bar.el_.ownerDocument, 'keydown', this.handleKeyPress);\n  };\n\n  /**\n   * Listener for click events on slider, used to prevent clicks\n   *   from bubbling up to parent elements like button menus.\n   *\n   * @param {Object} event\n   *        Event that caused this object to run\n   */\n\n\n  Slider.prototype.handleClick = function handleClick(event) {\n    event.stopImmediatePropagation();\n    event.preventDefault();\n  };\n\n  /**\n   * Get/set if slider is horizontal for vertical\n   *\n   * @param {boolean} [bool]\n   *        - true if slider is vertical,\n   *        - false is horizontal\n   *\n   * @return {boolean}\n   *         - true if slider is vertical, and getting\n   *         - false if the slider is horizontal, and getting\n   */\n\n\n  Slider.prototype.vertical = function vertical(bool) {\n    if (bool === undefined) {\n      return this.vertical_ || false;\n    }\n\n    this.vertical_ = !!bool;\n\n    if (this.vertical_) {\n      this.addClass('vjs-slider-vertical');\n    } else {\n      this.addClass('vjs-slider-horizontal');\n    }\n  };\n\n  return Slider;\n}(Component);\n\nComponent.registerComponent('Slider', Slider);\n\n/**\n * @file load-progress-bar.js\n */\n\n/**\n * Shows loading progress\n *\n * @extends Component\n */\n\nvar LoadProgressBar = function (_Component) {\n  inherits(LoadProgressBar, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function LoadProgressBar(player, options) {\n    classCallCheck(this, LoadProgressBar);\n\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));\n\n    _this.partEls_ = [];\n    _this.on(player, 'progress', _this.update);\n    return _this;\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  LoadProgressBar.prototype.createEl = function createEl$$1() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-load-progress',\n      innerHTML: '<span class=\"vjs-control-text\"><span>' + this.localize('Loaded') + '</span>: 0%</span>'\n    });\n  };\n\n  LoadProgressBar.prototype.dispose = function dispose() {\n    this.partEls_ = null;\n\n    _Component.prototype.dispose.call(this);\n  };\n\n  /**\n   * Update progress bar\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `progress` event that caused this function to run.\n   *\n   * @listens Player#progress\n   */\n\n\n  LoadProgressBar.prototype.update = function update(event) {\n    var buffered = this.player_.buffered();\n    var duration = this.player_.duration();\n    var bufferedEnd = this.player_.bufferedEnd();\n    var children = this.partEls_;\n\n    // get the percent width of a time compared to the total end\n    var percentify = function percentify(time, end) {\n      // no NaN\n      var percent = time / end || 0;\n\n      return (percent >= 1 ? 1 : percent) * 100 + '%';\n    };\n\n    // update the width of the progress bar\n    this.el_.style.width = percentify(bufferedEnd, duration);\n\n    // add child elements to represent the individual buffered time ranges\n    for (var i = 0; i < buffered.length; i++) {\n      var start = buffered.start(i);\n      var end = buffered.end(i);\n      var part = children[i];\n\n      if (!part) {\n        part = this.el_.appendChild(createEl());\n        children[i] = part;\n      }\n\n      // set the percent based on the width of the progress bar (bufferedEnd)\n      part.style.left = percentify(start, bufferedEnd);\n      part.style.width = percentify(end - start, bufferedEnd);\n    }\n\n    // remove unused buffered range elements\n    for (var _i = children.length; _i > buffered.length; _i--) {\n      this.el_.removeChild(children[_i - 1]);\n    }\n    children.length = buffered.length;\n  };\n\n  return LoadProgressBar;\n}(Component);\n\nComponent.registerComponent('LoadProgressBar', LoadProgressBar);\n\n/**\n * @file time-tooltip.js\n */\n\n/**\n * Time tooltips display a time above the progress bar.\n *\n * @extends Component\n */\n\nvar TimeTooltip = function (_Component) {\n  inherits(TimeTooltip, _Component);\n\n  function TimeTooltip() {\n    classCallCheck(this, TimeTooltip);\n    return possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  /**\n   * Create the time tooltip DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  TimeTooltip.prototype.createEl = function createEl$$1() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-time-tooltip'\n    });\n  };\n\n  /**\n   * Updates the position of the time tooltip relative to the `SeekBar`.\n   *\n   * @param {Object} seekBarRect\n   *        The `ClientRect` for the {@link SeekBar} element.\n   *\n   * @param {number} seekBarPoint\n   *        A number from 0 to 1, representing a horizontal reference point\n   *        from the left edge of the {@link SeekBar}\n   */\n\n\n  TimeTooltip.prototype.update = function update(seekBarRect, seekBarPoint, content) {\n    var tooltipRect = getBoundingClientRect(this.el_);\n    var playerRect = getBoundingClientRect(this.player_.el());\n    var seekBarPointPx = seekBarRect.width * seekBarPoint;\n\n    // do nothing if either rect isn't available\n    // for example, if the player isn't in the DOM for testing\n    if (!playerRect || !tooltipRect) {\n      return;\n    }\n\n    // This is the space left of the `seekBarPoint` available within the bounds\n    // of the player. We calculate any gap between the left edge of the player\n    // and the left edge of the `SeekBar` and add the number of pixels in the\n    // `SeekBar` before hitting the `seekBarPoint`\n    var spaceLeftOfPoint = seekBarRect.left - playerRect.left + seekBarPointPx;\n\n    // This is the space right of the `seekBarPoint` available within the bounds\n    // of the player. We calculate the number of pixels from the `seekBarPoint`\n    // to the right edge of the `SeekBar` and add to that any gap between the\n    // right edge of the `SeekBar` and the player.\n    var spaceRightOfPoint = seekBarRect.width - seekBarPointPx + (playerRect.right - seekBarRect.right);\n\n    // This is the number of pixels by which the tooltip will need to be pulled\n    // further to the right to center it over the `seekBarPoint`.\n    var pullTooltipBy = tooltipRect.width / 2;\n\n    // Adjust the `pullTooltipBy` distance to the left or right depending on\n    // the results of the space calculations above.\n    if (spaceLeftOfPoint < pullTooltipBy) {\n      pullTooltipBy += pullTooltipBy - spaceLeftOfPoint;\n    } else if (spaceRightOfPoint < pullTooltipBy) {\n      pullTooltipBy = spaceRightOfPoint;\n    }\n\n    // Due to the imprecision of decimal/ratio based calculations and varying\n    // rounding behaviors, there are cases where the spacing adjustment is off\n    // by a pixel or two. This adds insurance to these calculations.\n    if (pullTooltipBy < 0) {\n      pullTooltipBy = 0;\n    } else if (pullTooltipBy > tooltipRect.width) {\n      pullTooltipBy = tooltipRect.width;\n    }\n\n    this.el_.style.right = '-' + pullTooltipBy + 'px';\n    textContent(this.el_, content);\n  };\n\n  return TimeTooltip;\n}(Component);\n\nComponent.registerComponent('TimeTooltip', TimeTooltip);\n\n/**\n * @file play-progress-bar.js\n */\n\n/**\n * Used by {@link SeekBar} to display media playback progress as part of the\n * {@link ProgressControl}.\n *\n * @extends Component\n */\n\nvar PlayProgressBar = function (_Component) {\n  inherits(PlayProgressBar, _Component);\n\n  function PlayProgressBar() {\n    classCallCheck(this, PlayProgressBar);\n    return possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  /**\n   * Create the the DOM element for this class.\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  PlayProgressBar.prototype.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-play-progress vjs-slider-bar',\n      innerHTML: '<span class=\"vjs-control-text\"><span>' + this.localize('Progress') + '</span>: 0%</span>'\n    });\n  };\n\n  /**\n   * Enqueues updates to its own DOM as well as the DOM of its\n   * {@link TimeTooltip} child.\n   *\n   * @param {Object} seekBarRect\n   *        The `ClientRect` for the {@link SeekBar} element.\n   *\n   * @param {number} seekBarPoint\n   *        A number from 0 to 1, representing a horizontal reference point\n   *        from the left edge of the {@link SeekBar}\n   */\n\n\n  PlayProgressBar.prototype.update = function update(seekBarRect, seekBarPoint) {\n    var _this2 = this;\n\n    // If there is an existing rAF ID, cancel it so we don't over-queue.\n    if (this.rafId_) {\n      this.cancelAnimationFrame(this.rafId_);\n    }\n\n    this.rafId_ = this.requestAnimationFrame(function () {\n      var time = _this2.player_.scrubbing() ? _this2.player_.getCache().currentTime : _this2.player_.currentTime();\n\n      var content = formatTime(time, _this2.player_.duration());\n      var timeTooltip = _this2.getChild('timeTooltip');\n\n      if (timeTooltip) {\n        timeTooltip.update(seekBarRect, seekBarPoint, content);\n      }\n    });\n  };\n\n  return PlayProgressBar;\n}(Component);\n\n/**\n * Default options for {@link PlayProgressBar}.\n *\n * @type {Object}\n * @private\n */\n\n\nPlayProgressBar.prototype.options_ = {\n  children: []\n};\n\n// Time tooltips should not be added to a player on mobile devices\nif (!IS_IOS && !IS_ANDROID) {\n  PlayProgressBar.prototype.options_.children.push('timeTooltip');\n}\n\nComponent.registerComponent('PlayProgressBar', PlayProgressBar);\n\n/**\n * @file mouse-time-display.js\n */\n\n/**\n * The {@link MouseTimeDisplay} component tracks mouse movement over the\n * {@link ProgressControl}. It displays an indicator and a {@link TimeTooltip}\n * indicating the time which is represented by a given point in the\n * {@link ProgressControl}.\n *\n * @extends Component\n */\n\nvar MouseTimeDisplay = function (_Component) {\n  inherits(MouseTimeDisplay, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The {@link Player} that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function MouseTimeDisplay(player, options) {\n    classCallCheck(this, MouseTimeDisplay);\n\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));\n\n    _this.update = throttle(bind(_this, _this.update), 25);\n    return _this;\n  }\n\n  /**\n   * Create the DOM element for this class.\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  MouseTimeDisplay.prototype.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-mouse-display'\n    });\n  };\n\n  /**\n   * Enqueues updates to its own DOM as well as the DOM of its\n   * {@link TimeTooltip} child.\n   *\n   * @param {Object} seekBarRect\n   *        The `ClientRect` for the {@link SeekBar} element.\n   *\n   * @param {number} seekBarPoint\n   *        A number from 0 to 1, representing a horizontal reference point\n   *        from the left edge of the {@link SeekBar}\n   */\n\n\n  MouseTimeDisplay.prototype.update = function update(seekBarRect, seekBarPoint) {\n    var _this2 = this;\n\n    // If there is an existing rAF ID, cancel it so we don't over-queue.\n    if (this.rafId_) {\n      this.cancelAnimationFrame(this.rafId_);\n    }\n\n    this.rafId_ = this.requestAnimationFrame(function () {\n      var duration = _this2.player_.duration();\n      var content = formatTime(seekBarPoint * duration, duration);\n\n      _this2.el_.style.left = seekBarRect.width * seekBarPoint + 'px';\n      _this2.getChild('timeTooltip').update(seekBarRect, seekBarPoint, content);\n    });\n  };\n\n  return MouseTimeDisplay;\n}(Component);\n\n/**\n * Default options for `MouseTimeDisplay`\n *\n * @type {Object}\n * @private\n */\n\n\nMouseTimeDisplay.prototype.options_ = {\n  children: ['timeTooltip']\n};\n\nComponent.registerComponent('MouseTimeDisplay', MouseTimeDisplay);\n\n/**\n * @file seek-bar.js\n */\n\n// The number of seconds the `step*` functions move the timeline.\nvar STEP_SECONDS = 5;\n\n// The interval at which the bar should update as it progresses.\nvar UPDATE_REFRESH_INTERVAL = 30;\n\n/**\n * Seek bar and container for the progress bars. Uses {@link PlayProgressBar}\n * as its `bar`.\n *\n * @extends Slider\n */\n\nvar SeekBar = function (_Slider) {\n  inherits(SeekBar, _Slider);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function SeekBar(player, options) {\n    classCallCheck(this, SeekBar);\n\n    var _this = possibleConstructorReturn(this, _Slider.call(this, player, options));\n\n    _this.setEventHandlers_();\n    return _this;\n  }\n\n  /**\n   * Sets the event handlers\n   *\n   * @private\n   */\n\n\n  SeekBar.prototype.setEventHandlers_ = function setEventHandlers_() {\n    var _this2 = this;\n\n    this.update = throttle(bind(this, this.update), UPDATE_REFRESH_INTERVAL);\n\n    this.on(this.player_, 'timeupdate', this.update);\n    this.on(this.player_, 'ended', this.handleEnded);\n\n    // when playing, let's ensure we smoothly update the play progress bar\n    // via an interval\n    this.updateInterval = null;\n\n    this.on(this.player_, ['playing'], function () {\n      _this2.clearInterval(_this2.updateInterval);\n\n      _this2.updateInterval = _this2.setInterval(function () {\n        _this2.requestAnimationFrame(function () {\n          _this2.update();\n        });\n      }, UPDATE_REFRESH_INTERVAL);\n    });\n\n    this.on(this.player_, ['ended', 'pause', 'waiting'], function () {\n      _this2.clearInterval(_this2.updateInterval);\n    });\n\n    this.on(this.player_, ['timeupdate', 'ended'], this.update);\n  };\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  SeekBar.prototype.createEl = function createEl$$1() {\n    return _Slider.prototype.createEl.call(this, 'div', {\n      className: 'vjs-progress-holder'\n    }, {\n      'aria-label': this.localize('Progress Bar')\n    });\n  };\n\n  /**\n   * This function updates the play progress bar and accessibility\n   * attributes to whatever is passed in.\n   *\n   * @param {number} currentTime\n   *        The currentTime value that should be used for accessibility\n   *\n   * @param {number} percent\n   *        The percentage as a decimal that the bar should be filled from 0-1.\n   *\n   * @private\n   */\n\n\n  SeekBar.prototype.update_ = function update_(currentTime, percent) {\n    var duration = this.player_.duration();\n\n    // machine readable value of progress bar (percentage complete)\n    this.el_.setAttribute('aria-valuenow', (percent * 100).toFixed(2));\n\n    // human readable value of progress bar (time complete)\n    this.el_.setAttribute('aria-valuetext', this.localize('progress bar timing: currentTime={1} duration={2}', [formatTime(currentTime, duration), formatTime(duration, duration)], '{1} of {2}'));\n\n    // Update the `PlayProgressBar`.\n    this.bar.update(getBoundingClientRect(this.el_), percent);\n  };\n\n  /**\n   * Update the seek bar's UI.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `timeupdate` or `ended` event that caused this to run.\n   *\n   * @listens Player#timeupdate\n   *\n   * @returns {number}\n   *          The current percent at a number from 0-1\n   */\n\n\n  SeekBar.prototype.update = function update(event) {\n    var percent = _Slider.prototype.update.call(this);\n\n    this.update_(this.getCurrentTime_(), percent);\n    return percent;\n  };\n\n  /**\n   * Get the value of current time but allows for smooth scrubbing,\n   * when player can't keep up.\n   *\n   * @return {number}\n   *         The current time value to display\n   *\n   * @private\n   */\n\n\n  SeekBar.prototype.getCurrentTime_ = function getCurrentTime_() {\n    return this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();\n  };\n\n  /**\n   * We want the seek bar to be full on ended\n   * no matter what the actual internal values are. so we force it.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `timeupdate` or `ended` event that caused this to run.\n   *\n   * @listens Player#ended\n   */\n\n\n  SeekBar.prototype.handleEnded = function handleEnded(event) {\n    this.update_(this.player_.duration(), 1);\n  };\n\n  /**\n   * Get the percentage of media played so far.\n   *\n   * @return {number}\n   *         The percentage of media played so far (0 to 1).\n   */\n\n\n  SeekBar.prototype.getPercent = function getPercent() {\n    var percent = this.getCurrentTime_() / this.player_.duration();\n\n    return percent >= 1 ? 1 : percent || 0;\n  };\n\n  /**\n   * Handle mouse down on seek bar\n   *\n   * @param {EventTarget~Event} event\n   *        The `mousedown` event that caused this to run.\n   *\n   * @listens mousedown\n   */\n\n\n  SeekBar.prototype.handleMouseDown = function handleMouseDown(event) {\n    if (!isSingleLeftClick(event)) {\n      return;\n    }\n\n    // Stop event propagation to prevent double fire in progress-control.js\n    event.stopPropagation();\n    this.player_.scrubbing(true);\n\n    this.videoWasPlaying = !this.player_.paused();\n    this.player_.pause();\n\n    _Slider.prototype.handleMouseDown.call(this, event);\n  };\n\n  /**\n   * Handle mouse move on seek bar\n   *\n   * @param {EventTarget~Event} event\n   *        The `mousemove` event that caused this to run.\n   *\n   * @listens mousemove\n   */\n\n\n  SeekBar.prototype.handleMouseMove = function handleMouseMove(event) {\n    if (!isSingleLeftClick(event)) {\n      return;\n    }\n\n    var newTime = this.calculateDistance(event) * this.player_.duration();\n\n    // Don't let video end while scrubbing.\n    if (newTime === this.player_.duration()) {\n      newTime = newTime - 0.1;\n    }\n\n    // Set new time (tell player to seek to new time)\n    this.player_.currentTime(newTime);\n  };\n\n  SeekBar.prototype.enable = function enable() {\n    _Slider.prototype.enable.call(this);\n    var mouseTimeDisplay = this.getChild('mouseTimeDisplay');\n\n    if (!mouseTimeDisplay) {\n      return;\n    }\n\n    mouseTimeDisplay.show();\n  };\n\n  SeekBar.prototype.disable = function disable() {\n    _Slider.prototype.disable.call(this);\n    var mouseTimeDisplay = this.getChild('mouseTimeDisplay');\n\n    if (!mouseTimeDisplay) {\n      return;\n    }\n\n    mouseTimeDisplay.hide();\n  };\n\n  /**\n   * Handle mouse up on seek bar\n   *\n   * @param {EventTarget~Event} event\n   *        The `mouseup` event that caused this to run.\n   *\n   * @listens mouseup\n   */\n\n\n  SeekBar.prototype.handleMouseUp = function handleMouseUp(event) {\n    _Slider.prototype.handleMouseUp.call(this, event);\n\n    // Stop event propagation to prevent double fire in progress-control.js\n    if (event) {\n      event.stopPropagation();\n    }\n    this.player_.scrubbing(false);\n\n    /**\n     * Trigger timeupdate because we're done seeking and the time has changed.\n     * This is particularly useful for if the player is paused to time the time displays.\n     *\n     * @event Tech#timeupdate\n     * @type {EventTarget~Event}\n     */\n    this.player_.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });\n    if (this.videoWasPlaying) {\n      silencePromise(this.player_.play());\n    }\n  };\n\n  /**\n   * Move more quickly fast forward for keyboard-only users\n   */\n\n\n  SeekBar.prototype.stepForward = function stepForward() {\n    this.player_.currentTime(this.player_.currentTime() + STEP_SECONDS);\n  };\n\n  /**\n   * Move more quickly rewind for keyboard-only users\n   */\n\n\n  SeekBar.prototype.stepBack = function stepBack() {\n    this.player_.currentTime(this.player_.currentTime() - STEP_SECONDS);\n  };\n\n  /**\n   * Toggles the playback state of the player\n   * This gets called when enter or space is used on the seekbar\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown` event that caused this function to be called\n   *\n   */\n\n\n  SeekBar.prototype.handleAction = function handleAction(event) {\n    if (this.player_.paused()) {\n      this.player_.play();\n    } else {\n      this.player_.pause();\n    }\n  };\n\n  /**\n   * Called when this SeekBar has focus and a key gets pressed down. By\n   * default it will call `this.handleAction` when the key is space or enter.\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown` event that caused this function to be called.\n   *\n   * @listens keydown\n   */\n\n\n  SeekBar.prototype.handleKeyPress = function handleKeyPress(event) {\n\n    // Support Space (32) or Enter (13) key operation to fire a click event\n    if (event.which === 32 || event.which === 13) {\n      event.preventDefault();\n      this.handleAction(event);\n    } else if (_Slider.prototype.handleKeyPress) {\n\n      // Pass keypress handling up for unsupported keys\n      _Slider.prototype.handleKeyPress.call(this, event);\n    }\n  };\n\n  return SeekBar;\n}(Slider);\n\n/**\n * Default options for the `SeekBar`\n *\n * @type {Object}\n * @private\n */\n\n\nSeekBar.prototype.options_ = {\n  children: ['loadProgressBar', 'playProgressBar'],\n  barName: 'playProgressBar'\n};\n\n// MouseTimeDisplay tooltips should not be added to a player on mobile devices\nif (!IS_IOS && !IS_ANDROID) {\n  SeekBar.prototype.options_.children.splice(1, 0, 'mouseTimeDisplay');\n}\n\n/**\n * Call the update event for this Slider when this event happens on the player.\n *\n * @type {string}\n */\nSeekBar.prototype.playerEvent = 'timeupdate';\n\nComponent.registerComponent('SeekBar', SeekBar);\n\n/**\n * @file progress-control.js\n */\n\n/**\n * The Progress Control component contains the seek bar, load progress,\n * and play progress.\n *\n * @extends Component\n */\n\nvar ProgressControl = function (_Component) {\n  inherits(ProgressControl, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function ProgressControl(player, options) {\n    classCallCheck(this, ProgressControl);\n\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));\n\n    _this.handleMouseMove = throttle(bind(_this, _this.handleMouseMove), 25);\n    _this.throttledHandleMouseSeek = throttle(bind(_this, _this.handleMouseSeek), 25);\n\n    _this.enable();\n    return _this;\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  ProgressControl.prototype.createEl = function createEl$$1() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-progress-control vjs-control'\n    });\n  };\n\n  /**\n   * When the mouse moves over the `ProgressControl`, the pointer position\n   * gets passed down to the `MouseTimeDisplay` component.\n   *\n   * @param {EventTarget~Event} event\n   *        The `mousemove` event that caused this function to run.\n   *\n   * @listen mousemove\n   */\n\n\n  ProgressControl.prototype.handleMouseMove = function handleMouseMove(event) {\n    var seekBar = this.getChild('seekBar');\n\n    if (seekBar) {\n      var mouseTimeDisplay = seekBar.getChild('mouseTimeDisplay');\n      var seekBarEl = seekBar.el();\n      var seekBarRect = getBoundingClientRect(seekBarEl);\n      var seekBarPoint = getPointerPosition(seekBarEl, event).x;\n\n      // The default skin has a gap on either side of the `SeekBar`. This means\n      // that it's possible to trigger this behavior outside the boundaries of\n      // the `SeekBar`. This ensures we stay within it at all times.\n      if (seekBarPoint > 1) {\n        seekBarPoint = 1;\n      } else if (seekBarPoint < 0) {\n        seekBarPoint = 0;\n      }\n\n      if (mouseTimeDisplay) {\n        mouseTimeDisplay.update(seekBarRect, seekBarPoint);\n      }\n    }\n  };\n\n  /**\n   * A throttled version of the {@link ProgressControl#handleMouseSeek} listener.\n   *\n   * @method ProgressControl#throttledHandleMouseSeek\n   * @param {EventTarget~Event} event\n   *        The `mousemove` event that caused this function to run.\n   *\n   * @listen mousemove\n   * @listen touchmove\n   */\n\n  /**\n   * Handle `mousemove` or `touchmove` events on the `ProgressControl`.\n   *\n   * @param {EventTarget~Event} event\n   *        `mousedown` or `touchstart` event that triggered this function\n   *\n   * @listens mousemove\n   * @listens touchmove\n   */\n\n\n  ProgressControl.prototype.handleMouseSeek = function handleMouseSeek(event) {\n    var seekBar = this.getChild('seekBar');\n\n    if (seekBar) {\n      seekBar.handleMouseMove(event);\n    }\n  };\n\n  /**\n   * Are controls are currently enabled for this progress control.\n   *\n   * @return {boolean}\n   *         true if controls are enabled, false otherwise\n   */\n\n\n  ProgressControl.prototype.enabled = function enabled() {\n    return this.enabled_;\n  };\n\n  /**\n   * Disable all controls on the progress control and its children\n   */\n\n\n  ProgressControl.prototype.disable = function disable() {\n    this.children().forEach(function (child) {\n      return child.disable && child.disable();\n    });\n\n    if (!this.enabled()) {\n      return;\n    }\n\n    this.off(['mousedown', 'touchstart'], this.handleMouseDown);\n    this.off(this.el_, 'mousemove', this.handleMouseMove);\n    this.handleMouseUp();\n\n    this.addClass('disabled');\n\n    this.enabled_ = false;\n  };\n\n  /**\n   * Enable all controls on the progress control and its children\n   */\n\n\n  ProgressControl.prototype.enable = function enable() {\n    this.children().forEach(function (child) {\n      return child.enable && child.enable();\n    });\n\n    if (this.enabled()) {\n      return;\n    }\n\n    this.on(['mousedown', 'touchstart'], this.handleMouseDown);\n    this.on(this.el_, 'mousemove', this.handleMouseMove);\n    this.removeClass('disabled');\n\n    this.enabled_ = true;\n  };\n\n  /**\n   * Handle `mousedown` or `touchstart` events on the `ProgressControl`.\n   *\n   * @param {EventTarget~Event} event\n   *        `mousedown` or `touchstart` event that triggered this function\n   *\n   * @listens mousedown\n   * @listens touchstart\n   */\n\n\n  ProgressControl.prototype.handleMouseDown = function handleMouseDown(event) {\n    var doc = this.el_.ownerDocument;\n    var seekBar = this.getChild('seekBar');\n\n    if (seekBar) {\n      seekBar.handleMouseDown(event);\n    }\n\n    this.on(doc, 'mousemove', this.throttledHandleMouseSeek);\n    this.on(doc, 'touchmove', this.throttledHandleMouseSeek);\n    this.on(doc, 'mouseup', this.handleMouseUp);\n    this.on(doc, 'touchend', this.handleMouseUp);\n  };\n\n  /**\n   * Handle `mouseup` or `touchend` events on the `ProgressControl`.\n   *\n   * @param {EventTarget~Event} event\n   *        `mouseup` or `touchend` event that triggered this function.\n   *\n   * @listens touchend\n   * @listens mouseup\n   */\n\n\n  ProgressControl.prototype.handleMouseUp = function handleMouseUp(event) {\n    var doc = this.el_.ownerDocument;\n    var seekBar = this.getChild('seekBar');\n\n    if (seekBar) {\n      seekBar.handleMouseUp(event);\n    }\n\n    this.off(doc, 'mousemove', this.throttledHandleMouseSeek);\n    this.off(doc, 'touchmove', this.throttledHandleMouseSeek);\n    this.off(doc, 'mouseup', this.handleMouseUp);\n    this.off(doc, 'touchend', this.handleMouseUp);\n  };\n\n  return ProgressControl;\n}(Component);\n\n/**\n * Default options for `ProgressControl`\n *\n * @type {Object}\n * @private\n */\n\n\nProgressControl.prototype.options_ = {\n  children: ['seekBar']\n};\n\nComponent.registerComponent('ProgressControl', ProgressControl);\n\n/**\n * @file fullscreen-toggle.js\n */\n\n/**\n * Toggle fullscreen video\n *\n * @extends Button\n */\n\nvar FullscreenToggle = function (_Button) {\n  inherits(FullscreenToggle, _Button);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function FullscreenToggle(player, options) {\n    classCallCheck(this, FullscreenToggle);\n\n    var _this = possibleConstructorReturn(this, _Button.call(this, player, options));\n\n    _this.on(player, 'fullscreenchange', _this.handleFullscreenChange);\n\n    if (document[FullscreenApi.fullscreenEnabled] === false) {\n      _this.disable();\n    }\n    return _this;\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  FullscreenToggle.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-fullscreen-control ' + _Button.prototype.buildCSSClass.call(this);\n  };\n\n  /**\n   * Handles fullscreenchange on the player and change control text accordingly.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The {@link Player#fullscreenchange} event that caused this function to be\n   *        called.\n   *\n   * @listens Player#fullscreenchange\n   */\n\n\n  FullscreenToggle.prototype.handleFullscreenChange = function handleFullscreenChange(event) {\n    if (this.player_.isFullscreen()) {\n      this.controlText('Non-Fullscreen');\n    } else {\n      this.controlText('Fullscreen');\n    }\n  };\n\n  /**\n   * This gets called when an `FullscreenToggle` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n\n\n  FullscreenToggle.prototype.handleClick = function handleClick(event) {\n    if (!this.player_.isFullscreen()) {\n      this.player_.requestFullscreen();\n    } else {\n      this.player_.exitFullscreen();\n    }\n  };\n\n  return FullscreenToggle;\n}(Button);\n\n/**\n * The text that should display over the `FullscreenToggle`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\n\n\nFullscreenToggle.prototype.controlText_ = 'Fullscreen';\n\nComponent.registerComponent('FullscreenToggle', FullscreenToggle);\n\n/**\n * Check if volume control is supported and if it isn't hide the\n * `Component` that was passed  using the `vjs-hidden` class.\n *\n * @param {Component} self\n *        The component that should be hidden if volume is unsupported\n *\n * @param {Player} player\n *        A reference to the player\n *\n * @private\n */\nvar checkVolumeSupport = function checkVolumeSupport(self, player) {\n  // hide volume controls when they're not supported by the current tech\n  if (player.tech_ && !player.tech_.featuresVolumeControl) {\n    self.addClass('vjs-hidden');\n  }\n\n  self.on(player, 'loadstart', function () {\n    if (!player.tech_.featuresVolumeControl) {\n      self.addClass('vjs-hidden');\n    } else {\n      self.removeClass('vjs-hidden');\n    }\n  });\n};\n\n/**\n * @file volume-level.js\n */\n\n/**\n * Shows volume level\n *\n * @extends Component\n */\n\nvar VolumeLevel = function (_Component) {\n  inherits(VolumeLevel, _Component);\n\n  function VolumeLevel() {\n    classCallCheck(this, VolumeLevel);\n    return possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  VolumeLevel.prototype.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-volume-level',\n      innerHTML: '<span class=\"vjs-control-text\"></span>'\n    });\n  };\n\n  return VolumeLevel;\n}(Component);\n\nComponent.registerComponent('VolumeLevel', VolumeLevel);\n\n/**\n * @file volume-bar.js\n */\n\n/**\n * The bar that contains the volume level and can be clicked on to adjust the level\n *\n * @extends Slider\n */\n\nvar VolumeBar = function (_Slider) {\n  inherits(VolumeBar, _Slider);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function VolumeBar(player, options) {\n    classCallCheck(this, VolumeBar);\n\n    var _this = possibleConstructorReturn(this, _Slider.call(this, player, options));\n\n    _this.on('slideractive', _this.updateLastVolume_);\n    _this.on(player, 'volumechange', _this.updateARIAAttributes);\n    player.ready(function () {\n      return _this.updateARIAAttributes();\n    });\n    return _this;\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  VolumeBar.prototype.createEl = function createEl$$1() {\n    return _Slider.prototype.createEl.call(this, 'div', {\n      className: 'vjs-volume-bar vjs-slider-bar'\n    }, {\n      'aria-label': this.localize('Volume Level'),\n      'aria-live': 'polite'\n    });\n  };\n\n  /**\n   * Handle mouse down on volume bar\n   *\n   * @param {EventTarget~Event} event\n   *        The `mousedown` event that caused this to run.\n   *\n   * @listens mousedown\n   */\n\n\n  VolumeBar.prototype.handleMouseDown = function handleMouseDown(event) {\n    if (!isSingleLeftClick(event)) {\n      return;\n    }\n\n    _Slider.prototype.handleMouseDown.call(this, event);\n  };\n\n  /**\n   * Handle movement events on the {@link VolumeMenuButton}.\n   *\n   * @param {EventTarget~Event} event\n   *        The event that caused this function to run.\n   *\n   * @listens mousemove\n   */\n\n\n  VolumeBar.prototype.handleMouseMove = function handleMouseMove(event) {\n    if (!isSingleLeftClick(event)) {\n      return;\n    }\n\n    this.checkMuted();\n    this.player_.volume(this.calculateDistance(event));\n  };\n\n  /**\n   * If the player is muted unmute it.\n   */\n\n\n  VolumeBar.prototype.checkMuted = function checkMuted() {\n    if (this.player_.muted()) {\n      this.player_.muted(false);\n    }\n  };\n\n  /**\n   * Get percent of volume level\n   *\n   * @return {number}\n   *         Volume level percent as a decimal number.\n   */\n\n\n  VolumeBar.prototype.getPercent = function getPercent() {\n    if (this.player_.muted()) {\n      return 0;\n    }\n    return this.player_.volume();\n  };\n\n  /**\n   * Increase volume level for keyboard users\n   */\n\n\n  VolumeBar.prototype.stepForward = function stepForward() {\n    this.checkMuted();\n    this.player_.volume(this.player_.volume() + 0.1);\n  };\n\n  /**\n   * Decrease volume level for keyboard users\n   */\n\n\n  VolumeBar.prototype.stepBack = function stepBack() {\n    this.checkMuted();\n    this.player_.volume(this.player_.volume() - 0.1);\n  };\n\n  /**\n   * Update ARIA accessibility attributes\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `volumechange` event that caused this function to run.\n   *\n   * @listens Player#volumechange\n   */\n\n\n  VolumeBar.prototype.updateARIAAttributes = function updateARIAAttributes(event) {\n    var ariaValue = this.player_.muted() ? 0 : this.volumeAsPercentage_();\n\n    this.el_.setAttribute('aria-valuenow', ariaValue);\n    this.el_.setAttribute('aria-valuetext', ariaValue + '%');\n  };\n\n  /**\n   * Returns the current value of the player volume as a percentage\n   *\n   * @private\n   */\n\n\n  VolumeBar.prototype.volumeAsPercentage_ = function volumeAsPercentage_() {\n    return Math.round(this.player_.volume() * 100);\n  };\n\n  /**\n   * When user starts dragging the VolumeBar, store the volume and listen for\n   * the end of the drag. When the drag ends, if the volume was set to zero,\n   * set lastVolume to the stored volume.\n   *\n   * @listens slideractive\n   * @private\n   */\n\n\n  VolumeBar.prototype.updateLastVolume_ = function updateLastVolume_() {\n    var _this2 = this;\n\n    var volumeBeforeDrag = this.player_.volume();\n\n    this.one('sliderinactive', function () {\n      if (_this2.player_.volume() === 0) {\n        _this2.player_.lastVolume_(volumeBeforeDrag);\n      }\n    });\n  };\n\n  return VolumeBar;\n}(Slider);\n\n/**\n * Default options for the `VolumeBar`\n *\n * @type {Object}\n * @private\n */\n\n\nVolumeBar.prototype.options_ = {\n  children: ['volumeLevel'],\n  barName: 'volumeLevel'\n};\n\n/**\n * Call the update event for this Slider when this event happens on the player.\n *\n * @type {string}\n */\nVolumeBar.prototype.playerEvent = 'volumechange';\n\nComponent.registerComponent('VolumeBar', VolumeBar);\n\n/**\n * @file volume-control.js\n */\n\n/**\n * The component for controlling the volume level\n *\n * @extends Component\n */\n\nvar VolumeControl = function (_Component) {\n  inherits(VolumeControl, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   */\n  function VolumeControl(player) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    classCallCheck(this, VolumeControl);\n\n    options.vertical = options.vertical || false;\n\n    // Pass the vertical option down to the VolumeBar if\n    // the VolumeBar is turned on.\n    if (typeof options.volumeBar === 'undefined' || isPlain(options.volumeBar)) {\n      options.volumeBar = options.volumeBar || {};\n      options.volumeBar.vertical = options.vertical;\n    }\n\n    // hide this control if volume support is missing\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));\n\n    checkVolumeSupport(_this, player);\n\n    _this.throttledHandleMouseMove = throttle(bind(_this, _this.handleMouseMove), 25);\n\n    _this.on('mousedown', _this.handleMouseDown);\n    _this.on('touchstart', _this.handleMouseDown);\n\n    // while the slider is active (the mouse has been pressed down and\n    // is dragging) or in focus we do not want to hide the VolumeBar\n    _this.on(_this.volumeBar, ['focus', 'slideractive'], function () {\n      _this.volumeBar.addClass('vjs-slider-active');\n      _this.addClass('vjs-slider-active');\n      _this.trigger('slideractive');\n    });\n\n    _this.on(_this.volumeBar, ['blur', 'sliderinactive'], function () {\n      _this.volumeBar.removeClass('vjs-slider-active');\n      _this.removeClass('vjs-slider-active');\n      _this.trigger('sliderinactive');\n    });\n    return _this;\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  VolumeControl.prototype.createEl = function createEl() {\n    var orientationClass = 'vjs-volume-horizontal';\n\n    if (this.options_.vertical) {\n      orientationClass = 'vjs-volume-vertical';\n    }\n\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-volume-control vjs-control ' + orientationClass\n    });\n  };\n\n  /**\n   * Handle `mousedown` or `touchstart` events on the `VolumeControl`.\n   *\n   * @param {EventTarget~Event} event\n   *        `mousedown` or `touchstart` event that triggered this function\n   *\n   * @listens mousedown\n   * @listens touchstart\n   */\n\n\n  VolumeControl.prototype.handleMouseDown = function handleMouseDown(event) {\n    var doc = this.el_.ownerDocument;\n\n    this.on(doc, 'mousemove', this.throttledHandleMouseMove);\n    this.on(doc, 'touchmove', this.throttledHandleMouseMove);\n    this.on(doc, 'mouseup', this.handleMouseUp);\n    this.on(doc, 'touchend', this.handleMouseUp);\n  };\n\n  /**\n   * Handle `mouseup` or `touchend` events on the `VolumeControl`.\n   *\n   * @param {EventTarget~Event} event\n   *        `mouseup` or `touchend` event that triggered this function.\n   *\n   * @listens touchend\n   * @listens mouseup\n   */\n\n\n  VolumeControl.prototype.handleMouseUp = function handleMouseUp(event) {\n    var doc = this.el_.ownerDocument;\n\n    this.off(doc, 'mousemove', this.throttledHandleMouseMove);\n    this.off(doc, 'touchmove', this.throttledHandleMouseMove);\n    this.off(doc, 'mouseup', this.handleMouseUp);\n    this.off(doc, 'touchend', this.handleMouseUp);\n  };\n\n  /**\n   * Handle `mousedown` or `touchstart` events on the `VolumeControl`.\n   *\n   * @param {EventTarget~Event} event\n   *        `mousedown` or `touchstart` event that triggered this function\n   *\n   * @listens mousedown\n   * @listens touchstart\n   */\n\n\n  VolumeControl.prototype.handleMouseMove = function handleMouseMove(event) {\n    this.volumeBar.handleMouseMove(event);\n  };\n\n  return VolumeControl;\n}(Component);\n\n/**\n * Default options for the `VolumeControl`\n *\n * @type {Object}\n * @private\n */\n\n\nVolumeControl.prototype.options_ = {\n  children: ['volumeBar']\n};\n\nComponent.registerComponent('VolumeControl', VolumeControl);\n\n/**\n * Check if muting volume is supported and if it isn't hide the mute toggle\n * button.\n *\n * @param {Component} self\n *        A reference to the mute toggle button\n *\n * @param {Player} player\n *        A reference to the player\n *\n * @private\n */\nvar checkMuteSupport = function checkMuteSupport(self, player) {\n  // hide mute toggle button if it's not supported by the current tech\n  if (player.tech_ && !player.tech_.featuresMuteControl) {\n    self.addClass('vjs-hidden');\n  }\n\n  self.on(player, 'loadstart', function () {\n    if (!player.tech_.featuresMuteControl) {\n      self.addClass('vjs-hidden');\n    } else {\n      self.removeClass('vjs-hidden');\n    }\n  });\n};\n\n/**\n * @file mute-toggle.js\n */\n\n/**\n * A button component for muting the audio.\n *\n * @extends Button\n */\n\nvar MuteToggle = function (_Button) {\n  inherits(MuteToggle, _Button);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function MuteToggle(player, options) {\n    classCallCheck(this, MuteToggle);\n\n    // hide this control if volume support is missing\n    var _this = possibleConstructorReturn(this, _Button.call(this, player, options));\n\n    checkMuteSupport(_this, player);\n\n    _this.on(player, ['loadstart', 'volumechange'], _this.update);\n    return _this;\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  MuteToggle.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-mute-control ' + _Button.prototype.buildCSSClass.call(this);\n  };\n\n  /**\n   * This gets called when an `MuteToggle` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n\n\n  MuteToggle.prototype.handleClick = function handleClick(event) {\n    var vol = this.player_.volume();\n    var lastVolume = this.player_.lastVolume_();\n\n    if (vol === 0) {\n      var volumeToSet = lastVolume < 0.1 ? 0.1 : lastVolume;\n\n      this.player_.volume(volumeToSet);\n      this.player_.muted(false);\n    } else {\n      this.player_.muted(this.player_.muted() ? false : true);\n    }\n  };\n\n  /**\n   * Update the `MuteToggle` button based on the state of `volume` and `muted`\n   * on the player.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The {@link Player#loadstart} event if this function was called\n   *        through an event.\n   *\n   * @listens Player#loadstart\n   * @listens Player#volumechange\n   */\n\n\n  MuteToggle.prototype.update = function update(event) {\n    this.updateIcon_();\n    this.updateControlText_();\n  };\n\n  /**\n   * Update the appearance of the `MuteToggle` icon.\n   *\n   * Possible states (given `level` variable below):\n   * - 0: crossed out\n   * - 1: zero bars of volume\n   * - 2: one bar of volume\n   * - 3: two bars of volume\n   *\n   * @private\n   */\n\n\n  MuteToggle.prototype.updateIcon_ = function updateIcon_() {\n    var vol = this.player_.volume();\n    var level = 3;\n\n    // in iOS when a player is loaded with muted attribute\n    // and volume is changed with a native mute button\n    // we want to make sure muted state is updated\n    if (IS_IOS) {\n      this.player_.muted(this.player_.tech_.el_.muted);\n    }\n\n    if (vol === 0 || this.player_.muted()) {\n      level = 0;\n    } else if (vol < 0.33) {\n      level = 1;\n    } else if (vol < 0.67) {\n      level = 2;\n    }\n\n    // TODO improve muted icon classes\n    for (var i = 0; i < 4; i++) {\n      removeClass(this.el_, 'vjs-vol-' + i);\n    }\n    addClass(this.el_, 'vjs-vol-' + level);\n  };\n\n  /**\n   * If `muted` has changed on the player, update the control text\n   * (`title` attribute on `vjs-mute-control` element and content of\n   * `vjs-control-text` element).\n   *\n   * @private\n   */\n\n\n  MuteToggle.prototype.updateControlText_ = function updateControlText_() {\n    var soundOff = this.player_.muted() || this.player_.volume() === 0;\n    var text = soundOff ? 'Unmute' : 'Mute';\n\n    if (this.controlText() !== text) {\n      this.controlText(text);\n    }\n  };\n\n  return MuteToggle;\n}(Button);\n\n/**\n * The text that should display over the `MuteToggle`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\n\n\nMuteToggle.prototype.controlText_ = 'Mute';\n\nComponent.registerComponent('MuteToggle', MuteToggle);\n\n/**\n * @file volume-control.js\n */\n\n/**\n * A Component to contain the MuteToggle and VolumeControl so that\n * they can work together.\n *\n * @extends Component\n */\n\nvar VolumePanel = function (_Component) {\n  inherits(VolumePanel, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   */\n  function VolumePanel(player) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    classCallCheck(this, VolumePanel);\n\n    if (typeof options.inline !== 'undefined') {\n      options.inline = options.inline;\n    } else {\n      options.inline = true;\n    }\n\n    // pass the inline option down to the VolumeControl as vertical if\n    // the VolumeControl is on.\n    if (typeof options.volumeControl === 'undefined' || isPlain(options.volumeControl)) {\n      options.volumeControl = options.volumeControl || {};\n      options.volumeControl.vertical = !options.inline;\n    }\n\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));\n\n    _this.on(player, ['loadstart'], _this.volumePanelState_);\n\n    // while the slider is active (the mouse has been pressed down and\n    // is dragging) we do not want to hide the VolumeBar\n    _this.on(_this.volumeControl, ['slideractive'], _this.sliderActive_);\n\n    _this.on(_this.volumeControl, ['sliderinactive'], _this.sliderInactive_);\n    return _this;\n  }\n\n  /**\n   * Add vjs-slider-active class to the VolumePanel\n   *\n   * @listens VolumeControl#slideractive\n   * @private\n   */\n\n\n  VolumePanel.prototype.sliderActive_ = function sliderActive_() {\n    this.addClass('vjs-slider-active');\n  };\n\n  /**\n   * Removes vjs-slider-active class to the VolumePanel\n   *\n   * @listens VolumeControl#sliderinactive\n   * @private\n   */\n\n\n  VolumePanel.prototype.sliderInactive_ = function sliderInactive_() {\n    this.removeClass('vjs-slider-active');\n  };\n\n  /**\n   * Adds vjs-hidden or vjs-mute-toggle-only to the VolumePanel\n   * depending on MuteToggle and VolumeControl state\n   *\n   * @listens Player#loadstart\n   * @private\n   */\n\n\n  VolumePanel.prototype.volumePanelState_ = function volumePanelState_() {\n    // hide volume panel if neither volume control or mute toggle\n    // are displayed\n    if (this.volumeControl.hasClass('vjs-hidden') && this.muteToggle.hasClass('vjs-hidden')) {\n      this.addClass('vjs-hidden');\n    }\n\n    // if only mute toggle is visible we don't want\n    // volume panel expanding when hovered or active\n    if (this.volumeControl.hasClass('vjs-hidden') && !this.muteToggle.hasClass('vjs-hidden')) {\n      this.addClass('vjs-mute-toggle-only');\n    }\n  };\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  VolumePanel.prototype.createEl = function createEl() {\n    var orientationClass = 'vjs-volume-panel-horizontal';\n\n    if (!this.options_.inline) {\n      orientationClass = 'vjs-volume-panel-vertical';\n    }\n\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-volume-panel vjs-control ' + orientationClass\n    });\n  };\n\n  return VolumePanel;\n}(Component);\n\n/**\n * Default options for the `VolumeControl`\n *\n * @type {Object}\n * @private\n */\n\n\nVolumePanel.prototype.options_ = {\n  children: ['muteToggle', 'volumeControl']\n};\n\nComponent.registerComponent('VolumePanel', VolumePanel);\n\n/**\n * @file menu.js\n */\n\n/**\n * The Menu component is used to build popup menus, including subtitle and\n * captions selection menus.\n *\n * @extends Component\n */\n\nvar Menu = function (_Component) {\n  inherits(Menu, _Component);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Player} player\n   *        the player that this component should attach to\n   *\n   * @param {Object} [options]\n   *        Object of option names and values\n   *\n   */\n  function Menu(player, options) {\n    classCallCheck(this, Menu);\n\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));\n\n    if (options) {\n      _this.menuButton_ = options.menuButton;\n    }\n\n    _this.focusedChild_ = -1;\n\n    _this.on('keydown', _this.handleKeyPress);\n    return _this;\n  }\n\n  /**\n   * Add a {@link MenuItem} to the menu.\n   *\n   * @param {Object|string} component\n   *        The name or instance of the `MenuItem` to add.\n   *\n   */\n\n\n  Menu.prototype.addItem = function addItem(component) {\n    this.addChild(component);\n    component.on('click', bind(this, function (event) {\n      // Unpress the associated MenuButton, and move focus back to it\n      if (this.menuButton_) {\n        this.menuButton_.unpressButton();\n\n        // don't focus menu button if item is a caption settings item\n        // because focus will move elsewhere\n        if (component.name() !== 'CaptionSettingsMenuItem') {\n          this.menuButton_.focus();\n        }\n      }\n    }));\n  };\n\n  /**\n   * Create the `Menu`s DOM element.\n   *\n   * @return {Element}\n   *         the element that was created\n   */\n\n\n  Menu.prototype.createEl = function createEl$$1() {\n    var contentElType = this.options_.contentElType || 'ul';\n\n    this.contentEl_ = createEl(contentElType, {\n      className: 'vjs-menu-content'\n    });\n\n    this.contentEl_.setAttribute('role', 'menu');\n\n    var el = _Component.prototype.createEl.call(this, 'div', {\n      append: this.contentEl_,\n      className: 'vjs-menu'\n    });\n\n    el.appendChild(this.contentEl_);\n\n    // Prevent clicks from bubbling up. Needed for Menu Buttons,\n    // where a click on the parent is significant\n    on(el, 'click', function (event) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    });\n\n    return el;\n  };\n\n  Menu.prototype.dispose = function dispose() {\n    this.contentEl_ = null;\n\n    _Component.prototype.dispose.call(this);\n  };\n\n  /**\n   * Handle a `keydown` event on this menu. This listener is added in the constructor.\n   *\n   * @param {EventTarget~Event} event\n   *        A `keydown` event that happened on the menu.\n   *\n   * @listens keydown\n   */\n\n\n  Menu.prototype.handleKeyPress = function handleKeyPress(event) {\n    // Left and Down Arrows\n    if (event.which === 37 || event.which === 40) {\n      event.preventDefault();\n      this.stepForward();\n\n      // Up and Right Arrows\n    } else if (event.which === 38 || event.which === 39) {\n      event.preventDefault();\n      this.stepBack();\n    }\n  };\n\n  /**\n   * Move to next (lower) menu item for keyboard users.\n   */\n\n\n  Menu.prototype.stepForward = function stepForward() {\n    var stepChild = 0;\n\n    if (this.focusedChild_ !== undefined) {\n      stepChild = this.focusedChild_ + 1;\n    }\n    this.focus(stepChild);\n  };\n\n  /**\n   * Move to previous (higher) menu item for keyboard users.\n   */\n\n\n  Menu.prototype.stepBack = function stepBack() {\n    var stepChild = 0;\n\n    if (this.focusedChild_ !== undefined) {\n      stepChild = this.focusedChild_ - 1;\n    }\n    this.focus(stepChild);\n  };\n\n  /**\n   * Set focus on a {@link MenuItem} in the `Menu`.\n   *\n   * @param {Object|string} [item=0]\n   *        Index of child item set focus on.\n   */\n\n\n  Menu.prototype.focus = function focus() {\n    var item = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n    var children = this.children().slice();\n    var haveTitle = children.length && children[0].className && /vjs-menu-title/.test(children[0].className);\n\n    if (haveTitle) {\n      children.shift();\n    }\n\n    if (children.length > 0) {\n      if (item < 0) {\n        item = 0;\n      } else if (item >= children.length) {\n        item = children.length - 1;\n      }\n\n      this.focusedChild_ = item;\n\n      children[item].el_.focus();\n    }\n  };\n\n  return Menu;\n}(Component);\n\nComponent.registerComponent('Menu', Menu);\n\n/**\n * @file menu-button.js\n */\n\n/**\n * A `MenuButton` class for any popup {@link Menu}.\n *\n * @extends Component\n */\n\nvar MenuButton = function (_Component) {\n  inherits(MenuButton, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   */\n  function MenuButton(player) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    classCallCheck(this, MenuButton);\n\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));\n\n    _this.menuButton_ = new Button(player, options);\n\n    _this.menuButton_.controlText(_this.controlText_);\n    _this.menuButton_.el_.setAttribute('aria-haspopup', 'true');\n\n    // Add buildCSSClass values to the button, not the wrapper\n    var buttonClass = Button.prototype.buildCSSClass();\n\n    _this.menuButton_.el_.className = _this.buildCSSClass() + ' ' + buttonClass;\n    _this.menuButton_.removeClass('vjs-control');\n\n    _this.addChild(_this.menuButton_);\n\n    _this.update();\n\n    _this.enabled_ = true;\n\n    _this.on(_this.menuButton_, 'tap', _this.handleClick);\n    _this.on(_this.menuButton_, 'click', _this.handleClick);\n    _this.on(_this.menuButton_, 'focus', _this.handleFocus);\n    _this.on(_this.menuButton_, 'blur', _this.handleBlur);\n\n    _this.on('keydown', _this.handleSubmenuKeyPress);\n    return _this;\n  }\n\n  /**\n   * Update the menu based on the current state of its items.\n   */\n\n\n  MenuButton.prototype.update = function update() {\n    var menu = this.createMenu();\n\n    if (this.menu) {\n      this.menu.dispose();\n      this.removeChild(this.menu);\n    }\n\n    this.menu = menu;\n    this.addChild(menu);\n\n    /**\n     * Track the state of the menu button\n     *\n     * @type {Boolean}\n     * @private\n     */\n    this.buttonPressed_ = false;\n    this.menuButton_.el_.setAttribute('aria-expanded', 'false');\n\n    if (this.items && this.items.length <= this.hideThreshold_) {\n      this.hide();\n    } else {\n      this.show();\n    }\n  };\n\n  /**\n   * Create the menu and add all items to it.\n   *\n   * @return {Menu}\n   *         The constructed menu\n   */\n\n\n  MenuButton.prototype.createMenu = function createMenu() {\n    var menu = new Menu(this.player_, { menuButton: this });\n\n    /**\n     * Hide the menu if the number of items is less than or equal to this threshold. This defaults\n     * to 0 and whenever we add items which can be hidden to the menu we'll increment it. We list\n     * it here because every time we run `createMenu` we need to reset the value.\n     *\n     * @protected\n     * @type {Number}\n     */\n    this.hideThreshold_ = 0;\n\n    // Add a title list item to the top\n    if (this.options_.title) {\n      var title = createEl('li', {\n        className: 'vjs-menu-title',\n        innerHTML: toTitleCase(this.options_.title),\n        tabIndex: -1\n      });\n\n      this.hideThreshold_ += 1;\n\n      menu.children_.unshift(title);\n      prependTo(title, menu.contentEl());\n    }\n\n    this.items = this.createItems();\n\n    if (this.items) {\n      // Add menu items to the menu\n      for (var i = 0; i < this.items.length; i++) {\n        menu.addItem(this.items[i]);\n      }\n    }\n\n    return menu;\n  };\n\n  /**\n   * Create the list of menu items. Specific to each subclass.\n   *\n   * @abstract\n   */\n\n\n  MenuButton.prototype.createItems = function createItems() {};\n\n  /**\n   * Create the `MenuButtons`s DOM element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n\n\n  MenuButton.prototype.createEl = function createEl$$1() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: this.buildWrapperCSSClass()\n    }, {});\n  };\n\n  /**\n   * Allow sub components to stack CSS class names for the wrapper element\n   *\n   * @return {string}\n   *         The constructed wrapper DOM `className`\n   */\n\n\n  MenuButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {\n    var menuButtonClass = 'vjs-menu-button';\n\n    // If the inline option is passed, we want to use different styles altogether.\n    if (this.options_.inline === true) {\n      menuButtonClass += '-inline';\n    } else {\n      menuButtonClass += '-popup';\n    }\n\n    // TODO: Fix the CSS so that this isn't necessary\n    var buttonClass = Button.prototype.buildCSSClass();\n\n    return 'vjs-menu-button ' + menuButtonClass + ' ' + buttonClass + ' ' + _Component.prototype.buildCSSClass.call(this);\n  };\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  MenuButton.prototype.buildCSSClass = function buildCSSClass() {\n    var menuButtonClass = 'vjs-menu-button';\n\n    // If the inline option is passed, we want to use different styles altogether.\n    if (this.options_.inline === true) {\n      menuButtonClass += '-inline';\n    } else {\n      menuButtonClass += '-popup';\n    }\n\n    return 'vjs-menu-button ' + menuButtonClass + ' ' + _Component.prototype.buildCSSClass.call(this);\n  };\n\n  /**\n   * Get or set the localized control text that will be used for accessibility.\n   *\n   * > NOTE: This will come from the internal `menuButton_` element.\n   *\n   * @param {string} [text]\n   *        Control text for element.\n   *\n   * @param {Element} [el=this.menuButton_.el()]\n   *        Element to set the title on.\n   *\n   * @return {string}\n   *         - The control text when getting\n   */\n\n\n  MenuButton.prototype.controlText = function controlText(text) {\n    var el = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.menuButton_.el();\n\n    return this.menuButton_.controlText(text, el);\n  };\n\n  /**\n   * Handle a click on a `MenuButton`.\n   * See {@link ClickableComponent#handleClick} for instances where this is called.\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n\n\n  MenuButton.prototype.handleClick = function handleClick(event) {\n    // When you click the button it adds focus, which will show the menu.\n    // So we'll remove focus when the mouse leaves the button. Focus is needed\n    // for tab navigation.\n\n    this.one(this.menu.contentEl(), 'mouseleave', bind(this, function (e) {\n      this.unpressButton();\n      this.el_.blur();\n    }));\n    if (this.buttonPressed_) {\n      this.unpressButton();\n    } else {\n      this.pressButton();\n    }\n  };\n\n  /**\n   * Set the focus to the actual button, not to this element\n   */\n\n\n  MenuButton.prototype.focus = function focus() {\n    this.menuButton_.focus();\n  };\n\n  /**\n   * Remove the focus from the actual button, not this element\n   */\n\n\n  MenuButton.prototype.blur = function blur() {\n    this.menuButton_.blur();\n  };\n\n  /**\n   * This gets called when a `MenuButton` gains focus via a `focus` event.\n   * Turns on listening for `keydown` events. When they happen it\n   * calls `this.handleKeyPress`.\n   *\n   * @param {EventTarget~Event} event\n   *        The `focus` event that caused this function to be called.\n   *\n   * @listens focus\n   */\n\n\n  MenuButton.prototype.handleFocus = function handleFocus() {\n    on(document, 'keydown', bind(this, this.handleKeyPress));\n  };\n\n  /**\n   * Called when a `MenuButton` loses focus. Turns off the listener for\n   * `keydown` events. Which Stops `this.handleKeyPress` from getting called.\n   *\n   * @param {EventTarget~Event} event\n   *        The `blur` event that caused this function to be called.\n   *\n   * @listens blur\n   */\n\n\n  MenuButton.prototype.handleBlur = function handleBlur() {\n    off(document, 'keydown', bind(this, this.handleKeyPress));\n  };\n\n  /**\n   * Handle tab, escape, down arrow, and up arrow keys for `MenuButton`. See\n   * {@link ClickableComponent#handleKeyPress} for instances where this is called.\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown` event that caused this function to be called.\n   *\n   * @listens keydown\n   */\n\n\n  MenuButton.prototype.handleKeyPress = function handleKeyPress(event) {\n\n    // Escape (27) key or Tab (9) key unpress the 'button'\n    if (event.which === 27 || event.which === 9) {\n      if (this.buttonPressed_) {\n        this.unpressButton();\n      }\n      // Don't preventDefault for Tab key - we still want to lose focus\n      if (event.which !== 9) {\n        event.preventDefault();\n        // Set focus back to the menu button's button\n        this.menuButton_.el_.focus();\n      }\n      // Up (38) key or Down (40) key press the 'button'\n    } else if (event.which === 38 || event.which === 40) {\n      if (!this.buttonPressed_) {\n        this.pressButton();\n        event.preventDefault();\n      }\n    }\n  };\n\n  /**\n   * Handle a `keydown` event on a sub-menu. The listener for this is added in\n   * the constructor.\n   *\n   * @param {EventTarget~Event} event\n   *        Key press event\n   *\n   * @listens keydown\n   */\n\n\n  MenuButton.prototype.handleSubmenuKeyPress = function handleSubmenuKeyPress(event) {\n\n    // Escape (27) key or Tab (9) key unpress the 'button'\n    if (event.which === 27 || event.which === 9) {\n      if (this.buttonPressed_) {\n        this.unpressButton();\n      }\n      // Don't preventDefault for Tab key - we still want to lose focus\n      if (event.which !== 9) {\n        event.preventDefault();\n        // Set focus back to the menu button's button\n        this.menuButton_.el_.focus();\n      }\n    }\n  };\n\n  /**\n   * Put the current `MenuButton` into a pressed state.\n   */\n\n\n  MenuButton.prototype.pressButton = function pressButton() {\n    if (this.enabled_) {\n      this.buttonPressed_ = true;\n      this.menu.lockShowing();\n      this.menuButton_.el_.setAttribute('aria-expanded', 'true');\n\n      // set the focus into the submenu, except on iOS where it is resulting in\n      // undesired scrolling behavior when the player is in an iframe\n      if (IS_IOS && isInFrame()) {\n        // Return early so that the menu isn't focused\n        return;\n      }\n\n      this.menu.focus();\n    }\n  };\n\n  /**\n   * Take the current `MenuButton` out of a pressed state.\n   */\n\n\n  MenuButton.prototype.unpressButton = function unpressButton() {\n    if (this.enabled_) {\n      this.buttonPressed_ = false;\n      this.menu.unlockShowing();\n      this.menuButton_.el_.setAttribute('aria-expanded', 'false');\n    }\n  };\n\n  /**\n   * Disable the `MenuButton`. Don't allow it to be clicked.\n   */\n\n\n  MenuButton.prototype.disable = function disable() {\n    this.unpressButton();\n\n    this.enabled_ = false;\n    this.addClass('vjs-disabled');\n\n    this.menuButton_.disable();\n  };\n\n  /**\n   * Enable the `MenuButton`. Allow it to be clicked.\n   */\n\n\n  MenuButton.prototype.enable = function enable() {\n    this.enabled_ = true;\n    this.removeClass('vjs-disabled');\n\n    this.menuButton_.enable();\n  };\n\n  return MenuButton;\n}(Component);\n\nComponent.registerComponent('MenuButton', MenuButton);\n\n/**\n * @file track-button.js\n */\n\n/**\n * The base class for buttons that toggle specific  track types (e.g. subtitles).\n *\n * @extends MenuButton\n */\n\nvar TrackButton = function (_MenuButton) {\n  inherits(TrackButton, _MenuButton);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function TrackButton(player, options) {\n    classCallCheck(this, TrackButton);\n\n    var tracks = options.tracks;\n\n    var _this = possibleConstructorReturn(this, _MenuButton.call(this, player, options));\n\n    if (_this.items.length <= 1) {\n      _this.hide();\n    }\n\n    if (!tracks) {\n      return possibleConstructorReturn(_this);\n    }\n\n    var updateHandler = bind(_this, _this.update);\n\n    tracks.addEventListener('removetrack', updateHandler);\n    tracks.addEventListener('addtrack', updateHandler);\n    _this.player_.on('ready', updateHandler);\n\n    _this.player_.on('dispose', function () {\n      tracks.removeEventListener('removetrack', updateHandler);\n      tracks.removeEventListener('addtrack', updateHandler);\n    });\n    return _this;\n  }\n\n  return TrackButton;\n}(MenuButton);\n\nComponent.registerComponent('TrackButton', TrackButton);\n\n/**\n * @file menu-item.js\n */\n\n/**\n * The component for a menu item. `<li>`\n *\n * @extends ClickableComponent\n */\n\nvar MenuItem = function (_ClickableComponent) {\n  inherits(MenuItem, _ClickableComponent);\n\n  /**\n   * Creates an instance of the this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   *\n   */\n  function MenuItem(player, options) {\n    classCallCheck(this, MenuItem);\n\n    var _this = possibleConstructorReturn(this, _ClickableComponent.call(this, player, options));\n\n    _this.selectable = options.selectable;\n    _this.isSelected_ = options.selected || false;\n    _this.multiSelectable = options.multiSelectable;\n\n    _this.selected(_this.isSelected_);\n\n    if (_this.selectable) {\n      if (_this.multiSelectable) {\n        _this.el_.setAttribute('role', 'menuitemcheckbox');\n      } else {\n        _this.el_.setAttribute('role', 'menuitemradio');\n      }\n    } else {\n      _this.el_.setAttribute('role', 'menuitem');\n    }\n    return _this;\n  }\n\n  /**\n   * Create the `MenuItem's DOM element\n   *\n   * @param {string} [type=li]\n   *        Element's node type, not actually used, always set to `li`.\n   *\n   * @param {Object} [props={}]\n   *        An object of properties that should be set on the element\n   *\n   * @param {Object} [attrs={}]\n   *        An object of attributes that should be set on the element\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n\n\n  MenuItem.prototype.createEl = function createEl(type, props, attrs) {\n    // The control is textual, not just an icon\n    this.nonIconControl = true;\n\n    return _ClickableComponent.prototype.createEl.call(this, 'li', assign({\n      className: 'vjs-menu-item',\n      innerHTML: '<span class=\"vjs-menu-item-text\">' + this.localize(this.options_.label) + '</span>',\n      tabIndex: -1\n    }, props), attrs);\n  };\n\n  /**\n   * Any click on a `MenuItem` puts it into the selected state.\n   * See {@link ClickableComponent#handleClick} for instances where this is called.\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n\n\n  MenuItem.prototype.handleClick = function handleClick(event) {\n    this.selected(true);\n  };\n\n  /**\n   * Set the state for this menu item as selected or not.\n   *\n   * @param {boolean} selected\n   *        if the menu item is selected or not\n   */\n\n\n  MenuItem.prototype.selected = function selected(_selected) {\n    if (this.selectable) {\n      if (_selected) {\n        this.addClass('vjs-selected');\n        this.el_.setAttribute('aria-checked', 'true');\n        // aria-checked isn't fully supported by browsers/screen readers,\n        // so indicate selected state to screen reader in the control text.\n        this.controlText(', selected');\n        this.isSelected_ = true;\n      } else {\n        this.removeClass('vjs-selected');\n        this.el_.setAttribute('aria-checked', 'false');\n        // Indicate un-selected state to screen reader\n        this.controlText('');\n        this.isSelected_ = false;\n      }\n    }\n  };\n\n  return MenuItem;\n}(ClickableComponent);\n\nComponent.registerComponent('MenuItem', MenuItem);\n\n/**\n * @file text-track-menu-item.js\n */\n\n/**\n * The specific menu item type for selecting a language within a text track kind\n *\n * @extends MenuItem\n */\n\nvar TextTrackMenuItem = function (_MenuItem) {\n  inherits(TextTrackMenuItem, _MenuItem);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function TextTrackMenuItem(player, options) {\n    classCallCheck(this, TextTrackMenuItem);\n\n    var track = options.track;\n    var tracks = player.textTracks();\n\n    // Modify options for parent MenuItem class's init.\n    options.label = track.label || track.language || 'Unknown';\n    options.selected = track.mode === 'showing';\n\n    var _this = possibleConstructorReturn(this, _MenuItem.call(this, player, options));\n\n    _this.track = track;\n    var changeHandler = function changeHandler() {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this.handleTracksChange.apply(_this, args);\n    };\n    var selectedLanguageChangeHandler = function selectedLanguageChangeHandler() {\n      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      _this.handleSelectedLanguageChange.apply(_this, args);\n    };\n\n    player.on(['loadstart', 'texttrackchange'], changeHandler);\n    tracks.addEventListener('change', changeHandler);\n    tracks.addEventListener('selectedlanguagechange', selectedLanguageChangeHandler);\n    _this.on('dispose', function () {\n      player.off(['loadstart', 'texttrackchange'], changeHandler);\n      tracks.removeEventListener('change', changeHandler);\n      tracks.removeEventListener('selectedlanguagechange', selectedLanguageChangeHandler);\n    });\n\n    // iOS7 doesn't dispatch change events to TextTrackLists when an\n    // associated track's mode changes. Without something like\n    // Object.observe() (also not present on iOS7), it's not\n    // possible to detect changes to the mode attribute and polyfill\n    // the change event. As a poor substitute, we manually dispatch\n    // change events whenever the controls modify the mode.\n    if (tracks.onchange === undefined) {\n      var event = void 0;\n\n      _this.on(['tap', 'click'], function () {\n        if (_typeof(window$1.Event) !== 'object') {\n          // Android 2.3 throws an Illegal Constructor error for window.Event\n          try {\n            event = new window$1.Event('change');\n          } catch (err) {\n            // continue regardless of error\n          }\n        }\n\n        if (!event) {\n          event = document.createEvent('Event');\n          event.initEvent('change', true, true);\n        }\n\n        tracks.dispatchEvent(event);\n      });\n    }\n\n    // set the default state based on current tracks\n    _this.handleTracksChange();\n    return _this;\n  }\n\n  /**\n   * This gets called when an `TextTrackMenuItem` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n\n\n  TextTrackMenuItem.prototype.handleClick = function handleClick(event) {\n    var kind = this.track.kind;\n    var kinds = this.track.kinds;\n    var tracks = this.player_.textTracks();\n\n    if (!kinds) {\n      kinds = [kind];\n    }\n\n    _MenuItem.prototype.handleClick.call(this, event);\n\n    if (!tracks) {\n      return;\n    }\n\n    for (var i = 0; i < tracks.length; i++) {\n      var track = tracks[i];\n\n      if (track === this.track && kinds.indexOf(track.kind) > -1) {\n        if (track.mode !== 'showing') {\n          track.mode = 'showing';\n        }\n      } else if (track.mode !== 'disabled') {\n        track.mode = 'disabled';\n      }\n    }\n  };\n\n  /**\n   * Handle text track list change\n   *\n   * @param {EventTarget~Event} event\n   *        The `change` event that caused this function to be called.\n   *\n   * @listens TextTrackList#change\n   */\n\n\n  TextTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {\n    var shouldBeSelected = this.track.mode === 'showing';\n\n    // Prevent redundant selected() calls because they may cause\n    // screen readers to read the appended control text unnecessarily\n    if (shouldBeSelected !== this.isSelected_) {\n      this.selected(shouldBeSelected);\n    }\n  };\n\n  TextTrackMenuItem.prototype.handleSelectedLanguageChange = function handleSelectedLanguageChange(event) {\n    if (this.track.mode === 'showing') {\n      var selectedLanguage = this.player_.cache_.selectedLanguage;\n\n      // Don't replace the kind of track across the same language\n      if (selectedLanguage && selectedLanguage.enabled && selectedLanguage.language === this.track.language && selectedLanguage.kind !== this.track.kind) {\n        return;\n      }\n\n      this.player_.cache_.selectedLanguage = {\n        enabled: true,\n        language: this.track.language,\n        kind: this.track.kind\n      };\n    }\n  };\n\n  TextTrackMenuItem.prototype.dispose = function dispose() {\n    // remove reference to track object on dispose\n    this.track = null;\n\n    _MenuItem.prototype.dispose.call(this);\n  };\n\n  return TextTrackMenuItem;\n}(MenuItem);\n\nComponent.registerComponent('TextTrackMenuItem', TextTrackMenuItem);\n\n/**\n * @file off-text-track-menu-item.js\n */\n\n/**\n * A special menu item for turning of a specific type of text track\n *\n * @extends TextTrackMenuItem\n */\n\nvar OffTextTrackMenuItem = function (_TextTrackMenuItem) {\n  inherits(OffTextTrackMenuItem, _TextTrackMenuItem);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function OffTextTrackMenuItem(player, options) {\n    classCallCheck(this, OffTextTrackMenuItem);\n\n    // Create pseudo track info\n    // Requires options['kind']\n    options.track = {\n      player: player,\n      kind: options.kind,\n      kinds: options.kinds,\n      default: false,\n      mode: 'disabled'\n    };\n\n    if (!options.kinds) {\n      options.kinds = [options.kind];\n    }\n\n    if (options.label) {\n      options.track.label = options.label;\n    } else {\n      options.track.label = options.kinds.join(' and ') + ' off';\n    }\n\n    // MenuItem is selectable\n    options.selectable = true;\n    // MenuItem is NOT multiSelectable (i.e. only one can be marked \"selected\" at a time)\n    options.multiSelectable = false;\n\n    return possibleConstructorReturn(this, _TextTrackMenuItem.call(this, player, options));\n  }\n\n  /**\n   * Handle text track change\n   *\n   * @param {EventTarget~Event} event\n   *        The event that caused this function to run\n   */\n\n\n  OffTextTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {\n    var tracks = this.player().textTracks();\n    var shouldBeSelected = true;\n\n    for (var i = 0, l = tracks.length; i < l; i++) {\n      var track = tracks[i];\n\n      if (this.options_.kinds.indexOf(track.kind) > -1 && track.mode === 'showing') {\n        shouldBeSelected = false;\n        break;\n      }\n    }\n\n    // Prevent redundant selected() calls because they may cause\n    // screen readers to read the appended control text unnecessarily\n    if (shouldBeSelected !== this.isSelected_) {\n      this.selected(shouldBeSelected);\n    }\n  };\n\n  OffTextTrackMenuItem.prototype.handleSelectedLanguageChange = function handleSelectedLanguageChange(event) {\n    var tracks = this.player().textTracks();\n    var allHidden = true;\n\n    for (var i = 0, l = tracks.length; i < l; i++) {\n      var track = tracks[i];\n\n      if (['captions', 'descriptions', 'subtitles'].indexOf(track.kind) > -1 && track.mode === 'showing') {\n        allHidden = false;\n        break;\n      }\n    }\n\n    if (allHidden) {\n      this.player_.cache_.selectedLanguage = {\n        enabled: false\n      };\n    }\n  };\n\n  return OffTextTrackMenuItem;\n}(TextTrackMenuItem);\n\nComponent.registerComponent('OffTextTrackMenuItem', OffTextTrackMenuItem);\n\n/**\n * @file text-track-button.js\n */\n\n/**\n * The base class for buttons that toggle specific text track types (e.g. subtitles)\n *\n * @extends MenuButton\n */\n\nvar TextTrackButton = function (_TrackButton) {\n  inherits(TextTrackButton, _TrackButton);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   */\n  function TextTrackButton(player) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    classCallCheck(this, TextTrackButton);\n\n    options.tracks = player.textTracks();\n\n    return possibleConstructorReturn(this, _TrackButton.call(this, player, options));\n  }\n\n  /**\n   * Create a menu item for each text track\n   *\n   * @param {TextTrackMenuItem[]} [items=[]]\n   *        Existing array of items to use during creation\n   *\n   * @return {TextTrackMenuItem[]}\n   *         Array of menu items that were created\n   */\n\n\n  TextTrackButton.prototype.createItems = function createItems() {\n    var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var TrackMenuItem = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TextTrackMenuItem;\n\n\n    // Label is an override for the [track] off label\n    // USed to localise captions/subtitles\n    var label = void 0;\n\n    if (this.label_) {\n      label = this.label_ + ' off';\n    }\n    // Add an OFF menu item to turn all tracks off\n    items.push(new OffTextTrackMenuItem(this.player_, {\n      kinds: this.kinds_,\n      kind: this.kind_,\n      label: label\n    }));\n\n    this.hideThreshold_ += 1;\n\n    var tracks = this.player_.textTracks();\n\n    if (!Array.isArray(this.kinds_)) {\n      this.kinds_ = [this.kind_];\n    }\n\n    for (var i = 0; i < tracks.length; i++) {\n      var track = tracks[i];\n\n      // only add tracks that are of an appropriate kind and have a label\n      if (this.kinds_.indexOf(track.kind) > -1) {\n\n        var item = new TrackMenuItem(this.player_, {\n          track: track,\n          // MenuItem is selectable\n          selectable: true,\n          // MenuItem is NOT multiSelectable (i.e. only one can be marked \"selected\" at a time)\n          multiSelectable: false\n        });\n\n        item.addClass('vjs-' + track.kind + '-menu-item');\n        items.push(item);\n      }\n    }\n\n    return items;\n  };\n\n  return TextTrackButton;\n}(TrackButton);\n\nComponent.registerComponent('TextTrackButton', TextTrackButton);\n\n/**\n * @file chapters-track-menu-item.js\n */\n\n/**\n * The chapter track menu item\n *\n * @extends MenuItem\n */\n\nvar ChaptersTrackMenuItem = function (_MenuItem) {\n  inherits(ChaptersTrackMenuItem, _MenuItem);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function ChaptersTrackMenuItem(player, options) {\n    classCallCheck(this, ChaptersTrackMenuItem);\n\n    var track = options.track;\n    var cue = options.cue;\n    var currentTime = player.currentTime();\n\n    // Modify options for parent MenuItem class's init.\n    options.selectable = true;\n    options.multiSelectable = false;\n    options.label = cue.text;\n    options.selected = cue.startTime <= currentTime && currentTime < cue.endTime;\n\n    var _this = possibleConstructorReturn(this, _MenuItem.call(this, player, options));\n\n    _this.track = track;\n    _this.cue = cue;\n    track.addEventListener('cuechange', bind(_this, _this.update));\n    return _this;\n  }\n\n  /**\n   * This gets called when an `ChaptersTrackMenuItem` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n\n\n  ChaptersTrackMenuItem.prototype.handleClick = function handleClick(event) {\n    _MenuItem.prototype.handleClick.call(this);\n    this.player_.currentTime(this.cue.startTime);\n    this.update(this.cue.startTime);\n  };\n\n  /**\n   * Update chapter menu item\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `cuechange` event that caused this function to run.\n   *\n   * @listens TextTrack#cuechange\n   */\n\n\n  ChaptersTrackMenuItem.prototype.update = function update(event) {\n    var cue = this.cue;\n    var currentTime = this.player_.currentTime();\n\n    // vjs.log(currentTime, cue.startTime);\n    this.selected(cue.startTime <= currentTime && currentTime < cue.endTime);\n  };\n\n  return ChaptersTrackMenuItem;\n}(MenuItem);\n\nComponent.registerComponent('ChaptersTrackMenuItem', ChaptersTrackMenuItem);\n\n/**\n * @file chapters-button.js\n */\n\n/**\n * The button component for toggling and selecting chapters\n * Chapters act much differently than other text tracks\n * Cues are navigation vs. other tracks of alternative languages\n *\n * @extends TextTrackButton\n */\n\nvar ChaptersButton = function (_TextTrackButton) {\n  inherits(ChaptersButton, _TextTrackButton);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        The function to call when this function is ready.\n   */\n  function ChaptersButton(player, options, ready) {\n    classCallCheck(this, ChaptersButton);\n    return possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  ChaptersButton.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-chapters-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);\n  };\n\n  ChaptersButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {\n    return 'vjs-chapters-button ' + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);\n  };\n\n  /**\n   * Update the menu based on the current state of its items.\n   *\n   * @param {EventTarget~Event} [event]\n   *        An event that triggered this function to run.\n   *\n   * @listens TextTrackList#addtrack\n   * @listens TextTrackList#removetrack\n   * @listens TextTrackList#change\n   */\n\n\n  ChaptersButton.prototype.update = function update(event) {\n    if (!this.track_ || event && (event.type === 'addtrack' || event.type === 'removetrack')) {\n      this.setTrack(this.findChaptersTrack());\n    }\n    _TextTrackButton.prototype.update.call(this);\n  };\n\n  /**\n   * Set the currently selected track for the chapters button.\n   *\n   * @param {TextTrack} track\n   *        The new track to select. Nothing will change if this is the currently selected\n   *        track.\n   */\n\n\n  ChaptersButton.prototype.setTrack = function setTrack(track) {\n    if (this.track_ === track) {\n      return;\n    }\n\n    if (!this.updateHandler_) {\n      this.updateHandler_ = this.update.bind(this);\n    }\n\n    // here this.track_ refers to the old track instance\n    if (this.track_) {\n      var remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);\n\n      if (remoteTextTrackEl) {\n        remoteTextTrackEl.removeEventListener('load', this.updateHandler_);\n      }\n\n      this.track_ = null;\n    }\n\n    this.track_ = track;\n\n    // here this.track_ refers to the new track instance\n    if (this.track_) {\n      this.track_.mode = 'hidden';\n\n      var _remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);\n\n      if (_remoteTextTrackEl) {\n        _remoteTextTrackEl.addEventListener('load', this.updateHandler_);\n      }\n    }\n  };\n\n  /**\n   * Find the track object that is currently in use by this ChaptersButton\n   *\n   * @return {TextTrack|undefined}\n   *         The current track or undefined if none was found.\n   */\n\n\n  ChaptersButton.prototype.findChaptersTrack = function findChaptersTrack() {\n    var tracks = this.player_.textTracks() || [];\n\n    for (var i = tracks.length - 1; i >= 0; i--) {\n      // We will always choose the last track as our chaptersTrack\n      var track = tracks[i];\n\n      if (track.kind === this.kind_) {\n        return track;\n      }\n    }\n  };\n\n  /**\n   * Get the caption for the ChaptersButton based on the track label. This will also\n   * use the current tracks localized kind as a fallback if a label does not exist.\n   *\n   * @return {string}\n   *         The tracks current label or the localized track kind.\n   */\n\n\n  ChaptersButton.prototype.getMenuCaption = function getMenuCaption() {\n    if (this.track_ && this.track_.label) {\n      return this.track_.label;\n    }\n    return this.localize(toTitleCase(this.kind_));\n  };\n\n  /**\n   * Create menu from chapter track\n   *\n   * @return {Menu}\n   *         New menu for the chapter buttons\n   */\n\n\n  ChaptersButton.prototype.createMenu = function createMenu() {\n    this.options_.title = this.getMenuCaption();\n    return _TextTrackButton.prototype.createMenu.call(this);\n  };\n\n  /**\n   * Create a menu item for each text track\n   *\n   * @return {TextTrackMenuItem[]}\n   *         Array of menu items\n   */\n\n\n  ChaptersButton.prototype.createItems = function createItems() {\n    var items = [];\n\n    if (!this.track_) {\n      return items;\n    }\n\n    var cues = this.track_.cues;\n\n    if (!cues) {\n      return items;\n    }\n\n    for (var i = 0, l = cues.length; i < l; i++) {\n      var cue = cues[i];\n      var mi = new ChaptersTrackMenuItem(this.player_, { track: this.track_, cue: cue });\n\n      items.push(mi);\n    }\n\n    return items;\n  };\n\n  return ChaptersButton;\n}(TextTrackButton);\n\n/**\n * `kind` of TextTrack to look for to associate it with this menu.\n *\n * @type {string}\n * @private\n */\n\n\nChaptersButton.prototype.kind_ = 'chapters';\n\n/**\n * The text that should display over the `ChaptersButton`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\nChaptersButton.prototype.controlText_ = 'Chapters';\n\nComponent.registerComponent('ChaptersButton', ChaptersButton);\n\n/**\n * @file descriptions-button.js\n */\n\n/**\n * The button component for toggling and selecting descriptions\n *\n * @extends TextTrackButton\n */\n\nvar DescriptionsButton = function (_TextTrackButton) {\n  inherits(DescriptionsButton, _TextTrackButton);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        The function to call when this component is ready.\n   */\n  function DescriptionsButton(player, options, ready) {\n    classCallCheck(this, DescriptionsButton);\n\n    var _this = possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));\n\n    var tracks = player.textTracks();\n    var changeHandler = bind(_this, _this.handleTracksChange);\n\n    tracks.addEventListener('change', changeHandler);\n    _this.on('dispose', function () {\n      tracks.removeEventListener('change', changeHandler);\n    });\n    return _this;\n  }\n\n  /**\n   * Handle text track change\n   *\n   * @param {EventTarget~Event} event\n   *        The event that caused this function to run\n   *\n   * @listens TextTrackList#change\n   */\n\n\n  DescriptionsButton.prototype.handleTracksChange = function handleTracksChange(event) {\n    var tracks = this.player().textTracks();\n    var disabled = false;\n\n    // Check whether a track of a different kind is showing\n    for (var i = 0, l = tracks.length; i < l; i++) {\n      var track = tracks[i];\n\n      if (track.kind !== this.kind_ && track.mode === 'showing') {\n        disabled = true;\n        break;\n      }\n    }\n\n    // If another track is showing, disable this menu button\n    if (disabled) {\n      this.disable();\n    } else {\n      this.enable();\n    }\n  };\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  DescriptionsButton.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-descriptions-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);\n  };\n\n  DescriptionsButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {\n    return 'vjs-descriptions-button ' + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);\n  };\n\n  return DescriptionsButton;\n}(TextTrackButton);\n\n/**\n * `kind` of TextTrack to look for to associate it with this menu.\n *\n * @type {string}\n * @private\n */\n\n\nDescriptionsButton.prototype.kind_ = 'descriptions';\n\n/**\n * The text that should display over the `DescriptionsButton`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\nDescriptionsButton.prototype.controlText_ = 'Descriptions';\n\nComponent.registerComponent('DescriptionsButton', DescriptionsButton);\n\n/**\n * @file subtitles-button.js\n */\n\n/**\n * The button component for toggling and selecting subtitles\n *\n * @extends TextTrackButton\n */\n\nvar SubtitlesButton = function (_TextTrackButton) {\n  inherits(SubtitlesButton, _TextTrackButton);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        The function to call when this component is ready.\n   */\n  function SubtitlesButton(player, options, ready) {\n    classCallCheck(this, SubtitlesButton);\n    return possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  SubtitlesButton.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-subtitles-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);\n  };\n\n  SubtitlesButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {\n    return 'vjs-subtitles-button ' + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);\n  };\n\n  return SubtitlesButton;\n}(TextTrackButton);\n\n/**\n * `kind` of TextTrack to look for to associate it with this menu.\n *\n * @type {string}\n * @private\n */\n\n\nSubtitlesButton.prototype.kind_ = 'subtitles';\n\n/**\n * The text that should display over the `SubtitlesButton`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\nSubtitlesButton.prototype.controlText_ = 'Subtitles';\n\nComponent.registerComponent('SubtitlesButton', SubtitlesButton);\n\n/**\n * @file caption-settings-menu-item.js\n */\n\n/**\n * The menu item for caption track settings menu\n *\n * @extends TextTrackMenuItem\n */\n\nvar CaptionSettingsMenuItem = function (_TextTrackMenuItem) {\n  inherits(CaptionSettingsMenuItem, _TextTrackMenuItem);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function CaptionSettingsMenuItem(player, options) {\n    classCallCheck(this, CaptionSettingsMenuItem);\n\n    options.track = {\n      player: player,\n      kind: options.kind,\n      label: options.kind + ' settings',\n      selectable: false,\n      default: false,\n      mode: 'disabled'\n    };\n\n    // CaptionSettingsMenuItem has no concept of 'selected'\n    options.selectable = false;\n\n    options.name = 'CaptionSettingsMenuItem';\n\n    var _this = possibleConstructorReturn(this, _TextTrackMenuItem.call(this, player, options));\n\n    _this.addClass('vjs-texttrack-settings');\n    _this.controlText(', opens ' + options.kind + ' settings dialog');\n    return _this;\n  }\n\n  /**\n   * This gets called when an `CaptionSettingsMenuItem` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n\n\n  CaptionSettingsMenuItem.prototype.handleClick = function handleClick(event) {\n    this.player().getChild('textTrackSettings').open();\n  };\n\n  return CaptionSettingsMenuItem;\n}(TextTrackMenuItem);\n\nComponent.registerComponent('CaptionSettingsMenuItem', CaptionSettingsMenuItem);\n\n/**\n * @file captions-button.js\n */\n\n/**\n * The button component for toggling and selecting captions\n *\n * @extends TextTrackButton\n */\n\nvar CaptionsButton = function (_TextTrackButton) {\n  inherits(CaptionsButton, _TextTrackButton);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        The function to call when this component is ready.\n   */\n  function CaptionsButton(player, options, ready) {\n    classCallCheck(this, CaptionsButton);\n    return possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  CaptionsButton.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-captions-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);\n  };\n\n  CaptionsButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {\n    return 'vjs-captions-button ' + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);\n  };\n\n  /**\n   * Create caption menu items\n   *\n   * @return {CaptionSettingsMenuItem[]}\n   *         The array of current menu items.\n   */\n\n\n  CaptionsButton.prototype.createItems = function createItems() {\n    var items = [];\n\n    if (!(this.player().tech_ && this.player().tech_.featuresNativeTextTracks) && this.player().getChild('textTrackSettings')) {\n      items.push(new CaptionSettingsMenuItem(this.player_, { kind: this.kind_ }));\n\n      this.hideThreshold_ += 1;\n    }\n\n    return _TextTrackButton.prototype.createItems.call(this, items);\n  };\n\n  return CaptionsButton;\n}(TextTrackButton);\n\n/**\n * `kind` of TextTrack to look for to associate it with this menu.\n *\n * @type {string}\n * @private\n */\n\n\nCaptionsButton.prototype.kind_ = 'captions';\n\n/**\n * The text that should display over the `CaptionsButton`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\nCaptionsButton.prototype.controlText_ = 'Captions';\n\nComponent.registerComponent('CaptionsButton', CaptionsButton);\n\n/**\n * @file subs-caps-menu-item.js\n */\n\n/**\n * SubsCapsMenuItem has an [cc] icon to distinguish captions from subtitles\n * in the SubsCapsMenu.\n *\n * @extends TextTrackMenuItem\n */\n\nvar SubsCapsMenuItem = function (_TextTrackMenuItem) {\n  inherits(SubsCapsMenuItem, _TextTrackMenuItem);\n\n  function SubsCapsMenuItem() {\n    classCallCheck(this, SubsCapsMenuItem);\n    return possibleConstructorReturn(this, _TextTrackMenuItem.apply(this, arguments));\n  }\n\n  SubsCapsMenuItem.prototype.createEl = function createEl(type, props, attrs) {\n    var innerHTML = '<span class=\"vjs-menu-item-text\">' + this.localize(this.options_.label);\n\n    if (this.options_.track.kind === 'captions') {\n      innerHTML += '\\n        <span aria-hidden=\"true\" class=\"vjs-icon-placeholder\"></span>\\n        <span class=\"vjs-control-text\"> ' + this.localize('Captions') + '</span>\\n      ';\n    }\n\n    innerHTML += '</span>';\n\n    var el = _TextTrackMenuItem.prototype.createEl.call(this, type, assign({\n      innerHTML: innerHTML\n    }, props), attrs);\n\n    return el;\n  };\n\n  return SubsCapsMenuItem;\n}(TextTrackMenuItem);\n\nComponent.registerComponent('SubsCapsMenuItem', SubsCapsMenuItem);\n\n/**\n * @file sub-caps-button.js\n */\n/**\n * The button component for toggling and selecting captions and/or subtitles\n *\n * @extends TextTrackButton\n */\n\nvar SubsCapsButton = function (_TextTrackButton) {\n  inherits(SubsCapsButton, _TextTrackButton);\n\n  function SubsCapsButton(player) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    classCallCheck(this, SubsCapsButton);\n\n    // Although North America uses \"captions\" in most cases for\n    // \"captions and subtitles\" other locales use \"subtitles\"\n    var _this = possibleConstructorReturn(this, _TextTrackButton.call(this, player, options));\n\n    _this.label_ = 'subtitles';\n    if (['en', 'en-us', 'en-ca', 'fr-ca'].indexOf(_this.player_.language_) > -1) {\n      _this.label_ = 'captions';\n    }\n    _this.menuButton_.controlText(toTitleCase(_this.label_));\n    return _this;\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  SubsCapsButton.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-subs-caps-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);\n  };\n\n  SubsCapsButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {\n    return 'vjs-subs-caps-button ' + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);\n  };\n\n  /**\n   * Create caption/subtitles menu items\n   *\n   * @return {CaptionSettingsMenuItem[]}\n   *         The array of current menu items.\n   */\n\n\n  SubsCapsButton.prototype.createItems = function createItems() {\n    var items = [];\n\n    if (!(this.player().tech_ && this.player().tech_.featuresNativeTextTracks) && this.player().getChild('textTrackSettings')) {\n      items.push(new CaptionSettingsMenuItem(this.player_, { kind: this.label_ }));\n\n      this.hideThreshold_ += 1;\n    }\n\n    items = _TextTrackButton.prototype.createItems.call(this, items, SubsCapsMenuItem);\n    return items;\n  };\n\n  return SubsCapsButton;\n}(TextTrackButton);\n\n/**\n * `kind`s of TextTrack to look for to associate it with this menu.\n *\n * @type {array}\n * @private\n */\n\n\nSubsCapsButton.prototype.kinds_ = ['captions', 'subtitles'];\n\n/**\n * The text that should display over the `SubsCapsButton`s controls.\n *\n *\n * @type {string}\n * @private\n */\nSubsCapsButton.prototype.controlText_ = 'Subtitles';\n\nComponent.registerComponent('SubsCapsButton', SubsCapsButton);\n\n/**\n * @file audio-track-menu-item.js\n */\n\n/**\n * An {@link AudioTrack} {@link MenuItem}\n *\n * @extends MenuItem\n */\n\nvar AudioTrackMenuItem = function (_MenuItem) {\n  inherits(AudioTrackMenuItem, _MenuItem);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function AudioTrackMenuItem(player, options) {\n    classCallCheck(this, AudioTrackMenuItem);\n\n    var track = options.track;\n    var tracks = player.audioTracks();\n\n    // Modify options for parent MenuItem class's init.\n    options.label = track.label || track.language || 'Unknown';\n    options.selected = track.enabled;\n\n    var _this = possibleConstructorReturn(this, _MenuItem.call(this, player, options));\n\n    _this.track = track;\n\n    _this.addClass('vjs-' + track.kind + '-menu-item');\n\n    var changeHandler = function changeHandler() {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this.handleTracksChange.apply(_this, args);\n    };\n\n    tracks.addEventListener('change', changeHandler);\n    _this.on('dispose', function () {\n      tracks.removeEventListener('change', changeHandler);\n    });\n    return _this;\n  }\n\n  AudioTrackMenuItem.prototype.createEl = function createEl(type, props, attrs) {\n    var innerHTML = '<span class=\"vjs-menu-item-text\">' + this.localize(this.options_.label);\n\n    if (this.options_.track.kind === 'main-desc') {\n      innerHTML += '\\n        <span aria-hidden=\"true\" class=\"vjs-icon-placeholder\"></span>\\n        <span class=\"vjs-control-text\"> ' + this.localize('Descriptions') + '</span>\\n      ';\n    }\n\n    innerHTML += '</span>';\n\n    var el = _MenuItem.prototype.createEl.call(this, type, assign({\n      innerHTML: innerHTML\n    }, props), attrs);\n\n    return el;\n  };\n\n  /**\n   * This gets called when an `AudioTrackMenuItem is \"clicked\". See {@link ClickableComponent}\n   * for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n\n\n  AudioTrackMenuItem.prototype.handleClick = function handleClick(event) {\n    var tracks = this.player_.audioTracks();\n\n    _MenuItem.prototype.handleClick.call(this, event);\n\n    for (var i = 0; i < tracks.length; i++) {\n      var track = tracks[i];\n\n      track.enabled = track === this.track;\n    }\n  };\n\n  /**\n   * Handle any {@link AudioTrack} change.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The {@link AudioTrackList#change} event that caused this to run.\n   *\n   * @listens AudioTrackList#change\n   */\n\n\n  AudioTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {\n    this.selected(this.track.enabled);\n  };\n\n  return AudioTrackMenuItem;\n}(MenuItem);\n\nComponent.registerComponent('AudioTrackMenuItem', AudioTrackMenuItem);\n\n/**\n * @file audio-track-button.js\n */\n\n/**\n * The base class for buttons that toggle specific {@link AudioTrack} types.\n *\n * @extends TrackButton\n */\n\nvar AudioTrackButton = function (_TrackButton) {\n  inherits(AudioTrackButton, _TrackButton);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   */\n  function AudioTrackButton(player) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    classCallCheck(this, AudioTrackButton);\n\n    options.tracks = player.audioTracks();\n\n    return possibleConstructorReturn(this, _TrackButton.call(this, player, options));\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  AudioTrackButton.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-audio-button ' + _TrackButton.prototype.buildCSSClass.call(this);\n  };\n\n  AudioTrackButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {\n    return 'vjs-audio-button ' + _TrackButton.prototype.buildWrapperCSSClass.call(this);\n  };\n\n  /**\n   * Create a menu item for each audio track\n   *\n   * @param {AudioTrackMenuItem[]} [items=[]]\n   *        An array of existing menu items to use.\n   *\n   * @return {AudioTrackMenuItem[]}\n   *         An array of menu items\n   */\n\n\n  AudioTrackButton.prototype.createItems = function createItems() {\n    var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n    // if there's only one audio track, there no point in showing it\n    this.hideThreshold_ = 1;\n\n    var tracks = this.player_.audioTracks();\n\n    for (var i = 0; i < tracks.length; i++) {\n      var track = tracks[i];\n\n      items.push(new AudioTrackMenuItem(this.player_, {\n        track: track,\n        // MenuItem is selectable\n        selectable: true,\n        // MenuItem is NOT multiSelectable (i.e. only one can be marked \"selected\" at a time)\n        multiSelectable: false\n      }));\n    }\n\n    return items;\n  };\n\n  return AudioTrackButton;\n}(TrackButton);\n\n/**\n * The text that should display over the `AudioTrackButton`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\n\n\nAudioTrackButton.prototype.controlText_ = 'Audio Track';\nComponent.registerComponent('AudioTrackButton', AudioTrackButton);\n\n/**\n * @file playback-rate-menu-item.js\n */\n\n/**\n * The specific menu item type for selecting a playback rate.\n *\n * @extends MenuItem\n */\n\nvar PlaybackRateMenuItem = function (_MenuItem) {\n  inherits(PlaybackRateMenuItem, _MenuItem);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function PlaybackRateMenuItem(player, options) {\n    classCallCheck(this, PlaybackRateMenuItem);\n\n    var label = options.rate;\n    var rate = parseFloat(label, 10);\n\n    // Modify options for parent MenuItem class's init.\n    options.label = label;\n    options.selected = rate === 1;\n    options.selectable = true;\n    options.multiSelectable = false;\n\n    var _this = possibleConstructorReturn(this, _MenuItem.call(this, player, options));\n\n    _this.label = label;\n    _this.rate = rate;\n\n    _this.on(player, 'ratechange', _this.update);\n    return _this;\n  }\n\n  /**\n   * This gets called when an `PlaybackRateMenuItem` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n\n\n  PlaybackRateMenuItem.prototype.handleClick = function handleClick(event) {\n    _MenuItem.prototype.handleClick.call(this);\n    this.player().playbackRate(this.rate);\n  };\n\n  /**\n   * Update the PlaybackRateMenuItem when the playbackrate changes.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `ratechange` event that caused this function to run.\n   *\n   * @listens Player#ratechange\n   */\n\n\n  PlaybackRateMenuItem.prototype.update = function update(event) {\n    this.selected(this.player().playbackRate() === this.rate);\n  };\n\n  return PlaybackRateMenuItem;\n}(MenuItem);\n\n/**\n * The text that should display over the `PlaybackRateMenuItem`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\n\n\nPlaybackRateMenuItem.prototype.contentElType = 'button';\n\nComponent.registerComponent('PlaybackRateMenuItem', PlaybackRateMenuItem);\n\n/**\n * @file playback-rate-menu-button.js\n */\n\n/**\n * The component for controlling the playback rate.\n *\n * @extends MenuButton\n */\n\nvar PlaybackRateMenuButton = function (_MenuButton) {\n  inherits(PlaybackRateMenuButton, _MenuButton);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function PlaybackRateMenuButton(player, options) {\n    classCallCheck(this, PlaybackRateMenuButton);\n\n    var _this = possibleConstructorReturn(this, _MenuButton.call(this, player, options));\n\n    _this.updateVisibility();\n    _this.updateLabel();\n\n    _this.on(player, 'loadstart', _this.updateVisibility);\n    _this.on(player, 'ratechange', _this.updateLabel);\n    return _this;\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  PlaybackRateMenuButton.prototype.createEl = function createEl$$1() {\n    var el = _MenuButton.prototype.createEl.call(this);\n\n    this.labelEl_ = createEl('div', {\n      className: 'vjs-playback-rate-value',\n      innerHTML: '1x'\n    });\n\n    el.appendChild(this.labelEl_);\n\n    return el;\n  };\n\n  PlaybackRateMenuButton.prototype.dispose = function dispose() {\n    this.labelEl_ = null;\n\n    _MenuButton.prototype.dispose.call(this);\n  };\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  PlaybackRateMenuButton.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-playback-rate ' + _MenuButton.prototype.buildCSSClass.call(this);\n  };\n\n  PlaybackRateMenuButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {\n    return 'vjs-playback-rate ' + _MenuButton.prototype.buildWrapperCSSClass.call(this);\n  };\n\n  /**\n   * Create the playback rate menu\n   *\n   * @return {Menu}\n   *         Menu object populated with {@link PlaybackRateMenuItem}s\n   */\n\n\n  PlaybackRateMenuButton.prototype.createMenu = function createMenu() {\n    var menu = new Menu(this.player());\n    var rates = this.playbackRates();\n\n    if (rates) {\n      for (var i = rates.length - 1; i >= 0; i--) {\n        menu.addChild(new PlaybackRateMenuItem(this.player(), { rate: rates[i] + 'x' }));\n      }\n    }\n\n    return menu;\n  };\n\n  /**\n   * Updates ARIA accessibility attributes\n   */\n\n\n  PlaybackRateMenuButton.prototype.updateARIAAttributes = function updateARIAAttributes() {\n    // Current playback rate\n    this.el().setAttribute('aria-valuenow', this.player().playbackRate());\n  };\n\n  /**\n   * This gets called when an `PlaybackRateMenuButton` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n\n\n  PlaybackRateMenuButton.prototype.handleClick = function handleClick(event) {\n    // select next rate option\n    var currentRate = this.player().playbackRate();\n    var rates = this.playbackRates();\n\n    // this will select first one if the last one currently selected\n    var newRate = rates[0];\n\n    for (var i = 0; i < rates.length; i++) {\n      if (rates[i] > currentRate) {\n        newRate = rates[i];\n        break;\n      }\n    }\n    this.player().playbackRate(newRate);\n  };\n\n  /**\n   * Get possible playback rates\n   *\n   * @return {Array}\n   *         All possible playback rates\n   */\n\n\n  PlaybackRateMenuButton.prototype.playbackRates = function playbackRates() {\n    return this.options_.playbackRates || this.options_.playerOptions && this.options_.playerOptions.playbackRates;\n  };\n\n  /**\n   * Get whether playback rates is supported by the tech\n   * and an array of playback rates exists\n   *\n   * @return {boolean}\n   *         Whether changing playback rate is supported\n   */\n\n\n  PlaybackRateMenuButton.prototype.playbackRateSupported = function playbackRateSupported() {\n    return this.player().tech_ && this.player().tech_.featuresPlaybackRate && this.playbackRates() && this.playbackRates().length > 0;\n  };\n\n  /**\n   * Hide playback rate controls when they're no playback rate options to select\n   *\n   * @param {EventTarget~Event} [event]\n   *        The event that caused this function to run.\n   *\n   * @listens Player#loadstart\n   */\n\n\n  PlaybackRateMenuButton.prototype.updateVisibility = function updateVisibility(event) {\n    if (this.playbackRateSupported()) {\n      this.removeClass('vjs-hidden');\n    } else {\n      this.addClass('vjs-hidden');\n    }\n  };\n\n  /**\n   * Update button label when rate changed\n   *\n   * @param {EventTarget~Event} [event]\n   *        The event that caused this function to run.\n   *\n   * @listens Player#ratechange\n   */\n\n\n  PlaybackRateMenuButton.prototype.updateLabel = function updateLabel(event) {\n    if (this.playbackRateSupported()) {\n      this.labelEl_.innerHTML = this.player().playbackRate() + 'x';\n    }\n  };\n\n  return PlaybackRateMenuButton;\n}(MenuButton);\n\n/**\n * The text that should display over the `FullscreenToggle`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\n\n\nPlaybackRateMenuButton.prototype.controlText_ = 'Playback Rate';\n\nComponent.registerComponent('PlaybackRateMenuButton', PlaybackRateMenuButton);\n\n/**\n * @file spacer.js\n */\n\n/**\n * Just an empty spacer element that can be used as an append point for plugins, etc.\n * Also can be used to create space between elements when necessary.\n *\n * @extends Component\n */\n\nvar Spacer = function (_Component) {\n  inherits(Spacer, _Component);\n\n  function Spacer() {\n    classCallCheck(this, Spacer);\n    return possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  Spacer.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-spacer ' + _Component.prototype.buildCSSClass.call(this);\n  };\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  Spacer.prototype.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: this.buildCSSClass()\n    });\n  };\n\n  return Spacer;\n}(Component);\n\nComponent.registerComponent('Spacer', Spacer);\n\n/**\n * @file custom-control-spacer.js\n */\n\n/**\n * Spacer specifically meant to be used as an insertion point for new plugins, etc.\n *\n * @extends Spacer\n */\n\nvar CustomControlSpacer = function (_Spacer) {\n  inherits(CustomControlSpacer, _Spacer);\n\n  function CustomControlSpacer() {\n    classCallCheck(this, CustomControlSpacer);\n    return possibleConstructorReturn(this, _Spacer.apply(this, arguments));\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  CustomControlSpacer.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-custom-control-spacer ' + _Spacer.prototype.buildCSSClass.call(this);\n  };\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  CustomControlSpacer.prototype.createEl = function createEl() {\n    var el = _Spacer.prototype.createEl.call(this, {\n      className: this.buildCSSClass()\n    });\n\n    // No-flex/table-cell mode requires there be some content\n    // in the cell to fill the remaining space of the table.\n    el.innerHTML = '\\xA0';\n    return el;\n  };\n\n  return CustomControlSpacer;\n}(Spacer);\n\nComponent.registerComponent('CustomControlSpacer', CustomControlSpacer);\n\n/**\n * @file control-bar.js\n */\n\n/**\n * Container of main controls.\n *\n * @extends Component\n */\n\nvar ControlBar = function (_Component) {\n  inherits(ControlBar, _Component);\n\n  function ControlBar() {\n    classCallCheck(this, ControlBar);\n    return possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  ControlBar.prototype.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-control-bar',\n      dir: 'ltr'\n    });\n  };\n\n  return ControlBar;\n}(Component);\n\n/**\n * Default options for `ControlBar`\n *\n * @type {Object}\n * @private\n */\n\n\nControlBar.prototype.options_ = {\n  children: ['playToggle', 'volumePanel', 'currentTimeDisplay', 'timeDivider', 'durationDisplay', 'progressControl', 'liveDisplay', 'remainingTimeDisplay', 'customControlSpacer', 'playbackRateMenuButton', 'chaptersButton', 'descriptionsButton', 'subsCapsButton', 'audioTrackButton', 'fullscreenToggle']\n};\n\nComponent.registerComponent('ControlBar', ControlBar);\n\n/**\n * @file error-display.js\n */\n\n/**\n * A display that indicates an error has occurred. This means that the video\n * is unplayable.\n *\n * @extends ModalDialog\n */\n\nvar ErrorDisplay = function (_ModalDialog) {\n  inherits(ErrorDisplay, _ModalDialog);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param  {Player} player\n   *         The `Player` that this class should be attached to.\n   *\n   * @param  {Object} [options]\n   *         The key/value store of player options.\n   */\n  function ErrorDisplay(player, options) {\n    classCallCheck(this, ErrorDisplay);\n\n    var _this = possibleConstructorReturn(this, _ModalDialog.call(this, player, options));\n\n    _this.on(player, 'error', _this.open);\n    return _this;\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   *\n   * @deprecated Since version 5.\n   */\n\n\n  ErrorDisplay.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-error-display ' + _ModalDialog.prototype.buildCSSClass.call(this);\n  };\n\n  /**\n   * Gets the localized error message based on the `Player`s error.\n   *\n   * @return {string}\n   *         The `Player`s error message localized or an empty string.\n   */\n\n\n  ErrorDisplay.prototype.content = function content() {\n    var error = this.player().error();\n\n    return error ? this.localize(error.message) : '';\n  };\n\n  return ErrorDisplay;\n}(ModalDialog);\n\n/**\n * The default options for an `ErrorDisplay`.\n *\n * @private\n */\n\n\nErrorDisplay.prototype.options_ = mergeOptions(ModalDialog.prototype.options_, {\n  pauseOnOpen: false,\n  fillAlways: true,\n  temporary: false,\n  uncloseable: true\n});\n\nComponent.registerComponent('ErrorDisplay', ErrorDisplay);\n\n/**\n * @file text-track-settings.js\n */\n\nvar LOCAL_STORAGE_KEY = 'vjs-text-track-settings';\n\nvar COLOR_BLACK = ['#000', 'Black'];\nvar COLOR_BLUE = ['#00F', 'Blue'];\nvar COLOR_CYAN = ['#0FF', 'Cyan'];\nvar COLOR_GREEN = ['#0F0', 'Green'];\nvar COLOR_MAGENTA = ['#F0F', 'Magenta'];\nvar COLOR_RED = ['#F00', 'Red'];\nvar COLOR_WHITE = ['#FFF', 'White'];\nvar COLOR_YELLOW = ['#FF0', 'Yellow'];\n\nvar OPACITY_OPAQUE = ['1', 'Opaque'];\nvar OPACITY_SEMI = ['0.5', 'Semi-Transparent'];\nvar OPACITY_TRANS = ['0', 'Transparent'];\n\n// Configuration for the various <select> elements in the DOM of this component.\n//\n// Possible keys include:\n//\n// `default`:\n//   The default option index. Only needs to be provided if not zero.\n// `parser`:\n//   A function which is used to parse the value from the selected option in\n//   a customized way.\n// `selector`:\n//   The selector used to find the associated <select> element.\nvar selectConfigs = {\n  backgroundColor: {\n    selector: '.vjs-bg-color > select',\n    id: 'captions-background-color-%s',\n    label: 'Color',\n    options: [COLOR_BLACK, COLOR_WHITE, COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW, COLOR_MAGENTA, COLOR_CYAN]\n  },\n\n  backgroundOpacity: {\n    selector: '.vjs-bg-opacity > select',\n    id: 'captions-background-opacity-%s',\n    label: 'Transparency',\n    options: [OPACITY_OPAQUE, OPACITY_SEMI, OPACITY_TRANS]\n  },\n\n  color: {\n    selector: '.vjs-fg-color > select',\n    id: 'captions-foreground-color-%s',\n    label: 'Color',\n    options: [COLOR_WHITE, COLOR_BLACK, COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW, COLOR_MAGENTA, COLOR_CYAN]\n  },\n\n  edgeStyle: {\n    selector: '.vjs-edge-style > select',\n    id: '%s',\n    label: 'Text Edge Style',\n    options: [['none', 'None'], ['raised', 'Raised'], ['depressed', 'Depressed'], ['uniform', 'Uniform'], ['dropshadow', 'Dropshadow']]\n  },\n\n  fontFamily: {\n    selector: '.vjs-font-family > select',\n    id: 'captions-font-family-%s',\n    label: 'Font Family',\n    options: [['proportionalSansSerif', 'Proportional Sans-Serif'], ['monospaceSansSerif', 'Monospace Sans-Serif'], ['proportionalSerif', 'Proportional Serif'], ['monospaceSerif', 'Monospace Serif'], ['casual', 'Casual'], ['script', 'Script'], ['small-caps', 'Small Caps']]\n  },\n\n  fontPercent: {\n    selector: '.vjs-font-percent > select',\n    id: 'captions-font-size-%s',\n    label: 'Font Size',\n    options: [['0.50', '50%'], ['0.75', '75%'], ['1.00', '100%'], ['1.25', '125%'], ['1.50', '150%'], ['1.75', '175%'], ['2.00', '200%'], ['3.00', '300%'], ['4.00', '400%']],\n    default: 2,\n    parser: function parser(v) {\n      return v === '1.00' ? null : Number(v);\n    }\n  },\n\n  textOpacity: {\n    selector: '.vjs-text-opacity > select',\n    id: 'captions-foreground-opacity-%s',\n    label: 'Transparency',\n    options: [OPACITY_OPAQUE, OPACITY_SEMI]\n  },\n\n  // Options for this object are defined below.\n  windowColor: {\n    selector: '.vjs-window-color > select',\n    id: 'captions-window-color-%s',\n    label: 'Color'\n  },\n\n  // Options for this object are defined below.\n  windowOpacity: {\n    selector: '.vjs-window-opacity > select',\n    id: 'captions-window-opacity-%s',\n    label: 'Transparency',\n    options: [OPACITY_TRANS, OPACITY_SEMI, OPACITY_OPAQUE]\n  }\n};\n\nselectConfigs.windowColor.options = selectConfigs.backgroundColor.options;\n\n/**\n * Get the actual value of an option.\n *\n * @param  {string} value\n *         The value to get\n *\n * @param  {Function} [parser]\n *         Optional function to adjust the value.\n *\n * @return {Mixed}\n *         - Will be `undefined` if no value exists\n *         - Will be `undefined` if the given value is \"none\".\n *         - Will be the actual value otherwise.\n *\n * @private\n */\nfunction parseOptionValue(value, parser) {\n  if (parser) {\n    value = parser(value);\n  }\n\n  if (value && value !== 'none') {\n    return value;\n  }\n}\n\n/**\n * Gets the value of the selected <option> element within a <select> element.\n *\n * @param  {Element} el\n *         the element to look in\n *\n * @param  {Function} [parser]\n *         Optional function to adjust the value.\n *\n * @return {Mixed}\n *         - Will be `undefined` if no value exists\n *         - Will be `undefined` if the given value is \"none\".\n *         - Will be the actual value otherwise.\n *\n * @private\n */\nfunction getSelectedOptionValue(el, parser) {\n  var value = el.options[el.options.selectedIndex].value;\n\n  return parseOptionValue(value, parser);\n}\n\n/**\n * Sets the selected <option> element within a <select> element based on a\n * given value.\n *\n * @param {Element} el\n *        The element to look in.\n *\n * @param {string} value\n *        the property to look on.\n *\n * @param {Function} [parser]\n *        Optional function to adjust the value before comparing.\n *\n * @private\n */\nfunction setSelectedOption(el, value, parser) {\n  if (!value) {\n    return;\n  }\n\n  for (var i = 0; i < el.options.length; i++) {\n    if (parseOptionValue(el.options[i].value, parser) === value) {\n      el.selectedIndex = i;\n      break;\n    }\n  }\n}\n\n/**\n * Manipulate Text Tracks settings.\n *\n * @extends ModalDialog\n */\n\nvar TextTrackSettings = function (_ModalDialog) {\n  inherits(TextTrackSettings, _ModalDialog);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *         The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *         The key/value store of player options.\n   */\n  function TextTrackSettings(player, options) {\n    classCallCheck(this, TextTrackSettings);\n\n    options.temporary = false;\n\n    var _this = possibleConstructorReturn(this, _ModalDialog.call(this, player, options));\n\n    _this.updateDisplay = bind(_this, _this.updateDisplay);\n\n    // fill the modal and pretend we have opened it\n    _this.fill();\n    _this.hasBeenOpened_ = _this.hasBeenFilled_ = true;\n\n    _this.endDialog = createEl('p', {\n      className: 'vjs-control-text',\n      textContent: _this.localize('End of dialog window.')\n    });\n    _this.el().appendChild(_this.endDialog);\n\n    _this.setDefaults();\n\n    // Grab `persistTextTrackSettings` from the player options if not passed in child options\n    if (options.persistTextTrackSettings === undefined) {\n      _this.options_.persistTextTrackSettings = _this.options_.playerOptions.persistTextTrackSettings;\n    }\n\n    _this.on(_this.$('.vjs-done-button'), 'click', function () {\n      _this.saveSettings();\n      _this.close();\n    });\n\n    _this.on(_this.$('.vjs-default-button'), 'click', function () {\n      _this.setDefaults();\n      _this.updateDisplay();\n    });\n\n    each(selectConfigs, function (config) {\n      _this.on(_this.$(config.selector), 'change', _this.updateDisplay);\n    });\n\n    if (_this.options_.persistTextTrackSettings) {\n      _this.restoreSettings();\n    }\n    return _this;\n  }\n\n  TextTrackSettings.prototype.dispose = function dispose() {\n    this.endDialog = null;\n\n    _ModalDialog.prototype.dispose.call(this);\n  };\n\n  /**\n   * Create a <select> element with configured options.\n   *\n   * @param {string} key\n   *        Configuration key to use during creation.\n   *\n   * @return {string}\n   *         An HTML string.\n   *\n   * @private\n   */\n\n\n  TextTrackSettings.prototype.createElSelect_ = function createElSelect_(key) {\n    var _this2 = this;\n\n    var legendId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'label';\n\n    var config = selectConfigs[key];\n    var id = config.id.replace('%s', this.id_);\n    var selectLabelledbyIds = [legendId, id].join(' ').trim();\n\n    return ['<' + type + ' id=\"' + id + '\" class=\"' + (type === 'label' ? 'vjs-label' : '') + '\">', this.localize(config.label), '</' + type + '>', '<select aria-labelledby=\"' + selectLabelledbyIds + '\">'].concat(config.options.map(function (o) {\n      var optionId = id + '-' + o[1].replace(/\\W+/g, '');\n\n      return ['<option id=\"' + optionId + '\" value=\"' + o[0] + '\" ', 'aria-labelledby=\"' + selectLabelledbyIds + ' ' + optionId + '\">', _this2.localize(o[1]), '</option>'].join('');\n    })).concat('</select>').join('');\n  };\n\n  /**\n   * Create foreground color element for the component\n   *\n   * @return {string}\n   *         An HTML string.\n   *\n   * @private\n   */\n\n\n  TextTrackSettings.prototype.createElFgColor_ = function createElFgColor_() {\n    var legendId = 'captions-text-legend-' + this.id_;\n\n    return ['<fieldset class=\"vjs-fg-color vjs-track-setting\">', '<legend id=\"' + legendId + '\">', this.localize('Text'), '</legend>', this.createElSelect_('color', legendId), '<span class=\"vjs-text-opacity vjs-opacity\">', this.createElSelect_('textOpacity', legendId), '</span>', '</fieldset>'].join('');\n  };\n\n  /**\n   * Create background color element for the component\n   *\n   * @return {string}\n   *         An HTML string.\n   *\n   * @private\n   */\n\n\n  TextTrackSettings.prototype.createElBgColor_ = function createElBgColor_() {\n    var legendId = 'captions-background-' + this.id_;\n\n    return ['<fieldset class=\"vjs-bg-color vjs-track-setting\">', '<legend id=\"' + legendId + '\">', this.localize('Background'), '</legend>', this.createElSelect_('backgroundColor', legendId), '<span class=\"vjs-bg-opacity vjs-opacity\">', this.createElSelect_('backgroundOpacity', legendId), '</span>', '</fieldset>'].join('');\n  };\n\n  /**\n   * Create window color element for the component\n   *\n   * @return {string}\n   *         An HTML string.\n   *\n   * @private\n   */\n\n\n  TextTrackSettings.prototype.createElWinColor_ = function createElWinColor_() {\n    var legendId = 'captions-window-' + this.id_;\n\n    return ['<fieldset class=\"vjs-window-color vjs-track-setting\">', '<legend id=\"' + legendId + '\">', this.localize('Window'), '</legend>', this.createElSelect_('windowColor', legendId), '<span class=\"vjs-window-opacity vjs-opacity\">', this.createElSelect_('windowOpacity', legendId), '</span>', '</fieldset>'].join('');\n  };\n\n  /**\n   * Create color elements for the component\n   *\n   * @return {Element}\n   *         The element that was created\n   *\n   * @private\n   */\n\n\n  TextTrackSettings.prototype.createElColors_ = function createElColors_() {\n    return createEl('div', {\n      className: 'vjs-track-settings-colors',\n      innerHTML: [this.createElFgColor_(), this.createElBgColor_(), this.createElWinColor_()].join('')\n    });\n  };\n\n  /**\n   * Create font elements for the component\n   *\n   * @return {Element}\n   *         The element that was created.\n   *\n   * @private\n   */\n\n\n  TextTrackSettings.prototype.createElFont_ = function createElFont_() {\n    return createEl('div', {\n      className: 'vjs-track-settings-font',\n      innerHTML: ['<fieldset class=\"vjs-font-percent vjs-track-setting\">', this.createElSelect_('fontPercent', '', 'legend'), '</fieldset>', '<fieldset class=\"vjs-edge-style vjs-track-setting\">', this.createElSelect_('edgeStyle', '', 'legend'), '</fieldset>', '<fieldset class=\"vjs-font-family vjs-track-setting\">', this.createElSelect_('fontFamily', '', 'legend'), '</fieldset>'].join('')\n    });\n  };\n\n  /**\n   * Create controls for the component\n   *\n   * @return {Element}\n   *         The element that was created.\n   *\n   * @private\n   */\n\n\n  TextTrackSettings.prototype.createElControls_ = function createElControls_() {\n    var defaultsDescription = this.localize('restore all settings to the default values');\n\n    return createEl('div', {\n      className: 'vjs-track-settings-controls',\n      innerHTML: ['<button class=\"vjs-default-button\" title=\"' + defaultsDescription + '\">', this.localize('Reset'), '<span class=\"vjs-control-text\"> ' + defaultsDescription + '</span>', '</button>', '<button class=\"vjs-done-button\">' + this.localize('Done') + '</button>'].join('')\n    });\n  };\n\n  TextTrackSettings.prototype.content = function content() {\n    return [this.createElColors_(), this.createElFont_(), this.createElControls_()];\n  };\n\n  TextTrackSettings.prototype.label = function label() {\n    return this.localize('Caption Settings Dialog');\n  };\n\n  TextTrackSettings.prototype.description = function description() {\n    return this.localize('Beginning of dialog window. Escape will cancel and close the window.');\n  };\n\n  TextTrackSettings.prototype.buildCSSClass = function buildCSSClass() {\n    return _ModalDialog.prototype.buildCSSClass.call(this) + ' vjs-text-track-settings';\n  };\n\n  /**\n   * Gets an object of text track settings (or null).\n   *\n   * @return {Object}\n   *         An object with config values parsed from the DOM or localStorage.\n   */\n\n\n  TextTrackSettings.prototype.getValues = function getValues() {\n    var _this3 = this;\n\n    return reduce(selectConfigs, function (accum, config, key) {\n      var value = getSelectedOptionValue(_this3.$(config.selector), config.parser);\n\n      if (value !== undefined) {\n        accum[key] = value;\n      }\n\n      return accum;\n    }, {});\n  };\n\n  /**\n   * Sets text track settings from an object of values.\n   *\n   * @param {Object} values\n   *        An object with config values parsed from the DOM or localStorage.\n   */\n\n\n  TextTrackSettings.prototype.setValues = function setValues(values) {\n    var _this4 = this;\n\n    each(selectConfigs, function (config, key) {\n      setSelectedOption(_this4.$(config.selector), values[key], config.parser);\n    });\n  };\n\n  /**\n   * Sets all `<select>` elements to their default values.\n   */\n\n\n  TextTrackSettings.prototype.setDefaults = function setDefaults() {\n    var _this5 = this;\n\n    each(selectConfigs, function (config) {\n      var index = config.hasOwnProperty('default') ? config.default : 0;\n\n      _this5.$(config.selector).selectedIndex = index;\n    });\n  };\n\n  /**\n   * Restore texttrack settings from localStorage\n   */\n\n\n  TextTrackSettings.prototype.restoreSettings = function restoreSettings() {\n    var values = void 0;\n\n    try {\n      values = JSON.parse(window$1.localStorage.getItem(LOCAL_STORAGE_KEY));\n    } catch (err) {\n      log$1.warn(err);\n    }\n\n    if (values) {\n      this.setValues(values);\n    }\n  };\n\n  /**\n   * Save text track settings to localStorage\n   */\n\n\n  TextTrackSettings.prototype.saveSettings = function saveSettings() {\n    if (!this.options_.persistTextTrackSettings) {\n      return;\n    }\n\n    var values = this.getValues();\n\n    try {\n      if (Object.keys(values).length) {\n        window$1.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(values));\n      } else {\n        window$1.localStorage.removeItem(LOCAL_STORAGE_KEY);\n      }\n    } catch (err) {\n      log$1.warn(err);\n    }\n  };\n\n  /**\n   * Update display of text track settings\n   */\n\n\n  TextTrackSettings.prototype.updateDisplay = function updateDisplay() {\n    var ttDisplay = this.player_.getChild('textTrackDisplay');\n\n    if (ttDisplay) {\n      ttDisplay.updateDisplay();\n    }\n  };\n\n  /**\n   * conditionally blur the element and refocus the captions button\n   *\n   * @private\n   */\n\n\n  TextTrackSettings.prototype.conditionalBlur_ = function conditionalBlur_() {\n    this.previouslyActiveEl_ = null;\n    this.off(document, 'keydown', this.handleKeyDown);\n\n    var cb = this.player_.controlBar;\n    var subsCapsBtn = cb && cb.subsCapsButton;\n    var ccBtn = cb && cb.captionsButton;\n\n    if (subsCapsBtn) {\n      subsCapsBtn.focus();\n    } else if (ccBtn) {\n      ccBtn.focus();\n    }\n  };\n\n  return TextTrackSettings;\n}(ModalDialog);\n\nComponent.registerComponent('TextTrackSettings', TextTrackSettings);\n\n/**\n * @file resize-manager.js\n */\n\n/**\n * A Resize Manager. It is in charge of triggering `playerresize` on the player in the right conditions.\n *\n * It'll either create an iframe and use a debounced resize handler on it or use the new {@link https://wicg.github.io/ResizeObserver/|ResizeObserver}.\n *\n * If the ResizeObserver is available natively, it will be used. A polyfill can be passed in as an option.\n * If a `playerresize` event is not needed, the ResizeManager component can be removed from the player, see the example below.\n * @example <caption>How to disable the resize manager</caption>\n * const player = videojs('#vid', {\n *   resizeManager: false\n * });\n *\n * @see {@link https://wicg.github.io/ResizeObserver/|ResizeObserver specification}\n *\n * @extends Component\n */\n\nvar ResizeManager = function (_Component) {\n  inherits(ResizeManager, _Component);\n\n  /**\n   * Create the ResizeManager.\n   *\n   * @param {Object} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of ResizeManager options.\n   *\n   * @param {Object} [options.ResizeObserver]\n   *        A polyfill for ResizeObserver can be passed in here.\n   *        If this is set to null it will ignore the native ResizeObserver and fall back to the iframe fallback.\n   */\n  function ResizeManager(player, options) {\n    classCallCheck(this, ResizeManager);\n\n    var RESIZE_OBSERVER_AVAILABLE = options.ResizeObserver || window$1.ResizeObserver;\n\n    // if `null` was passed, we want to disable the ResizeObserver\n    if (options.ResizeObserver === null) {\n      RESIZE_OBSERVER_AVAILABLE = false;\n    }\n\n    // Only create an element when ResizeObserver isn't available\n    var options_ = mergeOptions({\n      createEl: !RESIZE_OBSERVER_AVAILABLE,\n      reportTouchActivity: false\n    }, options);\n\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options_));\n\n    _this.ResizeObserver = options.ResizeObserver || window$1.ResizeObserver;\n    _this.loadListener_ = null;\n    _this.resizeObserver_ = null;\n    _this.debouncedHandler_ = debounce(function () {\n      _this.resizeHandler();\n    }, 100, false, _this);\n\n    if (RESIZE_OBSERVER_AVAILABLE) {\n      _this.resizeObserver_ = new _this.ResizeObserver(_this.debouncedHandler_);\n      _this.resizeObserver_.observe(player.el());\n    } else {\n      _this.loadListener_ = function () {\n        if (!_this.el_ || !_this.el_.contentWindow) {\n          return;\n        }\n\n        on(_this.el_.contentWindow, 'resize', _this.debouncedHandler_);\n      };\n\n      _this.one('load', _this.loadListener_);\n    }\n    return _this;\n  }\n\n  ResizeManager.prototype.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'iframe', {\n      className: 'vjs-resize-manager'\n    });\n  };\n\n  /**\n   * Called when a resize is triggered on the iframe or a resize is observed via the ResizeObserver\n   *\n   * @fires Player#playerresize\n   */\n\n\n  ResizeManager.prototype.resizeHandler = function resizeHandler() {\n    /**\n     * Called when the player size has changed\n     *\n     * @event Player#playerresize\n     * @type {EventTarget~Event}\n     */\n    // make sure player is still around to trigger\n    // prevents this from causing an error after dispose\n    if (!this.player_ || !this.player_.trigger) {\n      return;\n    }\n\n    this.player_.trigger('playerresize');\n  };\n\n  ResizeManager.prototype.dispose = function dispose() {\n    if (this.debouncedHandler_) {\n      this.debouncedHandler_.cancel();\n    }\n\n    if (this.resizeObserver_) {\n      if (this.player_.el()) {\n        this.resizeObserver_.unobserve(this.player_.el());\n      }\n      this.resizeObserver_.disconnect();\n    }\n\n    if (this.el_ && this.el_.contentWindow) {\n      off(this.el_.contentWindow, 'resize', this.debouncedHandler_);\n    }\n\n    if (this.loadListener_) {\n      this.off('load', this.loadListener_);\n    }\n\n    this.ResizeObserver = null;\n    this.resizeObserver = null;\n    this.debouncedHandler_ = null;\n    this.loadListener_ = null;\n  };\n\n  return ResizeManager;\n}(Component);\n\nComponent.registerComponent('ResizeManager', ResizeManager);\n\n/**\n * This function is used to fire a sourceset when there is something\n * similar to `mediaEl.load()` being called. It will try to find the source via\n * the `src` attribute and then the `<source>` elements. It will then fire `sourceset`\n * with the source that was found or empty string if we cannot know. If it cannot\n * find a source then `sourceset` will not be fired.\n *\n * @param {Html5} tech\n *        The tech object that sourceset was setup on\n *\n * @return {boolean}\n *         returns false if the sourceset was not fired and true otherwise.\n */\nvar sourcesetLoad = function sourcesetLoad(tech) {\n  var el = tech.el();\n\n  // if `el.src` is set, that source will be loaded.\n  if (el.hasAttribute('src')) {\n    tech.triggerSourceset(el.src);\n    return true;\n  }\n\n  /**\n   * Since there isn't a src property on the media element, source elements will be used for\n   * implementing the source selection algorithm. This happens asynchronously and\n   * for most cases were there is more than one source we cannot tell what source will\n   * be loaded, without re-implementing the source selection algorithm. At this time we are not\n   * going to do that. There are three special cases that we do handle here though:\n   *\n   * 1. If there are no sources, do not fire `sourceset`.\n   * 2. If there is only one `<source>` with a `src` property/attribute that is our `src`\n   * 3. If there is more than one `<source>` but all of them have the same `src` url.\n   *    That will be our src.\n   */\n  var sources = tech.$$('source');\n  var srcUrls = [];\n  var src = '';\n\n  // if there are no sources, do not fire sourceset\n  if (!sources.length) {\n    return false;\n  }\n\n  // only count valid/non-duplicate source elements\n  for (var i = 0; i < sources.length; i++) {\n    var url = sources[i].src;\n\n    if (url && srcUrls.indexOf(url) === -1) {\n      srcUrls.push(url);\n    }\n  }\n\n  // there were no valid sources\n  if (!srcUrls.length) {\n    return false;\n  }\n\n  // there is only one valid source element url\n  // use that\n  if (srcUrls.length === 1) {\n    src = srcUrls[0];\n  }\n\n  tech.triggerSourceset(src);\n  return true;\n};\n\n/**\n * our implementation of an `innerHTML` descriptor for browsers\n * that do not have one.\n */\nvar innerHTMLDescriptorPolyfill = Object.defineProperty({}, 'innerHTML', {\n  get: function get() {\n    return this.cloneNode(true).innerHTML;\n  },\n  set: function set(v) {\n    // make a dummy node to use innerHTML on\n    var dummy = document.createElement(this.nodeName.toLowerCase());\n\n    // set innerHTML to the value provided\n    dummy.innerHTML = v;\n\n    // make a document fragment to hold the nodes from dummy\n    var docFrag = document.createDocumentFragment();\n\n    // copy all of the nodes created by the innerHTML on dummy\n    // to the document fragment\n    while (dummy.childNodes.length) {\n      docFrag.appendChild(dummy.childNodes[0]);\n    }\n\n    // remove content\n    this.innerText = '';\n\n    // now we add all of that html in one by appending the\n    // document fragment. This is how innerHTML does it.\n    window$1.Element.prototype.appendChild.call(this, docFrag);\n\n    // then return the result that innerHTML's setter would\n    return this.innerHTML;\n  }\n});\n\n/**\n * Get a property descriptor given a list of priorities and the\n * property to get.\n */\nvar getDescriptor = function getDescriptor(priority, prop) {\n  var descriptor = {};\n\n  for (var i = 0; i < priority.length; i++) {\n    descriptor = Object.getOwnPropertyDescriptor(priority[i], prop);\n\n    if (descriptor && descriptor.set && descriptor.get) {\n      break;\n    }\n  }\n\n  descriptor.enumerable = true;\n  descriptor.configurable = true;\n\n  return descriptor;\n};\n\nvar getInnerHTMLDescriptor = function getInnerHTMLDescriptor(tech) {\n  return getDescriptor([tech.el(), window$1.HTMLMediaElement.prototype, window$1.Element.prototype, innerHTMLDescriptorPolyfill], 'innerHTML');\n};\n\n/**\n * Patches browser internal functions so that we can tell synchronously\n * if a `<source>` was appended to the media element. For some reason this\n * causes a `sourceset` if the the media element is ready and has no source.\n * This happens when:\n * - The page has just loaded and the media element does not have a source.\n * - The media element was emptied of all sources, then `load()` was called.\n *\n * It does this by patching the following functions/properties when they are supported:\n *\n * - `append()` - can be used to add a `<source>` element to the media element\n * - `appendChild()` - can be used to add a `<source>` element to the media element\n * - `insertAdjacentHTML()` -  can be used to add a `<source>` element to the media element\n * - `innerHTML` -  can be used to add a `<source>` element to the media element\n *\n * @param {Html5} tech\n *        The tech object that sourceset is being setup on.\n */\nvar firstSourceWatch = function firstSourceWatch(tech) {\n  var el = tech.el();\n\n  // make sure firstSourceWatch isn't setup twice.\n  if (el.resetSourceWatch_) {\n    return;\n  }\n\n  var old = {};\n  var innerDescriptor = getInnerHTMLDescriptor(tech);\n  var appendWrapper = function appendWrapper(appendFn) {\n    return function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var retval = appendFn.apply(el, args);\n\n      sourcesetLoad(tech);\n\n      return retval;\n    };\n  };\n\n  ['append', 'appendChild', 'insertAdjacentHTML'].forEach(function (k) {\n    if (!el[k]) {\n      return;\n    }\n\n    // store the old function\n    old[k] = el[k];\n\n    // call the old function with a sourceset if a source\n    // was loaded\n    el[k] = appendWrapper(old[k]);\n  });\n\n  Object.defineProperty(el, 'innerHTML', mergeOptions(innerDescriptor, {\n    set: appendWrapper(innerDescriptor.set)\n  }));\n\n  el.resetSourceWatch_ = function () {\n    el.resetSourceWatch_ = null;\n    Object.keys(old).forEach(function (k) {\n      el[k] = old[k];\n    });\n\n    Object.defineProperty(el, 'innerHTML', innerDescriptor);\n  };\n\n  // on the first sourceset, we need to revert our changes\n  tech.one('sourceset', el.resetSourceWatch_);\n};\n\n/**\n * our implementation of a `src` descriptor for browsers\n * that do not have one.\n */\nvar srcDescriptorPolyfill = Object.defineProperty({}, 'src', {\n  get: function get() {\n    if (this.hasAttribute('src')) {\n      return getAbsoluteURL(window$1.Element.prototype.getAttribute.call(this, 'src'));\n    }\n\n    return '';\n  },\n  set: function set(v) {\n    window$1.Element.prototype.setAttribute.call(this, 'src', v);\n\n    return v;\n  }\n});\n\nvar getSrcDescriptor = function getSrcDescriptor(tech) {\n  return getDescriptor([tech.el(), window$1.HTMLMediaElement.prototype, srcDescriptorPolyfill], 'src');\n};\n\n/**\n * setup `sourceset` handling on the `Html5` tech. This function\n * patches the following element properties/functions:\n *\n * - `src` - to determine when `src` is set\n * - `setAttribute()` - to determine when `src` is set\n * - `load()` - this re-triggers the source selection algorithm, and can\n *              cause a sourceset.\n *\n * If there is no source when we are adding `sourceset` support or during a `load()`\n * we also patch the functions listed in `firstSourceWatch`.\n *\n * @param {Html5} tech\n *        The tech to patch\n */\nvar setupSourceset = function setupSourceset(tech) {\n  if (!tech.featuresSourceset) {\n    return;\n  }\n\n  var el = tech.el();\n\n  // make sure sourceset isn't setup twice.\n  if (el.resetSourceset_) {\n    return;\n  }\n\n  var srcDescriptor = getSrcDescriptor(tech);\n  var oldSetAttribute = el.setAttribute;\n  var oldLoad = el.load;\n\n  Object.defineProperty(el, 'src', mergeOptions(srcDescriptor, {\n    set: function set(v) {\n      var retval = srcDescriptor.set.call(el, v);\n\n      // we use the getter here to get the actual value set on src\n      tech.triggerSourceset(el.src);\n\n      return retval;\n    }\n  }));\n\n  el.setAttribute = function (n, v) {\n    var retval = oldSetAttribute.call(el, n, v);\n\n    if (/src/i.test(n)) {\n      tech.triggerSourceset(el.src);\n    }\n\n    return retval;\n  };\n\n  el.load = function () {\n    var retval = oldLoad.call(el);\n\n    // if load was called, but there was no source to fire\n    // sourceset on. We have to watch for a source append\n    // as that can trigger a `sourceset` when the media element\n    // has no source\n    if (!sourcesetLoad(tech)) {\n      tech.triggerSourceset('');\n      firstSourceWatch(tech);\n    }\n\n    return retval;\n  };\n\n  if (el.currentSrc) {\n    tech.triggerSourceset(el.currentSrc);\n  } else if (!sourcesetLoad(tech)) {\n    firstSourceWatch(tech);\n  }\n\n  el.resetSourceset_ = function () {\n    el.resetSourceset_ = null;\n    el.load = oldLoad;\n    el.setAttribute = oldSetAttribute;\n    Object.defineProperty(el, 'src', srcDescriptor);\n    if (el.resetSourceWatch_) {\n      el.resetSourceWatch_();\n    }\n  };\n};\n\nvar _templateObject$1 = taggedTemplateLiteralLoose(['Text Tracks are being loaded from another origin but the crossorigin attribute isn\\'t used.\\n            This may prevent text tracks from loading.'], ['Text Tracks are being loaded from another origin but the crossorigin attribute isn\\'t used.\\n            This may prevent text tracks from loading.']);\n\n/**\n * HTML5 Media Controller - Wrapper for HTML5 Media API\n *\n * @mixes Tech~SourceHandlerAdditions\n * @extends Tech\n */\n\nvar Html5 = function (_Tech) {\n  inherits(Html5, _Tech);\n\n  /**\n   * Create an instance of this Tech.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} ready\n   *        Callback function to call when the `HTML5` Tech is ready.\n   */\n  function Html5(options, ready) {\n    classCallCheck(this, Html5);\n\n    var _this = possibleConstructorReturn(this, _Tech.call(this, options, ready));\n\n    var source = options.source;\n    var crossoriginTracks = false;\n\n    // Set the source if one is provided\n    // 1) Check if the source is new (if not, we want to keep the original so playback isn't interrupted)\n    // 2) Check to see if the network state of the tag was failed at init, and if so, reset the source\n    // anyway so the error gets fired.\n    if (source && (_this.el_.currentSrc !== source.src || options.tag && options.tag.initNetworkState_ === 3)) {\n      _this.setSource(source);\n    } else {\n      _this.handleLateInit_(_this.el_);\n    }\n\n    // setup sourceset after late sourceset/init\n    if (options.enableSourceset) {\n      _this.setupSourcesetHandling_();\n    }\n\n    if (_this.el_.hasChildNodes()) {\n\n      var nodes = _this.el_.childNodes;\n      var nodesLength = nodes.length;\n      var removeNodes = [];\n\n      while (nodesLength--) {\n        var node = nodes[nodesLength];\n        var nodeName = node.nodeName.toLowerCase();\n\n        if (nodeName === 'track') {\n          if (!_this.featuresNativeTextTracks) {\n            // Empty video tag tracks so the built-in player doesn't use them also.\n            // This may not be fast enough to stop HTML5 browsers from reading the tags\n            // so we'll need to turn off any default tracks if we're manually doing\n            // captions and subtitles. videoElement.textTracks\n            removeNodes.push(node);\n          } else {\n            // store HTMLTrackElement and TextTrack to remote list\n            _this.remoteTextTrackEls().addTrackElement_(node);\n            _this.remoteTextTracks().addTrack(node.track);\n            _this.textTracks().addTrack(node.track);\n            if (!crossoriginTracks && !_this.el_.hasAttribute('crossorigin') && isCrossOrigin(node.src)) {\n              crossoriginTracks = true;\n            }\n          }\n        }\n      }\n\n      for (var i = 0; i < removeNodes.length; i++) {\n        _this.el_.removeChild(removeNodes[i]);\n      }\n    }\n\n    _this.proxyNativeTracks_();\n    if (_this.featuresNativeTextTracks && crossoriginTracks) {\n      log$1.warn(tsml(_templateObject$1));\n    }\n\n    // prevent iOS Safari from disabling metadata text tracks during native playback\n    _this.restoreMetadataTracksInIOSNativePlayer_();\n\n    // Determine if native controls should be used\n    // Our goal should be to get the custom controls on mobile solid everywhere\n    // so we can remove this all together. Right now this will block custom\n    // controls on touch enabled laptops like the Chrome Pixel\n    if ((TOUCH_ENABLED || IS_IPHONE || IS_NATIVE_ANDROID) && options.nativeControlsForTouch === true) {\n      _this.setControls(true);\n    }\n\n    // on iOS, we want to proxy `webkitbeginfullscreen` and `webkitendfullscreen`\n    // into a `fullscreenchange` event\n    _this.proxyWebkitFullscreen_();\n\n    _this.triggerReady();\n    return _this;\n  }\n\n  /**\n   * Dispose of `HTML5` media element and remove all tracks.\n   */\n\n\n  Html5.prototype.dispose = function dispose() {\n    if (this.el_ && this.el_.resetSourceset_) {\n      this.el_.resetSourceset_();\n    }\n    Html5.disposeMediaElement(this.el_);\n    this.options_ = null;\n\n    // tech will handle clearing of the emulated track list\n    _Tech.prototype.dispose.call(this);\n  };\n\n  /**\n   * Modify the media element so that we can detect when\n   * the source is changed. Fires `sourceset` just after the source has changed\n   */\n\n\n  Html5.prototype.setupSourcesetHandling_ = function setupSourcesetHandling_() {\n    setupSourceset(this);\n  };\n\n  /**\n   * When a captions track is enabled in the iOS Safari native player, all other\n   * tracks are disabled (including metadata tracks), which nulls all of their\n   * associated cue points. This will restore metadata tracks to their pre-fullscreen\n   * state in those cases so that cue points are not needlessly lost.\n   *\n   * @private\n   */\n\n\n  Html5.prototype.restoreMetadataTracksInIOSNativePlayer_ = function restoreMetadataTracksInIOSNativePlayer_() {\n    var textTracks = this.textTracks();\n    var metadataTracksPreFullscreenState = void 0;\n\n    // captures a snapshot of every metadata track's current state\n    var takeMetadataTrackSnapshot = function takeMetadataTrackSnapshot() {\n      metadataTracksPreFullscreenState = [];\n\n      for (var i = 0; i < textTracks.length; i++) {\n        var track = textTracks[i];\n\n        if (track.kind === 'metadata') {\n          metadataTracksPreFullscreenState.push({\n            track: track,\n            storedMode: track.mode\n          });\n        }\n      }\n    };\n\n    // snapshot each metadata track's initial state, and update the snapshot\n    // each time there is a track 'change' event\n    takeMetadataTrackSnapshot();\n    textTracks.addEventListener('change', takeMetadataTrackSnapshot);\n\n    this.on('dispose', function () {\n      return textTracks.removeEventListener('change', takeMetadataTrackSnapshot);\n    });\n\n    var restoreTrackMode = function restoreTrackMode() {\n      for (var i = 0; i < metadataTracksPreFullscreenState.length; i++) {\n        var storedTrack = metadataTracksPreFullscreenState[i];\n\n        if (storedTrack.track.mode === 'disabled' && storedTrack.track.mode !== storedTrack.storedMode) {\n          storedTrack.track.mode = storedTrack.storedMode;\n        }\n      }\n      // we only want this handler to be executed on the first 'change' event\n      textTracks.removeEventListener('change', restoreTrackMode);\n    };\n\n    // when we enter fullscreen playback, stop updating the snapshot and\n    // restore all track modes to their pre-fullscreen state\n    this.on('webkitbeginfullscreen', function () {\n      textTracks.removeEventListener('change', takeMetadataTrackSnapshot);\n\n      // remove the listener before adding it just in case it wasn't previously removed\n      textTracks.removeEventListener('change', restoreTrackMode);\n      textTracks.addEventListener('change', restoreTrackMode);\n    });\n\n    // start updating the snapshot again after leaving fullscreen\n    this.on('webkitendfullscreen', function () {\n      // remove the listener before adding it just in case it wasn't previously removed\n      textTracks.removeEventListener('change', takeMetadataTrackSnapshot);\n      textTracks.addEventListener('change', takeMetadataTrackSnapshot);\n\n      // remove the restoreTrackMode handler in case it wasn't triggered during fullscreen playback\n      textTracks.removeEventListener('change', restoreTrackMode);\n    });\n  };\n\n  /**\n   * Attempt to force override of tracks for the given type\n   *\n   * @param {String} type - Track type to override, possible values include 'Audio',\n   * 'Video', and 'Text'.\n   * @param {Boolean} override - If set to true native audio/video will be overridden,\n   * otherwise native audio/video will potentially be used.\n   * @private\n   */\n\n\n  Html5.prototype.overrideNative_ = function overrideNative_(type, override) {\n    var _this2 = this;\n\n    // If there is no behavioral change don't add/remove listeners\n    if (override !== this['featuresNative' + type + 'Tracks']) {\n      return;\n    }\n\n    var lowerCaseType = type.toLowerCase();\n\n    if (this[lowerCaseType + 'TracksListeners_']) {\n      Object.keys(this[lowerCaseType + 'TracksListeners_']).forEach(function (eventName) {\n        var elTracks = _this2.el()[lowerCaseType + 'Tracks'];\n\n        elTracks.removeEventListener(eventName, _this2[lowerCaseType + 'TracksListeners_'][eventName]);\n      });\n    }\n\n    this['featuresNative' + type + 'Tracks'] = !override;\n    this[lowerCaseType + 'TracksListeners_'] = null;\n\n    this.proxyNativeTracksForType_(lowerCaseType);\n  };\n\n  /**\n   * Attempt to force override of native audio tracks.\n   *\n   * @param {Boolean} override - If set to true native audio will be overridden,\n   * otherwise native audio will potentially be used.\n   */\n\n\n  Html5.prototype.overrideNativeAudioTracks = function overrideNativeAudioTracks(override) {\n    this.overrideNative_('Audio', override);\n  };\n\n  /**\n   * Attempt to force override of native video tracks.\n   *\n   * @param {Boolean} override - If set to true native video will be overridden,\n   * otherwise native video will potentially be used.\n   */\n\n\n  Html5.prototype.overrideNativeVideoTracks = function overrideNativeVideoTracks(override) {\n    this.overrideNative_('Video', override);\n  };\n\n  /**\n    * Proxy native track list events for the given type to our track\n    * lists if the browser we are playing in supports that type of track list.\n    *\n    * @param {string} name - Track type; values include 'audio', 'video', and 'text'\n    * @private\n    */\n\n\n  Html5.prototype.proxyNativeTracksForType_ = function proxyNativeTracksForType_(name) {\n    var _this3 = this;\n\n    var props = NORMAL[name];\n    var elTracks = this.el()[props.getterName];\n    var techTracks = this[props.getterName]();\n\n    if (!this['featuresNative' + props.capitalName + 'Tracks'] || !elTracks || !elTracks.addEventListener) {\n      return;\n    }\n    var listeners = {\n      change: function change(e) {\n        techTracks.trigger({\n          type: 'change',\n          target: techTracks,\n          currentTarget: techTracks,\n          srcElement: techTracks\n        });\n      },\n      addtrack: function addtrack(e) {\n        techTracks.addTrack(e.track);\n      },\n      removetrack: function removetrack(e) {\n        techTracks.removeTrack(e.track);\n      }\n    };\n    var removeOldTracks = function removeOldTracks() {\n      var removeTracks = [];\n\n      for (var i = 0; i < techTracks.length; i++) {\n        var found = false;\n\n        for (var j = 0; j < elTracks.length; j++) {\n          if (elTracks[j] === techTracks[i]) {\n            found = true;\n            break;\n          }\n        }\n\n        if (!found) {\n          removeTracks.push(techTracks[i]);\n        }\n      }\n\n      while (removeTracks.length) {\n        techTracks.removeTrack(removeTracks.shift());\n      }\n    };\n\n    this[props.getterName + 'Listeners_'] = listeners;\n\n    Object.keys(listeners).forEach(function (eventName) {\n      var listener = listeners[eventName];\n\n      elTracks.addEventListener(eventName, listener);\n      _this3.on('dispose', function (e) {\n        return elTracks.removeEventListener(eventName, listener);\n      });\n    });\n\n    // Remove (native) tracks that are not used anymore\n    this.on('loadstart', removeOldTracks);\n    this.on('dispose', function (e) {\n      return _this3.off('loadstart', removeOldTracks);\n    });\n  };\n\n  /**\n   * Proxy all native track list events to our track lists if the browser we are playing\n   * in supports that type of track list.\n   *\n   * @private\n   */\n\n\n  Html5.prototype.proxyNativeTracks_ = function proxyNativeTracks_() {\n    var _this4 = this;\n\n    NORMAL.names.forEach(function (name) {\n      _this4.proxyNativeTracksForType_(name);\n    });\n  };\n\n  /**\n   * Create the `Html5` Tech's DOM element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n\n\n  Html5.prototype.createEl = function createEl$$1() {\n    var el = this.options_.tag;\n\n    // Check if this browser supports moving the element into the box.\n    // On the iPhone video will break if you move the element,\n    // So we have to create a brand new element.\n    // If we ingested the player div, we do not need to move the media element.\n    if (!el || !(this.options_.playerElIngest || this.movingMediaElementInDOM)) {\n\n      // If the original tag is still there, clone and remove it.\n      if (el) {\n        var clone = el.cloneNode(true);\n\n        if (el.parentNode) {\n          el.parentNode.insertBefore(clone, el);\n        }\n        Html5.disposeMediaElement(el);\n        el = clone;\n      } else {\n        el = document.createElement('video');\n\n        // determine if native controls should be used\n        var tagAttributes = this.options_.tag && getAttributes(this.options_.tag);\n        var attributes = mergeOptions({}, tagAttributes);\n\n        if (!TOUCH_ENABLED || this.options_.nativeControlsForTouch !== true) {\n          delete attributes.controls;\n        }\n\n        setAttributes(el, assign(attributes, {\n          id: this.options_.techId,\n          class: 'vjs-tech'\n        }));\n      }\n\n      el.playerId = this.options_.playerId;\n    }\n\n    if (typeof this.options_.preload !== 'undefined') {\n      setAttribute(el, 'preload', this.options_.preload);\n    }\n\n    // Update specific tag settings, in case they were overridden\n    // `autoplay` has to be *last* so that `muted` and `playsinline` are present\n    // when iOS/Safari or other browsers attempt to autoplay.\n    var settingsAttrs = ['loop', 'muted', 'playsinline', 'autoplay'];\n\n    for (var i = 0; i < settingsAttrs.length; i++) {\n      var attr = settingsAttrs[i];\n      var value = this.options_[attr];\n\n      if (typeof value !== 'undefined') {\n        if (value) {\n          setAttribute(el, attr, attr);\n        } else {\n          removeAttribute(el, attr);\n        }\n        el[attr] = value;\n      }\n    }\n\n    return el;\n  };\n\n  /**\n   * This will be triggered if the loadstart event has already fired, before videojs was\n   * ready. Two known examples of when this can happen are:\n   * 1. If we're loading the playback object after it has started loading\n   * 2. The media is already playing the (often with autoplay on) then\n   *\n   * This function will fire another loadstart so that videojs can catchup.\n   *\n   * @fires Tech#loadstart\n   *\n   * @return {undefined}\n   *         returns nothing.\n   */\n\n\n  Html5.prototype.handleLateInit_ = function handleLateInit_(el) {\n    if (el.networkState === 0 || el.networkState === 3) {\n      // The video element hasn't started loading the source yet\n      // or didn't find a source\n      return;\n    }\n\n    if (el.readyState === 0) {\n      // NetworkState is set synchronously BUT loadstart is fired at the\n      // end of the current stack, usually before setInterval(fn, 0).\n      // So at this point we know loadstart may have already fired or is\n      // about to fire, and either way the player hasn't seen it yet.\n      // We don't want to fire loadstart prematurely here and cause a\n      // double loadstart so we'll wait and see if it happens between now\n      // and the next loop, and fire it if not.\n      // HOWEVER, we also want to make sure it fires before loadedmetadata\n      // which could also happen between now and the next loop, so we'll\n      // watch for that also.\n      var loadstartFired = false;\n      var setLoadstartFired = function setLoadstartFired() {\n        loadstartFired = true;\n      };\n\n      this.on('loadstart', setLoadstartFired);\n\n      var triggerLoadstart = function triggerLoadstart() {\n        // We did miss the original loadstart. Make sure the player\n        // sees loadstart before loadedmetadata\n        if (!loadstartFired) {\n          this.trigger('loadstart');\n        }\n      };\n\n      this.on('loadedmetadata', triggerLoadstart);\n\n      this.ready(function () {\n        this.off('loadstart', setLoadstartFired);\n        this.off('loadedmetadata', triggerLoadstart);\n\n        if (!loadstartFired) {\n          // We did miss the original native loadstart. Fire it now.\n          this.trigger('loadstart');\n        }\n      });\n\n      return;\n    }\n\n    // From here on we know that loadstart already fired and we missed it.\n    // The other readyState events aren't as much of a problem if we double\n    // them, so not going to go to as much trouble as loadstart to prevent\n    // that unless we find reason to.\n    var eventsToTrigger = ['loadstart'];\n\n    // loadedmetadata: newly equal to HAVE_METADATA (1) or greater\n    eventsToTrigger.push('loadedmetadata');\n\n    // loadeddata: newly increased to HAVE_CURRENT_DATA (2) or greater\n    if (el.readyState >= 2) {\n      eventsToTrigger.push('loadeddata');\n    }\n\n    // canplay: newly increased to HAVE_FUTURE_DATA (3) or greater\n    if (el.readyState >= 3) {\n      eventsToTrigger.push('canplay');\n    }\n\n    // canplaythrough: newly equal to HAVE_ENOUGH_DATA (4)\n    if (el.readyState >= 4) {\n      eventsToTrigger.push('canplaythrough');\n    }\n\n    // We still need to give the player time to add event listeners\n    this.ready(function () {\n      eventsToTrigger.forEach(function (type) {\n        this.trigger(type);\n      }, this);\n    });\n  };\n\n  /**\n   * Set current time for the `HTML5` tech.\n   *\n   * @param {number} seconds\n   *        Set the current time of the media to this.\n   */\n\n\n  Html5.prototype.setCurrentTime = function setCurrentTime(seconds) {\n    try {\n      this.el_.currentTime = seconds;\n    } catch (e) {\n      log$1(e, 'Video is not ready. (Video.js)');\n      // this.warning(VideoJS.warnings.videoNotReady);\n    }\n  };\n\n  /**\n   * Get the current duration of the HTML5 media element.\n   *\n   * @return {number}\n   *         The duration of the media or 0 if there is no duration.\n   */\n\n\n  Html5.prototype.duration = function duration() {\n    var _this5 = this;\n\n    // Android Chrome will report duration as Infinity for VOD HLS until after\n    // playback has started, which triggers the live display erroneously.\n    // Return NaN if playback has not started and trigger a durationupdate once\n    // the duration can be reliably known.\n    if (this.el_.duration === Infinity && IS_ANDROID && IS_CHROME && this.el_.currentTime === 0) {\n      // Wait for the first `timeupdate` with currentTime > 0 - there may be\n      // several with 0\n      var checkProgress = function checkProgress() {\n        if (_this5.el_.currentTime > 0) {\n          // Trigger durationchange for genuinely live video\n          if (_this5.el_.duration === Infinity) {\n            _this5.trigger('durationchange');\n          }\n          _this5.off('timeupdate', checkProgress);\n        }\n      };\n\n      this.on('timeupdate', checkProgress);\n      return NaN;\n    }\n    return this.el_.duration || NaN;\n  };\n\n  /**\n   * Get the current width of the HTML5 media element.\n   *\n   * @return {number}\n   *         The width of the HTML5 media element.\n   */\n\n\n  Html5.prototype.width = function width() {\n    return this.el_.offsetWidth;\n  };\n\n  /**\n   * Get the current height of the HTML5 media element.\n   *\n   * @return {number}\n   *         The height of the HTML5 media element.\n   */\n\n\n  Html5.prototype.height = function height() {\n    return this.el_.offsetHeight;\n  };\n\n  /**\n   * Proxy iOS `webkitbeginfullscreen` and `webkitendfullscreen` into\n   * `fullscreenchange` event.\n   *\n   * @private\n   * @fires fullscreenchange\n   * @listens webkitendfullscreen\n   * @listens webkitbeginfullscreen\n   * @listens webkitbeginfullscreen\n   */\n\n\n  Html5.prototype.proxyWebkitFullscreen_ = function proxyWebkitFullscreen_() {\n    var _this6 = this;\n\n    if (!('webkitDisplayingFullscreen' in this.el_)) {\n      return;\n    }\n\n    var endFn = function endFn() {\n      this.trigger('fullscreenchange', { isFullscreen: false });\n    };\n\n    var beginFn = function beginFn() {\n      if ('webkitPresentationMode' in this.el_ && this.el_.webkitPresentationMode !== 'picture-in-picture') {\n        this.one('webkitendfullscreen', endFn);\n\n        this.trigger('fullscreenchange', { isFullscreen: true });\n      }\n    };\n\n    this.on('webkitbeginfullscreen', beginFn);\n    this.on('dispose', function () {\n      _this6.off('webkitbeginfullscreen', beginFn);\n      _this6.off('webkitendfullscreen', endFn);\n    });\n  };\n\n  /**\n   * Check if fullscreen is supported on the current playback device.\n   *\n   * @return {boolean}\n   *         - True if fullscreen is supported.\n   *         - False if fullscreen is not supported.\n   */\n\n\n  Html5.prototype.supportsFullScreen = function supportsFullScreen() {\n    if (typeof this.el_.webkitEnterFullScreen === 'function') {\n      var userAgent = window$1.navigator && window$1.navigator.userAgent || '';\n\n      // Seems to be broken in Chromium/Chrome && Safari in Leopard\n      if (/Android/.test(userAgent) || !/Chrome|Mac OS X 10.5/.test(userAgent)) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  /**\n   * Request that the `HTML5` Tech enter fullscreen.\n   */\n\n\n  Html5.prototype.enterFullScreen = function enterFullScreen() {\n    var video = this.el_;\n\n    if (video.paused && video.networkState <= video.HAVE_METADATA) {\n      // attempt to prime the video element for programmatic access\n      // this isn't necessary on the desktop but shouldn't hurt\n      this.el_.play();\n\n      // playing and pausing synchronously during the transition to fullscreen\n      // can get iOS ~6.1 devices into a play/pause loop\n      this.setTimeout(function () {\n        video.pause();\n        video.webkitEnterFullScreen();\n      }, 0);\n    } else {\n      video.webkitEnterFullScreen();\n    }\n  };\n\n  /**\n   * Request that the `HTML5` Tech exit fullscreen.\n   */\n\n\n  Html5.prototype.exitFullScreen = function exitFullScreen() {\n    this.el_.webkitExitFullScreen();\n  };\n\n  /**\n   * A getter/setter for the `Html5` Tech's source object.\n   * > Note: Please use {@link Html5#setSource}\n   *\n   * @param {Tech~SourceObject} [src]\n   *        The source object you want to set on the `HTML5` techs element.\n   *\n   * @return {Tech~SourceObject|undefined}\n   *         - The current source object when a source is not passed in.\n   *         - undefined when setting\n   *\n   * @deprecated Since version 5.\n   */\n\n\n  Html5.prototype.src = function src(_src) {\n    if (_src === undefined) {\n      return this.el_.src;\n    }\n\n    // Setting src through `src` instead of `setSrc` will be deprecated\n    this.setSrc(_src);\n  };\n\n  /**\n   * Reset the tech by removing all sources and then calling\n   * {@link Html5.resetMediaElement}.\n   */\n\n\n  Html5.prototype.reset = function reset() {\n    Html5.resetMediaElement(this.el_);\n  };\n\n  /**\n   * Get the current source on the `HTML5` Tech. Falls back to returning the source from\n   * the HTML5 media element.\n   *\n   * @return {Tech~SourceObject}\n   *         The current source object from the HTML5 tech. With a fallback to the\n   *         elements source.\n   */\n\n\n  Html5.prototype.currentSrc = function currentSrc() {\n    if (this.currentSource_) {\n      return this.currentSource_.src;\n    }\n    return this.el_.currentSrc;\n  };\n\n  /**\n   * Set controls attribute for the HTML5 media Element.\n   *\n   * @param {string} val\n   *        Value to set the controls attribute to\n   */\n\n\n  Html5.prototype.setControls = function setControls(val) {\n    this.el_.controls = !!val;\n  };\n\n  /**\n   * Create and returns a remote {@link TextTrack} object.\n   *\n   * @param {string} kind\n   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)\n   *\n   * @param {string} [label]\n   *        Label to identify the text track\n   *\n   * @param {string} [language]\n   *        Two letter language abbreviation\n   *\n   * @return {TextTrack}\n   *         The TextTrack that gets created.\n   */\n\n\n  Html5.prototype.addTextTrack = function addTextTrack(kind, label, language) {\n    if (!this.featuresNativeTextTracks) {\n      return _Tech.prototype.addTextTrack.call(this, kind, label, language);\n    }\n\n    return this.el_.addTextTrack(kind, label, language);\n  };\n\n  /**\n   * Creates either native TextTrack or an emulated TextTrack depending\n   * on the value of `featuresNativeTextTracks`\n   *\n   * @param {Object} options\n   *        The object should contain the options to initialize the TextTrack with.\n   *\n   * @param {string} [options.kind]\n   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).\n   *\n   * @param {string} [options.label]\n   *        Label to identify the text track\n   *\n   * @param {string} [options.language]\n   *        Two letter language abbreviation.\n   *\n   * @param {boolean} [options.default]\n   *        Default this track to on.\n   *\n   * @param {string} [options.id]\n   *        The internal id to assign this track.\n   *\n   * @param {string} [options.src]\n   *        A source url for the track.\n   *\n   * @return {HTMLTrackElement}\n   *         The track element that gets created.\n   */\n\n\n  Html5.prototype.createRemoteTextTrack = function createRemoteTextTrack(options) {\n    if (!this.featuresNativeTextTracks) {\n      return _Tech.prototype.createRemoteTextTrack.call(this, options);\n    }\n    var htmlTrackElement = document.createElement('track');\n\n    if (options.kind) {\n      htmlTrackElement.kind = options.kind;\n    }\n    if (options.label) {\n      htmlTrackElement.label = options.label;\n    }\n    if (options.language || options.srclang) {\n      htmlTrackElement.srclang = options.language || options.srclang;\n    }\n    if (options.default) {\n      htmlTrackElement.default = options.default;\n    }\n    if (options.id) {\n      htmlTrackElement.id = options.id;\n    }\n    if (options.src) {\n      htmlTrackElement.src = options.src;\n    }\n\n    return htmlTrackElement;\n  };\n\n  /**\n   * Creates a remote text track object and returns an html track element.\n   *\n   * @param {Object} options The object should contain values for\n   * kind, language, label, and src (location of the WebVTT file)\n   * @param {Boolean} [manualCleanup=true] if set to false, the TextTrack will be\n   * automatically removed from the video element whenever the source changes\n   * @return {HTMLTrackElement} An Html Track Element.\n   * This can be an emulated {@link HTMLTrackElement} or a native one.\n   * @deprecated The default value of the \"manualCleanup\" parameter will default\n   * to \"false\" in upcoming versions of Video.js\n   */\n\n\n  Html5.prototype.addRemoteTextTrack = function addRemoteTextTrack(options, manualCleanup) {\n    var htmlTrackElement = _Tech.prototype.addRemoteTextTrack.call(this, options, manualCleanup);\n\n    if (this.featuresNativeTextTracks) {\n      this.el().appendChild(htmlTrackElement);\n    }\n\n    return htmlTrackElement;\n  };\n\n  /**\n   * Remove remote `TextTrack` from `TextTrackList` object\n   *\n   * @param {TextTrack} track\n   *        `TextTrack` object to remove\n   */\n\n\n  Html5.prototype.removeRemoteTextTrack = function removeRemoteTextTrack(track) {\n    _Tech.prototype.removeRemoteTextTrack.call(this, track);\n\n    if (this.featuresNativeTextTracks) {\n      var tracks = this.$$('track');\n\n      var i = tracks.length;\n\n      while (i--) {\n        if (track === tracks[i] || track === tracks[i].track) {\n          this.el().removeChild(tracks[i]);\n        }\n      }\n    }\n  };\n\n  /**\n   * Gets available media playback quality metrics as specified by the W3C's Media\n   * Playback Quality API.\n   *\n   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}\n   *\n   * @return {Object}\n   *         An object with supported media playback quality metrics\n   */\n\n\n  Html5.prototype.getVideoPlaybackQuality = function getVideoPlaybackQuality() {\n    if (typeof this.el().getVideoPlaybackQuality === 'function') {\n      return this.el().getVideoPlaybackQuality();\n    }\n\n    var videoPlaybackQuality = {};\n\n    if (typeof this.el().webkitDroppedFrameCount !== 'undefined' && typeof this.el().webkitDecodedFrameCount !== 'undefined') {\n      videoPlaybackQuality.droppedVideoFrames = this.el().webkitDroppedFrameCount;\n      videoPlaybackQuality.totalVideoFrames = this.el().webkitDecodedFrameCount;\n    }\n\n    if (window$1.performance && typeof window$1.performance.now === 'function') {\n      videoPlaybackQuality.creationTime = window$1.performance.now();\n    } else if (window$1.performance && window$1.performance.timing && typeof window$1.performance.timing.navigationStart === 'number') {\n      videoPlaybackQuality.creationTime = window$1.Date.now() - window$1.performance.timing.navigationStart;\n    }\n\n    return videoPlaybackQuality;\n  };\n\n  return Html5;\n}(Tech);\n\n/* HTML5 Support Testing ---------------------------------------------------- */\n\nif (isReal()) {\n\n  /**\n   * Element for testing browser HTML5 media capabilities\n   *\n   * @type {Element}\n   * @constant\n   * @private\n   */\n  Html5.TEST_VID = document.createElement('video');\n  var track = document.createElement('track');\n\n  track.kind = 'captions';\n  track.srclang = 'en';\n  track.label = 'English';\n  Html5.TEST_VID.appendChild(track);\n}\n\n/**\n * Check if HTML5 media is supported by this browser/device.\n *\n * @return {boolean}\n *         - True if HTML5 media is supported.\n *         - False if HTML5 media is not supported.\n */\nHtml5.isSupported = function () {\n  // IE with no Media Player is a LIAR! (#984)\n  try {\n    Html5.TEST_VID.volume = 0.5;\n  } catch (e) {\n    return false;\n  }\n\n  return !!(Html5.TEST_VID && Html5.TEST_VID.canPlayType);\n};\n\n/**\n * Check if the tech can support the given type\n *\n * @param {string} type\n *        The mimetype to check\n * @return {string} 'probably', 'maybe', or '' (empty string)\n */\nHtml5.canPlayType = function (type) {\n  return Html5.TEST_VID.canPlayType(type);\n};\n\n/**\n * Check if the tech can support the given source\n * @param {Object} srcObj\n *        The source object\n * @param {Object} options\n *        The options passed to the tech\n * @return {string} 'probably', 'maybe', or '' (empty string)\n */\nHtml5.canPlaySource = function (srcObj, options) {\n  return Html5.canPlayType(srcObj.type);\n};\n\n/**\n * Check if the volume can be changed in this browser/device.\n * Volume cannot be changed in a lot of mobile devices.\n * Specifically, it can't be changed from 1 on iOS.\n *\n * @return {boolean}\n *         - True if volume can be controlled\n *         - False otherwise\n */\nHtml5.canControlVolume = function () {\n  // IE will error if Windows Media Player not installed #3315\n  try {\n    var volume = Html5.TEST_VID.volume;\n\n    Html5.TEST_VID.volume = volume / 2 + 0.1;\n    return volume !== Html5.TEST_VID.volume;\n  } catch (e) {\n    return false;\n  }\n};\n\n/**\n * Check if the volume can be muted in this browser/device.\n * Some devices, e.g. iOS, don't allow changing volume\n * but permits muting/unmuting.\n *\n * @return {bolean}\n *      - True if volume can be muted\n *      - False otherwise\n */\nHtml5.canMuteVolume = function () {\n  try {\n    var muted = Html5.TEST_VID.muted;\n\n    // in some versions of iOS muted property doesn't always\n    // work, so we want to set both property and attribute\n    Html5.TEST_VID.muted = !muted;\n    if (Html5.TEST_VID.muted) {\n      setAttribute(Html5.TEST_VID, 'muted', 'muted');\n    } else {\n      removeAttribute(Html5.TEST_VID, 'muted', 'muted');\n    }\n    return muted !== Html5.TEST_VID.muted;\n  } catch (e) {\n    return false;\n  }\n};\n\n/**\n * Check if the playback rate can be changed in this browser/device.\n *\n * @return {boolean}\n *         - True if playback rate can be controlled\n *         - False otherwise\n */\nHtml5.canControlPlaybackRate = function () {\n  // Playback rate API is implemented in Android Chrome, but doesn't do anything\n  // https://github.com/videojs/video.js/issues/3180\n  if (IS_ANDROID && IS_CHROME && CHROME_VERSION < 58) {\n    return false;\n  }\n  // IE will error if Windows Media Player not installed #3315\n  try {\n    var playbackRate = Html5.TEST_VID.playbackRate;\n\n    Html5.TEST_VID.playbackRate = playbackRate / 2 + 0.1;\n    return playbackRate !== Html5.TEST_VID.playbackRate;\n  } catch (e) {\n    return false;\n  }\n};\n\n/**\n * Check if we can override a video/audio elements attributes, with\n * Object.defineProperty.\n *\n * @return {boolean}\n *         - True if builtin attributes can be overridden\n *         - False otherwise\n */\nHtml5.canOverrideAttributes = function () {\n  // if we cannot overwrite the src/innerHTML property, there is no support\n  // iOS 7 safari for instance cannot do this.\n  try {\n    var noop = function noop() {};\n\n    Object.defineProperty(document.createElement('video'), 'src', { get: noop, set: noop });\n    Object.defineProperty(document.createElement('audio'), 'src', { get: noop, set: noop });\n    Object.defineProperty(document.createElement('video'), 'innerHTML', { get: noop, set: noop });\n    Object.defineProperty(document.createElement('audio'), 'innerHTML', { get: noop, set: noop });\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * Check to see if native `TextTrack`s are supported by this browser/device.\n *\n * @return {boolean}\n *         - True if native `TextTrack`s are supported.\n *         - False otherwise\n */\nHtml5.supportsNativeTextTracks = function () {\n  return IS_ANY_SAFARI || IS_IOS && IS_CHROME;\n};\n\n/**\n * Check to see if native `VideoTrack`s are supported by this browser/device\n *\n * @return {boolean}\n *        - True if native `VideoTrack`s are supported.\n *        - False otherwise\n */\nHtml5.supportsNativeVideoTracks = function () {\n  return !!(Html5.TEST_VID && Html5.TEST_VID.videoTracks);\n};\n\n/**\n * Check to see if native `AudioTrack`s are supported by this browser/device\n *\n * @return {boolean}\n *        - True if native `AudioTrack`s are supported.\n *        - False otherwise\n */\nHtml5.supportsNativeAudioTracks = function () {\n  return !!(Html5.TEST_VID && Html5.TEST_VID.audioTracks);\n};\n\n/**\n * An array of events available on the Html5 tech.\n *\n * @private\n * @type {Array}\n */\nHtml5.Events = ['loadstart', 'suspend', 'abort', 'error', 'emptied', 'stalled', 'loadedmetadata', 'loadeddata', 'canplay', 'canplaythrough', 'playing', 'waiting', 'seeking', 'seeked', 'ended', 'durationchange', 'timeupdate', 'progress', 'play', 'pause', 'ratechange', 'resize', 'volumechange'];\n\n/**\n * Boolean indicating whether the `Tech` supports volume control.\n *\n * @type {boolean}\n * @default {@link Html5.canControlVolume}\n */\nHtml5.prototype.featuresVolumeControl = Html5.canControlVolume();\n\n/**\n * Boolean indicating whether the `Tech` supports muting volume.\n *\n * @type {bolean}\n * @default {@link Html5.canMuteVolume}\n */\nHtml5.prototype.featuresMuteControl = Html5.canMuteVolume();\n\n/**\n * Boolean indicating whether the `Tech` supports changing the speed at which the media\n * plays. Examples:\n *   - Set player to play 2x (twice) as fast\n *   - Set player to play 0.5x (half) as fast\n *\n * @type {boolean}\n * @default {@link Html5.canControlPlaybackRate}\n */\nHtml5.prototype.featuresPlaybackRate = Html5.canControlPlaybackRate();\n\n/**\n * Boolean indicating whether the `Tech` supports the `sourceset` event.\n *\n * @type {boolean}\n * @default\n */\nHtml5.prototype.featuresSourceset = Html5.canOverrideAttributes();\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports the media element\n * moving in the DOM. iOS breaks if you move the media element, so this is set this to\n * false there. Everywhere else this should be true.\n *\n * @type {boolean}\n * @default\n */\nHtml5.prototype.movingMediaElementInDOM = !IS_IOS;\n\n// TODO: Previous comment: No longer appears to be used. Can probably be removed.\n//       Is this true?\n/**\n * Boolean indicating whether the `HTML5` tech currently supports automatic media resize\n * when going into fullscreen.\n *\n * @type {boolean}\n * @default\n */\nHtml5.prototype.featuresFullscreenResize = true;\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports the progress event.\n * If this is false, manual `progress` events will be triggered instead.\n *\n * @type {boolean}\n * @default\n */\nHtml5.prototype.featuresProgressEvents = true;\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports the timeupdate event.\n * If this is false, manual `timeupdate` events will be triggered instead.\n *\n * @default\n */\nHtml5.prototype.featuresTimeupdateEvents = true;\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports native `TextTrack`s.\n *\n * @type {boolean}\n * @default {@link Html5.supportsNativeTextTracks}\n */\nHtml5.prototype.featuresNativeTextTracks = Html5.supportsNativeTextTracks();\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports native `VideoTrack`s.\n *\n * @type {boolean}\n * @default {@link Html5.supportsNativeVideoTracks}\n */\nHtml5.prototype.featuresNativeVideoTracks = Html5.supportsNativeVideoTracks();\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports native `AudioTrack`s.\n *\n * @type {boolean}\n * @default {@link Html5.supportsNativeAudioTracks}\n */\nHtml5.prototype.featuresNativeAudioTracks = Html5.supportsNativeAudioTracks();\n\n// HTML5 Feature detection and Device Fixes --------------------------------- //\nvar canPlayType = Html5.TEST_VID && Html5.TEST_VID.constructor.prototype.canPlayType;\nvar mpegurlRE = /^application\\/(?:x-|vnd\\.apple\\.)mpegurl/i;\n\nHtml5.patchCanPlayType = function () {\n\n  // Android 4.0 and above can play HLS to some extent but it reports being unable to do so\n  // Firefox and Chrome report correctly\n  if (ANDROID_VERSION >= 4.0 && !IS_FIREFOX && !IS_CHROME) {\n    Html5.TEST_VID.constructor.prototype.canPlayType = function (type) {\n      if (type && mpegurlRE.test(type)) {\n        return 'maybe';\n      }\n      return canPlayType.call(this, type);\n    };\n  }\n};\n\nHtml5.unpatchCanPlayType = function () {\n  var r = Html5.TEST_VID.constructor.prototype.canPlayType;\n\n  Html5.TEST_VID.constructor.prototype.canPlayType = canPlayType;\n  return r;\n};\n\n// by default, patch the media element\nHtml5.patchCanPlayType();\n\nHtml5.disposeMediaElement = function (el) {\n  if (!el) {\n    return;\n  }\n\n  if (el.parentNode) {\n    el.parentNode.removeChild(el);\n  }\n\n  // remove any child track or source nodes to prevent their loading\n  while (el.hasChildNodes()) {\n    el.removeChild(el.firstChild);\n  }\n\n  // remove any src reference. not setting `src=''` because that causes a warning\n  // in firefox\n  el.removeAttribute('src');\n\n  // force the media element to update its loading state by calling load()\n  // however IE on Windows 7N has a bug that throws an error so need a try/catch (#793)\n  if (typeof el.load === 'function') {\n    // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)\n    (function () {\n      try {\n        el.load();\n      } catch (e) {\n        // not supported\n      }\n    })();\n  }\n};\n\nHtml5.resetMediaElement = function (el) {\n  if (!el) {\n    return;\n  }\n\n  var sources = el.querySelectorAll('source');\n  var i = sources.length;\n\n  while (i--) {\n    el.removeChild(sources[i]);\n  }\n\n  // remove any src reference.\n  // not setting `src=''` because that throws an error\n  el.removeAttribute('src');\n\n  if (typeof el.load === 'function') {\n    // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)\n    (function () {\n      try {\n        el.load();\n      } catch (e) {\n        // satisfy linter\n      }\n    })();\n  }\n};\n\n/* Native HTML5 element property wrapping ----------------------------------- */\n// Wrap native boolean attributes with getters that check both property and attribute\n// The list is as followed:\n// muted, defaultMuted, autoplay, controls, loop, playsinline\n[\n/**\n * Get the value of `muted` from the media element. `muted` indicates\n * that the volume for the media should be set to silent. This does not actually change\n * the `volume` attribute.\n *\n * @method Html5#muted\n * @return {boolean}\n *         - True if the value of `volume` should be ignored and the audio set to silent.\n *         - False if the value of `volume` should be used.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}\n */\n'muted',\n\n/**\n * Get the value of `defaultMuted` from the media element. `defaultMuted` indicates\n * whether the media should start muted or not. Only changes the default state of the\n * media. `muted` and `defaultMuted` can have different values. {@link Html5#muted} indicates the\n * current state.\n *\n * @method Html5#defaultMuted\n * @return {boolean}\n *         - The value of `defaultMuted` from the media element.\n *         - True indicates that the media should start muted.\n *         - False indicates that the media should not start muted\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}\n */\n'defaultMuted',\n\n/**\n * Get the value of `autoplay` from the media element. `autoplay` indicates\n * that the media should start to play as soon as the page is ready.\n *\n * @method Html5#autoplay\n * @return {boolean}\n *         - The value of `autoplay` from the media element.\n *         - True indicates that the media should start as soon as the page loads.\n *         - False indicates that the media should not start as soon as the page loads.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}\n */\n'autoplay',\n\n/**\n * Get the value of `controls` from the media element. `controls` indicates\n * whether the native media controls should be shown or hidden.\n *\n * @method Html5#controls\n * @return {boolean}\n *         - The value of `controls` from the media element.\n *         - True indicates that native controls should be showing.\n *         - False indicates that native controls should be hidden.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-controls}\n */\n'controls',\n\n/**\n * Get the value of `loop` from the media element. `loop` indicates\n * that the media should return to the start of the media and continue playing once\n * it reaches the end.\n *\n * @method Html5#loop\n * @return {boolean}\n *         - The value of `loop` from the media element.\n *         - True indicates that playback should seek back to start once\n *           the end of a media is reached.\n *         - False indicates that playback should not loop back to the start when the\n *           end of the media is reached.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}\n */\n'loop',\n\n/**\n * Get the value of `playsinline` from the media element. `playsinline` indicates\n * to the browser that non-fullscreen playback is preferred when fullscreen\n * playback is the native default, such as in iOS Safari.\n *\n * @method Html5#playsinline\n * @return {boolean}\n *         - The value of `playsinline` from the media element.\n *         - True indicates that the media should play inline.\n *         - False indicates that the media should not play inline.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}\n */\n'playsinline'].forEach(function (prop) {\n  Html5.prototype[prop] = function () {\n    return this.el_[prop] || this.el_.hasAttribute(prop);\n  };\n});\n\n// Wrap native boolean attributes with setters that set both property and attribute\n// The list is as followed:\n// setMuted, setDefaultMuted, setAutoplay, setLoop, setPlaysinline\n// setControls is special-cased above\n[\n/**\n * Set the value of `muted` on the media element. `muted` indicates that the current\n * audio level should be silent.\n *\n * @method Html5#setMuted\n * @param {boolean} muted\n *        - True if the audio should be set to silent\n *        - False otherwise\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}\n */\n'muted',\n\n/**\n * Set the value of `defaultMuted` on the media element. `defaultMuted` indicates that the current\n * audio level should be silent, but will only effect the muted level on intial playback..\n *\n * @method Html5.prototype.setDefaultMuted\n * @param {boolean} defaultMuted\n *        - True if the audio should be set to silent\n *        - False otherwise\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}\n */\n'defaultMuted',\n\n/**\n * Set the value of `autoplay` on the media element. `autoplay` indicates\n * that the media should start to play as soon as the page is ready.\n *\n * @method Html5#setAutoplay\n * @param {boolean} autoplay\n *         - True indicates that the media should start as soon as the page loads.\n *         - False indicates that the media should not start as soon as the page loads.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}\n */\n'autoplay',\n\n/**\n * Set the value of `loop` on the media element. `loop` indicates\n * that the media should return to the start of the media and continue playing once\n * it reaches the end.\n *\n * @method Html5#setLoop\n * @param {boolean} loop\n *         - True indicates that playback should seek back to start once\n *           the end of a media is reached.\n *         - False indicates that playback should not loop back to the start when the\n *           end of the media is reached.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}\n */\n'loop',\n\n/**\n * Set the value of `playsinline` from the media element. `playsinline` indicates\n * to the browser that non-fullscreen playback is preferred when fullscreen\n * playback is the native default, such as in iOS Safari.\n *\n * @method Html5#setPlaysinline\n * @param {boolean} playsinline\n *         - True indicates that the media should play inline.\n *         - False indicates that the media should not play inline.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}\n */\n'playsinline'].forEach(function (prop) {\n  Html5.prototype['set' + toTitleCase(prop)] = function (v) {\n    this.el_[prop] = v;\n\n    if (v) {\n      this.el_.setAttribute(prop, prop);\n    } else {\n      this.el_.removeAttribute(prop);\n    }\n  };\n});\n\n// Wrap native properties with a getter\n// The list is as followed\n// paused, currentTime, buffered, volume, poster, preload, error, seeking\n// seekable, ended, playbackRate, defaultPlaybackRate, played, networkState\n// readyState, videoWidth, videoHeight\n[\n/**\n * Get the value of `paused` from the media element. `paused` indicates whether the media element\n * is currently paused or not.\n *\n * @method Html5#paused\n * @return {boolean}\n *         The value of `paused` from the media element.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-paused}\n */\n'paused',\n\n/**\n * Get the value of `currentTime` from the media element. `currentTime` indicates\n * the current second that the media is at in playback.\n *\n * @method Html5#currentTime\n * @return {number}\n *         The value of `currentTime` from the media element.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-currenttime}\n */\n'currentTime',\n\n/**\n * Get the value of `buffered` from the media element. `buffered` is a `TimeRange`\n * object that represents the parts of the media that are already downloaded and\n * available for playback.\n *\n * @method Html5#buffered\n * @return {TimeRange}\n *         The value of `buffered` from the media element.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-buffered}\n */\n'buffered',\n\n/**\n * Get the value of `volume` from the media element. `volume` indicates\n * the current playback volume of audio for a media. `volume` will be a value from 0\n * (silent) to 1 (loudest and default).\n *\n * @method Html5#volume\n * @return {number}\n *         The value of `volume` from the media element. Value will be between 0-1.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}\n */\n'volume',\n\n/**\n * Get the value of `poster` from the media element. `poster` indicates\n * that the url of an image file that can/will be shown when no media data is available.\n *\n * @method Html5#poster\n * @return {string}\n *         The value of `poster` from the media element. Value will be a url to an\n *         image.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-video-poster}\n */\n'poster',\n\n/**\n * Get the value of `preload` from the media element. `preload` indicates\n * what should download before the media is interacted with. It can have the following\n * values:\n * - none: nothing should be downloaded\n * - metadata: poster and the first few frames of the media may be downloaded to get\n *   media dimensions and other metadata\n * - auto: allow the media and metadata for the media to be downloaded before\n *    interaction\n *\n * @method Html5#preload\n * @return {string}\n *         The value of `preload` from the media element. Will be 'none', 'metadata',\n *         or 'auto'.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}\n */\n'preload',\n\n/**\n * Get the value of the `error` from the media element. `error` indicates any\n * MediaError that may have occurred during playback. If error returns null there is no\n * current error.\n *\n * @method Html5#error\n * @return {MediaError|null}\n *         The value of `error` from the media element. Will be `MediaError` if there\n *         is a current error and null otherwise.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-error}\n */\n'error',\n\n/**\n * Get the value of `seeking` from the media element. `seeking` indicates whether the\n * media is currently seeking to a new position or not.\n *\n * @method Html5#seeking\n * @return {boolean}\n *         - The value of `seeking` from the media element.\n *         - True indicates that the media is currently seeking to a new position.\n *         - False indicates that the media is not seeking to a new position at this time.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seeking}\n */\n'seeking',\n\n/**\n * Get the value of `seekable` from the media element. `seekable` returns a\n * `TimeRange` object indicating ranges of time that can currently be `seeked` to.\n *\n * @method Html5#seekable\n * @return {TimeRange}\n *         The value of `seekable` from the media element. A `TimeRange` object\n *         indicating the current ranges of time that can be seeked to.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seekable}\n */\n'seekable',\n\n/**\n * Get the value of `ended` from the media element. `ended` indicates whether\n * the media has reached the end or not.\n *\n * @method Html5#ended\n * @return {boolean}\n *         - The value of `ended` from the media element.\n *         - True indicates that the media has ended.\n *         - False indicates that the media has not ended.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-ended}\n */\n'ended',\n\n/**\n * Get the value of `playbackRate` from the media element. `playbackRate` indicates\n * the rate at which the media is currently playing back. Examples:\n *   - if playbackRate is set to 2, media will play twice as fast.\n *   - if playbackRate is set to 0.5, media will play half as fast.\n *\n * @method Html5#playbackRate\n * @return {number}\n *         The value of `playbackRate` from the media element. A number indicating\n *         the current playback speed of the media, where 1 is normal speed.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}\n */\n'playbackRate',\n\n/**\n * Get the value of `defaultPlaybackRate` from the media element. `defaultPlaybackRate` indicates\n * the rate at which the media is currently playing back. This value will not indicate the current\n * `playbackRate` after playback has started, use {@link Html5#playbackRate} for that.\n *\n * Examples:\n *   - if defaultPlaybackRate is set to 2, media will play twice as fast.\n *   - if defaultPlaybackRate is set to 0.5, media will play half as fast.\n *\n * @method Html5.prototype.defaultPlaybackRate\n * @return {number}\n *         The value of `defaultPlaybackRate` from the media element. A number indicating\n *         the current playback speed of the media, where 1 is normal speed.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}\n */\n'defaultPlaybackRate',\n\n/**\n * Get the value of `played` from the media element. `played` returns a `TimeRange`\n * object representing points in the media timeline that have been played.\n *\n * @method Html5#played\n * @return {TimeRange}\n *         The value of `played` from the media element. A `TimeRange` object indicating\n *         the ranges of time that have been played.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-played}\n */\n'played',\n\n/**\n * Get the value of `networkState` from the media element. `networkState` indicates\n * the current network state. It returns an enumeration from the following list:\n * - 0: NETWORK_EMPTY\n * - 1: NETWORK_IDLE\n * - 2: NETWORK_LOADING\n * - 3: NETWORK_NO_SOURCE\n *\n * @method Html5#networkState\n * @return {number}\n *         The value of `networkState` from the media element. This will be a number\n *         from the list in the description.\n *\n * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-networkstate}\n */\n'networkState',\n\n/**\n * Get the value of `readyState` from the media element. `readyState` indicates\n * the current state of the media element. It returns an enumeration from the\n * following list:\n * - 0: HAVE_NOTHING\n * - 1: HAVE_METADATA\n * - 2: HAVE_CURRENT_DATA\n * - 3: HAVE_FUTURE_DATA\n * - 4: HAVE_ENOUGH_DATA\n *\n * @method Html5#readyState\n * @return {number}\n *         The value of `readyState` from the media element. This will be a number\n *         from the list in the description.\n *\n * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#ready-states}\n */\n'readyState',\n\n/**\n * Get the value of `videoWidth` from the video element. `videoWidth` indicates\n * the current width of the video in css pixels.\n *\n * @method Html5#videoWidth\n * @return {number}\n *         The value of `videoWidth` from the video element. This will be a number\n *         in css pixels.\n *\n * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}\n */\n'videoWidth',\n\n/**\n * Get the value of `videoHeight` from the video element. `videoHeight` indicates\n * the current height of the video in css pixels.\n *\n * @method Html5#videoHeight\n * @return {number}\n *         The value of `videoHeight` from the video element. This will be a number\n *         in css pixels.\n *\n * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}\n */\n'videoHeight'].forEach(function (prop) {\n  Html5.prototype[prop] = function () {\n    return this.el_[prop];\n  };\n});\n\n// Wrap native properties with a setter in this format:\n// set + toTitleCase(name)\n// The list is as follows:\n// setVolume, setSrc, setPoster, setPreload, setPlaybackRate, setDefaultPlaybackRate\n[\n/**\n * Set the value of `volume` on the media element. `volume` indicates the current\n * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and\n * so on.\n *\n * @method Html5#setVolume\n * @param {number} percentAsDecimal\n *        The volume percent as a decimal. Valid range is from 0-1.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}\n */\n'volume',\n\n/**\n * Set the value of `src` on the media element. `src` indicates the current\n * {@link Tech~SourceObject} for the media.\n *\n * @method Html5#setSrc\n * @param {Tech~SourceObject} src\n *        The source object to set as the current source.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-src}\n */\n'src',\n\n/**\n * Set the value of `poster` on the media element. `poster` is the url to\n * an image file that can/will be shown when no media data is available.\n *\n * @method Html5#setPoster\n * @param {string} poster\n *        The url to an image that should be used as the `poster` for the media\n *        element.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-poster}\n */\n'poster',\n\n/**\n * Set the value of `preload` on the media element. `preload` indicates\n * what should download before the media is interacted with. It can have the following\n * values:\n * - none: nothing should be downloaded\n * - metadata: poster and the first few frames of the media may be downloaded to get\n *   media dimensions and other metadata\n * - auto: allow the media and metadata for the media to be downloaded before\n *    interaction\n *\n * @method Html5#setPreload\n * @param {string} preload\n *         The value of `preload` to set on the media element. Must be 'none', 'metadata',\n *         or 'auto'.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}\n */\n'preload',\n\n/**\n * Set the value of `playbackRate` on the media element. `playbackRate` indicates\n * the rate at which the media should play back. Examples:\n *   - if playbackRate is set to 2, media will play twice as fast.\n *   - if playbackRate is set to 0.5, media will play half as fast.\n *\n * @method Html5#setPlaybackRate\n * @return {number}\n *         The value of `playbackRate` from the media element. A number indicating\n *         the current playback speed of the media, where 1 is normal speed.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}\n */\n'playbackRate',\n\n/**\n * Set the value of `defaultPlaybackRate` on the media element. `defaultPlaybackRate` indicates\n * the rate at which the media should play back upon initial startup. Changing this value\n * after a video has started will do nothing. Instead you should used {@link Html5#setPlaybackRate}.\n *\n * Example Values:\n *   - if playbackRate is set to 2, media will play twice as fast.\n *   - if playbackRate is set to 0.5, media will play half as fast.\n *\n * @method Html5.prototype.setDefaultPlaybackRate\n * @return {number}\n *         The value of `defaultPlaybackRate` from the media element. A number indicating\n *         the current playback speed of the media, where 1 is normal speed.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultplaybackrate}\n */\n'defaultPlaybackRate'].forEach(function (prop) {\n  Html5.prototype['set' + toTitleCase(prop)] = function (v) {\n    this.el_[prop] = v;\n  };\n});\n\n// wrap native functions with a function\n// The list is as follows:\n// pause, load, play\n[\n/**\n * A wrapper around the media elements `pause` function. This will call the `HTML5`\n * media elements `pause` function.\n *\n * @method Html5#pause\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-pause}\n */\n'pause',\n\n/**\n * A wrapper around the media elements `load` function. This will call the `HTML5`s\n * media element `load` function.\n *\n * @method Html5#load\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-load}\n */\n'load',\n\n/**\n * A wrapper around the media elements `play` function. This will call the `HTML5`s\n * media element `play` function.\n *\n * @method Html5#play\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-play}\n */\n'play'].forEach(function (prop) {\n  Html5.prototype[prop] = function () {\n    return this.el_[prop]();\n  };\n});\n\nTech.withSourceHandlers(Html5);\n\n/**\n * Native source handler for Html5, simply passes the source to the media element.\n *\n * @property {Tech~SourceObject} source\n *        The source object\n *\n * @property {Html5} tech\n *        The instance of the HTML5 tech.\n */\nHtml5.nativeSourceHandler = {};\n\n/**\n * Check if the media element can play the given mime type.\n *\n * @param {string} type\n *        The mimetype to check\n *\n * @return {string}\n *         'probably', 'maybe', or '' (empty string)\n */\nHtml5.nativeSourceHandler.canPlayType = function (type) {\n  // IE without MediaPlayer throws an error (#519)\n  try {\n    return Html5.TEST_VID.canPlayType(type);\n  } catch (e) {\n    return '';\n  }\n};\n\n/**\n * Check if the media element can handle a source natively.\n *\n * @param {Tech~SourceObject} source\n *         The source object\n *\n * @param {Object} [options]\n *         Options to be passed to the tech.\n *\n * @return {string}\n *         'probably', 'maybe', or '' (empty string).\n */\nHtml5.nativeSourceHandler.canHandleSource = function (source, options) {\n\n  // If a type was provided we should rely on that\n  if (source.type) {\n    return Html5.nativeSourceHandler.canPlayType(source.type);\n\n    // If no type, fall back to checking 'video/[EXTENSION]'\n  } else if (source.src) {\n    var ext = getFileExtension(source.src);\n\n    return Html5.nativeSourceHandler.canPlayType('video/' + ext);\n  }\n\n  return '';\n};\n\n/**\n * Pass the source to the native media element.\n *\n * @param {Tech~SourceObject} source\n *        The source object\n *\n * @param {Html5} tech\n *        The instance of the Html5 tech\n *\n * @param {Object} [options]\n *        The options to pass to the source\n */\nHtml5.nativeSourceHandler.handleSource = function (source, tech, options) {\n  tech.setSrc(source.src);\n};\n\n/**\n * A noop for the native dispose function, as cleanup is not needed.\n */\nHtml5.nativeSourceHandler.dispose = function () {};\n\n// Register the native source handler\nHtml5.registerSourceHandler(Html5.nativeSourceHandler);\n\nTech.registerTech('Html5', Html5);\n\nvar _templateObject$2 = taggedTemplateLiteralLoose(['\\n        Using the tech directly can be dangerous. I hope you know what you\\'re doing.\\n        See https://github.com/videojs/video.js/issues/2617 for more info.\\n      '], ['\\n        Using the tech directly can be dangerous. I hope you know what you\\'re doing.\\n        See https://github.com/videojs/video.js/issues/2617 for more info.\\n      ']);\n\n// The following tech events are simply re-triggered\n// on the player when they happen\nvar TECH_EVENTS_RETRIGGER = [\n/**\n * Fired while the user agent is downloading media data.\n *\n * @event Player#progress\n * @type {EventTarget~Event}\n */\n/**\n * Retrigger the `progress` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechProgress_\n * @fires Player#progress\n * @listens Tech#progress\n */\n'progress',\n\n/**\n * Fires when the loading of an audio/video is aborted.\n *\n * @event Player#abort\n * @type {EventTarget~Event}\n */\n/**\n * Retrigger the `abort` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechAbort_\n * @fires Player#abort\n * @listens Tech#abort\n */\n'abort',\n\n/**\n * Fires when the browser is intentionally not getting media data.\n *\n * @event Player#suspend\n * @type {EventTarget~Event}\n */\n/**\n * Retrigger the `suspend` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechSuspend_\n * @fires Player#suspend\n * @listens Tech#suspend\n */\n'suspend',\n\n/**\n * Fires when the current playlist is empty.\n *\n * @event Player#emptied\n * @type {EventTarget~Event}\n */\n/**\n * Retrigger the `emptied` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechEmptied_\n * @fires Player#emptied\n * @listens Tech#emptied\n */\n'emptied',\n/**\n * Fires when the browser is trying to get media data, but data is not available.\n *\n * @event Player#stalled\n * @type {EventTarget~Event}\n */\n/**\n * Retrigger the `stalled` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechStalled_\n * @fires Player#stalled\n * @listens Tech#stalled\n */\n'stalled',\n\n/**\n * Fires when the browser has loaded meta data for the audio/video.\n *\n * @event Player#loadedmetadata\n * @type {EventTarget~Event}\n */\n/**\n * Retrigger the `stalled` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechLoadedmetadata_\n * @fires Player#loadedmetadata\n * @listens Tech#loadedmetadata\n */\n'loadedmetadata',\n\n/**\n * Fires when the browser has loaded the current frame of the audio/video.\n *\n * @event Player#loadeddata\n * @type {event}\n */\n/**\n * Retrigger the `loadeddata` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechLoaddeddata_\n * @fires Player#loadeddata\n * @listens Tech#loadeddata\n */\n'loadeddata',\n\n/**\n * Fires when the current playback position has changed.\n *\n * @event Player#timeupdate\n * @type {event}\n */\n/**\n * Retrigger the `timeupdate` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechTimeUpdate_\n * @fires Player#timeupdate\n * @listens Tech#timeupdate\n */\n'timeupdate',\n\n/**\n * Fires when the video's intrinsic dimensions change\n *\n * @event Player#resize\n * @type {event}\n */\n/**\n * Retrigger the `resize` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechResize_\n * @fires Player#resize\n * @listens Tech#resize\n */\n'resize',\n\n/**\n * Fires when the volume has been changed\n *\n * @event Player#volumechange\n * @type {event}\n */\n/**\n * Retrigger the `volumechange` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechVolumechange_\n * @fires Player#volumechange\n * @listens Tech#volumechange\n */\n'volumechange',\n\n/**\n * Fires when the text track has been changed\n *\n * @event Player#texttrackchange\n * @type {event}\n */\n/**\n * Retrigger the `texttrackchange` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechTexttrackchange_\n * @fires Player#texttrackchange\n * @listens Tech#texttrackchange\n */\n'texttrackchange'];\n\n// events to queue when playback rate is zero\n// this is a hash for the sole purpose of mapping non-camel-cased event names\n// to camel-cased function names\nvar TECH_EVENTS_QUEUE = {\n  canplay: 'CanPlay',\n  canplaythrough: 'CanPlayThrough',\n  playing: 'Playing',\n  seeked: 'Seeked'\n};\n\n/**\n * An instance of the `Player` class is created when any of the Video.js setup methods\n * are used to initialize a video.\n *\n * After an instance has been created it can be accessed globally in two ways:\n * 1. By calling `videojs('example_video_1');`\n * 2. By using it directly via  `videojs.players.example_video_1;`\n *\n * @extends Component\n */\n\nvar Player = function (_Component) {\n  inherits(Player, _Component);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Element} tag\n   *        The original video DOM element used for configuring options.\n   *\n   * @param {Object} [options]\n   *        Object of option names and values.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        Ready callback function.\n   */\n  function Player(tag, options, ready) {\n    classCallCheck(this, Player);\n\n    // Make sure tag ID exists\n    tag.id = tag.id || options.id || 'vjs_video_' + newGUID();\n\n    // Set Options\n    // The options argument overrides options set in the video tag\n    // which overrides globally set options.\n    // This latter part coincides with the load order\n    // (tag must exist before Player)\n    options = assign(Player.getTagSettings(tag), options);\n\n    // Delay the initialization of children because we need to set up\n    // player properties first, and can't use `this` before `super()`\n    options.initChildren = false;\n\n    // Same with creating the element\n    options.createEl = false;\n\n    // don't auto mixin the evented mixin\n    options.evented = false;\n\n    // we don't want the player to report touch activity on itself\n    // see enableTouchActivity in Component\n    options.reportTouchActivity = false;\n\n    // If language is not set, get the closest lang attribute\n    if (!options.language) {\n      if (typeof tag.closest === 'function') {\n        var closest = tag.closest('[lang]');\n\n        if (closest && closest.getAttribute) {\n          options.language = closest.getAttribute('lang');\n        }\n      } else {\n        var element = tag;\n\n        while (element && element.nodeType === 1) {\n          if (getAttributes(element).hasOwnProperty('lang')) {\n            options.language = element.getAttribute('lang');\n            break;\n          }\n          element = element.parentNode;\n        }\n      }\n    }\n\n    // Run base component initializing with new options\n\n    // Tracks when a tech changes the poster\n    var _this = possibleConstructorReturn(this, _Component.call(this, null, options, ready));\n\n    _this.isPosterFromTech_ = false;\n\n    // Holds callback info that gets queued when playback rate is zero\n    // and a seek is happening\n    _this.queuedCallbacks_ = [];\n\n    // Turn off API access because we're loading a new tech that might load asynchronously\n    _this.isReady_ = false;\n\n    // Init state hasStarted_\n    _this.hasStarted_ = false;\n\n    // Init state userActive_\n    _this.userActive_ = false;\n\n    // if the global option object was accidentally blown away by\n    // someone, bail early with an informative error\n    if (!_this.options_ || !_this.options_.techOrder || !_this.options_.techOrder.length) {\n      throw new Error('No techOrder specified. Did you overwrite ' + 'videojs.options instead of just changing the ' + 'properties you want to override?');\n    }\n\n    // Store the original tag used to set options\n    _this.tag = tag;\n\n    // Store the tag attributes used to restore html5 element\n    _this.tagAttributes = tag && getAttributes(tag);\n\n    // Update current language\n    _this.language(_this.options_.language);\n\n    // Update Supported Languages\n    if (options.languages) {\n      // Normalise player option languages to lowercase\n      var languagesToLower = {};\n\n      Object.getOwnPropertyNames(options.languages).forEach(function (name$$1) {\n        languagesToLower[name$$1.toLowerCase()] = options.languages[name$$1];\n      });\n      _this.languages_ = languagesToLower;\n    } else {\n      _this.languages_ = Player.prototype.options_.languages;\n    }\n\n    // Cache for video property values.\n    _this.cache_ = {};\n\n    // Set poster\n    _this.poster_ = options.poster || '';\n\n    // Set controls\n    _this.controls_ = !!options.controls;\n\n    // Set default values for lastVolume\n    _this.cache_.lastVolume = 1;\n\n    // Original tag settings stored in options\n    // now remove immediately so native controls don't flash.\n    // May be turned back on by HTML5 tech if nativeControlsForTouch is true\n    tag.controls = false;\n    tag.removeAttribute('controls');\n\n    // the attribute overrides the option\n    if (tag.hasAttribute('autoplay')) {\n      _this.options_.autoplay = true;\n    } else {\n      // otherwise use the setter to validate and\n      // set the correct value.\n      _this.autoplay(_this.options_.autoplay);\n    }\n\n    /*\n     * Store the internal state of scrubbing\n     *\n     * @private\n     * @return {Boolean} True if the user is scrubbing\n     */\n    _this.scrubbing_ = false;\n\n    _this.el_ = _this.createEl();\n\n    // Set default value for lastPlaybackRate\n    _this.cache_.lastPlaybackRate = _this.defaultPlaybackRate();\n\n    // Make this an evented object and use `el_` as its event bus.\n    evented(_this, { eventBusKey: 'el_' });\n\n    // We also want to pass the original player options to each component and plugin\n    // as well so they don't need to reach back into the player for options later.\n    // We also need to do another copy of this.options_ so we don't end up with\n    // an infinite loop.\n    var playerOptionsCopy = mergeOptions(_this.options_);\n\n    // Load plugins\n    if (options.plugins) {\n      var plugins = options.plugins;\n\n      Object.keys(plugins).forEach(function (name$$1) {\n        if (typeof this[name$$1] === 'function') {\n          this[name$$1](plugins[name$$1]);\n        } else {\n          throw new Error('plugin \"' + name$$1 + '\" does not exist');\n        }\n      }, _this);\n    }\n\n    _this.options_.playerOptions = playerOptionsCopy;\n\n    _this.middleware_ = [];\n\n    _this.initChildren();\n\n    // Set isAudio based on whether or not an audio tag was used\n    _this.isAudio(tag.nodeName.toLowerCase() === 'audio');\n\n    // Update controls className. Can't do this when the controls are initially\n    // set because the element doesn't exist yet.\n    if (_this.controls()) {\n      _this.addClass('vjs-controls-enabled');\n    } else {\n      _this.addClass('vjs-controls-disabled');\n    }\n\n    // Set ARIA label and region role depending on player type\n    _this.el_.setAttribute('role', 'region');\n    if (_this.isAudio()) {\n      _this.el_.setAttribute('aria-label', _this.localize('Audio Player'));\n    } else {\n      _this.el_.setAttribute('aria-label', _this.localize('Video Player'));\n    }\n\n    if (_this.isAudio()) {\n      _this.addClass('vjs-audio');\n    }\n\n    if (_this.flexNotSupported_()) {\n      _this.addClass('vjs-no-flex');\n    }\n\n    // TODO: Make this smarter. Toggle user state between touching/mousing\n    // using events, since devices can have both touch and mouse events.\n    // if (browser.TOUCH_ENABLED) {\n    //   this.addClass('vjs-touch-enabled');\n    // }\n\n    // iOS Safari has broken hover handling\n    if (!IS_IOS) {\n      _this.addClass('vjs-workinghover');\n    }\n\n    // Make player easily findable by ID\n    Player.players[_this.id_] = _this;\n\n    // Add a major version class to aid css in plugins\n    var majorVersion = version.split('.')[0];\n\n    _this.addClass('vjs-v' + majorVersion);\n\n    // When the player is first initialized, trigger activity so components\n    // like the control bar show themselves if needed\n    _this.userActive(true);\n    _this.reportUserActivity();\n\n    _this.one('play', _this.listenForUserActivity_);\n    _this.on('fullscreenchange', _this.handleFullscreenChange_);\n    _this.on('stageclick', _this.handleStageClick_);\n\n    _this.changingSrc_ = false;\n    _this.playWaitingForReady_ = false;\n    _this.playOnLoadstart_ = null;\n    return _this;\n  }\n\n  /**\n   * Destroys the video player and does any necessary cleanup.\n   *\n   * This is especially helpful if you are dynamically adding and removing videos\n   * to/from the DOM.\n   *\n   * @fires Player#dispose\n   */\n\n\n  Player.prototype.dispose = function dispose() {\n    /**\n     * Called when the player is being disposed of.\n     *\n     * @event Player#dispose\n     * @type {EventTarget~Event}\n     */\n    this.trigger('dispose');\n    // prevent dispose from being called twice\n    this.off('dispose');\n\n    if (this.styleEl_ && this.styleEl_.parentNode) {\n      this.styleEl_.parentNode.removeChild(this.styleEl_);\n      this.styleEl_ = null;\n    }\n\n    // Kill reference to this player\n    Player.players[this.id_] = null;\n\n    if (this.tag && this.tag.player) {\n      this.tag.player = null;\n    }\n\n    if (this.el_ && this.el_.player) {\n      this.el_.player = null;\n    }\n\n    if (this.tech_) {\n      this.tech_.dispose();\n      this.isPosterFromTech_ = false;\n      this.poster_ = '';\n    }\n\n    if (this.playerElIngest_) {\n      this.playerElIngest_ = null;\n    }\n\n    if (this.tag) {\n      this.tag = null;\n    }\n\n    clearCacheForPlayer(this);\n\n    // the actual .el_ is removed here\n    _Component.prototype.dispose.call(this);\n  };\n\n  /**\n   * Create the `Player`'s DOM element.\n   *\n   * @return {Element}\n   *         The DOM element that gets created.\n   */\n\n\n  Player.prototype.createEl = function createEl$$1() {\n    var tag = this.tag;\n    var el = void 0;\n    var playerElIngest = this.playerElIngest_ = tag.parentNode && tag.parentNode.hasAttribute && tag.parentNode.hasAttribute('data-vjs-player');\n    var divEmbed = this.tag.tagName.toLowerCase() === 'video-js';\n\n    if (playerElIngest) {\n      el = this.el_ = tag.parentNode;\n    } else if (!divEmbed) {\n      el = this.el_ = _Component.prototype.createEl.call(this, 'div');\n    }\n\n    // Copy over all the attributes from the tag, including ID and class\n    // ID will now reference player box, not the video tag\n    var attrs = getAttributes(tag);\n\n    if (divEmbed) {\n      el = this.el_ = tag;\n      tag = this.tag = document.createElement('video');\n      while (el.children.length) {\n        tag.appendChild(el.firstChild);\n      }\n\n      if (!hasClass(el, 'video-js')) {\n        addClass(el, 'video-js');\n      }\n\n      el.appendChild(tag);\n\n      playerElIngest = this.playerElIngest_ = el;\n      // move properties over from our custom `video-js` element\n      // to our new `video` element. This will move things like\n      // `src` or `controls` that were set via js before the player\n      // was initialized.\n      Object.keys(el).forEach(function (k) {\n        tag[k] = el[k];\n      });\n    }\n\n    // set tabindex to -1 to remove the video element from the focus order\n    tag.setAttribute('tabindex', '-1');\n    attrs.tabindex = '-1';\n\n    // Workaround for #4583 (JAWS+IE doesn't announce BPB or play button)\n    // See https://github.com/FreedomScientific/VFO-standards-support/issues/78\n    // Note that we can't detect if JAWS is being used, but this ARIA attribute\n    //  doesn't change behavior of IE11 if JAWS is not being used\n    if (IE_VERSION) {\n      tag.setAttribute('role', 'application');\n      attrs.role = 'application';\n    }\n\n    // Remove width/height attrs from tag so CSS can make it 100% width/height\n    tag.removeAttribute('width');\n    tag.removeAttribute('height');\n\n    if ('width' in attrs) {\n      delete attrs.width;\n    }\n    if ('height' in attrs) {\n      delete attrs.height;\n    }\n\n    Object.getOwnPropertyNames(attrs).forEach(function (attr) {\n      // don't copy over the class attribute to the player element when we're in a div embed\n      // the class is already set up properly in the divEmbed case\n      // and we want to make sure that the `video-js` class doesn't get lost\n      if (!(divEmbed && attr === 'class')) {\n        el.setAttribute(attr, attrs[attr]);\n      }\n\n      if (divEmbed) {\n        tag.setAttribute(attr, attrs[attr]);\n      }\n    });\n\n    // Update tag id/class for use as HTML5 playback tech\n    // Might think we should do this after embedding in container so .vjs-tech class\n    // doesn't flash 100% width/height, but class only applies with .video-js parent\n    tag.playerId = tag.id;\n    tag.id += '_html5_api';\n    tag.className = 'vjs-tech';\n\n    // Make player findable on elements\n    tag.player = el.player = this;\n    // Default state of video is paused\n    this.addClass('vjs-paused');\n\n    // Add a style element in the player that we'll use to set the width/height\n    // of the player in a way that's still overrideable by CSS, just like the\n    // video element\n    if (window$1.VIDEOJS_NO_DYNAMIC_STYLE !== true) {\n      this.styleEl_ = createStyleElement('vjs-styles-dimensions');\n      var defaultsStyleEl = $('.vjs-styles-defaults');\n      var head = $('head');\n\n      head.insertBefore(this.styleEl_, defaultsStyleEl ? defaultsStyleEl.nextSibling : head.firstChild);\n    }\n\n    // Pass in the width/height/aspectRatio options which will update the style el\n    this.width(this.options_.width);\n    this.height(this.options_.height);\n    this.fluid(this.options_.fluid);\n    this.aspectRatio(this.options_.aspectRatio);\n\n    // Hide any links within the video/audio tag,\n    // because IE doesn't hide them completely from screen readers.\n    var links = tag.getElementsByTagName('a');\n\n    for (var i = 0; i < links.length; i++) {\n      var linkEl = links.item(i);\n\n      addClass(linkEl, 'vjs-hidden');\n      linkEl.setAttribute('hidden', 'hidden');\n    }\n\n    // insertElFirst seems to cause the networkState to flicker from 3 to 2, so\n    // keep track of the original for later so we can know if the source originally failed\n    tag.initNetworkState_ = tag.networkState;\n\n    // Wrap video tag in div (el/box) container\n    if (tag.parentNode && !playerElIngest) {\n      tag.parentNode.insertBefore(el, tag);\n    }\n\n    // insert the tag as the first child of the player element\n    // then manually add it to the children array so that this.addChild\n    // will work properly for other components\n    //\n    // Breaks iPhone, fixed in HTML5 setup.\n    prependTo(tag, el);\n    this.children_.unshift(tag);\n\n    // Set lang attr on player to ensure CSS :lang() in consistent with player\n    // if it's been set to something different to the doc\n    this.el_.setAttribute('lang', this.language_);\n\n    this.el_ = el;\n\n    return el;\n  };\n\n  /**\n   * A getter/setter for the `Player`'s width. Returns the player's configured value.\n   * To get the current width use `currentWidth()`.\n   *\n   * @param {number} [value]\n   *        The value to set the `Player`'s width to.\n   *\n   * @return {number}\n   *         The current width of the `Player` when getting.\n   */\n\n\n  Player.prototype.width = function width(value) {\n    return this.dimension('width', value);\n  };\n\n  /**\n   * A getter/setter for the `Player`'s height. Returns the player's configured value.\n   * To get the current height use `currentheight()`.\n   *\n   * @param {number} [value]\n   *        The value to set the `Player`'s heigth to.\n   *\n   * @return {number}\n   *         The current height of the `Player` when getting.\n   */\n\n\n  Player.prototype.height = function height(value) {\n    return this.dimension('height', value);\n  };\n\n  /**\n   * A getter/setter for the `Player`'s width & height.\n   *\n   * @param {string} dimension\n   *        This string can be:\n   *        - 'width'\n   *        - 'height'\n   *\n   * @param {number} [value]\n   *        Value for dimension specified in the first argument.\n   *\n   * @return {number}\n   *         The dimension arguments value when getting (width/height).\n   */\n\n\n  Player.prototype.dimension = function dimension(_dimension, value) {\n    var privDimension = _dimension + '_';\n\n    if (value === undefined) {\n      return this[privDimension] || 0;\n    }\n\n    if (value === '') {\n      // If an empty string is given, reset the dimension to be automatic\n      this[privDimension] = undefined;\n      this.updateStyleEl_();\n      return;\n    }\n\n    var parsedVal = parseFloat(value);\n\n    if (isNaN(parsedVal)) {\n      log$1.error('Improper value \"' + value + '\" supplied for for ' + _dimension);\n      return;\n    }\n\n    this[privDimension] = parsedVal;\n    this.updateStyleEl_();\n  };\n\n  /**\n   * A getter/setter/toggler for the vjs-fluid `className` on the `Player`.\n   *\n   * @param {boolean} [bool]\n   *        - A value of true adds the class.\n   *        - A value of false removes the class.\n   *        - No value will toggle the fluid class.\n   *\n   * @return {boolean|undefined}\n   *         - The value of fluid when getting.\n   *         - `undefined` when setting.\n   */\n\n\n  Player.prototype.fluid = function fluid(bool) {\n    if (bool === undefined) {\n      return !!this.fluid_;\n    }\n\n    this.fluid_ = !!bool;\n\n    if (bool) {\n      this.addClass('vjs-fluid');\n    } else {\n      this.removeClass('vjs-fluid');\n    }\n\n    this.updateStyleEl_();\n  };\n\n  /**\n   * Get/Set the aspect ratio\n   *\n   * @param {string} [ratio]\n   *        Aspect ratio for player\n   *\n   * @return {string|undefined}\n   *         returns the current aspect ratio when getting\n   */\n\n  /**\n   * A getter/setter for the `Player`'s aspect ratio.\n   *\n   * @param {string} [ratio]\n   *        The value to set the `Player's aspect ratio to.\n   *\n   * @return {string|undefined}\n   *         - The current aspect ratio of the `Player` when getting.\n   *         - undefined when setting\n   */\n\n\n  Player.prototype.aspectRatio = function aspectRatio(ratio) {\n    if (ratio === undefined) {\n      return this.aspectRatio_;\n    }\n\n    // Check for width:height format\n    if (!/^\\d+\\:\\d+$/.test(ratio)) {\n      throw new Error('Improper value supplied for aspect ratio. The format should be width:height, for example 16:9.');\n    }\n    this.aspectRatio_ = ratio;\n\n    // We're assuming if you set an aspect ratio you want fluid mode,\n    // because in fixed mode you could calculate width and height yourself.\n    this.fluid(true);\n\n    this.updateStyleEl_();\n  };\n\n  /**\n   * Update styles of the `Player` element (height, width and aspect ratio).\n   *\n   * @private\n   * @listens Tech#loadedmetadata\n   */\n\n\n  Player.prototype.updateStyleEl_ = function updateStyleEl_() {\n    if (window$1.VIDEOJS_NO_DYNAMIC_STYLE === true) {\n      var _width = typeof this.width_ === 'number' ? this.width_ : this.options_.width;\n      var _height = typeof this.height_ === 'number' ? this.height_ : this.options_.height;\n      var techEl = this.tech_ && this.tech_.el();\n\n      if (techEl) {\n        if (_width >= 0) {\n          techEl.width = _width;\n        }\n        if (_height >= 0) {\n          techEl.height = _height;\n        }\n      }\n\n      return;\n    }\n\n    var width = void 0;\n    var height = void 0;\n    var aspectRatio = void 0;\n    var idClass = void 0;\n\n    // The aspect ratio is either used directly or to calculate width and height.\n    if (this.aspectRatio_ !== undefined && this.aspectRatio_ !== 'auto') {\n      // Use any aspectRatio that's been specifically set\n      aspectRatio = this.aspectRatio_;\n    } else if (this.videoWidth() > 0) {\n      // Otherwise try to get the aspect ratio from the video metadata\n      aspectRatio = this.videoWidth() + ':' + this.videoHeight();\n    } else {\n      // Or use a default. The video element's is 2:1, but 16:9 is more common.\n      aspectRatio = '16:9';\n    }\n\n    // Get the ratio as a decimal we can use to calculate dimensions\n    var ratioParts = aspectRatio.split(':');\n    var ratioMultiplier = ratioParts[1] / ratioParts[0];\n\n    if (this.width_ !== undefined) {\n      // Use any width that's been specifically set\n      width = this.width_;\n    } else if (this.height_ !== undefined) {\n      // Or calulate the width from the aspect ratio if a height has been set\n      width = this.height_ / ratioMultiplier;\n    } else {\n      // Or use the video's metadata, or use the video el's default of 300\n      width = this.videoWidth() || 300;\n    }\n\n    if (this.height_ !== undefined) {\n      // Use any height that's been specifically set\n      height = this.height_;\n    } else {\n      // Otherwise calculate the height from the ratio and the width\n      height = width * ratioMultiplier;\n    }\n\n    // Ensure the CSS class is valid by starting with an alpha character\n    if (/^[^a-zA-Z]/.test(this.id())) {\n      idClass = 'dimensions-' + this.id();\n    } else {\n      idClass = this.id() + '-dimensions';\n    }\n\n    // Ensure the right class is still on the player for the style element\n    this.addClass(idClass);\n\n    setTextContent(this.styleEl_, '\\n      .' + idClass + ' {\\n        width: ' + width + 'px;\\n        height: ' + height + 'px;\\n      }\\n\\n      .' + idClass + '.vjs-fluid {\\n        padding-top: ' + ratioMultiplier * 100 + '%;\\n      }\\n    ');\n  };\n\n  /**\n   * Load/Create an instance of playback {@link Tech} including element\n   * and API methods. Then append the `Tech` element in `Player` as a child.\n   *\n   * @param {string} techName\n   *        name of the playback technology\n   *\n   * @param {string} source\n   *        video source\n   *\n   * @private\n   */\n\n\n  Player.prototype.loadTech_ = function loadTech_(techName, source) {\n    var _this2 = this;\n\n    // Pause and remove current playback technology\n    if (this.tech_) {\n      this.unloadTech_();\n    }\n\n    var titleTechName = toTitleCase(techName);\n    var camelTechName = techName.charAt(0).toLowerCase() + techName.slice(1);\n\n    // get rid of the HTML5 video tag as soon as we are using another tech\n    if (titleTechName !== 'Html5' && this.tag) {\n      Tech.getTech('Html5').disposeMediaElement(this.tag);\n      this.tag.player = null;\n      this.tag = null;\n    }\n\n    this.techName_ = titleTechName;\n\n    // Turn off API access because we're loading a new tech that might load asynchronously\n    this.isReady_ = false;\n\n    // if autoplay is a string we pass false to the tech\n    // because the player is going to handle autoplay on `loadstart`\n    var autoplay = typeof this.autoplay() === 'string' ? false : this.autoplay();\n\n    // Grab tech-specific options from player options and add source and parent element to use.\n    var techOptions = {\n      source: source,\n      autoplay: autoplay,\n      'nativeControlsForTouch': this.options_.nativeControlsForTouch,\n      'playerId': this.id(),\n      'techId': this.id() + '_' + camelTechName + '_api',\n      'playsinline': this.options_.playsinline,\n      'preload': this.options_.preload,\n      'loop': this.options_.loop,\n      'muted': this.options_.muted,\n      'poster': this.poster(),\n      'language': this.language(),\n      'playerElIngest': this.playerElIngest_ || false,\n      'vtt.js': this.options_['vtt.js'],\n      'canOverridePoster': !!this.options_.techCanOverridePoster,\n      'enableSourceset': this.options_.enableSourceset\n    };\n\n    ALL.names.forEach(function (name$$1) {\n      var props = ALL[name$$1];\n\n      techOptions[props.getterName] = _this2[props.privateName];\n    });\n\n    assign(techOptions, this.options_[titleTechName]);\n    assign(techOptions, this.options_[camelTechName]);\n    assign(techOptions, this.options_[techName.toLowerCase()]);\n\n    if (this.tag) {\n      techOptions.tag = this.tag;\n    }\n\n    if (source && source.src === this.cache_.src && this.cache_.currentTime > 0) {\n      techOptions.startTime = this.cache_.currentTime;\n    }\n\n    // Initialize tech instance\n    var TechClass = Tech.getTech(techName);\n\n    if (!TechClass) {\n      throw new Error('No Tech named \\'' + titleTechName + '\\' exists! \\'' + titleTechName + '\\' should be registered using videojs.registerTech()\\'');\n    }\n\n    this.tech_ = new TechClass(techOptions);\n\n    // player.triggerReady is always async, so don't need this to be async\n    this.tech_.ready(bind(this, this.handleTechReady_), true);\n\n    textTrackConverter.jsonToTextTracks(this.textTracksJson_ || [], this.tech_);\n\n    // Listen to all HTML5-defined events and trigger them on the player\n    TECH_EVENTS_RETRIGGER.forEach(function (event) {\n      _this2.on(_this2.tech_, event, _this2['handleTech' + toTitleCase(event) + '_']);\n    });\n\n    Object.keys(TECH_EVENTS_QUEUE).forEach(function (event) {\n      _this2.on(_this2.tech_, event, function (eventObj) {\n        if (_this2.tech_.playbackRate() === 0 && _this2.tech_.seeking()) {\n          _this2.queuedCallbacks_.push({\n            callback: _this2['handleTech' + TECH_EVENTS_QUEUE[event] + '_'].bind(_this2),\n            event: eventObj\n          });\n          return;\n        }\n        _this2['handleTech' + TECH_EVENTS_QUEUE[event] + '_'](eventObj);\n      });\n    });\n\n    this.on(this.tech_, 'loadstart', this.handleTechLoadStart_);\n    this.on(this.tech_, 'sourceset', this.handleTechSourceset_);\n    this.on(this.tech_, 'waiting', this.handleTechWaiting_);\n    this.on(this.tech_, 'ended', this.handleTechEnded_);\n    this.on(this.tech_, 'seeking', this.handleTechSeeking_);\n    this.on(this.tech_, 'play', this.handleTechPlay_);\n    this.on(this.tech_, 'firstplay', this.handleTechFirstPlay_);\n    this.on(this.tech_, 'pause', this.handleTechPause_);\n    this.on(this.tech_, 'durationchange', this.handleTechDurationChange_);\n    this.on(this.tech_, 'fullscreenchange', this.handleTechFullscreenChange_);\n    this.on(this.tech_, 'error', this.handleTechError_);\n    this.on(this.tech_, 'loadedmetadata', this.updateStyleEl_);\n    this.on(this.tech_, 'posterchange', this.handleTechPosterChange_);\n    this.on(this.tech_, 'textdata', this.handleTechTextData_);\n    this.on(this.tech_, 'ratechange', this.handleTechRateChange_);\n\n    this.usingNativeControls(this.techGet_('controls'));\n\n    if (this.controls() && !this.usingNativeControls()) {\n      this.addTechControlsListeners_();\n    }\n\n    // Add the tech element in the DOM if it was not already there\n    // Make sure to not insert the original video element if using Html5\n    if (this.tech_.el().parentNode !== this.el() && (titleTechName !== 'Html5' || !this.tag)) {\n      prependTo(this.tech_.el(), this.el());\n    }\n\n    // Get rid of the original video tag reference after the first tech is loaded\n    if (this.tag) {\n      this.tag.player = null;\n      this.tag = null;\n    }\n  };\n\n  /**\n   * Unload and dispose of the current playback {@link Tech}.\n   *\n   * @private\n   */\n\n\n  Player.prototype.unloadTech_ = function unloadTech_() {\n    var _this3 = this;\n\n    // Save the current text tracks so that we can reuse the same text tracks with the next tech\n    ALL.names.forEach(function (name$$1) {\n      var props = ALL[name$$1];\n\n      _this3[props.privateName] = _this3[props.getterName]();\n    });\n    this.textTracksJson_ = textTrackConverter.textTracksToJson(this.tech_);\n\n    this.isReady_ = false;\n\n    this.tech_.dispose();\n\n    this.tech_ = false;\n\n    if (this.isPosterFromTech_) {\n      this.poster_ = '';\n      this.trigger('posterchange');\n    }\n\n    this.isPosterFromTech_ = false;\n  };\n\n  /**\n   * Return a reference to the current {@link Tech}.\n   * It will print a warning by default about the danger of using the tech directly\n   * but any argument that is passed in will silence the warning.\n   *\n   * @param {*} [safety]\n   *        Anything passed in to silence the warning\n   *\n   * @return {Tech}\n   *         The Tech\n   */\n\n\n  Player.prototype.tech = function tech(safety) {\n    if (safety === undefined) {\n      log$1.warn(tsml(_templateObject$2));\n    }\n\n    return this.tech_;\n  };\n\n  /**\n   * Set up click and touch listeners for the playback element\n   *\n   * - On desktops: a click on the video itself will toggle playback\n   * - On mobile devices: a click on the video toggles controls\n   *   which is done by toggling the user state between active and\n   *   inactive\n   * - A tap can signal that a user has become active or has become inactive\n   *   e.g. a quick tap on an iPhone movie should reveal the controls. Another\n   *   quick tap should hide them again (signaling the user is in an inactive\n   *   viewing state)\n   * - In addition to this, we still want the user to be considered inactive after\n   *   a few seconds of inactivity.\n   *\n   * > Note: the only part of iOS interaction we can't mimic with this setup\n   * is a touch and hold on the video element counting as activity in order to\n   * keep the controls showing, but that shouldn't be an issue. A touch and hold\n   * on any controls will still keep the user active\n   *\n   * @private\n   */\n\n\n  Player.prototype.addTechControlsListeners_ = function addTechControlsListeners_() {\n    // Make sure to remove all the previous listeners in case we are called multiple times.\n    this.removeTechControlsListeners_();\n\n    // Some browsers (Chrome & IE) don't trigger a click on a flash swf, but do\n    // trigger mousedown/up.\n    // http://stackoverflow.com/questions/1444562/javascript-onclick-event-over-flash-object\n    // Any touch events are set to block the mousedown event from happening\n    this.on(this.tech_, 'mousedown', this.handleTechClick_);\n    this.on(this.tech_, 'dblclick', this.handleTechDoubleClick_);\n\n    // If the controls were hidden we don't want that to change without a tap event\n    // so we'll check if the controls were already showing before reporting user\n    // activity\n    this.on(this.tech_, 'touchstart', this.handleTechTouchStart_);\n    this.on(this.tech_, 'touchmove', this.handleTechTouchMove_);\n    this.on(this.tech_, 'touchend', this.handleTechTouchEnd_);\n\n    // The tap listener needs to come after the touchend listener because the tap\n    // listener cancels out any reportedUserActivity when setting userActive(false)\n    this.on(this.tech_, 'tap', this.handleTechTap_);\n  };\n\n  /**\n   * Remove the listeners used for click and tap controls. This is needed for\n   * toggling to controls disabled, where a tap/touch should do nothing.\n   *\n   * @private\n   */\n\n\n  Player.prototype.removeTechControlsListeners_ = function removeTechControlsListeners_() {\n    // We don't want to just use `this.off()` because there might be other needed\n    // listeners added by techs that extend this.\n    this.off(this.tech_, 'tap', this.handleTechTap_);\n    this.off(this.tech_, 'touchstart', this.handleTechTouchStart_);\n    this.off(this.tech_, 'touchmove', this.handleTechTouchMove_);\n    this.off(this.tech_, 'touchend', this.handleTechTouchEnd_);\n    this.off(this.tech_, 'mousedown', this.handleTechClick_);\n    this.off(this.tech_, 'dblclick', this.handleTechDoubleClick_);\n  };\n\n  /**\n   * Player waits for the tech to be ready\n   *\n   * @private\n   */\n\n\n  Player.prototype.handleTechReady_ = function handleTechReady_() {\n    this.triggerReady();\n\n    // Keep the same volume as before\n    if (this.cache_.volume) {\n      this.techCall_('setVolume', this.cache_.volume);\n    }\n\n    // Look if the tech found a higher resolution poster while loading\n    this.handleTechPosterChange_();\n\n    // Update the duration if available\n    this.handleTechDurationChange_();\n  };\n\n  /**\n   * Retrigger the `loadstart` event that was triggered by the {@link Tech}. This\n   * function will also trigger {@link Player#firstplay} if it is the first loadstart\n   * for a video.\n   *\n   * @fires Player#loadstart\n   * @fires Player#firstplay\n   * @listens Tech#loadstart\n   * @private\n   */\n\n\n  Player.prototype.handleTechLoadStart_ = function handleTechLoadStart_() {\n    // TODO: Update to use `emptied` event instead. See #1277.\n\n    this.removeClass('vjs-ended');\n    this.removeClass('vjs-seeking');\n\n    // reset the error state\n    this.error(null);\n\n    // If it's already playing we want to trigger a firstplay event now.\n    // The firstplay event relies on both the play and loadstart events\n    // which can happen in any order for a new source\n    if (!this.paused()) {\n      /**\n       * Fired when the user agent begins looking for media data\n       *\n       * @event Player#loadstart\n       * @type {EventTarget~Event}\n       */\n      this.trigger('loadstart');\n      this.trigger('firstplay');\n    } else {\n      // reset the hasStarted state\n      this.hasStarted(false);\n      this.trigger('loadstart');\n    }\n\n    // autoplay happens after loadstart for the browser,\n    // so we mimic that behavior\n    this.manualAutoplay_(this.autoplay());\n  };\n\n  /**\n   * Handle autoplay string values, rather than the typical boolean\n   * values that should be handled by the tech. Note that this is not\n   * part of any specification. Valid values and what they do can be\n   * found on the autoplay getter at Player#autoplay()\n   */\n\n\n  Player.prototype.manualAutoplay_ = function manualAutoplay_(type) {\n    var _this4 = this;\n\n    if (!this.tech_ || typeof type !== 'string') {\n      return;\n    }\n\n    var muted = function muted() {\n      var previouslyMuted = _this4.muted();\n\n      _this4.muted(true);\n\n      var playPromise = _this4.play();\n\n      if (!playPromise || !playPromise.then || !playPromise.catch) {\n        return;\n      }\n\n      return playPromise.catch(function (e) {\n        // restore old value of muted on failure\n        _this4.muted(previouslyMuted);\n      });\n    };\n\n    var promise = void 0;\n\n    if (type === 'any') {\n      promise = this.play();\n\n      if (promise && promise.then && promise.catch) {\n        promise.catch(function () {\n          return muted();\n        });\n      }\n    } else if (type === 'muted') {\n      promise = muted();\n    } else {\n      promise = this.play();\n    }\n\n    if (!promise || !promise.then || !promise.catch) {\n      return;\n    }\n\n    return promise.then(function () {\n      _this4.trigger({ type: 'autoplay-success', autoplay: type });\n    }).catch(function (e) {\n      _this4.trigger({ type: 'autoplay-failure', autoplay: type });\n    });\n  };\n\n  /**\n   * Update the internal source caches so that we return the correct source from\n   * `src()`, `currentSource()`, and `currentSources()`.\n   *\n   * > Note: `currentSources` will not be updated if the source that is passed in exists\n   *         in the current `currentSources` cache.\n   *\n   *\n   * @param {Tech~SourceObject} srcObj\n   *        A string or object source to update our caches to.\n   */\n\n\n  Player.prototype.updateSourceCaches_ = function updateSourceCaches_() {\n    var srcObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n\n    var src = srcObj;\n    var type = '';\n\n    if (typeof src !== 'string') {\n      src = srcObj.src;\n      type = srcObj.type;\n    }\n\n    // if we are a blob url, don't update the source cache\n    // blob urls can arise when playback is done via Media Source Extension (MSE)\n    // such as m3u8 sources with @videojs/http-streaming (VHS)\n    if (/^blob:/.test(src)) {\n      return;\n    }\n\n    // make sure all the caches are set to default values\n    // to prevent null checking\n    this.cache_.source = this.cache_.source || {};\n    this.cache_.sources = this.cache_.sources || [];\n\n    // try to get the type of the src that was passed in\n    if (src && !type) {\n      type = findMimetype(this, src);\n    }\n\n    // update `currentSource` cache always\n    this.cache_.source = mergeOptions({}, srcObj, { src: src, type: type });\n\n    var matchingSources = this.cache_.sources.filter(function (s) {\n      return s.src && s.src === src;\n    });\n    var sourceElSources = [];\n    var sourceEls = this.$$('source');\n    var matchingSourceEls = [];\n\n    for (var i = 0; i < sourceEls.length; i++) {\n      var sourceObj = getAttributes(sourceEls[i]);\n\n      sourceElSources.push(sourceObj);\n\n      if (sourceObj.src && sourceObj.src === src) {\n        matchingSourceEls.push(sourceObj.src);\n      }\n    }\n\n    // if we have matching source els but not matching sources\n    // the current source cache is not up to date\n    if (matchingSourceEls.length && !matchingSources.length) {\n      this.cache_.sources = sourceElSources;\n      // if we don't have matching source or source els set the\n      // sources cache to the `currentSource` cache\n    } else if (!matchingSources.length) {\n      this.cache_.sources = [this.cache_.source];\n    }\n\n    // update the tech `src` cache\n    this.cache_.src = src;\n  };\n\n  /**\n   * *EXPERIMENTAL* Fired when the source is set or changed on the {@link Tech}\n   * causing the media element to reload.\n   *\n   * It will fire for the initial source and each subsequent source.\n   * This event is a custom event from Video.js and is triggered by the {@link Tech}.\n   *\n   * The event object for this event contains a `src` property that will contain the source\n   * that was available when the event was triggered. This is generally only necessary if Video.js\n   * is switching techs while the source was being changed.\n   *\n   * It is also fired when `load` is called on the player (or media element)\n   * because the {@link https://html.spec.whatwg.org/multipage/media.html#dom-media-load|specification for `load`}\n   * says that the resource selection algorithm needs to be aborted and restarted.\n   * In this case, it is very likely that the `src` property will be set to the\n   * empty string `\"\"` to indicate we do not know what the source will be but\n   * that it is changing.\n   *\n   * *This event is currently still experimental and may change in minor releases.*\n   * __To use this, pass `enableSourceset` option to the player.__\n   *\n   * @event Player#sourceset\n   * @type {EventTarget~Event}\n   * @prop {string} src\n   *                The source url available when the `sourceset` was triggered.\n   *                It will be an empty string if we cannot know what the source is\n   *                but know that the source will change.\n   */\n  /**\n   * Retrigger the `sourceset` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#sourceset\n   * @listens Tech#sourceset\n   * @private\n   */\n\n\n  Player.prototype.handleTechSourceset_ = function handleTechSourceset_(event) {\n    var _this5 = this;\n\n    // only update the source cache when the source\n    // was not updated using the player api\n    if (!this.changingSrc_) {\n      // update the source to the intial source right away\n      // in some cases this will be empty string\n      this.updateSourceCaches_(event.src);\n\n      // if the `sourceset` `src` was an empty string\n      // wait for a `loadstart` to update the cache to `currentSrc`.\n      // If a sourceset happens before a `loadstart`, we reset the state\n      // as this function will be called again.\n      if (!event.src) {\n        var updateCache = function updateCache(e) {\n          if (e.type !== 'sourceset') {\n            _this5.updateSourceCaches_(_this5.techGet_('currentSrc'));\n          }\n\n          _this5.tech_.off(['sourceset', 'loadstart'], updateCache);\n        };\n\n        this.tech_.one(['sourceset', 'loadstart'], updateCache);\n      }\n    }\n\n    this.trigger({\n      src: event.src,\n      type: 'sourceset'\n    });\n  };\n\n  /**\n   * Add/remove the vjs-has-started class\n   *\n   * @fires Player#firstplay\n   *\n   * @param {boolean} request\n   *        - true: adds the class\n   *        - false: remove the class\n   *\n   * @return {boolean}\n   *         the boolean value of hasStarted_\n   */\n\n\n  Player.prototype.hasStarted = function hasStarted(request) {\n    if (request === undefined) {\n      // act as getter, if we have no request to change\n      return this.hasStarted_;\n    }\n\n    if (request === this.hasStarted_) {\n      return;\n    }\n\n    this.hasStarted_ = request;\n\n    if (this.hasStarted_) {\n      this.addClass('vjs-has-started');\n      this.trigger('firstplay');\n    } else {\n      this.removeClass('vjs-has-started');\n    }\n  };\n\n  /**\n   * Fired whenever the media begins or resumes playback\n   *\n   * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-play}\n   * @fires Player#play\n   * @listens Tech#play\n   * @private\n   */\n\n\n  Player.prototype.handleTechPlay_ = function handleTechPlay_() {\n    this.removeClass('vjs-ended');\n    this.removeClass('vjs-paused');\n    this.addClass('vjs-playing');\n\n    // hide the poster when the user hits play\n    this.hasStarted(true);\n    /**\n     * Triggered whenever an {@link Tech#play} event happens. Indicates that\n     * playback has started or resumed.\n     *\n     * @event Player#play\n     * @type {EventTarget~Event}\n     */\n    this.trigger('play');\n  };\n\n  /**\n   * Retrigger the `ratechange` event that was triggered by the {@link Tech}.\n   *\n   * If there were any events queued while the playback rate was zero, fire\n   * those events now.\n   *\n   * @private\n   * @method Player#handleTechRateChange_\n   * @fires Player#ratechange\n   * @listens Tech#ratechange\n   */\n\n\n  Player.prototype.handleTechRateChange_ = function handleTechRateChange_() {\n    if (this.tech_.playbackRate() > 0 && this.cache_.lastPlaybackRate === 0) {\n      this.queuedCallbacks_.forEach(function (queued) {\n        return queued.callback(queued.event);\n      });\n      this.queuedCallbacks_ = [];\n    }\n    this.cache_.lastPlaybackRate = this.tech_.playbackRate();\n    /**\n     * Fires when the playing speed of the audio/video is changed\n     *\n     * @event Player#ratechange\n     * @type {event}\n     */\n    this.trigger('ratechange');\n  };\n\n  /**\n   * Retrigger the `waiting` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#waiting\n   * @listens Tech#waiting\n   * @private\n   */\n\n\n  Player.prototype.handleTechWaiting_ = function handleTechWaiting_() {\n    var _this6 = this;\n\n    this.addClass('vjs-waiting');\n    /**\n     * A readyState change on the DOM element has caused playback to stop.\n     *\n     * @event Player#waiting\n     * @type {EventTarget~Event}\n     */\n    this.trigger('waiting');\n    this.one('timeupdate', function () {\n      return _this6.removeClass('vjs-waiting');\n    });\n  };\n\n  /**\n   * Retrigger the `canplay` event that was triggered by the {@link Tech}.\n   * > Note: This is not consistent between browsers. See #1351\n   *\n   * @fires Player#canplay\n   * @listens Tech#canplay\n   * @private\n   */\n\n\n  Player.prototype.handleTechCanPlay_ = function handleTechCanPlay_() {\n    this.removeClass('vjs-waiting');\n    /**\n     * The media has a readyState of HAVE_FUTURE_DATA or greater.\n     *\n     * @event Player#canplay\n     * @type {EventTarget~Event}\n     */\n    this.trigger('canplay');\n  };\n\n  /**\n   * Retrigger the `canplaythrough` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#canplaythrough\n   * @listens Tech#canplaythrough\n   * @private\n   */\n\n\n  Player.prototype.handleTechCanPlayThrough_ = function handleTechCanPlayThrough_() {\n    this.removeClass('vjs-waiting');\n    /**\n     * The media has a readyState of HAVE_ENOUGH_DATA or greater. This means that the\n     * entire media file can be played without buffering.\n     *\n     * @event Player#canplaythrough\n     * @type {EventTarget~Event}\n     */\n    this.trigger('canplaythrough');\n  };\n\n  /**\n   * Retrigger the `playing` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#playing\n   * @listens Tech#playing\n   * @private\n   */\n\n\n  Player.prototype.handleTechPlaying_ = function handleTechPlaying_() {\n    this.removeClass('vjs-waiting');\n    /**\n     * The media is no longer blocked from playback, and has started playing.\n     *\n     * @event Player#playing\n     * @type {EventTarget~Event}\n     */\n    this.trigger('playing');\n  };\n\n  /**\n   * Retrigger the `seeking` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#seeking\n   * @listens Tech#seeking\n   * @private\n   */\n\n\n  Player.prototype.handleTechSeeking_ = function handleTechSeeking_() {\n    this.addClass('vjs-seeking');\n    /**\n     * Fired whenever the player is jumping to a new time\n     *\n     * @event Player#seeking\n     * @type {EventTarget~Event}\n     */\n    this.trigger('seeking');\n  };\n\n  /**\n   * Retrigger the `seeked` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#seeked\n   * @listens Tech#seeked\n   * @private\n   */\n\n\n  Player.prototype.handleTechSeeked_ = function handleTechSeeked_() {\n    this.removeClass('vjs-seeking');\n    /**\n     * Fired when the player has finished jumping to a new time\n     *\n     * @event Player#seeked\n     * @type {EventTarget~Event}\n     */\n    this.trigger('seeked');\n  };\n\n  /**\n   * Retrigger the `firstplay` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#firstplay\n   * @listens Tech#firstplay\n   * @deprecated As of 6.0 firstplay event is deprecated.\n   *             As of 6.0 passing the `starttime` option to the player and the firstplay event are deprecated.\n   * @private\n   */\n\n\n  Player.prototype.handleTechFirstPlay_ = function handleTechFirstPlay_() {\n    // If the first starttime attribute is specified\n    // then we will start at the given offset in seconds\n    if (this.options_.starttime) {\n      log$1.warn('Passing the `starttime` option to the player will be deprecated in 6.0');\n      this.currentTime(this.options_.starttime);\n    }\n\n    this.addClass('vjs-has-started');\n    /**\n     * Fired the first time a video is played. Not part of the HLS spec, and this is\n     * probably not the best implementation yet, so use sparingly. If you don't have a\n     * reason to prevent playback, use `myPlayer.one('play');` instead.\n     *\n     * @event Player#firstplay\n     * @deprecated As of 6.0 firstplay event is deprecated.\n     * @type {EventTarget~Event}\n     */\n    this.trigger('firstplay');\n  };\n\n  /**\n   * Retrigger the `pause` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#pause\n   * @listens Tech#pause\n   * @private\n   */\n\n\n  Player.prototype.handleTechPause_ = function handleTechPause_() {\n    this.removeClass('vjs-playing');\n    this.addClass('vjs-paused');\n    /**\n     * Fired whenever the media has been paused\n     *\n     * @event Player#pause\n     * @type {EventTarget~Event}\n     */\n    this.trigger('pause');\n  };\n\n  /**\n   * Retrigger the `ended` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#ended\n   * @listens Tech#ended\n   * @private\n   */\n\n\n  Player.prototype.handleTechEnded_ = function handleTechEnded_() {\n    this.addClass('vjs-ended');\n    if (this.options_.loop) {\n      this.currentTime(0);\n      this.play();\n    } else if (!this.paused()) {\n      this.pause();\n    }\n\n    /**\n     * Fired when the end of the media resource is reached (currentTime == duration)\n     *\n     * @event Player#ended\n     * @type {EventTarget~Event}\n     */\n    this.trigger('ended');\n  };\n\n  /**\n   * Fired when the duration of the media resource is first known or changed\n   *\n   * @listens Tech#durationchange\n   * @private\n   */\n\n\n  Player.prototype.handleTechDurationChange_ = function handleTechDurationChange_() {\n    this.duration(this.techGet_('duration'));\n  };\n\n  /**\n   * Handle a click on the media element to play/pause\n   *\n   * @param {EventTarget~Event} event\n   *        the event that caused this function to trigger\n   *\n   * @listens Tech#mousedown\n   * @private\n   */\n\n\n  Player.prototype.handleTechClick_ = function handleTechClick_(event) {\n    if (!isSingleLeftClick(event)) {\n      return;\n    }\n\n    // When controls are disabled a click should not toggle playback because\n    // the click is considered a control\n    if (!this.controls_) {\n      return;\n    }\n\n    if (this.paused()) {\n      silencePromise(this.play());\n    } else {\n      this.pause();\n    }\n  };\n\n  /**\n   * Handle a double-click on the media element to enter/exit fullscreen\n   *\n   * @param {EventTarget~Event} event\n   *        the event that caused this function to trigger\n   *\n   * @listens Tech#dblclick\n   * @private\n   */\n\n\n  Player.prototype.handleTechDoubleClick_ = function handleTechDoubleClick_(event) {\n    if (!this.controls_) {\n      return;\n    }\n\n    // we do not want to toggle fullscreen state\n    // when double-clicking inside a control bar or a modal\n    var inAllowedEls = Array.prototype.some.call(this.$$('.vjs-control-bar, .vjs-modal-dialog'), function (el) {\n      return el.contains(event.target);\n    });\n\n    if (!inAllowedEls) {\n      if (this.isFullscreen()) {\n        this.exitFullscreen();\n      } else {\n        this.requestFullscreen();\n      }\n    }\n  };\n\n  /**\n   * Handle a tap on the media element. It will toggle the user\n   * activity state, which hides and shows the controls.\n   *\n   * @listens Tech#tap\n   * @private\n   */\n\n\n  Player.prototype.handleTechTap_ = function handleTechTap_() {\n    this.userActive(!this.userActive());\n  };\n\n  /**\n   * Handle touch to start\n   *\n   * @listens Tech#touchstart\n   * @private\n   */\n\n\n  Player.prototype.handleTechTouchStart_ = function handleTechTouchStart_() {\n    this.userWasActive = this.userActive();\n  };\n\n  /**\n   * Handle touch to move\n   *\n   * @listens Tech#touchmove\n   * @private\n   */\n\n\n  Player.prototype.handleTechTouchMove_ = function handleTechTouchMove_() {\n    if (this.userWasActive) {\n      this.reportUserActivity();\n    }\n  };\n\n  /**\n   * Handle touch to end\n   *\n   * @param {EventTarget~Event} event\n   *        the touchend event that triggered\n   *        this function\n   *\n   * @listens Tech#touchend\n   * @private\n   */\n\n\n  Player.prototype.handleTechTouchEnd_ = function handleTechTouchEnd_(event) {\n    // Stop the mouse events from also happening\n    event.preventDefault();\n  };\n\n  /**\n   * Fired when the player switches in or out of fullscreen mode\n   *\n   * @private\n   * @listens Player#fullscreenchange\n   */\n\n\n  Player.prototype.handleFullscreenChange_ = function handleFullscreenChange_() {\n    if (this.isFullscreen()) {\n      this.addClass('vjs-fullscreen');\n    } else {\n      this.removeClass('vjs-fullscreen');\n    }\n  };\n\n  /**\n   * native click events on the SWF aren't triggered on IE11, Win8.1RT\n   * use stageclick events triggered from inside the SWF instead\n   *\n   * @private\n   * @listens stageclick\n   */\n\n\n  Player.prototype.handleStageClick_ = function handleStageClick_() {\n    this.reportUserActivity();\n  };\n\n  /**\n   * Handle Tech Fullscreen Change\n   *\n   * @param {EventTarget~Event} event\n   *        the fullscreenchange event that triggered this function\n   *\n   * @param {Object} data\n   *        the data that was sent with the event\n   *\n   * @private\n   * @listens Tech#fullscreenchange\n   * @fires Player#fullscreenchange\n   */\n\n\n  Player.prototype.handleTechFullscreenChange_ = function handleTechFullscreenChange_(event, data) {\n    if (data) {\n      this.isFullscreen(data.isFullscreen);\n    }\n    /**\n     * Fired when going in and out of fullscreen.\n     *\n     * @event Player#fullscreenchange\n     * @type {EventTarget~Event}\n     */\n    this.trigger('fullscreenchange');\n  };\n\n  /**\n   * Fires when an error occurred during the loading of an audio/video.\n   *\n   * @private\n   * @listens Tech#error\n   */\n\n\n  Player.prototype.handleTechError_ = function handleTechError_() {\n    var error = this.tech_.error();\n\n    this.error(error);\n  };\n\n  /**\n   * Retrigger the `textdata` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#textdata\n   * @listens Tech#textdata\n   * @private\n   */\n\n\n  Player.prototype.handleTechTextData_ = function handleTechTextData_() {\n    var data = null;\n\n    if (arguments.length > 1) {\n      data = arguments[1];\n    }\n\n    /**\n     * Fires when we get a textdata event from tech\n     *\n     * @event Player#textdata\n     * @type {EventTarget~Event}\n     */\n    this.trigger('textdata', data);\n  };\n\n  /**\n   * Get object for cached values.\n   *\n   * @return {Object}\n   *         get the current object cache\n   */\n\n\n  Player.prototype.getCache = function getCache() {\n    return this.cache_;\n  };\n\n  /**\n   * Pass values to the playback tech\n   *\n   * @param {string} [method]\n   *        the method to call\n   *\n   * @param {Object} arg\n   *        the argument to pass\n   *\n   * @private\n   */\n\n\n  Player.prototype.techCall_ = function techCall_(method, arg) {\n    // If it's not ready yet, call method when it is\n\n    this.ready(function () {\n      if (method in allowedSetters) {\n        return set$1(this.middleware_, this.tech_, method, arg);\n      } else if (method in allowedMediators) {\n        return mediate(this.middleware_, this.tech_, method, arg);\n      }\n\n      try {\n        if (this.tech_) {\n          this.tech_[method](arg);\n        }\n      } catch (e) {\n        log$1(e);\n        throw e;\n      }\n    }, true);\n  };\n\n  /**\n   * Get calls can't wait for the tech, and sometimes don't need to.\n   *\n   * @param {string} method\n   *        Tech method\n   *\n   * @return {Function|undefined}\n   *         the method or undefined\n   *\n   * @private\n   */\n\n\n  Player.prototype.techGet_ = function techGet_(method) {\n    if (!this.tech_ || !this.tech_.isReady_) {\n      return;\n    }\n\n    if (method in allowedGetters) {\n      return get$1(this.middleware_, this.tech_, method);\n    } else if (method in allowedMediators) {\n      return mediate(this.middleware_, this.tech_, method);\n    }\n\n    // Flash likes to die and reload when you hide or reposition it.\n    // In these cases the object methods go away and we get errors.\n    // When that happens we'll catch the errors and inform tech that it's not ready any more.\n    try {\n      return this.tech_[method]();\n    } catch (e) {\n\n      // When building additional tech libs, an expected method may not be defined yet\n      if (this.tech_[method] === undefined) {\n        log$1('Video.js: ' + method + ' method not defined for ' + this.techName_ + ' playback technology.', e);\n        throw e;\n      }\n\n      // When a method isn't available on the object it throws a TypeError\n      if (e.name === 'TypeError') {\n        log$1('Video.js: ' + method + ' unavailable on ' + this.techName_ + ' playback technology element.', e);\n        this.tech_.isReady_ = false;\n        throw e;\n      }\n\n      // If error unknown, just log and throw\n      log$1(e);\n      throw e;\n    }\n  };\n\n  /**\n   * Attempt to begin playback at the first opportunity.\n   *\n   * @return {Promise|undefined}\n   *         Returns a promise if the browser supports Promises (or one\n   *         was passed in as an option). This promise will be resolved on\n   *         the return value of play. If this is undefined it will fulfill the\n   *         promise chain otherwise the promise chain will be fulfilled when\n   *         the promise from play is fulfilled.\n   */\n\n\n  Player.prototype.play = function play() {\n    var _this7 = this;\n\n    var PromiseClass = this.options_.Promise || window$1.Promise;\n\n    if (PromiseClass) {\n      return new PromiseClass(function (resolve) {\n        _this7.play_(resolve);\n      });\n    }\n\n    return this.play_();\n  };\n\n  /**\n   * The actual logic for play, takes a callback that will be resolved on the\n   * return value of play. This allows us to resolve to the play promise if there\n   * is one on modern browsers.\n   *\n   * @private\n   * @param {Function} [callback]\n   *        The callback that should be called when the techs play is actually called\n   */\n\n\n  Player.prototype.play_ = function play_() {\n    var _this8 = this;\n\n    var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : silencePromise;\n\n    // If this is called while we have a play queued up on a loadstart, remove\n    // that listener to avoid getting in a potentially bad state.\n    if (this.playOnLoadstart_) {\n      this.off('loadstart', this.playOnLoadstart_);\n    }\n\n    // If the player/tech is not ready, queue up another call to `play()` for\n    // when it is. This will loop back into this method for another attempt at\n    // playback when the tech is ready.\n    if (!this.isReady_) {\n\n      // Bail out if we're already waiting for `ready`!\n      if (this.playWaitingForReady_) {\n        return;\n      }\n\n      this.playWaitingForReady_ = true;\n      this.ready(function () {\n        _this8.playWaitingForReady_ = false;\n        callback(_this8.play());\n      });\n\n      // If the player/tech is ready and we have a source, we can attempt playback.\n    } else if (!this.changingSrc_ && (this.src() || this.currentSrc())) {\n      callback(this.techGet_('play'));\n      return;\n\n      // If the tech is ready, but we do not have a source, we'll need to wait\n      // for both the `ready` and a `loadstart` when the source is finally\n      // resolved by middleware and set on the player.\n      //\n      // This can happen if `play()` is called while changing sources or before\n      // one has been set on the player.\n    } else {\n\n      this.playOnLoadstart_ = function () {\n        _this8.playOnLoadstart_ = null;\n        callback(_this8.play());\n      };\n\n      this.one('loadstart', this.playOnLoadstart_);\n    }\n  };\n\n  /**\n   * Pause the video playback\n   *\n   * @return {Player}\n   *         A reference to the player object this function was called on\n   */\n\n\n  Player.prototype.pause = function pause() {\n    this.techCall_('pause');\n  };\n\n  /**\n   * Check if the player is paused or has yet to play\n   *\n   * @return {boolean}\n   *         - false: if the media is currently playing\n   *         - true: if media is not currently playing\n   */\n\n\n  Player.prototype.paused = function paused() {\n    // The initial state of paused should be true (in Safari it's actually false)\n    return this.techGet_('paused') === false ? false : true;\n  };\n\n  /**\n   * Get a TimeRange object representing the current ranges of time that the user\n   * has played.\n   *\n   * @return {TimeRange}\n   *         A time range object that represents all the increments of time that have\n   *         been played.\n   */\n\n\n  Player.prototype.played = function played() {\n    return this.techGet_('played') || createTimeRanges(0, 0);\n  };\n\n  /**\n   * Returns whether or not the user is \"scrubbing\". Scrubbing is\n   * when the user has clicked the progress bar handle and is\n   * dragging it along the progress bar.\n   *\n   * @param {boolean} [isScrubbing]\n   *        whether the user is or is not scrubbing\n   *\n   * @return {boolean}\n   *         The value of scrubbing when getting\n   */\n\n\n  Player.prototype.scrubbing = function scrubbing(isScrubbing) {\n    if (typeof isScrubbing === 'undefined') {\n      return this.scrubbing_;\n    }\n    this.scrubbing_ = !!isScrubbing;\n\n    if (isScrubbing) {\n      this.addClass('vjs-scrubbing');\n    } else {\n      this.removeClass('vjs-scrubbing');\n    }\n  };\n\n  /**\n   * Get or set the current time (in seconds)\n   *\n   * @param {number|string} [seconds]\n   *        The time to seek to in seconds\n   *\n   * @return {number}\n   *         - the current time in seconds when getting\n   */\n\n\n  Player.prototype.currentTime = function currentTime(seconds) {\n    if (typeof seconds !== 'undefined') {\n      if (seconds < 0) {\n        seconds = 0;\n      }\n      this.techCall_('setCurrentTime', seconds);\n      return;\n    }\n\n    // cache last currentTime and return. default to 0 seconds\n    //\n    // Caching the currentTime is meant to prevent a massive amount of reads on the tech's\n    // currentTime when scrubbing, but may not provide much performance benefit afterall.\n    // Should be tested. Also something has to read the actual current time or the cache will\n    // never get updated.\n    this.cache_.currentTime = this.techGet_('currentTime') || 0;\n    return this.cache_.currentTime;\n  };\n\n  /**\n   * Normally gets the length in time of the video in seconds;\n   * in all but the rarest use cases an argument will NOT be passed to the method\n   *\n   * > **NOTE**: The video must have started loading before the duration can be\n   * known, and in the case of Flash, may not be known until the video starts\n   * playing.\n   *\n   * @fires Player#durationchange\n   *\n   * @param {number} [seconds]\n   *        The duration of the video to set in seconds\n   *\n   * @return {number}\n   *         - The duration of the video in seconds when getting\n   */\n\n\n  Player.prototype.duration = function duration(seconds) {\n    if (seconds === undefined) {\n      // return NaN if the duration is not known\n      return this.cache_.duration !== undefined ? this.cache_.duration : NaN;\n    }\n\n    seconds = parseFloat(seconds);\n\n    // Standardize on Infinity for signaling video is live\n    if (seconds < 0) {\n      seconds = Infinity;\n    }\n\n    if (seconds !== this.cache_.duration) {\n      // Cache the last set value for optimized scrubbing (esp. Flash)\n      this.cache_.duration = seconds;\n\n      if (seconds === Infinity) {\n        this.addClass('vjs-live');\n      } else {\n        this.removeClass('vjs-live');\n      }\n      /**\n       * @event Player#durationchange\n       * @type {EventTarget~Event}\n       */\n      this.trigger('durationchange');\n    }\n  };\n\n  /**\n   * Calculates how much time is left in the video. Not part\n   * of the native video API.\n   *\n   * @return {number}\n   *         The time remaining in seconds\n   */\n\n\n  Player.prototype.remainingTime = function remainingTime() {\n    return this.duration() - this.currentTime();\n  };\n\n  /**\n   * A remaining time function that is intented to be used when\n   * the time is to be displayed directly to the user.\n   *\n   * @return {number}\n   *         The rounded time remaining in seconds\n   */\n\n\n  Player.prototype.remainingTimeDisplay = function remainingTimeDisplay() {\n    return Math.floor(this.duration()) - Math.floor(this.currentTime());\n  };\n\n  //\n  // Kind of like an array of portions of the video that have been downloaded.\n\n  /**\n   * Get a TimeRange object with an array of the times of the video\n   * that have been downloaded. If you just want the percent of the\n   * video that's been downloaded, use bufferedPercent.\n   *\n   * @see [Buffered Spec]{@link http://dev.w3.org/html5/spec/video.html#dom-media-buffered}\n   *\n   * @return {TimeRange}\n   *         A mock TimeRange object (following HTML spec)\n   */\n\n\n  Player.prototype.buffered = function buffered() {\n    var buffered = this.techGet_('buffered');\n\n    if (!buffered || !buffered.length) {\n      buffered = createTimeRanges(0, 0);\n    }\n\n    return buffered;\n  };\n\n  /**\n   * Get the percent (as a decimal) of the video that's been downloaded.\n   * This method is not a part of the native HTML video API.\n   *\n   * @return {number}\n   *         A decimal between 0 and 1 representing the percent\n   *         that is buffered 0 being 0% and 1 being 100%\n   */\n\n\n  Player.prototype.bufferedPercent = function bufferedPercent$$1() {\n    return bufferedPercent(this.buffered(), this.duration());\n  };\n\n  /**\n   * Get the ending time of the last buffered time range\n   * This is used in the progress bar to encapsulate all time ranges.\n   *\n   * @return {number}\n   *         The end of the last buffered time range\n   */\n\n\n  Player.prototype.bufferedEnd = function bufferedEnd() {\n    var buffered = this.buffered();\n    var duration = this.duration();\n    var end = buffered.end(buffered.length - 1);\n\n    if (end > duration) {\n      end = duration;\n    }\n\n    return end;\n  };\n\n  /**\n   * Get or set the current volume of the media\n   *\n   * @param  {number} [percentAsDecimal]\n   *         The new volume as a decimal percent:\n   *         - 0 is muted/0%/off\n   *         - 1.0 is 100%/full\n   *         - 0.5 is half volume or 50%\n   *\n   * @return {number}\n   *         The current volume as a percent when getting\n   */\n\n\n  Player.prototype.volume = function volume(percentAsDecimal) {\n    var vol = void 0;\n\n    if (percentAsDecimal !== undefined) {\n      // Force value to between 0 and 1\n      vol = Math.max(0, Math.min(1, parseFloat(percentAsDecimal)));\n      this.cache_.volume = vol;\n      this.techCall_('setVolume', vol);\n\n      if (vol > 0) {\n        this.lastVolume_(vol);\n      }\n\n      return;\n    }\n\n    // Default to 1 when returning current volume.\n    vol = parseFloat(this.techGet_('volume'));\n    return isNaN(vol) ? 1 : vol;\n  };\n\n  /**\n   * Get the current muted state, or turn mute on or off\n   *\n   * @param {boolean} [muted]\n   *        - true to mute\n   *        - false to unmute\n   *\n   * @return {boolean}\n   *         - true if mute is on and getting\n   *         - false if mute is off and getting\n   */\n\n\n  Player.prototype.muted = function muted(_muted) {\n    if (_muted !== undefined) {\n      this.techCall_('setMuted', _muted);\n      return;\n    }\n    return this.techGet_('muted') || false;\n  };\n\n  /**\n   * Get the current defaultMuted state, or turn defaultMuted on or off. defaultMuted\n   * indicates the state of muted on initial playback.\n   *\n   * ```js\n   *   var myPlayer = videojs('some-player-id');\n   *\n   *   myPlayer.src(\"http://www.example.com/path/to/video.mp4\");\n   *\n   *   // get, should be false\n   *   console.log(myPlayer.defaultMuted());\n   *   // set to true\n   *   myPlayer.defaultMuted(true);\n   *   // get should be true\n   *   console.log(myPlayer.defaultMuted());\n   * ```\n   *\n   * @param {boolean} [defaultMuted]\n   *        - true to mute\n   *        - false to unmute\n   *\n   * @return {boolean|Player}\n   *         - true if defaultMuted is on and getting\n   *         - false if defaultMuted is off and getting\n   *         - A reference to the current player when setting\n   */\n\n\n  Player.prototype.defaultMuted = function defaultMuted(_defaultMuted) {\n    if (_defaultMuted !== undefined) {\n      return this.techCall_('setDefaultMuted', _defaultMuted);\n    }\n    return this.techGet_('defaultMuted') || false;\n  };\n\n  /**\n   * Get the last volume, or set it\n   *\n   * @param  {number} [percentAsDecimal]\n   *         The new last volume as a decimal percent:\n   *         - 0 is muted/0%/off\n   *         - 1.0 is 100%/full\n   *         - 0.5 is half volume or 50%\n   *\n   * @return {number}\n   *         the current value of lastVolume as a percent when getting\n   *\n   * @private\n   */\n\n\n  Player.prototype.lastVolume_ = function lastVolume_(percentAsDecimal) {\n    if (percentAsDecimal !== undefined && percentAsDecimal !== 0) {\n      this.cache_.lastVolume = percentAsDecimal;\n      return;\n    }\n    return this.cache_.lastVolume;\n  };\n\n  /**\n   * Check if current tech can support native fullscreen\n   * (e.g. with built in controls like iOS, so not our flash swf)\n   *\n   * @return {boolean}\n   *         if native fullscreen is supported\n   */\n\n\n  Player.prototype.supportsFullScreen = function supportsFullScreen() {\n    return this.techGet_('supportsFullScreen') || false;\n  };\n\n  /**\n   * Check if the player is in fullscreen mode or tell the player that it\n   * is or is not in fullscreen mode.\n   *\n   * > NOTE: As of the latest HTML5 spec, isFullscreen is no longer an official\n   * property and instead document.fullscreenElement is used. But isFullscreen is\n   * still a valuable property for internal player workings.\n   *\n   * @param  {boolean} [isFS]\n   *         Set the players current fullscreen state\n   *\n   * @return {boolean}\n   *         - true if fullscreen is on and getting\n   *         - false if fullscreen is off and getting\n   */\n\n\n  Player.prototype.isFullscreen = function isFullscreen(isFS) {\n    if (isFS !== undefined) {\n      this.isFullscreen_ = !!isFS;\n      return;\n    }\n    return !!this.isFullscreen_;\n  };\n\n  /**\n   * Increase the size of the video to full screen\n   * In some browsers, full screen is not supported natively, so it enters\n   * \"full window mode\", where the video fills the browser window.\n   * In browsers and devices that support native full screen, sometimes the\n   * browser's default controls will be shown, and not the Video.js custom skin.\n   * This includes most mobile devices (iOS, Android) and older versions of\n   * Safari.\n   *\n   * @fires Player#fullscreenchange\n   */\n\n\n  Player.prototype.requestFullscreen = function requestFullscreen() {\n    var fsApi = FullscreenApi;\n\n    this.isFullscreen(true);\n\n    if (fsApi.requestFullscreen) {\n      // the browser supports going fullscreen at the element level so we can\n      // take the controls fullscreen as well as the video\n\n      // Trigger fullscreenchange event after change\n      // We have to specifically add this each time, and remove\n      // when canceling fullscreen. Otherwise if there's multiple\n      // players on a page, they would all be reacting to the same fullscreen\n      // events\n      on(document, fsApi.fullscreenchange, bind(this, function documentFullscreenChange(e) {\n        this.isFullscreen(document[fsApi.fullscreenElement]);\n\n        // If cancelling fullscreen, remove event listener.\n        if (this.isFullscreen() === false) {\n          off(document, fsApi.fullscreenchange, documentFullscreenChange);\n        }\n        /**\n         * @event Player#fullscreenchange\n         * @type {EventTarget~Event}\n         */\n        this.trigger('fullscreenchange');\n      }));\n\n      this.el_[fsApi.requestFullscreen]();\n    } else if (this.tech_.supportsFullScreen()) {\n      // we can't take the video.js controls fullscreen but we can go fullscreen\n      // with native controls\n      this.techCall_('enterFullScreen');\n    } else {\n      // fullscreen isn't supported so we'll just stretch the video element to\n      // fill the viewport\n      this.enterFullWindow();\n      /**\n       * @event Player#fullscreenchange\n       * @type {EventTarget~Event}\n       */\n      this.trigger('fullscreenchange');\n    }\n  };\n\n  /**\n   * Return the video to its normal size after having been in full screen mode\n   *\n   * @fires Player#fullscreenchange\n   */\n\n\n  Player.prototype.exitFullscreen = function exitFullscreen() {\n    var fsApi = FullscreenApi;\n\n    this.isFullscreen(false);\n\n    // Check for browser element fullscreen support\n    if (fsApi.requestFullscreen) {\n      document[fsApi.exitFullscreen]();\n    } else if (this.tech_.supportsFullScreen()) {\n      this.techCall_('exitFullScreen');\n    } else {\n      this.exitFullWindow();\n      /**\n       * @event Player#fullscreenchange\n       * @type {EventTarget~Event}\n       */\n      this.trigger('fullscreenchange');\n    }\n  };\n\n  /**\n   * When fullscreen isn't supported we can stretch the\n   * video container to as wide as the browser will let us.\n   *\n   * @fires Player#enterFullWindow\n   */\n\n\n  Player.prototype.enterFullWindow = function enterFullWindow() {\n    this.isFullWindow = true;\n\n    // Storing original doc overflow value to return to when fullscreen is off\n    this.docOrigOverflow = document.documentElement.style.overflow;\n\n    // Add listener for esc key to exit fullscreen\n    on(document, 'keydown', bind(this, this.fullWindowOnEscKey));\n\n    // Hide any scroll bars\n    document.documentElement.style.overflow = 'hidden';\n\n    // Apply fullscreen styles\n    addClass(document.body, 'vjs-full-window');\n\n    /**\n     * @event Player#enterFullWindow\n     * @type {EventTarget~Event}\n     */\n    this.trigger('enterFullWindow');\n  };\n\n  /**\n   * Check for call to either exit full window or\n   * full screen on ESC key\n   *\n   * @param {string} event\n   *        Event to check for key press\n   */\n\n\n  Player.prototype.fullWindowOnEscKey = function fullWindowOnEscKey(event) {\n    if (event.keyCode === 27) {\n      if (this.isFullscreen() === true) {\n        this.exitFullscreen();\n      } else {\n        this.exitFullWindow();\n      }\n    }\n  };\n\n  /**\n   * Exit full window\n   *\n   * @fires Player#exitFullWindow\n   */\n\n\n  Player.prototype.exitFullWindow = function exitFullWindow() {\n    this.isFullWindow = false;\n    off(document, 'keydown', this.fullWindowOnEscKey);\n\n    // Unhide scroll bars.\n    document.documentElement.style.overflow = this.docOrigOverflow;\n\n    // Remove fullscreen styles\n    removeClass(document.body, 'vjs-full-window');\n\n    // Resize the box, controller, and poster to original sizes\n    // this.positionAll();\n    /**\n     * @event Player#exitFullWindow\n     * @type {EventTarget~Event}\n     */\n    this.trigger('exitFullWindow');\n  };\n\n  /**\n   * Check whether the player can play a given mimetype\n   *\n   * @see https://www.w3.org/TR/2011/WD-html5-20110113/video.html#dom-navigator-canplaytype\n   *\n   * @param {string} type\n   *        The mimetype to check\n   *\n   * @return {string}\n   *         'probably', 'maybe', or '' (empty string)\n   */\n\n\n  Player.prototype.canPlayType = function canPlayType(type) {\n    var can = void 0;\n\n    // Loop through each playback technology in the options order\n    for (var i = 0, j = this.options_.techOrder; i < j.length; i++) {\n      var techName = j[i];\n      var tech = Tech.getTech(techName);\n\n      // Support old behavior of techs being registered as components.\n      // Remove once that deprecated behavior is removed.\n      if (!tech) {\n        tech = Component.getComponent(techName);\n      }\n\n      // Check if the current tech is defined before continuing\n      if (!tech) {\n        log$1.error('The \"' + techName + '\" tech is undefined. Skipped browser support check for that tech.');\n        continue;\n      }\n\n      // Check if the browser supports this technology\n      if (tech.isSupported()) {\n        can = tech.canPlayType(type);\n\n        if (can) {\n          return can;\n        }\n      }\n    }\n\n    return '';\n  };\n\n  /**\n   * Select source based on tech-order or source-order\n   * Uses source-order selection if `options.sourceOrder` is truthy. Otherwise,\n   * defaults to tech-order selection\n   *\n   * @param {Array} sources\n   *        The sources for a media asset\n   *\n   * @return {Object|boolean}\n   *         Object of source and tech order or false\n   */\n\n\n  Player.prototype.selectSource = function selectSource(sources) {\n    var _this9 = this;\n\n    // Get only the techs specified in `techOrder` that exist and are supported by the\n    // current platform\n    var techs = this.options_.techOrder.map(function (techName) {\n      return [techName, Tech.getTech(techName)];\n    }).filter(function (_ref) {\n      var techName = _ref[0],\n          tech = _ref[1];\n\n      // Check if the current tech is defined before continuing\n      if (tech) {\n        // Check if the browser supports this technology\n        return tech.isSupported();\n      }\n\n      log$1.error('The \"' + techName + '\" tech is undefined. Skipped browser support check for that tech.');\n      return false;\n    });\n\n    // Iterate over each `innerArray` element once per `outerArray` element and execute\n    // `tester` with both. If `tester` returns a non-falsy value, exit early and return\n    // that value.\n    var findFirstPassingTechSourcePair = function findFirstPassingTechSourcePair(outerArray, innerArray, tester) {\n      var found = void 0;\n\n      outerArray.some(function (outerChoice) {\n        return innerArray.some(function (innerChoice) {\n          found = tester(outerChoice, innerChoice);\n\n          if (found) {\n            return true;\n          }\n        });\n      });\n\n      return found;\n    };\n\n    var foundSourceAndTech = void 0;\n    var flip = function flip(fn) {\n      return function (a, b) {\n        return fn(b, a);\n      };\n    };\n    var finder = function finder(_ref2, source) {\n      var techName = _ref2[0],\n          tech = _ref2[1];\n\n      if (tech.canPlaySource(source, _this9.options_[techName.toLowerCase()])) {\n        return { source: source, tech: techName };\n      }\n    };\n\n    // Depending on the truthiness of `options.sourceOrder`, we swap the order of techs and sources\n    // to select from them based on their priority.\n    if (this.options_.sourceOrder) {\n      // Source-first ordering\n      foundSourceAndTech = findFirstPassingTechSourcePair(sources, techs, flip(finder));\n    } else {\n      // Tech-first ordering\n      foundSourceAndTech = findFirstPassingTechSourcePair(techs, sources, finder);\n    }\n\n    return foundSourceAndTech || false;\n  };\n\n  /**\n   * Get or set the video source.\n   *\n   * @param {Tech~SourceObject|Tech~SourceObject[]|string} [source]\n   *        A SourceObject, an array of SourceObjects, or a string referencing\n   *        a URL to a media source. It is _highly recommended_ that an object\n   *        or array of objects is used here, so that source selection\n   *        algorithms can take the `type` into account.\n   *\n   *        If not provided, this method acts as a getter.\n   *\n   * @return {string|undefined}\n   *         If the `source` argument is missing, returns the current source\n   *         URL. Otherwise, returns nothing/undefined.\n   */\n\n\n  Player.prototype.src = function src(source) {\n    var _this10 = this;\n\n    // getter usage\n    if (typeof source === 'undefined') {\n      return this.cache_.src || '';\n    }\n    // filter out invalid sources and turn our source into\n    // an array of source objects\n    var sources = filterSource(source);\n\n    // if a source was passed in then it is invalid because\n    // it was filtered to a zero length Array. So we have to\n    // show an error\n    if (!sources.length) {\n      this.setTimeout(function () {\n        this.error({ code: 4, message: this.localize(this.options_.notSupportedMessage) });\n      }, 0);\n      return;\n    }\n\n    // intial sources\n    this.changingSrc_ = true;\n\n    this.cache_.sources = sources;\n    this.updateSourceCaches_(sources[0]);\n\n    // middlewareSource is the source after it has been changed by middleware\n    setSource(this, sources[0], function (middlewareSource, mws) {\n      _this10.middleware_ = mws;\n\n      // since sourceSet is async we have to update the cache again after we select a source since\n      // the source that is selected could be out of order from the cache update above this callback.\n      _this10.cache_.sources = sources;\n      _this10.updateSourceCaches_(middlewareSource);\n\n      var err = _this10.src_(middlewareSource);\n\n      if (err) {\n        if (sources.length > 1) {\n          return _this10.src(sources.slice(1));\n        }\n\n        _this10.changingSrc_ = false;\n\n        // We need to wrap this in a timeout to give folks a chance to add error event handlers\n        _this10.setTimeout(function () {\n          this.error({ code: 4, message: this.localize(this.options_.notSupportedMessage) });\n        }, 0);\n\n        // we could not find an appropriate tech, but let's still notify the delegate that this is it\n        // this needs a better comment about why this is needed\n        _this10.triggerReady();\n\n        return;\n      }\n\n      setTech(mws, _this10.tech_);\n    });\n  };\n\n  /**\n   * Set the source object on the tech, returns a boolean that indicates whether\n   * there is a tech that can play the source or not\n   *\n   * @param {Tech~SourceObject} source\n   *        The source object to set on the Tech\n   *\n   * @return {Boolean}\n   *         - True if there is no Tech to playback this source\n   *         - False otherwise\n   *\n   * @private\n   */\n\n\n  Player.prototype.src_ = function src_(source) {\n    var _this11 = this;\n\n    var sourceTech = this.selectSource([source]);\n\n    if (!sourceTech) {\n      return true;\n    }\n\n    if (!titleCaseEquals(sourceTech.tech, this.techName_)) {\n      this.changingSrc_ = true;\n      // load this technology with the chosen source\n      this.loadTech_(sourceTech.tech, sourceTech.source);\n      this.tech_.ready(function () {\n        _this11.changingSrc_ = false;\n      });\n      return false;\n    }\n\n    // wait until the tech is ready to set the source\n    // and set it synchronously if possible (#2326)\n    this.ready(function () {\n\n      // The setSource tech method was added with source handlers\n      // so older techs won't support it\n      // We need to check the direct prototype for the case where subclasses\n      // of the tech do not support source handlers\n      if (this.tech_.constructor.prototype.hasOwnProperty('setSource')) {\n        this.techCall_('setSource', source);\n      } else {\n        this.techCall_('src', source.src);\n      }\n\n      this.changingSrc_ = false;\n    }, true);\n\n    return false;\n  };\n\n  /**\n   * Begin loading the src data.\n   */\n\n\n  Player.prototype.load = function load() {\n    this.techCall_('load');\n  };\n\n  /**\n   * Reset the player. Loads the first tech in the techOrder,\n   * and calls `reset` on the tech`.\n   */\n\n\n  Player.prototype.reset = function reset() {\n    if (this.tech_) {\n      this.tech_.clearTracks('text');\n    }\n    this.loadTech_(this.options_.techOrder[0], null);\n    this.techCall_('reset');\n  };\n\n  /**\n   * Returns all of the current source objects.\n   *\n   * @return {Tech~SourceObject[]}\n   *         The current source objects\n   */\n\n\n  Player.prototype.currentSources = function currentSources() {\n    var source = this.currentSource();\n    var sources = [];\n\n    // assume `{}` or `{ src }`\n    if (Object.keys(source).length !== 0) {\n      sources.push(source);\n    }\n\n    return this.cache_.sources || sources;\n  };\n\n  /**\n   * Returns the current source object.\n   *\n   * @return {Tech~SourceObject}\n   *         The current source object\n   */\n\n\n  Player.prototype.currentSource = function currentSource() {\n    return this.cache_.source || {};\n  };\n\n  /**\n   * Returns the fully qualified URL of the current source value e.g. http://mysite.com/video.mp4\n   * Can be used in conjunction with `currentType` to assist in rebuilding the current source object.\n   *\n   * @return {string}\n   *         The current source\n   */\n\n\n  Player.prototype.currentSrc = function currentSrc() {\n    return this.currentSource() && this.currentSource().src || '';\n  };\n\n  /**\n   * Get the current source type e.g. video/mp4\n   * This can allow you rebuild the current source object so that you could load the same\n   * source and tech later\n   *\n   * @return {string}\n   *         The source MIME type\n   */\n\n\n  Player.prototype.currentType = function currentType() {\n    return this.currentSource() && this.currentSource().type || '';\n  };\n\n  /**\n   * Get or set the preload attribute\n   *\n   * @param {boolean} [value]\n   *        - true means that we should preload\n   *        - false means that we should not preload\n   *\n   * @return {string}\n   *         The preload attribute value when getting\n   */\n\n\n  Player.prototype.preload = function preload(value) {\n    if (value !== undefined) {\n      this.techCall_('setPreload', value);\n      this.options_.preload = value;\n      return;\n    }\n    return this.techGet_('preload');\n  };\n\n  /**\n   * Get or set the autoplay option. When this is a boolean it will\n   * modify the attribute on the tech. When this is a string the attribute on\n   * the tech will be removed and `Player` will handle autoplay on loadstarts.\n   *\n   * @param {boolean|string} [value]\n   *        - true: autoplay using the browser behavior\n   *        - false: do not autoplay\n   *        - 'play': call play() on every loadstart\n   *        - 'muted': call muted() then play() on every loadstart\n   *        - 'any': call play() on every loadstart. if that fails call muted() then play().\n   *        - *: values other than those listed here will be set `autoplay` to true\n   *\n   * @return {boolean|string}\n   *         The current value of autoplay when getting\n   */\n\n\n  Player.prototype.autoplay = function autoplay(value) {\n    // getter usage\n    if (value === undefined) {\n      return this.options_.autoplay || false;\n    }\n\n    var techAutoplay = void 0;\n\n    // if the value is a valid string set it to that\n    if (typeof value === 'string' && /(any|play|muted)/.test(value)) {\n      this.options_.autoplay = value;\n      this.manualAutoplay_(value);\n      techAutoplay = false;\n\n      // any falsy value sets autoplay to false in the browser,\n      // lets do the same\n    } else if (!value) {\n      this.options_.autoplay = false;\n\n      // any other value (ie truthy) sets autoplay to true\n    } else {\n      this.options_.autoplay = true;\n    }\n\n    techAutoplay = techAutoplay || this.options_.autoplay;\n\n    // if we don't have a tech then we do not queue up\n    // a setAutoplay call on tech ready. We do this because the\n    // autoplay option will be passed in the constructor and we\n    // do not need to set it twice\n    if (this.tech_) {\n      this.techCall_('setAutoplay', techAutoplay);\n    }\n  };\n\n  /**\n   * Set or unset the playsinline attribute.\n   * Playsinline tells the browser that non-fullscreen playback is preferred.\n   *\n   * @param {boolean} [value]\n   *        - true means that we should try to play inline by default\n   *        - false means that we should use the browser's default playback mode,\n   *          which in most cases is inline. iOS Safari is a notable exception\n   *          and plays fullscreen by default.\n   *\n   * @return {string|Player}\n   *         - the current value of playsinline\n   *         - the player when setting\n   *\n   * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}\n   */\n\n\n  Player.prototype.playsinline = function playsinline(value) {\n    if (value !== undefined) {\n      this.techCall_('setPlaysinline', value);\n      this.options_.playsinline = value;\n      return this;\n    }\n    return this.techGet_('playsinline');\n  };\n\n  /**\n   * Get or set the loop attribute on the video element.\n   *\n   * @param {boolean} [value]\n   *        - true means that we should loop the video\n   *        - false means that we should not loop the video\n   *\n   * @return {string}\n   *         The current value of loop when getting\n   */\n\n\n  Player.prototype.loop = function loop(value) {\n    if (value !== undefined) {\n      this.techCall_('setLoop', value);\n      this.options_.loop = value;\n      return;\n    }\n    return this.techGet_('loop');\n  };\n\n  /**\n   * Get or set the poster image source url\n   *\n   * @fires Player#posterchange\n   *\n   * @param {string} [src]\n   *        Poster image source URL\n   *\n   * @return {string}\n   *         The current value of poster when getting\n   */\n\n\n  Player.prototype.poster = function poster(src) {\n    if (src === undefined) {\n      return this.poster_;\n    }\n\n    // The correct way to remove a poster is to set as an empty string\n    // other falsey values will throw errors\n    if (!src) {\n      src = '';\n    }\n\n    if (src === this.poster_) {\n      return;\n    }\n\n    // update the internal poster variable\n    this.poster_ = src;\n\n    // update the tech's poster\n    this.techCall_('setPoster', src);\n\n    this.isPosterFromTech_ = false;\n\n    // alert components that the poster has been set\n    /**\n     * This event fires when the poster image is changed on the player.\n     *\n     * @event Player#posterchange\n     * @type {EventTarget~Event}\n     */\n    this.trigger('posterchange');\n  };\n\n  /**\n   * Some techs (e.g. YouTube) can provide a poster source in an\n   * asynchronous way. We want the poster component to use this\n   * poster source so that it covers up the tech's controls.\n   * (YouTube's play button). However we only want to use this\n   * source if the player user hasn't set a poster through\n   * the normal APIs.\n   *\n   * @fires Player#posterchange\n   * @listens Tech#posterchange\n   * @private\n   */\n\n\n  Player.prototype.handleTechPosterChange_ = function handleTechPosterChange_() {\n    if ((!this.poster_ || this.options_.techCanOverridePoster) && this.tech_ && this.tech_.poster) {\n      var newPoster = this.tech_.poster() || '';\n\n      if (newPoster !== this.poster_) {\n        this.poster_ = newPoster;\n        this.isPosterFromTech_ = true;\n\n        // Let components know the poster has changed\n        this.trigger('posterchange');\n      }\n    }\n  };\n\n  /**\n   * Get or set whether or not the controls are showing.\n   *\n   * @fires Player#controlsenabled\n   *\n   * @param {boolean} [bool]\n   *        - true to turn controls on\n   *        - false to turn controls off\n   *\n   * @return {boolean}\n   *         The current value of controls when getting\n   */\n\n\n  Player.prototype.controls = function controls(bool) {\n    if (bool === undefined) {\n      return !!this.controls_;\n    }\n\n    bool = !!bool;\n\n    // Don't trigger a change event unless it actually changed\n    if (this.controls_ === bool) {\n      return;\n    }\n\n    this.controls_ = bool;\n\n    if (this.usingNativeControls()) {\n      this.techCall_('setControls', bool);\n    }\n\n    if (this.controls_) {\n      this.removeClass('vjs-controls-disabled');\n      this.addClass('vjs-controls-enabled');\n      /**\n       * @event Player#controlsenabled\n       * @type {EventTarget~Event}\n       */\n      this.trigger('controlsenabled');\n      if (!this.usingNativeControls()) {\n        this.addTechControlsListeners_();\n      }\n    } else {\n      this.removeClass('vjs-controls-enabled');\n      this.addClass('vjs-controls-disabled');\n      /**\n       * @event Player#controlsdisabled\n       * @type {EventTarget~Event}\n       */\n      this.trigger('controlsdisabled');\n      if (!this.usingNativeControls()) {\n        this.removeTechControlsListeners_();\n      }\n    }\n  };\n\n  /**\n   * Toggle native controls on/off. Native controls are the controls built into\n   * devices (e.g. default iPhone controls), Flash, or other techs\n   * (e.g. Vimeo Controls)\n   * **This should only be set by the current tech, because only the tech knows\n   * if it can support native controls**\n   *\n   * @fires Player#usingnativecontrols\n   * @fires Player#usingcustomcontrols\n   *\n   * @param {boolean} [bool]\n   *        - true to turn native controls on\n   *        - false to turn native controls off\n   *\n   * @return {boolean}\n   *         The current value of native controls when getting\n   */\n\n\n  Player.prototype.usingNativeControls = function usingNativeControls(bool) {\n    if (bool === undefined) {\n      return !!this.usingNativeControls_;\n    }\n\n    bool = !!bool;\n\n    // Don't trigger a change event unless it actually changed\n    if (this.usingNativeControls_ === bool) {\n      return;\n    }\n\n    this.usingNativeControls_ = bool;\n\n    if (this.usingNativeControls_) {\n      this.addClass('vjs-using-native-controls');\n\n      /**\n       * player is using the native device controls\n       *\n       * @event Player#usingnativecontrols\n       * @type {EventTarget~Event}\n       */\n      this.trigger('usingnativecontrols');\n    } else {\n      this.removeClass('vjs-using-native-controls');\n\n      /**\n       * player is using the custom HTML controls\n       *\n       * @event Player#usingcustomcontrols\n       * @type {EventTarget~Event}\n       */\n      this.trigger('usingcustomcontrols');\n    }\n  };\n\n  /**\n   * Set or get the current MediaError\n   *\n   * @fires Player#error\n   *\n   * @param  {MediaError|string|number} [err]\n   *         A MediaError or a string/number to be turned\n   *         into a MediaError\n   *\n   * @return {MediaError|null}\n   *         The current MediaError when getting (or null)\n   */\n\n\n  Player.prototype.error = function error(err) {\n    if (err === undefined) {\n      return this.error_ || null;\n    }\n\n    // restoring to default\n    if (err === null) {\n      this.error_ = err;\n      this.removeClass('vjs-error');\n      if (this.errorDisplay) {\n        this.errorDisplay.close();\n      }\n      return;\n    }\n\n    this.error_ = new MediaError(err);\n\n    // add the vjs-error classname to the player\n    this.addClass('vjs-error');\n\n    // log the name of the error type and any message\n    // IE11 logs \"[object object]\" and required you to expand message to see error object\n    log$1.error('(CODE:' + this.error_.code + ' ' + MediaError.errorTypes[this.error_.code] + ')', this.error_.message, this.error_);\n\n    /**\n     * @event Player#error\n     * @type {EventTarget~Event}\n     */\n    this.trigger('error');\n\n    return;\n  };\n\n  /**\n   * Report user activity\n   *\n   * @param {Object} event\n   *        Event object\n   */\n\n\n  Player.prototype.reportUserActivity = function reportUserActivity(event) {\n    this.userActivity_ = true;\n  };\n\n  /**\n   * Get/set if user is active\n   *\n   * @fires Player#useractive\n   * @fires Player#userinactive\n   *\n   * @param {boolean} [bool]\n   *        - true if the user is active\n   *        - false if the user is inactive\n   *\n   * @return {boolean}\n   *         The current value of userActive when getting\n   */\n\n\n  Player.prototype.userActive = function userActive(bool) {\n    if (bool === undefined) {\n      return this.userActive_;\n    }\n\n    bool = !!bool;\n\n    if (bool === this.userActive_) {\n      return;\n    }\n\n    this.userActive_ = bool;\n\n    if (this.userActive_) {\n      this.userActivity_ = true;\n      this.removeClass('vjs-user-inactive');\n      this.addClass('vjs-user-active');\n      /**\n       * @event Player#useractive\n       * @type {EventTarget~Event}\n       */\n      this.trigger('useractive');\n      return;\n    }\n\n    // Chrome/Safari/IE have bugs where when you change the cursor it can\n    // trigger a mousemove event. This causes an issue when you're hiding\n    // the cursor when the user is inactive, and a mousemove signals user\n    // activity. Making it impossible to go into inactive mode. Specifically\n    // this happens in fullscreen when we really need to hide the cursor.\n    //\n    // When this gets resolved in ALL browsers it can be removed\n    // https://code.google.com/p/chromium/issues/detail?id=103041\n    if (this.tech_) {\n      this.tech_.one('mousemove', function (e) {\n        e.stopPropagation();\n        e.preventDefault();\n      });\n    }\n\n    this.userActivity_ = false;\n    this.removeClass('vjs-user-active');\n    this.addClass('vjs-user-inactive');\n    /**\n     * @event Player#userinactive\n     * @type {EventTarget~Event}\n     */\n    this.trigger('userinactive');\n  };\n\n  /**\n   * Listen for user activity based on timeout value\n   *\n   * @private\n   */\n\n\n  Player.prototype.listenForUserActivity_ = function listenForUserActivity_() {\n    var mouseInProgress = void 0;\n    var lastMoveX = void 0;\n    var lastMoveY = void 0;\n    var handleActivity = bind(this, this.reportUserActivity);\n\n    var handleMouseMove = function handleMouseMove(e) {\n      // #1068 - Prevent mousemove spamming\n      // Chrome Bug: https://code.google.com/p/chromium/issues/detail?id=366970\n      if (e.screenX !== lastMoveX || e.screenY !== lastMoveY) {\n        lastMoveX = e.screenX;\n        lastMoveY = e.screenY;\n        handleActivity();\n      }\n    };\n\n    var handleMouseDown = function handleMouseDown() {\n      handleActivity();\n      // For as long as the they are touching the device or have their mouse down,\n      // we consider them active even if they're not moving their finger or mouse.\n      // So we want to continue to update that they are active\n      this.clearInterval(mouseInProgress);\n      // Setting userActivity=true now and setting the interval to the same time\n      // as the activityCheck interval (250) should ensure we never miss the\n      // next activityCheck\n      mouseInProgress = this.setInterval(handleActivity, 250);\n    };\n\n    var handleMouseUp = function handleMouseUp(event) {\n      handleActivity();\n      // Stop the interval that maintains activity if the mouse/touch is down\n      this.clearInterval(mouseInProgress);\n    };\n\n    // Any mouse movement will be considered user activity\n    this.on('mousedown', handleMouseDown);\n    this.on('mousemove', handleMouseMove);\n    this.on('mouseup', handleMouseUp);\n\n    // Listen for keyboard navigation\n    // Shouldn't need to use inProgress interval because of key repeat\n    this.on('keydown', handleActivity);\n    this.on('keyup', handleActivity);\n\n    // Run an interval every 250 milliseconds instead of stuffing everything into\n    // the mousemove/touchmove function itself, to prevent performance degradation.\n    // `this.reportUserActivity` simply sets this.userActivity_ to true, which\n    // then gets picked up by this loop\n    // http://ejohn.org/blog/learning-from-twitter/\n    var inactivityTimeout = void 0;\n\n    this.setInterval(function () {\n      // Check to see if mouse/touch activity has happened\n      if (!this.userActivity_) {\n        return;\n      }\n\n      // Reset the activity tracker\n      this.userActivity_ = false;\n\n      // If the user state was inactive, set the state to active\n      this.userActive(true);\n\n      // Clear any existing inactivity timeout to start the timer over\n      this.clearTimeout(inactivityTimeout);\n\n      var timeout = this.options_.inactivityTimeout;\n\n      if (timeout <= 0) {\n        return;\n      }\n\n      // In <timeout> milliseconds, if no more activity has occurred the\n      // user will be considered inactive\n      inactivityTimeout = this.setTimeout(function () {\n        // Protect against the case where the inactivityTimeout can trigger just\n        // before the next user activity is picked up by the activity check loop\n        // causing a flicker\n        if (!this.userActivity_) {\n          this.userActive(false);\n        }\n      }, timeout);\n    }, 250);\n  };\n\n  /**\n   * Gets or sets the current playback rate. A playback rate of\n   * 1.0 represents normal speed and 0.5 would indicate half-speed\n   * playback, for instance.\n   *\n   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-playbackrate\n   *\n   * @param {number} [rate]\n   *       New playback rate to set.\n   *\n   * @return {number}\n   *         The current playback rate when getting or 1.0\n   */\n\n\n  Player.prototype.playbackRate = function playbackRate(rate) {\n    if (rate !== undefined) {\n      // NOTE: this.cache_.lastPlaybackRate is set from the tech handler\n      // that is registered above\n      this.techCall_('setPlaybackRate', rate);\n      return;\n    }\n\n    if (this.tech_ && this.tech_.featuresPlaybackRate) {\n      return this.cache_.lastPlaybackRate || this.techGet_('playbackRate');\n    }\n    return 1.0;\n  };\n\n  /**\n   * Gets or sets the current default playback rate. A default playback rate of\n   * 1.0 represents normal speed and 0.5 would indicate half-speed playback, for instance.\n   * defaultPlaybackRate will only represent what the initial playbackRate of a video was, not\n   * not the current playbackRate.\n   *\n   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-defaultplaybackrate\n   *\n   * @param {number} [rate]\n   *       New default playback rate to set.\n   *\n   * @return {number|Player}\n   *         - The default playback rate when getting or 1.0\n   *         - the player when setting\n   */\n\n\n  Player.prototype.defaultPlaybackRate = function defaultPlaybackRate(rate) {\n    if (rate !== undefined) {\n      return this.techCall_('setDefaultPlaybackRate', rate);\n    }\n\n    if (this.tech_ && this.tech_.featuresPlaybackRate) {\n      return this.techGet_('defaultPlaybackRate');\n    }\n    return 1.0;\n  };\n\n  /**\n   * Gets or sets the audio flag\n   *\n   * @param {boolean} bool\n   *        - true signals that this is an audio player\n   *        - false signals that this is not an audio player\n   *\n   * @return {boolean}\n   *         The current value of isAudio when getting\n   */\n\n\n  Player.prototype.isAudio = function isAudio(bool) {\n    if (bool !== undefined) {\n      this.isAudio_ = !!bool;\n      return;\n    }\n\n    return !!this.isAudio_;\n  };\n\n  /**\n   * A helper method for adding a {@link TextTrack} to our\n   * {@link TextTrackList}.\n   *\n   * In addition to the W3C settings we allow adding additional info through options.\n   *\n   * @see http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-addtexttrack\n   *\n   * @param {string} [kind]\n   *        the kind of TextTrack you are adding\n   *\n   * @param {string} [label]\n   *        the label to give the TextTrack label\n   *\n   * @param {string} [language]\n   *        the language to set on the TextTrack\n   *\n   * @return {TextTrack|undefined}\n   *         the TextTrack that was added or undefined\n   *         if there is no tech\n   */\n\n\n  Player.prototype.addTextTrack = function addTextTrack(kind, label, language) {\n    if (this.tech_) {\n      return this.tech_.addTextTrack(kind, label, language);\n    }\n  };\n\n  /**\n   * Create a remote {@link TextTrack} and an {@link HTMLTrackElement}. It will\n   * automatically removed from the video element whenever the source changes, unless\n   * manualCleanup is set to false.\n   *\n   * @param {Object} options\n   *        Options to pass to {@link HTMLTrackElement} during creation. See\n   *        {@link HTMLTrackElement} for object properties that you should use.\n   *\n   * @param {boolean} [manualCleanup=true] if set to false, the TextTrack will be\n   *\n   * @return {HtmlTrackElement}\n   *         the HTMLTrackElement that was created and added\n   *         to the HtmlTrackElementList and the remote\n   *         TextTrackList\n   *\n   * @deprecated The default value of the \"manualCleanup\" parameter will default\n   *             to \"false\" in upcoming versions of Video.js\n   */\n\n\n  Player.prototype.addRemoteTextTrack = function addRemoteTextTrack(options, manualCleanup) {\n    if (this.tech_) {\n      return this.tech_.addRemoteTextTrack(options, manualCleanup);\n    }\n  };\n\n  /**\n   * Remove a remote {@link TextTrack} from the respective\n   * {@link TextTrackList} and {@link HtmlTrackElementList}.\n   *\n   * @param {Object} track\n   *        Remote {@link TextTrack} to remove\n   *\n   * @return {undefined}\n   *         does not return anything\n   */\n\n\n  Player.prototype.removeRemoteTextTrack = function removeRemoteTextTrack() {\n    var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref3$track = _ref3.track,\n        track = _ref3$track === undefined ? arguments[0] : _ref3$track;\n\n    // destructure the input into an object with a track argument, defaulting to arguments[0]\n    // default the whole argument to an empty object if nothing was passed in\n\n    if (this.tech_) {\n      return this.tech_.removeRemoteTextTrack(track);\n    }\n  };\n\n  /**\n   * Gets available media playback quality metrics as specified by the W3C's Media\n   * Playback Quality API.\n   *\n   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}\n   *\n   * @return {Object|undefined}\n   *         An object with supported media playback quality metrics or undefined if there\n   *         is no tech or the tech does not support it.\n   */\n\n\n  Player.prototype.getVideoPlaybackQuality = function getVideoPlaybackQuality() {\n    return this.techGet_('getVideoPlaybackQuality');\n  };\n\n  /**\n   * Get video width\n   *\n   * @return {number}\n   *         current video width\n   */\n\n\n  Player.prototype.videoWidth = function videoWidth() {\n    return this.tech_ && this.tech_.videoWidth && this.tech_.videoWidth() || 0;\n  };\n\n  /**\n   * Get video height\n   *\n   * @return {number}\n   *         current video height\n   */\n\n\n  Player.prototype.videoHeight = function videoHeight() {\n    return this.tech_ && this.tech_.videoHeight && this.tech_.videoHeight() || 0;\n  };\n\n  /**\n   * The player's language code\n   * NOTE: The language should be set in the player options if you want the\n   * the controls to be built with a specific language. Changing the language\n   * later will not update controls text.\n   *\n   * @param {string} [code]\n   *        the language code to set the player to\n   *\n   * @return {string}\n   *         The current language code when getting\n   */\n\n\n  Player.prototype.language = function language(code) {\n    if (code === undefined) {\n      return this.language_;\n    }\n\n    this.language_ = String(code).toLowerCase();\n  };\n\n  /**\n   * Get the player's language dictionary\n   * Merge every time, because a newly added plugin might call videojs.addLanguage() at any time\n   * Languages specified directly in the player options have precedence\n   *\n   * @return {Array}\n   *         An array of of supported languages\n   */\n\n\n  Player.prototype.languages = function languages() {\n    return mergeOptions(Player.prototype.options_.languages, this.languages_);\n  };\n\n  /**\n   * returns a JavaScript object reperesenting the current track\n   * information. **DOES not return it as JSON**\n   *\n   * @return {Object}\n   *         Object representing the current of track info\n   */\n\n\n  Player.prototype.toJSON = function toJSON() {\n    var options = mergeOptions(this.options_);\n    var tracks = options.tracks;\n\n    options.tracks = [];\n\n    for (var i = 0; i < tracks.length; i++) {\n      var track = tracks[i];\n\n      // deep merge tracks and null out player so no circular references\n      track = mergeOptions(track);\n      track.player = undefined;\n      options.tracks[i] = track;\n    }\n\n    return options;\n  };\n\n  /**\n   * Creates a simple modal dialog (an instance of the {@link ModalDialog}\n   * component) that immediately overlays the player with arbitrary\n   * content and removes itself when closed.\n   *\n   * @param {string|Function|Element|Array|null} content\n   *        Same as {@link ModalDialog#content}'s param of the same name.\n   *        The most straight-forward usage is to provide a string or DOM\n   *        element.\n   *\n   * @param {Object} [options]\n   *        Extra options which will be passed on to the {@link ModalDialog}.\n   *\n   * @return {ModalDialog}\n   *         the {@link ModalDialog} that was created\n   */\n\n\n  Player.prototype.createModal = function createModal(content, options) {\n    var _this12 = this;\n\n    options = options || {};\n    options.content = content || '';\n\n    var modal = new ModalDialog(this, options);\n\n    this.addChild(modal);\n    modal.on('dispose', function () {\n      _this12.removeChild(modal);\n    });\n\n    modal.open();\n    return modal;\n  };\n\n  /**\n   * Gets tag settings\n   *\n   * @param {Element} tag\n   *        The player tag\n   *\n   * @return {Object}\n   *         An object containing all of the settings\n   *         for a player tag\n   */\n\n\n  Player.getTagSettings = function getTagSettings(tag) {\n    var baseOptions = {\n      sources: [],\n      tracks: []\n    };\n\n    var tagOptions = getAttributes(tag);\n    var dataSetup = tagOptions['data-setup'];\n\n    if (hasClass(tag, 'vjs-fluid')) {\n      tagOptions.fluid = true;\n    }\n\n    // Check if data-setup attr exists.\n    if (dataSetup !== null) {\n      // Parse options JSON\n      // If empty string, make it a parsable json object.\n      var _safeParseTuple = safeParseTuple(dataSetup || '{}'),\n          err = _safeParseTuple[0],\n          data = _safeParseTuple[1];\n\n      if (err) {\n        log$1.error(err);\n      }\n      assign(tagOptions, data);\n    }\n\n    assign(baseOptions, tagOptions);\n\n    // Get tag children settings\n    if (tag.hasChildNodes()) {\n      var children = tag.childNodes;\n\n      for (var i = 0, j = children.length; i < j; i++) {\n        var child = children[i];\n        // Change case needed: http://ejohn.org/blog/nodename-case-sensitivity/\n        var childName = child.nodeName.toLowerCase();\n\n        if (childName === 'source') {\n          baseOptions.sources.push(getAttributes(child));\n        } else if (childName === 'track') {\n          baseOptions.tracks.push(getAttributes(child));\n        }\n      }\n    }\n\n    return baseOptions;\n  };\n\n  /**\n   * Determine whether or not flexbox is supported\n   *\n   * @return {boolean}\n   *         - true if flexbox is supported\n   *         - false if flexbox is not supported\n   */\n\n\n  Player.prototype.flexNotSupported_ = function flexNotSupported_() {\n    var elem = document.createElement('i');\n\n    // Note: We don't actually use flexBasis (or flexOrder), but it's one of the more\n    // common flex features that we can rely on when checking for flex support.\n    return !('flexBasis' in elem.style || 'webkitFlexBasis' in elem.style || 'mozFlexBasis' in elem.style || 'msFlexBasis' in elem.style ||\n    // IE10-specific (2012 flex spec), available for completeness\n    'msFlexOrder' in elem.style);\n  };\n\n  return Player;\n}(Component);\n\n/**\n * Get the {@link VideoTrackList}\n * @link https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist\n *\n * @return {VideoTrackList}\n *         the current video track list\n *\n * @method Player.prototype.videoTracks\n */\n\n/**\n * Get the {@link AudioTrackList}\n * @link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist\n *\n * @return {AudioTrackList}\n *         the current audio track list\n *\n * @method Player.prototype.audioTracks\n */\n\n/**\n * Get the {@link TextTrackList}\n *\n * @link http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-texttracks\n *\n * @return {TextTrackList}\n *         the current text track list\n *\n * @method Player.prototype.textTracks\n */\n\n/**\n * Get the remote {@link TextTrackList}\n *\n * @return {TextTrackList}\n *         The current remote text track list\n *\n * @method Player.prototype.remoteTextTracks\n */\n\n/**\n * Get the remote {@link HtmlTrackElementList} tracks.\n *\n * @return {HtmlTrackElementList}\n *         The current remote text track element list\n *\n * @method Player.prototype.remoteTextTrackEls\n */\n\nALL.names.forEach(function (name$$1) {\n  var props = ALL[name$$1];\n\n  Player.prototype[props.getterName] = function () {\n    if (this.tech_) {\n      return this.tech_[props.getterName]();\n    }\n\n    // if we have not yet loadTech_, we create {video,audio,text}Tracks_\n    // these will be passed to the tech during loading\n    this[props.privateName] = this[props.privateName] || new props.ListClass();\n    return this[props.privateName];\n  };\n});\n\n/**\n * Global player list\n *\n * @type {Object}\n */\nPlayer.players = {};\n\nvar navigator = window$1.navigator;\n\n/*\n * Player instance options, surfaced using options\n * options = Player.prototype.options_\n * Make changes in options, not here.\n *\n * @type {Object}\n * @private\n */\nPlayer.prototype.options_ = {\n  // Default order of fallback technology\n  techOrder: Tech.defaultTechOrder_,\n\n  html5: {},\n  flash: {},\n\n  // default inactivity timeout\n  inactivityTimeout: 2000,\n\n  // default playback rates\n  playbackRates: [],\n  // Add playback rate selection by adding rates\n  // 'playbackRates': [0.5, 1, 1.5, 2],\n\n  // Included control sets\n  children: ['mediaLoader', 'posterImage', 'textTrackDisplay', 'loadingSpinner', 'bigPlayButton', 'controlBar', 'errorDisplay', 'textTrackSettings', 'resizeManager'],\n\n  language: navigator && (navigator.languages && navigator.languages[0] || navigator.userLanguage || navigator.language) || 'en',\n\n  // locales and their language translations\n  languages: {},\n\n  // Default message to show when a video cannot be played.\n  notSupportedMessage: 'No compatible source was found for this media.'\n};\n\n[\n/**\n * Returns whether or not the player is in the \"ended\" state.\n *\n * @return {Boolean} True if the player is in the ended state, false if not.\n * @method Player#ended\n */\n'ended',\n/**\n * Returns whether or not the player is in the \"seeking\" state.\n *\n * @return {Boolean} True if the player is in the seeking state, false if not.\n * @method Player#seeking\n */\n'seeking',\n/**\n * Returns the TimeRanges of the media that are currently available\n * for seeking to.\n *\n * @return {TimeRanges} the seekable intervals of the media timeline\n * @method Player#seekable\n */\n'seekable',\n/**\n * Returns the current state of network activity for the element, from\n * the codes in the list below.\n * - NETWORK_EMPTY (numeric value 0)\n *   The element has not yet been initialised. All attributes are in\n *   their initial states.\n * - NETWORK_IDLE (numeric value 1)\n *   The element's resource selection algorithm is active and has\n *   selected a resource, but it is not actually using the network at\n *   this time.\n * - NETWORK_LOADING (numeric value 2)\n *   The user agent is actively trying to download data.\n * - NETWORK_NO_SOURCE (numeric value 3)\n *   The element's resource selection algorithm is active, but it has\n *   not yet found a resource to use.\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#network-states\n * @return {number} the current network activity state\n * @method Player#networkState\n */\n'networkState',\n/**\n * Returns a value that expresses the current state of the element\n * with respect to rendering the current playback position, from the\n * codes in the list below.\n * - HAVE_NOTHING (numeric value 0)\n *   No information regarding the media resource is available.\n * - HAVE_METADATA (numeric value 1)\n *   Enough of the resource has been obtained that the duration of the\n *   resource is available.\n * - HAVE_CURRENT_DATA (numeric value 2)\n *   Data for the immediate current playback position is available.\n * - HAVE_FUTURE_DATA (numeric value 3)\n *   Data for the immediate current playback position is available, as\n *   well as enough data for the user agent to advance the current\n *   playback position in the direction of playback.\n * - HAVE_ENOUGH_DATA (numeric value 4)\n *   The user agent estimates that enough data is available for\n *   playback to proceed uninterrupted.\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-readystate\n * @return {number} the current playback rendering state\n * @method Player#readyState\n */\n'readyState'].forEach(function (fn) {\n  Player.prototype[fn] = function () {\n    return this.techGet_(fn);\n  };\n});\n\nTECH_EVENTS_RETRIGGER.forEach(function (event) {\n  Player.prototype['handleTech' + toTitleCase(event) + '_'] = function () {\n    return this.trigger(event);\n  };\n});\n\n/**\n * Fired when the player has initial duration and dimension information\n *\n * @event Player#loadedmetadata\n * @type {EventTarget~Event}\n */\n\n/**\n * Fired when the player has downloaded data at the current playback position\n *\n * @event Player#loadeddata\n * @type {EventTarget~Event}\n */\n\n/**\n * Fired when the current playback position has changed *\n * During playback this is fired every 15-250 milliseconds, depending on the\n * playback technology in use.\n *\n * @event Player#timeupdate\n * @type {EventTarget~Event}\n */\n\n/**\n * Fired when the volume changes\n *\n * @event Player#volumechange\n * @type {EventTarget~Event}\n */\n\n/**\n * Reports whether or not a player has a plugin available.\n *\n * This does not report whether or not the plugin has ever been initialized\n * on this player. For that, [usingPlugin]{@link Player#usingPlugin}.\n *\n * @method Player#hasPlugin\n * @param  {string}  name\n *         The name of a plugin.\n *\n * @return {boolean}\n *         Whether or not this player has the requested plugin available.\n */\n\n/**\n * Reports whether or not a player is using a plugin by name.\n *\n * For basic plugins, this only reports whether the plugin has _ever_ been\n * initialized on this player.\n *\n * @method Player#usingPlugin\n * @param  {string} name\n *         The name of a plugin.\n *\n * @return {boolean}\n *         Whether or not this player is using the requested plugin.\n */\n\nComponent.registerComponent('Player', Player);\n\n/**\n * @file plugin.js\n */\n\n/**\n * The base plugin name.\n *\n * @private\n * @constant\n * @type {string}\n */\nvar BASE_PLUGIN_NAME = 'plugin';\n\n/**\n * The key on which a player's active plugins cache is stored.\n *\n * @private\n * @constant\n * @type     {string}\n */\nvar PLUGIN_CACHE_KEY = 'activePlugins_';\n\n/**\n * Stores registered plugins in a private space.\n *\n * @private\n * @type    {Object}\n */\nvar pluginStorage = {};\n\n/**\n * Reports whether or not a plugin has been registered.\n *\n * @private\n * @param   {string} name\n *          The name of a plugin.\n *\n * @returns {boolean}\n *          Whether or not the plugin has been registered.\n */\nvar pluginExists = function pluginExists(name) {\n  return pluginStorage.hasOwnProperty(name);\n};\n\n/**\n * Get a single registered plugin by name.\n *\n * @private\n * @param   {string} name\n *          The name of a plugin.\n *\n * @returns {Function|undefined}\n *          The plugin (or undefined).\n */\nvar getPlugin = function getPlugin(name) {\n  return pluginExists(name) ? pluginStorage[name] : undefined;\n};\n\n/**\n * Marks a plugin as \"active\" on a player.\n *\n * Also, ensures that the player has an object for tracking active plugins.\n *\n * @private\n * @param   {Player} player\n *          A Video.js player instance.\n *\n * @param   {string} name\n *          The name of a plugin.\n */\nvar markPluginAsActive = function markPluginAsActive(player, name) {\n  player[PLUGIN_CACHE_KEY] = player[PLUGIN_CACHE_KEY] || {};\n  player[PLUGIN_CACHE_KEY][name] = true;\n};\n\n/**\n * Triggers a pair of plugin setup events.\n *\n * @private\n * @param  {Player} player\n *         A Video.js player instance.\n *\n * @param  {Plugin~PluginEventHash} hash\n *         A plugin event hash.\n *\n * @param  {Boolean} [before]\n *         If true, prefixes the event name with \"before\". In other words,\n *         use this to trigger \"beforepluginsetup\" instead of \"pluginsetup\".\n */\nvar triggerSetupEvent = function triggerSetupEvent(player, hash, before) {\n  var eventName = (before ? 'before' : '') + 'pluginsetup';\n\n  player.trigger(eventName, hash);\n  player.trigger(eventName + ':' + hash.name, hash);\n};\n\n/**\n * Takes a basic plugin function and returns a wrapper function which marks\n * on the player that the plugin has been activated.\n *\n * @private\n * @param   {string} name\n *          The name of the plugin.\n *\n * @param   {Function} plugin\n *          The basic plugin.\n *\n * @returns {Function}\n *          A wrapper function for the given plugin.\n */\nvar createBasicPlugin = function createBasicPlugin(name, plugin) {\n  var basicPluginWrapper = function basicPluginWrapper() {\n\n    // We trigger the \"beforepluginsetup\" and \"pluginsetup\" events on the player\n    // regardless, but we want the hash to be consistent with the hash provided\n    // for advanced plugins.\n    //\n    // The only potentially counter-intuitive thing here is the `instance` in\n    // the \"pluginsetup\" event is the value returned by the `plugin` function.\n    triggerSetupEvent(this, { name: name, plugin: plugin, instance: null }, true);\n\n    var instance = plugin.apply(this, arguments);\n\n    markPluginAsActive(this, name);\n    triggerSetupEvent(this, { name: name, plugin: plugin, instance: instance });\n\n    return instance;\n  };\n\n  Object.keys(plugin).forEach(function (prop) {\n    basicPluginWrapper[prop] = plugin[prop];\n  });\n\n  return basicPluginWrapper;\n};\n\n/**\n * Takes a plugin sub-class and returns a factory function for generating\n * instances of it.\n *\n * This factory function will replace itself with an instance of the requested\n * sub-class of Plugin.\n *\n * @private\n * @param   {string} name\n *          The name of the plugin.\n *\n * @param   {Plugin} PluginSubClass\n *          The advanced plugin.\n *\n * @returns {Function}\n */\nvar createPluginFactory = function createPluginFactory(name, PluginSubClass) {\n\n  // Add a `name` property to the plugin prototype so that each plugin can\n  // refer to itself by name.\n  PluginSubClass.prototype.name = name;\n\n  return function () {\n    triggerSetupEvent(this, { name: name, plugin: PluginSubClass, instance: null }, true);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var instance = new (Function.prototype.bind.apply(PluginSubClass, [null].concat([this].concat(args))))();\n\n    // The plugin is replaced by a function that returns the current instance.\n    this[name] = function () {\n      return instance;\n    };\n\n    triggerSetupEvent(this, instance.getEventHash());\n\n    return instance;\n  };\n};\n\n/**\n * Parent class for all advanced plugins.\n *\n * @mixes   module:evented~EventedMixin\n * @mixes   module:stateful~StatefulMixin\n * @fires   Player#beforepluginsetup\n * @fires   Player#beforepluginsetup:$name\n * @fires   Player#pluginsetup\n * @fires   Player#pluginsetup:$name\n * @listens Player#dispose\n * @throws  {Error}\n *          If attempting to instantiate the base {@link Plugin} class\n *          directly instead of via a sub-class.\n */\n\nvar Plugin = function () {\n\n  /**\n   * Creates an instance of this class.\n   *\n   * Sub-classes should call `super` to ensure plugins are properly initialized.\n   *\n   * @param {Player} player\n   *        A Video.js player instance.\n   */\n  function Plugin(player) {\n    classCallCheck(this, Plugin);\n\n    if (this.constructor === Plugin) {\n      throw new Error('Plugin must be sub-classed; not directly instantiated.');\n    }\n\n    this.player = player;\n\n    // Make this object evented, but remove the added `trigger` method so we\n    // use the prototype version instead.\n    evented(this);\n    delete this.trigger;\n\n    stateful(this, this.constructor.defaultState);\n    markPluginAsActive(player, this.name);\n\n    // Auto-bind the dispose method so we can use it as a listener and unbind\n    // it later easily.\n    this.dispose = bind(this, this.dispose);\n\n    // If the player is disposed, dispose the plugin.\n    player.on('dispose', this.dispose);\n  }\n\n  /**\n   * Get the version of the plugin that was set on <pluginName>.VERSION\n   */\n\n\n  Plugin.prototype.version = function version() {\n    return this.constructor.VERSION;\n  };\n\n  /**\n   * Each event triggered by plugins includes a hash of additional data with\n   * conventional properties.\n   *\n   * This returns that object or mutates an existing hash.\n   *\n   * @param   {Object} [hash={}]\n   *          An object to be used as event an event hash.\n   *\n   * @returns {Plugin~PluginEventHash}\n   *          An event hash object with provided properties mixed-in.\n   */\n\n\n  Plugin.prototype.getEventHash = function getEventHash() {\n    var hash = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    hash.name = this.name;\n    hash.plugin = this.constructor;\n    hash.instance = this;\n    return hash;\n  };\n\n  /**\n   * Triggers an event on the plugin object and overrides\n   * {@link module:evented~EventedMixin.trigger|EventedMixin.trigger}.\n   *\n   * @param   {string|Object} event\n   *          An event type or an object with a type property.\n   *\n   * @param   {Object} [hash={}]\n   *          Additional data hash to merge with a\n   *          {@link Plugin~PluginEventHash|PluginEventHash}.\n   *\n   * @returns {boolean}\n   *          Whether or not default was prevented.\n   */\n\n\n  Plugin.prototype.trigger = function trigger$$1(event) {\n    var hash = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    return trigger(this.eventBusEl_, event, this.getEventHash(hash));\n  };\n\n  /**\n   * Handles \"statechanged\" events on the plugin. No-op by default, override by\n   * subclassing.\n   *\n   * @abstract\n   * @param    {Event} e\n   *           An event object provided by a \"statechanged\" event.\n   *\n   * @param    {Object} e.changes\n   *           An object describing changes that occurred with the \"statechanged\"\n   *           event.\n   */\n\n\n  Plugin.prototype.handleStateChanged = function handleStateChanged(e) {};\n\n  /**\n   * Disposes a plugin.\n   *\n   * Subclasses can override this if they want, but for the sake of safety,\n   * it's probably best to subscribe the \"dispose\" event.\n   *\n   * @fires Plugin#dispose\n   */\n\n\n  Plugin.prototype.dispose = function dispose() {\n    var name = this.name,\n        player = this.player;\n\n    /**\n     * Signals that a advanced plugin is about to be disposed.\n     *\n     * @event Plugin#dispose\n     * @type  {EventTarget~Event}\n     */\n\n    this.trigger('dispose');\n    this.off();\n    player.off('dispose', this.dispose);\n\n    // Eliminate any possible sources of leaking memory by clearing up\n    // references between the player and the plugin instance and nulling out\n    // the plugin's state and replacing methods with a function that throws.\n    player[PLUGIN_CACHE_KEY][name] = false;\n    this.player = this.state = null;\n\n    // Finally, replace the plugin name on the player with a new factory\n    // function, so that the plugin is ready to be set up again.\n    player[name] = createPluginFactory(name, pluginStorage[name]);\n  };\n\n  /**\n   * Determines if a plugin is a basic plugin (i.e. not a sub-class of `Plugin`).\n   *\n   * @param   {string|Function} plugin\n   *          If a string, matches the name of a plugin. If a function, will be\n   *          tested directly.\n   *\n   * @returns {boolean}\n   *          Whether or not a plugin is a basic plugin.\n   */\n\n\n  Plugin.isBasic = function isBasic(plugin) {\n    var p = typeof plugin === 'string' ? getPlugin(plugin) : plugin;\n\n    return typeof p === 'function' && !Plugin.prototype.isPrototypeOf(p.prototype);\n  };\n\n  /**\n   * Register a Video.js plugin.\n   *\n   * @param   {string} name\n   *          The name of the plugin to be registered. Must be a string and\n   *          must not match an existing plugin or a method on the `Player`\n   *          prototype.\n   *\n   * @param   {Function} plugin\n   *          A sub-class of `Plugin` or a function for basic plugins.\n   *\n   * @returns {Function}\n   *          For advanced plugins, a factory function for that plugin. For\n   *          basic plugins, a wrapper function that initializes the plugin.\n   */\n\n\n  Plugin.registerPlugin = function registerPlugin(name, plugin) {\n    if (typeof name !== 'string') {\n      throw new Error('Illegal plugin name, \"' + name + '\", must be a string, was ' + (typeof name === 'undefined' ? 'undefined' : _typeof(name)) + '.');\n    }\n\n    if (pluginExists(name)) {\n      log$1.warn('A plugin named \"' + name + '\" already exists. You may want to avoid re-registering plugins!');\n    } else if (Player.prototype.hasOwnProperty(name)) {\n      throw new Error('Illegal plugin name, \"' + name + '\", cannot share a name with an existing player method!');\n    }\n\n    if (typeof plugin !== 'function') {\n      throw new Error('Illegal plugin for \"' + name + '\", must be a function, was ' + (typeof plugin === 'undefined' ? 'undefined' : _typeof(plugin)) + '.');\n    }\n\n    pluginStorage[name] = plugin;\n\n    // Add a player prototype method for all sub-classed plugins (but not for\n    // the base Plugin class).\n    if (name !== BASE_PLUGIN_NAME) {\n      if (Plugin.isBasic(plugin)) {\n        Player.prototype[name] = createBasicPlugin(name, plugin);\n      } else {\n        Player.prototype[name] = createPluginFactory(name, plugin);\n      }\n    }\n\n    return plugin;\n  };\n\n  /**\n   * De-register a Video.js plugin.\n   *\n   * @param {string} name\n   *        The name of the plugin to be deregistered.\n   */\n\n\n  Plugin.deregisterPlugin = function deregisterPlugin(name) {\n    if (name === BASE_PLUGIN_NAME) {\n      throw new Error('Cannot de-register base plugin.');\n    }\n    if (pluginExists(name)) {\n      delete pluginStorage[name];\n      delete Player.prototype[name];\n    }\n  };\n\n  /**\n   * Gets an object containing multiple Video.js plugins.\n   *\n   * @param   {Array} [names]\n   *          If provided, should be an array of plugin names. Defaults to _all_\n   *          plugin names.\n   *\n   * @returns {Object|undefined}\n   *          An object containing plugin(s) associated with their name(s) or\n   *          `undefined` if no matching plugins exist).\n   */\n\n\n  Plugin.getPlugins = function getPlugins() {\n    var names = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Object.keys(pluginStorage);\n\n    var result = void 0;\n\n    names.forEach(function (name) {\n      var plugin = getPlugin(name);\n\n      if (plugin) {\n        result = result || {};\n        result[name] = plugin;\n      }\n    });\n\n    return result;\n  };\n\n  /**\n   * Gets a plugin's version, if available\n   *\n   * @param   {string} name\n   *          The name of a plugin.\n   *\n   * @returns {string}\n   *          The plugin's version or an empty string.\n   */\n\n\n  Plugin.getPluginVersion = function getPluginVersion(name) {\n    var plugin = getPlugin(name);\n\n    return plugin && plugin.VERSION || '';\n  };\n\n  return Plugin;\n}();\n\n/**\n * Gets a plugin by name if it exists.\n *\n * @static\n * @method   getPlugin\n * @memberOf Plugin\n * @param    {string} name\n *           The name of a plugin.\n *\n * @returns  {Function|undefined}\n *           The plugin (or `undefined`).\n */\n\n\nPlugin.getPlugin = getPlugin;\n\n/**\n * The name of the base plugin class as it is registered.\n *\n * @type {string}\n */\nPlugin.BASE_PLUGIN_NAME = BASE_PLUGIN_NAME;\n\nPlugin.registerPlugin(BASE_PLUGIN_NAME, Plugin);\n\n/**\n * Documented in player.js\n *\n * @ignore\n */\nPlayer.prototype.usingPlugin = function (name) {\n  return !!this[PLUGIN_CACHE_KEY] && this[PLUGIN_CACHE_KEY][name] === true;\n};\n\n/**\n * Documented in player.js\n *\n * @ignore\n */\nPlayer.prototype.hasPlugin = function (name) {\n  return !!pluginExists(name);\n};\n\n/**\n * @file extend.js\n * @module extend\n */\n\n/**\n * A combination of node inherits and babel's inherits (after transpile).\n * Both work the same but node adds `super_` to the subClass\n * and Bable adds the superClass as __proto__. Both seem useful.\n *\n * @param {Object} subClass\n *        The class to inherit to\n *\n * @param {Object} superClass\n *        The class to inherit from\n *\n * @private\n */\nvar _inherits = function _inherits(subClass, superClass) {\n  if (typeof superClass !== 'function' && superClass !== null) {\n    throw new TypeError('Super expression must either be null or a function, not ' + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (superClass) {\n    // node\n    subClass.super_ = superClass;\n  }\n};\n\n/**\n * Function for subclassing using the same inheritance that\n * videojs uses internally\n *\n * @static\n * @const\n *\n * @param {Object} superClass\n *        The class to inherit from\n *\n * @param {Object} [subClassMethods={}]\n *        The class to inherit to\n *\n * @return {Object}\n *         The new object with subClassMethods that inherited superClass.\n */\nvar extendFn = function extendFn(superClass) {\n  var subClassMethods = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var subClass = function subClass() {\n    superClass.apply(this, arguments);\n  };\n\n  var methods = {};\n\n  if ((typeof subClassMethods === 'undefined' ? 'undefined' : _typeof(subClassMethods)) === 'object') {\n    if (subClassMethods.constructor !== Object.prototype.constructor) {\n      subClass = subClassMethods.constructor;\n    }\n    methods = subClassMethods;\n  } else if (typeof subClassMethods === 'function') {\n    subClass = subClassMethods;\n  }\n\n  _inherits(subClass, superClass);\n\n  // Extend subObj's prototype with functions and other properties from props\n  for (var name in methods) {\n    if (methods.hasOwnProperty(name)) {\n      subClass.prototype[name] = methods[name];\n    }\n  }\n\n  return subClass;\n};\n\n/**\n * @file video.js\n * @module videojs\n */\n\n/**\n * Normalize an `id` value by trimming off a leading `#`\n *\n * @param   {string} id\n *          A string, maybe with a leading `#`.\n *\n * @returns {string}\n *          The string, without any leading `#`.\n */\nvar normalizeId = function normalizeId(id) {\n  return id.indexOf('#') === 0 ? id.slice(1) : id;\n};\n\n/**\n * Doubles as the main function for users to create a player instance and also\n * the main library object.\n * The `videojs` function can be used to initialize or retrieve a player.\n  *\n * @param {string|Element} id\n *        Video element or video element ID\n *\n * @param {Object} [options]\n *        Optional options object for config/settings\n *\n * @param {Component~ReadyCallback} [ready]\n *        Optional ready callback\n *\n * @return {Player}\n *         A player instance\n */\nfunction videojs$1(id, options, ready) {\n  var player = videojs$1.getPlayer(id);\n\n  if (player) {\n    if (options) {\n      log$1.warn('Player \"' + id + '\" is already initialised. Options will not be applied.');\n    }\n    if (ready) {\n      player.ready(ready);\n    }\n    return player;\n  }\n\n  var el = typeof id === 'string' ? $('#' + normalizeId(id)) : id;\n\n  if (!isEl(el)) {\n    throw new TypeError('The element or ID supplied is not valid. (videojs)');\n  }\n\n  if (!document.body.contains(el)) {\n    log$1.warn('The element supplied is not included in the DOM');\n  }\n\n  options = options || {};\n\n  videojs$1.hooks('beforesetup').forEach(function (hookFunction) {\n    var opts = hookFunction(el, mergeOptions(options));\n\n    if (!isObject(opts) || Array.isArray(opts)) {\n      log$1.error('please return an object in beforesetup hooks');\n      return;\n    }\n\n    options = mergeOptions(options, opts);\n  });\n\n  // We get the current \"Player\" component here in case an integration has\n  // replaced it with a custom player.\n  var PlayerComponent = Component.getComponent('Player');\n\n  player = new PlayerComponent(el, options, ready);\n\n  videojs$1.hooks('setup').forEach(function (hookFunction) {\n    return hookFunction(player);\n  });\n\n  return player;\n}\n\n/**\n * An Object that contains lifecycle hooks as keys which point to an array\n * of functions that are run when a lifecycle is triggered\n */\nvideojs$1.hooks_ = {};\n\n/**\n * Get a list of hooks for a specific lifecycle\n * @function videojs.hooks\n *\n * @param {string} type\n *        the lifecyle to get hooks from\n *\n * @param {Function|Function[]} [fn]\n *        Optionally add a hook (or hooks) to the lifecycle that your are getting.\n *\n * @return {Array}\n *         an array of hooks, or an empty array if there are none.\n */\nvideojs$1.hooks = function (type, fn) {\n  videojs$1.hooks_[type] = videojs$1.hooks_[type] || [];\n  if (fn) {\n    videojs$1.hooks_[type] = videojs$1.hooks_[type].concat(fn);\n  }\n  return videojs$1.hooks_[type];\n};\n\n/**\n * Add a function hook to a specific videojs lifecycle.\n *\n * @param {string} type\n *        the lifecycle to hook the function to.\n *\n * @param {Function|Function[]}\n *        The function or array of functions to attach.\n */\nvideojs$1.hook = function (type, fn) {\n  videojs$1.hooks(type, fn);\n};\n\n/**\n * Add a function hook that will only run once to a specific videojs lifecycle.\n *\n * @param {string} type\n *        the lifecycle to hook the function to.\n *\n * @param {Function|Function[]}\n *        The function or array of functions to attach.\n */\nvideojs$1.hookOnce = function (type, fn) {\n  videojs$1.hooks(type, [].concat(fn).map(function (original) {\n    var wrapper = function wrapper() {\n      videojs$1.removeHook(type, wrapper);\n      return original.apply(undefined, arguments);\n    };\n\n    return wrapper;\n  }));\n};\n\n/**\n * Remove a hook from a specific videojs lifecycle.\n *\n * @param {string} type\n *        the lifecycle that the function hooked to\n *\n * @param {Function} fn\n *        The hooked function to remove\n *\n * @return {boolean}\n *         The function that was removed or undef\n */\nvideojs$1.removeHook = function (type, fn) {\n  var index = videojs$1.hooks(type).indexOf(fn);\n\n  if (index <= -1) {\n    return false;\n  }\n\n  videojs$1.hooks_[type] = videojs$1.hooks_[type].slice();\n  videojs$1.hooks_[type].splice(index, 1);\n\n  return true;\n};\n\n// Add default styles\nif (window$1.VIDEOJS_NO_DYNAMIC_STYLE !== true && isReal()) {\n  var style$1 = $('.vjs-styles-defaults');\n\n  if (!style$1) {\n    style$1 = createStyleElement('vjs-styles-defaults');\n    var head = $('head');\n\n    if (head) {\n      head.insertBefore(style$1, head.firstChild);\n    }\n    setTextContent(style$1, '\\n      .video-js {\\n        width: 300px;\\n        height: 150px;\\n      }\\n\\n      .vjs-fluid {\\n        padding-top: 56.25%\\n      }\\n    ');\n  }\n}\n\n// Run Auto-load players\n// You have to wait at least once in case this script is loaded after your\n// video in the DOM (weird behavior only with minified version)\nautoSetupTimeout(1, videojs$1);\n\n/**\n * Current software version. Follows semver.\n *\n * @type {string}\n */\nvideojs$1.VERSION = version;\n\n/**\n * The global options object. These are the settings that take effect\n * if no overrides are specified when the player is created.\n *\n * @type {Object}\n */\nvideojs$1.options = Player.prototype.options_;\n\n/**\n * Get an object with the currently created players, keyed by player ID\n *\n * @return {Object}\n *         The created players\n */\nvideojs$1.getPlayers = function () {\n  return Player.players;\n};\n\n/**\n * Get a single player based on an ID or DOM element.\n *\n * This is useful if you want to check if an element or ID has an associated\n * Video.js player, but not create one if it doesn't.\n *\n * @param   {string|Element} id\n *          An HTML element - `<video>`, `<audio>`, or `<video-js>` -\n *          or a string matching the `id` of such an element.\n *\n * @returns {Player|undefined}\n *          A player instance or `undefined` if there is no player instance\n *          matching the argument.\n */\nvideojs$1.getPlayer = function (id) {\n  var players = Player.players;\n  var tag = void 0;\n\n  if (typeof id === 'string') {\n    var nId = normalizeId(id);\n    var player = players[nId];\n\n    if (player) {\n      return player;\n    }\n\n    tag = $('#' + nId);\n  } else {\n    tag = id;\n  }\n\n  if (isEl(tag)) {\n    var _tag = tag,\n        _player = _tag.player,\n        playerId = _tag.playerId;\n\n    // Element may have a `player` property referring to an already created\n    // player instance. If so, return that.\n\n    if (_player || players[playerId]) {\n      return _player || players[playerId];\n    }\n  }\n};\n\n/**\n * Returns an array of all current players.\n *\n * @return {Array}\n *         An array of all players. The array will be in the order that\n *         `Object.keys` provides, which could potentially vary between\n *         JavaScript engines.\n *\n */\nvideojs$1.getAllPlayers = function () {\n  return (\n\n    // Disposed players leave a key with a `null` value, so we need to make sure\n    // we filter those out.\n    Object.keys(Player.players).map(function (k) {\n      return Player.players[k];\n    }).filter(Boolean)\n  );\n};\n\n/**\n * Expose players object.\n *\n * @memberOf videojs\n * @property {Object} players\n */\nvideojs$1.players = Player.players;\n\n/**\n * Get a component class object by name\n *\n * @borrows Component.getComponent as videojs.getComponent\n */\nvideojs$1.getComponent = Component.getComponent;\n\n/**\n * Register a component so it can referred to by name. Used when adding to other\n * components, either through addChild `component.addChild('myComponent')` or through\n * default children options  `{ children: ['myComponent'] }`.\n *\n * > NOTE: You could also just initialize the component before adding.\n * `component.addChild(new MyComponent());`\n *\n * @param {string} name\n *        The class name of the component\n *\n * @param {Component} comp\n *        The component class\n *\n * @return {Component}\n *         The newly registered component\n */\nvideojs$1.registerComponent = function (name$$1, comp) {\n  if (Tech.isTech(comp)) {\n    log$1.warn('The ' + name$$1 + ' tech was registered as a component. It should instead be registered using videojs.registerTech(name, tech)');\n  }\n\n  Component.registerComponent.call(Component, name$$1, comp);\n};\n\n/**\n * Get a Tech class object by name\n *\n * @borrows Tech.getTech as videojs.getTech\n */\nvideojs$1.getTech = Tech.getTech;\n\n/**\n * Register a Tech so it can referred to by name.\n * This is used in the tech order for the player.\n *\n * @borrows Tech.registerTech as videojs.registerTech\n */\nvideojs$1.registerTech = Tech.registerTech;\n\n/**\n * Register a middleware to a source type.\n *\n * @param {String} type A string representing a MIME type.\n * @param {function(player):object} middleware A middleware factory that takes a player.\n */\nvideojs$1.use = use;\n\n/**\n * An object that can be returned by a middleware to signify\n * that the middleware is being terminated.\n *\n * @type {object}\n * @memberOf {videojs}\n * @property {object} middleware.TERMINATOR\n */\nObject.defineProperty(videojs$1, 'middleware', {\n  value: {},\n  writeable: false,\n  enumerable: true\n});\n\nObject.defineProperty(videojs$1.middleware, 'TERMINATOR', {\n  value: TERMINATOR,\n  writeable: false,\n  enumerable: true\n});\n\n/**\n * A suite of browser and device tests from {@link browser}.\n *\n * @type {Object}\n * @private\n */\nvideojs$1.browser = browser;\n\n/**\n * Whether or not the browser supports touch events. Included for backward\n * compatibility with 4.x, but deprecated. Use `videojs.browser.TOUCH_ENABLED`\n * instead going forward.\n *\n * @deprecated since version 5.0\n * @type {boolean}\n */\nvideojs$1.TOUCH_ENABLED = TOUCH_ENABLED;\n\n/**\n * Subclass an existing class\n * Mimics ES6 subclassing with the `extend` keyword\n *\n * @borrows extend:extendFn as videojs.extend\n */\nvideojs$1.extend = extendFn;\n\n/**\n * Merge two options objects recursively\n * Performs a deep merge like lodash.merge but **only merges plain objects**\n * (not arrays, elements, anything else)\n * Other values will be copied directly from the second object.\n *\n * @borrows merge-options:mergeOptions as videojs.mergeOptions\n */\nvideojs$1.mergeOptions = mergeOptions;\n\n/**\n * Change the context (this) of a function\n *\n * > NOTE: as of v5.0 we require an ES5 shim, so you should use the native\n * `function() {}.bind(newContext);` instead of this.\n *\n * @borrows fn:bind as videojs.bind\n */\nvideojs$1.bind = bind;\n\n/**\n * Register a Video.js plugin.\n *\n * @borrows plugin:registerPlugin as videojs.registerPlugin\n * @method registerPlugin\n *\n * @param  {string} name\n *         The name of the plugin to be registered. Must be a string and\n *         must not match an existing plugin or a method on the `Player`\n *         prototype.\n *\n * @param  {Function} plugin\n *         A sub-class of `Plugin` or a function for basic plugins.\n *\n * @return {Function}\n *         For advanced plugins, a factory function for that plugin. For\n *         basic plugins, a wrapper function that initializes the plugin.\n */\nvideojs$1.registerPlugin = Plugin.registerPlugin;\n\n/**\n * Deregister a Video.js plugin.\n *\n * @borrows plugin:deregisterPlugin as videojs.deregisterPlugin\n * @method deregisterPlugin\n *\n * @param  {string} name\n *         The name of the plugin to be deregistered. Must be a string and\n *         must match an existing plugin or a method on the `Player`\n *         prototype.\n *\n */\nvideojs$1.deregisterPlugin = Plugin.deregisterPlugin;\n\n/**\n * Deprecated method to register a plugin with Video.js\n *\n * @deprecated\n *        videojs.plugin() is deprecated; use videojs.registerPlugin() instead\n *\n * @param {string} name\n *        The plugin name\n *\n * @param {Plugin|Function} plugin\n *         The plugin sub-class or function\n */\nvideojs$1.plugin = function (name$$1, plugin) {\n  log$1.warn('videojs.plugin() is deprecated; use videojs.registerPlugin() instead');\n  return Plugin.registerPlugin(name$$1, plugin);\n};\n\n/**\n * Gets an object containing multiple Video.js plugins.\n *\n * @param  {Array} [names]\n *         If provided, should be an array of plugin names. Defaults to _all_\n *         plugin names.\n *\n * @return {Object|undefined}\n *         An object containing plugin(s) associated with their name(s) or\n *         `undefined` if no matching plugins exist).\n */\nvideojs$1.getPlugins = Plugin.getPlugins;\n\n/**\n * Gets a plugin by name if it exists.\n *\n * @param  {string} name\n *         The name of a plugin.\n *\n * @return {Function|undefined}\n *         The plugin (or `undefined`).\n */\nvideojs$1.getPlugin = Plugin.getPlugin;\n\n/**\n * Gets a plugin's version, if available\n *\n * @param  {string} name\n *         The name of a plugin.\n *\n * @return {string}\n *         The plugin's version or an empty string.\n */\nvideojs$1.getPluginVersion = Plugin.getPluginVersion;\n\n/**\n * Adding languages so that they're available to all players.\n * Example: `videojs.addLanguage('es', { 'Hello': 'Hola' });`\n *\n * @param {string} code\n *        The language code or dictionary property\n *\n * @param {Object} data\n *        The data values to be translated\n *\n * @return {Object}\n *         The resulting language dictionary object\n */\nvideojs$1.addLanguage = function (code, data) {\n  var _mergeOptions;\n\n  code = ('' + code).toLowerCase();\n\n  videojs$1.options.languages = mergeOptions(videojs$1.options.languages, (_mergeOptions = {}, _mergeOptions[code] = data, _mergeOptions));\n\n  return videojs$1.options.languages[code];\n};\n\n/**\n * Log messages\n *\n * @borrows log:log as videojs.log\n */\nvideojs$1.log = log$1;\n\n/**\n * Creates an emulated TimeRange object.\n *\n * @borrows time-ranges:createTimeRanges as videojs.createTimeRange\n */\n/**\n * @borrows time-ranges:createTimeRanges as videojs.createTimeRanges\n */\nvideojs$1.createTimeRange = videojs$1.createTimeRanges = createTimeRanges;\n\n/**\n * Format seconds as a time string, H:MM:SS or M:SS\n * Supplying a guide (in seconds) will force a number of leading zeros\n * to cover the length of the guide\n *\n * @borrows format-time:formatTime as videojs.formatTime\n */\nvideojs$1.formatTime = formatTime;\n\n/**\n * Replaces format-time with a custom implementation, to be used in place of the default.\n *\n * @borrows format-time:setFormatTime as videojs.setFormatTime\n *\n * @method setFormatTime\n *\n * @param {Function} customFn\n *        A custom format-time function which will be called with the current time and guide (in seconds) as arguments.\n *        Passed fn should return a string.\n */\nvideojs$1.setFormatTime = setFormatTime;\n\n/**\n * Resets format-time to the default implementation.\n *\n * @borrows format-time:resetFormatTime as videojs.resetFormatTime\n *\n * @method resetFormatTime\n */\nvideojs$1.resetFormatTime = resetFormatTime;\n\n/**\n * Resolve and parse the elements of a URL\n *\n * @borrows url:parseUrl as videojs.parseUrl\n *\n */\nvideojs$1.parseUrl = parseUrl;\n\n/**\n * Returns whether the url passed is a cross domain request or not.\n *\n * @borrows url:isCrossOrigin as videojs.isCrossOrigin\n */\nvideojs$1.isCrossOrigin = isCrossOrigin;\n\n/**\n * Event target class.\n *\n * @borrows EventTarget as videojs.EventTarget\n */\nvideojs$1.EventTarget = EventTarget;\n\n/**\n * Add an event listener to element\n * It stores the handler function in a separate cache object\n * and adds a generic handler to the element's event,\n * along with a unique id (guid) to the element.\n *\n * @borrows events:on as videojs.on\n */\nvideojs$1.on = on;\n\n/**\n * Trigger a listener only once for an event\n *\n * @borrows events:one as videojs.one\n */\nvideojs$1.one = one;\n\n/**\n * Removes event listeners from an element\n *\n * @borrows events:off as videojs.off\n */\nvideojs$1.off = off;\n\n/**\n * Trigger an event for an element\n *\n * @borrows events:trigger as videojs.trigger\n */\nvideojs$1.trigger = trigger;\n\n/**\n * A cross-browser XMLHttpRequest wrapper. Here's a simple example:\n *\n * @param {Object} options\n *        settings for the request.\n *\n * @return {XMLHttpRequest|XDomainRequest}\n *         The request object.\n *\n * @see https://github.com/Raynos/xhr\n */\nvideojs$1.xhr = xhr;\n\n/**\n * TextTrack class\n *\n * @borrows TextTrack as videojs.TextTrack\n */\nvideojs$1.TextTrack = TextTrack;\n\n/**\n * export the AudioTrack class so that source handlers can create\n * AudioTracks and then add them to the players AudioTrackList\n *\n * @borrows AudioTrack as videojs.AudioTrack\n */\nvideojs$1.AudioTrack = AudioTrack;\n\n/**\n * export the VideoTrack class so that source handlers can create\n * VideoTracks and then add them to the players VideoTrackList\n *\n * @borrows VideoTrack as videojs.VideoTrack\n */\nvideojs$1.VideoTrack = VideoTrack;\n\n/**\n * Determines, via duck typing, whether or not a value is a DOM element.\n *\n * @borrows dom:isEl as videojs.isEl\n * @deprecated Use videojs.dom.isEl() instead\n */\n\n/**\n * Determines, via duck typing, whether or not a value is a text node.\n *\n * @borrows dom:isTextNode as videojs.isTextNode\n * @deprecated Use videojs.dom.isTextNode() instead\n */\n\n/**\n * Creates an element and applies properties.\n *\n * @borrows dom:createEl as videojs.createEl\n * @deprecated Use videojs.dom.createEl() instead\n */\n\n/**\n * Check if an element has a CSS class\n *\n * @borrows dom:hasElClass as videojs.hasClass\n * @deprecated Use videojs.dom.hasClass() instead\n */\n\n/**\n * Add a CSS class name to an element\n *\n * @borrows dom:addElClass as videojs.addClass\n * @deprecated Use videojs.dom.addClass() instead\n */\n\n/**\n * Remove a CSS class name from an element\n *\n * @borrows dom:removeElClass as videojs.removeClass\n * @deprecated Use videojs.dom.removeClass() instead\n */\n\n/**\n * Adds or removes a CSS class name on an element depending on an optional\n * condition or the presence/absence of the class name.\n *\n * @borrows dom:toggleElClass as videojs.toggleClass\n * @deprecated Use videojs.dom.toggleClass() instead\n */\n\n/**\n * Apply attributes to an HTML element.\n *\n * @borrows dom:setElAttributes as videojs.setAttribute\n * @deprecated Use videojs.dom.setAttributes() instead\n */\n\n/**\n * Get an element's attribute values, as defined on the HTML tag\n * Attributes are not the same as properties. They're defined on the tag\n * or with setAttribute (which shouldn't be used with HTML)\n * This will return true or false for boolean attributes.\n *\n * @borrows dom:getElAttributes as videojs.getAttributes\n * @deprecated Use videojs.dom.getAttributes() instead\n */\n\n/**\n * Empties the contents of an element.\n *\n * @borrows dom:emptyEl as videojs.emptyEl\n * @deprecated Use videojs.dom.emptyEl() instead\n */\n\n/**\n * Normalizes and appends content to an element.\n *\n * The content for an element can be passed in multiple types and\n * combinations, whose behavior is as follows:\n *\n * - String\n *   Normalized into a text node.\n *\n * - Element, TextNode\n *   Passed through.\n *\n * - Array\n *   A one-dimensional array of strings, elements, nodes, or functions (which\n *   return single strings, elements, or nodes).\n *\n * - Function\n *   If the sole argument, is expected to produce a string, element,\n *   node, or array.\n *\n * @borrows dom:appendContents as videojs.appendContet\n * @deprecated Use videojs.dom.appendContent() instead\n */\n\n/**\n * Normalizes and inserts content into an element; this is identical to\n * `appendContent()`, except it empties the element first.\n *\n * The content for an element can be passed in multiple types and\n * combinations, whose behavior is as follows:\n *\n * - String\n *   Normalized into a text node.\n *\n * - Element, TextNode\n *   Passed through.\n *\n * - Array\n *   A one-dimensional array of strings, elements, nodes, or functions (which\n *   return single strings, elements, or nodes).\n *\n * - Function\n *   If the sole argument, is expected to produce a string, element,\n *   node, or array.\n *\n * @borrows dom:insertContent as videojs.insertContent\n * @deprecated Use videojs.dom.insertContent() instead\n */\n['isEl', 'isTextNode', 'createEl', 'hasClass', 'addClass', 'removeClass', 'toggleClass', 'setAttributes', 'getAttributes', 'emptyEl', 'appendContent', 'insertContent'].forEach(function (k) {\n  videojs$1[k] = function () {\n    log$1.warn('videojs.' + k + '() is deprecated; use videojs.dom.' + k + '() instead');\n    return Dom[k].apply(null, arguments);\n  };\n});\n\n/**\n * A safe getComputedStyle.\n *\n * This is because in Firefox, if the player is loaded in an iframe with `display:none`,\n * then `getComputedStyle` returns `null`, so, we do a null-check to make sure\n * that the player doesn't break in these cases.\n * See https://bugzilla.mozilla.org/show_bug.cgi?id=548397 for more details.\n *\n * @borrows computed-style:computedStyle as videojs.computedStyle\n */\nvideojs$1.computedStyle = computedStyle;\n\n/**\n * Export the Dom utilities for use in external plugins\n * and Tech's\n */\nvideojs$1.dom = Dom;\n\n/**\n * Export the Url utilities for use in external plugins\n * and Tech's\n */\nvideojs$1.url = Url;\n\n/**\n * @videojs/http-streaming\n * @version 1.2.5\n * @copyright 2018 Brightcove, Inc\n * @license Apache-2.0\n */\n\n/**\n * @file resolve-url.js\n */\n\nvar resolveUrl = function resolveUrl(baseURL, relativeURL) {\n  // return early if we don't need to resolve\n  if (/^[a-z]+:/i.test(relativeURL)) {\n    return relativeURL;\n  }\n\n  // if the base URL is relative then combine with the current location\n  if (!/\\/\\//i.test(baseURL)) {\n    baseURL = URLToolkit.buildAbsoluteURL(window$1.location.href, baseURL);\n  }\n\n  return URLToolkit.buildAbsoluteURL(baseURL, relativeURL);\n};\n\nvar classCallCheck$1 = function classCallCheck$$1(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass$1 = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar get$2 = function get$$1(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get$$1(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nvar inherits$1 = function inherits$$1(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar possibleConstructorReturn$1 = function possibleConstructorReturn$$1(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar slicedToArray$1 = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\n/**\n * @file playlist-loader.js\n *\n * A state machine that manages the loading, caching, and updating of\n * M3U8 playlists.\n *\n */\n\nvar mergeOptions$1 = videojs$1.mergeOptions,\n    EventTarget$1 = videojs$1.EventTarget,\n    log$2 = videojs$1.log;\n\n/**\n * Loops through all supported media groups in master and calls the provided\n * callback for each group\n *\n * @param {Object} master\n *        The parsed master manifest object\n * @param {Function} callback\n *        Callback to call for each media group\n */\n\nvar forEachMediaGroup = function forEachMediaGroup(master, callback) {\n  ['AUDIO', 'SUBTITLES'].forEach(function (mediaType) {\n    for (var groupKey in master.mediaGroups[mediaType]) {\n      for (var labelKey in master.mediaGroups[mediaType][groupKey]) {\n        var mediaProperties = master.mediaGroups[mediaType][groupKey][labelKey];\n\n        callback(mediaProperties, mediaType, groupKey, labelKey);\n      }\n    }\n  });\n};\n\n/**\n  * Returns a new array of segments that is the result of merging\n  * properties from an older list of segments onto an updated\n  * list. No properties on the updated playlist will be overridden.\n  *\n  * @param {Array} original the outdated list of segments\n  * @param {Array} update the updated list of segments\n  * @param {Number=} offset the index of the first update\n  * segment in the original segment list. For non-live playlists,\n  * this should always be zero and does not need to be\n  * specified. For live playlists, it should be the difference\n  * between the media sequence numbers in the original and updated\n  * playlists.\n  * @return a list of merged segment objects\n  */\nvar updateSegments = function updateSegments(original, update, offset) {\n  var result = update.slice();\n\n  offset = offset || 0;\n  var length = Math.min(original.length, update.length + offset);\n\n  for (var i = offset; i < length; i++) {\n    result[i - offset] = mergeOptions$1(original[i], result[i - offset]);\n  }\n  return result;\n};\n\nvar resolveSegmentUris = function resolveSegmentUris(segment, baseUri) {\n  if (!segment.resolvedUri) {\n    segment.resolvedUri = resolveUrl(baseUri, segment.uri);\n  }\n  if (segment.key && !segment.key.resolvedUri) {\n    segment.key.resolvedUri = resolveUrl(baseUri, segment.key.uri);\n  }\n  if (segment.map && !segment.map.resolvedUri) {\n    segment.map.resolvedUri = resolveUrl(baseUri, segment.map.uri);\n  }\n};\n\n/**\n  * Returns a new master playlist that is the result of merging an\n  * updated media playlist into the original version. If the\n  * updated media playlist does not match any of the playlist\n  * entries in the original master playlist, null is returned.\n  *\n  * @param {Object} master a parsed master M3U8 object\n  * @param {Object} media a parsed media M3U8 object\n  * @return {Object} a new object that represents the original\n  * master playlist with the updated media playlist merged in, or\n  * null if the merge produced no change.\n  */\nvar updateMaster = function updateMaster(master, media) {\n  var result = mergeOptions$1(master, {});\n  var playlist = result.playlists[media.uri];\n\n  if (!playlist) {\n    return null;\n  }\n\n  // consider the playlist unchanged if the number of segments is equal and the media\n  // sequence number is unchanged\n  if (playlist.segments && media.segments && playlist.segments.length === media.segments.length && playlist.mediaSequence === media.mediaSequence) {\n    return null;\n  }\n\n  var mergedPlaylist = mergeOptions$1(playlist, media);\n\n  // if the update could overlap existing segment information, merge the two segment lists\n  if (playlist.segments) {\n    mergedPlaylist.segments = updateSegments(playlist.segments, media.segments, media.mediaSequence - playlist.mediaSequence);\n  }\n\n  // resolve any segment URIs to prevent us from having to do it later\n  mergedPlaylist.segments.forEach(function (segment) {\n    resolveSegmentUris(segment, mergedPlaylist.resolvedUri);\n  });\n\n  // TODO Right now in the playlists array there are two references to each playlist, one\n  // that is referenced by index, and one by URI. The index reference may no longer be\n  // necessary.\n  for (var i = 0; i < result.playlists.length; i++) {\n    if (result.playlists[i].uri === media.uri) {\n      result.playlists[i] = mergedPlaylist;\n    }\n  }\n  result.playlists[media.uri] = mergedPlaylist;\n\n  return result;\n};\n\nvar setupMediaPlaylists = function setupMediaPlaylists(master) {\n  // setup by-URI lookups and resolve media playlist URIs\n  var i = master.playlists.length;\n\n  while (i--) {\n    var playlist = master.playlists[i];\n\n    master.playlists[playlist.uri] = playlist;\n    playlist.resolvedUri = resolveUrl(master.uri, playlist.uri);\n    playlist.id = i;\n\n    if (!playlist.attributes) {\n      // Although the spec states an #EXT-X-STREAM-INF tag MUST have a\n      // BANDWIDTH attribute, we can play the stream without it. This means a poorly\n      // formatted master playlist may not have an attribute list. An attributes\n      // property is added here to prevent undefined references when we encounter\n      // this scenario.\n      playlist.attributes = {};\n\n      log$2.warn('Invalid playlist STREAM-INF detected. Missing BANDWIDTH attribute.');\n    }\n  }\n};\n\nvar resolveMediaGroupUris = function resolveMediaGroupUris(master) {\n  forEachMediaGroup(master, function (properties) {\n    if (properties.uri) {\n      properties.resolvedUri = resolveUrl(master.uri, properties.uri);\n    }\n  });\n};\n\n/**\n * Calculates the time to wait before refreshing a live playlist\n *\n * @param {Object} media\n *        The current media\n * @param {Boolean} update\n *        True if there were any updates from the last refresh, false otherwise\n * @return {Number}\n *         The time in ms to wait before refreshing the live playlist\n */\nvar refreshDelay = function refreshDelay(media, update) {\n  var lastSegment = media.segments[media.segments.length - 1];\n  var delay = void 0;\n\n  if (update && lastSegment && lastSegment.duration) {\n    delay = lastSegment.duration * 1000;\n  } else {\n    // if the playlist is unchanged since the last reload or last segment duration\n    // cannot be determined, try again after half the target duration\n    delay = (media.targetDuration || 10) * 500;\n  }\n  return delay;\n};\n\n/**\n * Load a playlist from a remote location\n *\n * @class PlaylistLoader\n * @extends Stream\n * @param {String} srcUrl the url to start with\n * @param {Boolean} withCredentials the withCredentials xhr option\n * @constructor\n */\n\nvar PlaylistLoader = function (_EventTarget) {\n  inherits$1(PlaylistLoader, _EventTarget);\n\n  function PlaylistLoader(srcUrl, hls, withCredentials) {\n    classCallCheck$1(this, PlaylistLoader);\n\n    var _this = possibleConstructorReturn$1(this, (PlaylistLoader.__proto__ || Object.getPrototypeOf(PlaylistLoader)).call(this));\n\n    _this.srcUrl = srcUrl;\n    _this.hls_ = hls;\n    _this.withCredentials = withCredentials;\n\n    if (!_this.srcUrl) {\n      throw new Error('A non-empty playlist URL is required');\n    }\n\n    // initialize the loader state\n    _this.state = 'HAVE_NOTHING';\n\n    // live playlist staleness timeout\n    _this.on('mediaupdatetimeout', function () {\n      if (_this.state !== 'HAVE_METADATA') {\n        // only refresh the media playlist if no other activity is going on\n        return;\n      }\n\n      _this.state = 'HAVE_CURRENT_METADATA';\n\n      _this.request = _this.hls_.xhr({\n        uri: resolveUrl(_this.master.uri, _this.media().uri),\n        withCredentials: _this.withCredentials\n      }, function (error, req) {\n        // disposed\n        if (!_this.request) {\n          return;\n        }\n\n        if (error) {\n          return _this.playlistRequestError(_this.request, _this.media().uri, 'HAVE_METADATA');\n        }\n\n        _this.haveMetadata(_this.request, _this.media().uri);\n      });\n    });\n    return _this;\n  }\n\n  createClass$1(PlaylistLoader, [{\n    key: 'playlistRequestError',\n    value: function playlistRequestError(xhr$$1, url, startingState) {\n      // any in-flight request is now finished\n      this.request = null;\n\n      if (startingState) {\n        this.state = startingState;\n      }\n\n      this.error = {\n        playlist: this.master.playlists[url],\n        status: xhr$$1.status,\n        message: 'HLS playlist request error at URL: ' + url,\n        responseText: xhr$$1.responseText,\n        code: xhr$$1.status >= 500 ? 4 : 2\n      };\n\n      this.trigger('error');\n    }\n\n    // update the playlist loader's state in response to a new or\n    // updated playlist.\n\n  }, {\n    key: 'haveMetadata',\n    value: function haveMetadata(xhr$$1, url) {\n      var _this2 = this;\n\n      // any in-flight request is now finished\n      this.request = null;\n      this.state = 'HAVE_METADATA';\n\n      var parser = new Parser();\n\n      parser.push(xhr$$1.responseText);\n      parser.end();\n      parser.manifest.uri = url;\n      // m3u8-parser does not attach an attributes property to media playlists so make\n      // sure that the property is attached to avoid undefined reference errors\n      parser.manifest.attributes = parser.manifest.attributes || {};\n\n      // merge this playlist into the master\n      var update = updateMaster(this.master, parser.manifest);\n\n      this.targetDuration = parser.manifest.targetDuration;\n\n      if (update) {\n        this.master = update;\n        this.media_ = this.master.playlists[parser.manifest.uri];\n      } else {\n        this.trigger('playlistunchanged');\n      }\n\n      // refresh live playlists after a target duration passes\n      if (!this.media().endList) {\n        window$1.clearTimeout(this.mediaUpdateTimeout);\n        this.mediaUpdateTimeout = window$1.setTimeout(function () {\n          _this2.trigger('mediaupdatetimeout');\n        }, refreshDelay(this.media(), !!update));\n      }\n\n      this.trigger('loadedplaylist');\n    }\n\n    /**\n     * Abort any outstanding work and clean up.\n     */\n\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.stopRequest();\n      window$1.clearTimeout(this.mediaUpdateTimeout);\n    }\n  }, {\n    key: 'stopRequest',\n    value: function stopRequest() {\n      if (this.request) {\n        var oldRequest = this.request;\n\n        this.request = null;\n        oldRequest.onreadystatechange = null;\n        oldRequest.abort();\n      }\n    }\n\n    /**\n     * When called without any arguments, returns the currently\n     * active media playlist. When called with a single argument,\n     * triggers the playlist loader to asynchronously switch to the\n     * specified media playlist. Calling this method while the\n     * loader is in the HAVE_NOTHING causes an error to be emitted\n     * but otherwise has no effect.\n     *\n     * @param {Object=} playlist the parsed media playlist\n     * object to switch to\n     * @return {Playlist} the current loaded media\n     */\n\n  }, {\n    key: 'media',\n    value: function media(playlist) {\n      var _this3 = this;\n\n      // getter\n      if (!playlist) {\n        return this.media_;\n      }\n\n      // setter\n      if (this.state === 'HAVE_NOTHING') {\n        throw new Error('Cannot switch media playlist from ' + this.state);\n      }\n\n      var startingState = this.state;\n\n      // find the playlist object if the target playlist has been\n      // specified by URI\n      if (typeof playlist === 'string') {\n        if (!this.master.playlists[playlist]) {\n          throw new Error('Unknown playlist URI: ' + playlist);\n        }\n        playlist = this.master.playlists[playlist];\n      }\n\n      var mediaChange = !this.media_ || playlist.uri !== this.media_.uri;\n\n      // switch to fully loaded playlists immediately\n      if (this.master.playlists[playlist.uri].endList) {\n        // abort outstanding playlist requests\n        if (this.request) {\n          this.request.onreadystatechange = null;\n          this.request.abort();\n          this.request = null;\n        }\n        this.state = 'HAVE_METADATA';\n        this.media_ = playlist;\n\n        // trigger media change if the active media has been updated\n        if (mediaChange) {\n          this.trigger('mediachanging');\n          this.trigger('mediachange');\n        }\n        return;\n      }\n\n      // switching to the active playlist is a no-op\n      if (!mediaChange) {\n        return;\n      }\n\n      this.state = 'SWITCHING_MEDIA';\n\n      // there is already an outstanding playlist request\n      if (this.request) {\n        if (resolveUrl(this.master.uri, playlist.uri) === this.request.url) {\n          // requesting to switch to the same playlist multiple times\n          // has no effect after the first\n          return;\n        }\n        this.request.onreadystatechange = null;\n        this.request.abort();\n        this.request = null;\n      }\n\n      // request the new playlist\n      if (this.media_) {\n        this.trigger('mediachanging');\n      }\n\n      this.request = this.hls_.xhr({\n        uri: resolveUrl(this.master.uri, playlist.uri),\n        withCredentials: this.withCredentials\n      }, function (error, req) {\n        // disposed\n        if (!_this3.request) {\n          return;\n        }\n\n        if (error) {\n          return _this3.playlistRequestError(_this3.request, playlist.uri, startingState);\n        }\n\n        _this3.haveMetadata(req, playlist.uri);\n\n        // fire loadedmetadata the first time a media playlist is loaded\n        if (startingState === 'HAVE_MASTER') {\n          _this3.trigger('loadedmetadata');\n        } else {\n          _this3.trigger('mediachange');\n        }\n      });\n    }\n\n    /**\n     * pause loading of the playlist\n     */\n\n  }, {\n    key: 'pause',\n    value: function pause() {\n      this.stopRequest();\n      window$1.clearTimeout(this.mediaUpdateTimeout);\n      if (this.state === 'HAVE_NOTHING') {\n        // If we pause the loader before any data has been retrieved, its as if we never\n        // started, so reset to an unstarted state.\n        this.started = false;\n      }\n      // Need to restore state now that no activity is happening\n      if (this.state === 'SWITCHING_MEDIA') {\n        // if the loader was in the process of switching media, it should either return to\n        // HAVE_MASTER or HAVE_METADATA depending on if the loader has loaded a media\n        // playlist yet. This is determined by the existence of loader.media_\n        if (this.media_) {\n          this.state = 'HAVE_METADATA';\n        } else {\n          this.state = 'HAVE_MASTER';\n        }\n      } else if (this.state === 'HAVE_CURRENT_METADATA') {\n        this.state = 'HAVE_METADATA';\n      }\n    }\n\n    /**\n     * start loading of the playlist\n     */\n\n  }, {\n    key: 'load',\n    value: function load(isFinalRendition) {\n      var _this4 = this;\n\n      window$1.clearTimeout(this.mediaUpdateTimeout);\n\n      var media = this.media();\n\n      if (isFinalRendition) {\n        var delay = media ? media.targetDuration / 2 * 1000 : 5 * 1000;\n\n        this.mediaUpdateTimeout = window$1.setTimeout(function () {\n          return _this4.load();\n        }, delay);\n        return;\n      }\n\n      if (!this.started) {\n        this.start();\n        return;\n      }\n\n      if (media && !media.endList) {\n        this.trigger('mediaupdatetimeout');\n      } else {\n        this.trigger('loadedplaylist');\n      }\n    }\n\n    /**\n     * start loading of the playlist\n     */\n\n  }, {\n    key: 'start',\n    value: function start() {\n      var _this5 = this;\n\n      this.started = true;\n\n      // request the specified URL\n      this.request = this.hls_.xhr({\n        uri: this.srcUrl,\n        withCredentials: this.withCredentials\n      }, function (error, req) {\n        // disposed\n        if (!_this5.request) {\n          return;\n        }\n\n        // clear the loader's request reference\n        _this5.request = null;\n\n        if (error) {\n          _this5.error = {\n            status: req.status,\n            message: 'HLS playlist request error at URL: ' + _this5.srcUrl,\n            responseText: req.responseText,\n            // MEDIA_ERR_NETWORK\n            code: 2\n          };\n          if (_this5.state === 'HAVE_NOTHING') {\n            _this5.started = false;\n          }\n          return _this5.trigger('error');\n        }\n\n        var parser = new Parser();\n\n        parser.push(req.responseText);\n        parser.end();\n\n        _this5.state = 'HAVE_MASTER';\n\n        parser.manifest.uri = _this5.srcUrl;\n\n        // loaded a master playlist\n        if (parser.manifest.playlists) {\n          _this5.master = parser.manifest;\n\n          setupMediaPlaylists(_this5.master);\n          resolveMediaGroupUris(_this5.master);\n\n          _this5.trigger('loadedplaylist');\n          if (!_this5.request) {\n            // no media playlist was specifically selected so start\n            // from the first listed one\n            _this5.media(parser.manifest.playlists[0]);\n          }\n          return;\n        }\n\n        // loaded a media playlist\n        // infer a master playlist if none was previously requested\n        _this5.master = {\n          mediaGroups: {\n            'AUDIO': {},\n            'VIDEO': {},\n            'CLOSED-CAPTIONS': {},\n            'SUBTITLES': {}\n          },\n          uri: window$1.location.href,\n          playlists: [{\n            uri: _this5.srcUrl,\n            id: 0\n          }]\n        };\n        _this5.master.playlists[_this5.srcUrl] = _this5.master.playlists[0];\n        _this5.master.playlists[0].resolvedUri = _this5.srcUrl;\n        // m3u8-parser does not attach an attributes property to media playlists so make\n        // sure that the property is attached to avoid undefined reference errors\n        _this5.master.playlists[0].attributes = _this5.master.playlists[0].attributes || {};\n        _this5.haveMetadata(req, _this5.srcUrl);\n        return _this5.trigger('loadedmetadata');\n      });\n    }\n  }]);\n  return PlaylistLoader;\n}(EventTarget$1);\n\n/**\n * @file playlist.js\n *\n * Playlist related utilities.\n */\n\nvar createTimeRange = videojs$1.createTimeRange;\n\n/**\n * walk backward until we find a duration we can use\n * or return a failure\n *\n * @param {Playlist} playlist the playlist to walk through\n * @param {Number} endSequence the mediaSequence to stop walking on\n */\n\nvar backwardDuration = function backwardDuration(playlist, endSequence) {\n  var result = 0;\n  var i = endSequence - playlist.mediaSequence;\n  // if a start time is available for segment immediately following\n  // the interval, use it\n  var segment = playlist.segments[i];\n\n  // Walk backward until we find the latest segment with timeline\n  // information that is earlier than endSequence\n  if (segment) {\n    if (typeof segment.start !== 'undefined') {\n      return { result: segment.start, precise: true };\n    }\n    if (typeof segment.end !== 'undefined') {\n      return {\n        result: segment.end - segment.duration,\n        precise: true\n      };\n    }\n  }\n  while (i--) {\n    segment = playlist.segments[i];\n    if (typeof segment.end !== 'undefined') {\n      return { result: result + segment.end, precise: true };\n    }\n\n    result += segment.duration;\n\n    if (typeof segment.start !== 'undefined') {\n      return { result: result + segment.start, precise: true };\n    }\n  }\n  return { result: result, precise: false };\n};\n\n/**\n * walk forward until we find a duration we can use\n * or return a failure\n *\n * @param {Playlist} playlist the playlist to walk through\n * @param {Number} endSequence the mediaSequence to stop walking on\n */\nvar forwardDuration = function forwardDuration(playlist, endSequence) {\n  var result = 0;\n  var segment = void 0;\n  var i = endSequence - playlist.mediaSequence;\n  // Walk forward until we find the earliest segment with timeline\n  // information\n\n  for (; i < playlist.segments.length; i++) {\n    segment = playlist.segments[i];\n    if (typeof segment.start !== 'undefined') {\n      return {\n        result: segment.start - result,\n        precise: true\n      };\n    }\n\n    result += segment.duration;\n\n    if (typeof segment.end !== 'undefined') {\n      return {\n        result: segment.end - result,\n        precise: true\n      };\n    }\n  }\n  // indicate we didn't find a useful duration estimate\n  return { result: -1, precise: false };\n};\n\n/**\n  * Calculate the media duration from the segments associated with a\n  * playlist. The duration of a subinterval of the available segments\n  * may be calculated by specifying an end index.\n  *\n  * @param {Object} playlist a media playlist object\n  * @param {Number=} endSequence an exclusive upper boundary\n  * for the playlist.  Defaults to playlist length.\n  * @param {Number} expired the amount of time that has dropped\n  * off the front of the playlist in a live scenario\n  * @return {Number} the duration between the first available segment\n  * and end index.\n  */\nvar intervalDuration = function intervalDuration(playlist, endSequence, expired) {\n  var backward = void 0;\n  var forward = void 0;\n\n  if (typeof endSequence === 'undefined') {\n    endSequence = playlist.mediaSequence + playlist.segments.length;\n  }\n\n  if (endSequence < playlist.mediaSequence) {\n    return 0;\n  }\n\n  // do a backward walk to estimate the duration\n  backward = backwardDuration(playlist, endSequence);\n  if (backward.precise) {\n    // if we were able to base our duration estimate on timing\n    // information provided directly from the Media Source, return\n    // it\n    return backward.result;\n  }\n\n  // walk forward to see if a precise duration estimate can be made\n  // that way\n  forward = forwardDuration(playlist, endSequence);\n  if (forward.precise) {\n    // we found a segment that has been buffered and so it's\n    // position is known precisely\n    return forward.result;\n  }\n\n  // return the less-precise, playlist-based duration estimate\n  return backward.result + expired;\n};\n\n/**\n  * Calculates the duration of a playlist. If a start and end index\n  * are specified, the duration will be for the subset of the media\n  * timeline between those two indices. The total duration for live\n  * playlists is always Infinity.\n  *\n  * @param {Object} playlist a media playlist object\n  * @param {Number=} endSequence an exclusive upper\n  * boundary for the playlist. Defaults to the playlist media\n  * sequence number plus its length.\n  * @param {Number=} expired the amount of time that has\n  * dropped off the front of the playlist in a live scenario\n  * @return {Number} the duration between the start index and end\n  * index.\n  */\nvar duration = function duration(playlist, endSequence, expired) {\n  if (!playlist) {\n    return 0;\n  }\n\n  if (typeof expired !== 'number') {\n    expired = 0;\n  }\n\n  // if a slice of the total duration is not requested, use\n  // playlist-level duration indicators when they're present\n  if (typeof endSequence === 'undefined') {\n    // if present, use the duration specified in the playlist\n    if (playlist.totalDuration) {\n      return playlist.totalDuration;\n    }\n\n    // duration should be Infinity for live playlists\n    if (!playlist.endList) {\n      return window$1.Infinity;\n    }\n  }\n\n  // calculate the total duration based on the segment durations\n  return intervalDuration(playlist, endSequence, expired);\n};\n\n/**\n  * Calculate the time between two indexes in the current playlist\n  * neight the start- nor the end-index need to be within the current\n  * playlist in which case, the targetDuration of the playlist is used\n  * to approximate the durations of the segments\n  *\n  * @param {Object} playlist a media playlist object\n  * @param {Number} startIndex\n  * @param {Number} endIndex\n  * @return {Number} the number of seconds between startIndex and endIndex\n  */\nvar sumDurations = function sumDurations(playlist, startIndex, endIndex) {\n  var durations = 0;\n\n  if (startIndex > endIndex) {\n    var _ref = [endIndex, startIndex];\n    startIndex = _ref[0];\n    endIndex = _ref[1];\n  }\n\n  if (startIndex < 0) {\n    for (var i = startIndex; i < Math.min(0, endIndex); i++) {\n      durations += playlist.targetDuration;\n    }\n    startIndex = 0;\n  }\n\n  for (var _i = startIndex; _i < endIndex; _i++) {\n    durations += playlist.segments[_i].duration;\n  }\n\n  return durations;\n};\n\n/**\n * Determines the media index of the segment corresponding to the safe edge of the live\n * window which is the duration of the last segment plus 2 target durations from the end\n * of the playlist.\n *\n * @param {Object} playlist\n *        a media playlist object\n * @return {Number}\n *         The media index of the segment at the safe live point. 0 if there is no \"safe\"\n *         point.\n * @function safeLiveIndex\n */\nvar safeLiveIndex = function safeLiveIndex(playlist) {\n  if (!playlist.segments.length) {\n    return 0;\n  }\n\n  var i = playlist.segments.length - 1;\n  var distanceFromEnd = playlist.segments[i].duration || playlist.targetDuration;\n  var safeDistance = distanceFromEnd + playlist.targetDuration * 2;\n\n  while (i--) {\n    distanceFromEnd += playlist.segments[i].duration;\n\n    if (distanceFromEnd >= safeDistance) {\n      break;\n    }\n  }\n\n  return Math.max(0, i);\n};\n\n/**\n * Calculates the playlist end time\n *\n * @param {Object} playlist a media playlist object\n * @param {Number=} expired the amount of time that has\n *                  dropped off the front of the playlist in a live scenario\n * @param {Boolean|false} useSafeLiveEnd a boolean value indicating whether or not the\n *                        playlist end calculation should consider the safe live end\n *                        (truncate the playlist end by three segments). This is normally\n *                        used for calculating the end of the playlist's seekable range.\n * @returns {Number} the end time of playlist\n * @function playlistEnd\n */\nvar playlistEnd = function playlistEnd(playlist, expired, useSafeLiveEnd) {\n  if (!playlist || !playlist.segments) {\n    return null;\n  }\n  if (playlist.endList) {\n    return duration(playlist);\n  }\n\n  if (expired === null) {\n    return null;\n  }\n\n  expired = expired || 0;\n\n  var endSequence = useSafeLiveEnd ? safeLiveIndex(playlist) : playlist.segments.length;\n\n  return intervalDuration(playlist, playlist.mediaSequence + endSequence, expired);\n};\n\n/**\n  * Calculates the interval of time that is currently seekable in a\n  * playlist. The returned time ranges are relative to the earliest\n  * moment in the specified playlist that is still available. A full\n  * seekable implementation for live streams would need to offset\n  * these values by the duration of content that has expired from the\n  * stream.\n  *\n  * @param {Object} playlist a media playlist object\n  * dropped off the front of the playlist in a live scenario\n  * @param {Number=} expired the amount of time that has\n  * dropped off the front of the playlist in a live scenario\n  * @return {TimeRanges} the periods of time that are valid targets\n  * for seeking\n  */\nvar seekable = function seekable(playlist, expired) {\n  var useSafeLiveEnd = true;\n  var seekableStart = expired || 0;\n  var seekableEnd = playlistEnd(playlist, expired, useSafeLiveEnd);\n\n  if (seekableEnd === null) {\n    return createTimeRange();\n  }\n  return createTimeRange(seekableStart, seekableEnd);\n};\n\nvar isWholeNumber = function isWholeNumber(num) {\n  return num - Math.floor(num) === 0;\n};\n\nvar roundSignificantDigit = function roundSignificantDigit(increment, num) {\n  // If we have a whole number, just add 1 to it\n  if (isWholeNumber(num)) {\n    return num + increment * 0.1;\n  }\n\n  var numDecimalDigits = num.toString().split('.')[1].length;\n\n  for (var i = 1; i <= numDecimalDigits; i++) {\n    var scale = Math.pow(10, i);\n    var temp = num * scale;\n\n    if (isWholeNumber(temp) || i === numDecimalDigits) {\n      return (temp + increment) / scale;\n    }\n  }\n};\n\nvar ceilLeastSignificantDigit = roundSignificantDigit.bind(null, 1);\nvar floorLeastSignificantDigit = roundSignificantDigit.bind(null, -1);\n\n/**\n * Determine the index and estimated starting time of the segment that\n * contains a specified playback position in a media playlist.\n *\n * @param {Object} playlist the media playlist to query\n * @param {Number} currentTime The number of seconds since the earliest\n * possible position to determine the containing segment for\n * @param {Number} startIndex\n * @param {Number} startTime\n * @return {Object}\n */\nvar getMediaInfoForTime = function getMediaInfoForTime(playlist, currentTime, startIndex, startTime) {\n  var i = void 0;\n  var segment = void 0;\n  var numSegments = playlist.segments.length;\n\n  var time = currentTime - startTime;\n\n  if (time < 0) {\n    // Walk backward from startIndex in the playlist, adding durations\n    // until we find a segment that contains `time` and return it\n    if (startIndex > 0) {\n      for (i = startIndex - 1; i >= 0; i--) {\n        segment = playlist.segments[i];\n        time += floorLeastSignificantDigit(segment.duration);\n        if (time > 0) {\n          return {\n            mediaIndex: i,\n            startTime: startTime - sumDurations(playlist, startIndex, i)\n          };\n        }\n      }\n    }\n    // We were unable to find a good segment within the playlist\n    // so select the first segment\n    return {\n      mediaIndex: 0,\n      startTime: currentTime\n    };\n  }\n\n  // When startIndex is negative, we first walk forward to first segment\n  // adding target durations. If we \"run out of time\" before getting to\n  // the first segment, return the first segment\n  if (startIndex < 0) {\n    for (i = startIndex; i < 0; i++) {\n      time -= playlist.targetDuration;\n      if (time < 0) {\n        return {\n          mediaIndex: 0,\n          startTime: currentTime\n        };\n      }\n    }\n    startIndex = 0;\n  }\n\n  // Walk forward from startIndex in the playlist, subtracting durations\n  // until we find a segment that contains `time` and return it\n  for (i = startIndex; i < numSegments; i++) {\n    segment = playlist.segments[i];\n    time -= ceilLeastSignificantDigit(segment.duration);\n    if (time < 0) {\n      return {\n        mediaIndex: i,\n        startTime: startTime + sumDurations(playlist, startIndex, i)\n      };\n    }\n  }\n\n  // We are out of possible candidates so load the last one...\n  return {\n    mediaIndex: numSegments - 1,\n    startTime: currentTime\n  };\n};\n\n/**\n * Check whether the playlist is blacklisted or not.\n *\n * @param {Object} playlist the media playlist object\n * @return {boolean} whether the playlist is blacklisted or not\n * @function isBlacklisted\n */\nvar isBlacklisted = function isBlacklisted(playlist) {\n  return playlist.excludeUntil && playlist.excludeUntil > Date.now();\n};\n\n/**\n * Check whether the playlist is compatible with current playback configuration or has\n * been blacklisted permanently for being incompatible.\n *\n * @param {Object} playlist the media playlist object\n * @return {boolean} whether the playlist is incompatible or not\n * @function isIncompatible\n */\nvar isIncompatible = function isIncompatible(playlist) {\n  return playlist.excludeUntil && playlist.excludeUntil === Infinity;\n};\n\n/**\n * Check whether the playlist is enabled or not.\n *\n * @param {Object} playlist the media playlist object\n * @return {boolean} whether the playlist is enabled or not\n * @function isEnabled\n */\nvar isEnabled = function isEnabled(playlist) {\n  var blacklisted = isBlacklisted(playlist);\n\n  return !playlist.disabled && !blacklisted;\n};\n\n/**\n * Check whether the playlist has been manually disabled through the representations api.\n *\n * @param {Object} playlist the media playlist object\n * @return {boolean} whether the playlist is disabled manually or not\n * @function isDisabled\n */\nvar isDisabled = function isDisabled(playlist) {\n  return playlist.disabled;\n};\n\n/**\n * Returns whether the current playlist is an AES encrypted HLS stream\n *\n * @return {Boolean} true if it's an AES encrypted HLS stream\n */\nvar isAes = function isAes(media) {\n  for (var i = 0; i < media.segments.length; i++) {\n    if (media.segments[i].key) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Returns whether the current playlist contains fMP4\n *\n * @return {Boolean} true if the playlist contains fMP4\n */\nvar isFmp4 = function isFmp4(media) {\n  for (var i = 0; i < media.segments.length; i++) {\n    if (media.segments[i].map) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Checks if the playlist has a value for the specified attribute\n *\n * @param {String} attr\n *        Attribute to check for\n * @param {Object} playlist\n *        The media playlist object\n * @return {Boolean}\n *         Whether the playlist contains a value for the attribute or not\n * @function hasAttribute\n */\nvar hasAttribute = function hasAttribute(attr, playlist) {\n  return playlist.attributes && playlist.attributes[attr];\n};\n\n/**\n * Estimates the time required to complete a segment download from the specified playlist\n *\n * @param {Number} segmentDuration\n *        Duration of requested segment\n * @param {Number} bandwidth\n *        Current measured bandwidth of the player\n * @param {Object} playlist\n *        The media playlist object\n * @param {Number=} bytesReceived\n *        Number of bytes already received for the request. Defaults to 0\n * @return {Number|NaN}\n *         The estimated time to request the segment. NaN if bandwidth information for\n *         the given playlist is unavailable\n * @function estimateSegmentRequestTime\n */\nvar estimateSegmentRequestTime = function estimateSegmentRequestTime(segmentDuration, bandwidth, playlist) {\n  var bytesReceived = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n  if (!hasAttribute('BANDWIDTH', playlist)) {\n    return NaN;\n  }\n\n  var size = segmentDuration * playlist.attributes.BANDWIDTH;\n\n  return (size - bytesReceived * 8) / bandwidth;\n};\n\n/*\n * Returns whether the current playlist is the lowest rendition\n *\n * @return {Boolean} true if on lowest rendition\n */\nvar isLowestEnabledRendition = function isLowestEnabledRendition(master, media) {\n  if (master.playlists.length === 1) {\n    return true;\n  }\n\n  var currentBandwidth = media.attributes.BANDWIDTH || Number.MAX_VALUE;\n\n  return master.playlists.filter(function (playlist) {\n    if (!isEnabled(playlist)) {\n      return false;\n    }\n\n    return (playlist.attributes.BANDWIDTH || 0) < currentBandwidth;\n  }).length === 0;\n};\n\n// exports\nvar Playlist = {\n  duration: duration,\n  seekable: seekable,\n  safeLiveIndex: safeLiveIndex,\n  getMediaInfoForTime: getMediaInfoForTime,\n  isEnabled: isEnabled,\n  isDisabled: isDisabled,\n  isBlacklisted: isBlacklisted,\n  isIncompatible: isIncompatible,\n  playlistEnd: playlistEnd,\n  isAes: isAes,\n  isFmp4: isFmp4,\n  hasAttribute: hasAttribute,\n  estimateSegmentRequestTime: estimateSegmentRequestTime,\n  isLowestEnabledRendition: isLowestEnabledRendition\n};\n\n/**\n * @file xhr.js\n */\n\nvar videojsXHR = videojs$1.xhr,\n    mergeOptions$1$1 = videojs$1.mergeOptions;\n\nvar xhrFactory = function xhrFactory() {\n  var xhr$$1 = function XhrFunction(options, callback) {\n    // Add a default timeout for all hls requests\n    options = mergeOptions$1$1({\n      timeout: 45e3\n    }, options);\n\n    // Allow an optional user-specified function to modify the option\n    // object before we construct the xhr request\n    var beforeRequest = XhrFunction.beforeRequest || videojs$1.Hls.xhr.beforeRequest;\n\n    if (beforeRequest && typeof beforeRequest === 'function') {\n      var newOptions = beforeRequest(options);\n\n      if (newOptions) {\n        options = newOptions;\n      }\n    }\n\n    var request = videojsXHR(options, function (error, response) {\n      var reqResponse = request.response;\n\n      if (!error && reqResponse) {\n        request.responseTime = Date.now();\n        request.roundTripTime = request.responseTime - request.requestTime;\n        request.bytesReceived = reqResponse.byteLength || reqResponse.length;\n        if (!request.bandwidth) {\n          request.bandwidth = Math.floor(request.bytesReceived / request.roundTripTime * 8 * 1000);\n        }\n      }\n\n      if (response.headers) {\n        request.responseHeaders = response.headers;\n      }\n\n      // videojs.xhr now uses a specific code on the error\n      // object to signal that a request has timed out instead\n      // of setting a boolean on the request object\n      if (error && error.code === 'ETIMEDOUT') {\n        request.timedout = true;\n      }\n\n      // videojs.xhr no longer considers status codes outside of 200 and 0\n      // (for file uris) to be errors, but the old XHR did, so emulate that\n      // behavior. Status 206 may be used in response to byterange requests.\n      if (!error && !request.aborted && response.statusCode !== 200 && response.statusCode !== 206 && response.statusCode !== 0) {\n        error = new Error('XHR Failed with a response of: ' + (request && (reqResponse || request.responseText)));\n      }\n\n      callback(error, request);\n    });\n    var originalAbort = request.abort;\n\n    request.abort = function () {\n      request.aborted = true;\n      return originalAbort.apply(request, arguments);\n    };\n    request.uri = options.uri;\n    request.requestTime = Date.now();\n    return request;\n  };\n\n  return xhr$$1;\n};\n\n/**\n * @file bin-utils.js\n */\n\n/**\n * convert a TimeRange to text\n *\n * @param {TimeRange} range the timerange to use for conversion\n * @param {Number} i the iterator on the range to convert\n */\nvar textRange = function textRange(range, i) {\n  return range.start(i) + '-' + range.end(i);\n};\n\n/**\n * format a number as hex string\n *\n * @param {Number} e The number\n * @param {Number} i the iterator\n */\nvar formatHexString = function formatHexString(e, i) {\n  var value = e.toString(16);\n\n  return '00'.substring(0, 2 - value.length) + value + (i % 2 ? ' ' : '');\n};\nvar formatAsciiString = function formatAsciiString(e) {\n  if (e >= 0x20 && e < 0x7e) {\n    return String.fromCharCode(e);\n  }\n  return '.';\n};\n\n/**\n * Creates an object for sending to a web worker modifying properties that are TypedArrays\n * into a new object with seperated properties for the buffer, byteOffset, and byteLength.\n *\n * @param {Object} message\n *        Object of properties and values to send to the web worker\n * @return {Object}\n *         Modified message with TypedArray values expanded\n * @function createTransferableMessage\n */\nvar createTransferableMessage = function createTransferableMessage(message) {\n  var transferable = {};\n\n  Object.keys(message).forEach(function (key) {\n    var value = message[key];\n\n    if (ArrayBuffer.isView(value)) {\n      transferable[key] = {\n        bytes: value.buffer,\n        byteOffset: value.byteOffset,\n        byteLength: value.byteLength\n      };\n    } else {\n      transferable[key] = value;\n    }\n  });\n\n  return transferable;\n};\n\n/**\n * Returns a unique string identifier for a media initialization\n * segment.\n */\nvar initSegmentId = function initSegmentId(initSegment) {\n  var byterange = initSegment.byterange || {\n    length: Infinity,\n    offset: 0\n  };\n\n  return [byterange.length, byterange.offset, initSegment.resolvedUri].join(',');\n};\n\n/**\n * utils to help dump binary data to the console\n */\nvar hexDump = function hexDump(data) {\n  var bytes = Array.prototype.slice.call(data);\n  var step = 16;\n  var result = '';\n  var hex = void 0;\n  var ascii = void 0;\n\n  for (var j = 0; j < bytes.length / step; j++) {\n    hex = bytes.slice(j * step, j * step + step).map(formatHexString).join('');\n    ascii = bytes.slice(j * step, j * step + step).map(formatAsciiString).join('');\n    result += hex + ' ' + ascii + '\\n';\n  }\n\n  return result;\n};\n\nvar tagDump = function tagDump(_ref) {\n  var bytes = _ref.bytes;\n  return hexDump(bytes);\n};\n\nvar textRanges = function textRanges(ranges) {\n  var result = '';\n  var i = void 0;\n\n  for (i = 0; i < ranges.length; i++) {\n    result += textRange(ranges, i) + ' ';\n  }\n  return result;\n};\n\nvar utils = /*#__PURE__*/Object.freeze({\n  createTransferableMessage: createTransferableMessage,\n  initSegmentId: initSegmentId,\n  hexDump: hexDump,\n  tagDump: tagDump,\n  textRanges: textRanges\n});\n\n/**\n * ranges\n *\n * Utilities for working with TimeRanges.\n *\n */\n\n// Fudge factor to account for TimeRanges rounding\nvar TIME_FUDGE_FACTOR = 1 / 30;\n// Comparisons between time values such as current time and the end of the buffered range\n// can be misleading because of precision differences or when the current media has poorly\n// aligned audio and video, which can cause values to be slightly off from what you would\n// expect. This value is what we consider to be safe to use in such comparisons to account\n// for these scenarios.\nvar SAFE_TIME_DELTA = TIME_FUDGE_FACTOR * 3;\nvar filterRanges = function filterRanges(timeRanges, predicate) {\n  var results = [];\n  var i = void 0;\n\n  if (timeRanges && timeRanges.length) {\n    // Search for ranges that match the predicate\n    for (i = 0; i < timeRanges.length; i++) {\n      if (predicate(timeRanges.start(i), timeRanges.end(i))) {\n        results.push([timeRanges.start(i), timeRanges.end(i)]);\n      }\n    }\n  }\n\n  return videojs$1.createTimeRanges(results);\n};\n\n/**\n * Attempts to find the buffered TimeRange that contains the specified\n * time.\n * @param {TimeRanges} buffered - the TimeRanges object to query\n * @param {number} time  - the time to filter on.\n * @returns {TimeRanges} a new TimeRanges object\n */\nvar findRange = function findRange(buffered, time) {\n  return filterRanges(buffered, function (start, end) {\n    return start - TIME_FUDGE_FACTOR <= time && end + TIME_FUDGE_FACTOR >= time;\n  });\n};\n\n/**\n * Returns the TimeRanges that begin later than the specified time.\n * @param {TimeRanges} timeRanges - the TimeRanges object to query\n * @param {number} time - the time to filter on.\n * @returns {TimeRanges} a new TimeRanges object.\n */\nvar findNextRange = function findNextRange(timeRanges, time) {\n  return filterRanges(timeRanges, function (start) {\n    return start - TIME_FUDGE_FACTOR >= time;\n  });\n};\n\n/**\n * Returns gaps within a list of TimeRanges\n * @param {TimeRanges} buffered - the TimeRanges object\n * @return {TimeRanges} a TimeRanges object of gaps\n */\nvar findGaps = function findGaps(buffered) {\n  if (buffered.length < 2) {\n    return videojs$1.createTimeRanges();\n  }\n\n  var ranges = [];\n\n  for (var i = 1; i < buffered.length; i++) {\n    var start = buffered.end(i - 1);\n    var end = buffered.start(i);\n\n    ranges.push([start, end]);\n  }\n\n  return videojs$1.createTimeRanges(ranges);\n};\n\n/**\n * Gets a human readable string for a TimeRange\n *\n * @param {TimeRange} range\n * @returns {String} a human readable string\n */\nvar printableRange = function printableRange(range) {\n  var strArr = [];\n\n  if (!range || !range.length) {\n    return '';\n  }\n\n  for (var i = 0; i < range.length; i++) {\n    strArr.push(range.start(i) + ' => ' + range.end(i));\n  }\n\n  return strArr.join(', ');\n};\n\n/**\n * Calculates the amount of time left in seconds until the player hits the end of the\n * buffer and causes a rebuffer\n *\n * @param {TimeRange} buffered\n *        The state of the buffer\n * @param {Numnber} currentTime\n *        The current time of the player\n * @param {Number} playbackRate\n *        The current playback rate of the player. Defaults to 1.\n * @return {Number}\n *         Time until the player has to start rebuffering in seconds.\n * @function timeUntilRebuffer\n */\nvar timeUntilRebuffer = function timeUntilRebuffer(buffered, currentTime) {\n  var playbackRate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n  var bufferedEnd = buffered.length ? buffered.end(buffered.length - 1) : 0;\n\n  return (bufferedEnd - currentTime) / playbackRate;\n};\n\n/**\n * Converts a TimeRanges object into an array representation\n * @param {TimeRanges} timeRanges\n * @returns {Array}\n */\nvar timeRangesToArray = function timeRangesToArray(timeRanges) {\n  var timeRangesList = [];\n\n  for (var i = 0; i < timeRanges.length; i++) {\n    timeRangesList.push({\n      start: timeRanges.start(i),\n      end: timeRanges.end(i)\n    });\n  }\n\n  return timeRangesList;\n};\n\n/**\n * @file create-text-tracks-if-necessary.js\n */\n\n/**\n * Create text tracks on video.js if they exist on a segment.\n *\n * @param {Object} sourceBuffer the VSB or FSB\n * @param {Object} mediaSource the HTML media source\n * @param {Object} segment the segment that may contain the text track\n * @private\n */\nvar createTextTracksIfNecessary = function createTextTracksIfNecessary(sourceBuffer, mediaSource, segment) {\n  var player = mediaSource.player_;\n\n  // create an in-band caption track if one is present in the segment\n  if (segment.captions && segment.captions.length) {\n    if (!sourceBuffer.inbandTextTracks_) {\n      sourceBuffer.inbandTextTracks_ = {};\n    }\n\n    for (var trackId in segment.captionStreams) {\n      if (!sourceBuffer.inbandTextTracks_[trackId]) {\n        player.tech_.trigger({ type: 'usage', name: 'hls-608' });\n        var track = player.textTracks().getTrackById(trackId);\n\n        if (track) {\n          // Resuse an existing track with a CC# id because this was\n          // very likely created by videojs-contrib-hls from information\n          // in the m3u8 for us to use\n          sourceBuffer.inbandTextTracks_[trackId] = track;\n        } else {\n          // Otherwise, create a track with the default `CC#` label and\n          // without a language\n          sourceBuffer.inbandTextTracks_[trackId] = player.addRemoteTextTrack({\n            kind: 'captions',\n            id: trackId,\n            label: trackId\n          }, false).track;\n        }\n      }\n    }\n  }\n\n  if (segment.metadata && segment.metadata.length && !sourceBuffer.metadataTrack_) {\n    sourceBuffer.metadataTrack_ = player.addRemoteTextTrack({\n      kind: 'metadata',\n      label: 'Timed Metadata'\n    }, false).track;\n    sourceBuffer.metadataTrack_.inBandMetadataTrackDispatchType = segment.metadata.dispatchType;\n  }\n};\n\n/**\n * @file remove-cues-from-track.js\n */\n\n/**\n * Remove cues from a track on video.js.\n *\n * @param {Double} start start of where we should remove the cue\n * @param {Double} end end of where the we should remove the cue\n * @param {Object} track the text track to remove the cues from\n * @private\n */\nvar removeCuesFromTrack = function removeCuesFromTrack(start, end, track) {\n  var i = void 0;\n  var cue = void 0;\n\n  if (!track) {\n    return;\n  }\n\n  if (!track.cues) {\n    return;\n  }\n\n  i = track.cues.length;\n\n  while (i--) {\n    cue = track.cues[i];\n\n    // Remove any overlapping cue\n    if (cue.startTime <= end && cue.endTime >= start) {\n      track.removeCue(cue);\n    }\n  }\n};\n\n/**\n * @file add-text-track-data.js\n */\n/**\n * Define properties on a cue for backwards compatability,\n * but warn the user that the way that they are using it\n * is depricated and will be removed at a later date.\n *\n * @param {Cue} cue the cue to add the properties on\n * @private\n */\nvar deprecateOldCue = function deprecateOldCue(cue) {\n  Object.defineProperties(cue.frame, {\n    id: {\n      get: function get$$1() {\n        videojs$1.log.warn('cue.frame.id is deprecated. Use cue.value.key instead.');\n        return cue.value.key;\n      }\n    },\n    value: {\n      get: function get$$1() {\n        videojs$1.log.warn('cue.frame.value is deprecated. Use cue.value.data instead.');\n        return cue.value.data;\n      }\n    },\n    privateData: {\n      get: function get$$1() {\n        videojs$1.log.warn('cue.frame.privateData is deprecated. Use cue.value.data instead.');\n        return cue.value.data;\n      }\n    }\n  });\n};\n\nvar durationOfVideo = function durationOfVideo(duration) {\n  var dur = void 0;\n\n  if (isNaN(duration) || Math.abs(duration) === Infinity) {\n    dur = Number.MAX_VALUE;\n  } else {\n    dur = duration;\n  }\n  return dur;\n};\n/**\n * Add text track data to a source handler given the captions and\n * metadata from the buffer.\n *\n * @param {Object} sourceHandler the virtual source buffer\n * @param {Array} captionArray an array of caption data\n * @param {Array} metadataArray an array of meta data\n * @private\n */\nvar addTextTrackData = function addTextTrackData(sourceHandler, captionArray, metadataArray) {\n  var Cue = window$1.WebKitDataCue || window$1.VTTCue;\n\n  if (captionArray) {\n    captionArray.forEach(function (caption) {\n      var track = caption.stream;\n\n      this.inbandTextTracks_[track].addCue(new Cue(caption.startTime + this.timestampOffset, caption.endTime + this.timestampOffset, caption.text));\n    }, sourceHandler);\n  }\n\n  if (metadataArray) {\n    var videoDuration = durationOfVideo(sourceHandler.mediaSource_.duration);\n\n    metadataArray.forEach(function (metadata) {\n      var time = metadata.cueTime + this.timestampOffset;\n\n      metadata.frames.forEach(function (frame) {\n        var cue = new Cue(time, time, frame.value || frame.url || frame.data || '');\n\n        cue.frame = frame;\n        cue.value = frame;\n        deprecateOldCue(cue);\n\n        this.metadataTrack_.addCue(cue);\n      }, this);\n    }, sourceHandler);\n\n    // Updating the metadeta cues so that\n    // the endTime of each cue is the startTime of the next cue\n    // the endTime of last cue is the duration of the video\n    if (sourceHandler.metadataTrack_ && sourceHandler.metadataTrack_.cues && sourceHandler.metadataTrack_.cues.length) {\n      var cues = sourceHandler.metadataTrack_.cues;\n      var cuesArray = [];\n\n      // Create a copy of the TextTrackCueList...\n      // ...disregarding cues with a falsey value\n      for (var i = 0; i < cues.length; i++) {\n        if (cues[i]) {\n          cuesArray.push(cues[i]);\n        }\n      }\n\n      // Group cues by their startTime value\n      var cuesGroupedByStartTime = cuesArray.reduce(function (obj, cue) {\n        var timeSlot = obj[cue.startTime] || [];\n\n        timeSlot.push(cue);\n        obj[cue.startTime] = timeSlot;\n\n        return obj;\n      }, {});\n\n      // Sort startTimes by ascending order\n      var sortedStartTimes = Object.keys(cuesGroupedByStartTime).sort(function (a, b) {\n        return Number(a) - Number(b);\n      });\n\n      // Map each cue group's endTime to the next group's startTime\n      sortedStartTimes.forEach(function (startTime, idx) {\n        var cueGroup = cuesGroupedByStartTime[startTime];\n        var nextTime = Number(sortedStartTimes[idx + 1]) || videoDuration;\n\n        // Map each cue's endTime the next group's startTime\n        cueGroup.forEach(function (cue) {\n          cue.endTime = nextTime;\n        });\n      });\n    }\n  }\n};\n\nvar win = typeof window !== 'undefined' ? window : {},\n    TARGET = typeof Symbol === 'undefined' ? '__target' : Symbol(),\n    SCRIPT_TYPE = 'application/javascript',\n    BlobBuilder = win.BlobBuilder || win.WebKitBlobBuilder || win.MozBlobBuilder || win.MSBlobBuilder,\n    URL = win.URL || win.webkitURL || URL && URL.msURL,\n    Worker = win.Worker;\n\n/**\n * Returns a wrapper around Web Worker code that is constructible.\n *\n * @function shimWorker\n *\n * @param { String }    filename    The name of the file\n * @param { Function }  fn          Function wrapping the code of the worker\n */\nfunction shimWorker(filename, fn) {\n  return function ShimWorker(forceFallback) {\n    var o = this;\n\n    if (!fn) {\n      return new Worker(filename);\n    } else if (Worker && !forceFallback) {\n      // Convert the function's inner code to a string to construct the worker\n      var source = fn.toString().replace(/^function.+?{/, '').slice(0, -1),\n          objURL = createSourceObject(source);\n\n      this[TARGET] = new Worker(objURL);\n      wrapTerminate(this[TARGET], objURL);\n      return this[TARGET];\n    } else {\n      var selfShim = {\n        postMessage: function postMessage(m) {\n          if (o.onmessage) {\n            setTimeout(function () {\n              o.onmessage({ data: m, target: selfShim });\n            });\n          }\n        }\n      };\n\n      fn.call(selfShim);\n      this.postMessage = function (m) {\n        setTimeout(function () {\n          selfShim.onmessage({ data: m, target: o });\n        });\n      };\n      this.isThisThread = true;\n    }\n  };\n}\n// Test Worker capabilities\nif (Worker) {\n  var testWorker,\n      objURL = createSourceObject('self.onmessage = function () {}'),\n      testArray = new Uint8Array(1);\n\n  try {\n    testWorker = new Worker(objURL);\n\n    // Native browser on some Samsung devices throws for transferables, let's detect it\n    testWorker.postMessage(testArray, [testArray.buffer]);\n  } catch (e) {\n    Worker = null;\n  } finally {\n    URL.revokeObjectURL(objURL);\n    if (testWorker) {\n      testWorker.terminate();\n    }\n  }\n}\n\nfunction createSourceObject(str) {\n  try {\n    return URL.createObjectURL(new Blob([str], { type: SCRIPT_TYPE }));\n  } catch (e) {\n    var blob = new BlobBuilder();\n    blob.append(str);\n    return URL.createObjectURL(blob.getBlob(type));\n  }\n}\n\nfunction wrapTerminate(worker, objURL) {\n  if (!worker || !objURL) return;\n  var term = worker.terminate;\n  worker.objURL = objURL;\n  worker.terminate = function () {\n    if (worker.objURL) URL.revokeObjectURL(worker.objURL);\n    term.call(worker);\n  };\n}\n\nvar TransmuxWorker = new shimWorker(\"./transmuxer-worker.worker.js\", function (window, document$$1) {\n  var self = this;\n  var transmuxerWorker = function () {\n\n    /**\n     * mux.js\n     *\n     * Copyright (c) 2015 Brightcove\n     * All rights reserved.\n     *\n     * Functions that generate fragmented MP4s suitable for use with Media\n     * Source Extensions.\n     */\n\n    var UINT32_MAX = Math.pow(2, 32) - 1;\n\n    var box, dinf, esds, ftyp, mdat, mfhd, minf, moof, moov, mvex, mvhd, trak, tkhd, mdia, mdhd, hdlr, sdtp, stbl, stsd, traf, trex, trun, types, MAJOR_BRAND, MINOR_VERSION, AVC1_BRAND, VIDEO_HDLR, AUDIO_HDLR, HDLR_TYPES, VMHD, SMHD, DREF, STCO, STSC, STSZ, STTS;\n\n    // pre-calculate constants\n    (function () {\n      var i;\n      types = {\n        avc1: [], // codingname\n        avcC: [],\n        btrt: [],\n        dinf: [],\n        dref: [],\n        esds: [],\n        ftyp: [],\n        hdlr: [],\n        mdat: [],\n        mdhd: [],\n        mdia: [],\n        mfhd: [],\n        minf: [],\n        moof: [],\n        moov: [],\n        mp4a: [], // codingname\n        mvex: [],\n        mvhd: [],\n        sdtp: [],\n        smhd: [],\n        stbl: [],\n        stco: [],\n        stsc: [],\n        stsd: [],\n        stsz: [],\n        stts: [],\n        styp: [],\n        tfdt: [],\n        tfhd: [],\n        traf: [],\n        trak: [],\n        trun: [],\n        trex: [],\n        tkhd: [],\n        vmhd: []\n      };\n\n      // In environments where Uint8Array is undefined (e.g., IE8), skip set up so that we\n      // don't throw an error\n      if (typeof Uint8Array === 'undefined') {\n        return;\n      }\n\n      for (i in types) {\n        if (types.hasOwnProperty(i)) {\n          types[i] = [i.charCodeAt(0), i.charCodeAt(1), i.charCodeAt(2), i.charCodeAt(3)];\n        }\n      }\n\n      MAJOR_BRAND = new Uint8Array(['i'.charCodeAt(0), 's'.charCodeAt(0), 'o'.charCodeAt(0), 'm'.charCodeAt(0)]);\n      AVC1_BRAND = new Uint8Array(['a'.charCodeAt(0), 'v'.charCodeAt(0), 'c'.charCodeAt(0), '1'.charCodeAt(0)]);\n      MINOR_VERSION = new Uint8Array([0, 0, 0, 1]);\n      VIDEO_HDLR = new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x00, // pre_defined\n      0x76, 0x69, 0x64, 0x65, // handler_type: 'vide'\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x56, 0x69, 0x64, 0x65, 0x6f, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'VideoHandler'\n      ]);\n      AUDIO_HDLR = new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x00, // pre_defined\n      0x73, 0x6f, 0x75, 0x6e, // handler_type: 'soun'\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x53, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'SoundHandler'\n      ]);\n      HDLR_TYPES = {\n        video: VIDEO_HDLR,\n        audio: AUDIO_HDLR\n      };\n      DREF = new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x01, // entry_count\n      0x00, 0x00, 0x00, 0x0c, // entry_size\n      0x75, 0x72, 0x6c, 0x20, // 'url' type\n      0x00, // version 0\n      0x00, 0x00, 0x01 // entry_flags\n      ]);\n      SMHD = new Uint8Array([0x00, // version\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, // balance, 0 means centered\n      0x00, 0x00 // reserved\n      ]);\n      STCO = new Uint8Array([0x00, // version\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x00 // entry_count\n      ]);\n      STSC = STCO;\n      STSZ = new Uint8Array([0x00, // version\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x00, // sample_size\n      0x00, 0x00, 0x00, 0x00 // sample_count\n      ]);\n      STTS = STCO;\n      VMHD = new Uint8Array([0x00, // version\n      0x00, 0x00, 0x01, // flags\n      0x00, 0x00, // graphicsmode\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // opcolor\n      ]);\n    })();\n\n    box = function box(type) {\n      var payload = [],\n          size = 0,\n          i,\n          result,\n          view;\n\n      for (i = 1; i < arguments.length; i++) {\n        payload.push(arguments[i]);\n      }\n\n      i = payload.length;\n\n      // calculate the total size we need to allocate\n      while (i--) {\n        size += payload[i].byteLength;\n      }\n      result = new Uint8Array(size + 8);\n      view = new DataView(result.buffer, result.byteOffset, result.byteLength);\n      view.setUint32(0, result.byteLength);\n      result.set(type, 4);\n\n      // copy the payload into the result\n      for (i = 0, size = 8; i < payload.length; i++) {\n        result.set(payload[i], size);\n        size += payload[i].byteLength;\n      }\n      return result;\n    };\n\n    dinf = function dinf() {\n      return box(types.dinf, box(types.dref, DREF));\n    };\n\n    esds = function esds(track) {\n      return box(types.esds, new Uint8Array([0x00, // version\n      0x00, 0x00, 0x00, // flags\n\n      // ES_Descriptor\n      0x03, // tag, ES_DescrTag\n      0x19, // length\n      0x00, 0x00, // ES_ID\n      0x00, // streamDependenceFlag, URL_flag, reserved, streamPriority\n\n      // DecoderConfigDescriptor\n      0x04, // tag, DecoderConfigDescrTag\n      0x11, // length\n      0x40, // object type\n      0x15, // streamType\n      0x00, 0x06, 0x00, // bufferSizeDB\n      0x00, 0x00, 0xda, 0xc0, // maxBitrate\n      0x00, 0x00, 0xda, 0xc0, // avgBitrate\n\n      // DecoderSpecificInfo\n      0x05, // tag, DecoderSpecificInfoTag\n      0x02, // length\n      // ISO/IEC 14496-3, AudioSpecificConfig\n      // for samplingFrequencyIndex see ISO/IEC 13818-7:2006, 8.1.3.2.2, Table 35\n      track.audioobjecttype << 3 | track.samplingfrequencyindex >>> 1, track.samplingfrequencyindex << 7 | track.channelcount << 3, 0x06, 0x01, 0x02 // GASpecificConfig\n      ]));\n    };\n\n    ftyp = function ftyp() {\n      return box(types.ftyp, MAJOR_BRAND, MINOR_VERSION, MAJOR_BRAND, AVC1_BRAND);\n    };\n\n    hdlr = function hdlr(type) {\n      return box(types.hdlr, HDLR_TYPES[type]);\n    };\n    mdat = function mdat(data) {\n      return box(types.mdat, data);\n    };\n    mdhd = function mdhd(track) {\n      var result = new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x02, // creation_time\n      0x00, 0x00, 0x00, 0x03, // modification_time\n      0x00, 0x01, 0x5f, 0x90, // timescale, 90,000 \"ticks\" per second\n\n      track.duration >>> 24 & 0xFF, track.duration >>> 16 & 0xFF, track.duration >>> 8 & 0xFF, track.duration & 0xFF, // duration\n      0x55, 0xc4, // 'und' language (undetermined)\n      0x00, 0x00]);\n\n      // Use the sample rate from the track metadata, when it is\n      // defined. The sample rate can be parsed out of an ADTS header, for\n      // instance.\n      if (track.samplerate) {\n        result[12] = track.samplerate >>> 24 & 0xFF;\n        result[13] = track.samplerate >>> 16 & 0xFF;\n        result[14] = track.samplerate >>> 8 & 0xFF;\n        result[15] = track.samplerate & 0xFF;\n      }\n\n      return box(types.mdhd, result);\n    };\n    mdia = function mdia(track) {\n      return box(types.mdia, mdhd(track), hdlr(track.type), minf(track));\n    };\n    mfhd = function mfhd(sequenceNumber) {\n      return box(types.mfhd, new Uint8Array([0x00, 0x00, 0x00, 0x00, // flags\n      (sequenceNumber & 0xFF000000) >> 24, (sequenceNumber & 0xFF0000) >> 16, (sequenceNumber & 0xFF00) >> 8, sequenceNumber & 0xFF // sequence_number\n      ]));\n    };\n    minf = function minf(track) {\n      return box(types.minf, track.type === 'video' ? box(types.vmhd, VMHD) : box(types.smhd, SMHD), dinf(), stbl(track));\n    };\n    moof = function moof(sequenceNumber, tracks) {\n      var trackFragments = [],\n          i = tracks.length;\n      // build traf boxes for each track fragment\n      while (i--) {\n        trackFragments[i] = traf(tracks[i]);\n      }\n      return box.apply(null, [types.moof, mfhd(sequenceNumber)].concat(trackFragments));\n    };\n    /**\n     * Returns a movie box.\n     * @param tracks {array} the tracks associated with this movie\n     * @see ISO/IEC 14496-12:2012(E), section 8.2.1\n     */\n    moov = function moov(tracks) {\n      var i = tracks.length,\n          boxes = [];\n\n      while (i--) {\n        boxes[i] = trak(tracks[i]);\n      }\n\n      return box.apply(null, [types.moov, mvhd(0xffffffff)].concat(boxes).concat(mvex(tracks)));\n    };\n    mvex = function mvex(tracks) {\n      var i = tracks.length,\n          boxes = [];\n\n      while (i--) {\n        boxes[i] = trex(tracks[i]);\n      }\n      return box.apply(null, [types.mvex].concat(boxes));\n    };\n    mvhd = function mvhd(duration) {\n      var bytes = new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x01, // creation_time\n      0x00, 0x00, 0x00, 0x02, // modification_time\n      0x00, 0x01, 0x5f, 0x90, // timescale, 90,000 \"ticks\" per second\n      (duration & 0xFF000000) >> 24, (duration & 0xFF0000) >> 16, (duration & 0xFF00) >> 8, duration & 0xFF, // duration\n      0x00, 0x01, 0x00, 0x00, // 1.0 rate\n      0x01, 0x00, // 1.0 volume\n      0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // pre_defined\n      0xff, 0xff, 0xff, 0xff // next_track_ID\n      ]);\n      return box(types.mvhd, bytes);\n    };\n\n    sdtp = function sdtp(track) {\n      var samples = track.samples || [],\n          bytes = new Uint8Array(4 + samples.length),\n          flags,\n          i;\n\n      // leave the full box header (4 bytes) all zero\n\n      // write the sample table\n      for (i = 0; i < samples.length; i++) {\n        flags = samples[i].flags;\n\n        bytes[i + 4] = flags.dependsOn << 4 | flags.isDependedOn << 2 | flags.hasRedundancy;\n      }\n\n      return box(types.sdtp, bytes);\n    };\n\n    stbl = function stbl(track) {\n      return box(types.stbl, stsd(track), box(types.stts, STTS), box(types.stsc, STSC), box(types.stsz, STSZ), box(types.stco, STCO));\n    };\n\n    (function () {\n      var videoSample, audioSample;\n\n      stsd = function stsd(track) {\n\n        return box(types.stsd, new Uint8Array([0x00, // version 0\n        0x00, 0x00, 0x00, // flags\n        0x00, 0x00, 0x00, 0x01]), track.type === 'video' ? videoSample(track) : audioSample(track));\n      };\n\n      videoSample = function videoSample(track) {\n        var sps = track.sps || [],\n            pps = track.pps || [],\n            sequenceParameterSets = [],\n            pictureParameterSets = [],\n            i;\n\n        // assemble the SPSs\n        for (i = 0; i < sps.length; i++) {\n          sequenceParameterSets.push((sps[i].byteLength & 0xFF00) >>> 8);\n          sequenceParameterSets.push(sps[i].byteLength & 0xFF); // sequenceParameterSetLength\n          sequenceParameterSets = sequenceParameterSets.concat(Array.prototype.slice.call(sps[i])); // SPS\n        }\n\n        // assemble the PPSs\n        for (i = 0; i < pps.length; i++) {\n          pictureParameterSets.push((pps[i].byteLength & 0xFF00) >>> 8);\n          pictureParameterSets.push(pps[i].byteLength & 0xFF);\n          pictureParameterSets = pictureParameterSets.concat(Array.prototype.slice.call(pps[i]));\n        }\n\n        return box(types.avc1, new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved\n        0x00, 0x01, // data_reference_index\n        0x00, 0x00, // pre_defined\n        0x00, 0x00, // reserved\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // pre_defined\n        (track.width & 0xff00) >> 8, track.width & 0xff, // width\n        (track.height & 0xff00) >> 8, track.height & 0xff, // height\n        0x00, 0x48, 0x00, 0x00, // horizresolution\n        0x00, 0x48, 0x00, 0x00, // vertresolution\n        0x00, 0x00, 0x00, 0x00, // reserved\n        0x00, 0x01, // frame_count\n        0x13, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x6a, 0x73, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x2d, 0x68, 0x6c, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // compressorname\n        0x00, 0x18, // depth = 24\n        0x11, 0x11 // pre_defined = -1\n        ]), box(types.avcC, new Uint8Array([0x01, // configurationVersion\n        track.profileIdc, // AVCProfileIndication\n        track.profileCompatibility, // profile_compatibility\n        track.levelIdc, // AVCLevelIndication\n        0xff // lengthSizeMinusOne, hard-coded to 4 bytes\n        ].concat([sps.length // numOfSequenceParameterSets\n        ]).concat(sequenceParameterSets).concat([pps.length // numOfPictureParameterSets\n        ]).concat(pictureParameterSets))), // \"PPS\"\n        box(types.btrt, new Uint8Array([0x00, 0x1c, 0x9c, 0x80, // bufferSizeDB\n        0x00, 0x2d, 0xc6, 0xc0, // maxBitrate\n        0x00, 0x2d, 0xc6, 0xc0])) // avgBitrate\n        );\n      };\n\n      audioSample = function audioSample(track) {\n        return box(types.mp4a, new Uint8Array([\n\n        // SampleEntry, ISO/IEC 14496-12\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved\n        0x00, 0x01, // data_reference_index\n\n        // AudioSampleEntry, ISO/IEC 14496-12\n        0x00, 0x00, 0x00, 0x00, // reserved\n        0x00, 0x00, 0x00, 0x00, // reserved\n        (track.channelcount & 0xff00) >> 8, track.channelcount & 0xff, // channelcount\n\n        (track.samplesize & 0xff00) >> 8, track.samplesize & 0xff, // samplesize\n        0x00, 0x00, // pre_defined\n        0x00, 0x00, // reserved\n\n        (track.samplerate & 0xff00) >> 8, track.samplerate & 0xff, 0x00, 0x00 // samplerate, 16.16\n\n        // MP4AudioSampleEntry, ISO/IEC 14496-14\n        ]), esds(track));\n      };\n    })();\n\n    tkhd = function tkhd(track) {\n      var result = new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x07, // flags\n      0x00, 0x00, 0x00, 0x00, // creation_time\n      0x00, 0x00, 0x00, 0x00, // modification_time\n      (track.id & 0xFF000000) >> 24, (track.id & 0xFF0000) >> 16, (track.id & 0xFF00) >> 8, track.id & 0xFF, // track_ID\n      0x00, 0x00, 0x00, 0x00, // reserved\n      (track.duration & 0xFF000000) >> 24, (track.duration & 0xFF0000) >> 16, (track.duration & 0xFF00) >> 8, track.duration & 0xFF, // duration\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, // layer\n      0x00, 0x00, // alternate_group\n      0x01, 0x00, // non-audio track volume\n      0x00, 0x00, // reserved\n      0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\n      (track.width & 0xFF00) >> 8, track.width & 0xFF, 0x00, 0x00, // width\n      (track.height & 0xFF00) >> 8, track.height & 0xFF, 0x00, 0x00 // height\n      ]);\n\n      return box(types.tkhd, result);\n    };\n\n    /**\n     * Generate a track fragment (traf) box. A traf box collects metadata\n     * about tracks in a movie fragment (moof) box.\n     */\n    traf = function traf(track) {\n      var trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun, sampleDependencyTable, dataOffset, upperWordBaseMediaDecodeTime, lowerWordBaseMediaDecodeTime;\n\n      trackFragmentHeader = box(types.tfhd, new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x3a, // flags\n      (track.id & 0xFF000000) >> 24, (track.id & 0xFF0000) >> 16, (track.id & 0xFF00) >> 8, track.id & 0xFF, // track_ID\n      0x00, 0x00, 0x00, 0x01, // sample_description_index\n      0x00, 0x00, 0x00, 0x00, // default_sample_duration\n      0x00, 0x00, 0x00, 0x00, // default_sample_size\n      0x00, 0x00, 0x00, 0x00 // default_sample_flags\n      ]));\n\n      upperWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime / (UINT32_MAX + 1));\n      lowerWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime % (UINT32_MAX + 1));\n\n      trackFragmentDecodeTime = box(types.tfdt, new Uint8Array([0x01, // version 1\n      0x00, 0x00, 0x00, // flags\n      // baseMediaDecodeTime\n      upperWordBaseMediaDecodeTime >>> 24 & 0xFF, upperWordBaseMediaDecodeTime >>> 16 & 0xFF, upperWordBaseMediaDecodeTime >>> 8 & 0xFF, upperWordBaseMediaDecodeTime & 0xFF, lowerWordBaseMediaDecodeTime >>> 24 & 0xFF, lowerWordBaseMediaDecodeTime >>> 16 & 0xFF, lowerWordBaseMediaDecodeTime >>> 8 & 0xFF, lowerWordBaseMediaDecodeTime & 0xFF]));\n\n      // the data offset specifies the number of bytes from the start of\n      // the containing moof to the first payload byte of the associated\n      // mdat\n      dataOffset = 32 + // tfhd\n      20 + // tfdt\n      8 + // traf header\n      16 + // mfhd\n      8 + // moof header\n      8; // mdat header\n\n      // audio tracks require less metadata\n      if (track.type === 'audio') {\n        trackFragmentRun = trun(track, dataOffset);\n        return box(types.traf, trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun);\n      }\n\n      // video tracks should contain an independent and disposable samples\n      // box (sdtp)\n      // generate one and adjust offsets to match\n      sampleDependencyTable = sdtp(track);\n      trackFragmentRun = trun(track, sampleDependencyTable.length + dataOffset);\n      return box(types.traf, trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun, sampleDependencyTable);\n    };\n\n    /**\n     * Generate a track box.\n     * @param track {object} a track definition\n     * @return {Uint8Array} the track box\n     */\n    trak = function trak(track) {\n      track.duration = track.duration || 0xffffffff;\n      return box(types.trak, tkhd(track), mdia(track));\n    };\n\n    trex = function trex(track) {\n      var result = new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      (track.id & 0xFF000000) >> 24, (track.id & 0xFF0000) >> 16, (track.id & 0xFF00) >> 8, track.id & 0xFF, // track_ID\n      0x00, 0x00, 0x00, 0x01, // default_sample_description_index\n      0x00, 0x00, 0x00, 0x00, // default_sample_duration\n      0x00, 0x00, 0x00, 0x00, // default_sample_size\n      0x00, 0x01, 0x00, 0x01 // default_sample_flags\n      ]);\n      // the last two bytes of default_sample_flags is the sample\n      // degradation priority, a hint about the importance of this sample\n      // relative to others. Lower the degradation priority for all sample\n      // types other than video.\n      if (track.type !== 'video') {\n        result[result.length - 1] = 0x00;\n      }\n\n      return box(types.trex, result);\n    };\n\n    (function () {\n      var audioTrun, videoTrun, trunHeader;\n\n      // This method assumes all samples are uniform. That is, if a\n      // duration is present for the first sample, it will be present for\n      // all subsequent samples.\n      // see ISO/IEC 14496-12:2012, Section 8.8.8.1\n      trunHeader = function trunHeader(samples, offset) {\n        var durationPresent = 0,\n            sizePresent = 0,\n            flagsPresent = 0,\n            compositionTimeOffset = 0;\n\n        // trun flag constants\n        if (samples.length) {\n          if (samples[0].duration !== undefined) {\n            durationPresent = 0x1;\n          }\n          if (samples[0].size !== undefined) {\n            sizePresent = 0x2;\n          }\n          if (samples[0].flags !== undefined) {\n            flagsPresent = 0x4;\n          }\n          if (samples[0].compositionTimeOffset !== undefined) {\n            compositionTimeOffset = 0x8;\n          }\n        }\n\n        return [0x00, // version 0\n        0x00, durationPresent | sizePresent | flagsPresent | compositionTimeOffset, 0x01, // flags\n        (samples.length & 0xFF000000) >>> 24, (samples.length & 0xFF0000) >>> 16, (samples.length & 0xFF00) >>> 8, samples.length & 0xFF, // sample_count\n        (offset & 0xFF000000) >>> 24, (offset & 0xFF0000) >>> 16, (offset & 0xFF00) >>> 8, offset & 0xFF // data_offset\n        ];\n      };\n\n      videoTrun = function videoTrun(track, offset) {\n        var bytes, samples, sample, i;\n\n        samples = track.samples || [];\n        offset += 8 + 12 + 16 * samples.length;\n\n        bytes = trunHeader(samples, offset);\n\n        for (i = 0; i < samples.length; i++) {\n          sample = samples[i];\n          bytes = bytes.concat([(sample.duration & 0xFF000000) >>> 24, (sample.duration & 0xFF0000) >>> 16, (sample.duration & 0xFF00) >>> 8, sample.duration & 0xFF, // sample_duration\n          (sample.size & 0xFF000000) >>> 24, (sample.size & 0xFF0000) >>> 16, (sample.size & 0xFF00) >>> 8, sample.size & 0xFF, // sample_size\n          sample.flags.isLeading << 2 | sample.flags.dependsOn, sample.flags.isDependedOn << 6 | sample.flags.hasRedundancy << 4 | sample.flags.paddingValue << 1 | sample.flags.isNonSyncSample, sample.flags.degradationPriority & 0xF0 << 8, sample.flags.degradationPriority & 0x0F, // sample_flags\n          (sample.compositionTimeOffset & 0xFF000000) >>> 24, (sample.compositionTimeOffset & 0xFF0000) >>> 16, (sample.compositionTimeOffset & 0xFF00) >>> 8, sample.compositionTimeOffset & 0xFF // sample_composition_time_offset\n          ]);\n        }\n        return box(types.trun, new Uint8Array(bytes));\n      };\n\n      audioTrun = function audioTrun(track, offset) {\n        var bytes, samples, sample, i;\n\n        samples = track.samples || [];\n        offset += 8 + 12 + 8 * samples.length;\n\n        bytes = trunHeader(samples, offset);\n\n        for (i = 0; i < samples.length; i++) {\n          sample = samples[i];\n          bytes = bytes.concat([(sample.duration & 0xFF000000) >>> 24, (sample.duration & 0xFF0000) >>> 16, (sample.duration & 0xFF00) >>> 8, sample.duration & 0xFF, // sample_duration\n          (sample.size & 0xFF000000) >>> 24, (sample.size & 0xFF0000) >>> 16, (sample.size & 0xFF00) >>> 8, sample.size & 0xFF]); // sample_size\n        }\n\n        return box(types.trun, new Uint8Array(bytes));\n      };\n\n      trun = function trun(track, offset) {\n        if (track.type === 'audio') {\n          return audioTrun(track, offset);\n        }\n\n        return videoTrun(track, offset);\n      };\n    })();\n\n    var mp4Generator = {\n      ftyp: ftyp,\n      mdat: mdat,\n      moof: moof,\n      moov: moov,\n      initSegment: function initSegment(tracks) {\n        var fileType = ftyp(),\n            movie = moov(tracks),\n            result;\n\n        result = new Uint8Array(fileType.byteLength + movie.byteLength);\n        result.set(fileType);\n        result.set(movie, fileType.byteLength);\n        return result;\n      }\n    };\n\n    var toUnsigned = function toUnsigned(value) {\n      return value >>> 0;\n    };\n\n    var bin = {\n      toUnsigned: toUnsigned\n    };\n\n    var toUnsigned$1 = bin.toUnsigned;\n    var _findBox, parseType, timescale, startTime, getVideoTrackIds;\n\n    // Find the data for a box specified by its path\n    _findBox = function findBox(data, path) {\n      var results = [],\n          i,\n          size,\n          type,\n          end,\n          subresults;\n\n      if (!path.length) {\n        // short-circuit the search for empty paths\n        return null;\n      }\n\n      for (i = 0; i < data.byteLength;) {\n        size = toUnsigned$1(data[i] << 24 | data[i + 1] << 16 | data[i + 2] << 8 | data[i + 3]);\n\n        type = parseType(data.subarray(i + 4, i + 8));\n\n        end = size > 1 ? i + size : data.byteLength;\n\n        if (type === path[0]) {\n          if (path.length === 1) {\n            // this is the end of the path and we've found the box we were\n            // looking for\n            results.push(data.subarray(i + 8, end));\n          } else {\n            // recursively search for the next box along the path\n            subresults = _findBox(data.subarray(i + 8, end), path.slice(1));\n            if (subresults.length) {\n              results = results.concat(subresults);\n            }\n          }\n        }\n        i = end;\n      }\n\n      // we've finished searching all of data\n      return results;\n    };\n\n    /**\n     * Returns the string representation of an ASCII encoded four byte buffer.\n     * @param buffer {Uint8Array} a four-byte buffer to translate\n     * @return {string} the corresponding string\n     */\n    parseType = function parseType(buffer) {\n      var result = '';\n      result += String.fromCharCode(buffer[0]);\n      result += String.fromCharCode(buffer[1]);\n      result += String.fromCharCode(buffer[2]);\n      result += String.fromCharCode(buffer[3]);\n      return result;\n    };\n\n    /**\n     * Parses an MP4 initialization segment and extracts the timescale\n     * values for any declared tracks. Timescale values indicate the\n     * number of clock ticks per second to assume for time-based values\n     * elsewhere in the MP4.\n     *\n     * To determine the start time of an MP4, you need two pieces of\n     * information: the timescale unit and the earliest base media decode\n     * time. Multiple timescales can be specified within an MP4 but the\n     * base media decode time is always expressed in the timescale from\n     * the media header box for the track:\n     * ```\n     * moov > trak > mdia > mdhd.timescale\n     * ```\n     * @param init {Uint8Array} the bytes of the init segment\n     * @return {object} a hash of track ids to timescale values or null if\n     * the init segment is malformed.\n     */\n    timescale = function timescale(init) {\n      var result = {},\n          traks = _findBox(init, ['moov', 'trak']);\n\n      // mdhd timescale\n      return traks.reduce(function (result, trak) {\n        var tkhd, version, index, id, mdhd;\n\n        tkhd = _findBox(trak, ['tkhd'])[0];\n        if (!tkhd) {\n          return null;\n        }\n        version = tkhd[0];\n        index = version === 0 ? 12 : 20;\n        id = toUnsigned$1(tkhd[index] << 24 | tkhd[index + 1] << 16 | tkhd[index + 2] << 8 | tkhd[index + 3]);\n\n        mdhd = _findBox(trak, ['mdia', 'mdhd'])[0];\n        if (!mdhd) {\n          return null;\n        }\n        version = mdhd[0];\n        index = version === 0 ? 12 : 20;\n        result[id] = toUnsigned$1(mdhd[index] << 24 | mdhd[index + 1] << 16 | mdhd[index + 2] << 8 | mdhd[index + 3]);\n        return result;\n      }, result);\n    };\n\n    /**\n     * Determine the base media decode start time, in seconds, for an MP4\n     * fragment. If multiple fragments are specified, the earliest time is\n     * returned.\n     *\n     * The base media decode time can be parsed from track fragment\n     * metadata:\n     * ```\n     * moof > traf > tfdt.baseMediaDecodeTime\n     * ```\n     * It requires the timescale value from the mdhd to interpret.\n     *\n     * @param timescale {object} a hash of track ids to timescale values.\n     * @return {number} the earliest base media decode start time for the\n     * fragment, in seconds\n     */\n    startTime = function startTime(timescale, fragment) {\n      var trafs, baseTimes, result;\n\n      // we need info from two childrend of each track fragment box\n      trafs = _findBox(fragment, ['moof', 'traf']);\n\n      // determine the start times for each track\n      baseTimes = [].concat.apply([], trafs.map(function (traf) {\n        return _findBox(traf, ['tfhd']).map(function (tfhd) {\n          var id, scale, baseTime;\n\n          // get the track id from the tfhd\n          id = toUnsigned$1(tfhd[4] << 24 | tfhd[5] << 16 | tfhd[6] << 8 | tfhd[7]);\n          // assume a 90kHz clock if no timescale was specified\n          scale = timescale[id] || 90e3;\n\n          // get the base media decode time from the tfdt\n          baseTime = _findBox(traf, ['tfdt']).map(function (tfdt) {\n            var version, result;\n\n            version = tfdt[0];\n            result = toUnsigned$1(tfdt[4] << 24 | tfdt[5] << 16 | tfdt[6] << 8 | tfdt[7]);\n            if (version === 1) {\n              result *= Math.pow(2, 32);\n              result += toUnsigned$1(tfdt[8] << 24 | tfdt[9] << 16 | tfdt[10] << 8 | tfdt[11]);\n            }\n            return result;\n          })[0];\n          baseTime = baseTime || Infinity;\n\n          // convert base time to seconds\n          return baseTime / scale;\n        });\n      }));\n\n      // return the minimum\n      result = Math.min.apply(null, baseTimes);\n      return isFinite(result) ? result : 0;\n    };\n\n    /**\n      * Find the trackIds of the video tracks in this source.\n      * Found by parsing the Handler Reference and Track Header Boxes:\n      *   moov > trak > mdia > hdlr\n      *   moov > trak > tkhd\n      *\n      * @param {Uint8Array} init - The bytes of the init segment for this source\n      * @return {Number[]} A list of trackIds\n      *\n      * @see ISO-BMFF-12/2015, Section 8.4.3\n     **/\n    getVideoTrackIds = function getVideoTrackIds(init) {\n      var traks = _findBox(init, ['moov', 'trak']);\n      var videoTrackIds = [];\n\n      traks.forEach(function (trak) {\n        var hdlrs = _findBox(trak, ['mdia', 'hdlr']);\n        var tkhds = _findBox(trak, ['tkhd']);\n\n        hdlrs.forEach(function (hdlr, index) {\n          var handlerType = parseType(hdlr.subarray(8, 12));\n          var tkhd = tkhds[index];\n          var view;\n          var version;\n          var trackId;\n\n          if (handlerType === 'vide') {\n            view = new DataView(tkhd.buffer, tkhd.byteOffset, tkhd.byteLength);\n            version = view.getUint8(0);\n            trackId = version === 0 ? view.getUint32(12) : view.getUint32(20);\n\n            videoTrackIds.push(trackId);\n          }\n        });\n      });\n\n      return videoTrackIds;\n    };\n\n    var probe = {\n      findBox: _findBox,\n      parseType: parseType,\n      timescale: timescale,\n      startTime: startTime,\n      videoTrackIds: getVideoTrackIds\n    };\n\n    /**\n     * mux.js\n     *\n     * Copyright (c) 2014 Brightcove\n     * All rights reserved.\n     *\n     * A lightweight readable stream implemention that handles event dispatching.\n     * Objects that inherit from streams should call init in their constructors.\n     */\n\n    var Stream = function Stream() {\n      this.init = function () {\n        var listeners = {};\n        /**\n         * Add a listener for a specified event type.\n         * @param type {string} the event name\n         * @param listener {function} the callback to be invoked when an event of\n         * the specified type occurs\n         */\n        this.on = function (type, listener) {\n          if (!listeners[type]) {\n            listeners[type] = [];\n          }\n          listeners[type] = listeners[type].concat(listener);\n        };\n        /**\n         * Remove a listener for a specified event type.\n         * @param type {string} the event name\n         * @param listener {function} a function previously registered for this\n         * type of event through `on`\n         */\n        this.off = function (type, listener) {\n          var index;\n          if (!listeners[type]) {\n            return false;\n          }\n          index = listeners[type].indexOf(listener);\n          listeners[type] = listeners[type].slice();\n          listeners[type].splice(index, 1);\n          return index > -1;\n        };\n        /**\n         * Trigger an event of the specified type on this stream. Any additional\n         * arguments to this function are passed as parameters to event listeners.\n         * @param type {string} the event name\n         */\n        this.trigger = function (type) {\n          var callbacks, i, length, args;\n          callbacks = listeners[type];\n          if (!callbacks) {\n            return;\n          }\n          // Slicing the arguments on every invocation of this method\n          // can add a significant amount of overhead. Avoid the\n          // intermediate object creation for the common case of a\n          // single callback argument\n          if (arguments.length === 2) {\n            length = callbacks.length;\n            for (i = 0; i < length; ++i) {\n              callbacks[i].call(this, arguments[1]);\n            }\n          } else {\n            args = [];\n            i = arguments.length;\n            for (i = 1; i < arguments.length; ++i) {\n              args.push(arguments[i]);\n            }\n            length = callbacks.length;\n            for (i = 0; i < length; ++i) {\n              callbacks[i].apply(this, args);\n            }\n          }\n        };\n        /**\n         * Destroys the stream and cleans up.\n         */\n        this.dispose = function () {\n          listeners = {};\n        };\n      };\n    };\n\n    /**\n     * Forwards all `data` events on this stream to the destination stream. The\n     * destination stream should provide a method `push` to receive the data\n     * events as they arrive.\n     * @param destination {stream} the stream that will receive all `data` events\n     * @param autoFlush {boolean} if false, we will not call `flush` on the destination\n     *                            when the current stream emits a 'done' event\n     * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n     */\n    Stream.prototype.pipe = function (destination) {\n      this.on('data', function (data) {\n        destination.push(data);\n      });\n\n      this.on('done', function (flushSource) {\n        destination.flush(flushSource);\n      });\n\n      return destination;\n    };\n\n    // Default stream functions that are expected to be overridden to perform\n    // actual work. These are provided by the prototype as a sort of no-op\n    // implementation so that we don't have to check for their existence in the\n    // `pipe` function above.\n    Stream.prototype.push = function (data) {\n      this.trigger('data', data);\n    };\n\n    Stream.prototype.flush = function (flushSource) {\n      this.trigger('done', flushSource);\n    };\n\n    var stream = Stream;\n\n    // Convert an array of nal units into an array of frames with each frame being\n    // composed of the nal units that make up that frame\n    // Also keep track of cummulative data about the frame from the nal units such\n    // as the frame duration, starting pts, etc.\n    var groupNalsIntoFrames = function groupNalsIntoFrames(nalUnits) {\n      var i,\n          currentNal,\n          currentFrame = [],\n          frames = [];\n\n      currentFrame.byteLength = 0;\n\n      for (i = 0; i < nalUnits.length; i++) {\n        currentNal = nalUnits[i];\n\n        // Split on 'aud'-type nal units\n        if (currentNal.nalUnitType === 'access_unit_delimiter_rbsp') {\n          // Since the very first nal unit is expected to be an AUD\n          // only push to the frames array when currentFrame is not empty\n          if (currentFrame.length) {\n            currentFrame.duration = currentNal.dts - currentFrame.dts;\n            frames.push(currentFrame);\n          }\n          currentFrame = [currentNal];\n          currentFrame.byteLength = currentNal.data.byteLength;\n          currentFrame.pts = currentNal.pts;\n          currentFrame.dts = currentNal.dts;\n        } else {\n          // Specifically flag key frames for ease of use later\n          if (currentNal.nalUnitType === 'slice_layer_without_partitioning_rbsp_idr') {\n            currentFrame.keyFrame = true;\n          }\n          currentFrame.duration = currentNal.dts - currentFrame.dts;\n          currentFrame.byteLength += currentNal.data.byteLength;\n          currentFrame.push(currentNal);\n        }\n      }\n\n      // For the last frame, use the duration of the previous frame if we\n      // have nothing better to go on\n      if (frames.length && (!currentFrame.duration || currentFrame.duration <= 0)) {\n        currentFrame.duration = frames[frames.length - 1].duration;\n      }\n\n      // Push the final frame\n      frames.push(currentFrame);\n      return frames;\n    };\n\n    // Convert an array of frames into an array of Gop with each Gop being composed\n    // of the frames that make up that Gop\n    // Also keep track of cummulative data about the Gop from the frames such as the\n    // Gop duration, starting pts, etc.\n    var groupFramesIntoGops = function groupFramesIntoGops(frames) {\n      var i,\n          currentFrame,\n          currentGop = [],\n          gops = [];\n\n      // We must pre-set some of the values on the Gop since we\n      // keep running totals of these values\n      currentGop.byteLength = 0;\n      currentGop.nalCount = 0;\n      currentGop.duration = 0;\n      currentGop.pts = frames[0].pts;\n      currentGop.dts = frames[0].dts;\n\n      // store some metadata about all the Gops\n      gops.byteLength = 0;\n      gops.nalCount = 0;\n      gops.duration = 0;\n      gops.pts = frames[0].pts;\n      gops.dts = frames[0].dts;\n\n      for (i = 0; i < frames.length; i++) {\n        currentFrame = frames[i];\n\n        if (currentFrame.keyFrame) {\n          // Since the very first frame is expected to be an keyframe\n          // only push to the gops array when currentGop is not empty\n          if (currentGop.length) {\n            gops.push(currentGop);\n            gops.byteLength += currentGop.byteLength;\n            gops.nalCount += currentGop.nalCount;\n            gops.duration += currentGop.duration;\n          }\n\n          currentGop = [currentFrame];\n          currentGop.nalCount = currentFrame.length;\n          currentGop.byteLength = currentFrame.byteLength;\n          currentGop.pts = currentFrame.pts;\n          currentGop.dts = currentFrame.dts;\n          currentGop.duration = currentFrame.duration;\n        } else {\n          currentGop.duration += currentFrame.duration;\n          currentGop.nalCount += currentFrame.length;\n          currentGop.byteLength += currentFrame.byteLength;\n          currentGop.push(currentFrame);\n        }\n      }\n\n      if (gops.length && currentGop.duration <= 0) {\n        currentGop.duration = gops[gops.length - 1].duration;\n      }\n      gops.byteLength += currentGop.byteLength;\n      gops.nalCount += currentGop.nalCount;\n      gops.duration += currentGop.duration;\n\n      // push the final Gop\n      gops.push(currentGop);\n      return gops;\n    };\n\n    /*\n     * Search for the first keyframe in the GOPs and throw away all frames\n     * until that keyframe. Then extend the duration of the pulled keyframe\n     * and pull the PTS and DTS of the keyframe so that it covers the time\n     * range of the frames that were disposed.\n     *\n     * @param {Array} gops video GOPs\n     * @returns {Array} modified video GOPs\n     */\n    var extendFirstKeyFrame = function extendFirstKeyFrame(gops) {\n      var currentGop;\n\n      if (!gops[0][0].keyFrame && gops.length > 1) {\n        // Remove the first GOP\n        currentGop = gops.shift();\n\n        gops.byteLength -= currentGop.byteLength;\n        gops.nalCount -= currentGop.nalCount;\n\n        // Extend the first frame of what is now the\n        // first gop to cover the time period of the\n        // frames we just removed\n        gops[0][0].dts = currentGop.dts;\n        gops[0][0].pts = currentGop.pts;\n        gops[0][0].duration += currentGop.duration;\n      }\n\n      return gops;\n    };\n\n    /**\n     * Default sample object\n     * see ISO/IEC 14496-12:2012, section 8.6.4.3\n     */\n    var createDefaultSample = function createDefaultSample() {\n      return {\n        size: 0,\n        flags: {\n          isLeading: 0,\n          dependsOn: 1,\n          isDependedOn: 0,\n          hasRedundancy: 0,\n          degradationPriority: 0,\n          isNonSyncSample: 1\n        }\n      };\n    };\n\n    /*\n     * Collates information from a video frame into an object for eventual\n     * entry into an MP4 sample table.\n     *\n     * @param {Object} frame the video frame\n     * @param {Number} dataOffset the byte offset to position the sample\n     * @return {Object} object containing sample table info for a frame\n     */\n    var sampleForFrame = function sampleForFrame(frame, dataOffset) {\n      var sample = createDefaultSample();\n\n      sample.dataOffset = dataOffset;\n      sample.compositionTimeOffset = frame.pts - frame.dts;\n      sample.duration = frame.duration;\n      sample.size = 4 * frame.length; // Space for nal unit size\n      sample.size += frame.byteLength;\n\n      if (frame.keyFrame) {\n        sample.flags.dependsOn = 2;\n        sample.flags.isNonSyncSample = 0;\n      }\n\n      return sample;\n    };\n\n    // generate the track's sample table from an array of gops\n    var generateSampleTable = function generateSampleTable(gops, baseDataOffset) {\n      var h,\n          i,\n          sample,\n          currentGop,\n          currentFrame,\n          dataOffset = baseDataOffset || 0,\n          samples = [];\n\n      for (h = 0; h < gops.length; h++) {\n        currentGop = gops[h];\n\n        for (i = 0; i < currentGop.length; i++) {\n          currentFrame = currentGop[i];\n\n          sample = sampleForFrame(currentFrame, dataOffset);\n\n          dataOffset += sample.size;\n\n          samples.push(sample);\n        }\n      }\n      return samples;\n    };\n\n    // generate the track's raw mdat data from an array of gops\n    var concatenateNalData = function concatenateNalData(gops) {\n      var h,\n          i,\n          j,\n          currentGop,\n          currentFrame,\n          currentNal,\n          dataOffset = 0,\n          nalsByteLength = gops.byteLength,\n          numberOfNals = gops.nalCount,\n          totalByteLength = nalsByteLength + 4 * numberOfNals,\n          data = new Uint8Array(totalByteLength),\n          view = new DataView(data.buffer);\n\n      // For each Gop..\n      for (h = 0; h < gops.length; h++) {\n        currentGop = gops[h];\n\n        // For each Frame..\n        for (i = 0; i < currentGop.length; i++) {\n          currentFrame = currentGop[i];\n\n          // For each NAL..\n          for (j = 0; j < currentFrame.length; j++) {\n            currentNal = currentFrame[j];\n\n            view.setUint32(dataOffset, currentNal.data.byteLength);\n            dataOffset += 4;\n            data.set(currentNal.data, dataOffset);\n            dataOffset += currentNal.data.byteLength;\n          }\n        }\n      }\n      return data;\n    };\n\n    var frameUtils = {\n      groupNalsIntoFrames: groupNalsIntoFrames,\n      groupFramesIntoGops: groupFramesIntoGops,\n      extendFirstKeyFrame: extendFirstKeyFrame,\n      generateSampleTable: generateSampleTable,\n      concatenateNalData: concatenateNalData\n    };\n\n    var ONE_SECOND_IN_TS = 90000; // 90kHz clock\n\n    /**\n     * Store information about the start and end of the track and the\n     * duration for each frame/sample we process in order to calculate\n     * the baseMediaDecodeTime\n     */\n    var collectDtsInfo = function collectDtsInfo(track, data) {\n      if (typeof data.pts === 'number') {\n        if (track.timelineStartInfo.pts === undefined) {\n          track.timelineStartInfo.pts = data.pts;\n        }\n\n        if (track.minSegmentPts === undefined) {\n          track.minSegmentPts = data.pts;\n        } else {\n          track.minSegmentPts = Math.min(track.minSegmentPts, data.pts);\n        }\n\n        if (track.maxSegmentPts === undefined) {\n          track.maxSegmentPts = data.pts;\n        } else {\n          track.maxSegmentPts = Math.max(track.maxSegmentPts, data.pts);\n        }\n      }\n\n      if (typeof data.dts === 'number') {\n        if (track.timelineStartInfo.dts === undefined) {\n          track.timelineStartInfo.dts = data.dts;\n        }\n\n        if (track.minSegmentDts === undefined) {\n          track.minSegmentDts = data.dts;\n        } else {\n          track.minSegmentDts = Math.min(track.minSegmentDts, data.dts);\n        }\n\n        if (track.maxSegmentDts === undefined) {\n          track.maxSegmentDts = data.dts;\n        } else {\n          track.maxSegmentDts = Math.max(track.maxSegmentDts, data.dts);\n        }\n      }\n    };\n\n    /**\n     * Clear values used to calculate the baseMediaDecodeTime between\n     * tracks\n     */\n    var clearDtsInfo = function clearDtsInfo(track) {\n      delete track.minSegmentDts;\n      delete track.maxSegmentDts;\n      delete track.minSegmentPts;\n      delete track.maxSegmentPts;\n    };\n\n    /**\n     * Calculate the track's baseMediaDecodeTime based on the earliest\n     * DTS the transmuxer has ever seen and the minimum DTS for the\n     * current track\n     * @param track {object} track metadata configuration\n     * @param keepOriginalTimestamps {boolean} If true, keep the timestamps\n     *        in the source; false to adjust the first segment to start at 0.\n     */\n    var calculateTrackBaseMediaDecodeTime = function calculateTrackBaseMediaDecodeTime(track, keepOriginalTimestamps) {\n      var baseMediaDecodeTime,\n          scale,\n          minSegmentDts = track.minSegmentDts;\n\n      // Optionally adjust the time so the first segment starts at zero.\n      if (!keepOriginalTimestamps) {\n        minSegmentDts -= track.timelineStartInfo.dts;\n      }\n\n      // track.timelineStartInfo.baseMediaDecodeTime is the location, in time, where\n      // we want the start of the first segment to be placed\n      baseMediaDecodeTime = track.timelineStartInfo.baseMediaDecodeTime;\n\n      // Add to that the distance this segment is from the very first\n      baseMediaDecodeTime += minSegmentDts;\n\n      // baseMediaDecodeTime must not become negative\n      baseMediaDecodeTime = Math.max(0, baseMediaDecodeTime);\n\n      if (track.type === 'audio') {\n        // Audio has a different clock equal to the sampling_rate so we need to\n        // scale the PTS values into the clock rate of the track\n        scale = track.samplerate / ONE_SECOND_IN_TS;\n        baseMediaDecodeTime *= scale;\n        baseMediaDecodeTime = Math.floor(baseMediaDecodeTime);\n      }\n\n      return baseMediaDecodeTime;\n    };\n\n    var trackDecodeInfo = {\n      clearDtsInfo: clearDtsInfo,\n      calculateTrackBaseMediaDecodeTime: calculateTrackBaseMediaDecodeTime,\n      collectDtsInfo: collectDtsInfo\n    };\n\n    /**\n     * mux.js\n     *\n     * Copyright (c) 2015 Brightcove\n     * All rights reserved.\n     *\n     * Reads in-band caption information from a video elementary\n     * stream. Captions must follow the CEA-708 standard for injection\n     * into an MPEG-2 transport streams.\n     * @see https://en.wikipedia.org/wiki/CEA-708\n     * @see https://www.gpo.gov/fdsys/pkg/CFR-2007-title47-vol1/pdf/CFR-2007-title47-vol1-sec15-119.pdf\n     */\n\n    // Supplemental enhancement information (SEI) NAL units have a\n    // payload type field to indicate how they are to be\n    // interpreted. CEAS-708 caption content is always transmitted with\n    // payload type 0x04.\n\n    var USER_DATA_REGISTERED_ITU_T_T35 = 4,\n        RBSP_TRAILING_BITS = 128;\n\n    /**\n      * Parse a supplemental enhancement information (SEI) NAL unit.\n      * Stops parsing once a message of type ITU T T35 has been found.\n      *\n      * @param bytes {Uint8Array} the bytes of a SEI NAL unit\n      * @return {object} the parsed SEI payload\n      * @see Rec. ITU-T H.264, 7.3.2.3.1\n      */\n    var parseSei = function parseSei(bytes) {\n      var i = 0,\n          result = {\n        payloadType: -1,\n        payloadSize: 0\n      },\n          payloadType = 0,\n          payloadSize = 0;\n\n      // go through the sei_rbsp parsing each each individual sei_message\n      while (i < bytes.byteLength) {\n        // stop once we have hit the end of the sei_rbsp\n        if (bytes[i] === RBSP_TRAILING_BITS) {\n          break;\n        }\n\n        // Parse payload type\n        while (bytes[i] === 0xFF) {\n          payloadType += 255;\n          i++;\n        }\n        payloadType += bytes[i++];\n\n        // Parse payload size\n        while (bytes[i] === 0xFF) {\n          payloadSize += 255;\n          i++;\n        }\n        payloadSize += bytes[i++];\n\n        // this sei_message is a 608/708 caption so save it and break\n        // there can only ever be one caption message in a frame's sei\n        if (!result.payload && payloadType === USER_DATA_REGISTERED_ITU_T_T35) {\n          result.payloadType = payloadType;\n          result.payloadSize = payloadSize;\n          result.payload = bytes.subarray(i, i + payloadSize);\n          break;\n        }\n\n        // skip the payload and parse the next message\n        i += payloadSize;\n        payloadType = 0;\n        payloadSize = 0;\n      }\n\n      return result;\n    };\n\n    // see ANSI/SCTE 128-1 (2013), section 8.1\n    var parseUserData = function parseUserData(sei) {\n      // itu_t_t35_contry_code must be 181 (United States) for\n      // captions\n      if (sei.payload[0] !== 181) {\n        return null;\n      }\n\n      // itu_t_t35_provider_code should be 49 (ATSC) for captions\n      if ((sei.payload[1] << 8 | sei.payload[2]) !== 49) {\n        return null;\n      }\n\n      // the user_identifier should be \"GA94\" to indicate ATSC1 data\n      if (String.fromCharCode(sei.payload[3], sei.payload[4], sei.payload[5], sei.payload[6]) !== 'GA94') {\n        return null;\n      }\n\n      // finally, user_data_type_code should be 0x03 for caption data\n      if (sei.payload[7] !== 0x03) {\n        return null;\n      }\n\n      // return the user_data_type_structure and strip the trailing\n      // marker bits\n      return sei.payload.subarray(8, sei.payload.length - 1);\n    };\n\n    // see CEA-708-D, section 4.4\n    var parseCaptionPackets = function parseCaptionPackets(pts, userData) {\n      var results = [],\n          i,\n          count,\n          offset,\n          data;\n\n      // if this is just filler, return immediately\n      if (!(userData[0] & 0x40)) {\n        return results;\n      }\n\n      // parse out the cc_data_1 and cc_data_2 fields\n      count = userData[0] & 0x1f;\n      for (i = 0; i < count; i++) {\n        offset = i * 3;\n        data = {\n          type: userData[offset + 2] & 0x03,\n          pts: pts\n        };\n\n        // capture cc data when cc_valid is 1\n        if (userData[offset + 2] & 0x04) {\n          data.ccData = userData[offset + 3] << 8 | userData[offset + 4];\n          results.push(data);\n        }\n      }\n      return results;\n    };\n\n    var discardEmulationPreventionBytes = function discardEmulationPreventionBytes(data) {\n      var length = data.byteLength,\n          emulationPreventionBytesPositions = [],\n          i = 1,\n          newLength,\n          newData;\n\n      // Find all `Emulation Prevention Bytes`\n      while (i < length - 2) {\n        if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {\n          emulationPreventionBytesPositions.push(i + 2);\n          i += 2;\n        } else {\n          i++;\n        }\n      }\n\n      // If no Emulation Prevention Bytes were found just return the original\n      // array\n      if (emulationPreventionBytesPositions.length === 0) {\n        return data;\n      }\n\n      // Create a new array to hold the NAL unit data\n      newLength = length - emulationPreventionBytesPositions.length;\n      newData = new Uint8Array(newLength);\n      var sourceIndex = 0;\n\n      for (i = 0; i < newLength; sourceIndex++, i++) {\n        if (sourceIndex === emulationPreventionBytesPositions[0]) {\n          // Skip this byte\n          sourceIndex++;\n          // Remove this position index\n          emulationPreventionBytesPositions.shift();\n        }\n        newData[i] = data[sourceIndex];\n      }\n\n      return newData;\n    };\n\n    // exports\n    var captionPacketParser = {\n      parseSei: parseSei,\n      parseUserData: parseUserData,\n      parseCaptionPackets: parseCaptionPackets,\n      discardEmulationPreventionBytes: discardEmulationPreventionBytes,\n      USER_DATA_REGISTERED_ITU_T_T35: USER_DATA_REGISTERED_ITU_T_T35\n    };\n\n    // -----------------\n    // Link To Transport\n    // -----------------\n\n\n    var CaptionStream = function CaptionStream() {\n\n      CaptionStream.prototype.init.call(this);\n\n      this.captionPackets_ = [];\n\n      this.ccStreams_ = [new Cea608Stream(0, 0), // eslint-disable-line no-use-before-define\n      new Cea608Stream(0, 1), // eslint-disable-line no-use-before-define\n      new Cea608Stream(1, 0), // eslint-disable-line no-use-before-define\n      new Cea608Stream(1, 1) // eslint-disable-line no-use-before-define\n      ];\n\n      this.reset();\n\n      // forward data and done events from CCs to this CaptionStream\n      this.ccStreams_.forEach(function (cc) {\n        cc.on('data', this.trigger.bind(this, 'data'));\n        cc.on('done', this.trigger.bind(this, 'done'));\n      }, this);\n    };\n\n    CaptionStream.prototype = new stream();\n    CaptionStream.prototype.push = function (event) {\n      var sei, userData, newCaptionPackets;\n\n      // only examine SEI NALs\n      if (event.nalUnitType !== 'sei_rbsp') {\n        return;\n      }\n\n      // parse the sei\n      sei = captionPacketParser.parseSei(event.escapedRBSP);\n\n      // ignore everything but user_data_registered_itu_t_t35\n      if (sei.payloadType !== captionPacketParser.USER_DATA_REGISTERED_ITU_T_T35) {\n        return;\n      }\n\n      // parse out the user data payload\n      userData = captionPacketParser.parseUserData(sei);\n\n      // ignore unrecognized userData\n      if (!userData) {\n        return;\n      }\n\n      // Sometimes, the same segment # will be downloaded twice. To stop the\n      // caption data from being processed twice, we track the latest dts we've\n      // received and ignore everything with a dts before that. However, since\n      // data for a specific dts can be split across packets on either side of\n      // a segment boundary, we need to make sure we *don't* ignore the packets\n      // from the *next* segment that have dts === this.latestDts_. By constantly\n      // tracking the number of packets received with dts === this.latestDts_, we\n      // know how many should be ignored once we start receiving duplicates.\n      if (event.dts < this.latestDts_) {\n        // We've started getting older data, so set the flag.\n        this.ignoreNextEqualDts_ = true;\n        return;\n      } else if (event.dts === this.latestDts_ && this.ignoreNextEqualDts_) {\n        this.numSameDts_--;\n        if (!this.numSameDts_) {\n          // We've received the last duplicate packet, time to start processing again\n          this.ignoreNextEqualDts_ = false;\n        }\n        return;\n      }\n\n      // parse out CC data packets and save them for later\n      newCaptionPackets = captionPacketParser.parseCaptionPackets(event.pts, userData);\n      this.captionPackets_ = this.captionPackets_.concat(newCaptionPackets);\n      if (this.latestDts_ !== event.dts) {\n        this.numSameDts_ = 0;\n      }\n      this.numSameDts_++;\n      this.latestDts_ = event.dts;\n    };\n\n    CaptionStream.prototype.flush = function () {\n      // make sure we actually parsed captions before proceeding\n      if (!this.captionPackets_.length) {\n        this.ccStreams_.forEach(function (cc) {\n          cc.flush();\n        }, this);\n        return;\n      }\n\n      // In Chrome, the Array#sort function is not stable so add a\n      // presortIndex that we can use to ensure we get a stable-sort\n      this.captionPackets_.forEach(function (elem, idx) {\n        elem.presortIndex = idx;\n      });\n\n      // sort caption byte-pairs based on their PTS values\n      this.captionPackets_.sort(function (a, b) {\n        if (a.pts === b.pts) {\n          return a.presortIndex - b.presortIndex;\n        }\n        return a.pts - b.pts;\n      });\n\n      this.captionPackets_.forEach(function (packet) {\n        if (packet.type < 2) {\n          // Dispatch packet to the right Cea608Stream\n          this.dispatchCea608Packet(packet);\n        }\n        // this is where an 'else' would go for a dispatching packets\n        // to a theoretical Cea708Stream that handles SERVICEn data\n      }, this);\n\n      this.captionPackets_.length = 0;\n      this.ccStreams_.forEach(function (cc) {\n        cc.flush();\n      }, this);\n      return;\n    };\n\n    CaptionStream.prototype.reset = function () {\n      this.latestDts_ = null;\n      this.ignoreNextEqualDts_ = false;\n      this.numSameDts_ = 0;\n      this.activeCea608Channel_ = [null, null];\n      this.ccStreams_.forEach(function (ccStream) {\n        ccStream.reset();\n      });\n    };\n\n    CaptionStream.prototype.dispatchCea608Packet = function (packet) {\n      // NOTE: packet.type is the CEA608 field\n      if (this.setsChannel1Active(packet)) {\n        this.activeCea608Channel_[packet.type] = 0;\n      } else if (this.setsChannel2Active(packet)) {\n        this.activeCea608Channel_[packet.type] = 1;\n      }\n      if (this.activeCea608Channel_[packet.type] === null) {\n        // If we haven't received anything to set the active channel, discard the\n        // data; we don't want jumbled captions\n        return;\n      }\n      this.ccStreams_[(packet.type << 1) + this.activeCea608Channel_[packet.type]].push(packet);\n    };\n\n    CaptionStream.prototype.setsChannel1Active = function (packet) {\n      return (packet.ccData & 0x7800) === 0x1000;\n    };\n    CaptionStream.prototype.setsChannel2Active = function (packet) {\n      return (packet.ccData & 0x7800) === 0x1800;\n    };\n\n    // ----------------------\n    // Session to Application\n    // ----------------------\n\n    // This hash maps non-ASCII, special, and extended character codes to their\n    // proper Unicode equivalent. The first keys that are only a single byte\n    // are the non-standard ASCII characters, which simply map the CEA608 byte\n    // to the standard ASCII/Unicode. The two-byte keys that follow are the CEA608\n    // character codes, but have their MSB bitmasked with 0x03 so that a lookup\n    // can be performed regardless of the field and data channel on which the\n    // character code was received.\n    var CHARACTER_TRANSLATION = {\n      0x2a: 0xe1, // á\n      0x5c: 0xe9, // é\n      0x5e: 0xed, // í\n      0x5f: 0xf3, // ó\n      0x60: 0xfa, // ú\n      0x7b: 0xe7, // ç\n      0x7c: 0xf7, // ÷\n      0x7d: 0xd1, // Ñ\n      0x7e: 0xf1, // ñ\n      0x7f: 0x2588, // █\n      0x0130: 0xae, // ®\n      0x0131: 0xb0, // °\n      0x0132: 0xbd, // ½\n      0x0133: 0xbf, // ¿\n      0x0134: 0x2122, // ™\n      0x0135: 0xa2, // ¢\n      0x0136: 0xa3, // £\n      0x0137: 0x266a, // ♪\n      0x0138: 0xe0, // à\n      0x0139: 0xa0, //\n      0x013a: 0xe8, // è\n      0x013b: 0xe2, // â\n      0x013c: 0xea, // ê\n      0x013d: 0xee, // î\n      0x013e: 0xf4, // ô\n      0x013f: 0xfb, // û\n      0x0220: 0xc1, // Á\n      0x0221: 0xc9, // É\n      0x0222: 0xd3, // Ó\n      0x0223: 0xda, // Ú\n      0x0224: 0xdc, // Ü\n      0x0225: 0xfc, // ü\n      0x0226: 0x2018, // ‘\n      0x0227: 0xa1, // ¡\n      0x0228: 0x2a, // *\n      0x0229: 0x27, // '\n      0x022a: 0x2014, // —\n      0x022b: 0xa9, // ©\n      0x022c: 0x2120, // ℠\n      0x022d: 0x2022, // •\n      0x022e: 0x201c, // “\n      0x022f: 0x201d, // ”\n      0x0230: 0xc0, // À\n      0x0231: 0xc2, // Â\n      0x0232: 0xc7, // Ç\n      0x0233: 0xc8, // È\n      0x0234: 0xca, // Ê\n      0x0235: 0xcb, // Ë\n      0x0236: 0xeb, // ë\n      0x0237: 0xce, // Î\n      0x0238: 0xcf, // Ï\n      0x0239: 0xef, // ï\n      0x023a: 0xd4, // Ô\n      0x023b: 0xd9, // Ù\n      0x023c: 0xf9, // ù\n      0x023d: 0xdb, // Û\n      0x023e: 0xab, // «\n      0x023f: 0xbb, // »\n      0x0320: 0xc3, // Ã\n      0x0321: 0xe3, // ã\n      0x0322: 0xcd, // Í\n      0x0323: 0xcc, // Ì\n      0x0324: 0xec, // ì\n      0x0325: 0xd2, // Ò\n      0x0326: 0xf2, // ò\n      0x0327: 0xd5, // Õ\n      0x0328: 0xf5, // õ\n      0x0329: 0x7b, // {\n      0x032a: 0x7d, // }\n      0x032b: 0x5c, // \\\n      0x032c: 0x5e, // ^\n      0x032d: 0x5f, // _\n      0x032e: 0x7c, // |\n      0x032f: 0x7e, // ~\n      0x0330: 0xc4, // Ä\n      0x0331: 0xe4, // ä\n      0x0332: 0xd6, // Ö\n      0x0333: 0xf6, // ö\n      0x0334: 0xdf, // ß\n      0x0335: 0xa5, // ¥\n      0x0336: 0xa4, // ¤\n      0x0337: 0x2502, // │\n      0x0338: 0xc5, // Å\n      0x0339: 0xe5, // å\n      0x033a: 0xd8, // Ø\n      0x033b: 0xf8, // ø\n      0x033c: 0x250c, // ┌\n      0x033d: 0x2510, // ┐\n      0x033e: 0x2514, // └\n      0x033f: 0x2518 // ┘\n    };\n\n    var getCharFromCode = function getCharFromCode(code) {\n      if (code === null) {\n        return '';\n      }\n      code = CHARACTER_TRANSLATION[code] || code;\n      return String.fromCharCode(code);\n    };\n\n    // the index of the last row in a CEA-608 display buffer\n    var BOTTOM_ROW = 14;\n\n    // This array is used for mapping PACs -> row #, since there's no way of\n    // getting it through bit logic.\n    var ROWS = [0x1100, 0x1120, 0x1200, 0x1220, 0x1500, 0x1520, 0x1600, 0x1620, 0x1700, 0x1720, 0x1000, 0x1300, 0x1320, 0x1400, 0x1420];\n\n    // CEA-608 captions are rendered onto a 34x15 matrix of character\n    // cells. The \"bottom\" row is the last element in the outer array.\n    var createDisplayBuffer = function createDisplayBuffer() {\n      var result = [],\n          i = BOTTOM_ROW + 1;\n      while (i--) {\n        result.push('');\n      }\n      return result;\n    };\n\n    var Cea608Stream = function Cea608Stream(field, dataChannel) {\n      Cea608Stream.prototype.init.call(this);\n\n      this.field_ = field || 0;\n      this.dataChannel_ = dataChannel || 0;\n\n      this.name_ = 'CC' + ((this.field_ << 1 | this.dataChannel_) + 1);\n\n      this.setConstants();\n      this.reset();\n\n      this.push = function (packet) {\n        var data, swap, char0, char1, text;\n        // remove the parity bits\n        data = packet.ccData & 0x7f7f;\n\n        // ignore duplicate control codes; the spec demands they're sent twice\n        if (data === this.lastControlCode_) {\n          this.lastControlCode_ = null;\n          return;\n        }\n\n        // Store control codes\n        if ((data & 0xf000) === 0x1000) {\n          this.lastControlCode_ = data;\n        } else if (data !== this.PADDING_) {\n          this.lastControlCode_ = null;\n        }\n\n        char0 = data >>> 8;\n        char1 = data & 0xff;\n\n        if (data === this.PADDING_) {\n          return;\n        } else if (data === this.RESUME_CAPTION_LOADING_) {\n          this.mode_ = 'popOn';\n        } else if (data === this.END_OF_CAPTION_) {\n          // If an EOC is received while in paint-on mode, the displayed caption\n          // text should be swapped to non-displayed memory as if it was a pop-on\n          // caption. Because of that, we should explicitly switch back to pop-on\n          // mode\n          this.mode_ = 'popOn';\n          this.clearFormatting(packet.pts);\n          // if a caption was being displayed, it's gone now\n          this.flushDisplayed(packet.pts);\n\n          // flip memory\n          swap = this.displayed_;\n          this.displayed_ = this.nonDisplayed_;\n          this.nonDisplayed_ = swap;\n\n          // start measuring the time to display the caption\n          this.startPts_ = packet.pts;\n        } else if (data === this.ROLL_UP_2_ROWS_) {\n          this.rollUpRows_ = 2;\n          this.setRollUp(packet.pts);\n        } else if (data === this.ROLL_UP_3_ROWS_) {\n          this.rollUpRows_ = 3;\n          this.setRollUp(packet.pts);\n        } else if (data === this.ROLL_UP_4_ROWS_) {\n          this.rollUpRows_ = 4;\n          this.setRollUp(packet.pts);\n        } else if (data === this.CARRIAGE_RETURN_) {\n          this.clearFormatting(packet.pts);\n          this.flushDisplayed(packet.pts);\n          this.shiftRowsUp_();\n          this.startPts_ = packet.pts;\n        } else if (data === this.BACKSPACE_) {\n          if (this.mode_ === 'popOn') {\n            this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);\n          } else {\n            this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1);\n          }\n        } else if (data === this.ERASE_DISPLAYED_MEMORY_) {\n          this.flushDisplayed(packet.pts);\n          this.displayed_ = createDisplayBuffer();\n        } else if (data === this.ERASE_NON_DISPLAYED_MEMORY_) {\n          this.nonDisplayed_ = createDisplayBuffer();\n        } else if (data === this.RESUME_DIRECT_CAPTIONING_) {\n          if (this.mode_ !== 'paintOn') {\n            // NOTE: This should be removed when proper caption positioning is\n            // implemented\n            this.flushDisplayed(packet.pts);\n            this.displayed_ = createDisplayBuffer();\n          }\n          this.mode_ = 'paintOn';\n          this.startPts_ = packet.pts;\n\n          // Append special characters to caption text\n        } else if (this.isSpecialCharacter(char0, char1)) {\n          // Bitmask char0 so that we can apply character transformations\n          // regardless of field and data channel.\n          // Then byte-shift to the left and OR with char1 so we can pass the\n          // entire character code to `getCharFromCode`.\n          char0 = (char0 & 0x03) << 8;\n          text = getCharFromCode(char0 | char1);\n          this[this.mode_](packet.pts, text);\n          this.column_++;\n\n          // Append extended characters to caption text\n        } else if (this.isExtCharacter(char0, char1)) {\n          // Extended characters always follow their \"non-extended\" equivalents.\n          // IE if a \"è\" is desired, you'll always receive \"eè\"; non-compliant\n          // decoders are supposed to drop the \"è\", while compliant decoders\n          // backspace the \"e\" and insert \"è\".\n\n          // Delete the previous character\n          if (this.mode_ === 'popOn') {\n            this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);\n          } else {\n            this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1);\n          }\n\n          // Bitmask char0 so that we can apply character transformations\n          // regardless of field and data channel.\n          // Then byte-shift to the left and OR with char1 so we can pass the\n          // entire character code to `getCharFromCode`.\n          char0 = (char0 & 0x03) << 8;\n          text = getCharFromCode(char0 | char1);\n          this[this.mode_](packet.pts, text);\n          this.column_++;\n\n          // Process mid-row codes\n        } else if (this.isMidRowCode(char0, char1)) {\n          // Attributes are not additive, so clear all formatting\n          this.clearFormatting(packet.pts);\n\n          // According to the standard, mid-row codes\n          // should be replaced with spaces, so add one now\n          this[this.mode_](packet.pts, ' ');\n          this.column_++;\n\n          if ((char1 & 0xe) === 0xe) {\n            this.addFormatting(packet.pts, ['i']);\n          }\n\n          if ((char1 & 0x1) === 0x1) {\n            this.addFormatting(packet.pts, ['u']);\n          }\n\n          // Detect offset control codes and adjust cursor\n        } else if (this.isOffsetControlCode(char0, char1)) {\n          // Cursor position is set by indent PAC (see below) in 4-column\n          // increments, with an additional offset code of 1-3 to reach any\n          // of the 32 columns specified by CEA-608. So all we need to do\n          // here is increment the column cursor by the given offset.\n          this.column_ += char1 & 0x03;\n\n          // Detect PACs (Preamble Address Codes)\n        } else if (this.isPAC(char0, char1)) {\n\n          // There's no logic for PAC -> row mapping, so we have to just\n          // find the row code in an array and use its index :(\n          var row = ROWS.indexOf(data & 0x1f20);\n\n          // Configure the caption window if we're in roll-up mode\n          if (this.mode_ === 'rollUp') {\n            this.setRollUp(packet.pts, row);\n          }\n\n          if (row !== this.row_) {\n            // formatting is only persistent for current row\n            this.clearFormatting(packet.pts);\n            this.row_ = row;\n          }\n          // All PACs can apply underline, so detect and apply\n          // (All odd-numbered second bytes set underline)\n          if (char1 & 0x1 && this.formatting_.indexOf('u') === -1) {\n            this.addFormatting(packet.pts, ['u']);\n          }\n\n          if ((data & 0x10) === 0x10) {\n            // We've got an indent level code. Each successive even number\n            // increments the column cursor by 4, so we can get the desired\n            // column position by bit-shifting to the right (to get n/2)\n            // and multiplying by 4.\n            this.column_ = ((data & 0xe) >> 1) * 4;\n          }\n\n          if (this.isColorPAC(char1)) {\n            // it's a color code, though we only support white, which\n            // can be either normal or italicized. white italics can be\n            // either 0x4e or 0x6e depending on the row, so we just\n            // bitwise-and with 0xe to see if italics should be turned on\n            if ((char1 & 0xe) === 0xe) {\n              this.addFormatting(packet.pts, ['i']);\n            }\n          }\n\n          // We have a normal character in char0, and possibly one in char1\n        } else if (this.isNormalChar(char0)) {\n          if (char1 === 0x00) {\n            char1 = null;\n          }\n          text = getCharFromCode(char0);\n          text += getCharFromCode(char1);\n          this[this.mode_](packet.pts, text);\n          this.column_ += text.length;\n        } // finish data processing\n      };\n    };\n    Cea608Stream.prototype = new stream();\n    // Trigger a cue point that captures the current state of the\n    // display buffer\n    Cea608Stream.prototype.flushDisplayed = function (pts) {\n      var content = this.displayed_\n      // remove spaces from the start and end of the string\n      .map(function (row) {\n        return row.trim();\n      })\n      // combine all text rows to display in one cue\n      .join('\\n')\n      // and remove blank rows from the start and end, but not the middle\n      .replace(/^\\n+|\\n+$/g, '');\n\n      if (content.length) {\n        this.trigger('data', {\n          startPts: this.startPts_,\n          endPts: pts,\n          text: content,\n          stream: this.name_\n        });\n      }\n    };\n\n    /**\n     * Zero out the data, used for startup and on seek\n     */\n    Cea608Stream.prototype.reset = function () {\n      this.mode_ = 'popOn';\n      // When in roll-up mode, the index of the last row that will\n      // actually display captions. If a caption is shifted to a row\n      // with a lower index than this, it is cleared from the display\n      // buffer\n      this.topRow_ = 0;\n      this.startPts_ = 0;\n      this.displayed_ = createDisplayBuffer();\n      this.nonDisplayed_ = createDisplayBuffer();\n      this.lastControlCode_ = null;\n\n      // Track row and column for proper line-breaking and spacing\n      this.column_ = 0;\n      this.row_ = BOTTOM_ROW;\n      this.rollUpRows_ = 2;\n\n      // This variable holds currently-applied formatting\n      this.formatting_ = [];\n    };\n\n    /**\n     * Sets up control code and related constants for this instance\n     */\n    Cea608Stream.prototype.setConstants = function () {\n      // The following attributes have these uses:\n      // ext_ :    char0 for mid-row codes, and the base for extended\n      //           chars (ext_+0, ext_+1, and ext_+2 are char0s for\n      //           extended codes)\n      // control_: char0 for control codes, except byte-shifted to the\n      //           left so that we can do this.control_ | CONTROL_CODE\n      // offset_:  char0 for tab offset codes\n      //\n      // It's also worth noting that control codes, and _only_ control codes,\n      // differ between field 1 and field2. Field 2 control codes are always\n      // their field 1 value plus 1. That's why there's the \"| field\" on the\n      // control value.\n      if (this.dataChannel_ === 0) {\n        this.BASE_ = 0x10;\n        this.EXT_ = 0x11;\n        this.CONTROL_ = (0x14 | this.field_) << 8;\n        this.OFFSET_ = 0x17;\n      } else if (this.dataChannel_ === 1) {\n        this.BASE_ = 0x18;\n        this.EXT_ = 0x19;\n        this.CONTROL_ = (0x1c | this.field_) << 8;\n        this.OFFSET_ = 0x1f;\n      }\n\n      // Constants for the LSByte command codes recognized by Cea608Stream. This\n      // list is not exhaustive. For a more comprehensive listing and semantics see\n      // http://www.gpo.gov/fdsys/pkg/CFR-2010-title47-vol1/pdf/CFR-2010-title47-vol1-sec15-119.pdf\n      // Padding\n      this.PADDING_ = 0x0000;\n      // Pop-on Mode\n      this.RESUME_CAPTION_LOADING_ = this.CONTROL_ | 0x20;\n      this.END_OF_CAPTION_ = this.CONTROL_ | 0x2f;\n      // Roll-up Mode\n      this.ROLL_UP_2_ROWS_ = this.CONTROL_ | 0x25;\n      this.ROLL_UP_3_ROWS_ = this.CONTROL_ | 0x26;\n      this.ROLL_UP_4_ROWS_ = this.CONTROL_ | 0x27;\n      this.CARRIAGE_RETURN_ = this.CONTROL_ | 0x2d;\n      // paint-on mode\n      this.RESUME_DIRECT_CAPTIONING_ = this.CONTROL_ | 0x29;\n      // Erasure\n      this.BACKSPACE_ = this.CONTROL_ | 0x21;\n      this.ERASE_DISPLAYED_MEMORY_ = this.CONTROL_ | 0x2c;\n      this.ERASE_NON_DISPLAYED_MEMORY_ = this.CONTROL_ | 0x2e;\n    };\n\n    /**\n     * Detects if the 2-byte packet data is a special character\n     *\n     * Special characters have a second byte in the range 0x30 to 0x3f,\n     * with the first byte being 0x11 (for data channel 1) or 0x19 (for\n     * data channel 2).\n     *\n     * @param  {Integer} char0 The first byte\n     * @param  {Integer} char1 The second byte\n     * @return {Boolean}       Whether the 2 bytes are an special character\n     */\n    Cea608Stream.prototype.isSpecialCharacter = function (char0, char1) {\n      return char0 === this.EXT_ && char1 >= 0x30 && char1 <= 0x3f;\n    };\n\n    /**\n     * Detects if the 2-byte packet data is an extended character\n     *\n     * Extended characters have a second byte in the range 0x20 to 0x3f,\n     * with the first byte being 0x12 or 0x13 (for data channel 1) or\n     * 0x1a or 0x1b (for data channel 2).\n     *\n     * @param  {Integer} char0 The first byte\n     * @param  {Integer} char1 The second byte\n     * @return {Boolean}       Whether the 2 bytes are an extended character\n     */\n    Cea608Stream.prototype.isExtCharacter = function (char0, char1) {\n      return (char0 === this.EXT_ + 1 || char0 === this.EXT_ + 2) && char1 >= 0x20 && char1 <= 0x3f;\n    };\n\n    /**\n     * Detects if the 2-byte packet is a mid-row code\n     *\n     * Mid-row codes have a second byte in the range 0x20 to 0x2f, with\n     * the first byte being 0x11 (for data channel 1) or 0x19 (for data\n     * channel 2).\n     *\n     * @param  {Integer} char0 The first byte\n     * @param  {Integer} char1 The second byte\n     * @return {Boolean}       Whether the 2 bytes are a mid-row code\n     */\n    Cea608Stream.prototype.isMidRowCode = function (char0, char1) {\n      return char0 === this.EXT_ && char1 >= 0x20 && char1 <= 0x2f;\n    };\n\n    /**\n     * Detects if the 2-byte packet is an offset control code\n     *\n     * Offset control codes have a second byte in the range 0x21 to 0x23,\n     * with the first byte being 0x17 (for data channel 1) or 0x1f (for\n     * data channel 2).\n     *\n     * @param  {Integer} char0 The first byte\n     * @param  {Integer} char1 The second byte\n     * @return {Boolean}       Whether the 2 bytes are an offset control code\n     */\n    Cea608Stream.prototype.isOffsetControlCode = function (char0, char1) {\n      return char0 === this.OFFSET_ && char1 >= 0x21 && char1 <= 0x23;\n    };\n\n    /**\n     * Detects if the 2-byte packet is a Preamble Address Code\n     *\n     * PACs have a first byte in the range 0x10 to 0x17 (for data channel 1)\n     * or 0x18 to 0x1f (for data channel 2), with the second byte in the\n     * range 0x40 to 0x7f.\n     *\n     * @param  {Integer} char0 The first byte\n     * @param  {Integer} char1 The second byte\n     * @return {Boolean}       Whether the 2 bytes are a PAC\n     */\n    Cea608Stream.prototype.isPAC = function (char0, char1) {\n      return char0 >= this.BASE_ && char0 < this.BASE_ + 8 && char1 >= 0x40 && char1 <= 0x7f;\n    };\n\n    /**\n     * Detects if a packet's second byte is in the range of a PAC color code\n     *\n     * PAC color codes have the second byte be in the range 0x40 to 0x4f, or\n     * 0x60 to 0x6f.\n     *\n     * @param  {Integer} char1 The second byte\n     * @return {Boolean}       Whether the byte is a color PAC\n     */\n    Cea608Stream.prototype.isColorPAC = function (char1) {\n      return char1 >= 0x40 && char1 <= 0x4f || char1 >= 0x60 && char1 <= 0x7f;\n    };\n\n    /**\n     * Detects if a single byte is in the range of a normal character\n     *\n     * Normal text bytes are in the range 0x20 to 0x7f.\n     *\n     * @param  {Integer} char  The byte\n     * @return {Boolean}       Whether the byte is a normal character\n     */\n    Cea608Stream.prototype.isNormalChar = function (char) {\n      return char >= 0x20 && char <= 0x7f;\n    };\n\n    /**\n     * Configures roll-up\n     *\n     * @param  {Integer} pts         Current PTS\n     * @param  {Integer} newBaseRow  Used by PACs to slide the current window to\n     *                               a new position\n     */\n    Cea608Stream.prototype.setRollUp = function (pts, newBaseRow) {\n      // Reset the base row to the bottom row when switching modes\n      if (this.mode_ !== 'rollUp') {\n        this.row_ = BOTTOM_ROW;\n        this.mode_ = 'rollUp';\n        // Spec says to wipe memories when switching to roll-up\n        this.flushDisplayed(pts);\n        this.nonDisplayed_ = createDisplayBuffer();\n        this.displayed_ = createDisplayBuffer();\n      }\n\n      if (newBaseRow !== undefined && newBaseRow !== this.row_) {\n        // move currently displayed captions (up or down) to the new base row\n        for (var i = 0; i < this.rollUpRows_; i++) {\n          this.displayed_[newBaseRow - i] = this.displayed_[this.row_ - i];\n          this.displayed_[this.row_ - i] = '';\n        }\n      }\n\n      if (newBaseRow === undefined) {\n        newBaseRow = this.row_;\n      }\n      this.topRow_ = newBaseRow - this.rollUpRows_ + 1;\n    };\n\n    // Adds the opening HTML tag for the passed character to the caption text,\n    // and keeps track of it for later closing\n    Cea608Stream.prototype.addFormatting = function (pts, format) {\n      this.formatting_ = this.formatting_.concat(format);\n      var text = format.reduce(function (text, format) {\n        return text + '<' + format + '>';\n      }, '');\n      this[this.mode_](pts, text);\n    };\n\n    // Adds HTML closing tags for current formatting to caption text and\n    // clears remembered formatting\n    Cea608Stream.prototype.clearFormatting = function (pts) {\n      if (!this.formatting_.length) {\n        return;\n      }\n      var text = this.formatting_.reverse().reduce(function (text, format) {\n        return text + '</' + format + '>';\n      }, '');\n      this.formatting_ = [];\n      this[this.mode_](pts, text);\n    };\n\n    // Mode Implementations\n    Cea608Stream.prototype.popOn = function (pts, text) {\n      var baseRow = this.nonDisplayed_[this.row_];\n\n      // buffer characters\n      baseRow += text;\n      this.nonDisplayed_[this.row_] = baseRow;\n    };\n\n    Cea608Stream.prototype.rollUp = function (pts, text) {\n      var baseRow = this.displayed_[this.row_];\n\n      baseRow += text;\n      this.displayed_[this.row_] = baseRow;\n    };\n\n    Cea608Stream.prototype.shiftRowsUp_ = function () {\n      var i;\n      // clear out inactive rows\n      for (i = 0; i < this.topRow_; i++) {\n        this.displayed_[i] = '';\n      }\n      for (i = this.row_ + 1; i < BOTTOM_ROW + 1; i++) {\n        this.displayed_[i] = '';\n      }\n      // shift displayed rows up\n      for (i = this.topRow_; i < this.row_; i++) {\n        this.displayed_[i] = this.displayed_[i + 1];\n      }\n      // clear out the bottom row\n      this.displayed_[this.row_] = '';\n    };\n\n    Cea608Stream.prototype.paintOn = function (pts, text) {\n      var baseRow = this.displayed_[this.row_];\n\n      baseRow += text;\n      this.displayed_[this.row_] = baseRow;\n    };\n\n    // exports\n    var captionStream = {\n      CaptionStream: CaptionStream,\n      Cea608Stream: Cea608Stream\n    };\n\n    var streamTypes = {\n      H264_STREAM_TYPE: 0x1B,\n      ADTS_STREAM_TYPE: 0x0F,\n      METADATA_STREAM_TYPE: 0x15\n    };\n\n    var MAX_TS = 8589934592;\n\n    var RO_THRESH = 4294967296;\n\n    var handleRollover = function handleRollover(value, reference) {\n      var direction = 1;\n\n      if (value > reference) {\n        // If the current timestamp value is greater than our reference timestamp and we detect a\n        // timestamp rollover, this means the roll over is happening in the opposite direction.\n        // Example scenario: Enter a long stream/video just after a rollover occurred. The reference\n        // point will be set to a small number, e.g. 1. The user then seeks backwards over the\n        // rollover point. In loading this segment, the timestamp values will be very large,\n        // e.g. 2^33 - 1. Since this comes before the data we loaded previously, we want to adjust\n        // the time stamp to be `value - 2^33`.\n        direction = -1;\n      }\n\n      // Note: A seek forwards or back that is greater than the RO_THRESH (2^32, ~13 hours) will\n      // cause an incorrect adjustment.\n      while (Math.abs(reference - value) > RO_THRESH) {\n        value += direction * MAX_TS;\n      }\n\n      return value;\n    };\n\n    var TimestampRolloverStream = function TimestampRolloverStream(type) {\n      var lastDTS, referenceDTS;\n\n      TimestampRolloverStream.prototype.init.call(this);\n\n      this.type_ = type;\n\n      this.push = function (data) {\n        if (data.type !== this.type_) {\n          return;\n        }\n\n        if (referenceDTS === undefined) {\n          referenceDTS = data.dts;\n        }\n\n        data.dts = handleRollover(data.dts, referenceDTS);\n        data.pts = handleRollover(data.pts, referenceDTS);\n\n        lastDTS = data.dts;\n\n        this.trigger('data', data);\n      };\n\n      this.flush = function () {\n        referenceDTS = lastDTS;\n        this.trigger('done');\n      };\n\n      this.discontinuity = function () {\n        referenceDTS = void 0;\n        lastDTS = void 0;\n      };\n    };\n\n    TimestampRolloverStream.prototype = new stream();\n\n    var timestampRolloverStream = {\n      TimestampRolloverStream: TimestampRolloverStream,\n      handleRollover: handleRollover\n    };\n\n    var percentEncode = function percentEncode(bytes, start, end) {\n      var i,\n          result = '';\n      for (i = start; i < end; i++) {\n        result += '%' + ('00' + bytes[i].toString(16)).slice(-2);\n      }\n      return result;\n    },\n\n\n    // return the string representation of the specified byte range,\n    // interpreted as UTf-8.\n    parseUtf8 = function parseUtf8(bytes, start, end) {\n      return decodeURIComponent(percentEncode(bytes, start, end));\n    },\n\n\n    // return the string representation of the specified byte range,\n    // interpreted as ISO-8859-1.\n    parseIso88591 = function parseIso88591(bytes, start, end) {\n      return unescape(percentEncode(bytes, start, end)); // jshint ignore:line\n    },\n        parseSyncSafeInteger = function parseSyncSafeInteger(data) {\n      return data[0] << 21 | data[1] << 14 | data[2] << 7 | data[3];\n    },\n        tagParsers = {\n      TXXX: function TXXX(tag) {\n        var i;\n        if (tag.data[0] !== 3) {\n          // ignore frames with unrecognized character encodings\n          return;\n        }\n\n        for (i = 1; i < tag.data.length; i++) {\n          if (tag.data[i] === 0) {\n            // parse the text fields\n            tag.description = parseUtf8(tag.data, 1, i);\n            // do not include the null terminator in the tag value\n            tag.value = parseUtf8(tag.data, i + 1, tag.data.length).replace(/\\0*$/, '');\n            break;\n          }\n        }\n        tag.data = tag.value;\n      },\n      WXXX: function WXXX(tag) {\n        var i;\n        if (tag.data[0] !== 3) {\n          // ignore frames with unrecognized character encodings\n          return;\n        }\n\n        for (i = 1; i < tag.data.length; i++) {\n          if (tag.data[i] === 0) {\n            // parse the description and URL fields\n            tag.description = parseUtf8(tag.data, 1, i);\n            tag.url = parseUtf8(tag.data, i + 1, tag.data.length);\n            break;\n          }\n        }\n      },\n      PRIV: function PRIV(tag) {\n        var i;\n\n        for (i = 0; i < tag.data.length; i++) {\n          if (tag.data[i] === 0) {\n            // parse the description and URL fields\n            tag.owner = parseIso88591(tag.data, 0, i);\n            break;\n          }\n        }\n        tag.privateData = tag.data.subarray(i + 1);\n        tag.data = tag.privateData;\n      }\n    },\n        _MetadataStream;\n\n    _MetadataStream = function MetadataStream(options) {\n      var settings = {\n        debug: !!(options && options.debug),\n\n        // the bytes of the program-level descriptor field in MP2T\n        // see ISO/IEC 13818-1:2013 (E), section 2.6 \"Program and\n        // program element descriptors\"\n        descriptor: options && options.descriptor\n      },\n\n\n      // the total size in bytes of the ID3 tag being parsed\n      tagSize = 0,\n\n\n      // tag data that is not complete enough to be parsed\n      buffer = [],\n\n\n      // the total number of bytes currently in the buffer\n      bufferSize = 0,\n          i;\n\n      _MetadataStream.prototype.init.call(this);\n\n      // calculate the text track in-band metadata track dispatch type\n      // https://html.spec.whatwg.org/multipage/embedded-content.html#steps-to-expose-a-media-resource-specific-text-track\n      this.dispatchType = streamTypes.METADATA_STREAM_TYPE.toString(16);\n      if (settings.descriptor) {\n        for (i = 0; i < settings.descriptor.length; i++) {\n          this.dispatchType += ('00' + settings.descriptor[i].toString(16)).slice(-2);\n        }\n      }\n\n      this.push = function (chunk) {\n        var tag, frameStart, frameSize, frame, i, frameHeader;\n        if (chunk.type !== 'timed-metadata') {\n          return;\n        }\n\n        // if data_alignment_indicator is set in the PES header,\n        // we must have the start of a new ID3 tag. Assume anything\n        // remaining in the buffer was malformed and throw it out\n        if (chunk.dataAlignmentIndicator) {\n          bufferSize = 0;\n          buffer.length = 0;\n        }\n\n        // ignore events that don't look like ID3 data\n        if (buffer.length === 0 && (chunk.data.length < 10 || chunk.data[0] !== 'I'.charCodeAt(0) || chunk.data[1] !== 'D'.charCodeAt(0) || chunk.data[2] !== '3'.charCodeAt(0))) {\n          if (settings.debug) {\n            // eslint-disable-next-line no-console\n            console.log('Skipping unrecognized metadata packet');\n          }\n          return;\n        }\n\n        // add this chunk to the data we've collected so far\n\n        buffer.push(chunk);\n        bufferSize += chunk.data.byteLength;\n\n        // grab the size of the entire frame from the ID3 header\n        if (buffer.length === 1) {\n          // the frame size is transmitted as a 28-bit integer in the\n          // last four bytes of the ID3 header.\n          // The most significant bit of each byte is dropped and the\n          // results concatenated to recover the actual value.\n          tagSize = parseSyncSafeInteger(chunk.data.subarray(6, 10));\n\n          // ID3 reports the tag size excluding the header but it's more\n          // convenient for our comparisons to include it\n          tagSize += 10;\n        }\n\n        // if the entire frame has not arrived, wait for more data\n        if (bufferSize < tagSize) {\n          return;\n        }\n\n        // collect the entire frame so it can be parsed\n        tag = {\n          data: new Uint8Array(tagSize),\n          frames: [],\n          pts: buffer[0].pts,\n          dts: buffer[0].dts\n        };\n        for (i = 0; i < tagSize;) {\n          tag.data.set(buffer[0].data.subarray(0, tagSize - i), i);\n          i += buffer[0].data.byteLength;\n          bufferSize -= buffer[0].data.byteLength;\n          buffer.shift();\n        }\n\n        // find the start of the first frame and the end of the tag\n        frameStart = 10;\n        if (tag.data[5] & 0x40) {\n          // advance the frame start past the extended header\n          frameStart += 4; // header size field\n          frameStart += parseSyncSafeInteger(tag.data.subarray(10, 14));\n\n          // clip any padding off the end\n          tagSize -= parseSyncSafeInteger(tag.data.subarray(16, 20));\n        }\n\n        // parse one or more ID3 frames\n        // http://id3.org/id3v2.3.0#ID3v2_frame_overview\n        do {\n          // determine the number of bytes in this frame\n          frameSize = parseSyncSafeInteger(tag.data.subarray(frameStart + 4, frameStart + 8));\n          if (frameSize < 1) {\n            // eslint-disable-next-line no-console\n            return console.log('Malformed ID3 frame encountered. Skipping metadata parsing.');\n          }\n          frameHeader = String.fromCharCode(tag.data[frameStart], tag.data[frameStart + 1], tag.data[frameStart + 2], tag.data[frameStart + 3]);\n\n          frame = {\n            id: frameHeader,\n            data: tag.data.subarray(frameStart + 10, frameStart + frameSize + 10)\n          };\n          frame.key = frame.id;\n          if (tagParsers[frame.id]) {\n            tagParsers[frame.id](frame);\n\n            // handle the special PRIV frame used to indicate the start\n            // time for raw AAC data\n            if (frame.owner === 'com.apple.streaming.transportStreamTimestamp') {\n              var d = frame.data,\n                  size = (d[3] & 0x01) << 30 | d[4] << 22 | d[5] << 14 | d[6] << 6 | d[7] >>> 2;\n\n              size *= 4;\n              size += d[7] & 0x03;\n              frame.timeStamp = size;\n              // in raw AAC, all subsequent data will be timestamped based\n              // on the value of this frame\n              // we couldn't have known the appropriate pts and dts before\n              // parsing this ID3 tag so set those values now\n              if (tag.pts === undefined && tag.dts === undefined) {\n                tag.pts = frame.timeStamp;\n                tag.dts = frame.timeStamp;\n              }\n              this.trigger('timestamp', frame);\n            }\n          }\n          tag.frames.push(frame);\n\n          frameStart += 10; // advance past the frame header\n          frameStart += frameSize; // advance past the frame body\n        } while (frameStart < tagSize);\n        this.trigger('data', tag);\n      };\n    };\n    _MetadataStream.prototype = new stream();\n\n    var metadataStream = _MetadataStream;\n\n    var TimestampRolloverStream$1 = timestampRolloverStream.TimestampRolloverStream;\n\n    // object types\n    var _TransportPacketStream, _TransportParseStream, _ElementaryStream;\n\n    // constants\n    var MP2T_PACKET_LENGTH = 188,\n\n\n    // bytes\n    SYNC_BYTE = 0x47;\n\n    /**\n     * Splits an incoming stream of binary data into MPEG-2 Transport\n     * Stream packets.\n     */\n    _TransportPacketStream = function TransportPacketStream() {\n      var buffer = new Uint8Array(MP2T_PACKET_LENGTH),\n          bytesInBuffer = 0;\n\n      _TransportPacketStream.prototype.init.call(this);\n\n      // Deliver new bytes to the stream.\n\n      /**\n       * Split a stream of data into M2TS packets\n      **/\n      this.push = function (bytes) {\n        var startIndex = 0,\n            endIndex = MP2T_PACKET_LENGTH,\n            everything;\n\n        // If there are bytes remaining from the last segment, prepend them to the\n        // bytes that were pushed in\n        if (bytesInBuffer) {\n          everything = new Uint8Array(bytes.byteLength + bytesInBuffer);\n          everything.set(buffer.subarray(0, bytesInBuffer));\n          everything.set(bytes, bytesInBuffer);\n          bytesInBuffer = 0;\n        } else {\n          everything = bytes;\n        }\n\n        // While we have enough data for a packet\n        while (endIndex < everything.byteLength) {\n          // Look for a pair of start and end sync bytes in the data..\n          if (everything[startIndex] === SYNC_BYTE && everything[endIndex] === SYNC_BYTE) {\n            // We found a packet so emit it and jump one whole packet forward in\n            // the stream\n            this.trigger('data', everything.subarray(startIndex, endIndex));\n            startIndex += MP2T_PACKET_LENGTH;\n            endIndex += MP2T_PACKET_LENGTH;\n            continue;\n          }\n          // If we get here, we have somehow become de-synchronized and we need to step\n          // forward one byte at a time until we find a pair of sync bytes that denote\n          // a packet\n          startIndex++;\n          endIndex++;\n        }\n\n        // If there was some data left over at the end of the segment that couldn't\n        // possibly be a whole packet, keep it because it might be the start of a packet\n        // that continues in the next segment\n        if (startIndex < everything.byteLength) {\n          buffer.set(everything.subarray(startIndex), 0);\n          bytesInBuffer = everything.byteLength - startIndex;\n        }\n      };\n\n      /**\n       * Passes identified M2TS packets to the TransportParseStream to be parsed\n      **/\n      this.flush = function () {\n        // If the buffer contains a whole packet when we are being flushed, emit it\n        // and empty the buffer. Otherwise hold onto the data because it may be\n        // important for decoding the next segment\n        if (bytesInBuffer === MP2T_PACKET_LENGTH && buffer[0] === SYNC_BYTE) {\n          this.trigger('data', buffer);\n          bytesInBuffer = 0;\n        }\n        this.trigger('done');\n      };\n    };\n    _TransportPacketStream.prototype = new stream();\n\n    /**\n     * Accepts an MP2T TransportPacketStream and emits data events with parsed\n     * forms of the individual transport stream packets.\n     */\n    _TransportParseStream = function TransportParseStream() {\n      var parsePsi, parsePat, parsePmt, self;\n      _TransportParseStream.prototype.init.call(this);\n      self = this;\n\n      this.packetsWaitingForPmt = [];\n      this.programMapTable = undefined;\n\n      parsePsi = function parsePsi(payload, psi) {\n        var offset = 0;\n\n        // PSI packets may be split into multiple sections and those\n        // sections may be split into multiple packets. If a PSI\n        // section starts in this packet, the payload_unit_start_indicator\n        // will be true and the first byte of the payload will indicate\n        // the offset from the current position to the start of the\n        // section.\n        if (psi.payloadUnitStartIndicator) {\n          offset += payload[offset] + 1;\n        }\n\n        if (psi.type === 'pat') {\n          parsePat(payload.subarray(offset), psi);\n        } else {\n          parsePmt(payload.subarray(offset), psi);\n        }\n      };\n\n      parsePat = function parsePat(payload, pat) {\n        pat.section_number = payload[7]; // eslint-disable-line camelcase\n        pat.last_section_number = payload[8]; // eslint-disable-line camelcase\n\n        // skip the PSI header and parse the first PMT entry\n        self.pmtPid = (payload[10] & 0x1F) << 8 | payload[11];\n        pat.pmtPid = self.pmtPid;\n      };\n\n      /**\n       * Parse out the relevant fields of a Program Map Table (PMT).\n       * @param payload {Uint8Array} the PMT-specific portion of an MP2T\n       * packet. The first byte in this array should be the table_id\n       * field.\n       * @param pmt {object} the object that should be decorated with\n       * fields parsed from the PMT.\n       */\n      parsePmt = function parsePmt(payload, pmt) {\n        var sectionLength, tableEnd, programInfoLength, offset;\n\n        // PMTs can be sent ahead of the time when they should actually\n        // take effect. We don't believe this should ever be the case\n        // for HLS but we'll ignore \"forward\" PMT declarations if we see\n        // them. Future PMT declarations have the current_next_indicator\n        // set to zero.\n        if (!(payload[5] & 0x01)) {\n          return;\n        }\n\n        // overwrite any existing program map table\n        self.programMapTable = {\n          video: null,\n          audio: null,\n          'timed-metadata': {}\n        };\n\n        // the mapping table ends at the end of the current section\n        sectionLength = (payload[1] & 0x0f) << 8 | payload[2];\n        tableEnd = 3 + sectionLength - 4;\n\n        // to determine where the table is, we have to figure out how\n        // long the program info descriptors are\n        programInfoLength = (payload[10] & 0x0f) << 8 | payload[11];\n\n        // advance the offset to the first entry in the mapping table\n        offset = 12 + programInfoLength;\n        while (offset < tableEnd) {\n          var streamType = payload[offset];\n          var pid = (payload[offset + 1] & 0x1F) << 8 | payload[offset + 2];\n\n          // only map a single elementary_pid for audio and video stream types\n          // TODO: should this be done for metadata too? for now maintain behavior of\n          //       multiple metadata streams\n          if (streamType === streamTypes.H264_STREAM_TYPE && self.programMapTable.video === null) {\n            self.programMapTable.video = pid;\n          } else if (streamType === streamTypes.ADTS_STREAM_TYPE && self.programMapTable.audio === null) {\n            self.programMapTable.audio = pid;\n          } else if (streamType === streamTypes.METADATA_STREAM_TYPE) {\n            // map pid to stream type for metadata streams\n            self.programMapTable['timed-metadata'][pid] = streamType;\n          }\n\n          // move to the next table entry\n          // skip past the elementary stream descriptors, if present\n          offset += ((payload[offset + 3] & 0x0F) << 8 | payload[offset + 4]) + 5;\n        }\n\n        // record the map on the packet as well\n        pmt.programMapTable = self.programMapTable;\n      };\n\n      /**\n       * Deliver a new MP2T packet to the next stream in the pipeline.\n       */\n      this.push = function (packet) {\n        var result = {},\n            offset = 4;\n\n        result.payloadUnitStartIndicator = !!(packet[1] & 0x40);\n\n        // pid is a 13-bit field starting at the last bit of packet[1]\n        result.pid = packet[1] & 0x1f;\n        result.pid <<= 8;\n        result.pid |= packet[2];\n\n        // if an adaption field is present, its length is specified by the\n        // fifth byte of the TS packet header. The adaptation field is\n        // used to add stuffing to PES packets that don't fill a complete\n        // TS packet, and to specify some forms of timing and control data\n        // that we do not currently use.\n        if ((packet[3] & 0x30) >>> 4 > 0x01) {\n          offset += packet[offset] + 1;\n        }\n\n        // parse the rest of the packet based on the type\n        if (result.pid === 0) {\n          result.type = 'pat';\n          parsePsi(packet.subarray(offset), result);\n          this.trigger('data', result);\n        } else if (result.pid === this.pmtPid) {\n          result.type = 'pmt';\n          parsePsi(packet.subarray(offset), result);\n          this.trigger('data', result);\n\n          // if there are any packets waiting for a PMT to be found, process them now\n          while (this.packetsWaitingForPmt.length) {\n            this.processPes_.apply(this, this.packetsWaitingForPmt.shift());\n          }\n        } else if (this.programMapTable === undefined) {\n          // When we have not seen a PMT yet, defer further processing of\n          // PES packets until one has been parsed\n          this.packetsWaitingForPmt.push([packet, offset, result]);\n        } else {\n          this.processPes_(packet, offset, result);\n        }\n      };\n\n      this.processPes_ = function (packet, offset, result) {\n        // set the appropriate stream type\n        if (result.pid === this.programMapTable.video) {\n          result.streamType = streamTypes.H264_STREAM_TYPE;\n        } else if (result.pid === this.programMapTable.audio) {\n          result.streamType = streamTypes.ADTS_STREAM_TYPE;\n        } else {\n          // if not video or audio, it is timed-metadata or unknown\n          // if unknown, streamType will be undefined\n          result.streamType = this.programMapTable['timed-metadata'][result.pid];\n        }\n\n        result.type = 'pes';\n        result.data = packet.subarray(offset);\n\n        this.trigger('data', result);\n      };\n    };\n    _TransportParseStream.prototype = new stream();\n    _TransportParseStream.STREAM_TYPES = {\n      h264: 0x1b,\n      adts: 0x0f\n    };\n\n    /**\n     * Reconsistutes program elementary stream (PES) packets from parsed\n     * transport stream packets. That is, if you pipe an\n     * mp2t.TransportParseStream into a mp2t.ElementaryStream, the output\n     * events will be events which capture the bytes for individual PES\n     * packets plus relevant metadata that has been extracted from the\n     * container.\n     */\n    _ElementaryStream = function ElementaryStream() {\n      var self = this,\n\n\n      // PES packet fragments\n      video = {\n        data: [],\n        size: 0\n      },\n          audio = {\n        data: [],\n        size: 0\n      },\n          timedMetadata = {\n        data: [],\n        size: 0\n      },\n          parsePes = function parsePes(payload, pes) {\n        var ptsDtsFlags;\n\n        // get the packet length, this will be 0 for video\n        pes.packetLength = 6 + (payload[4] << 8 | payload[5]);\n\n        // find out if this packets starts a new keyframe\n        pes.dataAlignmentIndicator = (payload[6] & 0x04) !== 0;\n        // PES packets may be annotated with a PTS value, or a PTS value\n        // and a DTS value. Determine what combination of values is\n        // available to work with.\n        ptsDtsFlags = payload[7];\n\n        // PTS and DTS are normally stored as a 33-bit number.  Javascript\n        // performs all bitwise operations on 32-bit integers but javascript\n        // supports a much greater range (52-bits) of integer using standard\n        // mathematical operations.\n        // We construct a 31-bit value using bitwise operators over the 31\n        // most significant bits and then multiply by 4 (equal to a left-shift\n        // of 2) before we add the final 2 least significant bits of the\n        // timestamp (equal to an OR.)\n        if (ptsDtsFlags & 0xC0) {\n          // the PTS and DTS are not written out directly. For information\n          // on how they are encoded, see\n          // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n          pes.pts = (payload[9] & 0x0E) << 27 | (payload[10] & 0xFF) << 20 | (payload[11] & 0xFE) << 12 | (payload[12] & 0xFF) << 5 | (payload[13] & 0xFE) >>> 3;\n          pes.pts *= 4; // Left shift by 2\n          pes.pts += (payload[13] & 0x06) >>> 1; // OR by the two LSBs\n          pes.dts = pes.pts;\n          if (ptsDtsFlags & 0x40) {\n            pes.dts = (payload[14] & 0x0E) << 27 | (payload[15] & 0xFF) << 20 | (payload[16] & 0xFE) << 12 | (payload[17] & 0xFF) << 5 | (payload[18] & 0xFE) >>> 3;\n            pes.dts *= 4; // Left shift by 2\n            pes.dts += (payload[18] & 0x06) >>> 1; // OR by the two LSBs\n          }\n        }\n        // the data section starts immediately after the PES header.\n        // pes_header_data_length specifies the number of header bytes\n        // that follow the last byte of the field.\n        pes.data = payload.subarray(9 + payload[8]);\n      },\n\n\n      /**\n        * Pass completely parsed PES packets to the next stream in the pipeline\n       **/\n      flushStream = function flushStream(stream$$1, type, forceFlush) {\n        var packetData = new Uint8Array(stream$$1.size),\n            event = {\n          type: type\n        },\n            i = 0,\n            offset = 0,\n            packetFlushable = false,\n            fragment;\n\n        // do nothing if there is not enough buffered data for a complete\n        // PES header\n        if (!stream$$1.data.length || stream$$1.size < 9) {\n          return;\n        }\n        event.trackId = stream$$1.data[0].pid;\n\n        // reassemble the packet\n        for (i = 0; i < stream$$1.data.length; i++) {\n          fragment = stream$$1.data[i];\n\n          packetData.set(fragment.data, offset);\n          offset += fragment.data.byteLength;\n        }\n\n        // parse assembled packet's PES header\n        parsePes(packetData, event);\n\n        // non-video PES packets MUST have a non-zero PES_packet_length\n        // check that there is enough stream data to fill the packet\n        packetFlushable = type === 'video' || event.packetLength <= stream$$1.size;\n\n        // flush pending packets if the conditions are right\n        if (forceFlush || packetFlushable) {\n          stream$$1.size = 0;\n          stream$$1.data.length = 0;\n        }\n\n        // only emit packets that are complete. this is to avoid assembling\n        // incomplete PES packets due to poor segmentation\n        if (packetFlushable) {\n          self.trigger('data', event);\n        }\n      };\n\n      _ElementaryStream.prototype.init.call(this);\n\n      /**\n       * Identifies M2TS packet types and parses PES packets using metadata\n       * parsed from the PMT\n       **/\n      this.push = function (data) {\n        ({\n          pat: function pat() {\n            // we have to wait for the PMT to arrive as well before we\n            // have any meaningful metadata\n          },\n          pes: function pes() {\n            var stream$$1, streamType;\n\n            switch (data.streamType) {\n              case streamTypes.H264_STREAM_TYPE:\n              case streamTypes.H264_STREAM_TYPE:\n                stream$$1 = video;\n                streamType = 'video';\n                break;\n              case streamTypes.ADTS_STREAM_TYPE:\n                stream$$1 = audio;\n                streamType = 'audio';\n                break;\n              case streamTypes.METADATA_STREAM_TYPE:\n                stream$$1 = timedMetadata;\n                streamType = 'timed-metadata';\n                break;\n              default:\n                // ignore unknown stream types\n                return;\n            }\n\n            // if a new packet is starting, we can flush the completed\n            // packet\n            if (data.payloadUnitStartIndicator) {\n              flushStream(stream$$1, streamType, true);\n            }\n\n            // buffer this fragment until we are sure we've received the\n            // complete payload\n            stream$$1.data.push(data);\n            stream$$1.size += data.data.byteLength;\n          },\n          pmt: function pmt() {\n            var event = {\n              type: 'metadata',\n              tracks: []\n            },\n                programMapTable = data.programMapTable;\n\n            // translate audio and video streams to tracks\n            if (programMapTable.video !== null) {\n              event.tracks.push({\n                timelineStartInfo: {\n                  baseMediaDecodeTime: 0\n                },\n                id: +programMapTable.video,\n                codec: 'avc',\n                type: 'video'\n              });\n            }\n            if (programMapTable.audio !== null) {\n              event.tracks.push({\n                timelineStartInfo: {\n                  baseMediaDecodeTime: 0\n                },\n                id: +programMapTable.audio,\n                codec: 'adts',\n                type: 'audio'\n              });\n            }\n\n            self.trigger('data', event);\n          }\n        })[data.type]();\n      };\n\n      /**\n       * Flush any remaining input. Video PES packets may be of variable\n       * length. Normally, the start of a new video packet can trigger the\n       * finalization of the previous packet. That is not possible if no\n       * more video is forthcoming, however. In that case, some other\n       * mechanism (like the end of the file) has to be employed. When it is\n       * clear that no additional data is forthcoming, calling this method\n       * will flush the buffered packets.\n       */\n      this.flush = function () {\n        // !!THIS ORDER IS IMPORTANT!!\n        // video first then audio\n        flushStream(video, 'video');\n        flushStream(audio, 'audio');\n        flushStream(timedMetadata, 'timed-metadata');\n        this.trigger('done');\n      };\n    };\n    _ElementaryStream.prototype = new stream();\n\n    var m2ts = {\n      PAT_PID: 0x0000,\n      MP2T_PACKET_LENGTH: MP2T_PACKET_LENGTH,\n      TransportPacketStream: _TransportPacketStream,\n      TransportParseStream: _TransportParseStream,\n      ElementaryStream: _ElementaryStream,\n      TimestampRolloverStream: TimestampRolloverStream$1,\n      CaptionStream: captionStream.CaptionStream,\n      Cea608Stream: captionStream.Cea608Stream,\n      MetadataStream: metadataStream\n    };\n\n    for (var type in streamTypes) {\n      if (streamTypes.hasOwnProperty(type)) {\n        m2ts[type] = streamTypes[type];\n      }\n    }\n\n    var m2ts_1 = m2ts;\n\n    var _AdtsStream;\n\n    var ADTS_SAMPLING_FREQUENCIES = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350];\n\n    /*\n     * Accepts a ElementaryStream and emits data events with parsed\n     * AAC Audio Frames of the individual packets. Input audio in ADTS\n     * format is unpacked and re-emitted as AAC frames.\n     *\n     * @see http://wiki.multimedia.cx/index.php?title=ADTS\n     * @see http://wiki.multimedia.cx/?title=Understanding_AAC\n     */\n    _AdtsStream = function AdtsStream() {\n      var buffer;\n\n      _AdtsStream.prototype.init.call(this);\n\n      this.push = function (packet) {\n        var i = 0,\n            frameNum = 0,\n            frameLength,\n            protectionSkipBytes,\n            frameEnd,\n            oldBuffer,\n            sampleCount,\n            adtsFrameDuration;\n\n        if (packet.type !== 'audio') {\n          // ignore non-audio data\n          return;\n        }\n\n        // Prepend any data in the buffer to the input data so that we can parse\n        // aac frames the cross a PES packet boundary\n        if (buffer) {\n          oldBuffer = buffer;\n          buffer = new Uint8Array(oldBuffer.byteLength + packet.data.byteLength);\n          buffer.set(oldBuffer);\n          buffer.set(packet.data, oldBuffer.byteLength);\n        } else {\n          buffer = packet.data;\n        }\n\n        // unpack any ADTS frames which have been fully received\n        // for details on the ADTS header, see http://wiki.multimedia.cx/index.php?title=ADTS\n        while (i + 5 < buffer.length) {\n\n          // Loook for the start of an ADTS header..\n          if (buffer[i] !== 0xFF || (buffer[i + 1] & 0xF6) !== 0xF0) {\n            // If a valid header was not found,  jump one forward and attempt to\n            // find a valid ADTS header starting at the next byte\n            i++;\n            continue;\n          }\n\n          // The protection skip bit tells us if we have 2 bytes of CRC data at the\n          // end of the ADTS header\n          protectionSkipBytes = (~buffer[i + 1] & 0x01) * 2;\n\n          // Frame length is a 13 bit integer starting 16 bits from the\n          // end of the sync sequence\n          frameLength = (buffer[i + 3] & 0x03) << 11 | buffer[i + 4] << 3 | (buffer[i + 5] & 0xe0) >> 5;\n\n          sampleCount = ((buffer[i + 6] & 0x03) + 1) * 1024;\n          adtsFrameDuration = sampleCount * 90000 / ADTS_SAMPLING_FREQUENCIES[(buffer[i + 2] & 0x3c) >>> 2];\n\n          frameEnd = i + frameLength;\n\n          // If we don't have enough data to actually finish this ADTS frame, return\n          // and wait for more data\n          if (buffer.byteLength < frameEnd) {\n            return;\n          }\n\n          // Otherwise, deliver the complete AAC frame\n          this.trigger('data', {\n            pts: packet.pts + frameNum * adtsFrameDuration,\n            dts: packet.dts + frameNum * adtsFrameDuration,\n            sampleCount: sampleCount,\n            audioobjecttype: (buffer[i + 2] >>> 6 & 0x03) + 1,\n            channelcount: (buffer[i + 2] & 1) << 2 | (buffer[i + 3] & 0xc0) >>> 6,\n            samplerate: ADTS_SAMPLING_FREQUENCIES[(buffer[i + 2] & 0x3c) >>> 2],\n            samplingfrequencyindex: (buffer[i + 2] & 0x3c) >>> 2,\n            // assume ISO/IEC 14496-12 AudioSampleEntry default of 16\n            samplesize: 16,\n            data: buffer.subarray(i + 7 + protectionSkipBytes, frameEnd)\n          });\n\n          // If the buffer is empty, clear it and return\n          if (buffer.byteLength === frameEnd) {\n            buffer = undefined;\n            return;\n          }\n\n          frameNum++;\n\n          // Remove the finished frame from the buffer and start the process again\n          buffer = buffer.subarray(frameEnd);\n        }\n      };\n      this.flush = function () {\n        this.trigger('done');\n      };\n    };\n\n    _AdtsStream.prototype = new stream();\n\n    var adts = _AdtsStream;\n\n    var ExpGolomb;\n\n    /**\n     * Parser for exponential Golomb codes, a variable-bitwidth number encoding\n     * scheme used by h264.\n     */\n    ExpGolomb = function ExpGolomb(workingData) {\n      var\n      // the number of bytes left to examine in workingData\n      workingBytesAvailable = workingData.byteLength,\n\n\n      // the current word being examined\n      workingWord = 0,\n\n\n      // :uint\n\n      // the number of bits left to examine in the current word\n      workingBitsAvailable = 0; // :uint;\n\n      // ():uint\n      this.length = function () {\n        return 8 * workingBytesAvailable;\n      };\n\n      // ():uint\n      this.bitsAvailable = function () {\n        return 8 * workingBytesAvailable + workingBitsAvailable;\n      };\n\n      // ():void\n      this.loadWord = function () {\n        var position = workingData.byteLength - workingBytesAvailable,\n            workingBytes = new Uint8Array(4),\n            availableBytes = Math.min(4, workingBytesAvailable);\n\n        if (availableBytes === 0) {\n          throw new Error('no bytes available');\n        }\n\n        workingBytes.set(workingData.subarray(position, position + availableBytes));\n        workingWord = new DataView(workingBytes.buffer).getUint32(0);\n\n        // track the amount of workingData that has been processed\n        workingBitsAvailable = availableBytes * 8;\n        workingBytesAvailable -= availableBytes;\n      };\n\n      // (count:int):void\n      this.skipBits = function (count) {\n        var skipBytes; // :int\n        if (workingBitsAvailable > count) {\n          workingWord <<= count;\n          workingBitsAvailable -= count;\n        } else {\n          count -= workingBitsAvailable;\n          skipBytes = Math.floor(count / 8);\n\n          count -= skipBytes * 8;\n          workingBytesAvailable -= skipBytes;\n\n          this.loadWord();\n\n          workingWord <<= count;\n          workingBitsAvailable -= count;\n        }\n      };\n\n      // (size:int):uint\n      this.readBits = function (size) {\n        var bits = Math.min(workingBitsAvailable, size),\n\n\n        // :uint\n        valu = workingWord >>> 32 - bits; // :uint\n        // if size > 31, handle error\n        workingBitsAvailable -= bits;\n        if (workingBitsAvailable > 0) {\n          workingWord <<= bits;\n        } else if (workingBytesAvailable > 0) {\n          this.loadWord();\n        }\n\n        bits = size - bits;\n        if (bits > 0) {\n          return valu << bits | this.readBits(bits);\n        }\n        return valu;\n      };\n\n      // ():uint\n      this.skipLeadingZeros = function () {\n        var leadingZeroCount; // :uint\n        for (leadingZeroCount = 0; leadingZeroCount < workingBitsAvailable; ++leadingZeroCount) {\n          if ((workingWord & 0x80000000 >>> leadingZeroCount) !== 0) {\n            // the first bit of working word is 1\n            workingWord <<= leadingZeroCount;\n            workingBitsAvailable -= leadingZeroCount;\n            return leadingZeroCount;\n          }\n        }\n\n        // we exhausted workingWord and still have not found a 1\n        this.loadWord();\n        return leadingZeroCount + this.skipLeadingZeros();\n      };\n\n      // ():void\n      this.skipUnsignedExpGolomb = function () {\n        this.skipBits(1 + this.skipLeadingZeros());\n      };\n\n      // ():void\n      this.skipExpGolomb = function () {\n        this.skipBits(1 + this.skipLeadingZeros());\n      };\n\n      // ():uint\n      this.readUnsignedExpGolomb = function () {\n        var clz = this.skipLeadingZeros(); // :uint\n        return this.readBits(clz + 1) - 1;\n      };\n\n      // ():int\n      this.readExpGolomb = function () {\n        var valu = this.readUnsignedExpGolomb(); // :int\n        if (0x01 & valu) {\n          // the number is odd if the low order bit is set\n          return 1 + valu >>> 1; // add 1 to make it even, and divide by 2\n        }\n        return -1 * (valu >>> 1); // divide by two then make it negative\n      };\n\n      // Some convenience functions\n      // :Boolean\n      this.readBoolean = function () {\n        return this.readBits(1) === 1;\n      };\n\n      // ():int\n      this.readUnsignedByte = function () {\n        return this.readBits(8);\n      };\n\n      this.loadWord();\n    };\n\n    var expGolomb = ExpGolomb;\n\n    var _H264Stream, _NalByteStream;\n    var PROFILES_WITH_OPTIONAL_SPS_DATA;\n\n    /**\n     * Accepts a NAL unit byte stream and unpacks the embedded NAL units.\n     */\n    _NalByteStream = function NalByteStream() {\n      var syncPoint = 0,\n          i,\n          buffer;\n      _NalByteStream.prototype.init.call(this);\n\n      /*\n       * Scans a byte stream and triggers a data event with the NAL units found.\n       * @param {Object} data Event received from H264Stream\n       * @param {Uint8Array} data.data The h264 byte stream to be scanned\n       *\n       * @see H264Stream.push\n       */\n      this.push = function (data) {\n        var swapBuffer;\n\n        if (!buffer) {\n          buffer = data.data;\n        } else {\n          swapBuffer = new Uint8Array(buffer.byteLength + data.data.byteLength);\n          swapBuffer.set(buffer);\n          swapBuffer.set(data.data, buffer.byteLength);\n          buffer = swapBuffer;\n        }\n\n        // Rec. ITU-T H.264, Annex B\n        // scan for NAL unit boundaries\n\n        // a match looks like this:\n        // 0 0 1 .. NAL .. 0 0 1\n        // ^ sync point        ^ i\n        // or this:\n        // 0 0 1 .. NAL .. 0 0 0\n        // ^ sync point        ^ i\n\n        // advance the sync point to a NAL start, if necessary\n        for (; syncPoint < buffer.byteLength - 3; syncPoint++) {\n          if (buffer[syncPoint + 2] === 1) {\n            // the sync point is properly aligned\n            i = syncPoint + 5;\n            break;\n          }\n        }\n\n        while (i < buffer.byteLength) {\n          // look at the current byte to determine if we've hit the end of\n          // a NAL unit boundary\n          switch (buffer[i]) {\n            case 0:\n              // skip past non-sync sequences\n              if (buffer[i - 1] !== 0) {\n                i += 2;\n                break;\n              } else if (buffer[i - 2] !== 0) {\n                i++;\n                break;\n              }\n\n              // deliver the NAL unit if it isn't empty\n              if (syncPoint + 3 !== i - 2) {\n                this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));\n              }\n\n              // drop trailing zeroes\n              do {\n                i++;\n              } while (buffer[i] !== 1 && i < buffer.length);\n              syncPoint = i - 2;\n              i += 3;\n              break;\n            case 1:\n              // skip past non-sync sequences\n              if (buffer[i - 1] !== 0 || buffer[i - 2] !== 0) {\n                i += 3;\n                break;\n              }\n\n              // deliver the NAL unit\n              this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));\n              syncPoint = i - 2;\n              i += 3;\n              break;\n            default:\n              // the current byte isn't a one or zero, so it cannot be part\n              // of a sync sequence\n              i += 3;\n              break;\n          }\n        }\n        // filter out the NAL units that were delivered\n        buffer = buffer.subarray(syncPoint);\n        i -= syncPoint;\n        syncPoint = 0;\n      };\n\n      this.flush = function () {\n        // deliver the last buffered NAL unit\n        if (buffer && buffer.byteLength > 3) {\n          this.trigger('data', buffer.subarray(syncPoint + 3));\n        }\n        // reset the stream state\n        buffer = null;\n        syncPoint = 0;\n        this.trigger('done');\n      };\n    };\n    _NalByteStream.prototype = new stream();\n\n    // values of profile_idc that indicate additional fields are included in the SPS\n    // see Recommendation ITU-T H.264 (4/2013),\n    // 7.3.2.1.1 Sequence parameter set data syntax\n    PROFILES_WITH_OPTIONAL_SPS_DATA = {\n      100: true,\n      110: true,\n      122: true,\n      244: true,\n      44: true,\n      83: true,\n      86: true,\n      118: true,\n      128: true,\n      138: true,\n      139: true,\n      134: true\n    };\n\n    /**\n     * Accepts input from a ElementaryStream and produces H.264 NAL unit data\n     * events.\n     */\n    _H264Stream = function H264Stream() {\n      var nalByteStream = new _NalByteStream(),\n          self,\n          trackId,\n          currentPts,\n          currentDts,\n          discardEmulationPreventionBytes,\n          readSequenceParameterSet,\n          skipScalingList;\n\n      _H264Stream.prototype.init.call(this);\n      self = this;\n\n      /*\n       * Pushes a packet from a stream onto the NalByteStream\n       *\n       * @param {Object} packet - A packet received from a stream\n       * @param {Uint8Array} packet.data - The raw bytes of the packet\n       * @param {Number} packet.dts - Decode timestamp of the packet\n       * @param {Number} packet.pts - Presentation timestamp of the packet\n       * @param {Number} packet.trackId - The id of the h264 track this packet came from\n       * @param {('video'|'audio')} packet.type - The type of packet\n       *\n       */\n      this.push = function (packet) {\n        if (packet.type !== 'video') {\n          return;\n        }\n        trackId = packet.trackId;\n        currentPts = packet.pts;\n        currentDts = packet.dts;\n\n        nalByteStream.push(packet);\n      };\n\n      /*\n       * Identify NAL unit types and pass on the NALU, trackId, presentation and decode timestamps\n       * for the NALUs to the next stream component.\n       * Also, preprocess caption and sequence parameter NALUs.\n       *\n       * @param {Uint8Array} data - A NAL unit identified by `NalByteStream.push`\n       * @see NalByteStream.push\n       */\n      nalByteStream.on('data', function (data) {\n        var event = {\n          trackId: trackId,\n          pts: currentPts,\n          dts: currentDts,\n          data: data\n        };\n\n        switch (data[0] & 0x1f) {\n          case 0x05:\n            event.nalUnitType = 'slice_layer_without_partitioning_rbsp_idr';\n            break;\n          case 0x06:\n            event.nalUnitType = 'sei_rbsp';\n            event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));\n            break;\n          case 0x07:\n            event.nalUnitType = 'seq_parameter_set_rbsp';\n            event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));\n            event.config = readSequenceParameterSet(event.escapedRBSP);\n            break;\n          case 0x08:\n            event.nalUnitType = 'pic_parameter_set_rbsp';\n            break;\n          case 0x09:\n            event.nalUnitType = 'access_unit_delimiter_rbsp';\n            break;\n\n          default:\n            break;\n        }\n        // This triggers data on the H264Stream\n        self.trigger('data', event);\n      });\n      nalByteStream.on('done', function () {\n        self.trigger('done');\n      });\n\n      this.flush = function () {\n        nalByteStream.flush();\n      };\n\n      /**\n       * Advance the ExpGolomb decoder past a scaling list. The scaling\n       * list is optionally transmitted as part of a sequence parameter\n       * set and is not relevant to transmuxing.\n       * @param count {number} the number of entries in this scaling list\n       * @param expGolombDecoder {object} an ExpGolomb pointed to the\n       * start of a scaling list\n       * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1\n       */\n      skipScalingList = function skipScalingList(count, expGolombDecoder) {\n        var lastScale = 8,\n            nextScale = 8,\n            j,\n            deltaScale;\n\n        for (j = 0; j < count; j++) {\n          if (nextScale !== 0) {\n            deltaScale = expGolombDecoder.readExpGolomb();\n            nextScale = (lastScale + deltaScale + 256) % 256;\n          }\n\n          lastScale = nextScale === 0 ? lastScale : nextScale;\n        }\n      };\n\n      /**\n       * Expunge any \"Emulation Prevention\" bytes from a \"Raw Byte\n       * Sequence Payload\"\n       * @param data {Uint8Array} the bytes of a RBSP from a NAL\n       * unit\n       * @return {Uint8Array} the RBSP without any Emulation\n       * Prevention Bytes\n       */\n      discardEmulationPreventionBytes = function discardEmulationPreventionBytes(data) {\n        var length = data.byteLength,\n            emulationPreventionBytesPositions = [],\n            i = 1,\n            newLength,\n            newData;\n\n        // Find all `Emulation Prevention Bytes`\n        while (i < length - 2) {\n          if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {\n            emulationPreventionBytesPositions.push(i + 2);\n            i += 2;\n          } else {\n            i++;\n          }\n        }\n\n        // If no Emulation Prevention Bytes were found just return the original\n        // array\n        if (emulationPreventionBytesPositions.length === 0) {\n          return data;\n        }\n\n        // Create a new array to hold the NAL unit data\n        newLength = length - emulationPreventionBytesPositions.length;\n        newData = new Uint8Array(newLength);\n        var sourceIndex = 0;\n\n        for (i = 0; i < newLength; sourceIndex++, i++) {\n          if (sourceIndex === emulationPreventionBytesPositions[0]) {\n            // Skip this byte\n            sourceIndex++;\n            // Remove this position index\n            emulationPreventionBytesPositions.shift();\n          }\n          newData[i] = data[sourceIndex];\n        }\n\n        return newData;\n      };\n\n      /**\n       * Read a sequence parameter set and return some interesting video\n       * properties. A sequence parameter set is the H264 metadata that\n       * describes the properties of upcoming video frames.\n       * @param data {Uint8Array} the bytes of a sequence parameter set\n       * @return {object} an object with configuration parsed from the\n       * sequence parameter set, including the dimensions of the\n       * associated video frames.\n       */\n      readSequenceParameterSet = function readSequenceParameterSet(data) {\n        var frameCropLeftOffset = 0,\n            frameCropRightOffset = 0,\n            frameCropTopOffset = 0,\n            frameCropBottomOffset = 0,\n            sarScale = 1,\n            expGolombDecoder,\n            profileIdc,\n            levelIdc,\n            profileCompatibility,\n            chromaFormatIdc,\n            picOrderCntType,\n            numRefFramesInPicOrderCntCycle,\n            picWidthInMbsMinus1,\n            picHeightInMapUnitsMinus1,\n            frameMbsOnlyFlag,\n            scalingListCount,\n            sarRatio,\n            aspectRatioIdc,\n            i;\n\n        expGolombDecoder = new expGolomb(data);\n        profileIdc = expGolombDecoder.readUnsignedByte(); // profile_idc\n        profileCompatibility = expGolombDecoder.readUnsignedByte(); // constraint_set[0-5]_flag\n        levelIdc = expGolombDecoder.readUnsignedByte(); // level_idc u(8)\n        expGolombDecoder.skipUnsignedExpGolomb(); // seq_parameter_set_id\n\n        // some profiles have more optional data we don't need\n        if (PROFILES_WITH_OPTIONAL_SPS_DATA[profileIdc]) {\n          chromaFormatIdc = expGolombDecoder.readUnsignedExpGolomb();\n          if (chromaFormatIdc === 3) {\n            expGolombDecoder.skipBits(1); // separate_colour_plane_flag\n          }\n          expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_luma_minus8\n          expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_chroma_minus8\n          expGolombDecoder.skipBits(1); // qpprime_y_zero_transform_bypass_flag\n          if (expGolombDecoder.readBoolean()) {\n            // seq_scaling_matrix_present_flag\n            scalingListCount = chromaFormatIdc !== 3 ? 8 : 12;\n            for (i = 0; i < scalingListCount; i++) {\n              if (expGolombDecoder.readBoolean()) {\n                // seq_scaling_list_present_flag[ i ]\n                if (i < 6) {\n                  skipScalingList(16, expGolombDecoder);\n                } else {\n                  skipScalingList(64, expGolombDecoder);\n                }\n              }\n            }\n          }\n        }\n\n        expGolombDecoder.skipUnsignedExpGolomb(); // log2_max_frame_num_minus4\n        picOrderCntType = expGolombDecoder.readUnsignedExpGolomb();\n\n        if (picOrderCntType === 0) {\n          expGolombDecoder.readUnsignedExpGolomb(); // log2_max_pic_order_cnt_lsb_minus4\n        } else if (picOrderCntType === 1) {\n          expGolombDecoder.skipBits(1); // delta_pic_order_always_zero_flag\n          expGolombDecoder.skipExpGolomb(); // offset_for_non_ref_pic\n          expGolombDecoder.skipExpGolomb(); // offset_for_top_to_bottom_field\n          numRefFramesInPicOrderCntCycle = expGolombDecoder.readUnsignedExpGolomb();\n          for (i = 0; i < numRefFramesInPicOrderCntCycle; i++) {\n            expGolombDecoder.skipExpGolomb(); // offset_for_ref_frame[ i ]\n          }\n        }\n\n        expGolombDecoder.skipUnsignedExpGolomb(); // max_num_ref_frames\n        expGolombDecoder.skipBits(1); // gaps_in_frame_num_value_allowed_flag\n\n        picWidthInMbsMinus1 = expGolombDecoder.readUnsignedExpGolomb();\n        picHeightInMapUnitsMinus1 = expGolombDecoder.readUnsignedExpGolomb();\n\n        frameMbsOnlyFlag = expGolombDecoder.readBits(1);\n        if (frameMbsOnlyFlag === 0) {\n          expGolombDecoder.skipBits(1); // mb_adaptive_frame_field_flag\n        }\n\n        expGolombDecoder.skipBits(1); // direct_8x8_inference_flag\n        if (expGolombDecoder.readBoolean()) {\n          // frame_cropping_flag\n          frameCropLeftOffset = expGolombDecoder.readUnsignedExpGolomb();\n          frameCropRightOffset = expGolombDecoder.readUnsignedExpGolomb();\n          frameCropTopOffset = expGolombDecoder.readUnsignedExpGolomb();\n          frameCropBottomOffset = expGolombDecoder.readUnsignedExpGolomb();\n        }\n        if (expGolombDecoder.readBoolean()) {\n          // vui_parameters_present_flag\n          if (expGolombDecoder.readBoolean()) {\n            // aspect_ratio_info_present_flag\n            aspectRatioIdc = expGolombDecoder.readUnsignedByte();\n            switch (aspectRatioIdc) {\n              case 1:\n                sarRatio = [1, 1];break;\n              case 2:\n                sarRatio = [12, 11];break;\n              case 3:\n                sarRatio = [10, 11];break;\n              case 4:\n                sarRatio = [16, 11];break;\n              case 5:\n                sarRatio = [40, 33];break;\n              case 6:\n                sarRatio = [24, 11];break;\n              case 7:\n                sarRatio = [20, 11];break;\n              case 8:\n                sarRatio = [32, 11];break;\n              case 9:\n                sarRatio = [80, 33];break;\n              case 10:\n                sarRatio = [18, 11];break;\n              case 11:\n                sarRatio = [15, 11];break;\n              case 12:\n                sarRatio = [64, 33];break;\n              case 13:\n                sarRatio = [160, 99];break;\n              case 14:\n                sarRatio = [4, 3];break;\n              case 15:\n                sarRatio = [3, 2];break;\n              case 16:\n                sarRatio = [2, 1];break;\n              case 255:\n                {\n                  sarRatio = [expGolombDecoder.readUnsignedByte() << 8 | expGolombDecoder.readUnsignedByte(), expGolombDecoder.readUnsignedByte() << 8 | expGolombDecoder.readUnsignedByte()];\n                  break;\n                }\n            }\n            if (sarRatio) {\n              sarScale = sarRatio[0] / sarRatio[1];\n            }\n          }\n        }\n        return {\n          profileIdc: profileIdc,\n          levelIdc: levelIdc,\n          profileCompatibility: profileCompatibility,\n          width: Math.ceil(((picWidthInMbsMinus1 + 1) * 16 - frameCropLeftOffset * 2 - frameCropRightOffset * 2) * sarScale),\n          height: (2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16 - frameCropTopOffset * 2 - frameCropBottomOffset * 2\n        };\n      };\n    };\n    _H264Stream.prototype = new stream();\n\n    var h264 = {\n      H264Stream: _H264Stream,\n      NalByteStream: _NalByteStream\n    };\n\n    // Constants\n    var _AacStream;\n\n    /**\n     * Splits an incoming stream of binary data into ADTS and ID3 Frames.\n     */\n\n    _AacStream = function AacStream() {\n      var everything = new Uint8Array(),\n          timeStamp = 0;\n\n      _AacStream.prototype.init.call(this);\n\n      this.setTimestamp = function (timestamp) {\n        timeStamp = timestamp;\n      };\n\n      this.parseId3TagSize = function (header, byteIndex) {\n        var returnSize = header[byteIndex + 6] << 21 | header[byteIndex + 7] << 14 | header[byteIndex + 8] << 7 | header[byteIndex + 9],\n            flags = header[byteIndex + 5],\n            footerPresent = (flags & 16) >> 4;\n\n        if (footerPresent) {\n          return returnSize + 20;\n        }\n        return returnSize + 10;\n      };\n\n      this.parseAdtsSize = function (header, byteIndex) {\n        var lowThree = (header[byteIndex + 5] & 0xE0) >> 5,\n            middle = header[byteIndex + 4] << 3,\n            highTwo = header[byteIndex + 3] & 0x3 << 11;\n\n        return highTwo | middle | lowThree;\n      };\n\n      this.push = function (bytes) {\n        var frameSize = 0,\n            byteIndex = 0,\n            bytesLeft,\n            chunk,\n            packet,\n            tempLength;\n\n        // If there are bytes remaining from the last segment, prepend them to the\n        // bytes that were pushed in\n        if (everything.length) {\n          tempLength = everything.length;\n          everything = new Uint8Array(bytes.byteLength + tempLength);\n          everything.set(everything.subarray(0, tempLength));\n          everything.set(bytes, tempLength);\n        } else {\n          everything = bytes;\n        }\n\n        while (everything.length - byteIndex >= 3) {\n          if (everything[byteIndex] === 'I'.charCodeAt(0) && everything[byteIndex + 1] === 'D'.charCodeAt(0) && everything[byteIndex + 2] === '3'.charCodeAt(0)) {\n\n            // Exit early because we don't have enough to parse\n            // the ID3 tag header\n            if (everything.length - byteIndex < 10) {\n              break;\n            }\n\n            // check framesize\n            frameSize = this.parseId3TagSize(everything, byteIndex);\n\n            // Exit early if we don't have enough in the buffer\n            // to emit a full packet\n            if (frameSize > everything.length) {\n              break;\n            }\n            chunk = {\n              type: 'timed-metadata',\n              data: everything.subarray(byteIndex, byteIndex + frameSize)\n            };\n            this.trigger('data', chunk);\n            byteIndex += frameSize;\n            continue;\n          } else if (everything[byteIndex] & 0xff === 0xff && (everything[byteIndex + 1] & 0xf0) === 0xf0) {\n\n            // Exit early because we don't have enough to parse\n            // the ADTS frame header\n            if (everything.length - byteIndex < 7) {\n              break;\n            }\n\n            frameSize = this.parseAdtsSize(everything, byteIndex);\n\n            // Exit early if we don't have enough in the buffer\n            // to emit a full packet\n            if (frameSize > everything.length) {\n              break;\n            }\n\n            packet = {\n              type: 'audio',\n              data: everything.subarray(byteIndex, byteIndex + frameSize),\n              pts: timeStamp,\n              dts: timeStamp\n            };\n            this.trigger('data', packet);\n            byteIndex += frameSize;\n            continue;\n          }\n          byteIndex++;\n        }\n        bytesLeft = everything.length - byteIndex;\n\n        if (bytesLeft > 0) {\n          everything = everything.subarray(byteIndex);\n        } else {\n          everything = new Uint8Array();\n        }\n      };\n    };\n\n    _AacStream.prototype = new stream();\n\n    var aac = _AacStream;\n\n    var highPrefix = [33, 16, 5, 32, 164, 27];\n    var lowPrefix = [33, 65, 108, 84, 1, 2, 4, 8, 168, 2, 4, 8, 17, 191, 252];\n    var zeroFill = function zeroFill(count) {\n      var a = [];\n      while (count--) {\n        a.push(0);\n      }\n      return a;\n    };\n\n    var makeTable = function makeTable(metaTable) {\n      return Object.keys(metaTable).reduce(function (obj, key) {\n        obj[key] = new Uint8Array(metaTable[key].reduce(function (arr, part) {\n          return arr.concat(part);\n        }, []));\n        return obj;\n      }, {});\n    };\n\n    // Frames-of-silence to use for filling in missing AAC frames\n    var coneOfSilence = {\n      96000: [highPrefix, [227, 64], zeroFill(154), [56]],\n      88200: [highPrefix, [231], zeroFill(170), [56]],\n      64000: [highPrefix, [248, 192], zeroFill(240), [56]],\n      48000: [highPrefix, [255, 192], zeroFill(268), [55, 148, 128], zeroFill(54), [112]],\n      44100: [highPrefix, [255, 192], zeroFill(268), [55, 163, 128], zeroFill(84), [112]],\n      32000: [highPrefix, [255, 192], zeroFill(268), [55, 234], zeroFill(226), [112]],\n      24000: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 112], zeroFill(126), [224]],\n      16000: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 255], zeroFill(269), [223, 108], zeroFill(195), [1, 192]],\n      12000: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 253, 128], zeroFill(259), [56]],\n      11025: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 255, 192], zeroFill(268), [55, 175, 128], zeroFill(108), [112]],\n      8000: [lowPrefix, zeroFill(268), [3, 121, 16], zeroFill(47), [7]]\n    };\n\n    var silence = makeTable(coneOfSilence);\n\n    var ONE_SECOND_IN_TS$1 = 90000,\n\n\n    // 90kHz clock\n    secondsToVideoTs,\n        secondsToAudioTs,\n        videoTsToSeconds,\n        audioTsToSeconds,\n        audioTsToVideoTs,\n        videoTsToAudioTs;\n\n    secondsToVideoTs = function secondsToVideoTs(seconds) {\n      return seconds * ONE_SECOND_IN_TS$1;\n    };\n\n    secondsToAudioTs = function secondsToAudioTs(seconds, sampleRate) {\n      return seconds * sampleRate;\n    };\n\n    videoTsToSeconds = function videoTsToSeconds(timestamp) {\n      return timestamp / ONE_SECOND_IN_TS$1;\n    };\n\n    audioTsToSeconds = function audioTsToSeconds(timestamp, sampleRate) {\n      return timestamp / sampleRate;\n    };\n\n    audioTsToVideoTs = function audioTsToVideoTs(timestamp, sampleRate) {\n      return secondsToVideoTs(audioTsToSeconds(timestamp, sampleRate));\n    };\n\n    videoTsToAudioTs = function videoTsToAudioTs(timestamp, sampleRate) {\n      return secondsToAudioTs(videoTsToSeconds(timestamp), sampleRate);\n    };\n\n    var clock = {\n      secondsToVideoTs: secondsToVideoTs,\n      secondsToAudioTs: secondsToAudioTs,\n      videoTsToSeconds: videoTsToSeconds,\n      audioTsToSeconds: audioTsToSeconds,\n      audioTsToVideoTs: audioTsToVideoTs,\n      videoTsToAudioTs: videoTsToAudioTs\n    };\n\n    var H264Stream = h264.H264Stream;\n\n    // constants\n    var AUDIO_PROPERTIES = ['audioobjecttype', 'channelcount', 'samplerate', 'samplingfrequencyindex', 'samplesize'];\n\n    var VIDEO_PROPERTIES = ['width', 'height', 'profileIdc', 'levelIdc', 'profileCompatibility'];\n\n    var ONE_SECOND_IN_TS$2 = 90000; // 90kHz clock\n\n    // object types\n    var _VideoSegmentStream, _AudioSegmentStream, _Transmuxer, _CoalesceStream;\n\n    // Helper functions\n    var isLikelyAacData, arrayEquals, sumFrameByteLengths;\n\n    isLikelyAacData = function isLikelyAacData(data) {\n      if (data[0] === 'I'.charCodeAt(0) && data[1] === 'D'.charCodeAt(0) && data[2] === '3'.charCodeAt(0)) {\n        return true;\n      }\n      return false;\n    };\n\n    /**\n     * Compare two arrays (even typed) for same-ness\n     */\n    arrayEquals = function arrayEquals(a, b) {\n      var i;\n\n      if (a.length !== b.length) {\n        return false;\n      }\n\n      // compare the value of each element in the array\n      for (i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    /**\n     * Sum the `byteLength` properties of the data in each AAC frame\n     */\n    sumFrameByteLengths = function sumFrameByteLengths(array) {\n      var i,\n          currentObj,\n          sum = 0;\n\n      // sum the byteLength's all each nal unit in the frame\n      for (i = 0; i < array.length; i++) {\n        currentObj = array[i];\n        sum += currentObj.data.byteLength;\n      }\n\n      return sum;\n    };\n\n    /**\n     * Constructs a single-track, ISO BMFF media segment from AAC data\n     * events. The output of this stream can be fed to a SourceBuffer\n     * configured with a suitable initialization segment.\n     * @param track {object} track metadata configuration\n     * @param options {object} transmuxer options object\n     * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps\n     *        in the source; false to adjust the first segment to start at 0.\n     */\n    _AudioSegmentStream = function AudioSegmentStream(track, options) {\n      var adtsFrames = [],\n          sequenceNumber = 0,\n          earliestAllowedDts = 0,\n          audioAppendStartTs = 0,\n          videoBaseMediaDecodeTime = Infinity;\n\n      options = options || {};\n\n      _AudioSegmentStream.prototype.init.call(this);\n\n      this.push = function (data) {\n        trackDecodeInfo.collectDtsInfo(track, data);\n\n        if (track) {\n          AUDIO_PROPERTIES.forEach(function (prop) {\n            track[prop] = data[prop];\n          });\n        }\n\n        // buffer audio data until end() is called\n        adtsFrames.push(data);\n      };\n\n      this.setEarliestDts = function (earliestDts) {\n        earliestAllowedDts = earliestDts - track.timelineStartInfo.baseMediaDecodeTime;\n      };\n\n      this.setVideoBaseMediaDecodeTime = function (baseMediaDecodeTime) {\n        videoBaseMediaDecodeTime = baseMediaDecodeTime;\n      };\n\n      this.setAudioAppendStart = function (timestamp) {\n        audioAppendStartTs = timestamp;\n      };\n\n      this.flush = function () {\n        var frames, moof, mdat, boxes;\n\n        // return early if no audio data has been observed\n        if (adtsFrames.length === 0) {\n          this.trigger('done', 'AudioSegmentStream');\n          return;\n        }\n\n        frames = this.trimAdtsFramesByEarliestDts_(adtsFrames);\n        track.baseMediaDecodeTime = trackDecodeInfo.calculateTrackBaseMediaDecodeTime(track, options.keepOriginalTimestamps);\n\n        this.prefixWithSilence_(track, frames);\n\n        // we have to build the index from byte locations to\n        // samples (that is, adts frames) in the audio data\n        track.samples = this.generateSampleTable_(frames);\n\n        // concatenate the audio data to constuct the mdat\n        mdat = mp4Generator.mdat(this.concatenateFrameData_(frames));\n\n        adtsFrames = [];\n\n        moof = mp4Generator.moof(sequenceNumber, [track]);\n        boxes = new Uint8Array(moof.byteLength + mdat.byteLength);\n\n        // bump the sequence number for next time\n        sequenceNumber++;\n\n        boxes.set(moof);\n        boxes.set(mdat, moof.byteLength);\n\n        trackDecodeInfo.clearDtsInfo(track);\n\n        this.trigger('data', { track: track, boxes: boxes });\n        this.trigger('done', 'AudioSegmentStream');\n      };\n\n      // Possibly pad (prefix) the audio track with silence if appending this track\n      // would lead to the introduction of a gap in the audio buffer\n      this.prefixWithSilence_ = function (track, frames) {\n        var baseMediaDecodeTimeTs,\n            frameDuration = 0,\n            audioGapDuration = 0,\n            audioFillFrameCount = 0,\n            audioFillDuration = 0,\n            silentFrame,\n            i;\n\n        if (!frames.length) {\n          return;\n        }\n\n        baseMediaDecodeTimeTs = clock.audioTsToVideoTs(track.baseMediaDecodeTime, track.samplerate);\n        // determine frame clock duration based on sample rate, round up to avoid overfills\n        frameDuration = Math.ceil(ONE_SECOND_IN_TS$2 / (track.samplerate / 1024));\n\n        if (audioAppendStartTs && videoBaseMediaDecodeTime) {\n          // insert the shortest possible amount (audio gap or audio to video gap)\n          audioGapDuration = baseMediaDecodeTimeTs - Math.max(audioAppendStartTs, videoBaseMediaDecodeTime);\n          // number of full frames in the audio gap\n          audioFillFrameCount = Math.floor(audioGapDuration / frameDuration);\n          audioFillDuration = audioFillFrameCount * frameDuration;\n        }\n\n        // don't attempt to fill gaps smaller than a single frame or larger\n        // than a half second\n        if (audioFillFrameCount < 1 || audioFillDuration > ONE_SECOND_IN_TS$2 / 2) {\n          return;\n        }\n\n        silentFrame = silence[track.samplerate];\n\n        if (!silentFrame) {\n          // we don't have a silent frame pregenerated for the sample rate, so use a frame\n          // from the content instead\n          silentFrame = frames[0].data;\n        }\n\n        for (i = 0; i < audioFillFrameCount; i++) {\n          frames.splice(i, 0, {\n            data: silentFrame\n          });\n        }\n\n        track.baseMediaDecodeTime -= Math.floor(clock.videoTsToAudioTs(audioFillDuration, track.samplerate));\n      };\n\n      // If the audio segment extends before the earliest allowed dts\n      // value, remove AAC frames until starts at or after the earliest\n      // allowed DTS so that we don't end up with a negative baseMedia-\n      // DecodeTime for the audio track\n      this.trimAdtsFramesByEarliestDts_ = function (adtsFrames) {\n        if (track.minSegmentDts >= earliestAllowedDts) {\n          return adtsFrames;\n        }\n\n        // We will need to recalculate the earliest segment Dts\n        track.minSegmentDts = Infinity;\n\n        return adtsFrames.filter(function (currentFrame) {\n          // If this is an allowed frame, keep it and record it's Dts\n          if (currentFrame.dts >= earliestAllowedDts) {\n            track.minSegmentDts = Math.min(track.minSegmentDts, currentFrame.dts);\n            track.minSegmentPts = track.minSegmentDts;\n            return true;\n          }\n          // Otherwise, discard it\n          return false;\n        });\n      };\n\n      // generate the track's raw mdat data from an array of frames\n      this.generateSampleTable_ = function (frames) {\n        var i,\n            currentFrame,\n            samples = [];\n\n        for (i = 0; i < frames.length; i++) {\n          currentFrame = frames[i];\n          samples.push({\n            size: currentFrame.data.byteLength,\n            duration: 1024 // For AAC audio, all samples contain 1024 samples\n          });\n        }\n        return samples;\n      };\n\n      // generate the track's sample table from an array of frames\n      this.concatenateFrameData_ = function (frames) {\n        var i,\n            currentFrame,\n            dataOffset = 0,\n            data = new Uint8Array(sumFrameByteLengths(frames));\n\n        for (i = 0; i < frames.length; i++) {\n          currentFrame = frames[i];\n\n          data.set(currentFrame.data, dataOffset);\n          dataOffset += currentFrame.data.byteLength;\n        }\n        return data;\n      };\n    };\n\n    _AudioSegmentStream.prototype = new stream();\n\n    /**\n     * Constructs a single-track, ISO BMFF media segment from H264 data\n     * events. The output of this stream can be fed to a SourceBuffer\n     * configured with a suitable initialization segment.\n     * @param track {object} track metadata configuration\n     * @param options {object} transmuxer options object\n     * @param options.alignGopsAtEnd {boolean} If true, start from the end of the\n     *        gopsToAlignWith list when attempting to align gop pts\n     * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps\n     *        in the source; false to adjust the first segment to start at 0.\n     */\n    _VideoSegmentStream = function VideoSegmentStream(track, options) {\n      var sequenceNumber = 0,\n          nalUnits = [],\n          gopsToAlignWith = [],\n          config,\n          pps;\n\n      options = options || {};\n\n      _VideoSegmentStream.prototype.init.call(this);\n\n      delete track.minPTS;\n\n      this.gopCache_ = [];\n\n      /**\n        * Constructs a ISO BMFF segment given H264 nalUnits\n        * @param {Object} nalUnit A data event representing a nalUnit\n        * @param {String} nalUnit.nalUnitType\n        * @param {Object} nalUnit.config Properties for a mp4 track\n        * @param {Uint8Array} nalUnit.data The nalUnit bytes\n        * @see lib/codecs/h264.js\n       **/\n      this.push = function (nalUnit) {\n        trackDecodeInfo.collectDtsInfo(track, nalUnit);\n\n        // record the track config\n        if (nalUnit.nalUnitType === 'seq_parameter_set_rbsp' && !config) {\n          config = nalUnit.config;\n          track.sps = [nalUnit.data];\n\n          VIDEO_PROPERTIES.forEach(function (prop) {\n            track[prop] = config[prop];\n          }, this);\n        }\n\n        if (nalUnit.nalUnitType === 'pic_parameter_set_rbsp' && !pps) {\n          pps = nalUnit.data;\n          track.pps = [nalUnit.data];\n        }\n\n        // buffer video until flush() is called\n        nalUnits.push(nalUnit);\n      };\n\n      /**\n        * Pass constructed ISO BMFF track and boxes on to the\n        * next stream in the pipeline\n       **/\n      this.flush = function () {\n        var frames, gopForFusion, gops, moof, mdat, boxes;\n\n        // Throw away nalUnits at the start of the byte stream until\n        // we find the first AUD\n        while (nalUnits.length) {\n          if (nalUnits[0].nalUnitType === 'access_unit_delimiter_rbsp') {\n            break;\n          }\n          nalUnits.shift();\n        }\n\n        // Return early if no video data has been observed\n        if (nalUnits.length === 0) {\n          this.resetStream_();\n          this.trigger('done', 'VideoSegmentStream');\n          return;\n        }\n\n        // Organize the raw nal-units into arrays that represent\n        // higher-level constructs such as frames and gops\n        // (group-of-pictures)\n        frames = frameUtils.groupNalsIntoFrames(nalUnits);\n        gops = frameUtils.groupFramesIntoGops(frames);\n\n        // If the first frame of this fragment is not a keyframe we have\n        // a problem since MSE (on Chrome) requires a leading keyframe.\n        //\n        // We have two approaches to repairing this situation:\n        // 1) GOP-FUSION:\n        //    This is where we keep track of the GOPS (group-of-pictures)\n        //    from previous fragments and attempt to find one that we can\n        //    prepend to the current fragment in order to create a valid\n        //    fragment.\n        // 2) KEYFRAME-PULLING:\n        //    Here we search for the first keyframe in the fragment and\n        //    throw away all the frames between the start of the fragment\n        //    and that keyframe. We then extend the duration and pull the\n        //    PTS of the keyframe forward so that it covers the time range\n        //    of the frames that were disposed of.\n        //\n        // #1 is far prefereable over #2 which can cause \"stuttering\" but\n        // requires more things to be just right.\n        if (!gops[0][0].keyFrame) {\n          // Search for a gop for fusion from our gopCache\n          gopForFusion = this.getGopForFusion_(nalUnits[0], track);\n\n          if (gopForFusion) {\n            gops.unshift(gopForFusion);\n            // Adjust Gops' metadata to account for the inclusion of the\n            // new gop at the beginning\n            gops.byteLength += gopForFusion.byteLength;\n            gops.nalCount += gopForFusion.nalCount;\n            gops.pts = gopForFusion.pts;\n            gops.dts = gopForFusion.dts;\n            gops.duration += gopForFusion.duration;\n          } else {\n            // If we didn't find a candidate gop fall back to keyframe-pulling\n            gops = frameUtils.extendFirstKeyFrame(gops);\n          }\n        }\n\n        // Trim gops to align with gopsToAlignWith\n        if (gopsToAlignWith.length) {\n          var alignedGops;\n\n          if (options.alignGopsAtEnd) {\n            alignedGops = this.alignGopsAtEnd_(gops);\n          } else {\n            alignedGops = this.alignGopsAtStart_(gops);\n          }\n\n          if (!alignedGops) {\n            // save all the nals in the last GOP into the gop cache\n            this.gopCache_.unshift({\n              gop: gops.pop(),\n              pps: track.pps,\n              sps: track.sps\n            });\n\n            // Keep a maximum of 6 GOPs in the cache\n            this.gopCache_.length = Math.min(6, this.gopCache_.length);\n\n            // Clear nalUnits\n            nalUnits = [];\n\n            // return early no gops can be aligned with desired gopsToAlignWith\n            this.resetStream_();\n            this.trigger('done', 'VideoSegmentStream');\n            return;\n          }\n\n          // Some gops were trimmed. clear dts info so minSegmentDts and pts are correct\n          // when recalculated before sending off to CoalesceStream\n          trackDecodeInfo.clearDtsInfo(track);\n\n          gops = alignedGops;\n        }\n\n        trackDecodeInfo.collectDtsInfo(track, gops);\n\n        // First, we have to build the index from byte locations to\n        // samples (that is, frames) in the video data\n        track.samples = frameUtils.generateSampleTable(gops);\n\n        // Concatenate the video data and construct the mdat\n        mdat = mp4Generator.mdat(frameUtils.concatenateNalData(gops));\n\n        track.baseMediaDecodeTime = trackDecodeInfo.calculateTrackBaseMediaDecodeTime(track, options.keepOriginalTimestamps);\n\n        this.trigger('processedGopsInfo', gops.map(function (gop) {\n          return {\n            pts: gop.pts,\n            dts: gop.dts,\n            byteLength: gop.byteLength\n          };\n        }));\n\n        // save all the nals in the last GOP into the gop cache\n        this.gopCache_.unshift({\n          gop: gops.pop(),\n          pps: track.pps,\n          sps: track.sps\n        });\n\n        // Keep a maximum of 6 GOPs in the cache\n        this.gopCache_.length = Math.min(6, this.gopCache_.length);\n\n        // Clear nalUnits\n        nalUnits = [];\n\n        this.trigger('baseMediaDecodeTime', track.baseMediaDecodeTime);\n        this.trigger('timelineStartInfo', track.timelineStartInfo);\n\n        moof = mp4Generator.moof(sequenceNumber, [track]);\n\n        // it would be great to allocate this array up front instead of\n        // throwing away hundreds of media segment fragments\n        boxes = new Uint8Array(moof.byteLength + mdat.byteLength);\n\n        // Bump the sequence number for next time\n        sequenceNumber++;\n\n        boxes.set(moof);\n        boxes.set(mdat, moof.byteLength);\n\n        this.trigger('data', { track: track, boxes: boxes });\n\n        this.resetStream_();\n\n        // Continue with the flush process now\n        this.trigger('done', 'VideoSegmentStream');\n      };\n\n      this.resetStream_ = function () {\n        trackDecodeInfo.clearDtsInfo(track);\n\n        // reset config and pps because they may differ across segments\n        // for instance, when we are rendition switching\n        config = undefined;\n        pps = undefined;\n      };\n\n      // Search for a candidate Gop for gop-fusion from the gop cache and\n      // return it or return null if no good candidate was found\n      this.getGopForFusion_ = function (nalUnit) {\n        var halfSecond = 45000,\n\n\n        // Half-a-second in a 90khz clock\n        allowableOverlap = 10000,\n\n\n        // About 3 frames @ 30fps\n        nearestDistance = Infinity,\n            dtsDistance,\n            nearestGopObj,\n            currentGop,\n            currentGopObj,\n            i;\n\n        // Search for the GOP nearest to the beginning of this nal unit\n        for (i = 0; i < this.gopCache_.length; i++) {\n          currentGopObj = this.gopCache_[i];\n          currentGop = currentGopObj.gop;\n\n          // Reject Gops with different SPS or PPS\n          if (!(track.pps && arrayEquals(track.pps[0], currentGopObj.pps[0])) || !(track.sps && arrayEquals(track.sps[0], currentGopObj.sps[0]))) {\n            continue;\n          }\n\n          // Reject Gops that would require a negative baseMediaDecodeTime\n          if (currentGop.dts < track.timelineStartInfo.dts) {\n            continue;\n          }\n\n          // The distance between the end of the gop and the start of the nalUnit\n          dtsDistance = nalUnit.dts - currentGop.dts - currentGop.duration;\n\n          // Only consider GOPS that start before the nal unit and end within\n          // a half-second of the nal unit\n          if (dtsDistance >= -allowableOverlap && dtsDistance <= halfSecond) {\n\n            // Always use the closest GOP we found if there is more than\n            // one candidate\n            if (!nearestGopObj || nearestDistance > dtsDistance) {\n              nearestGopObj = currentGopObj;\n              nearestDistance = dtsDistance;\n            }\n          }\n        }\n\n        if (nearestGopObj) {\n          return nearestGopObj.gop;\n        }\n        return null;\n      };\n\n      // trim gop list to the first gop found that has a matching pts with a gop in the list\n      // of gopsToAlignWith starting from the START of the list\n      this.alignGopsAtStart_ = function (gops) {\n        var alignIndex, gopIndex, align, gop, byteLength, nalCount, duration, alignedGops;\n\n        byteLength = gops.byteLength;\n        nalCount = gops.nalCount;\n        duration = gops.duration;\n        alignIndex = gopIndex = 0;\n\n        while (alignIndex < gopsToAlignWith.length && gopIndex < gops.length) {\n          align = gopsToAlignWith[alignIndex];\n          gop = gops[gopIndex];\n\n          if (align.pts === gop.pts) {\n            break;\n          }\n\n          if (gop.pts > align.pts) {\n            // this current gop starts after the current gop we want to align on, so increment\n            // align index\n            alignIndex++;\n            continue;\n          }\n\n          // current gop starts before the current gop we want to align on. so increment gop\n          // index\n          gopIndex++;\n          byteLength -= gop.byteLength;\n          nalCount -= gop.nalCount;\n          duration -= gop.duration;\n        }\n\n        if (gopIndex === 0) {\n          // no gops to trim\n          return gops;\n        }\n\n        if (gopIndex === gops.length) {\n          // all gops trimmed, skip appending all gops\n          return null;\n        }\n\n        alignedGops = gops.slice(gopIndex);\n        alignedGops.byteLength = byteLength;\n        alignedGops.duration = duration;\n        alignedGops.nalCount = nalCount;\n        alignedGops.pts = alignedGops[0].pts;\n        alignedGops.dts = alignedGops[0].dts;\n\n        return alignedGops;\n      };\n\n      // trim gop list to the first gop found that has a matching pts with a gop in the list\n      // of gopsToAlignWith starting from the END of the list\n      this.alignGopsAtEnd_ = function (gops) {\n        var alignIndex, gopIndex, align, gop, alignEndIndex, matchFound;\n\n        alignIndex = gopsToAlignWith.length - 1;\n        gopIndex = gops.length - 1;\n        alignEndIndex = null;\n        matchFound = false;\n\n        while (alignIndex >= 0 && gopIndex >= 0) {\n          align = gopsToAlignWith[alignIndex];\n          gop = gops[gopIndex];\n\n          if (align.pts === gop.pts) {\n            matchFound = true;\n            break;\n          }\n\n          if (align.pts > gop.pts) {\n            alignIndex--;\n            continue;\n          }\n\n          if (alignIndex === gopsToAlignWith.length - 1) {\n            // gop.pts is greater than the last alignment candidate. If no match is found\n            // by the end of this loop, we still want to append gops that come after this\n            // point\n            alignEndIndex = gopIndex;\n          }\n\n          gopIndex--;\n        }\n\n        if (!matchFound && alignEndIndex === null) {\n          return null;\n        }\n\n        var trimIndex;\n\n        if (matchFound) {\n          trimIndex = gopIndex;\n        } else {\n          trimIndex = alignEndIndex;\n        }\n\n        if (trimIndex === 0) {\n          return gops;\n        }\n\n        var alignedGops = gops.slice(trimIndex);\n        var metadata = alignedGops.reduce(function (total, gop) {\n          total.byteLength += gop.byteLength;\n          total.duration += gop.duration;\n          total.nalCount += gop.nalCount;\n          return total;\n        }, { byteLength: 0, duration: 0, nalCount: 0 });\n\n        alignedGops.byteLength = metadata.byteLength;\n        alignedGops.duration = metadata.duration;\n        alignedGops.nalCount = metadata.nalCount;\n        alignedGops.pts = alignedGops[0].pts;\n        alignedGops.dts = alignedGops[0].dts;\n\n        return alignedGops;\n      };\n\n      this.alignGopsWith = function (newGopsToAlignWith) {\n        gopsToAlignWith = newGopsToAlignWith;\n      };\n    };\n\n    _VideoSegmentStream.prototype = new stream();\n\n    /**\n     * A Stream that can combine multiple streams (ie. audio & video)\n     * into a single output segment for MSE. Also supports audio-only\n     * and video-only streams.\n     */\n    _CoalesceStream = function CoalesceStream(options, metadataStream) {\n      // Number of Tracks per output segment\n      // If greater than 1, we combine multiple\n      // tracks into a single segment\n      this.numberOfTracks = 0;\n      this.metadataStream = metadataStream;\n\n      if (typeof options.remux !== 'undefined') {\n        this.remuxTracks = !!options.remux;\n      } else {\n        this.remuxTracks = true;\n      }\n\n      this.pendingTracks = [];\n      this.videoTrack = null;\n      this.pendingBoxes = [];\n      this.pendingCaptions = [];\n      this.pendingMetadata = [];\n      this.pendingBytes = 0;\n      this.emittedTracks = 0;\n\n      _CoalesceStream.prototype.init.call(this);\n\n      // Take output from multiple\n      this.push = function (output) {\n        // buffer incoming captions until the associated video segment\n        // finishes\n        if (output.text) {\n          return this.pendingCaptions.push(output);\n        }\n        // buffer incoming id3 tags until the final flush\n        if (output.frames) {\n          return this.pendingMetadata.push(output);\n        }\n\n        // Add this track to the list of pending tracks and store\n        // important information required for the construction of\n        // the final segment\n        this.pendingTracks.push(output.track);\n        this.pendingBoxes.push(output.boxes);\n        this.pendingBytes += output.boxes.byteLength;\n\n        if (output.track.type === 'video') {\n          this.videoTrack = output.track;\n        }\n        if (output.track.type === 'audio') {\n          this.audioTrack = output.track;\n        }\n      };\n    };\n\n    _CoalesceStream.prototype = new stream();\n    _CoalesceStream.prototype.flush = function (flushSource) {\n      var offset = 0,\n          event = {\n        captions: [],\n        captionStreams: {},\n        metadata: [],\n        info: {}\n      },\n          caption,\n          id3,\n          initSegment,\n          timelineStartPts = 0,\n          i;\n\n      if (this.pendingTracks.length < this.numberOfTracks) {\n        if (flushSource !== 'VideoSegmentStream' && flushSource !== 'AudioSegmentStream') {\n          // Return because we haven't received a flush from a data-generating\n          // portion of the segment (meaning that we have only recieved meta-data\n          // or captions.)\n          return;\n        } else if (this.remuxTracks) {\n          // Return until we have enough tracks from the pipeline to remux (if we\n          // are remuxing audio and video into a single MP4)\n          return;\n        } else if (this.pendingTracks.length === 0) {\n          // In the case where we receive a flush without any data having been\n          // received we consider it an emitted track for the purposes of coalescing\n          // `done` events.\n          // We do this for the case where there is an audio and video track in the\n          // segment but no audio data. (seen in several playlists with alternate\n          // audio tracks and no audio present in the main TS segments.)\n          this.emittedTracks++;\n\n          if (this.emittedTracks >= this.numberOfTracks) {\n            this.trigger('done');\n            this.emittedTracks = 0;\n          }\n          return;\n        }\n      }\n\n      if (this.videoTrack) {\n        timelineStartPts = this.videoTrack.timelineStartInfo.pts;\n        VIDEO_PROPERTIES.forEach(function (prop) {\n          event.info[prop] = this.videoTrack[prop];\n        }, this);\n      } else if (this.audioTrack) {\n        timelineStartPts = this.audioTrack.timelineStartInfo.pts;\n        AUDIO_PROPERTIES.forEach(function (prop) {\n          event.info[prop] = this.audioTrack[prop];\n        }, this);\n      }\n\n      if (this.pendingTracks.length === 1) {\n        event.type = this.pendingTracks[0].type;\n      } else {\n        event.type = 'combined';\n      }\n\n      this.emittedTracks += this.pendingTracks.length;\n\n      initSegment = mp4Generator.initSegment(this.pendingTracks);\n\n      // Create a new typed array to hold the init segment\n      event.initSegment = new Uint8Array(initSegment.byteLength);\n\n      // Create an init segment containing a moov\n      // and track definitions\n      event.initSegment.set(initSegment);\n\n      // Create a new typed array to hold the moof+mdats\n      event.data = new Uint8Array(this.pendingBytes);\n\n      // Append each moof+mdat (one per track) together\n      for (i = 0; i < this.pendingBoxes.length; i++) {\n        event.data.set(this.pendingBoxes[i], offset);\n        offset += this.pendingBoxes[i].byteLength;\n      }\n\n      // Translate caption PTS times into second offsets into the\n      // video timeline for the segment, and add track info\n      for (i = 0; i < this.pendingCaptions.length; i++) {\n        caption = this.pendingCaptions[i];\n        caption.startTime = caption.startPts - timelineStartPts;\n        caption.startTime /= 90e3;\n        caption.endTime = caption.endPts - timelineStartPts;\n        caption.endTime /= 90e3;\n        event.captionStreams[caption.stream] = true;\n        event.captions.push(caption);\n      }\n\n      // Translate ID3 frame PTS times into second offsets into the\n      // video timeline for the segment\n      for (i = 0; i < this.pendingMetadata.length; i++) {\n        id3 = this.pendingMetadata[i];\n        id3.cueTime = id3.pts - timelineStartPts;\n        id3.cueTime /= 90e3;\n        event.metadata.push(id3);\n      }\n      // We add this to every single emitted segment even though we only need\n      // it for the first\n      event.metadata.dispatchType = this.metadataStream.dispatchType;\n\n      // Reset stream state\n      this.pendingTracks.length = 0;\n      this.videoTrack = null;\n      this.pendingBoxes.length = 0;\n      this.pendingCaptions.length = 0;\n      this.pendingBytes = 0;\n      this.pendingMetadata.length = 0;\n\n      // Emit the built segment\n      this.trigger('data', event);\n\n      // Only emit `done` if all tracks have been flushed and emitted\n      if (this.emittedTracks >= this.numberOfTracks) {\n        this.trigger('done');\n        this.emittedTracks = 0;\n      }\n    };\n    /**\n     * A Stream that expects MP2T binary data as input and produces\n     * corresponding media segments, suitable for use with Media Source\n     * Extension (MSE) implementations that support the ISO BMFF byte\n     * stream format, like Chrome.\n     */\n    _Transmuxer = function Transmuxer(options) {\n      var self = this,\n          hasFlushed = true,\n          videoTrack,\n          audioTrack;\n\n      _Transmuxer.prototype.init.call(this);\n\n      options = options || {};\n      this.baseMediaDecodeTime = options.baseMediaDecodeTime || 0;\n      this.transmuxPipeline_ = {};\n\n      this.setupAacPipeline = function () {\n        var pipeline = {};\n        this.transmuxPipeline_ = pipeline;\n\n        pipeline.type = 'aac';\n        pipeline.metadataStream = new m2ts_1.MetadataStream();\n\n        // set up the parsing pipeline\n        pipeline.aacStream = new aac();\n        pipeline.audioTimestampRolloverStream = new m2ts_1.TimestampRolloverStream('audio');\n        pipeline.timedMetadataTimestampRolloverStream = new m2ts_1.TimestampRolloverStream('timed-metadata');\n        pipeline.adtsStream = new adts();\n        pipeline.coalesceStream = new _CoalesceStream(options, pipeline.metadataStream);\n        pipeline.headOfPipeline = pipeline.aacStream;\n\n        pipeline.aacStream.pipe(pipeline.audioTimestampRolloverStream).pipe(pipeline.adtsStream);\n        pipeline.aacStream.pipe(pipeline.timedMetadataTimestampRolloverStream).pipe(pipeline.metadataStream).pipe(pipeline.coalesceStream);\n\n        pipeline.metadataStream.on('timestamp', function (frame) {\n          pipeline.aacStream.setTimestamp(frame.timeStamp);\n        });\n\n        pipeline.aacStream.on('data', function (data) {\n          if (data.type === 'timed-metadata' && !pipeline.audioSegmentStream) {\n            audioTrack = audioTrack || {\n              timelineStartInfo: {\n                baseMediaDecodeTime: self.baseMediaDecodeTime\n              },\n              codec: 'adts',\n              type: 'audio'\n            };\n            // hook up the audio segment stream to the first track with aac data\n            pipeline.coalesceStream.numberOfTracks++;\n            pipeline.audioSegmentStream = new _AudioSegmentStream(audioTrack, options);\n            // Set up the final part of the audio pipeline\n            pipeline.adtsStream.pipe(pipeline.audioSegmentStream).pipe(pipeline.coalesceStream);\n          }\n        });\n\n        // Re-emit any data coming from the coalesce stream to the outside world\n        pipeline.coalesceStream.on('data', this.trigger.bind(this, 'data'));\n        // Let the consumer know we have finished flushing the entire pipeline\n        pipeline.coalesceStream.on('done', this.trigger.bind(this, 'done'));\n      };\n\n      this.setupTsPipeline = function () {\n        var pipeline = {};\n        this.transmuxPipeline_ = pipeline;\n\n        pipeline.type = 'ts';\n        pipeline.metadataStream = new m2ts_1.MetadataStream();\n\n        // set up the parsing pipeline\n        pipeline.packetStream = new m2ts_1.TransportPacketStream();\n        pipeline.parseStream = new m2ts_1.TransportParseStream();\n        pipeline.elementaryStream = new m2ts_1.ElementaryStream();\n        pipeline.videoTimestampRolloverStream = new m2ts_1.TimestampRolloverStream('video');\n        pipeline.audioTimestampRolloverStream = new m2ts_1.TimestampRolloverStream('audio');\n        pipeline.timedMetadataTimestampRolloverStream = new m2ts_1.TimestampRolloverStream('timed-metadata');\n        pipeline.adtsStream = new adts();\n        pipeline.h264Stream = new H264Stream();\n        pipeline.captionStream = new m2ts_1.CaptionStream();\n        pipeline.coalesceStream = new _CoalesceStream(options, pipeline.metadataStream);\n        pipeline.headOfPipeline = pipeline.packetStream;\n\n        // disassemble MPEG2-TS packets into elementary streams\n        pipeline.packetStream.pipe(pipeline.parseStream).pipe(pipeline.elementaryStream);\n\n        // !!THIS ORDER IS IMPORTANT!!\n        // demux the streams\n        pipeline.elementaryStream.pipe(pipeline.videoTimestampRolloverStream).pipe(pipeline.h264Stream);\n        pipeline.elementaryStream.pipe(pipeline.audioTimestampRolloverStream).pipe(pipeline.adtsStream);\n\n        pipeline.elementaryStream.pipe(pipeline.timedMetadataTimestampRolloverStream).pipe(pipeline.metadataStream).pipe(pipeline.coalesceStream);\n\n        // Hook up CEA-608/708 caption stream\n        pipeline.h264Stream.pipe(pipeline.captionStream).pipe(pipeline.coalesceStream);\n\n        pipeline.elementaryStream.on('data', function (data) {\n          var i;\n\n          if (data.type === 'metadata') {\n            i = data.tracks.length;\n\n            // scan the tracks listed in the metadata\n            while (i--) {\n              if (!videoTrack && data.tracks[i].type === 'video') {\n                videoTrack = data.tracks[i];\n                videoTrack.timelineStartInfo.baseMediaDecodeTime = self.baseMediaDecodeTime;\n              } else if (!audioTrack && data.tracks[i].type === 'audio') {\n                audioTrack = data.tracks[i];\n                audioTrack.timelineStartInfo.baseMediaDecodeTime = self.baseMediaDecodeTime;\n              }\n            }\n\n            // hook up the video segment stream to the first track with h264 data\n            if (videoTrack && !pipeline.videoSegmentStream) {\n              pipeline.coalesceStream.numberOfTracks++;\n              pipeline.videoSegmentStream = new _VideoSegmentStream(videoTrack, options);\n\n              pipeline.videoSegmentStream.on('timelineStartInfo', function (timelineStartInfo) {\n                // When video emits timelineStartInfo data after a flush, we forward that\n                // info to the AudioSegmentStream, if it exists, because video timeline\n                // data takes precedence.\n                if (audioTrack) {\n                  audioTrack.timelineStartInfo = timelineStartInfo;\n                  // On the first segment we trim AAC frames that exist before the\n                  // very earliest DTS we have seen in video because Chrome will\n                  // interpret any video track with a baseMediaDecodeTime that is\n                  // non-zero as a gap.\n                  pipeline.audioSegmentStream.setEarliestDts(timelineStartInfo.dts);\n                }\n              });\n\n              pipeline.videoSegmentStream.on('processedGopsInfo', self.trigger.bind(self, 'gopInfo'));\n\n              pipeline.videoSegmentStream.on('baseMediaDecodeTime', function (baseMediaDecodeTime) {\n                if (audioTrack) {\n                  pipeline.audioSegmentStream.setVideoBaseMediaDecodeTime(baseMediaDecodeTime);\n                }\n              });\n\n              // Set up the final part of the video pipeline\n              pipeline.h264Stream.pipe(pipeline.videoSegmentStream).pipe(pipeline.coalesceStream);\n            }\n\n            if (audioTrack && !pipeline.audioSegmentStream) {\n              // hook up the audio segment stream to the first track with aac data\n              pipeline.coalesceStream.numberOfTracks++;\n              pipeline.audioSegmentStream = new _AudioSegmentStream(audioTrack, options);\n\n              // Set up the final part of the audio pipeline\n              pipeline.adtsStream.pipe(pipeline.audioSegmentStream).pipe(pipeline.coalesceStream);\n            }\n          }\n        });\n\n        // Re-emit any data coming from the coalesce stream to the outside world\n        pipeline.coalesceStream.on('data', this.trigger.bind(this, 'data'));\n        // Let the consumer know we have finished flushing the entire pipeline\n        pipeline.coalesceStream.on('done', this.trigger.bind(this, 'done'));\n      };\n\n      // hook up the segment streams once track metadata is delivered\n      this.setBaseMediaDecodeTime = function (baseMediaDecodeTime) {\n        var pipeline = this.transmuxPipeline_;\n\n        this.baseMediaDecodeTime = baseMediaDecodeTime;\n        if (audioTrack) {\n          audioTrack.timelineStartInfo.dts = undefined;\n          audioTrack.timelineStartInfo.pts = undefined;\n          trackDecodeInfo.clearDtsInfo(audioTrack);\n          audioTrack.timelineStartInfo.baseMediaDecodeTime = baseMediaDecodeTime;\n          if (pipeline.audioTimestampRolloverStream) {\n            pipeline.audioTimestampRolloverStream.discontinuity();\n          }\n        }\n        if (videoTrack) {\n          if (pipeline.videoSegmentStream) {\n            pipeline.videoSegmentStream.gopCache_ = [];\n            pipeline.videoTimestampRolloverStream.discontinuity();\n          }\n          videoTrack.timelineStartInfo.dts = undefined;\n          videoTrack.timelineStartInfo.pts = undefined;\n          trackDecodeInfo.clearDtsInfo(videoTrack);\n          pipeline.captionStream.reset();\n          videoTrack.timelineStartInfo.baseMediaDecodeTime = baseMediaDecodeTime;\n        }\n\n        if (pipeline.timedMetadataTimestampRolloverStream) {\n          pipeline.timedMetadataTimestampRolloverStream.discontinuity();\n        }\n      };\n\n      this.setAudioAppendStart = function (timestamp) {\n        if (audioTrack) {\n          this.transmuxPipeline_.audioSegmentStream.setAudioAppendStart(timestamp);\n        }\n      };\n\n      this.alignGopsWith = function (gopsToAlignWith) {\n        if (videoTrack && this.transmuxPipeline_.videoSegmentStream) {\n          this.transmuxPipeline_.videoSegmentStream.alignGopsWith(gopsToAlignWith);\n        }\n      };\n\n      // feed incoming data to the front of the parsing pipeline\n      this.push = function (data) {\n        if (hasFlushed) {\n          var isAac = isLikelyAacData(data);\n\n          if (isAac && this.transmuxPipeline_.type !== 'aac') {\n            this.setupAacPipeline();\n          } else if (!isAac && this.transmuxPipeline_.type !== 'ts') {\n            this.setupTsPipeline();\n          }\n          hasFlushed = false;\n        }\n        this.transmuxPipeline_.headOfPipeline.push(data);\n      };\n\n      // flush any buffered data\n      this.flush = function () {\n        hasFlushed = true;\n        // Start at the top of the pipeline and flush all pending work\n        this.transmuxPipeline_.headOfPipeline.flush();\n      };\n\n      // Caption data has to be reset when seeking outside buffered range\n      this.resetCaptions = function () {\n        if (this.transmuxPipeline_.captionStream) {\n          this.transmuxPipeline_.captionStream.reset();\n        }\n      };\n    };\n    _Transmuxer.prototype = new stream();\n\n    var transmuxer = {\n      Transmuxer: _Transmuxer,\n      VideoSegmentStream: _VideoSegmentStream,\n      AudioSegmentStream: _AudioSegmentStream,\n      AUDIO_PROPERTIES: AUDIO_PROPERTIES,\n      VIDEO_PROPERTIES: VIDEO_PROPERTIES\n    };\n\n    var inspectMp4,\n        _textifyMp,\n        parseType$1 = probe.parseType,\n        parseMp4Date = function parseMp4Date(seconds) {\n      return new Date(seconds * 1000 - 2082844800000);\n    },\n        parseSampleFlags = function parseSampleFlags(flags) {\n      return {\n        isLeading: (flags[0] & 0x0c) >>> 2,\n        dependsOn: flags[0] & 0x03,\n        isDependedOn: (flags[1] & 0xc0) >>> 6,\n        hasRedundancy: (flags[1] & 0x30) >>> 4,\n        paddingValue: (flags[1] & 0x0e) >>> 1,\n        isNonSyncSample: flags[1] & 0x01,\n        degradationPriority: flags[2] << 8 | flags[3]\n      };\n    },\n        nalParse = function nalParse(avcStream) {\n      var avcView = new DataView(avcStream.buffer, avcStream.byteOffset, avcStream.byteLength),\n          result = [],\n          i,\n          length;\n      for (i = 0; i + 4 < avcStream.length; i += length) {\n        length = avcView.getUint32(i);\n        i += 4;\n\n        // bail if this doesn't appear to be an H264 stream\n        if (length <= 0) {\n          result.push('<span style=\\'color:red;\\'>MALFORMED DATA</span>');\n          continue;\n        }\n\n        switch (avcStream[i] & 0x1F) {\n          case 0x01:\n            result.push('slice_layer_without_partitioning_rbsp');\n            break;\n          case 0x05:\n            result.push('slice_layer_without_partitioning_rbsp_idr');\n            break;\n          case 0x06:\n            result.push('sei_rbsp');\n            break;\n          case 0x07:\n            result.push('seq_parameter_set_rbsp');\n            break;\n          case 0x08:\n            result.push('pic_parameter_set_rbsp');\n            break;\n          case 0x09:\n            result.push('access_unit_delimiter_rbsp');\n            break;\n          default:\n            result.push('UNKNOWN NAL - ' + avcStream[i] & 0x1F);\n            break;\n        }\n      }\n      return result;\n    },\n\n\n    // registry of handlers for individual mp4 box types\n    parse$$1 = {\n      // codingname, not a first-class box type. stsd entries share the\n      // same format as real boxes so the parsing infrastructure can be\n      // shared\n      avc1: function avc1(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n        return {\n          dataReferenceIndex: view.getUint16(6),\n          width: view.getUint16(24),\n          height: view.getUint16(26),\n          horizresolution: view.getUint16(28) + view.getUint16(30) / 16,\n          vertresolution: view.getUint16(32) + view.getUint16(34) / 16,\n          frameCount: view.getUint16(40),\n          depth: view.getUint16(74),\n          config: inspectMp4(data.subarray(78, data.byteLength))\n        };\n      },\n      avcC: function avcC(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          configurationVersion: data[0],\n          avcProfileIndication: data[1],\n          profileCompatibility: data[2],\n          avcLevelIndication: data[3],\n          lengthSizeMinusOne: data[4] & 0x03,\n          sps: [],\n          pps: []\n        },\n            numOfSequenceParameterSets = data[5] & 0x1f,\n            numOfPictureParameterSets,\n            nalSize,\n            offset,\n            i;\n\n        // iterate past any SPSs\n        offset = 6;\n        for (i = 0; i < numOfSequenceParameterSets; i++) {\n          nalSize = view.getUint16(offset);\n          offset += 2;\n          result.sps.push(new Uint8Array(data.subarray(offset, offset + nalSize)));\n          offset += nalSize;\n        }\n        // iterate past any PPSs\n        numOfPictureParameterSets = data[offset];\n        offset++;\n        for (i = 0; i < numOfPictureParameterSets; i++) {\n          nalSize = view.getUint16(offset);\n          offset += 2;\n          result.pps.push(new Uint8Array(data.subarray(offset, offset + nalSize)));\n          offset += nalSize;\n        }\n        return result;\n      },\n      btrt: function btrt(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n        return {\n          bufferSizeDB: view.getUint32(0),\n          maxBitrate: view.getUint32(4),\n          avgBitrate: view.getUint32(8)\n        };\n      },\n      esds: function esds(data) {\n        return {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          esId: data[6] << 8 | data[7],\n          streamPriority: data[8] & 0x1f,\n          decoderConfig: {\n            objectProfileIndication: data[11],\n            streamType: data[12] >>> 2 & 0x3f,\n            bufferSize: data[13] << 16 | data[14] << 8 | data[15],\n            maxBitrate: data[16] << 24 | data[17] << 16 | data[18] << 8 | data[19],\n            avgBitrate: data[20] << 24 | data[21] << 16 | data[22] << 8 | data[23],\n            decoderConfigDescriptor: {\n              tag: data[24],\n              length: data[25],\n              audioObjectType: data[26] >>> 3 & 0x1f,\n              samplingFrequencyIndex: (data[26] & 0x07) << 1 | data[27] >>> 7 & 0x01,\n              channelConfiguration: data[27] >>> 3 & 0x0f\n            }\n          }\n        };\n      },\n      ftyp: function ftyp(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          majorBrand: parseType$1(data.subarray(0, 4)),\n          minorVersion: view.getUint32(4),\n          compatibleBrands: []\n        },\n            i = 8;\n        while (i < data.byteLength) {\n          result.compatibleBrands.push(parseType$1(data.subarray(i, i + 4)));\n          i += 4;\n        }\n        return result;\n      },\n      dinf: function dinf(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      dref: function dref(data) {\n        return {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          dataReferences: inspectMp4(data.subarray(8))\n        };\n      },\n      hdlr: function hdlr(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4)),\n          handlerType: parseType$1(data.subarray(8, 12)),\n          name: ''\n        },\n            i = 8;\n\n        // parse out the name field\n        for (i = 24; i < data.byteLength; i++) {\n          if (data[i] === 0x00) {\n            // the name field is null-terminated\n            i++;\n            break;\n          }\n          result.name += String.fromCharCode(data[i]);\n        }\n        // decode UTF-8 to javascript's internal representation\n        // see http://ecmanaut.blogspot.com/2006/07/encoding-decoding-utf8-in-javascript.html\n        result.name = decodeURIComponent(escape(result.name));\n\n        return result;\n      },\n      mdat: function mdat(data) {\n        return {\n          byteLength: data.byteLength,\n          nals: nalParse(data)\n        };\n      },\n      mdhd: function mdhd(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            i = 4,\n            language,\n            result = {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4)),\n          language: ''\n        };\n        if (result.version === 1) {\n          i += 4;\n          result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n          i += 8;\n          result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n          i += 4;\n          result.timescale = view.getUint32(i);\n          i += 8;\n          result.duration = view.getUint32(i); // truncating top 4 bytes\n        } else {\n          result.creationTime = parseMp4Date(view.getUint32(i));\n          i += 4;\n          result.modificationTime = parseMp4Date(view.getUint32(i));\n          i += 4;\n          result.timescale = view.getUint32(i);\n          i += 4;\n          result.duration = view.getUint32(i);\n        }\n        i += 4;\n        // language is stored as an ISO-639-2/T code in an array of three 5-bit fields\n        // each field is the packed difference between its ASCII value and 0x60\n        language = view.getUint16(i);\n        result.language += String.fromCharCode((language >> 10) + 0x60);\n        result.language += String.fromCharCode(((language & 0x03e0) >> 5) + 0x60);\n        result.language += String.fromCharCode((language & 0x1f) + 0x60);\n\n        return result;\n      },\n      mdia: function mdia(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      mfhd: function mfhd(data) {\n        return {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          sequenceNumber: data[4] << 24 | data[5] << 16 | data[6] << 8 | data[7]\n        };\n      },\n      minf: function minf(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      // codingname, not a first-class box type. stsd entries share the\n      // same format as real boxes so the parsing infrastructure can be\n      // shared\n      mp4a: function mp4a(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          // 6 bytes reserved\n          dataReferenceIndex: view.getUint16(6),\n          // 4 + 4 bytes reserved\n          channelcount: view.getUint16(16),\n          samplesize: view.getUint16(18),\n          // 2 bytes pre_defined\n          // 2 bytes reserved\n          samplerate: view.getUint16(24) + view.getUint16(26) / 65536\n        };\n\n        // if there are more bytes to process, assume this is an ISO/IEC\n        // 14496-14 MP4AudioSampleEntry and parse the ESDBox\n        if (data.byteLength > 28) {\n          result.streamDescriptor = inspectMp4(data.subarray(28))[0];\n        }\n        return result;\n      },\n      moof: function moof(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      moov: function moov(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      mvex: function mvex(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      mvhd: function mvhd(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            i = 4,\n            result = {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4))\n        };\n\n        if (result.version === 1) {\n          i += 4;\n          result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n          i += 8;\n          result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n          i += 4;\n          result.timescale = view.getUint32(i);\n          i += 8;\n          result.duration = view.getUint32(i); // truncating top 4 bytes\n        } else {\n          result.creationTime = parseMp4Date(view.getUint32(i));\n          i += 4;\n          result.modificationTime = parseMp4Date(view.getUint32(i));\n          i += 4;\n          result.timescale = view.getUint32(i);\n          i += 4;\n          result.duration = view.getUint32(i);\n        }\n        i += 4;\n\n        // convert fixed-point, base 16 back to a number\n        result.rate = view.getUint16(i) + view.getUint16(i + 2) / 16;\n        i += 4;\n        result.volume = view.getUint8(i) + view.getUint8(i + 1) / 8;\n        i += 2;\n        i += 2;\n        i += 2 * 4;\n        result.matrix = new Uint32Array(data.subarray(i, i + 9 * 4));\n        i += 9 * 4;\n        i += 6 * 4;\n        result.nextTrackId = view.getUint32(i);\n        return result;\n      },\n      pdin: function pdin(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n        return {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4)),\n          rate: view.getUint32(4),\n          initialDelay: view.getUint32(8)\n        };\n      },\n      sdtp: function sdtp(data) {\n        var result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          samples: []\n        },\n            i;\n\n        for (i = 4; i < data.byteLength; i++) {\n          result.samples.push({\n            dependsOn: (data[i] & 0x30) >> 4,\n            isDependedOn: (data[i] & 0x0c) >> 2,\n            hasRedundancy: data[i] & 0x03\n          });\n        }\n        return result;\n      },\n      sidx: function sidx(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          references: [],\n          referenceId: view.getUint32(4),\n          timescale: view.getUint32(8),\n          earliestPresentationTime: view.getUint32(12),\n          firstOffset: view.getUint32(16)\n        },\n            referenceCount = view.getUint16(22),\n            i;\n\n        for (i = 24; referenceCount; i += 12, referenceCount--) {\n          result.references.push({\n            referenceType: (data[i] & 0x80) >>> 7,\n            referencedSize: view.getUint32(i) & 0x7FFFFFFF,\n            subsegmentDuration: view.getUint32(i + 4),\n            startsWithSap: !!(data[i + 8] & 0x80),\n            sapType: (data[i + 8] & 0x70) >>> 4,\n            sapDeltaTime: view.getUint32(i + 8) & 0x0FFFFFFF\n          });\n        }\n\n        return result;\n      },\n      smhd: function smhd(data) {\n        return {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          balance: data[4] + data[5] / 256\n        };\n      },\n      stbl: function stbl(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      stco: function stco(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          chunkOffsets: []\n        },\n            entryCount = view.getUint32(4),\n            i;\n        for (i = 8; entryCount; i += 4, entryCount--) {\n          result.chunkOffsets.push(view.getUint32(i));\n        }\n        return result;\n      },\n      stsc: function stsc(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            entryCount = view.getUint32(4),\n            result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          sampleToChunks: []\n        },\n            i;\n        for (i = 8; entryCount; i += 12, entryCount--) {\n          result.sampleToChunks.push({\n            firstChunk: view.getUint32(i),\n            samplesPerChunk: view.getUint32(i + 4),\n            sampleDescriptionIndex: view.getUint32(i + 8)\n          });\n        }\n        return result;\n      },\n      stsd: function stsd(data) {\n        return {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          sampleDescriptions: inspectMp4(data.subarray(8))\n        };\n      },\n      stsz: function stsz(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          sampleSize: view.getUint32(4),\n          entries: []\n        },\n            i;\n        for (i = 12; i < data.byteLength; i += 4) {\n          result.entries.push(view.getUint32(i));\n        }\n        return result;\n      },\n      stts: function stts(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          timeToSamples: []\n        },\n            entryCount = view.getUint32(4),\n            i;\n\n        for (i = 8; entryCount; i += 8, entryCount--) {\n          result.timeToSamples.push({\n            sampleCount: view.getUint32(i),\n            sampleDelta: view.getUint32(i + 4)\n          });\n        }\n        return result;\n      },\n      styp: function styp(data) {\n        return parse$$1.ftyp(data);\n      },\n      tfdt: function tfdt(data) {\n        var result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          baseMediaDecodeTime: data[4] << 24 | data[5] << 16 | data[6] << 8 | data[7]\n        };\n        if (result.version === 1) {\n          result.baseMediaDecodeTime *= Math.pow(2, 32);\n          result.baseMediaDecodeTime += data[8] << 24 | data[9] << 16 | data[10] << 8 | data[11];\n        }\n        return result;\n      },\n      tfhd: function tfhd(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          trackId: view.getUint32(4)\n        },\n            baseDataOffsetPresent = result.flags[2] & 0x01,\n            sampleDescriptionIndexPresent = result.flags[2] & 0x02,\n            defaultSampleDurationPresent = result.flags[2] & 0x08,\n            defaultSampleSizePresent = result.flags[2] & 0x10,\n            defaultSampleFlagsPresent = result.flags[2] & 0x20,\n            durationIsEmpty = result.flags[0] & 0x010000,\n            defaultBaseIsMoof = result.flags[0] & 0x020000,\n            i;\n\n        i = 8;\n        if (baseDataOffsetPresent) {\n          i += 4; // truncate top 4 bytes\n          // FIXME: should we read the full 64 bits?\n          result.baseDataOffset = view.getUint32(12);\n          i += 4;\n        }\n        if (sampleDescriptionIndexPresent) {\n          result.sampleDescriptionIndex = view.getUint32(i);\n          i += 4;\n        }\n        if (defaultSampleDurationPresent) {\n          result.defaultSampleDuration = view.getUint32(i);\n          i += 4;\n        }\n        if (defaultSampleSizePresent) {\n          result.defaultSampleSize = view.getUint32(i);\n          i += 4;\n        }\n        if (defaultSampleFlagsPresent) {\n          result.defaultSampleFlags = view.getUint32(i);\n        }\n        if (durationIsEmpty) {\n          result.durationIsEmpty = true;\n        }\n        if (!baseDataOffsetPresent && defaultBaseIsMoof) {\n          result.baseDataOffsetIsMoof = true;\n        }\n        return result;\n      },\n      tkhd: function tkhd(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            i = 4,\n            result = {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4))\n        };\n        if (result.version === 1) {\n          i += 4;\n          result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n          i += 8;\n          result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n          i += 4;\n          result.trackId = view.getUint32(i);\n          i += 4;\n          i += 8;\n          result.duration = view.getUint32(i); // truncating top 4 bytes\n        } else {\n          result.creationTime = parseMp4Date(view.getUint32(i));\n          i += 4;\n          result.modificationTime = parseMp4Date(view.getUint32(i));\n          i += 4;\n          result.trackId = view.getUint32(i);\n          i += 4;\n          i += 4;\n          result.duration = view.getUint32(i);\n        }\n        i += 4;\n        i += 2 * 4;\n        result.layer = view.getUint16(i);\n        i += 2;\n        result.alternateGroup = view.getUint16(i);\n        i += 2;\n        // convert fixed-point, base 16 back to a number\n        result.volume = view.getUint8(i) + view.getUint8(i + 1) / 8;\n        i += 2;\n        i += 2;\n        result.matrix = new Uint32Array(data.subarray(i, i + 9 * 4));\n        i += 9 * 4;\n        result.width = view.getUint16(i) + view.getUint16(i + 2) / 16;\n        i += 4;\n        result.height = view.getUint16(i) + view.getUint16(i + 2) / 16;\n        return result;\n      },\n      traf: function traf(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      trak: function trak(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      trex: function trex(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n        return {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          trackId: view.getUint32(4),\n          defaultSampleDescriptionIndex: view.getUint32(8),\n          defaultSampleDuration: view.getUint32(12),\n          defaultSampleSize: view.getUint32(16),\n          sampleDependsOn: data[20] & 0x03,\n          sampleIsDependedOn: (data[21] & 0xc0) >> 6,\n          sampleHasRedundancy: (data[21] & 0x30) >> 4,\n          samplePaddingValue: (data[21] & 0x0e) >> 1,\n          sampleIsDifferenceSample: !!(data[21] & 0x01),\n          sampleDegradationPriority: view.getUint16(22)\n        };\n      },\n      trun: function trun(data) {\n        var result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          samples: []\n        },\n            view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n\n\n        // Flag interpretation\n        dataOffsetPresent = result.flags[2] & 0x01,\n\n\n        // compare with 2nd byte of 0x1\n        firstSampleFlagsPresent = result.flags[2] & 0x04,\n\n\n        // compare with 2nd byte of 0x4\n        sampleDurationPresent = result.flags[1] & 0x01,\n\n\n        // compare with 2nd byte of 0x100\n        sampleSizePresent = result.flags[1] & 0x02,\n\n\n        // compare with 2nd byte of 0x200\n        sampleFlagsPresent = result.flags[1] & 0x04,\n\n\n        // compare with 2nd byte of 0x400\n        sampleCompositionTimeOffsetPresent = result.flags[1] & 0x08,\n\n\n        // compare with 2nd byte of 0x800\n        sampleCount = view.getUint32(4),\n            offset = 8,\n            sample;\n\n        if (dataOffsetPresent) {\n          // 32 bit signed integer\n          result.dataOffset = view.getInt32(offset);\n          offset += 4;\n        }\n\n        // Overrides the flags for the first sample only. The order of\n        // optional values will be: duration, size, compositionTimeOffset\n        if (firstSampleFlagsPresent && sampleCount) {\n          sample = {\n            flags: parseSampleFlags(data.subarray(offset, offset + 4))\n          };\n          offset += 4;\n          if (sampleDurationPresent) {\n            sample.duration = view.getUint32(offset);\n            offset += 4;\n          }\n          if (sampleSizePresent) {\n            sample.size = view.getUint32(offset);\n            offset += 4;\n          }\n          if (sampleCompositionTimeOffsetPresent) {\n            // Note: this should be a signed int if version is 1\n            sample.compositionTimeOffset = view.getUint32(offset);\n            offset += 4;\n          }\n          result.samples.push(sample);\n          sampleCount--;\n        }\n\n        while (sampleCount--) {\n          sample = {};\n          if (sampleDurationPresent) {\n            sample.duration = view.getUint32(offset);\n            offset += 4;\n          }\n          if (sampleSizePresent) {\n            sample.size = view.getUint32(offset);\n            offset += 4;\n          }\n          if (sampleFlagsPresent) {\n            sample.flags = parseSampleFlags(data.subarray(offset, offset + 4));\n            offset += 4;\n          }\n          if (sampleCompositionTimeOffsetPresent) {\n            // Note: this should be a signed int if version is 1\n            sample.compositionTimeOffset = view.getUint32(offset);\n            offset += 4;\n          }\n          result.samples.push(sample);\n        }\n        return result;\n      },\n      'url ': function url(data) {\n        return {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4))\n        };\n      },\n      vmhd: function vmhd(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n        return {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          graphicsmode: view.getUint16(4),\n          opcolor: new Uint16Array([view.getUint16(6), view.getUint16(8), view.getUint16(10)])\n        };\n      }\n    };\n\n    /**\n     * Return a javascript array of box objects parsed from an ISO base\n     * media file.\n     * @param data {Uint8Array} the binary data of the media to be inspected\n     * @return {array} a javascript array of potentially nested box objects\n     */\n    inspectMp4 = function inspectMp4(data) {\n      var i = 0,\n          result = [],\n          view,\n          size,\n          type,\n          end,\n          box;\n\n      // Convert data from Uint8Array to ArrayBuffer, to follow Dataview API\n      var ab = new ArrayBuffer(data.length);\n      var v = new Uint8Array(ab);\n      for (var z = 0; z < data.length; ++z) {\n        v[z] = data[z];\n      }\n      view = new DataView(ab);\n\n      while (i < data.byteLength) {\n        // parse box data\n        size = view.getUint32(i);\n        type = parseType$1(data.subarray(i + 4, i + 8));\n        end = size > 1 ? i + size : data.byteLength;\n\n        // parse type-specific data\n        box = (parse$$1[type] || function (data) {\n          return {\n            data: data\n          };\n        })(data.subarray(i + 8, end));\n        box.size = size;\n        box.type = type;\n\n        // store this box and move to the next\n        result.push(box);\n        i = end;\n      }\n      return result;\n    };\n\n    /**\n     * Returns a textual representation of the javascript represtentation\n     * of an MP4 file. You can use it as an alternative to\n     * JSON.stringify() to compare inspected MP4s.\n     * @param inspectedMp4 {array} the parsed array of boxes in an MP4\n     * file\n     * @param depth {number} (optional) the number of ancestor boxes of\n     * the elements of inspectedMp4. Assumed to be zero if unspecified.\n     * @return {string} a text representation of the parsed MP4\n     */\n    _textifyMp = function textifyMp4(inspectedMp4, depth) {\n      var indent;\n      depth = depth || 0;\n      indent = new Array(depth * 2 + 1).join(' ');\n\n      // iterate over all the boxes\n      return inspectedMp4.map(function (box, index) {\n\n        // list the box type first at the current indentation level\n        return indent + box.type + '\\n' +\n\n        // the type is already included and handle child boxes separately\n        Object.keys(box).filter(function (key) {\n          return key !== 'type' && key !== 'boxes';\n\n          // output all the box properties\n        }).map(function (key) {\n          var prefix = indent + '  ' + key + ': ',\n              value = box[key];\n\n          // print out raw bytes as hexademical\n          if (value instanceof Uint8Array || value instanceof Uint32Array) {\n            var bytes = Array.prototype.slice.call(new Uint8Array(value.buffer, value.byteOffset, value.byteLength)).map(function (byte) {\n              return ' ' + ('00' + byte.toString(16)).slice(-2);\n            }).join('').match(/.{1,24}/g);\n            if (!bytes) {\n              return prefix + '<>';\n            }\n            if (bytes.length === 1) {\n              return prefix + '<' + bytes.join('').slice(1) + '>';\n            }\n            return prefix + '<\\n' + bytes.map(function (line) {\n              return indent + '  ' + line;\n            }).join('\\n') + '\\n' + indent + '  >';\n          }\n\n          // stringify generic objects\n          return prefix + JSON.stringify(value, null, 2).split('\\n').map(function (line, index) {\n            if (index === 0) {\n              return line;\n            }\n            return indent + '  ' + line;\n          }).join('\\n');\n        }).join('\\n') + (\n\n        // recursively textify the child boxes\n        box.boxes ? '\\n' + _textifyMp(box.boxes, depth + 1) : '');\n      }).join('\\n');\n    };\n\n    var mp4Inspector = {\n      inspect: inspectMp4,\n      textify: _textifyMp,\n      parseTfdt: parse$$1.tfdt,\n      parseHdlr: parse$$1.hdlr,\n      parseTfhd: parse$$1.tfhd,\n      parseTrun: parse$$1.trun\n    };\n\n    var discardEmulationPreventionBytes$1 = captionPacketParser.discardEmulationPreventionBytes;\n    var CaptionStream$1 = captionStream.CaptionStream;\n\n    /**\n      * Maps an offset in the mdat to a sample based on the the size of the samples.\n      * Assumes that `parseSamples` has been called first.\n      *\n      * @param {Number} offset - The offset into the mdat\n      * @param {Object[]} samples - An array of samples, parsed using `parseSamples`\n      * @return {?Object} The matching sample, or null if no match was found.\n      *\n      * @see ISO-BMFF-12/2015, Section 8.8.8\n     **/\n    var mapToSample = function mapToSample(offset, samples) {\n      var approximateOffset = offset;\n\n      for (var i = 0; i < samples.length; i++) {\n        var sample = samples[i];\n\n        if (approximateOffset < sample.size) {\n          return sample;\n        }\n\n        approximateOffset -= sample.size;\n      }\n\n      return null;\n    };\n\n    /**\n      * Finds SEI nal units contained in a Media Data Box.\n      * Assumes that `parseSamples` has been called first.\n      *\n      * @param {Uint8Array} avcStream - The bytes of the mdat\n      * @param {Object[]} samples - The samples parsed out by `parseSamples`\n      * @param {Number} trackId - The trackId of this video track\n      * @return {Object[]} seiNals - the parsed SEI NALUs found.\n      *   The contents of the seiNal should match what is expected by\n      *   CaptionStream.push (nalUnitType, size, data, escapedRBSP, pts, dts)\n      *\n      * @see ISO-BMFF-12/2015, Section 8.1.1\n      * @see Rec. ITU-T H.264, 7.3.2.3.1\n     **/\n    var findSeiNals = function findSeiNals(avcStream, samples, trackId) {\n      var avcView = new DataView(avcStream.buffer, avcStream.byteOffset, avcStream.byteLength),\n          result = [],\n          seiNal,\n          i,\n          length,\n          lastMatchedSample;\n\n      for (i = 0; i + 4 < avcStream.length; i += length) {\n        length = avcView.getUint32(i);\n        i += 4;\n\n        // Bail if this doesn't appear to be an H264 stream\n        if (length <= 0) {\n          continue;\n        }\n\n        switch (avcStream[i] & 0x1F) {\n          case 0x06:\n            var data = avcStream.subarray(i + 1, i + 1 + length);\n            var matchingSample = mapToSample(i, samples);\n\n            seiNal = {\n              nalUnitType: 'sei_rbsp',\n              size: length,\n              data: data,\n              escapedRBSP: discardEmulationPreventionBytes$1(data),\n              trackId: trackId\n            };\n\n            if (matchingSample) {\n              seiNal.pts = matchingSample.pts;\n              seiNal.dts = matchingSample.dts;\n              lastMatchedSample = matchingSample;\n            } else {\n              // If a matching sample cannot be found, use the last\n              // sample's values as they should be as close as possible\n              seiNal.pts = lastMatchedSample.pts;\n              seiNal.dts = lastMatchedSample.dts;\n            }\n\n            result.push(seiNal);\n            break;\n          default:\n            break;\n        }\n      }\n\n      return result;\n    };\n\n    /**\n      * Parses sample information out of Track Run Boxes and calculates\n      * the absolute presentation and decode timestamps of each sample.\n      *\n      * @param {Array<Uint8Array>} truns - The Trun Run boxes to be parsed\n      * @param {Number} baseMediaDecodeTime - base media decode time from tfdt\n          @see ISO-BMFF-12/2015, Section 8.8.12\n      * @param {Object} tfhd - The parsed Track Fragment Header\n      *   @see inspect.parseTfhd\n      * @return {Object[]} the parsed samples\n      *\n      * @see ISO-BMFF-12/2015, Section 8.8.8\n     **/\n    var parseSamples = function parseSamples(truns, baseMediaDecodeTime, tfhd) {\n      var currentDts = baseMediaDecodeTime;\n      var defaultSampleDuration = tfhd.defaultSampleDuration || 0;\n      var defaultSampleSize = tfhd.defaultSampleSize || 0;\n      var trackId = tfhd.trackId;\n      var allSamples = [];\n\n      truns.forEach(function (trun) {\n        // Note: We currently do not parse the sample table as well\n        // as the trun. It's possible some sources will require this.\n        // moov > trak > mdia > minf > stbl\n        var trackRun = mp4Inspector.parseTrun(trun);\n        var samples = trackRun.samples;\n\n        samples.forEach(function (sample) {\n          if (sample.duration === undefined) {\n            sample.duration = defaultSampleDuration;\n          }\n          if (sample.size === undefined) {\n            sample.size = defaultSampleSize;\n          }\n          sample.trackId = trackId;\n          sample.dts = currentDts;\n          if (sample.compositionTimeOffset === undefined) {\n            sample.compositionTimeOffset = 0;\n          }\n          sample.pts = currentDts + sample.compositionTimeOffset;\n\n          currentDts += sample.duration;\n        });\n\n        allSamples = allSamples.concat(samples);\n      });\n\n      return allSamples;\n    };\n\n    /**\n      * Parses out caption nals from an FMP4 segment's video tracks.\n      *\n      * @param {Uint8Array} segment - The bytes of a single segment\n      * @param {Number} videoTrackId - The trackId of a video track in the segment\n      * @return {Object.<Number, Object[]>} A mapping of video trackId to\n      *   a list of seiNals found in that track\n     **/\n    var parseCaptionNals = function parseCaptionNals(segment, videoTrackId) {\n      // To get the samples\n      var trafs = probe.findBox(segment, ['moof', 'traf']);\n      // To get SEI NAL units\n      var mdats = probe.findBox(segment, ['mdat']);\n      var captionNals = {};\n      var mdatTrafPairs = [];\n\n      // Pair up each traf with a mdat as moofs and mdats are in pairs\n      mdats.forEach(function (mdat, index) {\n        var matchingTraf = trafs[index];\n        mdatTrafPairs.push({\n          mdat: mdat,\n          traf: matchingTraf\n        });\n      });\n\n      mdatTrafPairs.forEach(function (pair) {\n        var mdat = pair.mdat;\n        var traf = pair.traf;\n        var tfhd = probe.findBox(traf, ['tfhd']);\n        // Exactly 1 tfhd per traf\n        var headerInfo = mp4Inspector.parseTfhd(tfhd[0]);\n        var trackId = headerInfo.trackId;\n        var tfdt = probe.findBox(traf, ['tfdt']);\n        // Either 0 or 1 tfdt per traf\n        var baseMediaDecodeTime = tfdt.length > 0 ? mp4Inspector.parseTfdt(tfdt[0]).baseMediaDecodeTime : 0;\n        var truns = probe.findBox(traf, ['trun']);\n        var samples;\n        var seiNals;\n\n        // Only parse video data for the chosen video track\n        if (videoTrackId === trackId && truns.length > 0) {\n          samples = parseSamples(truns, baseMediaDecodeTime, headerInfo);\n\n          seiNals = findSeiNals(mdat, samples, trackId);\n\n          if (!captionNals[trackId]) {\n            captionNals[trackId] = [];\n          }\n\n          captionNals[trackId] = captionNals[trackId].concat(seiNals);\n        }\n      });\n\n      return captionNals;\n    };\n\n    /**\n      * Parses out inband captions from an MP4 container and returns\n      * caption objects that can be used by WebVTT and the TextTrack API.\n      * @see https://developer.mozilla.org/en-US/docs/Web/API/VTTCue\n      * @see https://developer.mozilla.org/en-US/docs/Web/API/TextTrack\n      * Assumes that `probe.getVideoTrackIds` and `probe.timescale` have been called first\n      *\n      * @param {Uint8Array} segment - The fmp4 segment containing embedded captions\n      * @param {Number} trackId - The id of the video track to parse\n      * @param {Number} timescale - The timescale for the video track from the init segment\n      *\n      * @return {?Object[]} parsedCaptions - A list of captions or null if no video tracks\n      * @return {Number} parsedCaptions[].startTime - The time to show the caption in seconds\n      * @return {Number} parsedCaptions[].endTime - The time to stop showing the caption in seconds\n      * @return {String} parsedCaptions[].text - The visible content of the caption\n     **/\n    var parseEmbeddedCaptions = function parseEmbeddedCaptions(segment, trackId, timescale) {\n      var seiNals;\n\n      if (!trackId) {\n        return null;\n      }\n\n      seiNals = parseCaptionNals(segment, trackId);\n\n      return {\n        seiNals: seiNals[trackId],\n        timescale: timescale\n      };\n    };\n\n    /**\n      * Converts SEI NALUs into captions that can be used by video.js\n     **/\n    var CaptionParser$$1 = function CaptionParser$$1() {\n      var isInitialized = false;\n      var captionStream$$1;\n\n      // Stores segments seen before trackId and timescale are set\n      var segmentCache;\n      // Stores video track ID of the track being parsed\n      var trackId;\n      // Stores the timescale of the track being parsed\n      var timescale;\n      // Stores captions parsed so far\n      var parsedCaptions;\n\n      /**\n        * A method to indicate whether a CaptionParser has been initalized\n        * @returns {Boolean}\n       **/\n      this.isInitialized = function () {\n        return isInitialized;\n      };\n\n      /**\n        * Initializes the underlying CaptionStream, SEI NAL parsing\n        * and management, and caption collection\n       **/\n      this.init = function () {\n        captionStream$$1 = new CaptionStream$1();\n        isInitialized = true;\n\n        // Collect dispatched captions\n        captionStream$$1.on('data', function (event) {\n          // Convert to seconds in the source's timescale\n          event.startTime = event.startPts / timescale;\n          event.endTime = event.endPts / timescale;\n\n          parsedCaptions.captions.push(event);\n          parsedCaptions.captionStreams[event.stream] = true;\n        });\n      };\n\n      /**\n        * Determines if a new video track will be selected\n        * or if the timescale changed\n        * @return {Boolean}\n       **/\n      this.isNewInit = function (videoTrackIds, timescales) {\n        if (videoTrackIds && videoTrackIds.length === 0 || timescales && (typeof timescales === 'undefined' ? 'undefined' : _typeof(timescales)) === 'object' && Object.keys(timescales).length === 0) {\n          return false;\n        }\n\n        return trackId !== videoTrackIds[0] || timescale !== timescales[trackId];\n      };\n\n      /**\n        * Parses out SEI captions and interacts with underlying\n        * CaptionStream to return dispatched captions\n        *\n        * @param {Uint8Array} segment - The fmp4 segment containing embedded captions\n        * @param {Number[]} videoTrackIds - A list of video tracks found in the init segment\n        * @param {Object.<Number, Number>} timescales - The timescales found in the init segment\n        * @see parseEmbeddedCaptions\n        * @see m2ts/caption-stream.js\n       **/\n      this.parse = function (segment, videoTrackIds, timescales) {\n        var parsedData;\n\n        if (!this.isInitialized()) {\n          return null;\n\n          // This is not likely to be a video segment\n        } else if (!videoTrackIds || !timescales) {\n          return null;\n        } else if (this.isNewInit(videoTrackIds, timescales)) {\n          // Use the first video track only as there is no\n          // mechanism to switch to other video tracks\n          trackId = videoTrackIds[0];\n          timescale = timescales[trackId];\n\n          // If an init segment has not been seen yet, hold onto segment\n          // data until we have one\n        } else if (!trackId || !timescale) {\n          segmentCache.push(segment);\n          return null;\n        }\n\n        // Now that a timescale and trackId is set, parse cached segments\n        while (segmentCache.length > 0) {\n          var cachedSegment = segmentCache.shift();\n\n          this.parse(cachedSegment, videoTrackIds, timescales);\n        }\n\n        parsedData = parseEmbeddedCaptions(segment, trackId, timescale);\n\n        if (parsedData === null || !parsedData.seiNals) {\n          return null;\n        }\n\n        this.pushNals(parsedData.seiNals);\n        // Force the parsed captions to be dispatched\n        this.flushStream();\n\n        return parsedCaptions;\n      };\n\n      /**\n        * Pushes SEI NALUs onto CaptionStream\n        * @param {Object[]} nals - A list of SEI nals parsed using `parseCaptionNals`\n        * Assumes that `parseCaptionNals` has been called first\n        * @see m2ts/caption-stream.js\n        **/\n      this.pushNals = function (nals) {\n        if (!this.isInitialized() || !nals || nals.length === 0) {\n          return null;\n        }\n\n        nals.forEach(function (nal) {\n          captionStream$$1.push(nal);\n        });\n      };\n\n      /**\n        * Flushes underlying CaptionStream to dispatch processed, displayable captions\n        * @see m2ts/caption-stream.js\n       **/\n      this.flushStream = function () {\n        if (!this.isInitialized()) {\n          return null;\n        }\n\n        captionStream$$1.flush();\n      };\n\n      /**\n        * Reset caption buckets for new data\n       **/\n      this.clearParsedCaptions = function () {\n        parsedCaptions.captions = [];\n        parsedCaptions.captionStreams = {};\n      };\n\n      /**\n        * Resets underlying CaptionStream\n        * @see m2ts/caption-stream.js\n       **/\n      this.resetCaptionStream = function () {\n        if (!this.isInitialized()) {\n          return null;\n        }\n\n        captionStream$$1.reset();\n      };\n\n      /**\n        * Convenience method to clear all captions flushed from the\n        * CaptionStream and still being parsed\n        * @see m2ts/caption-stream.js\n       **/\n      this.clearAllCaptions = function () {\n        this.clearParsedCaptions();\n        this.resetCaptionStream();\n      };\n\n      /**\n        * Reset caption parser\n       **/\n      this.reset = function () {\n        segmentCache = [];\n        trackId = null;\n        timescale = null;\n\n        if (!parsedCaptions) {\n          parsedCaptions = {\n            captions: [],\n            // CC1, CC2, CC3, CC4\n            captionStreams: {}\n          };\n        } else {\n          this.clearParsedCaptions();\n        }\n\n        this.resetCaptionStream();\n      };\n\n      this.reset();\n    };\n\n    var captionParser = CaptionParser$$1;\n\n    var mp4 = {\n      generator: mp4Generator,\n      probe: probe,\n      Transmuxer: transmuxer.Transmuxer,\n      AudioSegmentStream: transmuxer.AudioSegmentStream,\n      VideoSegmentStream: transmuxer.VideoSegmentStream,\n      CaptionParser: captionParser\n    };\n\n    var classCallCheck$$1 = function classCallCheck$$1(instance, Constructor) {\n      if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n      }\n    };\n\n    var createClass$$1 = function () {\n      function defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n          var descriptor = props[i];\n          descriptor.enumerable = descriptor.enumerable || false;\n          descriptor.configurable = true;\n          if (\"value\" in descriptor) descriptor.writable = true;\n          Object.defineProperty(target, descriptor.key, descriptor);\n        }\n      }\n\n      return function (Constructor, protoProps, staticProps) {\n        if (protoProps) defineProperties(Constructor.prototype, protoProps);\n        if (staticProps) defineProperties(Constructor, staticProps);\n        return Constructor;\n      };\n    }();\n\n    /**\n     * @file transmuxer-worker.js\n     */\n\n    /**\n     * Re-emits transmuxer events by converting them into messages to the\n     * world outside the worker.\n     *\n     * @param {Object} transmuxer the transmuxer to wire events on\n     * @private\n     */\n    var wireTransmuxerEvents = function wireTransmuxerEvents(self, transmuxer) {\n      transmuxer.on('data', function (segment) {\n        // transfer ownership of the underlying ArrayBuffer\n        // instead of doing a copy to save memory\n        // ArrayBuffers are transferable but generic TypedArrays are not\n        // @link https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers#Passing_data_by_transferring_ownership_(transferable_objects)\n        var initArray = segment.initSegment;\n\n        segment.initSegment = {\n          data: initArray.buffer,\n          byteOffset: initArray.byteOffset,\n          byteLength: initArray.byteLength\n        };\n\n        var typedArray = segment.data;\n\n        segment.data = typedArray.buffer;\n        self.postMessage({\n          action: 'data',\n          segment: segment,\n          byteOffset: typedArray.byteOffset,\n          byteLength: typedArray.byteLength\n        }, [segment.data]);\n      });\n\n      if (transmuxer.captionStream) {\n        transmuxer.captionStream.on('data', function (caption) {\n          self.postMessage({\n            action: 'caption',\n            data: caption\n          });\n        });\n      }\n\n      transmuxer.on('done', function (data) {\n        self.postMessage({ action: 'done' });\n      });\n\n      transmuxer.on('gopInfo', function (gopInfo) {\n        self.postMessage({\n          action: 'gopInfo',\n          gopInfo: gopInfo\n        });\n      });\n    };\n\n    /**\n     * All incoming messages route through this hash. If no function exists\n     * to handle an incoming message, then we ignore the message.\n     *\n     * @class MessageHandlers\n     * @param {Object} options the options to initialize with\n     */\n\n    var MessageHandlers = function () {\n      function MessageHandlers(self, options) {\n        classCallCheck$$1(this, MessageHandlers);\n\n        this.options = options || {};\n        this.self = self;\n        this.init();\n      }\n\n      /**\n       * initialize our web worker and wire all the events.\n       */\n\n      createClass$$1(MessageHandlers, [{\n        key: 'init',\n        value: function init() {\n          if (this.transmuxer) {\n            this.transmuxer.dispose();\n          }\n          this.transmuxer = new mp4.Transmuxer(this.options);\n          wireTransmuxerEvents(this.self, this.transmuxer);\n        }\n\n        /**\n         * Adds data (a ts segment) to the start of the transmuxer pipeline for\n         * processing.\n         *\n         * @param {ArrayBuffer} data data to push into the muxer\n         */\n\n      }, {\n        key: 'push',\n        value: function push(data) {\n          // Cast array buffer to correct type for transmuxer\n          var segment = new Uint8Array(data.data, data.byteOffset, data.byteLength);\n\n          this.transmuxer.push(segment);\n        }\n\n        /**\n         * Recreate the transmuxer so that the next segment added via `push`\n         * start with a fresh transmuxer.\n         */\n\n      }, {\n        key: 'reset',\n        value: function reset() {\n          this.init();\n        }\n\n        /**\n         * Set the value that will be used as the `baseMediaDecodeTime` time for the\n         * next segment pushed in. Subsequent segments will have their `baseMediaDecodeTime`\n         * set relative to the first based on the PTS values.\n         *\n         * @param {Object} data used to set the timestamp offset in the muxer\n         */\n\n      }, {\n        key: 'setTimestampOffset',\n        value: function setTimestampOffset(data) {\n          var timestampOffset = data.timestampOffset || 0;\n\n          this.transmuxer.setBaseMediaDecodeTime(Math.round(timestampOffset * 90000));\n        }\n      }, {\n        key: 'setAudioAppendStart',\n        value: function setAudioAppendStart(data) {\n          this.transmuxer.setAudioAppendStart(Math.ceil(data.appendStart * 90000));\n        }\n\n        /**\n         * Forces the pipeline to finish processing the last segment and emit it's\n         * results.\n         *\n         * @param {Object} data event data, not really used\n         */\n\n      }, {\n        key: 'flush',\n        value: function flush(data) {\n          this.transmuxer.flush();\n        }\n      }, {\n        key: 'resetCaptions',\n        value: function resetCaptions() {\n          this.transmuxer.resetCaptions();\n        }\n      }, {\n        key: 'alignGopsWith',\n        value: function alignGopsWith(data) {\n          this.transmuxer.alignGopsWith(data.gopsToAlignWith.slice());\n        }\n      }]);\n      return MessageHandlers;\n    }();\n\n    /**\n     * Our web wroker interface so that things can talk to mux.js\n     * that will be running in a web worker. the scope is passed to this by\n     * webworkify.\n     *\n     * @param {Object} self the scope for the web worker\n     */\n\n    var TransmuxerWorker = function TransmuxerWorker(self) {\n      self.onmessage = function (event) {\n        if (event.data.action === 'init' && event.data.options) {\n          this.messageHandlers = new MessageHandlers(self, event.data.options);\n          return;\n        }\n\n        if (!this.messageHandlers) {\n          this.messageHandlers = new MessageHandlers(self);\n        }\n\n        if (event.data && event.data.action && event.data.action !== 'init') {\n          if (this.messageHandlers[event.data.action]) {\n            this.messageHandlers[event.data.action](event.data);\n          }\n        }\n      };\n    };\n\n    var transmuxerWorker = new TransmuxerWorker(self);\n\n    return transmuxerWorker;\n  }();\n});\n\n/**\n * @file - codecs.js - Handles tasks regarding codec strings such as translating them to\n * codec strings, or translating codec strings into objects that can be examined.\n */\n\n// Default codec parameters if none were provided for video and/or audio\nvar defaultCodecs = {\n  videoCodec: 'avc1',\n  videoObjectTypeIndicator: '.4d400d',\n  // AAC-LC\n  audioProfile: '2'\n};\n\n/**\n * Replace the old apple-style `avc1.<dd>.<dd>` codec string with the standard\n * `avc1.<hhhhhh>`\n *\n * @param {Array} codecs an array of codec strings to fix\n * @return {Array} the translated codec array\n * @private\n */\nvar translateLegacyCodecs = function translateLegacyCodecs(codecs) {\n  return codecs.map(function (codec) {\n    return codec.replace(/avc1\\.(\\d+)\\.(\\d+)/i, function (orig, profile, avcLevel) {\n      var profileHex = ('00' + Number(profile).toString(16)).slice(-2);\n      var avcLevelHex = ('00' + Number(avcLevel).toString(16)).slice(-2);\n\n      return 'avc1.' + profileHex + '00' + avcLevelHex;\n    });\n  });\n};\n\n/**\n * Parses a codec string to retrieve the number of codecs specified,\n * the video codec and object type indicator, and the audio profile.\n */\n\nvar parseCodecs = function parseCodecs() {\n  var codecs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n  var result = {\n    codecCount: 0\n  };\n  var parsed = void 0;\n\n  result.codecCount = codecs.split(',').length;\n  result.codecCount = result.codecCount || 2;\n\n  // parse the video codec\n  parsed = /(^|\\s|,)+(avc[13])([^ ,]*)/i.exec(codecs);\n  if (parsed) {\n    result.videoCodec = parsed[2];\n    result.videoObjectTypeIndicator = parsed[3];\n  }\n\n  // parse the last field of the audio codec\n  result.audioProfile = /(^|\\s|,)+mp4a.[0-9A-Fa-f]+\\.([0-9A-Fa-f]+)/i.exec(codecs);\n  result.audioProfile = result.audioProfile && result.audioProfile[2];\n\n  return result;\n};\n\n/**\n * Replace codecs in the codec string with the old apple-style `avc1.<dd>.<dd>` to the\n * standard `avc1.<hhhhhh>`.\n *\n * @param codecString {String} the codec string\n * @return {String} the codec string with old apple-style codecs replaced\n *\n * @private\n */\nvar mapLegacyAvcCodecs = function mapLegacyAvcCodecs(codecString) {\n  return codecString.replace(/avc1\\.(\\d+)\\.(\\d+)/i, function (match) {\n    return translateLegacyCodecs([match])[0];\n  });\n};\n\n/**\n * Build a media mime-type string from a set of parameters\n * @param {String} type either 'audio' or 'video'\n * @param {String} container either 'mp2t' or 'mp4'\n * @param {Array} codecs an array of codec strings to add\n * @return {String} a valid media mime-type\n */\nvar makeMimeTypeString = function makeMimeTypeString(type, container, codecs) {\n  // The codecs array is filtered so that falsey values are\n  // dropped and don't cause Array#join to create spurious\n  // commas\n  return type + '/' + container + '; codecs=\"' + codecs.filter(function (c) {\n    return !!c;\n  }).join(', ') + '\"';\n};\n\n/**\n * Returns the type container based on information in the playlist\n * @param {Playlist} media the current media playlist\n * @return {String} a valid media container type\n */\nvar getContainerType = function getContainerType(media) {\n  // An initialization segment means the media playlist is an iframe\n  // playlist or is using the mp4 container. We don't currently\n  // support iframe playlists, so assume this is signalling mp4\n  // fragments.\n  if (media.segments && media.segments.length && media.segments[0].map) {\n    return 'mp4';\n  }\n  return 'mp2t';\n};\n\n/**\n * Returns a set of codec strings parsed from the playlist or the default\n * codec strings if no codecs were specified in the playlist\n * @param {Playlist} media the current media playlist\n * @return {Object} an object with the video and audio codecs\n */\nvar getCodecs = function getCodecs(media) {\n  // if the codecs were explicitly specified, use them instead of the\n  // defaults\n  var mediaAttributes = media.attributes || {};\n\n  if (mediaAttributes.CODECS) {\n    return parseCodecs(mediaAttributes.CODECS);\n  }\n  return defaultCodecs;\n};\n\nvar audioProfileFromDefault = function audioProfileFromDefault(master, audioGroupId) {\n  if (!master.mediaGroups.AUDIO || !audioGroupId) {\n    return null;\n  }\n\n  var audioGroup = master.mediaGroups.AUDIO[audioGroupId];\n\n  if (!audioGroup) {\n    return null;\n  }\n\n  for (var name in audioGroup) {\n    var audioType = audioGroup[name];\n\n    if (audioType.default && audioType.playlists) {\n      // codec should be the same for all playlists within the audio type\n      return parseCodecs(audioType.playlists[0].attributes.CODECS).audioProfile;\n    }\n  }\n\n  return null;\n};\n\n/**\n * Calculates the MIME type strings for a working configuration of\n * SourceBuffers to play variant streams in a master playlist. If\n * there is no possible working configuration, an empty array will be\n * returned.\n *\n * @param master {Object} the m3u8 object for the master playlist\n * @param media {Object} the m3u8 object for the variant playlist\n * @return {Array} the MIME type strings. If the array has more than\n * one entry, the first element should be applied to the video\n * SourceBuffer and the second to the audio SourceBuffer.\n *\n * @private\n */\nvar mimeTypesForPlaylist = function mimeTypesForPlaylist(master, media) {\n  var containerType = getContainerType(media);\n  var codecInfo = getCodecs(media);\n  var mediaAttributes = media.attributes || {};\n  // Default condition for a traditional HLS (no demuxed audio/video)\n  var isMuxed = true;\n  var isMaat = false;\n\n  if (!media) {\n    // Not enough information\n    return [];\n  }\n\n  if (master.mediaGroups.AUDIO && mediaAttributes.AUDIO) {\n    var audioGroup = master.mediaGroups.AUDIO[mediaAttributes.AUDIO];\n\n    // Handle the case where we are in a multiple-audio track scenario\n    if (audioGroup) {\n      isMaat = true;\n      // Start with the everything demuxed then...\n      isMuxed = false;\n      // ...check to see if any audio group tracks are muxed (ie. lacking a uri)\n      for (var groupId in audioGroup) {\n        // either a uri is present (if the case of HLS and an external playlist), or\n        // playlists is present (in the case of DASH where we don't have external audio\n        // playlists)\n        if (!audioGroup[groupId].uri && !audioGroup[groupId].playlists) {\n          isMuxed = true;\n          break;\n        }\n      }\n    }\n  }\n\n  // HLS with multiple-audio tracks must always get an audio codec.\n  // Put another way, there is no way to have a video-only multiple-audio HLS!\n  if (isMaat && !codecInfo.audioProfile) {\n    if (!isMuxed) {\n      // It is possible for codecs to be specified on the audio media group playlist but\n      // not on the rendition playlist. This is mostly the case for DASH, where audio and\n      // video are always separate (and separately specified).\n      codecInfo.audioProfile = audioProfileFromDefault(master, mediaAttributes.AUDIO);\n    }\n\n    if (!codecInfo.audioProfile) {\n      videojs$1.log.warn('Multiple audio tracks present but no audio codec string is specified. ' + 'Attempting to use the default audio codec (mp4a.40.2)');\n      codecInfo.audioProfile = defaultCodecs.audioProfile;\n    }\n  }\n\n  // Generate the final codec strings from the codec object generated above\n  var codecStrings = {};\n\n  if (codecInfo.videoCodec) {\n    codecStrings.video = '' + codecInfo.videoCodec + codecInfo.videoObjectTypeIndicator;\n  }\n\n  if (codecInfo.audioProfile) {\n    codecStrings.audio = 'mp4a.40.' + codecInfo.audioProfile;\n  }\n\n  // Finally, make and return an array with proper mime-types depending on\n  // the configuration\n  var justAudio = makeMimeTypeString('audio', containerType, [codecStrings.audio]);\n  var justVideo = makeMimeTypeString('video', containerType, [codecStrings.video]);\n  var bothVideoAudio = makeMimeTypeString('video', containerType, [codecStrings.video, codecStrings.audio]);\n\n  if (isMaat) {\n    if (!isMuxed && codecStrings.video) {\n      return [justVideo, justAudio];\n    }\n\n    if (!isMuxed && !codecStrings.video) {\n      // There is no muxed content and no video codec string, so this is an audio only\n      // stream with alternate audio.\n      return [justAudio, justAudio];\n    }\n\n    // There exists the possiblity that this will return a `video/container`\n    // mime-type for the first entry in the array even when there is only audio.\n    // This doesn't appear to be a problem and simplifies the code.\n    return [bothVideoAudio, justAudio];\n  }\n\n  // If there is no video codec at all, always just return a single\n  // audio/<container> mime-type\n  if (!codecStrings.video) {\n    return [justAudio];\n  }\n\n  // When not using separate audio media groups, audio and video is\n  // *always* muxed\n  return [bothVideoAudio];\n};\n\n/**\n * Parse a content type header into a type and parameters\n * object\n *\n * @param {String} type the content type header\n * @return {Object} the parsed content-type\n * @private\n */\nvar parseContentType = function parseContentType(type) {\n  var object = { type: '', parameters: {} };\n  var parameters = type.trim().split(';');\n\n  // first parameter should always be content-type\n  object.type = parameters.shift().trim();\n  parameters.forEach(function (parameter) {\n    var pair = parameter.trim().split('=');\n\n    if (pair.length > 1) {\n      var name = pair[0].replace(/\"/g, '').trim();\n      var value = pair[1].replace(/\"/g, '').trim();\n\n      object.parameters[name] = value;\n    }\n  });\n\n  return object;\n};\n\n/**\n * Check if a codec string refers to an audio codec.\n *\n * @param {String} codec codec string to check\n * @return {Boolean} if this is an audio codec\n * @private\n */\nvar isAudioCodec = function isAudioCodec(codec) {\n  return (/mp4a\\.\\d+.\\d+/i.test(codec)\n  );\n};\n\n/**\n * Check if a codec string refers to a video codec.\n *\n * @param {String} codec codec string to check\n * @return {Boolean} if this is a video codec\n * @private\n */\nvar isVideoCodec = function isVideoCodec(codec) {\n  return (/avc1\\.[\\da-f]+/i.test(codec)\n  );\n};\n\n/**\n * Returns a list of gops in the buffer that have a pts value of 3 seconds or more in\n * front of current time.\n *\n * @param {Array} buffer\n *        The current buffer of gop information\n * @param {Number} currentTime\n *        The current time\n * @param {Double} mapping\n *        Offset to map display time to stream presentation time\n * @return {Array}\n *         List of gops considered safe to append over\n */\nvar gopsSafeToAlignWith = function gopsSafeToAlignWith(buffer, currentTime, mapping) {\n  if (typeof currentTime === 'undefined' || currentTime === null || !buffer.length) {\n    return [];\n  }\n\n  // pts value for current time + 3 seconds to give a bit more wiggle room\n  var currentTimePts = Math.ceil((currentTime - mapping + 3) * 90000);\n\n  var i = void 0;\n\n  for (i = 0; i < buffer.length; i++) {\n    if (buffer[i].pts > currentTimePts) {\n      break;\n    }\n  }\n\n  return buffer.slice(i);\n};\n\n/**\n * Appends gop information (timing and byteLength) received by the transmuxer for the\n * gops appended in the last call to appendBuffer\n *\n * @param {Array} buffer\n *        The current buffer of gop information\n * @param {Array} gops\n *        List of new gop information\n * @param {boolean} replace\n *        If true, replace the buffer with the new gop information. If false, append the\n *        new gop information to the buffer in the right location of time.\n * @return {Array}\n *         Updated list of gop information\n */\nvar updateGopBuffer = function updateGopBuffer(buffer, gops, replace) {\n  if (!gops.length) {\n    return buffer;\n  }\n\n  if (replace) {\n    // If we are in safe append mode, then completely overwrite the gop buffer\n    // with the most recent appeneded data. This will make sure that when appending\n    // future segments, we only try to align with gops that are both ahead of current\n    // time and in the last segment appended.\n    return gops.slice();\n  }\n\n  var start = gops[0].pts;\n\n  var i = 0;\n\n  for (i; i < buffer.length; i++) {\n    if (buffer[i].pts >= start) {\n      break;\n    }\n  }\n\n  return buffer.slice(0, i).concat(gops);\n};\n\n/**\n * Removes gop information in buffer that overlaps with provided start and end\n *\n * @param {Array} buffer\n *        The current buffer of gop information\n * @param {Double} start\n *        position to start the remove at\n * @param {Double} end\n *        position to end the remove at\n * @param {Double} mapping\n *        Offset to map display time to stream presentation time\n */\nvar removeGopBuffer = function removeGopBuffer(buffer, start, end, mapping) {\n  var startPts = Math.ceil((start - mapping) * 90000);\n  var endPts = Math.ceil((end - mapping) * 90000);\n  var updatedBuffer = buffer.slice();\n\n  var i = buffer.length;\n\n  while (i--) {\n    if (buffer[i].pts <= endPts) {\n      break;\n    }\n  }\n\n  if (i === -1) {\n    // no removal because end of remove range is before start of buffer\n    return updatedBuffer;\n  }\n\n  var j = i + 1;\n\n  while (j--) {\n    if (buffer[j].pts <= startPts) {\n      break;\n    }\n  }\n\n  // clamp remove range start to 0 index\n  j = Math.max(j, 0);\n\n  updatedBuffer.splice(j, i - j + 1);\n\n  return updatedBuffer;\n};\n\nvar buffered = function buffered(videoBuffer, audioBuffer, audioDisabled) {\n  var start = null;\n  var end = null;\n  var arity = 0;\n  var extents = [];\n  var ranges = [];\n\n  // neither buffer has been created yet\n  if (!videoBuffer && !audioBuffer) {\n    return videojs$1.createTimeRange();\n  }\n\n  // only one buffer is configured\n  if (!videoBuffer) {\n    return audioBuffer.buffered;\n  }\n  if (!audioBuffer) {\n    return videoBuffer.buffered;\n  }\n\n  // both buffers are configured\n  if (audioDisabled) {\n    return videoBuffer.buffered;\n  }\n\n  // both buffers are empty\n  if (videoBuffer.buffered.length === 0 && audioBuffer.buffered.length === 0) {\n    return videojs$1.createTimeRange();\n  }\n\n  // Handle the case where we have both buffers and create an\n  // intersection of the two\n  var videoBuffered = videoBuffer.buffered;\n  var audioBuffered = audioBuffer.buffered;\n  var count = videoBuffered.length;\n\n  // A) Gather up all start and end times\n  while (count--) {\n    extents.push({ time: videoBuffered.start(count), type: 'start' });\n    extents.push({ time: videoBuffered.end(count), type: 'end' });\n  }\n  count = audioBuffered.length;\n  while (count--) {\n    extents.push({ time: audioBuffered.start(count), type: 'start' });\n    extents.push({ time: audioBuffered.end(count), type: 'end' });\n  }\n  // B) Sort them by time\n  extents.sort(function (a, b) {\n    return a.time - b.time;\n  });\n\n  // C) Go along one by one incrementing arity for start and decrementing\n  //    arity for ends\n  for (count = 0; count < extents.length; count++) {\n    if (extents[count].type === 'start') {\n      arity++;\n\n      // D) If arity is ever incremented to 2 we are entering an\n      //    overlapping range\n      if (arity === 2) {\n        start = extents[count].time;\n      }\n    } else if (extents[count].type === 'end') {\n      arity--;\n\n      // E) If arity is ever decremented to 1 we leaving an\n      //    overlapping range\n      if (arity === 1) {\n        end = extents[count].time;\n      }\n    }\n\n    // F) Record overlapping ranges\n    if (start !== null && end !== null) {\n      ranges.push([start, end]);\n      start = null;\n      end = null;\n    }\n  }\n\n  return videojs$1.createTimeRanges(ranges);\n};\n\n/**\n * @file virtual-source-buffer.js\n */\n\n// We create a wrapper around the SourceBuffer so that we can manage the\n// state of the `updating` property manually. We have to do this because\n// Firefox changes `updating` to false long before triggering `updateend`\n// events and that was causing strange problems in videojs-contrib-hls\nvar makeWrappedSourceBuffer = function makeWrappedSourceBuffer(mediaSource, mimeType) {\n  var sourceBuffer = mediaSource.addSourceBuffer(mimeType);\n  var wrapper = Object.create(null);\n\n  wrapper.updating = false;\n  wrapper.realBuffer_ = sourceBuffer;\n\n  var _loop = function _loop(key) {\n    if (typeof sourceBuffer[key] === 'function') {\n      wrapper[key] = function () {\n        return sourceBuffer[key].apply(sourceBuffer, arguments);\n      };\n    } else if (typeof wrapper[key] === 'undefined') {\n      Object.defineProperty(wrapper, key, {\n        get: function get$$1() {\n          return sourceBuffer[key];\n        },\n        set: function set$$1(v) {\n          return sourceBuffer[key] = v;\n        }\n      });\n    }\n  };\n\n  for (var key in sourceBuffer) {\n    _loop(key);\n  }\n\n  return wrapper;\n};\n\n/**\n * VirtualSourceBuffers exist so that we can transmux non native formats\n * into a native format, but keep the same api as a native source buffer.\n * It creates a transmuxer, that works in its own thread (a web worker) and\n * that transmuxer muxes the data into a native format. VirtualSourceBuffer will\n * then send all of that data to the naive sourcebuffer so that it is\n * indestinguishable from a natively supported format.\n *\n * @param {HtmlMediaSource} mediaSource the parent mediaSource\n * @param {Array} codecs array of codecs that we will be dealing with\n * @class VirtualSourceBuffer\n * @extends video.js.EventTarget\n */\n\nvar VirtualSourceBuffer = function (_videojs$EventTarget) {\n  inherits$1(VirtualSourceBuffer, _videojs$EventTarget);\n\n  function VirtualSourceBuffer(mediaSource, codecs) {\n    classCallCheck$1(this, VirtualSourceBuffer);\n\n    var _this = possibleConstructorReturn$1(this, (VirtualSourceBuffer.__proto__ || Object.getPrototypeOf(VirtualSourceBuffer)).call(this, videojs$1.EventTarget));\n\n    _this.timestampOffset_ = 0;\n    _this.pendingBuffers_ = [];\n    _this.bufferUpdating_ = false;\n\n    _this.mediaSource_ = mediaSource;\n    _this.codecs_ = codecs;\n    _this.audioCodec_ = null;\n    _this.videoCodec_ = null;\n    _this.audioDisabled_ = false;\n    _this.appendAudioInitSegment_ = true;\n    _this.gopBuffer_ = [];\n    _this.timeMapping_ = 0;\n    _this.safeAppend_ = videojs$1.browser.IE_VERSION >= 11;\n\n    var options = {\n      remux: false,\n      alignGopsAtEnd: _this.safeAppend_\n    };\n\n    _this.codecs_.forEach(function (codec) {\n      if (isAudioCodec(codec)) {\n        _this.audioCodec_ = codec;\n      } else if (isVideoCodec(codec)) {\n        _this.videoCodec_ = codec;\n      }\n    });\n\n    // append muxed segments to their respective native buffers as\n    // soon as they are available\n    _this.transmuxer_ = new TransmuxWorker();\n    _this.transmuxer_.postMessage({ action: 'init', options: options });\n\n    _this.transmuxer_.onmessage = function (event) {\n      if (event.data.action === 'data') {\n        return _this.data_(event);\n      }\n\n      if (event.data.action === 'done') {\n        return _this.done_(event);\n      }\n\n      if (event.data.action === 'gopInfo') {\n        return _this.appendGopInfo_(event);\n      }\n    };\n\n    // this timestampOffset is a property with the side-effect of resetting\n    // baseMediaDecodeTime in the transmuxer on the setter\n    Object.defineProperty(_this, 'timestampOffset', {\n      get: function get$$1() {\n        return this.timestampOffset_;\n      },\n      set: function set$$1(val) {\n        if (typeof val === 'number' && val >= 0) {\n          this.timestampOffset_ = val;\n          this.appendAudioInitSegment_ = true;\n\n          // reset gop buffer on timestampoffset as this signals a change in timeline\n          this.gopBuffer_.length = 0;\n          this.timeMapping_ = 0;\n\n          // We have to tell the transmuxer to set the baseMediaDecodeTime to\n          // the desired timestampOffset for the next segment\n          this.transmuxer_.postMessage({\n            action: 'setTimestampOffset',\n            timestampOffset: val\n          });\n        }\n      }\n    });\n\n    // setting the append window affects both source buffers\n    Object.defineProperty(_this, 'appendWindowStart', {\n      get: function get$$1() {\n        return (this.videoBuffer_ || this.audioBuffer_).appendWindowStart;\n      },\n      set: function set$$1(start) {\n        if (this.videoBuffer_) {\n          this.videoBuffer_.appendWindowStart = start;\n        }\n        if (this.audioBuffer_) {\n          this.audioBuffer_.appendWindowStart = start;\n        }\n      }\n    });\n\n    // this buffer is \"updating\" if either of its native buffers are\n    Object.defineProperty(_this, 'updating', {\n      get: function get$$1() {\n        return !!(this.bufferUpdating_ || !this.audioDisabled_ && this.audioBuffer_ && this.audioBuffer_.updating || this.videoBuffer_ && this.videoBuffer_.updating);\n      }\n    });\n\n    // the buffered property is the intersection of the buffered\n    // ranges of the native source buffers\n    Object.defineProperty(_this, 'buffered', {\n      get: function get$$1() {\n        return buffered(this.videoBuffer_, this.audioBuffer_, this.audioDisabled_);\n      }\n    });\n    return _this;\n  }\n\n  /**\n   * When we get a data event from the transmuxer\n   * we call this function and handle the data that\n   * was sent to us\n   *\n   * @private\n   * @param {Event} event the data event from the transmuxer\n   */\n\n  createClass$1(VirtualSourceBuffer, [{\n    key: 'data_',\n    value: function data_(event) {\n      var segment = event.data.segment;\n\n      // Cast ArrayBuffer to TypedArray\n      segment.data = new Uint8Array(segment.data, event.data.byteOffset, event.data.byteLength);\n\n      segment.initSegment = new Uint8Array(segment.initSegment.data, segment.initSegment.byteOffset, segment.initSegment.byteLength);\n\n      createTextTracksIfNecessary(this, this.mediaSource_, segment);\n\n      // Add the segments to the pendingBuffers array\n      this.pendingBuffers_.push(segment);\n      return;\n    }\n\n    /**\n     * When we get a done event from the transmuxer\n     * we call this function and we process all\n     * of the pending data that we have been saving in the\n     * data_ function\n     *\n     * @private\n     * @param {Event} event the done event from the transmuxer\n     */\n\n  }, {\n    key: 'done_',\n    value: function done_(event) {\n      // Don't process and append data if the mediaSource is closed\n      if (this.mediaSource_.readyState === 'closed') {\n        this.pendingBuffers_.length = 0;\n        return;\n      }\n\n      // All buffers should have been flushed from the muxer\n      // start processing anything we have received\n      this.processPendingSegments_();\n      return;\n    }\n\n    /**\n     * Create our internal native audio/video source buffers and add\n     * event handlers to them with the following conditions:\n     * 1. they do not already exist on the mediaSource\n     * 2. this VSB has a codec for them\n     *\n     * @private\n     */\n\n  }, {\n    key: 'createRealSourceBuffers_',\n    value: function createRealSourceBuffers_() {\n      var _this2 = this;\n\n      var types = ['audio', 'video'];\n\n      types.forEach(function (type) {\n        // Don't create a SourceBuffer of this type if we don't have a\n        // codec for it\n        if (!_this2[type + 'Codec_']) {\n          return;\n        }\n\n        // Do nothing if a SourceBuffer of this type already exists\n        if (_this2[type + 'Buffer_']) {\n          return;\n        }\n\n        var buffer = null;\n\n        // If the mediasource already has a SourceBuffer for the codec\n        // use that\n        if (_this2.mediaSource_[type + 'Buffer_']) {\n          buffer = _this2.mediaSource_[type + 'Buffer_'];\n          // In multiple audio track cases, the audio source buffer is disabled\n          // on the main VirtualSourceBuffer by the HTMLMediaSource much earlier\n          // than createRealSourceBuffers_ is called to create the second\n          // VirtualSourceBuffer because that happens as a side-effect of\n          // videojs-contrib-hls starting the audioSegmentLoader. As a result,\n          // the audioBuffer is essentially \"ownerless\" and no one will toggle\n          // the `updating` state back to false once the `updateend` event is received\n          //\n          // Setting `updating` to false manually will work around this\n          // situation and allow work to continue\n          buffer.updating = false;\n        } else {\n          var codecProperty = type + 'Codec_';\n          var mimeType = type + '/mp4;codecs=\"' + _this2[codecProperty] + '\"';\n\n          buffer = makeWrappedSourceBuffer(_this2.mediaSource_.nativeMediaSource_, mimeType);\n\n          _this2.mediaSource_[type + 'Buffer_'] = buffer;\n        }\n\n        _this2[type + 'Buffer_'] = buffer;\n\n        // Wire up the events to the SourceBuffer\n        ['update', 'updatestart', 'updateend'].forEach(function (event) {\n          buffer.addEventListener(event, function () {\n            // if audio is disabled\n            if (type === 'audio' && _this2.audioDisabled_) {\n              return;\n            }\n\n            if (event === 'updateend') {\n              _this2[type + 'Buffer_'].updating = false;\n            }\n\n            var shouldTrigger = types.every(function (t) {\n              // skip checking audio's updating status if audio\n              // is not enabled\n              if (t === 'audio' && _this2.audioDisabled_) {\n                return true;\n              }\n              // if the other type if updating we don't trigger\n              if (type !== t && _this2[t + 'Buffer_'] && _this2[t + 'Buffer_'].updating) {\n                return false;\n              }\n              return true;\n            });\n\n            if (shouldTrigger) {\n              return _this2.trigger(event);\n            }\n          });\n        });\n      });\n    }\n\n    /**\n     * Emulate the native mediasource function, but our function will\n     * send all of the proposed segments to the transmuxer so that we\n     * can transmux them before we append them to our internal\n     * native source buffers in the correct format.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/appendBuffer\n     * @param {Uint8Array} segment the segment to append to the buffer\n     */\n\n  }, {\n    key: 'appendBuffer',\n    value: function appendBuffer(segment) {\n      // Start the internal \"updating\" state\n      this.bufferUpdating_ = true;\n\n      if (this.audioBuffer_ && this.audioBuffer_.buffered.length) {\n        var audioBuffered = this.audioBuffer_.buffered;\n\n        this.transmuxer_.postMessage({\n          action: 'setAudioAppendStart',\n          appendStart: audioBuffered.end(audioBuffered.length - 1)\n        });\n      }\n\n      if (this.videoBuffer_) {\n        this.transmuxer_.postMessage({\n          action: 'alignGopsWith',\n          gopsToAlignWith: gopsSafeToAlignWith(this.gopBuffer_, this.mediaSource_.player_ ? this.mediaSource_.player_.currentTime() : null, this.timeMapping_)\n        });\n      }\n\n      this.transmuxer_.postMessage({\n        action: 'push',\n        // Send the typed-array of data as an ArrayBuffer so that\n        // it can be sent as a \"Transferable\" and avoid the costly\n        // memory copy\n        data: segment.buffer,\n\n        // To recreate the original typed-array, we need information\n        // about what portion of the ArrayBuffer it was a view into\n        byteOffset: segment.byteOffset,\n        byteLength: segment.byteLength\n      }, [segment.buffer]);\n      this.transmuxer_.postMessage({ action: 'flush' });\n    }\n\n    /**\n     * Appends gop information (timing and byteLength) received by the transmuxer for the\n     * gops appended in the last call to appendBuffer\n     *\n     * @param {Event} event\n     *        The gopInfo event from the transmuxer\n     * @param {Array} event.data.gopInfo\n     *        List of gop info to append\n     */\n\n  }, {\n    key: 'appendGopInfo_',\n    value: function appendGopInfo_(event) {\n      this.gopBuffer_ = updateGopBuffer(this.gopBuffer_, event.data.gopInfo, this.safeAppend_);\n    }\n\n    /**\n     * Emulate the native mediasource function and remove parts\n     * of the buffer from any of our internal buffers that exist\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/remove\n     * @param {Double} start position to start the remove at\n     * @param {Double} end position to end the remove at\n     */\n\n  }, {\n    key: 'remove',\n    value: function remove(start, end) {\n      if (this.videoBuffer_) {\n        this.videoBuffer_.updating = true;\n        this.videoBuffer_.remove(start, end);\n        this.gopBuffer_ = removeGopBuffer(this.gopBuffer_, start, end, this.timeMapping_);\n      }\n      if (!this.audioDisabled_ && this.audioBuffer_) {\n        this.audioBuffer_.updating = true;\n        this.audioBuffer_.remove(start, end);\n      }\n\n      // Remove Metadata Cues (id3)\n      removeCuesFromTrack(start, end, this.metadataTrack_);\n\n      // Remove Any Captions\n      if (this.inbandTextTracks_) {\n        for (var track in this.inbandTextTracks_) {\n          removeCuesFromTrack(start, end, this.inbandTextTracks_[track]);\n        }\n      }\n    }\n\n    /**\n     * Process any segments that the muxer has output\n     * Concatenate segments together based on type and append them into\n     * their respective sourceBuffers\n     *\n     * @private\n     */\n\n  }, {\n    key: 'processPendingSegments_',\n    value: function processPendingSegments_() {\n      var sortedSegments = {\n        video: {\n          segments: [],\n          bytes: 0\n        },\n        audio: {\n          segments: [],\n          bytes: 0\n        },\n        captions: [],\n        metadata: []\n      };\n\n      // Sort segments into separate video/audio arrays and\n      // keep track of their total byte lengths\n      sortedSegments = this.pendingBuffers_.reduce(function (segmentObj, segment) {\n        var type = segment.type;\n        var data = segment.data;\n        var initSegment = segment.initSegment;\n\n        segmentObj[type].segments.push(data);\n        segmentObj[type].bytes += data.byteLength;\n\n        segmentObj[type].initSegment = initSegment;\n\n        // Gather any captions into a single array\n        if (segment.captions) {\n          segmentObj.captions = segmentObj.captions.concat(segment.captions);\n        }\n\n        if (segment.info) {\n          segmentObj[type].info = segment.info;\n        }\n\n        // Gather any metadata into a single array\n        if (segment.metadata) {\n          segmentObj.metadata = segmentObj.metadata.concat(segment.metadata);\n        }\n\n        return segmentObj;\n      }, sortedSegments);\n\n      // Create the real source buffers if they don't exist by now since we\n      // finally are sure what tracks are contained in the source\n      if (!this.videoBuffer_ && !this.audioBuffer_) {\n        // Remove any codecs that may have been specified by default but\n        // are no longer applicable now\n        if (sortedSegments.video.bytes === 0) {\n          this.videoCodec_ = null;\n        }\n        if (sortedSegments.audio.bytes === 0) {\n          this.audioCodec_ = null;\n        }\n\n        this.createRealSourceBuffers_();\n      }\n\n      if (sortedSegments.audio.info) {\n        this.mediaSource_.trigger({ type: 'audioinfo', info: sortedSegments.audio.info });\n      }\n      if (sortedSegments.video.info) {\n        this.mediaSource_.trigger({ type: 'videoinfo', info: sortedSegments.video.info });\n      }\n\n      if (this.appendAudioInitSegment_) {\n        if (!this.audioDisabled_ && this.audioBuffer_) {\n          sortedSegments.audio.segments.unshift(sortedSegments.audio.initSegment);\n          sortedSegments.audio.bytes += sortedSegments.audio.initSegment.byteLength;\n        }\n        this.appendAudioInitSegment_ = false;\n      }\n\n      var triggerUpdateend = false;\n\n      // Merge multiple video and audio segments into one and append\n      if (this.videoBuffer_ && sortedSegments.video.bytes) {\n        sortedSegments.video.segments.unshift(sortedSegments.video.initSegment);\n        sortedSegments.video.bytes += sortedSegments.video.initSegment.byteLength;\n        this.concatAndAppendSegments_(sortedSegments.video, this.videoBuffer_);\n        // TODO: are video tracks the only ones with text tracks?\n        addTextTrackData(this, sortedSegments.captions, sortedSegments.metadata);\n      } else if (this.videoBuffer_ && (this.audioDisabled_ || !this.audioBuffer_)) {\n        // The transmuxer did not return any bytes of video, meaning it was all trimmed\n        // for gop alignment. Since we have a video buffer and audio is disabled, updateend\n        // will never be triggered by this source buffer, which will cause contrib-hls\n        // to be stuck forever waiting for updateend. If audio is not disabled, updateend\n        // will be triggered by the audio buffer, which will be sent upwards since the video\n        // buffer will not be in an updating state.\n        triggerUpdateend = true;\n      }\n\n      if (!this.audioDisabled_ && this.audioBuffer_) {\n        this.concatAndAppendSegments_(sortedSegments.audio, this.audioBuffer_);\n      }\n\n      this.pendingBuffers_.length = 0;\n\n      if (triggerUpdateend) {\n        this.trigger('updateend');\n      }\n\n      // We are no longer in the internal \"updating\" state\n      this.bufferUpdating_ = false;\n    }\n\n    /**\n     * Combine all segments into a single Uint8Array and then append them\n     * to the destination buffer\n     *\n     * @param {Object} segmentObj\n     * @param {SourceBuffer} destinationBuffer native source buffer to append data to\n     * @private\n     */\n\n  }, {\n    key: 'concatAndAppendSegments_',\n    value: function concatAndAppendSegments_(segmentObj, destinationBuffer) {\n      var offset = 0;\n      var tempBuffer = void 0;\n\n      if (segmentObj.bytes) {\n        tempBuffer = new Uint8Array(segmentObj.bytes);\n\n        // Combine the individual segments into one large typed-array\n        segmentObj.segments.forEach(function (segment) {\n          tempBuffer.set(segment, offset);\n          offset += segment.byteLength;\n        });\n\n        try {\n          destinationBuffer.updating = true;\n          destinationBuffer.appendBuffer(tempBuffer);\n        } catch (error) {\n          if (this.mediaSource_.player_) {\n            this.mediaSource_.player_.error({\n              code: -3,\n              type: 'APPEND_BUFFER_ERR',\n              message: error.message,\n              originalError: error\n            });\n          }\n        }\n      }\n    }\n\n    /**\n     * Emulate the native mediasource function. abort any soureBuffer\n     * actions and throw out any un-appended data.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/abort\n     */\n\n  }, {\n    key: 'abort',\n    value: function abort() {\n      if (this.videoBuffer_) {\n        this.videoBuffer_.abort();\n      }\n      if (!this.audioDisabled_ && this.audioBuffer_) {\n        this.audioBuffer_.abort();\n      }\n      if (this.transmuxer_) {\n        this.transmuxer_.postMessage({ action: 'reset' });\n      }\n      this.pendingBuffers_.length = 0;\n      this.bufferUpdating_ = false;\n    }\n  }]);\n  return VirtualSourceBuffer;\n}(videojs$1.EventTarget);\n\n/**\n * @file html-media-source.js\n */\n\n/**\n * Our MediaSource implementation in HTML, mimics native\n * MediaSource where/if possible.\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource\n * @class HtmlMediaSource\n * @extends videojs.EventTarget\n */\n\nvar HtmlMediaSource = function (_videojs$EventTarget) {\n  inherits$1(HtmlMediaSource, _videojs$EventTarget);\n\n  function HtmlMediaSource() {\n    classCallCheck$1(this, HtmlMediaSource);\n\n    var _this = possibleConstructorReturn$1(this, (HtmlMediaSource.__proto__ || Object.getPrototypeOf(HtmlMediaSource)).call(this));\n\n    var property = void 0;\n\n    _this.nativeMediaSource_ = new window$1.MediaSource();\n    // delegate to the native MediaSource's methods by default\n    for (property in _this.nativeMediaSource_) {\n      if (!(property in HtmlMediaSource.prototype) && typeof _this.nativeMediaSource_[property] === 'function') {\n        _this[property] = _this.nativeMediaSource_[property].bind(_this.nativeMediaSource_);\n      }\n    }\n\n    // emulate `duration` and `seekable` until seeking can be\n    // handled uniformly for live streams\n    // see https://github.com/w3c/media-source/issues/5\n    _this.duration_ = NaN;\n    Object.defineProperty(_this, 'duration', {\n      get: function get$$1() {\n        if (this.duration_ === Infinity) {\n          return this.duration_;\n        }\n        return this.nativeMediaSource_.duration;\n      },\n      set: function set$$1(duration) {\n        this.duration_ = duration;\n        if (duration !== Infinity) {\n          this.nativeMediaSource_.duration = duration;\n          return;\n        }\n      }\n    });\n    Object.defineProperty(_this, 'seekable', {\n      get: function get$$1() {\n        if (this.duration_ === Infinity) {\n          return videojs$1.createTimeRanges([[0, this.nativeMediaSource_.duration]]);\n        }\n        return this.nativeMediaSource_.seekable;\n      }\n    });\n\n    Object.defineProperty(_this, 'readyState', {\n      get: function get$$1() {\n        return this.nativeMediaSource_.readyState;\n      }\n    });\n\n    Object.defineProperty(_this, 'activeSourceBuffers', {\n      get: function get$$1() {\n        return this.activeSourceBuffers_;\n      }\n    });\n\n    // the list of virtual and native SourceBuffers created by this\n    // MediaSource\n    _this.sourceBuffers = [];\n\n    _this.activeSourceBuffers_ = [];\n\n    /**\n     * update the list of active source buffers based upon various\n     * imformation from HLS and video.js\n     *\n     * @private\n     */\n    _this.updateActiveSourceBuffers_ = function () {\n      // Retain the reference but empty the array\n      _this.activeSourceBuffers_.length = 0;\n\n      // If there is only one source buffer, then it will always be active and audio will\n      // be disabled based on the codec of the source buffer\n      if (_this.sourceBuffers.length === 1) {\n        var sourceBuffer = _this.sourceBuffers[0];\n\n        sourceBuffer.appendAudioInitSegment_ = true;\n        sourceBuffer.audioDisabled_ = !sourceBuffer.audioCodec_;\n        _this.activeSourceBuffers_.push(sourceBuffer);\n        return;\n      }\n\n      // There are 2 source buffers, a combined (possibly video only) source buffer and\n      // and an audio only source buffer.\n      // By default, the audio in the combined virtual source buffer is enabled\n      // and the audio-only source buffer (if it exists) is disabled.\n      var disableCombined = false;\n      var disableAudioOnly = true;\n\n      // TODO: maybe we can store the sourcebuffers on the track objects?\n      // safari may do something like this\n      for (var i = 0; i < _this.player_.audioTracks().length; i++) {\n        var track = _this.player_.audioTracks()[i];\n\n        if (track.enabled && track.kind !== 'main') {\n          // The enabled track is an alternate audio track so disable the audio in\n          // the combined source buffer and enable the audio-only source buffer.\n          disableCombined = true;\n          disableAudioOnly = false;\n          break;\n        }\n      }\n\n      _this.sourceBuffers.forEach(function (sourceBuffer, index) {\n        /* eslinst-disable */\n        // TODO once codecs are required, we can switch to using the codecs to determine\n        //      what stream is the video stream, rather than relying on videoTracks\n        /* eslinst-enable */\n\n        sourceBuffer.appendAudioInitSegment_ = true;\n\n        if (sourceBuffer.videoCodec_ && sourceBuffer.audioCodec_) {\n          // combined\n          sourceBuffer.audioDisabled_ = disableCombined;\n        } else if (sourceBuffer.videoCodec_ && !sourceBuffer.audioCodec_) {\n          // If the \"combined\" source buffer is video only, then we do not want\n          // disable the audio-only source buffer (this is mostly for demuxed\n          // audio and video hls)\n          sourceBuffer.audioDisabled_ = true;\n          disableAudioOnly = false;\n        } else if (!sourceBuffer.videoCodec_ && sourceBuffer.audioCodec_) {\n          // audio only\n          // In the case of audio only with alternate audio and disableAudioOnly is true\n          // this means we want to disable the audio on the alternate audio sourcebuffer\n          // but not the main \"combined\" source buffer. The \"combined\" source buffer is\n          // always at index 0, so this ensures audio won't be disabled in both source\n          // buffers.\n          sourceBuffer.audioDisabled_ = index ? disableAudioOnly : !disableAudioOnly;\n          if (sourceBuffer.audioDisabled_) {\n            return;\n          }\n        }\n\n        _this.activeSourceBuffers_.push(sourceBuffer);\n      });\n    };\n\n    _this.onPlayerMediachange_ = function () {\n      _this.sourceBuffers.forEach(function (sourceBuffer) {\n        sourceBuffer.appendAudioInitSegment_ = true;\n      });\n    };\n\n    _this.onHlsReset_ = function () {\n      _this.sourceBuffers.forEach(function (sourceBuffer) {\n        if (sourceBuffer.transmuxer_) {\n          sourceBuffer.transmuxer_.postMessage({ action: 'resetCaptions' });\n        }\n      });\n    };\n\n    _this.onHlsSegmentTimeMapping_ = function (event) {\n      _this.sourceBuffers.forEach(function (buffer) {\n        return buffer.timeMapping_ = event.mapping;\n      });\n    };\n\n    // Re-emit MediaSource events on the polyfill\n    ['sourceopen', 'sourceclose', 'sourceended'].forEach(function (eventName) {\n      this.nativeMediaSource_.addEventListener(eventName, this.trigger.bind(this));\n    }, _this);\n\n    // capture the associated player when the MediaSource is\n    // successfully attached\n    _this.on('sourceopen', function (event) {\n      // Get the player this MediaSource is attached to\n      var video = document.querySelector('[src=\"' + _this.url_ + '\"]');\n\n      if (!video) {\n        return;\n      }\n\n      _this.player_ = videojs$1(video.parentNode);\n\n      // hls-reset is fired by videojs.Hls on to the tech after the main SegmentLoader\n      // resets its state and flushes the buffer\n      _this.player_.tech_.on('hls-reset', _this.onHlsReset_);\n      // hls-segment-time-mapping is fired by videojs.Hls on to the tech after the main\n      // SegmentLoader inspects an MTS segment and has an accurate stream to display\n      // time mapping\n      _this.player_.tech_.on('hls-segment-time-mapping', _this.onHlsSegmentTimeMapping_);\n\n      if (_this.player_.audioTracks && _this.player_.audioTracks()) {\n        _this.player_.audioTracks().on('change', _this.updateActiveSourceBuffers_);\n        _this.player_.audioTracks().on('addtrack', _this.updateActiveSourceBuffers_);\n        _this.player_.audioTracks().on('removetrack', _this.updateActiveSourceBuffers_);\n      }\n\n      _this.player_.on('mediachange', _this.onPlayerMediachange_);\n    });\n\n    _this.on('sourceended', function (event) {\n      var duration = durationOfVideo(_this.duration);\n\n      for (var i = 0; i < _this.sourceBuffers.length; i++) {\n        var sourcebuffer = _this.sourceBuffers[i];\n        var cues = sourcebuffer.metadataTrack_ && sourcebuffer.metadataTrack_.cues;\n\n        if (cues && cues.length) {\n          cues[cues.length - 1].endTime = duration;\n        }\n      }\n    });\n\n    // explicitly terminate any WebWorkers that were created\n    // by SourceHandlers\n    _this.on('sourceclose', function (event) {\n      this.sourceBuffers.forEach(function (sourceBuffer) {\n        if (sourceBuffer.transmuxer_) {\n          sourceBuffer.transmuxer_.terminate();\n        }\n      });\n\n      this.sourceBuffers.length = 0;\n      if (!this.player_) {\n        return;\n      }\n\n      if (this.player_.audioTracks && this.player_.audioTracks()) {\n        this.player_.audioTracks().off('change', this.updateActiveSourceBuffers_);\n        this.player_.audioTracks().off('addtrack', this.updateActiveSourceBuffers_);\n        this.player_.audioTracks().off('removetrack', this.updateActiveSourceBuffers_);\n      }\n\n      // We can only change this if the player hasn't been disposed of yet\n      // because `off` eventually tries to use the el_ property. If it has\n      // been disposed of, then don't worry about it because there are no\n      // event handlers left to unbind anyway\n      if (this.player_.el_) {\n        this.player_.off('mediachange', this.onPlayerMediachange_);\n        this.player_.tech_.off('hls-reset', this.onHlsReset_);\n        this.player_.tech_.off('hls-segment-time-mapping', this.onHlsSegmentTimeMapping_);\n      }\n    });\n    return _this;\n  }\n\n  /**\n   * Add a range that that can now be seeked to.\n   *\n   * @param {Double} start where to start the addition\n   * @param {Double} end where to end the addition\n   * @private\n   */\n\n  createClass$1(HtmlMediaSource, [{\n    key: 'addSeekableRange_',\n    value: function addSeekableRange_(start, end) {\n      var error = void 0;\n\n      if (this.duration !== Infinity) {\n        error = new Error('MediaSource.addSeekableRange() can only be invoked ' + 'when the duration is Infinity');\n        error.name = 'InvalidStateError';\n        error.code = 11;\n        throw error;\n      }\n\n      if (end > this.nativeMediaSource_.duration || isNaN(this.nativeMediaSource_.duration)) {\n        this.nativeMediaSource_.duration = end;\n      }\n    }\n\n    /**\n     * Add a source buffer to the media source.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/addSourceBuffer\n     * @param {String} type the content-type of the content\n     * @return {Object} the created source buffer\n     */\n\n  }, {\n    key: 'addSourceBuffer',\n    value: function addSourceBuffer(type) {\n      var buffer = void 0;\n      var parsedType = parseContentType(type);\n\n      // Create a VirtualSourceBuffer to transmux MPEG-2 transport\n      // stream segments into fragmented MP4s\n      if (/^(video|audio)\\/mp2t$/i.test(parsedType.type)) {\n        var codecs = [];\n\n        if (parsedType.parameters && parsedType.parameters.codecs) {\n          codecs = parsedType.parameters.codecs.split(',');\n          codecs = translateLegacyCodecs(codecs);\n          codecs = codecs.filter(function (codec) {\n            return isAudioCodec(codec) || isVideoCodec(codec);\n          });\n        }\n\n        if (codecs.length === 0) {\n          codecs = ['avc1.4d400d', 'mp4a.40.2'];\n        }\n\n        buffer = new VirtualSourceBuffer(this, codecs);\n\n        if (this.sourceBuffers.length !== 0) {\n          // If another VirtualSourceBuffer already exists, then we are creating a\n          // SourceBuffer for an alternate audio track and therefore we know that\n          // the source has both an audio and video track.\n          // That means we should trigger the manual creation of the real\n          // SourceBuffers instead of waiting for the transmuxer to return data\n          this.sourceBuffers[0].createRealSourceBuffers_();\n          buffer.createRealSourceBuffers_();\n\n          // Automatically disable the audio on the first source buffer if\n          // a second source buffer is ever created\n          this.sourceBuffers[0].audioDisabled_ = true;\n        }\n      } else {\n        // delegate to the native implementation\n        buffer = this.nativeMediaSource_.addSourceBuffer(type);\n      }\n\n      this.sourceBuffers.push(buffer);\n      return buffer;\n    }\n  }]);\n  return HtmlMediaSource;\n}(videojs$1.EventTarget);\n\n/**\n * @file videojs-contrib-media-sources.js\n */\nvar urlCount = 0;\n\n// ------------\n// Media Source\n// ------------\n\n// store references to the media sources so they can be connected\n// to a video element (a swf object)\n// TODO: can we store this somewhere local to this module?\nvideojs$1.mediaSources = {};\n\n/**\n * Provide a method for a swf object to notify JS that a\n * media source is now open.\n *\n * @param {String} msObjectURL string referencing the MSE Object URL\n * @param {String} swfId the swf id\n */\nvar open = function open(msObjectURL, swfId) {\n  var mediaSource = videojs$1.mediaSources[msObjectURL];\n\n  if (mediaSource) {\n    mediaSource.trigger({ type: 'sourceopen', swfId: swfId });\n  } else {\n    throw new Error('Media Source not found (Video.js)');\n  }\n};\n\n/**\n * Check to see if the native MediaSource object exists and supports\n * an MP4 container with both H.264 video and AAC-LC audio.\n *\n * @return {Boolean} if  native media sources are supported\n */\nvar supportsNativeMediaSources = function supportsNativeMediaSources() {\n  return !!window$1.MediaSource && !!window$1.MediaSource.isTypeSupported && window$1.MediaSource.isTypeSupported('video/mp4;codecs=\"avc1.4d400d,mp4a.40.2\"');\n};\n\n/**\n * An emulation of the MediaSource API so that we can support\n * native and non-native functionality. returns an instance of\n * HtmlMediaSource.\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/MediaSource\n */\nvar MediaSource = function MediaSource() {\n  this.MediaSource = {\n    open: open,\n    supportsNativeMediaSources: supportsNativeMediaSources\n  };\n\n  if (supportsNativeMediaSources()) {\n    return new HtmlMediaSource();\n  }\n\n  throw new Error('Cannot use create a virtual MediaSource for this video');\n};\n\nMediaSource.open = open;\nMediaSource.supportsNativeMediaSources = supportsNativeMediaSources;\n\n/**\n * A wrapper around the native URL for our MSE object\n * implementation, this object is exposed under videojs.URL\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/URL/URL\n */\nvar URL$1 = {\n  /**\n   * A wrapper around the native createObjectURL for our objects.\n   * This function maps a native or emulated mediaSource to a blob\n   * url so that it can be loaded into video.js\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL\n   * @param {MediaSource} object the object to create a blob url to\n   */\n  createObjectURL: function createObjectURL(object) {\n    var objectUrlPrefix = 'blob:vjs-media-source/';\n    var url = void 0;\n\n    // use the native MediaSource to generate an object URL\n    if (object instanceof HtmlMediaSource) {\n      url = window$1.URL.createObjectURL(object.nativeMediaSource_);\n      object.url_ = url;\n      return url;\n    }\n    // if the object isn't an emulated MediaSource, delegate to the\n    // native implementation\n    if (!(object instanceof HtmlMediaSource)) {\n      url = window$1.URL.createObjectURL(object);\n      object.url_ = url;\n      return url;\n    }\n\n    // build a URL that can be used to map back to the emulated\n    // MediaSource\n    url = objectUrlPrefix + urlCount;\n\n    urlCount++;\n\n    // setup the mapping back to object\n    videojs$1.mediaSources[url] = object;\n\n    return url;\n  }\n};\n\nvideojs$1.MediaSource = MediaSource;\nvideojs$1.URL = URL$1;\n\nvar EventTarget$1$1 = videojs$1.EventTarget,\n    mergeOptions$2 = videojs$1.mergeOptions;\n\n/**\n * Returns a new master manifest that is the result of merging an updated master manifest\n * into the original version.\n *\n * @param {Object} oldMaster\n *        The old parsed mpd object\n * @param {Object} newMaster\n *        The updated parsed mpd object\n * @return {Object}\n *         A new object representing the original master manifest with the updated media\n *         playlists merged in\n */\n\nvar updateMaster$1 = function updateMaster$$1(oldMaster, newMaster) {\n  var update = mergeOptions$2(oldMaster, {\n    // These are top level properties that can be updated\n    duration: newMaster.duration,\n    minimumUpdatePeriod: newMaster.minimumUpdatePeriod\n  });\n\n  // First update the playlists in playlist list\n  for (var i = 0; i < newMaster.playlists.length; i++) {\n    var playlistUpdate = updateMaster(update, newMaster.playlists[i]);\n\n    if (playlistUpdate) {\n      update = playlistUpdate;\n    }\n  }\n\n  // Then update media group playlists\n  forEachMediaGroup(newMaster, function (properties, type, group, label) {\n    if (properties.playlists && properties.playlists.length) {\n      var uri = properties.playlists[0].uri;\n      var _playlistUpdate = updateMaster(update, properties.playlists[0]);\n\n      if (_playlistUpdate) {\n        update = _playlistUpdate;\n        // update the playlist reference within media groups\n        update.mediaGroups[type][group][label].playlists[0] = update.playlists[uri];\n      }\n    }\n  });\n\n  return update;\n};\n\nvar DashPlaylistLoader = function (_EventTarget) {\n  inherits$1(DashPlaylistLoader, _EventTarget);\n\n  // DashPlaylistLoader must accept either a src url or a playlist because subsequent\n  // playlist loader setups from media groups will expect to be able to pass a playlist\n  // (since there aren't external URLs to media playlists with DASH)\n  function DashPlaylistLoader(srcUrlOrPlaylist, hls, withCredentials, masterPlaylistLoader) {\n    classCallCheck$1(this, DashPlaylistLoader);\n\n    var _this = possibleConstructorReturn$1(this, (DashPlaylistLoader.__proto__ || Object.getPrototypeOf(DashPlaylistLoader)).call(this));\n\n    _this.hls_ = hls;\n    _this.withCredentials = withCredentials;\n\n    if (!srcUrlOrPlaylist) {\n      throw new Error('A non-empty playlist URL or playlist is required');\n    }\n\n    // event naming?\n    _this.on('minimumUpdatePeriod', function () {\n      _this.refreshXml_();\n    });\n\n    // live playlist staleness timeout\n    _this.on('mediaupdatetimeout', function () {\n      _this.refreshMedia_();\n    });\n\n    // initialize the loader state\n    if (typeof srcUrlOrPlaylist === 'string') {\n      _this.srcUrl = srcUrlOrPlaylist;\n      _this.state = 'HAVE_NOTHING';\n      return possibleConstructorReturn$1(_this);\n    }\n\n    _this.masterPlaylistLoader_ = masterPlaylistLoader;\n\n    _this.state = 'HAVE_METADATA';\n    _this.started = true;\n    // we only should have one playlist so select it\n    _this.media(srcUrlOrPlaylist);\n    // trigger async to mimic behavior of HLS, where it must request a playlist\n    window$1.setTimeout(function () {\n      _this.trigger('loadedmetadata');\n    }, 0);\n    return _this;\n  }\n\n  createClass$1(DashPlaylistLoader, [{\n    key: 'dispose',\n    value: function dispose() {\n      this.stopRequest();\n      window$1.clearTimeout(this.mediaUpdateTimeout);\n    }\n  }, {\n    key: 'stopRequest',\n    value: function stopRequest() {\n      if (this.request) {\n        var oldRequest = this.request;\n\n        this.request = null;\n        oldRequest.onreadystatechange = null;\n        oldRequest.abort();\n      }\n    }\n  }, {\n    key: 'media',\n    value: function media(playlist) {\n      // getter\n      if (!playlist) {\n        return this.media_;\n      }\n\n      // setter\n      if (this.state === 'HAVE_NOTHING') {\n        throw new Error('Cannot switch media playlist from ' + this.state);\n      }\n\n      var startingState = this.state;\n\n      // find the playlist object if the target playlist has been specified by URI\n      if (typeof playlist === 'string') {\n        if (!this.master.playlists[playlist]) {\n          throw new Error('Unknown playlist URI: ' + playlist);\n        }\n        playlist = this.master.playlists[playlist];\n      }\n\n      var mediaChange = !this.media_ || playlist.uri !== this.media_.uri;\n\n      this.state = 'HAVE_METADATA';\n\n      // switching to the active playlist is a no-op\n      if (!mediaChange) {\n        return;\n      }\n\n      // switching from an already loaded playlist\n      if (this.media_) {\n        this.trigger('mediachanging');\n      }\n\n      this.media_ = playlist;\n\n      this.refreshMedia_();\n\n      // trigger media change if the active media has been updated\n      if (startingState !== 'HAVE_MASTER') {\n        this.trigger('mediachange');\n      }\n    }\n  }, {\n    key: 'pause',\n    value: function pause() {\n      this.stopRequest();\n      if (this.state === 'HAVE_NOTHING') {\n        // If we pause the loader before any data has been retrieved, its as if we never\n        // started, so reset to an unstarted state.\n        this.started = false;\n      }\n    }\n  }, {\n    key: 'load',\n    value: function load() {\n      // because the playlists are internal to the manifest, load should either load the\n      // main manifest, or do nothing but trigger an event\n      if (!this.started) {\n        this.start();\n        return;\n      }\n\n      this.trigger('loadedplaylist');\n    }\n\n    /**\n     * Parses the master xml string and updates playlist uri references\n     *\n     * @return {Object}\n     *         The parsed mpd manifest object\n     */\n\n  }, {\n    key: 'parseMasterXml',\n    value: function parseMasterXml() {\n      var master = parse(this.masterXml_, {\n        manifestUri: this.srcUrl,\n        clientOffset: this.clientOffset_\n      });\n\n      master.uri = this.srcUrl;\n\n      // Set up phony URIs for the playlists since we won't have external URIs for DASH\n      // but reference playlists by their URI throughout the project\n      // TODO: Should we create the dummy uris in mpd-parser as well (leaning towards yes).\n      for (var i = 0; i < master.playlists.length; i++) {\n        var phonyUri = 'placeholder-uri-' + i;\n\n        master.playlists[i].uri = phonyUri;\n        // set up by URI references\n        master.playlists[phonyUri] = master.playlists[i];\n      }\n\n      // set up phony URIs for the media group playlists since we won't have external\n      // URIs for DASH but reference playlists by their URI throughout the project\n      forEachMediaGroup(master, function (properties, mediaType, groupKey, labelKey) {\n        if (properties.playlists && properties.playlists.length) {\n          var _phonyUri = 'placeholder-uri-' + mediaType + '-' + groupKey + '-' + labelKey;\n\n          properties.playlists[0].uri = _phonyUri;\n          // setup URI references\n          master.playlists[_phonyUri] = properties.playlists[0];\n        }\n      });\n\n      setupMediaPlaylists(master);\n      resolveMediaGroupUris(master);\n\n      return master;\n    }\n  }, {\n    key: 'start',\n    value: function start() {\n      var _this2 = this;\n\n      this.started = true;\n\n      // request the specified URL\n      this.request = this.hls_.xhr({\n        uri: this.srcUrl,\n        withCredentials: this.withCredentials\n      }, function (error, req) {\n        // disposed\n        if (!_this2.request) {\n          return;\n        }\n\n        // clear the loader's request reference\n        _this2.request = null;\n\n        if (error) {\n          _this2.error = {\n            status: req.status,\n            message: 'DASH playlist request error at URL: ' + _this2.srcUrl,\n            responseText: req.responseText,\n            // MEDIA_ERR_NETWORK\n            code: 2\n          };\n          if (_this2.state === 'HAVE_NOTHING') {\n            _this2.started = false;\n          }\n          return _this2.trigger('error');\n        }\n\n        _this2.masterXml_ = req.responseText;\n\n        if (req.responseHeaders && req.responseHeaders.date) {\n          _this2.masterLoaded_ = Date.parse(req.responseHeaders.date);\n        } else {\n          _this2.masterLoaded_ = Date.now();\n        }\n\n        _this2.syncClientServerClock_(_this2.onClientServerClockSync_.bind(_this2));\n      });\n    }\n\n    /**\n     * Parses the master xml for UTCTiming node to sync the client clock to the server\n     * clock. If the UTCTiming node requires a HEAD or GET request, that request is made.\n     *\n     * @param {Function} done\n     *        Function to call when clock sync has completed\n     */\n\n  }, {\n    key: 'syncClientServerClock_',\n    value: function syncClientServerClock_(done) {\n      var _this3 = this;\n\n      var utcTiming = parseUTCTiming(this.masterXml_);\n\n      // No UTCTiming element found in the mpd. Use Date header from mpd request as the\n      // server clock\n      if (utcTiming === null) {\n        this.clientOffset_ = this.masterLoaded_ - Date.now();\n        return done();\n      }\n\n      if (utcTiming.method === 'DIRECT') {\n        this.clientOffset_ = utcTiming.value - Date.now();\n        return done();\n      }\n\n      this.request = this.hls_.xhr({\n        uri: resolveUrl(this.srcUrl, utcTiming.value),\n        method: utcTiming.method,\n        withCredentials: this.withCredentials\n      }, function (error, req) {\n        // disposed\n        if (!_this3.request) {\n          return;\n        }\n\n        if (error) {\n          // sync request failed, fall back to using date header from mpd\n          // TODO: log warning\n          _this3.clientOffset_ = _this3.masterLoaded_ - Date.now();\n          return done();\n        }\n\n        var serverTime = void 0;\n\n        if (utcTiming.method === 'HEAD') {\n          if (!req.responseHeaders || !req.responseHeaders.date) {\n            // expected date header not preset, fall back to using date header from mpd\n            // TODO: log warning\n            serverTime = _this3.masterLoaded_;\n          } else {\n            serverTime = Date.parse(req.responseHeaders.date);\n          }\n        } else {\n          serverTime = Date.parse(req.responseText);\n        }\n\n        _this3.clientOffset_ = serverTime - Date.now();\n\n        done();\n      });\n    }\n\n    /**\n     * Handler for after client/server clock synchronization has happened. Sets up\n     * xml refresh timer if specificed by the manifest.\n     */\n\n  }, {\n    key: 'onClientServerClockSync_',\n    value: function onClientServerClockSync_() {\n      var _this4 = this;\n\n      this.master = this.parseMasterXml();\n\n      this.state = 'HAVE_MASTER';\n\n      this.trigger('loadedplaylist');\n\n      if (!this.media_) {\n        // no media playlist was specifically selected so start\n        // from the first listed one\n        this.media(this.master.playlists[0]);\n      }\n      // trigger loadedmetadata to resolve setup of media groups\n      // trigger async to mimic behavior of HLS, where it must request a playlist\n      window$1.setTimeout(function () {\n        _this4.trigger('loadedmetadata');\n      }, 0);\n\n      // TODO: minimumUpdatePeriod can have a value of 0. Currently the manifest will not\n      // be refreshed when this is the case. The inter-op guide says that when the\n      // minimumUpdatePeriod is 0, the manifest should outline all currently available\n      // segments, but future segments may require an update. I think a good solution\n      // would be to update the manifest at the same rate that the media playlists\n      // are \"refreshed\", i.e. every targetDuration.\n      if (this.master.minimumUpdatePeriod) {\n        window$1.setTimeout(function () {\n          _this4.trigger('minimumUpdatePeriod');\n        }, this.master.minimumUpdatePeriod);\n      }\n    }\n\n    /**\n     * Sends request to refresh the master xml and updates the parsed master manifest\n     * TODO: Does the client offset need to be recalculated when the xml is refreshed?\n     */\n\n  }, {\n    key: 'refreshXml_',\n    value: function refreshXml_() {\n      var _this5 = this;\n\n      this.request = this.hls_.xhr({\n        uri: this.srcUrl,\n        withCredentials: this.withCredentials\n      }, function (error, req) {\n        // disposed\n        if (!_this5.request) {\n          return;\n        }\n\n        // clear the loader's request reference\n        _this5.request = null;\n\n        if (error) {\n          _this5.error = {\n            status: req.status,\n            message: 'DASH playlist request error at URL: ' + _this5.srcUrl,\n            responseText: req.responseText,\n            // MEDIA_ERR_NETWORK\n            code: 2\n          };\n          if (_this5.state === 'HAVE_NOTHING') {\n            _this5.started = false;\n          }\n          return _this5.trigger('error');\n        }\n\n        _this5.masterXml_ = req.responseText;\n\n        var newMaster = _this5.parseMasterXml();\n\n        _this5.master = updateMaster$1(_this5.master, newMaster);\n\n        window$1.setTimeout(function () {\n          _this5.trigger('minimumUpdatePeriod');\n        }, _this5.master.minimumUpdatePeriod);\n      });\n    }\n\n    /**\n     * Refreshes the media playlist by re-parsing the master xml and updating playlist\n     * references. If this is an alternate loader, the updated parsed manifest is retrieved\n     * from the master loader.\n     */\n\n  }, {\n    key: 'refreshMedia_',\n    value: function refreshMedia_() {\n      var _this6 = this;\n\n      var oldMaster = void 0;\n      var newMaster = void 0;\n\n      if (this.masterPlaylistLoader_) {\n        oldMaster = this.masterPlaylistLoader_.master;\n        newMaster = this.masterPlaylistLoader_.parseMasterXml();\n      } else {\n        oldMaster = this.master;\n        newMaster = this.parseMasterXml();\n      }\n\n      var updatedMaster = updateMaster$1(oldMaster, newMaster);\n\n      if (updatedMaster) {\n        if (this.masterPlaylistLoader_) {\n          this.masterPlaylistLoader_.master = updatedMaster;\n        } else {\n          this.master = updatedMaster;\n        }\n        this.media_ = updatedMaster.playlists[this.media_.uri];\n      } else {\n        this.trigger('playlistunchanged');\n      }\n\n      if (!this.media().endList) {\n        this.mediaUpdateTimeout = window$1.setTimeout(function () {\n          _this6.trigger('mediaupdatetimeout');\n        }, refreshDelay(this.media(), !!updatedMaster));\n      }\n\n      this.trigger('loadedplaylist');\n    }\n  }]);\n  return DashPlaylistLoader;\n}(EventTarget$1$1);\n\nvar logger = function logger(source) {\n  if (videojs$1.log.debug) {\n    return videojs$1.log.debug.bind(videojs$1, 'VHS:', source + ' >');\n  }\n\n  return function () {};\n};\n\nfunction noop() {}\n\n/**\n * @file source-updater.js\n */\n\n/**\n * A queue of callbacks to be serialized and applied when a\n * MediaSource and its associated SourceBuffers are not in the\n * updating state. It is used by the segment loader to update the\n * underlying SourceBuffers when new data is loaded, for instance.\n *\n * @class SourceUpdater\n * @param {MediaSource} mediaSource the MediaSource to create the\n * SourceBuffer from\n * @param {String} mimeType the desired MIME type of the underlying\n * SourceBuffer\n * @param {Object} sourceBufferEmitter an event emitter that fires when a source buffer is\n * added to the media source\n */\n\nvar SourceUpdater = function () {\n  function SourceUpdater(mediaSource, mimeType, type, sourceBufferEmitter) {\n    classCallCheck$1(this, SourceUpdater);\n\n    this.callbacks_ = [];\n    this.pendingCallback_ = null;\n    this.timestampOffset_ = 0;\n    this.mediaSource = mediaSource;\n    this.processedAppend_ = false;\n    this.type_ = type;\n    this.mimeType_ = mimeType;\n    this.logger_ = logger('SourceUpdater[' + type + '][' + mimeType + ']');\n\n    if (mediaSource.readyState === 'closed') {\n      mediaSource.addEventListener('sourceopen', this.createSourceBuffer_.bind(this, mimeType, sourceBufferEmitter));\n    } else {\n      this.createSourceBuffer_(mimeType, sourceBufferEmitter);\n    }\n  }\n\n  createClass$1(SourceUpdater, [{\n    key: 'createSourceBuffer_',\n    value: function createSourceBuffer_(mimeType, sourceBufferEmitter) {\n      var _this = this;\n\n      this.sourceBuffer_ = this.mediaSource.addSourceBuffer(mimeType);\n\n      this.logger_('created SourceBuffer');\n\n      if (sourceBufferEmitter) {\n        sourceBufferEmitter.trigger('sourcebufferadded');\n\n        if (this.mediaSource.sourceBuffers.length < 2) {\n          // There's another source buffer we must wait for before we can start updating\n          // our own (or else we can get into a bad state, i.e., appending video/audio data\n          // before the other video/audio source buffer is available and leading to a video\n          // or audio only buffer).\n          sourceBufferEmitter.on('sourcebufferadded', function () {\n            _this.start_();\n          });\n          return;\n        }\n      }\n\n      this.start_();\n    }\n  }, {\n    key: 'start_',\n    value: function start_() {\n      var _this2 = this;\n\n      this.started_ = true;\n\n      // run completion handlers and process callbacks as updateend\n      // events fire\n      this.onUpdateendCallback_ = function () {\n        var pendingCallback = _this2.pendingCallback_;\n\n        _this2.pendingCallback_ = null;\n\n        _this2.logger_('buffered [' + printableRange(_this2.buffered()) + ']');\n\n        if (pendingCallback) {\n          pendingCallback();\n        }\n\n        _this2.runCallback_();\n      };\n\n      this.sourceBuffer_.addEventListener('updateend', this.onUpdateendCallback_);\n\n      this.runCallback_();\n    }\n\n    /**\n     * Aborts the current segment and resets the segment parser.\n     *\n     * @param {Function} done function to call when done\n     * @see http://w3c.github.io/media-source/#widl-SourceBuffer-abort-void\n     */\n\n  }, {\n    key: 'abort',\n    value: function abort(done) {\n      var _this3 = this;\n\n      if (this.processedAppend_) {\n        this.queueCallback_(function () {\n          _this3.sourceBuffer_.abort();\n        }, done);\n      }\n    }\n\n    /**\n     * Queue an update to append an ArrayBuffer.\n     *\n     * @param {ArrayBuffer} bytes\n     * @param {Function} done the function to call when done\n     * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-appendBuffer-void-ArrayBuffer-data\n     */\n\n  }, {\n    key: 'appendBuffer',\n    value: function appendBuffer(bytes, done) {\n      var _this4 = this;\n\n      this.processedAppend_ = true;\n      this.queueCallback_(function () {\n        _this4.sourceBuffer_.appendBuffer(bytes);\n      }, done);\n    }\n\n    /**\n     * Indicates what TimeRanges are buffered in the managed SourceBuffer.\n     *\n     * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-buffered\n     */\n\n  }, {\n    key: 'buffered',\n    value: function buffered() {\n      if (!this.sourceBuffer_) {\n        return videojs$1.createTimeRanges();\n      }\n      return this.sourceBuffer_.buffered;\n    }\n\n    /**\n     * Queue an update to remove a time range from the buffer.\n     *\n     * @param {Number} start where to start the removal\n     * @param {Number} end where to end the removal\n     * @param {Function} [done=noop] optional callback to be executed when the remove\n     * operation is complete\n     * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-remove-void-double-start-unrestricted-double-end\n     */\n\n  }, {\n    key: 'remove',\n    value: function remove(start, end) {\n      var _this5 = this;\n\n      var done = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noop;\n\n      if (this.processedAppend_) {\n        this.queueCallback_(function () {\n          _this5.logger_('remove [' + start + ' => ' + end + ']');\n          _this5.sourceBuffer_.remove(start, end);\n        }, done);\n      }\n    }\n\n    /**\n     * Whether the underlying sourceBuffer is updating or not\n     *\n     * @return {Boolean} the updating status of the SourceBuffer\n     */\n\n  }, {\n    key: 'updating',\n    value: function updating() {\n      return !this.sourceBuffer_ || this.sourceBuffer_.updating || this.pendingCallback_;\n    }\n\n    /**\n     * Set/get the timestampoffset on the SourceBuffer\n     *\n     * @return {Number} the timestamp offset\n     */\n\n  }, {\n    key: 'timestampOffset',\n    value: function timestampOffset(offset) {\n      var _this6 = this;\n\n      if (typeof offset !== 'undefined') {\n        this.queueCallback_(function () {\n          _this6.sourceBuffer_.timestampOffset = offset;\n        });\n        this.timestampOffset_ = offset;\n      }\n      return this.timestampOffset_;\n    }\n\n    /**\n     * Queue a callback to run\n     */\n\n  }, {\n    key: 'queueCallback_',\n    value: function queueCallback_(callback, done) {\n      this.callbacks_.push([callback.bind(this), done]);\n      this.runCallback_();\n    }\n\n    /**\n     * Run a queued callback\n     */\n\n  }, {\n    key: 'runCallback_',\n    value: function runCallback_() {\n      var callbacks = void 0;\n\n      if (!this.updating() && this.callbacks_.length && this.started_) {\n        callbacks = this.callbacks_.shift();\n        this.pendingCallback_ = callbacks[1];\n        callbacks[0]();\n      }\n    }\n\n    /**\n     * dispose of the source updater and the underlying sourceBuffer\n     */\n\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.sourceBuffer_.removeEventListener('updateend', this.onUpdateendCallback_);\n      if (this.sourceBuffer_ && this.mediaSource.readyState === 'open') {\n        this.sourceBuffer_.abort();\n      }\n    }\n  }]);\n  return SourceUpdater;\n}();\n\nvar Config = {\n  GOAL_BUFFER_LENGTH: 30,\n  MAX_GOAL_BUFFER_LENGTH: 60,\n  GOAL_BUFFER_LENGTH_RATE: 1,\n  // A fudge factor to apply to advertised playlist bitrates to account for\n  // temporary flucations in client bandwidth\n  BANDWIDTH_VARIANCE: 1.2,\n  // How much of the buffer must be filled before we consider upswitching\n  BUFFER_LOW_WATER_LINE: 0,\n  MAX_BUFFER_LOW_WATER_LINE: 30,\n  BUFFER_LOW_WATER_LINE_RATE: 1\n};\n\nvar REQUEST_ERRORS = {\n  FAILURE: 2,\n  TIMEOUT: -101,\n  ABORTED: -102\n};\n\n/**\n * Turns segment byterange into a string suitable for use in\n * HTTP Range requests\n *\n * @param {Object} byterange - an object with two values defining the start and end\n *                             of a byte-range\n */\nvar byterangeStr = function byterangeStr(byterange) {\n  var byterangeStart = void 0;\n  var byterangeEnd = void 0;\n\n  // `byterangeEnd` is one less than `offset + length` because the HTTP range\n  // header uses inclusive ranges\n  byterangeEnd = byterange.offset + byterange.length - 1;\n  byterangeStart = byterange.offset;\n  return 'bytes=' + byterangeStart + '-' + byterangeEnd;\n};\n\n/**\n * Defines headers for use in the xhr request for a particular segment.\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n */\nvar segmentXhrHeaders = function segmentXhrHeaders(segment) {\n  var headers = {};\n\n  if (segment.byterange) {\n    headers.Range = byterangeStr(segment.byterange);\n  }\n  return headers;\n};\n\n/**\n * Abort all requests\n *\n * @param {Object} activeXhrs - an object that tracks all XHR requests\n */\nvar abortAll = function abortAll(activeXhrs) {\n  activeXhrs.forEach(function (xhr$$1) {\n    xhr$$1.abort();\n  });\n};\n\n/**\n * Gather important bandwidth stats once a request has completed\n *\n * @param {Object} request - the XHR request from which to gather stats\n */\nvar getRequestStats = function getRequestStats(request) {\n  return {\n    bandwidth: request.bandwidth,\n    bytesReceived: request.bytesReceived || 0,\n    roundTripTime: request.roundTripTime || 0\n  };\n};\n\n/**\n * If possible gather bandwidth stats as a request is in\n * progress\n *\n * @param {Event} progressEvent - an event object from an XHR's progress event\n */\nvar getProgressStats = function getProgressStats(progressEvent) {\n  var request = progressEvent.target;\n  var roundTripTime = Date.now() - request.requestTime;\n  var stats = {\n    bandwidth: Infinity,\n    bytesReceived: 0,\n    roundTripTime: roundTripTime || 0\n  };\n\n  stats.bytesReceived = progressEvent.loaded;\n  // This can result in Infinity if stats.roundTripTime is 0 but that is ok\n  // because we should only use bandwidth stats on progress to determine when\n  // abort a request early due to insufficient bandwidth\n  stats.bandwidth = Math.floor(stats.bytesReceived / stats.roundTripTime * 8 * 1000);\n\n  return stats;\n};\n\n/**\n * Handle all error conditions in one place and return an object\n * with all the information\n *\n * @param {Error|null} error - if non-null signals an error occured with the XHR\n * @param {Object} request -  the XHR request that possibly generated the error\n */\nvar handleErrors = function handleErrors(error, request) {\n  if (request.timedout) {\n    return {\n      status: request.status,\n      message: 'HLS request timed-out at URL: ' + request.uri,\n      code: REQUEST_ERRORS.TIMEOUT,\n      xhr: request\n    };\n  }\n\n  if (request.aborted) {\n    return {\n      status: request.status,\n      message: 'HLS request aborted at URL: ' + request.uri,\n      code: REQUEST_ERRORS.ABORTED,\n      xhr: request\n    };\n  }\n\n  if (error) {\n    return {\n      status: request.status,\n      message: 'HLS request errored at URL: ' + request.uri,\n      code: REQUEST_ERRORS.FAILURE,\n      xhr: request\n    };\n  }\n\n  return null;\n};\n\n/**\n * Handle responses for key data and convert the key data to the correct format\n * for the decryption step later\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} finishProcessingFn - a callback to execute to continue processing\n *                                        this request\n */\nvar handleKeyResponse = function handleKeyResponse(segment, finishProcessingFn) {\n  return function (error, request) {\n    var response = request.response;\n    var errorObj = handleErrors(error, request);\n\n    if (errorObj) {\n      return finishProcessingFn(errorObj, segment);\n    }\n\n    if (response.byteLength !== 16) {\n      return finishProcessingFn({\n        status: request.status,\n        message: 'Invalid HLS key at URL: ' + request.uri,\n        code: REQUEST_ERRORS.FAILURE,\n        xhr: request\n      }, segment);\n    }\n\n    var view = new DataView(response);\n\n    segment.key.bytes = new Uint32Array([view.getUint32(0), view.getUint32(4), view.getUint32(8), view.getUint32(12)]);\n    return finishProcessingFn(null, segment);\n  };\n};\n\n/**\n * Handle init-segment responses\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} finishProcessingFn - a callback to execute to continue processing\n *                                        this request\n */\nvar handleInitSegmentResponse = function handleInitSegmentResponse(segment, captionParser, finishProcessingFn) {\n  return function (error, request) {\n    var response = request.response;\n    var errorObj = handleErrors(error, request);\n\n    if (errorObj) {\n      return finishProcessingFn(errorObj, segment);\n    }\n\n    // stop processing if received empty content\n    if (response.byteLength === 0) {\n      return finishProcessingFn({\n        status: request.status,\n        message: 'Empty HLS segment content at URL: ' + request.uri,\n        code: REQUEST_ERRORS.FAILURE,\n        xhr: request\n      }, segment);\n    }\n\n    segment.map.bytes = new Uint8Array(request.response);\n\n    // Initialize CaptionParser if it hasn't been yet\n    if (!captionParser.isInitialized()) {\n      captionParser.init();\n    }\n\n    segment.map.timescales = mp4probe.timescale(segment.map.bytes);\n    segment.map.videoTrackIds = mp4probe.videoTrackIds(segment.map.bytes);\n\n    return finishProcessingFn(null, segment);\n  };\n};\n\n/**\n * Response handler for segment-requests being sure to set the correct\n * property depending on whether the segment is encryped or not\n * Also records and keeps track of stats that are used for ABR purposes\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} finishProcessingFn - a callback to execute to continue processing\n *                                        this request\n */\nvar handleSegmentResponse = function handleSegmentResponse(segment, captionParser, finishProcessingFn) {\n  return function (error, request) {\n    var response = request.response;\n    var errorObj = handleErrors(error, request);\n    var parsed = void 0;\n\n    if (errorObj) {\n      return finishProcessingFn(errorObj, segment);\n    }\n\n    // stop processing if received empty content\n    if (response.byteLength === 0) {\n      return finishProcessingFn({\n        status: request.status,\n        message: 'Empty HLS segment content at URL: ' + request.uri,\n        code: REQUEST_ERRORS.FAILURE,\n        xhr: request\n      }, segment);\n    }\n\n    segment.stats = getRequestStats(request);\n\n    if (segment.key) {\n      segment.encryptedBytes = new Uint8Array(request.response);\n    } else {\n      segment.bytes = new Uint8Array(request.response);\n    }\n\n    // This is likely an FMP4 and has the init segment.\n    // Run through the CaptionParser in case there are captions.\n    if (segment.map && segment.map.bytes) {\n      // Initialize CaptionParser if it hasn't been yet\n      if (!captionParser.isInitialized()) {\n        captionParser.init();\n      }\n\n      parsed = captionParser.parse(segment.bytes, segment.map.videoTrackIds, segment.map.timescales);\n\n      if (parsed && parsed.captions) {\n        segment.captionStreams = parsed.captionStreams;\n        segment.fmp4Captions = parsed.captions;\n      }\n    }\n\n    return finishProcessingFn(null, segment);\n  };\n};\n\n/**\n * Decrypt the segment via the decryption web worker\n *\n * @param {WebWorker} decrypter - a WebWorker interface to AES-128 decryption routines\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} doneFn - a callback that is executed after decryption has completed\n */\nvar decryptSegment = function decryptSegment(decrypter, segment, doneFn) {\n  var decryptionHandler = function decryptionHandler(event) {\n    if (event.data.source === segment.requestId) {\n      decrypter.removeEventListener('message', decryptionHandler);\n      var decrypted = event.data.decrypted;\n\n      segment.bytes = new Uint8Array(decrypted.bytes, decrypted.byteOffset, decrypted.byteLength);\n      return doneFn(null, segment);\n    }\n  };\n\n  decrypter.addEventListener('message', decryptionHandler);\n\n  // this is an encrypted segment\n  // incrementally decrypt the segment\n  decrypter.postMessage(createTransferableMessage({\n    source: segment.requestId,\n    encrypted: segment.encryptedBytes,\n    key: segment.key.bytes,\n    iv: segment.key.iv\n  }), [segment.encryptedBytes.buffer, segment.key.bytes.buffer]);\n};\n\n/**\n * The purpose of this function is to get the most pertinent error from the\n * array of errors.\n * For instance if a timeout and two aborts occur, then the aborts were\n * likely triggered by the timeout so return that error object.\n */\nvar getMostImportantError = function getMostImportantError(errors) {\n  return errors.reduce(function (prev, err) {\n    return err.code > prev.code ? err : prev;\n  });\n};\n\n/**\n * This function waits for all XHRs to finish (with either success or failure)\n * before continueing processing via it's callback. The function gathers errors\n * from each request into a single errors array so that the error status for\n * each request can be examined later.\n *\n * @param {Object} activeXhrs - an object that tracks all XHR requests\n * @param {WebWorker} decrypter - a WebWorker interface to AES-128 decryption routines\n * @param {Function} doneFn - a callback that is executed after all resources have been\n *                            downloaded and any decryption completed\n */\nvar waitForCompletion = function waitForCompletion(activeXhrs, decrypter, doneFn) {\n  var errors = [];\n  var count = 0;\n\n  return function (error, segment) {\n    if (error) {\n      // If there are errors, we have to abort any outstanding requests\n      abortAll(activeXhrs);\n      errors.push(error);\n    }\n    count += 1;\n\n    if (count === activeXhrs.length) {\n      // Keep track of when *all* of the requests have completed\n      segment.endOfAllRequests = Date.now();\n\n      if (errors.length > 0) {\n        var worstError = getMostImportantError(errors);\n\n        return doneFn(worstError, segment);\n      }\n      if (segment.encryptedBytes) {\n        return decryptSegment(decrypter, segment, doneFn);\n      }\n      // Otherwise, everything is ready just continue\n      return doneFn(null, segment);\n    }\n  };\n};\n\n/**\n * Simple progress event callback handler that gathers some stats before\n * executing a provided callback with the `segment` object\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} progressFn - a callback that is executed each time a progress event\n *                                is received\n * @param {Event} event - the progress event object from XMLHttpRequest\n */\nvar handleProgress = function handleProgress(segment, progressFn) {\n  return function (event) {\n    segment.stats = videojs$1.mergeOptions(segment.stats, getProgressStats(event));\n\n    // record the time that we receive the first byte of data\n    if (!segment.stats.firstBytesReceivedAt && segment.stats.bytesReceived) {\n      segment.stats.firstBytesReceivedAt = Date.now();\n    }\n\n    return progressFn(event, segment);\n  };\n};\n\n/**\n * Load all resources and does any processing necessary for a media-segment\n *\n * Features:\n *   decrypts the media-segment if it has a key uri and an iv\n *   aborts *all* requests if *any* one request fails\n *\n * The segment object, at minimum, has the following format:\n * {\n *   resolvedUri: String,\n *   [byterange]: {\n *     offset: Number,\n *     length: Number\n *   },\n *   [key]: {\n *     resolvedUri: String\n *     [byterange]: {\n *       offset: Number,\n *       length: Number\n *     },\n *     iv: {\n *       bytes: Uint32Array\n *     }\n *   },\n *   [map]: {\n *     resolvedUri: String,\n *     [byterange]: {\n *       offset: Number,\n *       length: Number\n *     },\n *     [bytes]: Uint8Array\n *   }\n * }\n * ...where [name] denotes optional properties\n *\n * @param {Function} xhr - an instance of the xhr wrapper in xhr.js\n * @param {Object} xhrOptions - the base options to provide to all xhr requests\n * @param {WebWorker} decryptionWorker - a WebWorker interface to AES-128\n *                                       decryption routines\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} progressFn - a callback that receives progress events from the main\n *                                segment's xhr request\n * @param {Function} doneFn - a callback that is executed only once all requests have\n *                            succeeded or failed\n * @returns {Function} a function that, when invoked, immediately aborts all\n *                     outstanding requests\n */\nvar mediaSegmentRequest = function mediaSegmentRequest(xhr$$1, xhrOptions, decryptionWorker, captionParser, segment, progressFn, doneFn) {\n  var activeXhrs = [];\n  var finishProcessingFn = waitForCompletion(activeXhrs, decryptionWorker, doneFn);\n\n  // optionally, request the decryption key\n  if (segment.key) {\n    var keyRequestOptions = videojs$1.mergeOptions(xhrOptions, {\n      uri: segment.key.resolvedUri,\n      responseType: 'arraybuffer'\n    });\n    var keyRequestCallback = handleKeyResponse(segment, finishProcessingFn);\n    var keyXhr = xhr$$1(keyRequestOptions, keyRequestCallback);\n\n    activeXhrs.push(keyXhr);\n  }\n\n  // optionally, request the associated media init segment\n  if (segment.map && !segment.map.bytes) {\n    var initSegmentOptions = videojs$1.mergeOptions(xhrOptions, {\n      uri: segment.map.resolvedUri,\n      responseType: 'arraybuffer',\n      headers: segmentXhrHeaders(segment.map)\n    });\n    var initSegmentRequestCallback = handleInitSegmentResponse(segment, captionParser, finishProcessingFn);\n    var initSegmentXhr = xhr$$1(initSegmentOptions, initSegmentRequestCallback);\n\n    activeXhrs.push(initSegmentXhr);\n  }\n\n  var segmentRequestOptions = videojs$1.mergeOptions(xhrOptions, {\n    uri: segment.resolvedUri,\n    responseType: 'arraybuffer',\n    headers: segmentXhrHeaders(segment)\n  });\n  var segmentRequestCallback = handleSegmentResponse(segment, captionParser, finishProcessingFn);\n  var segmentXhr = xhr$$1(segmentRequestOptions, segmentRequestCallback);\n\n  segmentXhr.addEventListener('progress', handleProgress(segment, progressFn));\n  activeXhrs.push(segmentXhr);\n\n  return function () {\n    return abortAll(activeXhrs);\n  };\n};\n\n// Utilities\n\n/**\n * Returns the CSS value for the specified property on an element\n * using `getComputedStyle`. Firefox has a long-standing issue where\n * getComputedStyle() may return null when running in an iframe with\n * `display: none`.\n *\n * @see https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n * @param {HTMLElement} el the htmlelement to work on\n * @param {string} the proprety to get the style for\n */\nvar safeGetComputedStyle = function safeGetComputedStyle(el, property) {\n  var result = void 0;\n\n  if (!el) {\n    return '';\n  }\n\n  result = window$1.getComputedStyle(el);\n  if (!result) {\n    return '';\n  }\n\n  return result[property];\n};\n\n/**\n * Resuable stable sort function\n *\n * @param {Playlists} array\n * @param {Function} sortFn Different comparators\n * @function stableSort\n */\nvar stableSort = function stableSort(array, sortFn) {\n  var newArray = array.slice();\n\n  array.sort(function (left, right) {\n    var cmp = sortFn(left, right);\n\n    if (cmp === 0) {\n      return newArray.indexOf(left) - newArray.indexOf(right);\n    }\n    return cmp;\n  });\n};\n\n/**\n * A comparator function to sort two playlist object by bandwidth.\n *\n * @param {Object} left a media playlist object\n * @param {Object} right a media playlist object\n * @return {Number} Greater than zero if the bandwidth attribute of\n * left is greater than the corresponding attribute of right. Less\n * than zero if the bandwidth of right is greater than left and\n * exactly zero if the two are equal.\n */\nvar comparePlaylistBandwidth = function comparePlaylistBandwidth(left, right) {\n  var leftBandwidth = void 0;\n  var rightBandwidth = void 0;\n\n  if (left.attributes.BANDWIDTH) {\n    leftBandwidth = left.attributes.BANDWIDTH;\n  }\n  leftBandwidth = leftBandwidth || window$1.Number.MAX_VALUE;\n  if (right.attributes.BANDWIDTH) {\n    rightBandwidth = right.attributes.BANDWIDTH;\n  }\n  rightBandwidth = rightBandwidth || window$1.Number.MAX_VALUE;\n\n  return leftBandwidth - rightBandwidth;\n};\n\n/**\n * A comparator function to sort two playlist object by resolution (width).\n * @param {Object} left a media playlist object\n * @param {Object} right a media playlist object\n * @return {Number} Greater than zero if the resolution.width attribute of\n * left is greater than the corresponding attribute of right. Less\n * than zero if the resolution.width of right is greater than left and\n * exactly zero if the two are equal.\n */\nvar comparePlaylistResolution = function comparePlaylistResolution(left, right) {\n  var leftWidth = void 0;\n  var rightWidth = void 0;\n\n  if (left.attributes.RESOLUTION && left.attributes.RESOLUTION.width) {\n    leftWidth = left.attributes.RESOLUTION.width;\n  }\n\n  leftWidth = leftWidth || window$1.Number.MAX_VALUE;\n\n  if (right.attributes.RESOLUTION && right.attributes.RESOLUTION.width) {\n    rightWidth = right.attributes.RESOLUTION.width;\n  }\n\n  rightWidth = rightWidth || window$1.Number.MAX_VALUE;\n\n  // NOTE - Fallback to bandwidth sort as appropriate in cases where multiple renditions\n  // have the same media dimensions/ resolution\n  if (leftWidth === rightWidth && left.attributes.BANDWIDTH && right.attributes.BANDWIDTH) {\n    return left.attributes.BANDWIDTH - right.attributes.BANDWIDTH;\n  }\n  return leftWidth - rightWidth;\n};\n\n/**\n * Chooses the appropriate media playlist based on bandwidth and player size\n *\n * @param {Object} master\n *        Object representation of the master manifest\n * @param {Number} playerBandwidth\n *        Current calculated bandwidth of the player\n * @param {Number} playerWidth\n *        Current width of the player element\n * @param {Number} playerHeight\n *        Current height of the player element\n * @return {Playlist} the highest bitrate playlist less than the\n * currently detected bandwidth, accounting for some amount of\n * bandwidth variance\n */\nvar simpleSelector = function simpleSelector(master, playerBandwidth, playerWidth, playerHeight) {\n  // convert the playlists to an intermediary representation to make comparisons easier\n  var sortedPlaylistReps = master.playlists.map(function (playlist) {\n    var width = void 0;\n    var height = void 0;\n    var bandwidth = void 0;\n\n    width = playlist.attributes.RESOLUTION && playlist.attributes.RESOLUTION.width;\n    height = playlist.attributes.RESOLUTION && playlist.attributes.RESOLUTION.height;\n    bandwidth = playlist.attributes.BANDWIDTH;\n\n    bandwidth = bandwidth || window$1.Number.MAX_VALUE;\n\n    return {\n      bandwidth: bandwidth,\n      width: width,\n      height: height,\n      playlist: playlist\n    };\n  });\n\n  stableSort(sortedPlaylistReps, function (left, right) {\n    return left.bandwidth - right.bandwidth;\n  });\n\n  // filter out any playlists that have been excluded due to\n  // incompatible configurations\n  sortedPlaylistReps = sortedPlaylistReps.filter(function (rep) {\n    return !Playlist.isIncompatible(rep.playlist);\n  });\n\n  // filter out any playlists that have been disabled manually through the representations\n  // api or blacklisted temporarily due to playback errors.\n  var enabledPlaylistReps = sortedPlaylistReps.filter(function (rep) {\n    return Playlist.isEnabled(rep.playlist);\n  });\n\n  if (!enabledPlaylistReps.length) {\n    // if there are no enabled playlists, then they have all been blacklisted or disabled\n    // by the user through the representations api. In this case, ignore blacklisting and\n    // fallback to what the user wants by using playlists the user has not disabled.\n    enabledPlaylistReps = sortedPlaylistReps.filter(function (rep) {\n      return !Playlist.isDisabled(rep.playlist);\n    });\n  }\n\n  // filter out any variant that has greater effective bitrate\n  // than the current estimated bandwidth\n  var bandwidthPlaylistReps = enabledPlaylistReps.filter(function (rep) {\n    return rep.bandwidth * Config.BANDWIDTH_VARIANCE < playerBandwidth;\n  });\n\n  var highestRemainingBandwidthRep = bandwidthPlaylistReps[bandwidthPlaylistReps.length - 1];\n\n  // get all of the renditions with the same (highest) bandwidth\n  // and then taking the very first element\n  var bandwidthBestRep = bandwidthPlaylistReps.filter(function (rep) {\n    return rep.bandwidth === highestRemainingBandwidthRep.bandwidth;\n  })[0];\n\n  // filter out playlists without resolution information\n  var haveResolution = bandwidthPlaylistReps.filter(function (rep) {\n    return rep.width && rep.height;\n  });\n\n  // sort variants by resolution\n  stableSort(haveResolution, function (left, right) {\n    return left.width - right.width;\n  });\n\n  // if we have the exact resolution as the player use it\n  var resolutionBestRepList = haveResolution.filter(function (rep) {\n    return rep.width === playerWidth && rep.height === playerHeight;\n  });\n\n  highestRemainingBandwidthRep = resolutionBestRepList[resolutionBestRepList.length - 1];\n  // ensure that we pick the highest bandwidth variant that have exact resolution\n  var resolutionBestRep = resolutionBestRepList.filter(function (rep) {\n    return rep.bandwidth === highestRemainingBandwidthRep.bandwidth;\n  })[0];\n\n  var resolutionPlusOneList = void 0;\n  var resolutionPlusOneSmallest = void 0;\n  var resolutionPlusOneRep = void 0;\n\n  // find the smallest variant that is larger than the player\n  // if there is no match of exact resolution\n  if (!resolutionBestRep) {\n    resolutionPlusOneList = haveResolution.filter(function (rep) {\n      return rep.width > playerWidth || rep.height > playerHeight;\n    });\n\n    // find all the variants have the same smallest resolution\n    resolutionPlusOneSmallest = resolutionPlusOneList.filter(function (rep) {\n      return rep.width === resolutionPlusOneList[0].width && rep.height === resolutionPlusOneList[0].height;\n    });\n\n    // ensure that we also pick the highest bandwidth variant that\n    // is just-larger-than the video player\n    highestRemainingBandwidthRep = resolutionPlusOneSmallest[resolutionPlusOneSmallest.length - 1];\n    resolutionPlusOneRep = resolutionPlusOneSmallest.filter(function (rep) {\n      return rep.bandwidth === highestRemainingBandwidthRep.bandwidth;\n    })[0];\n  }\n\n  // fallback chain of variants\n  var chosenRep = resolutionPlusOneRep || resolutionBestRep || bandwidthBestRep || enabledPlaylistReps[0] || sortedPlaylistReps[0];\n\n  return chosenRep ? chosenRep.playlist : null;\n};\n\n// Playlist Selectors\n\n/**\n * Chooses the appropriate media playlist based on the most recent\n * bandwidth estimate and the player size.\n *\n * Expects to be called within the context of an instance of HlsHandler\n *\n * @return {Playlist} the highest bitrate playlist less than the\n * currently detected bandwidth, accounting for some amount of\n * bandwidth variance\n */\nvar lastBandwidthSelector = function lastBandwidthSelector() {\n  return simpleSelector(this.playlists.master, this.systemBandwidth, parseInt(safeGetComputedStyle(this.tech_.el(), 'width'), 10), parseInt(safeGetComputedStyle(this.tech_.el(), 'height'), 10));\n};\n\n/**\n * Chooses the appropriate media playlist based on the potential to rebuffer\n *\n * @param {Object} settings\n *        Object of information required to use this selector\n * @param {Object} settings.master\n *        Object representation of the master manifest\n * @param {Number} settings.currentTime\n *        The current time of the player\n * @param {Number} settings.bandwidth\n *        Current measured bandwidth\n * @param {Number} settings.duration\n *        Duration of the media\n * @param {Number} settings.segmentDuration\n *        Segment duration to be used in round trip time calculations\n * @param {Number} settings.timeUntilRebuffer\n *        Time left in seconds until the player has to rebuffer\n * @param {Number} settings.currentTimeline\n *        The current timeline segments are being loaded from\n * @param {SyncController} settings.syncController\n *        SyncController for determining if we have a sync point for a given playlist\n * @return {Object|null}\n *         {Object} return.playlist\n *         The highest bandwidth playlist with the least amount of rebuffering\n *         {Number} return.rebufferingImpact\n *         The amount of time in seconds switching to this playlist will rebuffer. A\n *         negative value means that switching will cause zero rebuffering.\n */\nvar minRebufferMaxBandwidthSelector = function minRebufferMaxBandwidthSelector(settings) {\n  var master = settings.master,\n      currentTime = settings.currentTime,\n      bandwidth = settings.bandwidth,\n      duration$$1 = settings.duration,\n      segmentDuration = settings.segmentDuration,\n      timeUntilRebuffer = settings.timeUntilRebuffer,\n      currentTimeline = settings.currentTimeline,\n      syncController = settings.syncController;\n\n  // filter out any playlists that have been excluded due to\n  // incompatible configurations\n\n  var compatiblePlaylists = master.playlists.filter(function (playlist) {\n    return !Playlist.isIncompatible(playlist);\n  });\n\n  // filter out any playlists that have been disabled manually through the representations\n  // api or blacklisted temporarily due to playback errors.\n  var enabledPlaylists = compatiblePlaylists.filter(Playlist.isEnabled);\n\n  if (!enabledPlaylists.length) {\n    // if there are no enabled playlists, then they have all been blacklisted or disabled\n    // by the user through the representations api. In this case, ignore blacklisting and\n    // fallback to what the user wants by using playlists the user has not disabled.\n    enabledPlaylists = compatiblePlaylists.filter(function (playlist) {\n      return !Playlist.isDisabled(playlist);\n    });\n  }\n\n  var bandwidthPlaylists = enabledPlaylists.filter(Playlist.hasAttribute.bind(null, 'BANDWIDTH'));\n\n  var rebufferingEstimates = bandwidthPlaylists.map(function (playlist) {\n    var syncPoint = syncController.getSyncPoint(playlist, duration$$1, currentTimeline, currentTime);\n    // If there is no sync point for this playlist, switching to it will require a\n    // sync request first. This will double the request time\n    var numRequests = syncPoint ? 1 : 2;\n    var requestTimeEstimate = Playlist.estimateSegmentRequestTime(segmentDuration, bandwidth, playlist);\n    var rebufferingImpact = requestTimeEstimate * numRequests - timeUntilRebuffer;\n\n    return {\n      playlist: playlist,\n      rebufferingImpact: rebufferingImpact\n    };\n  });\n\n  var noRebufferingPlaylists = rebufferingEstimates.filter(function (estimate) {\n    return estimate.rebufferingImpact <= 0;\n  });\n\n  // Sort by bandwidth DESC\n  stableSort(noRebufferingPlaylists, function (a, b) {\n    return comparePlaylistBandwidth(b.playlist, a.playlist);\n  });\n\n  if (noRebufferingPlaylists.length) {\n    return noRebufferingPlaylists[0];\n  }\n\n  stableSort(rebufferingEstimates, function (a, b) {\n    return a.rebufferingImpact - b.rebufferingImpact;\n  });\n\n  return rebufferingEstimates[0] || null;\n};\n\n/**\n * Chooses the appropriate media playlist, which in this case is the lowest bitrate\n * one with video.  If no renditions with video exist, return the lowest audio rendition.\n *\n * Expects to be called within the context of an instance of HlsHandler\n *\n * @return {Object|null}\n *         {Object} return.playlist\n *         The lowest bitrate playlist that contains a video codec.  If no such rendition\n *         exists pick the lowest audio rendition.\n */\nvar lowestBitrateCompatibleVariantSelector = function lowestBitrateCompatibleVariantSelector() {\n  // filter out any playlists that have been excluded due to\n  // incompatible configurations or playback errors\n  var playlists = this.playlists.master.playlists.filter(Playlist.isEnabled);\n\n  // Sort ascending by bitrate\n  stableSort(playlists, function (a, b) {\n    return comparePlaylistBandwidth(a, b);\n  });\n\n  // Parse and assume that playlists with no video codec have no video\n  // (this is not necessarily true, although it is generally true).\n  //\n  // If an entire manifest has no valid videos everything will get filtered\n  // out.\n  var playlistsWithVideo = playlists.filter(function (playlist) {\n    return parseCodecs(playlist.attributes.CODECS).videoCodec;\n  });\n\n  return playlistsWithVideo[0] || null;\n};\n\n/**\n * Create captions text tracks on video.js if they do not exist\n *\n * @param {Object} inbandTextTracks a reference to current inbandTextTracks\n * @param {Object} tech the video.js tech\n * @param {Object} captionStreams the caption streams to create\n * @private\n */\nvar createCaptionsTrackIfNotExists = function createCaptionsTrackIfNotExists(inbandTextTracks, tech, captionStreams) {\n  for (var trackId in captionStreams) {\n    if (!inbandTextTracks[trackId]) {\n      tech.trigger({ type: 'usage', name: 'hls-608' });\n      var track = tech.textTracks().getTrackById(trackId);\n\n      if (track) {\n        // Resuse an existing track with a CC# id because this was\n        // very likely created by videojs-contrib-hls from information\n        // in the m3u8 for us to use\n        inbandTextTracks[trackId] = track;\n      } else {\n        // Otherwise, create a track with the default `CC#` label and\n        // without a language\n        inbandTextTracks[trackId] = tech.addRemoteTextTrack({\n          kind: 'captions',\n          id: trackId,\n          label: trackId\n        }, false).track;\n      }\n    }\n  }\n};\n\nvar addCaptionData = function addCaptionData(_ref) {\n  var inbandTextTracks = _ref.inbandTextTracks,\n      captionArray = _ref.captionArray,\n      timestampOffset = _ref.timestampOffset;\n\n  if (!captionArray) {\n    return;\n  }\n\n  var Cue = window.WebKitDataCue || window.VTTCue;\n\n  captionArray.forEach(function (caption) {\n    var track = caption.stream;\n    var startTime = caption.startTime;\n    var endTime = caption.endTime;\n\n    if (!inbandTextTracks[track]) {\n      return;\n    }\n\n    startTime += timestampOffset;\n    endTime += timestampOffset;\n\n    inbandTextTracks[track].addCue(new Cue(startTime, endTime, caption.text));\n  });\n};\n\n/**\n * @file segment-loader.js\n */\n\n// in ms\nvar CHECK_BUFFER_DELAY = 500;\n\n/**\n * Determines if we should call endOfStream on the media source based\n * on the state of the buffer or if appened segment was the final\n * segment in the playlist.\n *\n * @param {Object} playlist a media playlist object\n * @param {Object} mediaSource the MediaSource object\n * @param {Number} segmentIndex the index of segment we last appended\n * @returns {Boolean} do we need to call endOfStream on the MediaSource\n */\nvar detectEndOfStream = function detectEndOfStream(playlist, mediaSource, segmentIndex) {\n  if (!playlist || !mediaSource) {\n    return false;\n  }\n\n  var segments = playlist.segments;\n\n  // determine a few boolean values to help make the branch below easier\n  // to read\n  var appendedLastSegment = segmentIndex === segments.length;\n\n  // if we've buffered to the end of the video, we need to call endOfStream\n  // so that MediaSources can trigger the `ended` event when it runs out of\n  // buffered data instead of waiting for me\n  return playlist.endList && mediaSource.readyState === 'open' && appendedLastSegment;\n};\n\nvar finite = function finite(num) {\n  return typeof num === 'number' && isFinite(num);\n};\n\nvar illegalMediaSwitch = function illegalMediaSwitch(loaderType, startingMedia, newSegmentMedia) {\n  // Although these checks should most likely cover non 'main' types, for now it narrows\n  // the scope of our checks.\n  if (loaderType !== 'main' || !startingMedia || !newSegmentMedia) {\n    return null;\n  }\n\n  if (!newSegmentMedia.containsAudio && !newSegmentMedia.containsVideo) {\n    return 'Neither audio nor video found in segment.';\n  }\n\n  if (startingMedia.containsVideo && !newSegmentMedia.containsVideo) {\n    return 'Only audio found in segment when we expected video.' + ' We can\\'t switch to audio only from a stream that had video.' + ' To get rid of this message, please add codec information to the manifest.';\n  }\n\n  if (!startingMedia.containsVideo && newSegmentMedia.containsVideo) {\n    return 'Video found in segment when we expected only audio.' + ' We can\\'t switch to a stream with video from an audio only stream.' + ' To get rid of this message, please add codec information to the manifest.';\n  }\n\n  return null;\n};\n\n/**\n * Calculates a time value that is safe to remove from the back buffer without interupting\n * playback.\n *\n * @param {TimeRange} seekable\n *        The current seekable range\n * @param {Number} currentTime\n *        The current time of the player\n * @param {Number} targetDuration\n *        The target duration of the current playlist\n * @return {Number}\n *         Time that is safe to remove from the back buffer without interupting playback\n */\nvar safeBackBufferTrimTime = function safeBackBufferTrimTime(seekable$$1, currentTime, targetDuration) {\n  var removeToTime = void 0;\n\n  if (seekable$$1.length && seekable$$1.start(0) > 0 && seekable$$1.start(0) < currentTime) {\n    // If we have a seekable range use that as the limit for what can be removed safely\n    removeToTime = seekable$$1.start(0);\n  } else {\n    // otherwise remove anything older than 30 seconds before the current play head\n    removeToTime = currentTime - 30;\n  }\n\n  // Don't allow removing from the buffer within target duration of current time\n  // to avoid the possibility of removing the GOP currently being played which could\n  // cause playback stalls.\n  return Math.min(removeToTime, currentTime - targetDuration);\n};\n\nvar segmentInfoString = function segmentInfoString(segmentInfo) {\n  var _segmentInfo$segment = segmentInfo.segment,\n      start = _segmentInfo$segment.start,\n      end = _segmentInfo$segment.end,\n      _segmentInfo$playlist = segmentInfo.playlist,\n      seq = _segmentInfo$playlist.mediaSequence,\n      id = _segmentInfo$playlist.id,\n      _segmentInfo$playlist2 = _segmentInfo$playlist.segments,\n      segments = _segmentInfo$playlist2 === undefined ? [] : _segmentInfo$playlist2,\n      index = segmentInfo.mediaIndex,\n      timeline = segmentInfo.timeline;\n\n  return ['appending [' + index + '] of [' + seq + ', ' + (seq + segments.length) + '] from playlist [' + id + ']', '[' + start + ' => ' + end + '] in timeline [' + timeline + ']'].join(' ');\n};\n\n/**\n * An object that manages segment loading and appending.\n *\n * @class SegmentLoader\n * @param {Object} options required and optional options\n * @extends videojs.EventTarget\n */\n\nvar SegmentLoader = function (_videojs$EventTarget) {\n  inherits$1(SegmentLoader, _videojs$EventTarget);\n\n  function SegmentLoader(settings) {\n    classCallCheck$1(this, SegmentLoader);\n\n    // check pre-conditions\n    var _this = possibleConstructorReturn$1(this, (SegmentLoader.__proto__ || Object.getPrototypeOf(SegmentLoader)).call(this));\n\n    if (!settings) {\n      throw new TypeError('Initialization settings are required');\n    }\n    if (typeof settings.currentTime !== 'function') {\n      throw new TypeError('No currentTime getter specified');\n    }\n    if (!settings.mediaSource) {\n      throw new TypeError('No MediaSource specified');\n    }\n    // public properties\n    _this.bandwidth = settings.bandwidth;\n    _this.throughput = { rate: 0, count: 0 };\n    _this.roundTrip = NaN;\n    _this.resetStats_();\n    _this.mediaIndex = null;\n\n    // private settings\n    _this.hasPlayed_ = settings.hasPlayed;\n    _this.currentTime_ = settings.currentTime;\n    _this.seekable_ = settings.seekable;\n    _this.seeking_ = settings.seeking;\n    _this.duration_ = settings.duration;\n    _this.mediaSource_ = settings.mediaSource;\n    _this.hls_ = settings.hls;\n    _this.loaderType_ = settings.loaderType;\n    _this.startingMedia_ = void 0;\n    _this.segmentMetadataTrack_ = settings.segmentMetadataTrack;\n    _this.goalBufferLength_ = settings.goalBufferLength;\n    _this.sourceType_ = settings.sourceType;\n    _this.inbandTextTracks_ = settings.inbandTextTracks;\n    _this.state_ = 'INIT';\n\n    // private instance variables\n    _this.checkBufferTimeout_ = null;\n    _this.error_ = void 0;\n    _this.currentTimeline_ = -1;\n    _this.pendingSegment_ = null;\n    _this.mimeType_ = null;\n    _this.sourceUpdater_ = null;\n    _this.xhrOptions_ = null;\n\n    // Fragmented mp4 playback\n    _this.activeInitSegmentId_ = null;\n    _this.initSegments_ = {};\n    // Fmp4 CaptionParser\n    _this.captionParser_ = new CaptionParser();\n\n    _this.decrypter_ = settings.decrypter;\n\n    // Manages the tracking and generation of sync-points, mappings\n    // between a time in the display time and a segment index within\n    // a playlist\n    _this.syncController_ = settings.syncController;\n    _this.syncPoint_ = {\n      segmentIndex: 0,\n      time: 0\n    };\n\n    _this.syncController_.on('syncinfoupdate', function () {\n      return _this.trigger('syncinfoupdate');\n    });\n\n    _this.mediaSource_.addEventListener('sourceopen', function () {\n      return _this.ended_ = false;\n    });\n\n    // ...for determining the fetch location\n    _this.fetchAtBuffer_ = false;\n\n    _this.logger_ = logger('SegmentLoader[' + _this.loaderType_ + ']');\n\n    Object.defineProperty(_this, 'state', {\n      get: function get$$1() {\n        return this.state_;\n      },\n      set: function set$$1(newState) {\n        if (newState !== this.state_) {\n          this.logger_(this.state_ + ' -> ' + newState);\n          this.state_ = newState;\n        }\n      }\n    });\n    return _this;\n  }\n\n  /**\n   * reset all of our media stats\n   *\n   * @private\n   */\n\n  createClass$1(SegmentLoader, [{\n    key: 'resetStats_',\n    value: function resetStats_() {\n      this.mediaBytesTransferred = 0;\n      this.mediaRequests = 0;\n      this.mediaRequestsAborted = 0;\n      this.mediaRequestsTimedout = 0;\n      this.mediaRequestsErrored = 0;\n      this.mediaTransferDuration = 0;\n      this.mediaSecondsLoaded = 0;\n    }\n\n    /**\n     * dispose of the SegmentLoader and reset to the default state\n     */\n\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.state = 'DISPOSED';\n      this.pause();\n      this.abort_();\n      if (this.sourceUpdater_) {\n        this.sourceUpdater_.dispose();\n      }\n      this.resetStats_();\n      this.captionParser_.reset();\n    }\n\n    /**\n     * abort anything that is currently doing on with the SegmentLoader\n     * and reset to a default state\n     */\n\n  }, {\n    key: 'abort',\n    value: function abort() {\n      if (this.state !== 'WAITING') {\n        if (this.pendingSegment_) {\n          this.pendingSegment_ = null;\n        }\n        return;\n      }\n\n      this.abort_();\n\n      // We aborted the requests we were waiting on, so reset the loader's state to READY\n      // since we are no longer \"waiting\" on any requests. XHR callback is not always run\n      // when the request is aborted. This will prevent the loader from being stuck in the\n      // WAITING state indefinitely.\n      this.state = 'READY';\n\n      // don't wait for buffer check timeouts to begin fetching the\n      // next segment\n      if (!this.paused()) {\n        this.monitorBuffer_();\n      }\n    }\n\n    /**\n     * abort all pending xhr requests and null any pending segements\n     *\n     * @private\n     */\n\n  }, {\n    key: 'abort_',\n    value: function abort_() {\n      if (this.pendingSegment_) {\n        this.pendingSegment_.abortRequests();\n      }\n\n      // clear out the segment being processed\n      this.pendingSegment_ = null;\n    }\n\n    /**\n     * set an error on the segment loader and null out any pending segements\n     *\n     * @param {Error} error the error to set on the SegmentLoader\n     * @return {Error} the error that was set or that is currently set\n     */\n\n  }, {\n    key: 'error',\n    value: function error(_error) {\n      if (typeof _error !== 'undefined') {\n        this.error_ = _error;\n      }\n\n      this.pendingSegment_ = null;\n      return this.error_;\n    }\n  }, {\n    key: 'endOfStream',\n    value: function endOfStream() {\n      this.ended_ = true;\n      this.pause();\n      this.trigger('ended');\n    }\n\n    /**\n     * Indicates which time ranges are buffered\n     *\n     * @return {TimeRange}\n     *         TimeRange object representing the current buffered ranges\n     */\n\n  }, {\n    key: 'buffered_',\n    value: function buffered_() {\n      if (!this.sourceUpdater_) {\n        return videojs$1.createTimeRanges();\n      }\n\n      return this.sourceUpdater_.buffered();\n    }\n\n    /**\n     * Gets and sets init segment for the provided map\n     *\n     * @param {Object} map\n     *        The map object representing the init segment to get or set\n     * @param {Boolean=} set\n     *        If true, the init segment for the provided map should be saved\n     * @return {Object}\n     *         map object for desired init segment\n     */\n\n  }, {\n    key: 'initSegment',\n    value: function initSegment(map) {\n      var set$$1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (!map) {\n        return null;\n      }\n\n      var id = initSegmentId(map);\n      var storedMap = this.initSegments_[id];\n\n      if (set$$1 && !storedMap && map.bytes) {\n        this.initSegments_[id] = storedMap = {\n          resolvedUri: map.resolvedUri,\n          byterange: map.byterange,\n          bytes: map.bytes,\n          timescales: map.timescales,\n          videoTrackIds: map.videoTrackIds\n        };\n      }\n\n      return storedMap || map;\n    }\n\n    /**\n     * Returns true if all configuration required for loading is present, otherwise false.\n     *\n     * @return {Boolean} True if the all configuration is ready for loading\n     * @private\n     */\n\n  }, {\n    key: 'couldBeginLoading_',\n    value: function couldBeginLoading_() {\n      return this.playlist_ && (\n      // the source updater is created when init_ is called, so either having a\n      // source updater or being in the INIT state with a mimeType is enough\n      // to say we have all the needed configuration to start loading.\n      this.sourceUpdater_ || this.mimeType_ && this.state === 'INIT') && !this.paused();\n    }\n\n    /**\n     * load a playlist and start to fill the buffer\n     */\n\n  }, {\n    key: 'load',\n    value: function load() {\n      // un-pause\n      this.monitorBuffer_();\n\n      // if we don't have a playlist yet, keep waiting for one to be\n      // specified\n      if (!this.playlist_) {\n        return;\n      }\n\n      // not sure if this is the best place for this\n      this.syncController_.setDateTimeMapping(this.playlist_);\n\n      // if all the configuration is ready, initialize and begin loading\n      if (this.state === 'INIT' && this.couldBeginLoading_()) {\n        return this.init_();\n      }\n\n      // if we're in the middle of processing a segment already, don't\n      // kick off an additional segment request\n      if (!this.couldBeginLoading_() || this.state !== 'READY' && this.state !== 'INIT') {\n        return;\n      }\n\n      this.state = 'READY';\n    }\n\n    /**\n     * Once all the starting parameters have been specified, begin\n     * operation. This method should only be invoked from the INIT\n     * state.\n     *\n     * @private\n     */\n\n  }, {\n    key: 'init_',\n    value: function init_() {\n      this.state = 'READY';\n      this.sourceUpdater_ = new SourceUpdater(this.mediaSource_, this.mimeType_, this.loaderType_, this.sourceBufferEmitter_);\n      this.resetEverything();\n      return this.monitorBuffer_();\n    }\n\n    /**\n     * set a playlist on the segment loader\n     *\n     * @param {PlaylistLoader} media the playlist to set on the segment loader\n     */\n\n  }, {\n    key: 'playlist',\n    value: function playlist(newPlaylist) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (!newPlaylist) {\n        return;\n      }\n\n      var oldPlaylist = this.playlist_;\n      var segmentInfo = this.pendingSegment_;\n\n      this.playlist_ = newPlaylist;\n      this.xhrOptions_ = options;\n\n      // when we haven't started playing yet, the start of a live playlist\n      // is always our zero-time so force a sync update each time the playlist\n      // is refreshed from the server\n      if (!this.hasPlayed_()) {\n        newPlaylist.syncInfo = {\n          mediaSequence: newPlaylist.mediaSequence,\n          time: 0\n        };\n      }\n\n      var oldId = oldPlaylist ? oldPlaylist.id : null;\n\n      this.logger_('playlist update [' + oldId + ' => ' + newPlaylist.id + ']');\n\n      // in VOD, this is always a rendition switch (or we updated our syncInfo above)\n      // in LIVE, we always want to update with new playlists (including refreshes)\n      this.trigger('syncinfoupdate');\n\n      // if we were unpaused but waiting for a playlist, start\n      // buffering now\n      if (this.state === 'INIT' && this.couldBeginLoading_()) {\n        return this.init_();\n      }\n\n      if (!oldPlaylist || oldPlaylist.uri !== newPlaylist.uri) {\n        if (this.mediaIndex !== null) {\n          // we must \"resync\" the segment loader when we switch renditions and\n          // the segment loader is already synced to the previous rendition\n          this.resyncLoader();\n        }\n\n        // the rest of this function depends on `oldPlaylist` being defined\n        return;\n      }\n\n      // we reloaded the same playlist so we are in a live scenario\n      // and we will likely need to adjust the mediaIndex\n      var mediaSequenceDiff = newPlaylist.mediaSequence - oldPlaylist.mediaSequence;\n\n      this.logger_('live window shift [' + mediaSequenceDiff + ']');\n\n      // update the mediaIndex on the SegmentLoader\n      // this is important because we can abort a request and this value must be\n      // equal to the last appended mediaIndex\n      if (this.mediaIndex !== null) {\n        this.mediaIndex -= mediaSequenceDiff;\n      }\n\n      // update the mediaIndex on the SegmentInfo object\n      // this is important because we will update this.mediaIndex with this value\n      // in `handleUpdateEnd_` after the segment has been successfully appended\n      if (segmentInfo) {\n        segmentInfo.mediaIndex -= mediaSequenceDiff;\n\n        // we need to update the referenced segment so that timing information is\n        // saved for the new playlist's segment, however, if the segment fell off the\n        // playlist, we can leave the old reference and just lose the timing info\n        if (segmentInfo.mediaIndex >= 0) {\n          segmentInfo.segment = newPlaylist.segments[segmentInfo.mediaIndex];\n        }\n      }\n\n      this.syncController_.saveExpiredSegmentInfo(oldPlaylist, newPlaylist);\n    }\n\n    /**\n     * Prevent the loader from fetching additional segments. If there\n     * is a segment request outstanding, it will finish processing\n     * before the loader halts. A segment loader can be unpaused by\n     * calling load().\n     */\n\n  }, {\n    key: 'pause',\n    value: function pause() {\n      if (this.checkBufferTimeout_) {\n        window$1.clearTimeout(this.checkBufferTimeout_);\n\n        this.checkBufferTimeout_ = null;\n      }\n    }\n\n    /**\n     * Returns whether the segment loader is fetching additional\n     * segments when given the opportunity. This property can be\n     * modified through calls to pause() and load().\n     */\n\n  }, {\n    key: 'paused',\n    value: function paused() {\n      return this.checkBufferTimeout_ === null;\n    }\n\n    /**\n     * create/set the following mimetype on the SourceBuffer through a\n     * SourceUpdater\n     *\n     * @param {String} mimeType the mime type string to use\n     * @param {Object} sourceBufferEmitter an event emitter that fires when a source buffer\n     * is added to the media source\n     */\n\n  }, {\n    key: 'mimeType',\n    value: function mimeType(_mimeType, sourceBufferEmitter) {\n      if (this.mimeType_) {\n        return;\n      }\n\n      this.mimeType_ = _mimeType;\n      this.sourceBufferEmitter_ = sourceBufferEmitter;\n      // if we were unpaused but waiting for a sourceUpdater, start\n      // buffering now\n      if (this.state === 'INIT' && this.couldBeginLoading_()) {\n        this.init_();\n      }\n    }\n\n    /**\n     * Delete all the buffered data and reset the SegmentLoader\n     * @param {Function} [done] an optional callback to be executed when the remove\n     * operation is complete\n     */\n\n  }, {\n    key: 'resetEverything',\n    value: function resetEverything(done) {\n      this.ended_ = false;\n      this.resetLoader();\n      this.remove(0, this.duration_(), done);\n      // clears fmp4 captions\n      this.captionParser_.clearAllCaptions();\n      this.trigger('reseteverything');\n    }\n\n    /**\n     * Force the SegmentLoader to resync and start loading around the currentTime instead\n     * of starting at the end of the buffer\n     *\n     * Useful for fast quality changes\n     */\n\n  }, {\n    key: 'resetLoader',\n    value: function resetLoader() {\n      this.fetchAtBuffer_ = false;\n      this.resyncLoader();\n    }\n\n    /**\n     * Force the SegmentLoader to restart synchronization and make a conservative guess\n     * before returning to the simple walk-forward method\n     */\n\n  }, {\n    key: 'resyncLoader',\n    value: function resyncLoader() {\n      this.mediaIndex = null;\n      this.syncPoint_ = null;\n      this.abort();\n    }\n\n    /**\n     * Remove any data in the source buffer between start and end times\n     * @param {Number} start - the start time of the region to remove from the buffer\n     * @param {Number} end - the end time of the region to remove from the buffer\n     * @param {Function} [done] - an optional callback to be executed when the remove\n     * operation is complete\n     */\n\n  }, {\n    key: 'remove',\n    value: function remove(start, end, done) {\n      if (this.sourceUpdater_) {\n        this.sourceUpdater_.remove(start, end, done);\n      }\n      removeCuesFromTrack(start, end, this.segmentMetadataTrack_);\n\n      if (this.inbandTextTracks_) {\n        for (var id in this.inbandTextTracks_) {\n          removeCuesFromTrack(start, end, this.inbandTextTracks_[id]);\n        }\n      }\n    }\n\n    /**\n     * (re-)schedule monitorBufferTick_ to run as soon as possible\n     *\n     * @private\n     */\n\n  }, {\n    key: 'monitorBuffer_',\n    value: function monitorBuffer_() {\n      if (this.checkBufferTimeout_) {\n        window$1.clearTimeout(this.checkBufferTimeout_);\n      }\n\n      this.checkBufferTimeout_ = window$1.setTimeout(this.monitorBufferTick_.bind(this), 1);\n    }\n\n    /**\n     * As long as the SegmentLoader is in the READY state, periodically\n     * invoke fillBuffer_().\n     *\n     * @private\n     */\n\n  }, {\n    key: 'monitorBufferTick_',\n    value: function monitorBufferTick_() {\n      if (this.state === 'READY') {\n        this.fillBuffer_();\n      }\n\n      if (this.checkBufferTimeout_) {\n        window$1.clearTimeout(this.checkBufferTimeout_);\n      }\n\n      this.checkBufferTimeout_ = window$1.setTimeout(this.monitorBufferTick_.bind(this), CHECK_BUFFER_DELAY);\n    }\n\n    /**\n     * fill the buffer with segements unless the sourceBuffers are\n     * currently updating\n     *\n     * Note: this function should only ever be called by monitorBuffer_\n     * and never directly\n     *\n     * @private\n     */\n\n  }, {\n    key: 'fillBuffer_',\n    value: function fillBuffer_() {\n      if (this.sourceUpdater_.updating()) {\n        return;\n      }\n\n      if (!this.syncPoint_) {\n        this.syncPoint_ = this.syncController_.getSyncPoint(this.playlist_, this.duration_(), this.currentTimeline_, this.currentTime_());\n      }\n\n      // see if we need to begin loading immediately\n      var segmentInfo = this.checkBuffer_(this.buffered_(), this.playlist_, this.mediaIndex, this.hasPlayed_(), this.currentTime_(), this.syncPoint_);\n\n      if (!segmentInfo) {\n        return;\n      }\n\n      var isEndOfStream = detectEndOfStream(this.playlist_, this.mediaSource_, segmentInfo.mediaIndex);\n\n      if (isEndOfStream) {\n        this.endOfStream();\n        return;\n      }\n\n      if (segmentInfo.mediaIndex === this.playlist_.segments.length - 1 && this.mediaSource_.readyState === 'ended' && !this.seeking_()) {\n        return;\n      }\n\n      // We will need to change timestampOffset of the sourceBuffer if either of\n      // the following conditions are true:\n      // - The segment.timeline !== this.currentTimeline\n      //   (we are crossing a discontinuity somehow)\n      // - The \"timestampOffset\" for the start of this segment is less than\n      //   the currently set timestampOffset\n      // Also, clear captions if we are crossing a discontinuity boundary\n      if (segmentInfo.timeline !== this.currentTimeline_ || segmentInfo.startOfSegment !== null && segmentInfo.startOfSegment < this.sourceUpdater_.timestampOffset()) {\n        this.syncController_.reset();\n        segmentInfo.timestampOffset = segmentInfo.startOfSegment;\n        this.captionParser_.clearAllCaptions();\n      }\n\n      this.loadSegment_(segmentInfo);\n    }\n\n    /**\n     * Determines what segment request should be made, given current playback\n     * state.\n     *\n     * @param {TimeRanges} buffered - the state of the buffer\n     * @param {Object} playlist - the playlist object to fetch segments from\n     * @param {Number} mediaIndex - the previous mediaIndex fetched or null\n     * @param {Boolean} hasPlayed - a flag indicating whether we have played or not\n     * @param {Number} currentTime - the playback position in seconds\n     * @param {Object} syncPoint - a segment info object that describes the\n     * @returns {Object} a segment request object that describes the segment to load\n     */\n\n  }, {\n    key: 'checkBuffer_',\n    value: function checkBuffer_(buffered, playlist, mediaIndex, hasPlayed, currentTime, syncPoint) {\n      var lastBufferedEnd = 0;\n      var startOfSegment = void 0;\n\n      if (buffered.length) {\n        lastBufferedEnd = buffered.end(buffered.length - 1);\n      }\n\n      var bufferedTime = Math.max(0, lastBufferedEnd - currentTime);\n\n      if (!playlist.segments.length) {\n        return null;\n      }\n\n      // if there is plenty of content buffered, and the video has\n      // been played before relax for awhile\n      if (bufferedTime >= this.goalBufferLength_()) {\n        return null;\n      }\n\n      // if the video has not yet played once, and we already have\n      // one segment downloaded do nothing\n      if (!hasPlayed && bufferedTime >= 1) {\n        return null;\n      }\n\n      // When the syncPoint is null, there is no way of determining a good\n      // conservative segment index to fetch from\n      // The best thing to do here is to get the kind of sync-point data by\n      // making a request\n      if (syncPoint === null) {\n        mediaIndex = this.getSyncSegmentCandidate_(playlist);\n        return this.generateSegmentInfo_(playlist, mediaIndex, null, true);\n      }\n\n      // Under normal playback conditions fetching is a simple walk forward\n      if (mediaIndex !== null) {\n        var segment = playlist.segments[mediaIndex];\n\n        if (segment && segment.end) {\n          startOfSegment = segment.end;\n        } else {\n          startOfSegment = lastBufferedEnd;\n        }\n        return this.generateSegmentInfo_(playlist, mediaIndex + 1, startOfSegment, false);\n      }\n\n      // There is a sync-point but the lack of a mediaIndex indicates that\n      // we need to make a good conservative guess about which segment to\n      // fetch\n      if (this.fetchAtBuffer_) {\n        // Find the segment containing the end of the buffer\n        var mediaSourceInfo = Playlist.getMediaInfoForTime(playlist, lastBufferedEnd, syncPoint.segmentIndex, syncPoint.time);\n\n        mediaIndex = mediaSourceInfo.mediaIndex;\n        startOfSegment = mediaSourceInfo.startTime;\n      } else {\n        // Find the segment containing currentTime\n        var _mediaSourceInfo = Playlist.getMediaInfoForTime(playlist, currentTime, syncPoint.segmentIndex, syncPoint.time);\n\n        mediaIndex = _mediaSourceInfo.mediaIndex;\n        startOfSegment = _mediaSourceInfo.startTime;\n      }\n\n      return this.generateSegmentInfo_(playlist, mediaIndex, startOfSegment, false);\n    }\n\n    /**\n     * The segment loader has no recourse except to fetch a segment in the\n     * current playlist and use the internal timestamps in that segment to\n     * generate a syncPoint. This function returns a good candidate index\n     * for that process.\n     *\n     * @param {Object} playlist - the playlist object to look for a\n     * @returns {Number} An index of a segment from the playlist to load\n     */\n\n  }, {\n    key: 'getSyncSegmentCandidate_',\n    value: function getSyncSegmentCandidate_(playlist) {\n      var _this2 = this;\n\n      if (this.currentTimeline_ === -1) {\n        return 0;\n      }\n\n      var segmentIndexArray = playlist.segments.map(function (s, i) {\n        return {\n          timeline: s.timeline,\n          segmentIndex: i\n        };\n      }).filter(function (s) {\n        return s.timeline === _this2.currentTimeline_;\n      });\n\n      if (segmentIndexArray.length) {\n        return segmentIndexArray[Math.min(segmentIndexArray.length - 1, 1)].segmentIndex;\n      }\n\n      return Math.max(playlist.segments.length - 1, 0);\n    }\n  }, {\n    key: 'generateSegmentInfo_',\n    value: function generateSegmentInfo_(playlist, mediaIndex, startOfSegment, isSyncRequest) {\n      if (mediaIndex < 0 || mediaIndex >= playlist.segments.length) {\n        return null;\n      }\n\n      var segment = playlist.segments[mediaIndex];\n\n      return {\n        requestId: 'segment-loader-' + Math.random(),\n        // resolve the segment URL relative to the playlist\n        uri: segment.resolvedUri,\n        // the segment's mediaIndex at the time it was requested\n        mediaIndex: mediaIndex,\n        // whether or not to update the SegmentLoader's state with this\n        // segment's mediaIndex\n        isSyncRequest: isSyncRequest,\n        startOfSegment: startOfSegment,\n        // the segment's playlist\n        playlist: playlist,\n        // unencrypted bytes of the segment\n        bytes: null,\n        // when a key is defined for this segment, the encrypted bytes\n        encryptedBytes: null,\n        // The target timestampOffset for this segment when we append it\n        // to the source buffer\n        timestampOffset: null,\n        // The timeline that the segment is in\n        timeline: segment.timeline,\n        // The expected duration of the segment in seconds\n        duration: segment.duration,\n        // retain the segment in case the playlist updates while doing an async process\n        segment: segment\n      };\n    }\n\n    /**\n     * Determines if the network has enough bandwidth to complete the current segment\n     * request in a timely manner. If not, the request will be aborted early and bandwidth\n     * updated to trigger a playlist switch.\n     *\n     * @param {Object} stats\n     *        Object containing stats about the request timing and size\n     * @return {Boolean} True if the request was aborted, false otherwise\n     * @private\n     */\n\n  }, {\n    key: 'abortRequestEarly_',\n    value: function abortRequestEarly_(stats) {\n      if (this.hls_.tech_.paused() ||\n      // Don't abort if the current playlist is on the lowestEnabledRendition\n      // TODO: Replace using timeout with a boolean indicating whether this playlist is\n      //       the lowestEnabledRendition.\n      !this.xhrOptions_.timeout ||\n      // Don't abort if we have no bandwidth information to estimate segment sizes\n      !this.playlist_.attributes.BANDWIDTH) {\n        return false;\n      }\n\n      // Wait at least 1 second since the first byte of data has been received before\n      // using the calculated bandwidth from the progress event to allow the bitrate\n      // to stabilize\n      if (Date.now() - (stats.firstBytesReceivedAt || Date.now()) < 1000) {\n        return false;\n      }\n\n      var currentTime = this.currentTime_();\n      var measuredBandwidth = stats.bandwidth;\n      var segmentDuration = this.pendingSegment_.duration;\n\n      var requestTimeRemaining = Playlist.estimateSegmentRequestTime(segmentDuration, measuredBandwidth, this.playlist_, stats.bytesReceived);\n\n      // Subtract 1 from the timeUntilRebuffer so we still consider an early abort\n      // if we are only left with less than 1 second when the request completes.\n      // A negative timeUntilRebuffering indicates we are already rebuffering\n      var timeUntilRebuffer$$1 = timeUntilRebuffer(this.buffered_(), currentTime, this.hls_.tech_.playbackRate()) - 1;\n\n      // Only consider aborting early if the estimated time to finish the download\n      // is larger than the estimated time until the player runs out of forward buffer\n      if (requestTimeRemaining <= timeUntilRebuffer$$1) {\n        return false;\n      }\n\n      var switchCandidate = minRebufferMaxBandwidthSelector({\n        master: this.hls_.playlists.master,\n        currentTime: currentTime,\n        bandwidth: measuredBandwidth,\n        duration: this.duration_(),\n        segmentDuration: segmentDuration,\n        timeUntilRebuffer: timeUntilRebuffer$$1,\n        currentTimeline: this.currentTimeline_,\n        syncController: this.syncController_\n      });\n\n      if (!switchCandidate) {\n        return;\n      }\n\n      var rebufferingImpact = requestTimeRemaining - timeUntilRebuffer$$1;\n\n      var timeSavedBySwitching = rebufferingImpact - switchCandidate.rebufferingImpact;\n\n      var minimumTimeSaving = 0.5;\n\n      // If we are already rebuffering, increase the amount of variance we add to the\n      // potential round trip time of the new request so that we are not too aggressive\n      // with switching to a playlist that might save us a fraction of a second.\n      if (timeUntilRebuffer$$1 <= TIME_FUDGE_FACTOR) {\n        minimumTimeSaving = 1;\n      }\n\n      if (!switchCandidate.playlist || switchCandidate.playlist.uri === this.playlist_.uri || timeSavedBySwitching < minimumTimeSaving) {\n        return false;\n      }\n\n      // set the bandwidth to that of the desired playlist being sure to scale by\n      // BANDWIDTH_VARIANCE and add one so the playlist selector does not exclude it\n      // don't trigger a bandwidthupdate as the bandwidth is artifial\n      this.bandwidth = switchCandidate.playlist.attributes.BANDWIDTH * Config.BANDWIDTH_VARIANCE + 1;\n      this.abort();\n      this.trigger('earlyabort');\n      return true;\n    }\n\n    /**\n     * XHR `progress` event handler\n     *\n     * @param {Event}\n     *        The XHR `progress` event\n     * @param {Object} simpleSegment\n     *        A simplified segment object copy\n     * @private\n     */\n\n  }, {\n    key: 'handleProgress_',\n    value: function handleProgress_(event, simpleSegment) {\n      if (!this.pendingSegment_ || simpleSegment.requestId !== this.pendingSegment_.requestId || this.abortRequestEarly_(simpleSegment.stats)) {\n        return;\n      }\n\n      this.trigger('progress');\n    }\n\n    /**\n     * load a specific segment from a request into the buffer\n     *\n     * @private\n     */\n\n  }, {\n    key: 'loadSegment_',\n    value: function loadSegment_(segmentInfo) {\n      this.state = 'WAITING';\n      this.pendingSegment_ = segmentInfo;\n      this.trimBackBuffer_(segmentInfo);\n\n      segmentInfo.abortRequests = mediaSegmentRequest(this.hls_.xhr, this.xhrOptions_, this.decrypter_, this.captionParser_, this.createSimplifiedSegmentObj_(segmentInfo),\n      // progress callback\n      this.handleProgress_.bind(this), this.segmentRequestFinished_.bind(this));\n    }\n\n    /**\n     * trim the back buffer so that we don't have too much data\n     * in the source buffer\n     *\n     * @private\n     *\n     * @param {Object} segmentInfo - the current segment\n     */\n\n  }, {\n    key: 'trimBackBuffer_',\n    value: function trimBackBuffer_(segmentInfo) {\n      var removeToTime = safeBackBufferTrimTime(this.seekable_(), this.currentTime_(), this.playlist_.targetDuration || 10);\n\n      // Chrome has a hard limit of 150MB of\n      // buffer and a very conservative \"garbage collector\"\n      // We manually clear out the old buffer to ensure\n      // we don't trigger the QuotaExceeded error\n      // on the source buffer during subsequent appends\n\n      if (removeToTime > 0) {\n        this.remove(0, removeToTime);\n      }\n    }\n\n    /**\n     * created a simplified copy of the segment object with just the\n     * information necessary to perform the XHR and decryption\n     *\n     * @private\n     *\n     * @param {Object} segmentInfo - the current segment\n     * @returns {Object} a simplified segment object copy\n     */\n\n  }, {\n    key: 'createSimplifiedSegmentObj_',\n    value: function createSimplifiedSegmentObj_(segmentInfo) {\n      var segment = segmentInfo.segment;\n      var simpleSegment = {\n        resolvedUri: segment.resolvedUri,\n        byterange: segment.byterange,\n        requestId: segmentInfo.requestId\n      };\n\n      if (segment.key) {\n        // if the media sequence is greater than 2^32, the IV will be incorrect\n        // assuming 10s segments, that would be about 1300 years\n        var iv = segment.key.iv || new Uint32Array([0, 0, 0, segmentInfo.mediaIndex + segmentInfo.playlist.mediaSequence]);\n\n        simpleSegment.key = {\n          resolvedUri: segment.key.resolvedUri,\n          iv: iv\n        };\n      }\n\n      if (segment.map) {\n        simpleSegment.map = this.initSegment(segment.map);\n      }\n\n      return simpleSegment;\n    }\n\n    /**\n     * Handle the callback from the segmentRequest function and set the\n     * associated SegmentLoader state and errors if necessary\n     *\n     * @private\n     */\n\n  }, {\n    key: 'segmentRequestFinished_',\n    value: function segmentRequestFinished_(error, simpleSegment) {\n      // every request counts as a media request even if it has been aborted\n      // or canceled due to a timeout\n      this.mediaRequests += 1;\n\n      if (simpleSegment.stats) {\n        this.mediaBytesTransferred += simpleSegment.stats.bytesReceived;\n        this.mediaTransferDuration += simpleSegment.stats.roundTripTime;\n      }\n\n      // The request was aborted and the SegmentLoader has already been reset\n      if (!this.pendingSegment_) {\n        this.mediaRequestsAborted += 1;\n        return;\n      }\n\n      // the request was aborted and the SegmentLoader has already started\n      // another request. this can happen when the timeout for an aborted\n      // request triggers due to a limitation in the XHR library\n      // do not count this as any sort of request or we risk double-counting\n      if (simpleSegment.requestId !== this.pendingSegment_.requestId) {\n        return;\n      }\n\n      // an error occurred from the active pendingSegment_ so reset everything\n      if (error) {\n        this.pendingSegment_ = null;\n        this.state = 'READY';\n\n        // the requests were aborted just record the aborted stat and exit\n        // this is not a true error condition and nothing corrective needs\n        // to be done\n        if (error.code === REQUEST_ERRORS.ABORTED) {\n          this.mediaRequestsAborted += 1;\n          return;\n        }\n\n        this.pause();\n\n        // the error is really just that at least one of the requests timed-out\n        // set the bandwidth to a very low value and trigger an ABR switch to\n        // take emergency action\n        if (error.code === REQUEST_ERRORS.TIMEOUT) {\n          this.mediaRequestsTimedout += 1;\n          this.bandwidth = 1;\n          this.roundTrip = NaN;\n          this.trigger('bandwidthupdate');\n          return;\n        }\n\n        // if control-flow has arrived here, then the error is real\n        // emit an error event to blacklist the current playlist\n        this.mediaRequestsErrored += 1;\n        this.error(error);\n        this.trigger('error');\n        return;\n      }\n\n      // the response was a success so set any bandwidth stats the request\n      // generated for ABR purposes\n      this.bandwidth = simpleSegment.stats.bandwidth;\n      this.roundTrip = simpleSegment.stats.roundTripTime;\n\n      // if this request included an initialization segment, save that data\n      // to the initSegment cache\n      if (simpleSegment.map) {\n        simpleSegment.map = this.initSegment(simpleSegment.map, true);\n      }\n\n      this.processSegmentResponse_(simpleSegment);\n    }\n\n    /**\n     * Move any important data from the simplified segment object\n     * back to the real segment object for future phases\n     *\n     * @private\n     */\n\n  }, {\n    key: 'processSegmentResponse_',\n    value: function processSegmentResponse_(simpleSegment) {\n      var segmentInfo = this.pendingSegment_;\n\n      segmentInfo.bytes = simpleSegment.bytes;\n      if (simpleSegment.map) {\n        segmentInfo.segment.map.bytes = simpleSegment.map.bytes;\n      }\n\n      segmentInfo.endOfAllRequests = simpleSegment.endOfAllRequests;\n\n      // This has fmp4 captions, add them to text tracks\n      if (simpleSegment.fmp4Captions) {\n        createCaptionsTrackIfNotExists(this.inbandTextTracks_, this.hls_.tech_, simpleSegment.captionStreams);\n        addCaptionData({\n          inbandTextTracks: this.inbandTextTracks_,\n          captionArray: simpleSegment.fmp4Captions,\n          // fmp4s will not have a timestamp offset\n          timestampOffset: 0\n        });\n        // Reset stored captions since we added parsed\n        // captions to a text track at this point\n        this.captionParser_.clearParsedCaptions();\n      }\n\n      this.handleSegment_();\n    }\n\n    /**\n     * append a decrypted segement to the SourceBuffer through a SourceUpdater\n     *\n     * @private\n     */\n\n  }, {\n    key: 'handleSegment_',\n    value: function handleSegment_() {\n      var _this3 = this;\n\n      if (!this.pendingSegment_) {\n        this.state = 'READY';\n        return;\n      }\n\n      var segmentInfo = this.pendingSegment_;\n      var segment = segmentInfo.segment;\n      var timingInfo = this.syncController_.probeSegmentInfo(segmentInfo);\n\n      // When we have our first timing info, determine what media types this loader is\n      // dealing with. Although we're maintaining extra state, it helps to preserve the\n      // separation of segment loader from the actual source buffers.\n      if (typeof this.startingMedia_ === 'undefined' && timingInfo && (\n      // Guard against cases where we're not getting timing info at all until we are\n      // certain that all streams will provide it.\n      timingInfo.containsAudio || timingInfo.containsVideo)) {\n        this.startingMedia_ = {\n          containsAudio: timingInfo.containsAudio,\n          containsVideo: timingInfo.containsVideo\n        };\n      }\n\n      var illegalMediaSwitchError = illegalMediaSwitch(this.loaderType_, this.startingMedia_, timingInfo);\n\n      if (illegalMediaSwitchError) {\n        this.error({\n          message: illegalMediaSwitchError,\n          blacklistDuration: Infinity\n        });\n        this.trigger('error');\n        return;\n      }\n\n      if (segmentInfo.isSyncRequest) {\n        this.trigger('syncinfoupdate');\n        this.pendingSegment_ = null;\n        this.state = 'READY';\n        return;\n      }\n\n      if (segmentInfo.timestampOffset !== null && segmentInfo.timestampOffset !== this.sourceUpdater_.timestampOffset()) {\n        this.sourceUpdater_.timestampOffset(segmentInfo.timestampOffset);\n        // fired when a timestamp offset is set in HLS (can also identify discontinuities)\n        this.trigger('timestampoffset');\n      }\n\n      var timelineMapping = this.syncController_.mappingForTimeline(segmentInfo.timeline);\n\n      if (timelineMapping !== null) {\n        this.trigger({\n          type: 'segmenttimemapping',\n          mapping: timelineMapping\n        });\n      }\n\n      this.state = 'APPENDING';\n\n      // if the media initialization segment is changing, append it\n      // before the content segment\n      if (segment.map) {\n        var initId = initSegmentId(segment.map);\n\n        if (!this.activeInitSegmentId_ || this.activeInitSegmentId_ !== initId) {\n          var initSegment = this.initSegment(segment.map);\n\n          this.sourceUpdater_.appendBuffer(initSegment.bytes, function () {\n            _this3.activeInitSegmentId_ = initId;\n          });\n        }\n      }\n\n      segmentInfo.byteLength = segmentInfo.bytes.byteLength;\n      if (typeof segment.start === 'number' && typeof segment.end === 'number') {\n        this.mediaSecondsLoaded += segment.end - segment.start;\n      } else {\n        this.mediaSecondsLoaded += segment.duration;\n      }\n\n      this.logger_(segmentInfoString(segmentInfo));\n\n      this.sourceUpdater_.appendBuffer(segmentInfo.bytes, this.handleUpdateEnd_.bind(this));\n    }\n\n    /**\n     * callback to run when appendBuffer is finished. detects if we are\n     * in a good state to do things with the data we got, or if we need\n     * to wait for more\n     *\n     * @private\n     */\n\n  }, {\n    key: 'handleUpdateEnd_',\n    value: function handleUpdateEnd_() {\n      if (!this.pendingSegment_) {\n        this.state = 'READY';\n        if (!this.paused()) {\n          this.monitorBuffer_();\n        }\n        return;\n      }\n\n      var segmentInfo = this.pendingSegment_;\n      var segment = segmentInfo.segment;\n      var isWalkingForward = this.mediaIndex !== null;\n\n      this.pendingSegment_ = null;\n      this.recordThroughput_(segmentInfo);\n      this.addSegmentMetadataCue_(segmentInfo);\n\n      this.state = 'READY';\n\n      this.mediaIndex = segmentInfo.mediaIndex;\n      this.fetchAtBuffer_ = true;\n      this.currentTimeline_ = segmentInfo.timeline;\n\n      // We must update the syncinfo to recalculate the seekable range before\n      // the following conditional otherwise it may consider this a bad \"guess\"\n      // and attempt to resync when the post-update seekable window and live\n      // point would mean that this was the perfect segment to fetch\n      this.trigger('syncinfoupdate');\n\n      // If we previously appended a segment that ends more than 3 targetDurations before\n      // the currentTime_ that means that our conservative guess was too conservative.\n      // In that case, reset the loader state so that we try to use any information gained\n      // from the previous request to create a new, more accurate, sync-point.\n      if (segment.end && this.currentTime_() - segment.end > segmentInfo.playlist.targetDuration * 3) {\n        this.resetEverything();\n        return;\n      }\n\n      // Don't do a rendition switch unless we have enough time to get a sync segment\n      // and conservatively guess\n      if (isWalkingForward) {\n        this.trigger('bandwidthupdate');\n      }\n      this.trigger('progress');\n\n      // any time an update finishes and the last segment is in the\n      // buffer, end the stream. this ensures the \"ended\" event will\n      // fire if playback reaches that point.\n      var isEndOfStream = detectEndOfStream(segmentInfo.playlist, this.mediaSource_, segmentInfo.mediaIndex + 1);\n\n      if (isEndOfStream) {\n        this.endOfStream();\n      }\n\n      if (!this.paused()) {\n        this.monitorBuffer_();\n      }\n    }\n\n    /**\n     * Records the current throughput of the decrypt, transmux, and append\n     * portion of the semgment pipeline. `throughput.rate` is a the cumulative\n     * moving average of the throughput. `throughput.count` is the number of\n     * data points in the average.\n     *\n     * @private\n     * @param {Object} segmentInfo the object returned by loadSegment\n     */\n\n  }, {\n    key: 'recordThroughput_',\n    value: function recordThroughput_(segmentInfo) {\n      var rate = this.throughput.rate;\n      // Add one to the time to ensure that we don't accidentally attempt to divide\n      // by zero in the case where the throughput is ridiculously high\n      var segmentProcessingTime = Date.now() - segmentInfo.endOfAllRequests + 1;\n      // Multiply by 8000 to convert from bytes/millisecond to bits/second\n      var segmentProcessingThroughput = Math.floor(segmentInfo.byteLength / segmentProcessingTime * 8 * 1000);\n\n      // This is just a cumulative moving average calculation:\n      //   newAvg = oldAvg + (sample - oldAvg) / (sampleCount + 1)\n      this.throughput.rate += (segmentProcessingThroughput - rate) / ++this.throughput.count;\n    }\n\n    /**\n     * Adds a cue to the segment-metadata track with some metadata information about the\n     * segment\n     *\n     * @private\n     * @param {Object} segmentInfo\n     *        the object returned by loadSegment\n     * @method addSegmentMetadataCue_\n     */\n\n  }, {\n    key: 'addSegmentMetadataCue_',\n    value: function addSegmentMetadataCue_(segmentInfo) {\n      if (!this.segmentMetadataTrack_) {\n        return;\n      }\n\n      var segment = segmentInfo.segment;\n      var start = segment.start;\n      var end = segment.end;\n\n      // Do not try adding the cue if the start and end times are invalid.\n      if (!finite(start) || !finite(end)) {\n        return;\n      }\n\n      removeCuesFromTrack(start, end, this.segmentMetadataTrack_);\n\n      var Cue = window$1.WebKitDataCue || window$1.VTTCue;\n      var value = {\n        bandwidth: segmentInfo.playlist.attributes.BANDWIDTH,\n        resolution: segmentInfo.playlist.attributes.RESOLUTION,\n        codecs: segmentInfo.playlist.attributes.CODECS,\n        byteLength: segmentInfo.byteLength,\n        uri: segmentInfo.uri,\n        timeline: segmentInfo.timeline,\n        playlist: segmentInfo.playlist.uri,\n        start: start,\n        end: end\n      };\n      var data = JSON.stringify(value);\n      var cue = new Cue(start, end, data);\n\n      // Attach the metadata to the value property of the cue to keep consistency between\n      // the differences of WebKitDataCue in safari and VTTCue in other browsers\n      cue.value = value;\n\n      this.segmentMetadataTrack_.addCue(cue);\n    }\n  }]);\n  return SegmentLoader;\n}(videojs$1.EventTarget);\n\nvar uint8ToUtf8 = function uint8ToUtf8(uintArray) {\n  return decodeURIComponent(escape(String.fromCharCode.apply(null, uintArray)));\n};\n\n/**\n * @file vtt-segment-loader.js\n */\n\nvar VTT_LINE_TERMINATORS = new Uint8Array('\\n\\n'.split('').map(function (char) {\n  return char.charCodeAt(0);\n}));\n\n/**\n * An object that manages segment loading and appending.\n *\n * @class VTTSegmentLoader\n * @param {Object} options required and optional options\n * @extends videojs.EventTarget\n */\n\nvar VTTSegmentLoader = function (_SegmentLoader) {\n  inherits$1(VTTSegmentLoader, _SegmentLoader);\n\n  function VTTSegmentLoader(settings) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    classCallCheck$1(this, VTTSegmentLoader);\n\n    // SegmentLoader requires a MediaSource be specified or it will throw an error;\n    // however, VTTSegmentLoader has no need of a media source, so delete the reference\n    var _this = possibleConstructorReturn$1(this, (VTTSegmentLoader.__proto__ || Object.getPrototypeOf(VTTSegmentLoader)).call(this, settings, options));\n\n    _this.mediaSource_ = null;\n\n    _this.subtitlesTrack_ = null;\n    return _this;\n  }\n\n  /**\n   * Indicates which time ranges are buffered\n   *\n   * @return {TimeRange}\n   *         TimeRange object representing the current buffered ranges\n   */\n\n  createClass$1(VTTSegmentLoader, [{\n    key: 'buffered_',\n    value: function buffered_() {\n      if (!this.subtitlesTrack_ || !this.subtitlesTrack_.cues.length) {\n        return videojs$1.createTimeRanges();\n      }\n\n      var cues = this.subtitlesTrack_.cues;\n      var start = cues[0].startTime;\n      var end = cues[cues.length - 1].startTime;\n\n      return videojs$1.createTimeRanges([[start, end]]);\n    }\n\n    /**\n     * Gets and sets init segment for the provided map\n     *\n     * @param {Object} map\n     *        The map object representing the init segment to get or set\n     * @param {Boolean=} set\n     *        If true, the init segment for the provided map should be saved\n     * @return {Object}\n     *         map object for desired init segment\n     */\n\n  }, {\n    key: 'initSegment',\n    value: function initSegment(map) {\n      var set$$1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (!map) {\n        return null;\n      }\n\n      var id = initSegmentId(map);\n      var storedMap = this.initSegments_[id];\n\n      if (set$$1 && !storedMap && map.bytes) {\n        // append WebVTT line terminators to the media initialization segment if it exists\n        // to follow the WebVTT spec (https://w3c.github.io/webvtt/#file-structure) that\n        // requires two or more WebVTT line terminators between the WebVTT header and the\n        // rest of the file\n        var combinedByteLength = VTT_LINE_TERMINATORS.byteLength + map.bytes.byteLength;\n        var combinedSegment = new Uint8Array(combinedByteLength);\n\n        combinedSegment.set(map.bytes);\n        combinedSegment.set(VTT_LINE_TERMINATORS, map.bytes.byteLength);\n\n        this.initSegments_[id] = storedMap = {\n          resolvedUri: map.resolvedUri,\n          byterange: map.byterange,\n          bytes: combinedSegment\n        };\n      }\n\n      return storedMap || map;\n    }\n\n    /**\n     * Returns true if all configuration required for loading is present, otherwise false.\n     *\n     * @return {Boolean} True if the all configuration is ready for loading\n     * @private\n     */\n\n  }, {\n    key: 'couldBeginLoading_',\n    value: function couldBeginLoading_() {\n      return this.playlist_ && this.subtitlesTrack_ && !this.paused();\n    }\n\n    /**\n     * Once all the starting parameters have been specified, begin\n     * operation. This method should only be invoked from the INIT\n     * state.\n     *\n     * @private\n     */\n\n  }, {\n    key: 'init_',\n    value: function init_() {\n      this.state = 'READY';\n      this.resetEverything();\n      return this.monitorBuffer_();\n    }\n\n    /**\n     * Set a subtitle track on the segment loader to add subtitles to\n     *\n     * @param {TextTrack=} track\n     *        The text track to add loaded subtitles to\n     * @return {TextTrack}\n     *        Returns the subtitles track\n     */\n\n  }, {\n    key: 'track',\n    value: function track(_track) {\n      if (typeof _track === 'undefined') {\n        return this.subtitlesTrack_;\n      }\n\n      this.subtitlesTrack_ = _track;\n\n      // if we were unpaused but waiting for a sourceUpdater, start\n      // buffering now\n      if (this.state === 'INIT' && this.couldBeginLoading_()) {\n        this.init_();\n      }\n\n      return this.subtitlesTrack_;\n    }\n\n    /**\n     * Remove any data in the source buffer between start and end times\n     * @param {Number} start - the start time of the region to remove from the buffer\n     * @param {Number} end - the end time of the region to remove from the buffer\n     */\n\n  }, {\n    key: 'remove',\n    value: function remove(start, end) {\n      removeCuesFromTrack(start, end, this.subtitlesTrack_);\n    }\n\n    /**\n     * fill the buffer with segements unless the sourceBuffers are\n     * currently updating\n     *\n     * Note: this function should only ever be called by monitorBuffer_\n     * and never directly\n     *\n     * @private\n     */\n\n  }, {\n    key: 'fillBuffer_',\n    value: function fillBuffer_() {\n      var _this2 = this;\n\n      if (!this.syncPoint_) {\n        this.syncPoint_ = this.syncController_.getSyncPoint(this.playlist_, this.duration_(), this.currentTimeline_, this.currentTime_());\n      }\n\n      // see if we need to begin loading immediately\n      var segmentInfo = this.checkBuffer_(this.buffered_(), this.playlist_, this.mediaIndex, this.hasPlayed_(), this.currentTime_(), this.syncPoint_);\n\n      segmentInfo = this.skipEmptySegments_(segmentInfo);\n\n      if (!segmentInfo) {\n        return;\n      }\n\n      if (this.syncController_.timestampOffsetForTimeline(segmentInfo.timeline) === null) {\n        // We don't have the timestamp offset that we need to sync subtitles.\n        // Rerun on a timestamp offset or user interaction.\n        var checkTimestampOffset = function checkTimestampOffset() {\n          _this2.state = 'READY';\n          if (!_this2.paused()) {\n            // if not paused, queue a buffer check as soon as possible\n            _this2.monitorBuffer_();\n          }\n        };\n\n        this.syncController_.one('timestampoffset', checkTimestampOffset);\n        this.state = 'WAITING_ON_TIMELINE';\n        return;\n      }\n\n      this.loadSegment_(segmentInfo);\n    }\n\n    /**\n     * Prevents the segment loader from requesting segments we know contain no subtitles\n     * by walking forward until we find the next segment that we don't know whether it is\n     * empty or not.\n     *\n     * @param {Object} segmentInfo\n     *        a segment info object that describes the current segment\n     * @return {Object}\n     *         a segment info object that describes the current segment\n     */\n\n  }, {\n    key: 'skipEmptySegments_',\n    value: function skipEmptySegments_(segmentInfo) {\n      while (segmentInfo && segmentInfo.segment.empty) {\n        segmentInfo = this.generateSegmentInfo_(segmentInfo.playlist, segmentInfo.mediaIndex + 1, segmentInfo.startOfSegment + segmentInfo.duration, segmentInfo.isSyncRequest);\n      }\n      return segmentInfo;\n    }\n\n    /**\n     * append a decrypted segement to the SourceBuffer through a SourceUpdater\n     *\n     * @private\n     */\n\n  }, {\n    key: 'handleSegment_',\n    value: function handleSegment_() {\n      var _this3 = this;\n\n      if (!this.pendingSegment_ || !this.subtitlesTrack_) {\n        this.state = 'READY';\n        return;\n      }\n\n      this.state = 'APPENDING';\n\n      var segmentInfo = this.pendingSegment_;\n      var segment = segmentInfo.segment;\n\n      // Make sure that vttjs has loaded, otherwise, wait till it finished loading\n      if (typeof window$1.WebVTT !== 'function' && this.subtitlesTrack_ && this.subtitlesTrack_.tech_) {\n\n        var loadHandler = function loadHandler() {\n          _this3.handleSegment_();\n        };\n\n        this.state = 'WAITING_ON_VTTJS';\n        this.subtitlesTrack_.tech_.one('vttjsloaded', loadHandler);\n        this.subtitlesTrack_.tech_.one('vttjserror', function () {\n          _this3.subtitlesTrack_.tech_.off('vttjsloaded', loadHandler);\n          _this3.error({\n            message: 'Error loading vtt.js'\n          });\n          _this3.state = 'READY';\n          _this3.pause();\n          _this3.trigger('error');\n        });\n\n        return;\n      }\n\n      segment.requested = true;\n\n      try {\n        this.parseVTTCues_(segmentInfo);\n      } catch (e) {\n        this.error({\n          message: e.message\n        });\n        this.state = 'READY';\n        this.pause();\n        return this.trigger('error');\n      }\n\n      this.updateTimeMapping_(segmentInfo, this.syncController_.timelines[segmentInfo.timeline], this.playlist_);\n\n      if (segmentInfo.isSyncRequest) {\n        this.trigger('syncinfoupdate');\n        this.pendingSegment_ = null;\n        this.state = 'READY';\n        return;\n      }\n\n      segmentInfo.byteLength = segmentInfo.bytes.byteLength;\n\n      this.mediaSecondsLoaded += segment.duration;\n\n      if (segmentInfo.cues.length) {\n        // remove any overlapping cues to prevent doubling\n        this.remove(segmentInfo.cues[0].endTime, segmentInfo.cues[segmentInfo.cues.length - 1].endTime);\n      }\n\n      segmentInfo.cues.forEach(function (cue) {\n        _this3.subtitlesTrack_.addCue(cue);\n      });\n\n      this.handleUpdateEnd_();\n    }\n\n    /**\n     * Uses the WebVTT parser to parse the segment response\n     *\n     * @param {Object} segmentInfo\n     *        a segment info object that describes the current segment\n     * @private\n     */\n\n  }, {\n    key: 'parseVTTCues_',\n    value: function parseVTTCues_(segmentInfo) {\n      var decoder = void 0;\n      var decodeBytesToString = false;\n\n      if (typeof window$1.TextDecoder === 'function') {\n        decoder = new window$1.TextDecoder('utf8');\n      } else {\n        decoder = window$1.WebVTT.StringDecoder();\n        decodeBytesToString = true;\n      }\n\n      var parser = new window$1.WebVTT.Parser(window$1, window$1.vttjs, decoder);\n\n      segmentInfo.cues = [];\n      segmentInfo.timestampmap = { MPEGTS: 0, LOCAL: 0 };\n\n      parser.oncue = segmentInfo.cues.push.bind(segmentInfo.cues);\n      parser.ontimestampmap = function (map) {\n        return segmentInfo.timestampmap = map;\n      };\n      parser.onparsingerror = function (error) {\n        videojs$1.log.warn('Error encountered when parsing cues: ' + error.message);\n      };\n\n      if (segmentInfo.segment.map) {\n        var mapData = segmentInfo.segment.map.bytes;\n\n        if (decodeBytesToString) {\n          mapData = uint8ToUtf8(mapData);\n        }\n\n        parser.parse(mapData);\n      }\n\n      var segmentData = segmentInfo.bytes;\n\n      if (decodeBytesToString) {\n        segmentData = uint8ToUtf8(segmentData);\n      }\n\n      parser.parse(segmentData);\n      parser.flush();\n    }\n\n    /**\n     * Updates the start and end times of any cues parsed by the WebVTT parser using\n     * the information parsed from the X-TIMESTAMP-MAP header and a TS to media time mapping\n     * from the SyncController\n     *\n     * @param {Object} segmentInfo\n     *        a segment info object that describes the current segment\n     * @param {Object} mappingObj\n     *        object containing a mapping from TS to media time\n     * @param {Object} playlist\n     *        the playlist object containing the segment\n     * @private\n     */\n\n  }, {\n    key: 'updateTimeMapping_',\n    value: function updateTimeMapping_(segmentInfo, mappingObj, playlist) {\n      var segment = segmentInfo.segment;\n\n      if (!mappingObj) {\n        // If the sync controller does not have a mapping of TS to Media Time for the\n        // timeline, then we don't have enough information to update the cue\n        // start/end times\n        return;\n      }\n\n      if (!segmentInfo.cues.length) {\n        // If there are no cues, we also do not have enough information to figure out\n        // segment timing. Mark that the segment contains no cues so we don't re-request\n        // an empty segment.\n        segment.empty = true;\n        return;\n      }\n\n      var timestampmap = segmentInfo.timestampmap;\n      var diff = timestampmap.MPEGTS / 90000 - timestampmap.LOCAL + mappingObj.mapping;\n\n      segmentInfo.cues.forEach(function (cue) {\n        // First convert cue time to TS time using the timestamp-map provided within the vtt\n        cue.startTime += diff;\n        cue.endTime += diff;\n      });\n\n      if (!playlist.syncInfo) {\n        var firstStart = segmentInfo.cues[0].startTime;\n        var lastStart = segmentInfo.cues[segmentInfo.cues.length - 1].startTime;\n\n        playlist.syncInfo = {\n          mediaSequence: playlist.mediaSequence + segmentInfo.mediaIndex,\n          time: Math.min(firstStart, lastStart - segment.duration)\n        };\n      }\n    }\n  }]);\n  return VTTSegmentLoader;\n}(SegmentLoader);\n\n/**\n * @file ad-cue-tags.js\n */\n\n/**\n * Searches for an ad cue that overlaps with the given mediaTime\n */\nvar findAdCue = function findAdCue(track, mediaTime) {\n  var cues = track.cues;\n\n  for (var i = 0; i < cues.length; i++) {\n    var cue = cues[i];\n\n    if (mediaTime >= cue.adStartTime && mediaTime <= cue.adEndTime) {\n      return cue;\n    }\n  }\n  return null;\n};\n\nvar updateAdCues = function updateAdCues(media, track) {\n  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  if (!media.segments) {\n    return;\n  }\n\n  var mediaTime = offset;\n  var cue = void 0;\n\n  for (var i = 0; i < media.segments.length; i++) {\n    var segment = media.segments[i];\n\n    if (!cue) {\n      // Since the cues will span for at least the segment duration, adding a fudge\n      // factor of half segment duration will prevent duplicate cues from being\n      // created when timing info is not exact (e.g. cue start time initialized\n      // at 10.006677, but next call mediaTime is 10.003332 )\n      cue = findAdCue(track, mediaTime + segment.duration / 2);\n    }\n\n    if (cue) {\n      if ('cueIn' in segment) {\n        // Found a CUE-IN so end the cue\n        cue.endTime = mediaTime;\n        cue.adEndTime = mediaTime;\n        mediaTime += segment.duration;\n        cue = null;\n        continue;\n      }\n\n      if (mediaTime < cue.endTime) {\n        // Already processed this mediaTime for this cue\n        mediaTime += segment.duration;\n        continue;\n      }\n\n      // otherwise extend cue until a CUE-IN is found\n      cue.endTime += segment.duration;\n    } else {\n      if ('cueOut' in segment) {\n        cue = new window$1.VTTCue(mediaTime, mediaTime + segment.duration, segment.cueOut);\n        cue.adStartTime = mediaTime;\n        // Assumes tag format to be\n        // #EXT-X-CUE-OUT:30\n        cue.adEndTime = mediaTime + parseFloat(segment.cueOut);\n        track.addCue(cue);\n      }\n\n      if ('cueOutCont' in segment) {\n        // Entered into the middle of an ad cue\n        var adOffset = void 0;\n        var adTotal = void 0;\n\n        // Assumes tag formate to be\n        // #EXT-X-CUE-OUT-CONT:10/30\n\n        var _segment$cueOutCont$s = segment.cueOutCont.split('/').map(parseFloat);\n\n        var _segment$cueOutCont$s2 = slicedToArray$1(_segment$cueOutCont$s, 2);\n\n        adOffset = _segment$cueOutCont$s2[0];\n        adTotal = _segment$cueOutCont$s2[1];\n\n        cue = new window$1.VTTCue(mediaTime, mediaTime + segment.duration, '');\n        cue.adStartTime = mediaTime - adOffset;\n        cue.adEndTime = cue.adStartTime + adTotal;\n        track.addCue(cue);\n      }\n    }\n    mediaTime += segment.duration;\n  }\n};\n\n/**\n * @file sync-controller.js\n */\n\nvar tsprobe = tsInspector.inspect;\n\nvar syncPointStrategies = [\n// Stategy \"VOD\": Handle the VOD-case where the sync-point is *always*\n//                the equivalence display-time 0 === segment-index 0\n{\n  name: 'VOD',\n  run: function run(syncController, playlist, duration$$1, currentTimeline, currentTime) {\n    if (duration$$1 !== Infinity) {\n      var syncPoint = {\n        time: 0,\n        segmentIndex: 0\n      };\n\n      return syncPoint;\n    }\n    return null;\n  }\n},\n// Stategy \"ProgramDateTime\": We have a program-date-time tag in this playlist\n{\n  name: 'ProgramDateTime',\n  run: function run(syncController, playlist, duration$$1, currentTimeline, currentTime) {\n    if (!syncController.datetimeToDisplayTime) {\n      return null;\n    }\n\n    var segments = playlist.segments || [];\n    var syncPoint = null;\n    var lastDistance = null;\n\n    currentTime = currentTime || 0;\n\n    for (var i = 0; i < segments.length; i++) {\n      var segment = segments[i];\n\n      if (segment.dateTimeObject) {\n        var segmentTime = segment.dateTimeObject.getTime() / 1000;\n        var segmentStart = segmentTime + syncController.datetimeToDisplayTime;\n        var distance = Math.abs(currentTime - segmentStart);\n\n        // Once the distance begins to increase, we have passed\n        // currentTime and can stop looking for better candidates\n        if (lastDistance !== null && lastDistance < distance) {\n          break;\n        }\n\n        lastDistance = distance;\n        syncPoint = {\n          time: segmentStart,\n          segmentIndex: i\n        };\n      }\n    }\n    return syncPoint;\n  }\n},\n// Stategy \"Segment\": We have a known time mapping for a timeline and a\n//                    segment in the current timeline with timing data\n{\n  name: 'Segment',\n  run: function run(syncController, playlist, duration$$1, currentTimeline, currentTime) {\n    var segments = playlist.segments || [];\n    var syncPoint = null;\n    var lastDistance = null;\n\n    currentTime = currentTime || 0;\n\n    for (var i = 0; i < segments.length; i++) {\n      var segment = segments[i];\n\n      if (segment.timeline === currentTimeline && typeof segment.start !== 'undefined') {\n        var distance = Math.abs(currentTime - segment.start);\n\n        // Once the distance begins to increase, we have passed\n        // currentTime and can stop looking for better candidates\n        if (lastDistance !== null && lastDistance < distance) {\n          break;\n        }\n\n        if (!syncPoint || lastDistance === null || lastDistance >= distance) {\n          lastDistance = distance;\n          syncPoint = {\n            time: segment.start,\n            segmentIndex: i\n          };\n        }\n      }\n    }\n    return syncPoint;\n  }\n},\n// Stategy \"Discontinuity\": We have a discontinuity with a known\n//                          display-time\n{\n  name: 'Discontinuity',\n  run: function run(syncController, playlist, duration$$1, currentTimeline, currentTime) {\n    var syncPoint = null;\n\n    currentTime = currentTime || 0;\n\n    if (playlist.discontinuityStarts && playlist.discontinuityStarts.length) {\n      var lastDistance = null;\n\n      for (var i = 0; i < playlist.discontinuityStarts.length; i++) {\n        var segmentIndex = playlist.discontinuityStarts[i];\n        var discontinuity = playlist.discontinuitySequence + i + 1;\n        var discontinuitySync = syncController.discontinuities[discontinuity];\n\n        if (discontinuitySync) {\n          var distance = Math.abs(currentTime - discontinuitySync.time);\n\n          // Once the distance begins to increase, we have passed\n          // currentTime and can stop looking for better candidates\n          if (lastDistance !== null && lastDistance < distance) {\n            break;\n          }\n\n          if (!syncPoint || lastDistance === null || lastDistance >= distance) {\n            lastDistance = distance;\n            syncPoint = {\n              time: discontinuitySync.time,\n              segmentIndex: segmentIndex\n            };\n          }\n        }\n      }\n    }\n    return syncPoint;\n  }\n},\n// Stategy \"Playlist\": We have a playlist with a known mapping of\n//                     segment index to display time\n{\n  name: 'Playlist',\n  run: function run(syncController, playlist, duration$$1, currentTimeline, currentTime) {\n    if (playlist.syncInfo) {\n      var syncPoint = {\n        time: playlist.syncInfo.time,\n        segmentIndex: playlist.syncInfo.mediaSequence - playlist.mediaSequence\n      };\n\n      return syncPoint;\n    }\n    return null;\n  }\n}];\n\nvar SyncController = function (_videojs$EventTarget) {\n  inherits$1(SyncController, _videojs$EventTarget);\n\n  function SyncController() {\n    classCallCheck$1(this, SyncController);\n\n    // Segment Loader state variables...\n    // ...for synching across variants\n    var _this = possibleConstructorReturn$1(this, (SyncController.__proto__ || Object.getPrototypeOf(SyncController)).call(this));\n\n    _this.inspectCache_ = undefined;\n\n    // ...for synching across variants\n    _this.timelines = [];\n    _this.discontinuities = [];\n    _this.datetimeToDisplayTime = null;\n\n    _this.logger_ = logger('SyncController');\n    return _this;\n  }\n\n  /**\n   * Find a sync-point for the playlist specified\n   *\n   * A sync-point is defined as a known mapping from display-time to\n   * a segment-index in the current playlist.\n   *\n   * @param {Playlist} playlist\n   *        The playlist that needs a sync-point\n   * @param {Number} duration\n   *        Duration of the MediaSource (Infinite if playing a live source)\n   * @param {Number} currentTimeline\n   *        The last timeline from which a segment was loaded\n   * @returns {Object}\n   *          A sync-point object\n   */\n\n  createClass$1(SyncController, [{\n    key: 'getSyncPoint',\n    value: function getSyncPoint(playlist, duration$$1, currentTimeline, currentTime) {\n      var syncPoints = this.runStrategies_(playlist, duration$$1, currentTimeline, currentTime);\n\n      if (!syncPoints.length) {\n        // Signal that we need to attempt to get a sync-point manually\n        // by fetching a segment in the playlist and constructing\n        // a sync-point from that information\n        return null;\n      }\n\n      // Now find the sync-point that is closest to the currentTime because\n      // that should result in the most accurate guess about which segment\n      // to fetch\n      return this.selectSyncPoint_(syncPoints, { key: 'time', value: currentTime });\n    }\n\n    /**\n     * Calculate the amount of time that has expired off the playlist during playback\n     *\n     * @param {Playlist} playlist\n     *        Playlist object to calculate expired from\n     * @param {Number} duration\n     *        Duration of the MediaSource (Infinity if playling a live source)\n     * @returns {Number|null}\n     *          The amount of time that has expired off the playlist during playback. Null\n     *          if no sync-points for the playlist can be found.\n     */\n\n  }, {\n    key: 'getExpiredTime',\n    value: function getExpiredTime(playlist, duration$$1) {\n      if (!playlist || !playlist.segments) {\n        return null;\n      }\n\n      var syncPoints = this.runStrategies_(playlist, duration$$1, playlist.discontinuitySequence, 0);\n\n      // Without sync-points, there is not enough information to determine the expired time\n      if (!syncPoints.length) {\n        return null;\n      }\n\n      var syncPoint = this.selectSyncPoint_(syncPoints, {\n        key: 'segmentIndex',\n        value: 0\n      });\n\n      // If the sync-point is beyond the start of the playlist, we want to subtract the\n      // duration from index 0 to syncPoint.segmentIndex instead of adding.\n      if (syncPoint.segmentIndex > 0) {\n        syncPoint.time *= -1;\n      }\n\n      return Math.abs(syncPoint.time + sumDurations(playlist, syncPoint.segmentIndex, 0));\n    }\n\n    /**\n     * Runs each sync-point strategy and returns a list of sync-points returned by the\n     * strategies\n     *\n     * @private\n     * @param {Playlist} playlist\n     *        The playlist that needs a sync-point\n     * @param {Number} duration\n     *        Duration of the MediaSource (Infinity if playing a live source)\n     * @param {Number} currentTimeline\n     *        The last timeline from which a segment was loaded\n     * @returns {Array}\n     *          A list of sync-point objects\n     */\n\n  }, {\n    key: 'runStrategies_',\n    value: function runStrategies_(playlist, duration$$1, currentTimeline, currentTime) {\n      var syncPoints = [];\n\n      // Try to find a sync-point in by utilizing various strategies...\n      for (var i = 0; i < syncPointStrategies.length; i++) {\n        var strategy = syncPointStrategies[i];\n        var syncPoint = strategy.run(this, playlist, duration$$1, currentTimeline, currentTime);\n\n        if (syncPoint) {\n          syncPoint.strategy = strategy.name;\n          syncPoints.push({\n            strategy: strategy.name,\n            syncPoint: syncPoint\n          });\n        }\n      }\n\n      return syncPoints;\n    }\n\n    /**\n     * Selects the sync-point nearest the specified target\n     *\n     * @private\n     * @param {Array} syncPoints\n     *        List of sync-points to select from\n     * @param {Object} target\n     *        Object specifying the property and value we are targeting\n     * @param {String} target.key\n     *        Specifies the property to target. Must be either 'time' or 'segmentIndex'\n     * @param {Number} target.value\n     *        The value to target for the specified key.\n     * @returns {Object}\n     *          The sync-point nearest the target\n     */\n\n  }, {\n    key: 'selectSyncPoint_',\n    value: function selectSyncPoint_(syncPoints, target) {\n      var bestSyncPoint = syncPoints[0].syncPoint;\n      var bestDistance = Math.abs(syncPoints[0].syncPoint[target.key] - target.value);\n      var bestStrategy = syncPoints[0].strategy;\n\n      for (var i = 1; i < syncPoints.length; i++) {\n        var newDistance = Math.abs(syncPoints[i].syncPoint[target.key] - target.value);\n\n        if (newDistance < bestDistance) {\n          bestDistance = newDistance;\n          bestSyncPoint = syncPoints[i].syncPoint;\n          bestStrategy = syncPoints[i].strategy;\n        }\n      }\n\n      this.logger_('syncPoint for [' + target.key + ': ' + target.value + '] chosen with strategy' + (' [' + bestStrategy + ']: [time:' + bestSyncPoint.time + ',') + (' segmentIndex:' + bestSyncPoint.segmentIndex + ']'));\n\n      return bestSyncPoint;\n    }\n\n    /**\n     * Save any meta-data present on the segments when segments leave\n     * the live window to the playlist to allow for synchronization at the\n     * playlist level later.\n     *\n     * @param {Playlist} oldPlaylist - The previous active playlist\n     * @param {Playlist} newPlaylist - The updated and most current playlist\n     */\n\n  }, {\n    key: 'saveExpiredSegmentInfo',\n    value: function saveExpiredSegmentInfo(oldPlaylist, newPlaylist) {\n      var mediaSequenceDiff = newPlaylist.mediaSequence - oldPlaylist.mediaSequence;\n\n      // When a segment expires from the playlist and it has a start time\n      // save that information as a possible sync-point reference in future\n      for (var i = mediaSequenceDiff - 1; i >= 0; i--) {\n        var lastRemovedSegment = oldPlaylist.segments[i];\n\n        if (lastRemovedSegment && typeof lastRemovedSegment.start !== 'undefined') {\n          newPlaylist.syncInfo = {\n            mediaSequence: oldPlaylist.mediaSequence + i,\n            time: lastRemovedSegment.start\n          };\n          this.logger_('playlist refresh sync: [time:' + newPlaylist.syncInfo.time + ',' + (' mediaSequence: ' + newPlaylist.syncInfo.mediaSequence + ']'));\n          this.trigger('syncinfoupdate');\n          break;\n        }\n      }\n    }\n\n    /**\n     * Save the mapping from playlist's ProgramDateTime to display. This should\n     * only ever happen once at the start of playback.\n     *\n     * @param {Playlist} playlist - The currently active playlist\n     */\n\n  }, {\n    key: 'setDateTimeMapping',\n    value: function setDateTimeMapping(playlist) {\n      if (!this.datetimeToDisplayTime && playlist.segments && playlist.segments.length && playlist.segments[0].dateTimeObject) {\n        var playlistTimestamp = playlist.segments[0].dateTimeObject.getTime() / 1000;\n\n        this.datetimeToDisplayTime = -playlistTimestamp;\n      }\n    }\n\n    /**\n     * Reset the state of the inspection cache when we do a rendition\n     * switch\n     */\n\n  }, {\n    key: 'reset',\n    value: function reset() {\n      this.inspectCache_ = undefined;\n    }\n\n    /**\n     * Probe or inspect a fmp4 or an mpeg2-ts segment to determine the start\n     * and end of the segment in it's internal \"media time\". Used to generate\n     * mappings from that internal \"media time\" to the display time that is\n     * shown on the player.\n     *\n     * @param {SegmentInfo} segmentInfo - The current active request information\n     */\n\n  }, {\n    key: 'probeSegmentInfo',\n    value: function probeSegmentInfo(segmentInfo) {\n      var segment = segmentInfo.segment;\n      var playlist = segmentInfo.playlist;\n      var timingInfo = void 0;\n\n      if (segment.map) {\n        timingInfo = this.probeMp4Segment_(segmentInfo);\n      } else {\n        timingInfo = this.probeTsSegment_(segmentInfo);\n      }\n\n      if (timingInfo) {\n        if (this.calculateSegmentTimeMapping_(segmentInfo, timingInfo)) {\n          this.saveDiscontinuitySyncInfo_(segmentInfo);\n\n          // If the playlist does not have sync information yet, record that information\n          // now with segment timing information\n          if (!playlist.syncInfo) {\n            playlist.syncInfo = {\n              mediaSequence: playlist.mediaSequence + segmentInfo.mediaIndex,\n              time: segment.start\n            };\n          }\n        }\n      }\n\n      return timingInfo;\n    }\n\n    /**\n     * Probe an fmp4 or an mpeg2-ts segment to determine the start of the segment\n     * in it's internal \"media time\".\n     *\n     * @private\n     * @param {SegmentInfo} segmentInfo - The current active request information\n     * @return {object} The start and end time of the current segment in \"media time\"\n     */\n\n  }, {\n    key: 'probeMp4Segment_',\n    value: function probeMp4Segment_(segmentInfo) {\n      var segment = segmentInfo.segment;\n      var timescales = mp4probe.timescale(segment.map.bytes);\n      var startTime = mp4probe.startTime(timescales, segmentInfo.bytes);\n\n      if (segmentInfo.timestampOffset !== null) {\n        segmentInfo.timestampOffset -= startTime;\n      }\n\n      return {\n        start: startTime,\n        end: startTime + segment.duration\n      };\n    }\n\n    /**\n     * Probe an mpeg2-ts segment to determine the start and end of the segment\n     * in it's internal \"media time\".\n     *\n     * @private\n     * @param {SegmentInfo} segmentInfo - The current active request information\n     * @return {object} The start and end time of the current segment in \"media time\"\n     */\n\n  }, {\n    key: 'probeTsSegment_',\n    value: function probeTsSegment_(segmentInfo) {\n      var timeInfo = tsprobe(segmentInfo.bytes, this.inspectCache_);\n      var segmentStartTime = void 0;\n      var segmentEndTime = void 0;\n\n      if (!timeInfo) {\n        return null;\n      }\n\n      if (timeInfo.video && timeInfo.video.length === 2) {\n        this.inspectCache_ = timeInfo.video[1].dts;\n        segmentStartTime = timeInfo.video[0].dtsTime;\n        segmentEndTime = timeInfo.video[1].dtsTime;\n      } else if (timeInfo.audio && timeInfo.audio.length === 2) {\n        this.inspectCache_ = timeInfo.audio[1].dts;\n        segmentStartTime = timeInfo.audio[0].dtsTime;\n        segmentEndTime = timeInfo.audio[1].dtsTime;\n      }\n\n      return {\n        start: segmentStartTime,\n        end: segmentEndTime,\n        containsVideo: timeInfo.video && timeInfo.video.length === 2,\n        containsAudio: timeInfo.audio && timeInfo.audio.length === 2\n      };\n    }\n  }, {\n    key: 'timestampOffsetForTimeline',\n    value: function timestampOffsetForTimeline(timeline) {\n      if (typeof this.timelines[timeline] === 'undefined') {\n        return null;\n      }\n      return this.timelines[timeline].time;\n    }\n  }, {\n    key: 'mappingForTimeline',\n    value: function mappingForTimeline(timeline) {\n      if (typeof this.timelines[timeline] === 'undefined') {\n        return null;\n      }\n      return this.timelines[timeline].mapping;\n    }\n\n    /**\n     * Use the \"media time\" for a segment to generate a mapping to \"display time\" and\n     * save that display time to the segment.\n     *\n     * @private\n     * @param {SegmentInfo} segmentInfo\n     *        The current active request information\n     * @param {object} timingInfo\n     *        The start and end time of the current segment in \"media time\"\n     * @returns {Boolean}\n     *          Returns false if segment time mapping could not be calculated\n     */\n\n  }, {\n    key: 'calculateSegmentTimeMapping_',\n    value: function calculateSegmentTimeMapping_(segmentInfo, timingInfo) {\n      var segment = segmentInfo.segment;\n      var mappingObj = this.timelines[segmentInfo.timeline];\n\n      if (segmentInfo.timestampOffset !== null) {\n        mappingObj = {\n          time: segmentInfo.startOfSegment,\n          mapping: segmentInfo.startOfSegment - timingInfo.start\n        };\n        this.timelines[segmentInfo.timeline] = mappingObj;\n        this.trigger('timestampoffset');\n\n        this.logger_('time mapping for timeline ' + segmentInfo.timeline + ': ' + ('[time: ' + mappingObj.time + '] [mapping: ' + mappingObj.mapping + ']'));\n\n        segment.start = segmentInfo.startOfSegment;\n        segment.end = timingInfo.end + mappingObj.mapping;\n      } else if (mappingObj) {\n        segment.start = timingInfo.start + mappingObj.mapping;\n        segment.end = timingInfo.end + mappingObj.mapping;\n      } else {\n        return false;\n      }\n\n      return true;\n    }\n\n    /**\n     * Each time we have discontinuity in the playlist, attempt to calculate the location\n     * in display of the start of the discontinuity and save that. We also save an accuracy\n     * value so that we save values with the most accuracy (closest to 0.)\n     *\n     * @private\n     * @param {SegmentInfo} segmentInfo - The current active request information\n     */\n\n  }, {\n    key: 'saveDiscontinuitySyncInfo_',\n    value: function saveDiscontinuitySyncInfo_(segmentInfo) {\n      var playlist = segmentInfo.playlist;\n      var segment = segmentInfo.segment;\n\n      // If the current segment is a discontinuity then we know exactly where\n      // the start of the range and it's accuracy is 0 (greater accuracy values\n      // mean more approximation)\n      if (segment.discontinuity) {\n        this.discontinuities[segment.timeline] = {\n          time: segment.start,\n          accuracy: 0\n        };\n      } else if (playlist.discontinuityStarts && playlist.discontinuityStarts.length) {\n        // Search for future discontinuities that we can provide better timing\n        // information for and save that information for sync purposes\n        for (var i = 0; i < playlist.discontinuityStarts.length; i++) {\n          var segmentIndex = playlist.discontinuityStarts[i];\n          var discontinuity = playlist.discontinuitySequence + i + 1;\n          var mediaIndexDiff = segmentIndex - segmentInfo.mediaIndex;\n          var accuracy = Math.abs(mediaIndexDiff);\n\n          if (!this.discontinuities[discontinuity] || this.discontinuities[discontinuity].accuracy > accuracy) {\n            var time = void 0;\n\n            if (mediaIndexDiff < 0) {\n              time = segment.start - sumDurations(playlist, segmentInfo.mediaIndex, segmentIndex);\n            } else {\n              time = segment.end + sumDurations(playlist, segmentInfo.mediaIndex + 1, segmentIndex);\n            }\n\n            this.discontinuities[discontinuity] = {\n              time: time,\n              accuracy: accuracy\n            };\n          }\n        }\n      }\n    }\n  }]);\n  return SyncController;\n}(videojs$1.EventTarget);\n\nvar Decrypter$1 = new shimWorker(\"./decrypter-worker.worker.js\", function (window, document$$1) {\n  var self = this;\n  var decrypterWorker = function () {\n\n    /*\n     * pkcs7.pad\n     * https://github.com/brightcove/pkcs7\n     *\n     * Copyright (c) 2014 Brightcove\n     * Licensed under the apache2 license.\n     */\n\n    /**\n     * Returns the subarray of a Uint8Array without PKCS#7 padding.\n     * @param padded {Uint8Array} unencrypted bytes that have been padded\n     * @return {Uint8Array} the unpadded bytes\n     * @see http://tools.ietf.org/html/rfc5652\n     */\n\n    function unpad(padded) {\n      return padded.subarray(0, padded.byteLength - padded[padded.byteLength - 1]);\n    }\n\n    var classCallCheck$$1 = function classCallCheck$$1(instance, Constructor) {\n      if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n      }\n    };\n\n    var createClass$$1 = function () {\n      function defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n          var descriptor = props[i];\n          descriptor.enumerable = descriptor.enumerable || false;\n          descriptor.configurable = true;\n          if (\"value\" in descriptor) descriptor.writable = true;\n          Object.defineProperty(target, descriptor.key, descriptor);\n        }\n      }\n\n      return function (Constructor, protoProps, staticProps) {\n        if (protoProps) defineProperties(Constructor.prototype, protoProps);\n        if (staticProps) defineProperties(Constructor, staticProps);\n        return Constructor;\n      };\n    }();\n\n    var inherits$$1 = function inherits$$1(subClass, superClass) {\n      if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));\n      }\n\n      subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n          value: subClass,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      });\n      if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n    };\n\n    var possibleConstructorReturn$$1 = function possibleConstructorReturn$$1(self, call) {\n      if (!self) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n      }\n\n      return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === \"object\" || typeof call === \"function\") ? call : self;\n    };\n\n    /**\n     * @file aes.js\n     *\n     * This file contains an adaptation of the AES decryption algorithm\n     * from the Standford Javascript Cryptography Library. That work is\n     * covered by the following copyright and permissions notice:\n     *\n     * Copyright 2009-2010 Emily Stark, Mike Hamburg, Dan Boneh.\n     * All rights reserved.\n     *\n     * Redistribution and use in source and binary forms, with or without\n     * modification, are permitted provided that the following conditions are\n     * met:\n     *\n     * 1. Redistributions of source code must retain the above copyright\n     *    notice, this list of conditions and the following disclaimer.\n     *\n     * 2. Redistributions in binary form must reproduce the above\n     *    copyright notice, this list of conditions and the following\n     *    disclaimer in the documentation and/or other materials provided\n     *    with the distribution.\n     *\n     * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR\n     * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n     * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n     * DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> OR CONTRIBUTORS BE\n     * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n     * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR\n     * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n     * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\n     * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN\n     * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n     *\n     * The views and conclusions contained in the software and documentation\n     * are those of the authors and should not be interpreted as representing\n     * official policies, either expressed or implied, of the authors.\n     */\n\n    /**\n     * Expand the S-box tables.\n     *\n     * @private\n     */\n    var precompute = function precompute() {\n      var tables = [[[], [], [], [], []], [[], [], [], [], []]];\n      var encTable = tables[0];\n      var decTable = tables[1];\n      var sbox = encTable[4];\n      var sboxInv = decTable[4];\n      var i = void 0;\n      var x = void 0;\n      var xInv = void 0;\n      var d = [];\n      var th = [];\n      var x2 = void 0;\n      var x4 = void 0;\n      var x8 = void 0;\n      var s = void 0;\n      var tEnc = void 0;\n      var tDec = void 0;\n\n      // Compute double and third tables\n      for (i = 0; i < 256; i++) {\n        th[(d[i] = i << 1 ^ (i >> 7) * 283) ^ i] = i;\n      }\n\n      for (x = xInv = 0; !sbox[x]; x ^= x2 || 1, xInv = th[xInv] || 1) {\n        // Compute sbox\n        s = xInv ^ xInv << 1 ^ xInv << 2 ^ xInv << 3 ^ xInv << 4;\n        s = s >> 8 ^ s & 255 ^ 99;\n        sbox[x] = s;\n        sboxInv[s] = x;\n\n        // Compute MixColumns\n        x8 = d[x4 = d[x2 = d[x]]];\n        tDec = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;\n        tEnc = d[s] * 0x101 ^ s * 0x1010100;\n\n        for (i = 0; i < 4; i++) {\n          encTable[i][x] = tEnc = tEnc << 24 ^ tEnc >>> 8;\n          decTable[i][s] = tDec = tDec << 24 ^ tDec >>> 8;\n        }\n      }\n\n      // Compactify. Considerable speedup on Firefox.\n      for (i = 0; i < 5; i++) {\n        encTable[i] = encTable[i].slice(0);\n        decTable[i] = decTable[i].slice(0);\n      }\n      return tables;\n    };\n    var aesTables = null;\n\n    /**\n     * Schedule out an AES key for both encryption and decryption. This\n     * is a low-level class. Use a cipher mode to do bulk encryption.\n     *\n     * @class AES\n     * @param key {Array} The key as an array of 4, 6 or 8 words.\n     */\n\n    var AES = function () {\n      function AES(key) {\n        classCallCheck$$1(this, AES);\n\n        /**\n         * The expanded S-box and inverse S-box tables. These will be computed\n         * on the client so that we don't have to send them down the wire.\n         *\n         * There are two tables, _tables[0] is for encryption and\n         * _tables[1] is for decryption.\n         *\n         * The first 4 sub-tables are the expanded S-box with MixColumns. The\n         * last (_tables[01][4]) is the S-box itself.\n         *\n         * @private\n         */\n        // if we have yet to precompute the S-box tables\n        // do so now\n        if (!aesTables) {\n          aesTables = precompute();\n        }\n        // then make a copy of that object for use\n        this._tables = [[aesTables[0][0].slice(), aesTables[0][1].slice(), aesTables[0][2].slice(), aesTables[0][3].slice(), aesTables[0][4].slice()], [aesTables[1][0].slice(), aesTables[1][1].slice(), aesTables[1][2].slice(), aesTables[1][3].slice(), aesTables[1][4].slice()]];\n        var i = void 0;\n        var j = void 0;\n        var tmp = void 0;\n        var encKey = void 0;\n        var decKey = void 0;\n        var sbox = this._tables[0][4];\n        var decTable = this._tables[1];\n        var keyLen = key.length;\n        var rcon = 1;\n\n        if (keyLen !== 4 && keyLen !== 6 && keyLen !== 8) {\n          throw new Error('Invalid aes key size');\n        }\n\n        encKey = key.slice(0);\n        decKey = [];\n        this._key = [encKey, decKey];\n\n        // schedule encryption keys\n        for (i = keyLen; i < 4 * keyLen + 28; i++) {\n          tmp = encKey[i - 1];\n\n          // apply sbox\n          if (i % keyLen === 0 || keyLen === 8 && i % keyLen === 4) {\n            tmp = sbox[tmp >>> 24] << 24 ^ sbox[tmp >> 16 & 255] << 16 ^ sbox[tmp >> 8 & 255] << 8 ^ sbox[tmp & 255];\n\n            // shift rows and add rcon\n            if (i % keyLen === 0) {\n              tmp = tmp << 8 ^ tmp >>> 24 ^ rcon << 24;\n              rcon = rcon << 1 ^ (rcon >> 7) * 283;\n            }\n          }\n\n          encKey[i] = encKey[i - keyLen] ^ tmp;\n        }\n\n        // schedule decryption keys\n        for (j = 0; i; j++, i--) {\n          tmp = encKey[j & 3 ? i : i - 4];\n          if (i <= 4 || j < 4) {\n            decKey[j] = tmp;\n          } else {\n            decKey[j] = decTable[0][sbox[tmp >>> 24]] ^ decTable[1][sbox[tmp >> 16 & 255]] ^ decTable[2][sbox[tmp >> 8 & 255]] ^ decTable[3][sbox[tmp & 255]];\n          }\n        }\n      }\n\n      /**\n       * Decrypt 16 bytes, specified as four 32-bit words.\n       *\n       * @param {Number} encrypted0 the first word to decrypt\n       * @param {Number} encrypted1 the second word to decrypt\n       * @param {Number} encrypted2 the third word to decrypt\n       * @param {Number} encrypted3 the fourth word to decrypt\n       * @param {Int32Array} out the array to write the decrypted words\n       * into\n       * @param {Number} offset the offset into the output array to start\n       * writing results\n       * @return {Array} The plaintext.\n       */\n\n      AES.prototype.decrypt = function decrypt$$1(encrypted0, encrypted1, encrypted2, encrypted3, out, offset) {\n        var key = this._key[1];\n        // state variables a,b,c,d are loaded with pre-whitened data\n        var a = encrypted0 ^ key[0];\n        var b = encrypted3 ^ key[1];\n        var c = encrypted2 ^ key[2];\n        var d = encrypted1 ^ key[3];\n        var a2 = void 0;\n        var b2 = void 0;\n        var c2 = void 0;\n\n        // key.length === 2 ?\n        var nInnerRounds = key.length / 4 - 2;\n        var i = void 0;\n        var kIndex = 4;\n        var table = this._tables[1];\n\n        // load up the tables\n        var table0 = table[0];\n        var table1 = table[1];\n        var table2 = table[2];\n        var table3 = table[3];\n        var sbox = table[4];\n\n        // Inner rounds. Cribbed from OpenSSL.\n        for (i = 0; i < nInnerRounds; i++) {\n          a2 = table0[a >>> 24] ^ table1[b >> 16 & 255] ^ table2[c >> 8 & 255] ^ table3[d & 255] ^ key[kIndex];\n          b2 = table0[b >>> 24] ^ table1[c >> 16 & 255] ^ table2[d >> 8 & 255] ^ table3[a & 255] ^ key[kIndex + 1];\n          c2 = table0[c >>> 24] ^ table1[d >> 16 & 255] ^ table2[a >> 8 & 255] ^ table3[b & 255] ^ key[kIndex + 2];\n          d = table0[d >>> 24] ^ table1[a >> 16 & 255] ^ table2[b >> 8 & 255] ^ table3[c & 255] ^ key[kIndex + 3];\n          kIndex += 4;\n          a = a2;b = b2;c = c2;\n        }\n\n        // Last round.\n        for (i = 0; i < 4; i++) {\n          out[(3 & -i) + offset] = sbox[a >>> 24] << 24 ^ sbox[b >> 16 & 255] << 16 ^ sbox[c >> 8 & 255] << 8 ^ sbox[d & 255] ^ key[kIndex++];\n          a2 = a;a = b;b = c;c = d;d = a2;\n        }\n      };\n\n      return AES;\n    }();\n\n    /**\n     * @file stream.js\n     */\n    /**\n     * A lightweight readable stream implemention that handles event dispatching.\n     *\n     * @class Stream\n     */\n    var Stream = function () {\n      function Stream() {\n        classCallCheck$$1(this, Stream);\n\n        this.listeners = {};\n      }\n\n      /**\n       * Add a listener for a specified event type.\n       *\n       * @param {String} type the event name\n       * @param {Function} listener the callback to be invoked when an event of\n       * the specified type occurs\n       */\n\n      Stream.prototype.on = function on(type, listener) {\n        if (!this.listeners[type]) {\n          this.listeners[type] = [];\n        }\n        this.listeners[type].push(listener);\n      };\n\n      /**\n       * Remove a listener for a specified event type.\n       *\n       * @param {String} type the event name\n       * @param {Function} listener  a function previously registered for this\n       * type of event through `on`\n       * @return {Boolean} if we could turn it off or not\n       */\n\n      Stream.prototype.off = function off(type, listener) {\n        if (!this.listeners[type]) {\n          return false;\n        }\n\n        var index = this.listeners[type].indexOf(listener);\n\n        this.listeners[type].splice(index, 1);\n        return index > -1;\n      };\n\n      /**\n       * Trigger an event of the specified type on this stream. Any additional\n       * arguments to this function are passed as parameters to event listeners.\n       *\n       * @param {String} type the event name\n       */\n\n      Stream.prototype.trigger = function trigger(type) {\n        var callbacks = this.listeners[type];\n\n        if (!callbacks) {\n          return;\n        }\n\n        // Slicing the arguments on every invocation of this method\n        // can add a significant amount of overhead. Avoid the\n        // intermediate object creation for the common case of a\n        // single callback argument\n        if (arguments.length === 2) {\n          var length = callbacks.length;\n\n          for (var i = 0; i < length; ++i) {\n            callbacks[i].call(this, arguments[1]);\n          }\n        } else {\n          var args = Array.prototype.slice.call(arguments, 1);\n          var _length = callbacks.length;\n\n          for (var _i = 0; _i < _length; ++_i) {\n            callbacks[_i].apply(this, args);\n          }\n        }\n      };\n\n      /**\n       * Destroys the stream and cleans up.\n       */\n\n      Stream.prototype.dispose = function dispose() {\n        this.listeners = {};\n      };\n      /**\n       * Forwards all `data` events on this stream to the destination stream. The\n       * destination stream should provide a method `push` to receive the data\n       * events as they arrive.\n       *\n       * @param {Stream} destination the stream that will receive all `data` events\n       * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n       */\n\n      Stream.prototype.pipe = function pipe(destination) {\n        this.on('data', function (data) {\n          destination.push(data);\n        });\n      };\n\n      return Stream;\n    }();\n\n    /**\n     * @file async-stream.js\n     */\n    /**\n     * A wrapper around the Stream class to use setTiemout\n     * and run stream \"jobs\" Asynchronously\n     *\n     * @class AsyncStream\n     * @extends Stream\n     */\n\n    var AsyncStream$$1 = function (_Stream) {\n      inherits$$1(AsyncStream$$1, _Stream);\n\n      function AsyncStream$$1() {\n        classCallCheck$$1(this, AsyncStream$$1);\n\n        var _this = possibleConstructorReturn$$1(this, _Stream.call(this, Stream));\n\n        _this.jobs = [];\n        _this.delay = 1;\n        _this.timeout_ = null;\n        return _this;\n      }\n\n      /**\n       * process an async job\n       *\n       * @private\n       */\n\n      AsyncStream$$1.prototype.processJob_ = function processJob_() {\n        this.jobs.shift()();\n        if (this.jobs.length) {\n          this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);\n        } else {\n          this.timeout_ = null;\n        }\n      };\n\n      /**\n       * push a job into the stream\n       *\n       * @param {Function} job the job to push into the stream\n       */\n\n      AsyncStream$$1.prototype.push = function push(job) {\n        this.jobs.push(job);\n        if (!this.timeout_) {\n          this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);\n        }\n      };\n\n      return AsyncStream$$1;\n    }(Stream);\n\n    /**\n     * @file decrypter.js\n     *\n     * An asynchronous implementation of AES-128 CBC decryption with\n     * PKCS#7 padding.\n     */\n\n    /**\n     * Convert network-order (big-endian) bytes into their little-endian\n     * representation.\n     */\n    var ntoh = function ntoh(word) {\n      return word << 24 | (word & 0xff00) << 8 | (word & 0xff0000) >> 8 | word >>> 24;\n    };\n\n    /**\n     * Decrypt bytes using AES-128 with CBC and PKCS#7 padding.\n     *\n     * @param {Uint8Array} encrypted the encrypted bytes\n     * @param {Uint32Array} key the bytes of the decryption key\n     * @param {Uint32Array} initVector the initialization vector (IV) to\n     * use for the first round of CBC.\n     * @return {Uint8Array} the decrypted bytes\n     *\n     * @see http://en.wikipedia.org/wiki/Advanced_Encryption_Standard\n     * @see http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_.28CBC.29\n     * @see https://tools.ietf.org/html/rfc2315\n     */\n    var decrypt$$1 = function decrypt$$1(encrypted, key, initVector) {\n      // word-level access to the encrypted bytes\n      var encrypted32 = new Int32Array(encrypted.buffer, encrypted.byteOffset, encrypted.byteLength >> 2);\n\n      var decipher = new AES(Array.prototype.slice.call(key));\n\n      // byte and word-level access for the decrypted output\n      var decrypted = new Uint8Array(encrypted.byteLength);\n      var decrypted32 = new Int32Array(decrypted.buffer);\n\n      // temporary variables for working with the IV, encrypted, and\n      // decrypted data\n      var init0 = void 0;\n      var init1 = void 0;\n      var init2 = void 0;\n      var init3 = void 0;\n      var encrypted0 = void 0;\n      var encrypted1 = void 0;\n      var encrypted2 = void 0;\n      var encrypted3 = void 0;\n\n      // iteration variable\n      var wordIx = void 0;\n\n      // pull out the words of the IV to ensure we don't modify the\n      // passed-in reference and easier access\n      init0 = initVector[0];\n      init1 = initVector[1];\n      init2 = initVector[2];\n      init3 = initVector[3];\n\n      // decrypt four word sequences, applying cipher-block chaining (CBC)\n      // to each decrypted block\n      for (wordIx = 0; wordIx < encrypted32.length; wordIx += 4) {\n        // convert big-endian (network order) words into little-endian\n        // (javascript order)\n        encrypted0 = ntoh(encrypted32[wordIx]);\n        encrypted1 = ntoh(encrypted32[wordIx + 1]);\n        encrypted2 = ntoh(encrypted32[wordIx + 2]);\n        encrypted3 = ntoh(encrypted32[wordIx + 3]);\n\n        // decrypt the block\n        decipher.decrypt(encrypted0, encrypted1, encrypted2, encrypted3, decrypted32, wordIx);\n\n        // XOR with the IV, and restore network byte-order to obtain the\n        // plaintext\n        decrypted32[wordIx] = ntoh(decrypted32[wordIx] ^ init0);\n        decrypted32[wordIx + 1] = ntoh(decrypted32[wordIx + 1] ^ init1);\n        decrypted32[wordIx + 2] = ntoh(decrypted32[wordIx + 2] ^ init2);\n        decrypted32[wordIx + 3] = ntoh(decrypted32[wordIx + 3] ^ init3);\n\n        // setup the IV for the next round\n        init0 = encrypted0;\n        init1 = encrypted1;\n        init2 = encrypted2;\n        init3 = encrypted3;\n      }\n\n      return decrypted;\n    };\n\n    /**\n     * The `Decrypter` class that manages decryption of AES\n     * data through `AsyncStream` objects and the `decrypt`\n     * function\n     *\n     * @param {Uint8Array} encrypted the encrypted bytes\n     * @param {Uint32Array} key the bytes of the decryption key\n     * @param {Uint32Array} initVector the initialization vector (IV) to\n     * @param {Function} done the function to run when done\n     * @class Decrypter\n     */\n\n    var Decrypter$$1 = function () {\n      function Decrypter$$1(encrypted, key, initVector, done) {\n        classCallCheck$$1(this, Decrypter$$1);\n\n        var step = Decrypter$$1.STEP;\n        var encrypted32 = new Int32Array(encrypted.buffer);\n        var decrypted = new Uint8Array(encrypted.byteLength);\n        var i = 0;\n\n        this.asyncStream_ = new AsyncStream$$1();\n\n        // split up the encryption job and do the individual chunks asynchronously\n        this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));\n        for (i = step; i < encrypted32.length; i += step) {\n          initVector = new Uint32Array([ntoh(encrypted32[i - 4]), ntoh(encrypted32[i - 3]), ntoh(encrypted32[i - 2]), ntoh(encrypted32[i - 1])]);\n          this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));\n        }\n        // invoke the done() callback when everything is finished\n        this.asyncStream_.push(function () {\n          // remove pkcs#7 padding from the decrypted bytes\n          done(null, unpad(decrypted));\n        });\n      }\n\n      /**\n       * a getter for step the maximum number of bytes to process at one time\n       *\n       * @return {Number} the value of step 32000\n       */\n\n      /**\n       * @private\n       */\n      Decrypter$$1.prototype.decryptChunk_ = function decryptChunk_(encrypted, key, initVector, decrypted) {\n        return function () {\n          var bytes = decrypt$$1(encrypted, key, initVector);\n\n          decrypted.set(bytes, encrypted.byteOffset);\n        };\n      };\n\n      createClass$$1(Decrypter$$1, null, [{\n        key: 'STEP',\n        get: function get$$1() {\n          // 4 * 8000;\n          return 32000;\n        }\n      }]);\n      return Decrypter$$1;\n    }();\n\n    /**\n     * @file bin-utils.js\n     */\n\n    /**\n     * Creates an object for sending to a web worker modifying properties that are TypedArrays\n     * into a new object with seperated properties for the buffer, byteOffset, and byteLength.\n     *\n     * @param {Object} message\n     *        Object of properties and values to send to the web worker\n     * @return {Object}\n     *         Modified message with TypedArray values expanded\n     * @function createTransferableMessage\n     */\n    var createTransferableMessage = function createTransferableMessage(message) {\n      var transferable = {};\n\n      Object.keys(message).forEach(function (key) {\n        var value = message[key];\n\n        if (ArrayBuffer.isView(value)) {\n          transferable[key] = {\n            bytes: value.buffer,\n            byteOffset: value.byteOffset,\n            byteLength: value.byteLength\n          };\n        } else {\n          transferable[key] = value;\n        }\n      });\n\n      return transferable;\n    };\n\n    /**\n     * Our web worker interface so that things can talk to aes-decrypter\n     * that will be running in a web worker. the scope is passed to this by\n     * webworkify.\n     *\n     * @param {Object} self\n     *        the scope for the web worker\n     */\n    var DecrypterWorker = function DecrypterWorker(self) {\n      self.onmessage = function (event) {\n        var data = event.data;\n        var encrypted = new Uint8Array(data.encrypted.bytes, data.encrypted.byteOffset, data.encrypted.byteLength);\n        var key = new Uint32Array(data.key.bytes, data.key.byteOffset, data.key.byteLength / 4);\n        var iv = new Uint32Array(data.iv.bytes, data.iv.byteOffset, data.iv.byteLength / 4);\n\n        /* eslint-disable no-new, handle-callback-err */\n        new Decrypter$$1(encrypted, key, iv, function (err, bytes) {\n          self.postMessage(createTransferableMessage({\n            source: data.source,\n            decrypted: bytes\n          }), [bytes.buffer]);\n        });\n        /* eslint-enable */\n      };\n    };\n\n    var decrypterWorker = new DecrypterWorker(self);\n\n    return decrypterWorker;\n  }();\n});\n\n/**\n * Convert the properties of an HLS track into an audioTrackKind.\n *\n * @private\n */\nvar audioTrackKind_ = function audioTrackKind_(properties) {\n  var kind = properties.default ? 'main' : 'alternative';\n\n  if (properties.characteristics && properties.characteristics.indexOf('public.accessibility.describes-video') >= 0) {\n    kind = 'main-desc';\n  }\n\n  return kind;\n};\n\n/**\n * Pause provided segment loader and playlist loader if active\n *\n * @param {SegmentLoader} segmentLoader\n *        SegmentLoader to pause\n * @param {Object} mediaType\n *        Active media type\n * @function stopLoaders\n */\nvar stopLoaders = function stopLoaders(segmentLoader, mediaType) {\n  segmentLoader.abort();\n  segmentLoader.pause();\n\n  if (mediaType && mediaType.activePlaylistLoader) {\n    mediaType.activePlaylistLoader.pause();\n    mediaType.activePlaylistLoader = null;\n  }\n};\n\n/**\n * Start loading provided segment loader and playlist loader\n *\n * @param {PlaylistLoader} playlistLoader\n *        PlaylistLoader to start loading\n * @param {Object} mediaType\n *        Active media type\n * @function startLoaders\n */\nvar startLoaders = function startLoaders(playlistLoader, mediaType) {\n  // Segment loader will be started after `loadedmetadata` or `loadedplaylist` from the\n  // playlist loader\n  mediaType.activePlaylistLoader = playlistLoader;\n  playlistLoader.load();\n};\n\n/**\n * Returns a function to be called when the media group changes. It performs a\n * non-destructive (preserve the buffer) resync of the SegmentLoader. This is because a\n * change of group is merely a rendition switch of the same content at another encoding,\n * rather than a change of content, such as switching audio from English to Spanish.\n *\n * @param {String} type\n *        MediaGroup type\n * @param {Object} settings\n *        Object containing required information for media groups\n * @return {Function}\n *         Handler for a non-destructive resync of SegmentLoader when the active media\n *         group changes.\n * @function onGroupChanged\n */\nvar onGroupChanged = function onGroupChanged(type, settings) {\n  return function () {\n    var _settings$segmentLoad = settings.segmentLoaders,\n        segmentLoader = _settings$segmentLoad[type],\n        mainSegmentLoader = _settings$segmentLoad.main,\n        mediaType = settings.mediaTypes[type];\n\n    var activeTrack = mediaType.activeTrack();\n    var activeGroup = mediaType.activeGroup(activeTrack);\n    var previousActiveLoader = mediaType.activePlaylistLoader;\n\n    stopLoaders(segmentLoader, mediaType);\n\n    if (!activeGroup) {\n      // there is no group active\n      return;\n    }\n\n    if (!activeGroup.playlistLoader) {\n      if (previousActiveLoader) {\n        // The previous group had a playlist loader but the new active group does not\n        // this means we are switching from demuxed to muxed audio. In this case we want to\n        // do a destructive reset of the main segment loader and not restart the audio\n        // loaders.\n        mainSegmentLoader.resetEverything();\n      }\n      return;\n    }\n\n    // Non-destructive resync\n    segmentLoader.resyncLoader();\n\n    startLoaders(activeGroup.playlistLoader, mediaType);\n  };\n};\n\n/**\n * Returns a function to be called when the media track changes. It performs a\n * destructive reset of the SegmentLoader to ensure we start loading as close to\n * currentTime as possible.\n *\n * @param {String} type\n *        MediaGroup type\n * @param {Object} settings\n *        Object containing required information for media groups\n * @return {Function}\n *         Handler for a destructive reset of SegmentLoader when the active media\n *         track changes.\n * @function onTrackChanged\n */\nvar onTrackChanged = function onTrackChanged(type, settings) {\n  return function () {\n    var _settings$segmentLoad2 = settings.segmentLoaders,\n        segmentLoader = _settings$segmentLoad2[type],\n        mainSegmentLoader = _settings$segmentLoad2.main,\n        mediaType = settings.mediaTypes[type];\n\n    var activeTrack = mediaType.activeTrack();\n    var activeGroup = mediaType.activeGroup(activeTrack);\n    var previousActiveLoader = mediaType.activePlaylistLoader;\n\n    stopLoaders(segmentLoader, mediaType);\n\n    if (!activeGroup) {\n      // there is no group active so we do not want to restart loaders\n      return;\n    }\n\n    if (!activeGroup.playlistLoader) {\n      // when switching from demuxed audio/video to muxed audio/video (noted by no playlist\n      // loader for the audio group), we want to do a destructive reset of the main segment\n      // loader and not restart the audio loaders\n      mainSegmentLoader.resetEverything();\n      return;\n    }\n\n    if (previousActiveLoader === activeGroup.playlistLoader) {\n      // Nothing has actually changed. This can happen because track change events can fire\n      // multiple times for a \"single\" change. One for enabling the new active track, and\n      // one for disabling the track that was active\n      startLoaders(activeGroup.playlistLoader, mediaType);\n      return;\n    }\n\n    if (segmentLoader.track) {\n      // For WebVTT, set the new text track in the segmentloader\n      segmentLoader.track(activeTrack);\n    }\n\n    // destructive reset\n    segmentLoader.resetEverything();\n\n    startLoaders(activeGroup.playlistLoader, mediaType);\n  };\n};\n\nvar onError = {\n  /**\n   * Returns a function to be called when a SegmentLoader or PlaylistLoader encounters\n   * an error.\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @return {Function}\n   *         Error handler. Logs warning (or error if the playlist is blacklisted) to\n   *         console and switches back to default audio track.\n   * @function onError.AUDIO\n   */\n  AUDIO: function AUDIO(type, settings) {\n    return function () {\n      var segmentLoader = settings.segmentLoaders[type],\n          mediaType = settings.mediaTypes[type],\n          blacklistCurrentPlaylist = settings.blacklistCurrentPlaylist;\n\n      stopLoaders(segmentLoader, mediaType);\n\n      // switch back to default audio track\n      var activeTrack = mediaType.activeTrack();\n      var activeGroup = mediaType.activeGroup();\n      var id = (activeGroup.filter(function (group) {\n        return group.default;\n      })[0] || activeGroup[0]).id;\n      var defaultTrack = mediaType.tracks[id];\n\n      if (activeTrack === defaultTrack) {\n        // Default track encountered an error. All we can do now is blacklist the current\n        // rendition and hope another will switch audio groups\n        blacklistCurrentPlaylist({\n          message: 'Problem encountered loading the default audio track.'\n        });\n        return;\n      }\n\n      videojs$1.log.warn('Problem encountered loading the alternate audio track.' + 'Switching back to default.');\n\n      for (var trackId in mediaType.tracks) {\n        mediaType.tracks[trackId].enabled = mediaType.tracks[trackId] === defaultTrack;\n      }\n\n      mediaType.onTrackChanged();\n    };\n  },\n  /**\n   * Returns a function to be called when a SegmentLoader or PlaylistLoader encounters\n   * an error.\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @return {Function}\n   *         Error handler. Logs warning to console and disables the active subtitle track\n   * @function onError.SUBTITLES\n   */\n  SUBTITLES: function SUBTITLES(type, settings) {\n    return function () {\n      var segmentLoader = settings.segmentLoaders[type],\n          mediaType = settings.mediaTypes[type];\n\n      videojs$1.log.warn('Problem encountered loading the subtitle track.' + 'Disabling subtitle track.');\n\n      stopLoaders(segmentLoader, mediaType);\n\n      var track = mediaType.activeTrack();\n\n      if (track) {\n        track.mode = 'disabled';\n      }\n\n      mediaType.onTrackChanged();\n    };\n  }\n};\n\nvar setupListeners = {\n  /**\n   * Setup event listeners for audio playlist loader\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {PlaylistLoader|null} playlistLoader\n   *        PlaylistLoader to register listeners on\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function setupListeners.AUDIO\n   */\n  AUDIO: function AUDIO(type, playlistLoader, settings) {\n    if (!playlistLoader) {\n      // no playlist loader means audio will be muxed with the video\n      return;\n    }\n\n    var tech = settings.tech,\n        requestOptions = settings.requestOptions,\n        segmentLoader = settings.segmentLoaders[type];\n\n    playlistLoader.on('loadedmetadata', function () {\n      var media = playlistLoader.media();\n\n      segmentLoader.playlist(media, requestOptions);\n\n      // if the video is already playing, or if this isn't a live video and preload\n      // permits, start downloading segments\n      if (!tech.paused() || media.endList && tech.preload() !== 'none') {\n        segmentLoader.load();\n      }\n    });\n\n    playlistLoader.on('loadedplaylist', function () {\n      segmentLoader.playlist(playlistLoader.media(), requestOptions);\n\n      // If the player isn't paused, ensure that the segment loader is running\n      if (!tech.paused()) {\n        segmentLoader.load();\n      }\n    });\n\n    playlistLoader.on('error', onError[type](type, settings));\n  },\n  /**\n   * Setup event listeners for subtitle playlist loader\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {PlaylistLoader|null} playlistLoader\n   *        PlaylistLoader to register listeners on\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function setupListeners.SUBTITLES\n   */\n  SUBTITLES: function SUBTITLES(type, playlistLoader, settings) {\n    var tech = settings.tech,\n        requestOptions = settings.requestOptions,\n        segmentLoader = settings.segmentLoaders[type],\n        mediaType = settings.mediaTypes[type];\n\n    playlistLoader.on('loadedmetadata', function () {\n      var media = playlistLoader.media();\n\n      segmentLoader.playlist(media, requestOptions);\n      segmentLoader.track(mediaType.activeTrack());\n\n      // if the video is already playing, or if this isn't a live video and preload\n      // permits, start downloading segments\n      if (!tech.paused() || media.endList && tech.preload() !== 'none') {\n        segmentLoader.load();\n      }\n    });\n\n    playlistLoader.on('loadedplaylist', function () {\n      segmentLoader.playlist(playlistLoader.media(), requestOptions);\n\n      // If the player isn't paused, ensure that the segment loader is running\n      if (!tech.paused()) {\n        segmentLoader.load();\n      }\n    });\n\n    playlistLoader.on('error', onError[type](type, settings));\n  }\n};\n\nvar byGroupId = function byGroupId(type, groupId) {\n  return function (playlist) {\n    return playlist.attributes[type] === groupId;\n  };\n};\n\nvar byResolvedUri = function byResolvedUri(resolvedUri) {\n  return function (playlist) {\n    return playlist.resolvedUri === resolvedUri;\n  };\n};\n\nvar initialize = {\n  /**\n   * Setup PlaylistLoaders and AudioTracks for the audio groups\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function initialize.AUDIO\n   */\n  'AUDIO': function AUDIO(type, settings) {\n    var hls = settings.hls,\n        sourceType = settings.sourceType,\n        segmentLoader = settings.segmentLoaders[type],\n        withCredentials = settings.requestOptions.withCredentials,\n        _settings$master = settings.master,\n        mediaGroups = _settings$master.mediaGroups,\n        playlists = _settings$master.playlists,\n        _settings$mediaTypes$ = settings.mediaTypes[type],\n        groups = _settings$mediaTypes$.groups,\n        tracks = _settings$mediaTypes$.tracks,\n        masterPlaylistLoader = settings.masterPlaylistLoader;\n\n    // force a default if we have none\n\n    if (!mediaGroups[type] || Object.keys(mediaGroups[type]).length === 0) {\n      mediaGroups[type] = { main: { default: { default: true } } };\n    }\n\n    for (var groupId in mediaGroups[type]) {\n      if (!groups[groupId]) {\n        groups[groupId] = [];\n      }\n\n      // List of playlists that have an AUDIO attribute value matching the current\n      // group ID\n      var groupPlaylists = playlists.filter(byGroupId(type, groupId));\n\n      for (var variantLabel in mediaGroups[type][groupId]) {\n        var properties = mediaGroups[type][groupId][variantLabel];\n\n        // List of playlists for the current group ID that have a matching uri with\n        // this alternate audio variant\n        var matchingPlaylists = groupPlaylists.filter(byResolvedUri(properties.resolvedUri));\n\n        if (matchingPlaylists.length) {\n          // If there is a playlist that has the same uri as this audio variant, assume\n          // that the playlist is audio only. We delete the resolvedUri property here\n          // to prevent a playlist loader from being created so that we don't have\n          // both the main and audio segment loaders loading the same audio segments\n          // from the same playlist.\n          delete properties.resolvedUri;\n        }\n\n        var playlistLoader = void 0;\n\n        if (properties.resolvedUri) {\n          playlistLoader = new PlaylistLoader(properties.resolvedUri, hls, withCredentials);\n        } else if (properties.playlists && sourceType === 'dash') {\n          playlistLoader = new DashPlaylistLoader(properties.playlists[0], hls, withCredentials, masterPlaylistLoader);\n        } else {\n          // no resolvedUri means the audio is muxed with the video when using this\n          // audio track\n          playlistLoader = null;\n        }\n\n        properties = videojs$1.mergeOptions({ id: variantLabel, playlistLoader: playlistLoader }, properties);\n\n        setupListeners[type](type, properties.playlistLoader, settings);\n\n        groups[groupId].push(properties);\n\n        if (typeof tracks[variantLabel] === 'undefined') {\n          var track = new videojs$1.AudioTrack({\n            id: variantLabel,\n            kind: audioTrackKind_(properties),\n            enabled: false,\n            language: properties.language,\n            default: properties.default,\n            label: variantLabel\n          });\n\n          tracks[variantLabel] = track;\n        }\n      }\n    }\n\n    // setup single error event handler for the segment loader\n    segmentLoader.on('error', onError[type](type, settings));\n  },\n  /**\n   * Setup PlaylistLoaders and TextTracks for the subtitle groups\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function initialize.SUBTITLES\n   */\n  'SUBTITLES': function SUBTITLES(type, settings) {\n    var tech = settings.tech,\n        hls = settings.hls,\n        sourceType = settings.sourceType,\n        segmentLoader = settings.segmentLoaders[type],\n        withCredentials = settings.requestOptions.withCredentials,\n        mediaGroups = settings.master.mediaGroups,\n        _settings$mediaTypes$2 = settings.mediaTypes[type],\n        groups = _settings$mediaTypes$2.groups,\n        tracks = _settings$mediaTypes$2.tracks,\n        masterPlaylistLoader = settings.masterPlaylistLoader;\n\n    for (var groupId in mediaGroups[type]) {\n      if (!groups[groupId]) {\n        groups[groupId] = [];\n      }\n\n      for (var variantLabel in mediaGroups[type][groupId]) {\n        if (mediaGroups[type][groupId][variantLabel].forced) {\n          // Subtitle playlists with the forced attribute are not selectable in Safari.\n          // According to Apple's HLS Authoring Specification:\n          //   If content has forced subtitles and regular subtitles in a given language,\n          //   the regular subtitles track in that language MUST contain both the forced\n          //   subtitles and the regular subtitles for that language.\n          // Because of this requirement and that Safari does not add forced subtitles,\n          // forced subtitles are skipped here to maintain consistent experience across\n          // all platforms\n          continue;\n        }\n\n        var properties = mediaGroups[type][groupId][variantLabel];\n\n        var playlistLoader = void 0;\n\n        if (sourceType === 'hls') {\n          playlistLoader = new PlaylistLoader(properties.resolvedUri, hls, withCredentials);\n        } else if (sourceType === 'dash') {\n          playlistLoader = new DashPlaylistLoader(properties.playlists[0], hls, withCredentials, masterPlaylistLoader);\n        }\n\n        properties = videojs$1.mergeOptions({\n          id: variantLabel,\n          playlistLoader: playlistLoader\n        }, properties);\n\n        setupListeners[type](type, properties.playlistLoader, settings);\n\n        groups[groupId].push(properties);\n\n        if (typeof tracks[variantLabel] === 'undefined') {\n          var track = tech.addRemoteTextTrack({\n            id: variantLabel,\n            kind: 'subtitles',\n            enabled: false,\n            language: properties.language,\n            label: variantLabel\n          }, false).track;\n\n          tracks[variantLabel] = track;\n        }\n      }\n    }\n\n    // setup single error event handler for the segment loader\n    segmentLoader.on('error', onError[type](type, settings));\n  },\n  /**\n   * Setup TextTracks for the closed-caption groups\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function initialize['CLOSED-CAPTIONS']\n   */\n  'CLOSED-CAPTIONS': function CLOSEDCAPTIONS(type, settings) {\n    var tech = settings.tech,\n        mediaGroups = settings.master.mediaGroups,\n        _settings$mediaTypes$3 = settings.mediaTypes[type],\n        groups = _settings$mediaTypes$3.groups,\n        tracks = _settings$mediaTypes$3.tracks;\n\n    for (var groupId in mediaGroups[type]) {\n      if (!groups[groupId]) {\n        groups[groupId] = [];\n      }\n\n      for (var variantLabel in mediaGroups[type][groupId]) {\n        var properties = mediaGroups[type][groupId][variantLabel];\n\n        // We only support CEA608 captions for now, so ignore anything that\n        // doesn't use a CCx INSTREAM-ID\n        if (!properties.instreamId.match(/CC\\d/)) {\n          continue;\n        }\n\n        // No PlaylistLoader is required for Closed-Captions because the captions are\n        // embedded within the video stream\n        groups[groupId].push(videojs$1.mergeOptions({ id: variantLabel }, properties));\n\n        if (typeof tracks[variantLabel] === 'undefined') {\n          var track = tech.addRemoteTextTrack({\n            id: properties.instreamId,\n            kind: 'captions',\n            enabled: false,\n            language: properties.language,\n            label: variantLabel\n          }, false).track;\n\n          tracks[variantLabel] = track;\n        }\n      }\n    }\n  }\n};\n\n/**\n * Returns a function used to get the active group of the provided type\n *\n * @param {String} type\n *        MediaGroup type\n * @param {Object} settings\n *        Object containing required information for media groups\n * @return {Function}\n *         Function that returns the active media group for the provided type. Takes an\n *         optional parameter {TextTrack} track. If no track is provided, a list of all\n *         variants in the group, otherwise the variant corresponding to the provided\n *         track is returned.\n * @function activeGroup\n */\nvar activeGroup = function activeGroup(type, settings) {\n  return function (track) {\n    var masterPlaylistLoader = settings.masterPlaylistLoader,\n        groups = settings.mediaTypes[type].groups;\n\n    var media = masterPlaylistLoader.media();\n\n    if (!media) {\n      return null;\n    }\n\n    var variants = null;\n\n    if (media.attributes[type]) {\n      variants = groups[media.attributes[type]];\n    }\n\n    variants = variants || groups.main;\n\n    if (typeof track === 'undefined') {\n      return variants;\n    }\n\n    if (track === null) {\n      // An active track was specified so a corresponding group is expected. track === null\n      // means no track is currently active so there is no corresponding group\n      return null;\n    }\n\n    return variants.filter(function (props) {\n      return props.id === track.id;\n    })[0] || null;\n  };\n};\n\nvar activeTrack = {\n  /**\n   * Returns a function used to get the active track of type provided\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @return {Function}\n   *         Function that returns the active media track for the provided type. Returns\n   *         null if no track is active\n   * @function activeTrack.AUDIO\n   */\n  AUDIO: function AUDIO(type, settings) {\n    return function () {\n      var tracks = settings.mediaTypes[type].tracks;\n\n      for (var id in tracks) {\n        if (tracks[id].enabled) {\n          return tracks[id];\n        }\n      }\n\n      return null;\n    };\n  },\n  /**\n   * Returns a function used to get the active track of type provided\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @return {Function}\n   *         Function that returns the active media track for the provided type. Returns\n   *         null if no track is active\n   * @function activeTrack.SUBTITLES\n   */\n  SUBTITLES: function SUBTITLES(type, settings) {\n    return function () {\n      var tracks = settings.mediaTypes[type].tracks;\n\n      for (var id in tracks) {\n        if (tracks[id].mode === 'showing') {\n          return tracks[id];\n        }\n      }\n\n      return null;\n    };\n  }\n};\n\n/**\n * Setup PlaylistLoaders and Tracks for media groups (Audio, Subtitles,\n * Closed-Captions) specified in the master manifest.\n *\n * @param {Object} settings\n *        Object containing required information for setting up the media groups\n * @param {SegmentLoader} settings.segmentLoaders.AUDIO\n *        Audio segment loader\n * @param {SegmentLoader} settings.segmentLoaders.SUBTITLES\n *        Subtitle segment loader\n * @param {SegmentLoader} settings.segmentLoaders.main\n *        Main segment loader\n * @param {Tech} settings.tech\n *        The tech of the player\n * @param {Object} settings.requestOptions\n *        XHR request options used by the segment loaders\n * @param {PlaylistLoader} settings.masterPlaylistLoader\n *        PlaylistLoader for the master source\n * @param {HlsHandler} settings.hls\n *        HLS SourceHandler\n * @param {Object} settings.master\n *        The parsed master manifest\n * @param {Object} settings.mediaTypes\n *        Object to store the loaders, tracks, and utility methods for each media type\n * @param {Function} settings.blacklistCurrentPlaylist\n *        Blacklists the current rendition and forces a rendition switch.\n * @function setupMediaGroups\n */\nvar setupMediaGroups = function setupMediaGroups(settings) {\n  ['AUDIO', 'SUBTITLES', 'CLOSED-CAPTIONS'].forEach(function (type) {\n    initialize[type](type, settings);\n  });\n\n  var mediaTypes = settings.mediaTypes,\n      masterPlaylistLoader = settings.masterPlaylistLoader,\n      tech = settings.tech,\n      hls = settings.hls;\n\n  // setup active group and track getters and change event handlers\n\n  ['AUDIO', 'SUBTITLES'].forEach(function (type) {\n    mediaTypes[type].activeGroup = activeGroup(type, settings);\n    mediaTypes[type].activeTrack = activeTrack[type](type, settings);\n    mediaTypes[type].onGroupChanged = onGroupChanged(type, settings);\n    mediaTypes[type].onTrackChanged = onTrackChanged(type, settings);\n  });\n\n  // DO NOT enable the default subtitle or caption track.\n  // DO enable the default audio track\n  var audioGroup = mediaTypes.AUDIO.activeGroup();\n  var groupId = (audioGroup.filter(function (group) {\n    return group.default;\n  })[0] || audioGroup[0]).id;\n\n  mediaTypes.AUDIO.tracks[groupId].enabled = true;\n  mediaTypes.AUDIO.onTrackChanged();\n\n  masterPlaylistLoader.on('mediachange', function () {\n    ['AUDIO', 'SUBTITLES'].forEach(function (type) {\n      return mediaTypes[type].onGroupChanged();\n    });\n  });\n\n  // custom audio track change event handler for usage event\n  var onAudioTrackChanged = function onAudioTrackChanged() {\n    mediaTypes.AUDIO.onTrackChanged();\n    tech.trigger({ type: 'usage', name: 'hls-audio-change' });\n  };\n\n  tech.audioTracks().addEventListener('change', onAudioTrackChanged);\n  tech.remoteTextTracks().addEventListener('change', mediaTypes.SUBTITLES.onTrackChanged);\n\n  hls.on('dispose', function () {\n    tech.audioTracks().removeEventListener('change', onAudioTrackChanged);\n    tech.remoteTextTracks().removeEventListener('change', mediaTypes.SUBTITLES.onTrackChanged);\n  });\n\n  // clear existing audio tracks and add the ones we just created\n  tech.clearTracks('audio');\n\n  for (var id in mediaTypes.AUDIO.tracks) {\n    tech.audioTracks().addTrack(mediaTypes.AUDIO.tracks[id]);\n  }\n};\n\n/**\n * Creates skeleton object used to store the loaders, tracks, and utility methods for each\n * media type\n *\n * @return {Object}\n *         Object to store the loaders, tracks, and utility methods for each media type\n * @function createMediaTypes\n */\nvar createMediaTypes = function createMediaTypes() {\n  var mediaTypes = {};\n\n  ['AUDIO', 'SUBTITLES', 'CLOSED-CAPTIONS'].forEach(function (type) {\n    mediaTypes[type] = {\n      groups: {},\n      tracks: {},\n      activePlaylistLoader: null,\n      activeGroup: noop,\n      activeTrack: noop,\n      onGroupChanged: noop,\n      onTrackChanged: noop\n    };\n  });\n\n  return mediaTypes;\n};\n\n/**\n * @file master-playlist-controller.js\n */\n\nvar ABORT_EARLY_BLACKLIST_SECONDS = 60 * 2;\n\nvar Hls = void 0;\n\n// SegmentLoader stats that need to have each loader's\n// values summed to calculate the final value\nvar loaderStats = ['mediaRequests', 'mediaRequestsAborted', 'mediaRequestsTimedout', 'mediaRequestsErrored', 'mediaTransferDuration', 'mediaBytesTransferred'];\nvar sumLoaderStat = function sumLoaderStat(stat) {\n  return this.audioSegmentLoader_[stat] + this.mainSegmentLoader_[stat];\n};\n\n/**\n * the master playlist controller controller all interactons\n * between playlists and segmentloaders. At this time this mainly\n * involves a master playlist and a series of audio playlists\n * if they are available\n *\n * @class MasterPlaylistController\n * @extends videojs.EventTarget\n */\nvar MasterPlaylistController = function (_videojs$EventTarget) {\n  inherits$1(MasterPlaylistController, _videojs$EventTarget);\n\n  function MasterPlaylistController(options) {\n    classCallCheck$1(this, MasterPlaylistController);\n\n    var _this = possibleConstructorReturn$1(this, (MasterPlaylistController.__proto__ || Object.getPrototypeOf(MasterPlaylistController)).call(this));\n\n    var url = options.url,\n        withCredentials = options.withCredentials,\n        tech = options.tech,\n        bandwidth = options.bandwidth,\n        externHls = options.externHls,\n        useCueTags = options.useCueTags,\n        blacklistDuration = options.blacklistDuration,\n        enableLowInitialPlaylist = options.enableLowInitialPlaylist,\n        sourceType = options.sourceType,\n        seekTo = options.seekTo;\n\n    if (!url) {\n      throw new Error('A non-empty playlist URL is required');\n    }\n\n    Hls = externHls;\n\n    _this.withCredentials = withCredentials;\n    _this.tech_ = tech;\n    _this.hls_ = tech.hls;\n    _this.seekTo_ = seekTo;\n    _this.sourceType_ = sourceType;\n    _this.useCueTags_ = useCueTags;\n    _this.blacklistDuration = blacklistDuration;\n    _this.enableLowInitialPlaylist = enableLowInitialPlaylist;\n    if (_this.useCueTags_) {\n      _this.cueTagsTrack_ = _this.tech_.addTextTrack('metadata', 'ad-cues');\n      _this.cueTagsTrack_.inBandMetadataTrackDispatchType = '';\n    }\n\n    _this.requestOptions_ = {\n      withCredentials: _this.withCredentials,\n      timeout: null\n    };\n\n    _this.mediaTypes_ = createMediaTypes();\n\n    _this.mediaSource = new videojs$1.MediaSource();\n\n    // load the media source into the player\n    _this.mediaSource.addEventListener('sourceopen', _this.handleSourceOpen_.bind(_this));\n\n    _this.seekable_ = videojs$1.createTimeRanges();\n    _this.hasPlayed_ = function () {\n      return false;\n    };\n\n    _this.syncController_ = new SyncController(options);\n    _this.segmentMetadataTrack_ = tech.addRemoteTextTrack({\n      kind: 'metadata',\n      label: 'segment-metadata'\n    }, false).track;\n\n    _this.decrypter_ = new Decrypter$1();\n    _this.inbandTextTracks_ = {};\n\n    var segmentLoaderSettings = {\n      hls: _this.hls_,\n      mediaSource: _this.mediaSource,\n      currentTime: _this.tech_.currentTime.bind(_this.tech_),\n      seekable: function seekable$$1() {\n        return _this.seekable();\n      },\n      seeking: function seeking() {\n        return _this.tech_.seeking();\n      },\n      duration: function duration$$1() {\n        return _this.mediaSource.duration;\n      },\n      hasPlayed: function hasPlayed() {\n        return _this.hasPlayed_();\n      },\n      goalBufferLength: function goalBufferLength() {\n        return _this.goalBufferLength();\n      },\n      bandwidth: bandwidth,\n      syncController: _this.syncController_,\n      decrypter: _this.decrypter_,\n      sourceType: _this.sourceType_,\n      inbandTextTracks: _this.inbandTextTracks_\n    };\n\n    _this.masterPlaylistLoader_ = _this.sourceType_ === 'dash' ? new DashPlaylistLoader(url, _this.hls_, _this.withCredentials) : new PlaylistLoader(url, _this.hls_, _this.withCredentials);\n    _this.setupMasterPlaylistLoaderListeners_();\n\n    // setup segment loaders\n    // combined audio/video or just video when alternate audio track is selected\n    _this.mainSegmentLoader_ = new SegmentLoader(videojs$1.mergeOptions(segmentLoaderSettings, {\n      segmentMetadataTrack: _this.segmentMetadataTrack_,\n      loaderType: 'main'\n    }), options);\n\n    // alternate audio track\n    _this.audioSegmentLoader_ = new SegmentLoader(videojs$1.mergeOptions(segmentLoaderSettings, {\n      loaderType: 'audio'\n    }), options);\n\n    _this.subtitleSegmentLoader_ = new VTTSegmentLoader(videojs$1.mergeOptions(segmentLoaderSettings, {\n      loaderType: 'vtt'\n    }), options);\n\n    _this.setupSegmentLoaderListeners_();\n\n    // Create SegmentLoader stat-getters\n    loaderStats.forEach(function (stat) {\n      _this[stat + '_'] = sumLoaderStat.bind(_this, stat);\n    });\n\n    _this.logger_ = logger('MPC');\n\n    _this.masterPlaylistLoader_.load();\n    return _this;\n  }\n\n  /**\n   * Register event handlers on the master playlist loader. A helper\n   * function for construction time.\n   *\n   * @private\n   */\n\n  createClass$1(MasterPlaylistController, [{\n    key: 'setupMasterPlaylistLoaderListeners_',\n    value: function setupMasterPlaylistLoaderListeners_() {\n      var _this2 = this;\n\n      this.masterPlaylistLoader_.on('loadedmetadata', function () {\n        var media = _this2.masterPlaylistLoader_.media();\n        var requestTimeout = _this2.masterPlaylistLoader_.targetDuration * 1.5 * 1000;\n\n        // If we don't have any more available playlists, we don't want to\n        // timeout the request.\n        if (isLowestEnabledRendition(_this2.masterPlaylistLoader_.master, _this2.masterPlaylistLoader_.media())) {\n          _this2.requestOptions_.timeout = 0;\n        } else {\n          _this2.requestOptions_.timeout = requestTimeout;\n        }\n\n        // if this isn't a live video and preload permits, start\n        // downloading segments\n        if (media.endList && _this2.tech_.preload() !== 'none') {\n          _this2.mainSegmentLoader_.playlist(media, _this2.requestOptions_);\n          _this2.mainSegmentLoader_.load();\n        }\n\n        setupMediaGroups({\n          sourceType: _this2.sourceType_,\n          segmentLoaders: {\n            AUDIO: _this2.audioSegmentLoader_,\n            SUBTITLES: _this2.subtitleSegmentLoader_,\n            main: _this2.mainSegmentLoader_\n          },\n          tech: _this2.tech_,\n          requestOptions: _this2.requestOptions_,\n          masterPlaylistLoader: _this2.masterPlaylistLoader_,\n          hls: _this2.hls_,\n          master: _this2.master(),\n          mediaTypes: _this2.mediaTypes_,\n          blacklistCurrentPlaylist: _this2.blacklistCurrentPlaylist.bind(_this2)\n        });\n\n        _this2.triggerPresenceUsage_(_this2.master(), media);\n\n        try {\n          _this2.setupSourceBuffers_();\n        } catch (e) {\n          videojs$1.log.warn('Failed to create SourceBuffers', e);\n          return _this2.mediaSource.endOfStream('decode');\n        }\n        _this2.setupFirstPlay();\n\n        _this2.trigger('selectedinitialmedia');\n      });\n\n      this.masterPlaylistLoader_.on('loadedplaylist', function () {\n        var updatedPlaylist = _this2.masterPlaylistLoader_.media();\n\n        if (!updatedPlaylist) {\n          // blacklist any variants that are not supported by the browser before selecting\n          // an initial media as the playlist selectors do not consider browser support\n          _this2.excludeUnsupportedVariants_();\n\n          var selectedMedia = void 0;\n\n          if (_this2.enableLowInitialPlaylist) {\n            selectedMedia = _this2.selectInitialPlaylist();\n          }\n\n          if (!selectedMedia) {\n            selectedMedia = _this2.selectPlaylist();\n          }\n\n          _this2.initialMedia_ = selectedMedia;\n          _this2.masterPlaylistLoader_.media(_this2.initialMedia_);\n          return;\n        }\n\n        if (_this2.useCueTags_) {\n          _this2.updateAdCues_(updatedPlaylist);\n        }\n\n        // TODO: Create a new event on the PlaylistLoader that signals\n        // that the segments have changed in some way and use that to\n        // update the SegmentLoader instead of doing it twice here and\n        // on `mediachange`\n        _this2.mainSegmentLoader_.playlist(updatedPlaylist, _this2.requestOptions_);\n        _this2.updateDuration();\n\n        // If the player isn't paused, ensure that the segment loader is running,\n        // as it is possible that it was temporarily stopped while waiting for\n        // a playlist (e.g., in case the playlist errored and we re-requested it).\n        if (!_this2.tech_.paused()) {\n          _this2.mainSegmentLoader_.load();\n          if (_this2.audioSegmentLoader_) {\n            _this2.audioSegmentLoader_.load();\n          }\n        }\n\n        if (!updatedPlaylist.endList) {\n          var addSeekableRange = function addSeekableRange() {\n            var seekable$$1 = _this2.seekable();\n\n            if (seekable$$1.length !== 0) {\n              _this2.mediaSource.addSeekableRange_(seekable$$1.start(0), seekable$$1.end(0));\n            }\n          };\n\n          if (_this2.duration() !== Infinity) {\n            var onDurationchange = function onDurationchange() {\n              if (_this2.duration() === Infinity) {\n                addSeekableRange();\n              } else {\n                _this2.tech_.one('durationchange', onDurationchange);\n              }\n            };\n\n            _this2.tech_.one('durationchange', onDurationchange);\n          } else {\n            addSeekableRange();\n          }\n        }\n      });\n\n      this.masterPlaylistLoader_.on('error', function () {\n        _this2.blacklistCurrentPlaylist(_this2.masterPlaylistLoader_.error);\n      });\n\n      this.masterPlaylistLoader_.on('mediachanging', function () {\n        _this2.mainSegmentLoader_.abort();\n        _this2.mainSegmentLoader_.pause();\n      });\n\n      this.masterPlaylistLoader_.on('mediachange', function () {\n        var media = _this2.masterPlaylistLoader_.media();\n        var requestTimeout = _this2.masterPlaylistLoader_.targetDuration * 1.5 * 1000;\n\n        // If we don't have any more available playlists, we don't want to\n        // timeout the request.\n        if (isLowestEnabledRendition(_this2.masterPlaylistLoader_.master, _this2.masterPlaylistLoader_.media())) {\n          _this2.requestOptions_.timeout = 0;\n        } else {\n          _this2.requestOptions_.timeout = requestTimeout;\n        }\n\n        // TODO: Create a new event on the PlaylistLoader that signals\n        // that the segments have changed in some way and use that to\n        // update the SegmentLoader instead of doing it twice here and\n        // on `loadedplaylist`\n        _this2.mainSegmentLoader_.playlist(media, _this2.requestOptions_);\n\n        _this2.mainSegmentLoader_.load();\n\n        _this2.tech_.trigger({\n          type: 'mediachange',\n          bubbles: true\n        });\n      });\n\n      this.masterPlaylistLoader_.on('playlistunchanged', function () {\n        var updatedPlaylist = _this2.masterPlaylistLoader_.media();\n        var playlistOutdated = _this2.stuckAtPlaylistEnd_(updatedPlaylist);\n\n        if (playlistOutdated) {\n          // Playlist has stopped updating and we're stuck at its end. Try to\n          // blacklist it and switch to another playlist in the hope that that\n          // one is updating (and give the player a chance to re-adjust to the\n          // safe live point).\n          _this2.blacklistCurrentPlaylist({\n            message: 'Playlist no longer updating.'\n          });\n          // useful for monitoring QoS\n          _this2.tech_.trigger('playliststuck');\n        }\n      });\n\n      this.masterPlaylistLoader_.on('renditiondisabled', function () {\n        _this2.tech_.trigger({ type: 'usage', name: 'hls-rendition-disabled' });\n      });\n      this.masterPlaylistLoader_.on('renditionenabled', function () {\n        _this2.tech_.trigger({ type: 'usage', name: 'hls-rendition-enabled' });\n      });\n    }\n\n    /**\n     * A helper function for triggerring presence usage events once per source\n     *\n     * @private\n     */\n\n  }, {\n    key: 'triggerPresenceUsage_',\n    value: function triggerPresenceUsage_(master, media) {\n      var mediaGroups = master.mediaGroups || {};\n      var defaultDemuxed = true;\n      var audioGroupKeys = Object.keys(mediaGroups.AUDIO);\n\n      for (var mediaGroup in mediaGroups.AUDIO) {\n        for (var label in mediaGroups.AUDIO[mediaGroup]) {\n          var properties = mediaGroups.AUDIO[mediaGroup][label];\n\n          if (!properties.uri) {\n            defaultDemuxed = false;\n          }\n        }\n      }\n\n      if (defaultDemuxed) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-demuxed' });\n      }\n\n      if (Object.keys(mediaGroups.SUBTITLES).length) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-webvtt' });\n      }\n\n      if (Hls.Playlist.isAes(media)) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-aes' });\n      }\n\n      if (Hls.Playlist.isFmp4(media)) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-fmp4' });\n      }\n\n      if (audioGroupKeys.length && Object.keys(mediaGroups.AUDIO[audioGroupKeys[0]]).length > 1) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-alternate-audio' });\n      }\n\n      if (this.useCueTags_) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-playlist-cue-tags' });\n      }\n    }\n    /**\n     * Register event handlers on the segment loaders. A helper function\n     * for construction time.\n     *\n     * @private\n     */\n\n  }, {\n    key: 'setupSegmentLoaderListeners_',\n    value: function setupSegmentLoaderListeners_() {\n      var _this3 = this;\n\n      this.mainSegmentLoader_.on('bandwidthupdate', function () {\n        var nextPlaylist = _this3.selectPlaylist();\n        var currentPlaylist = _this3.masterPlaylistLoader_.media();\n        var buffered = _this3.tech_.buffered();\n        var forwardBuffer = buffered.length ? buffered.end(buffered.length - 1) - _this3.tech_.currentTime() : 0;\n\n        var bufferLowWaterLine = _this3.bufferLowWaterLine();\n\n        // If the playlist is live, then we want to not take low water line into account.\n        // This is because in LIVE, the player plays 3 segments from the end of the\n        // playlist, and if `BUFFER_LOW_WATER_LINE` is greater than the duration availble\n        // in those segments, a viewer will never experience a rendition upswitch.\n        if (!currentPlaylist.endList ||\n        // For the same reason as LIVE, we ignore the low water line when the VOD\n        // duration is below the max potential low water line\n        _this3.duration() < Config.MAX_BUFFER_LOW_WATER_LINE ||\n        // we want to switch down to lower resolutions quickly to continue playback, but\n        nextPlaylist.attributes.BANDWIDTH < currentPlaylist.attributes.BANDWIDTH ||\n        // ensure we have some buffer before we switch up to prevent us running out of\n        // buffer while loading a higher rendition.\n        forwardBuffer >= bufferLowWaterLine) {\n          _this3.masterPlaylistLoader_.media(nextPlaylist);\n        }\n\n        _this3.tech_.trigger('bandwidthupdate');\n      });\n      this.mainSegmentLoader_.on('progress', function () {\n        _this3.trigger('progress');\n      });\n\n      this.mainSegmentLoader_.on('error', function () {\n        _this3.blacklistCurrentPlaylist(_this3.mainSegmentLoader_.error());\n      });\n\n      this.mainSegmentLoader_.on('syncinfoupdate', function () {\n        _this3.onSyncInfoUpdate_();\n      });\n\n      this.mainSegmentLoader_.on('timestampoffset', function () {\n        _this3.tech_.trigger({ type: 'usage', name: 'hls-timestamp-offset' });\n      });\n      this.audioSegmentLoader_.on('syncinfoupdate', function () {\n        _this3.onSyncInfoUpdate_();\n      });\n\n      this.mainSegmentLoader_.on('ended', function () {\n        _this3.onEndOfStream();\n      });\n\n      this.mainSegmentLoader_.on('earlyabort', function () {\n        _this3.blacklistCurrentPlaylist({\n          message: 'Aborted early because there isn\\'t enough bandwidth to complete the ' + 'request without rebuffering.'\n        }, ABORT_EARLY_BLACKLIST_SECONDS);\n      });\n\n      this.mainSegmentLoader_.on('reseteverything', function () {\n        // If playing an MTS stream, a videojs.MediaSource is listening for\n        // hls-reset to reset caption parsing state in the transmuxer\n        _this3.tech_.trigger('hls-reset');\n      });\n\n      this.mainSegmentLoader_.on('segmenttimemapping', function (event) {\n        // If playing an MTS stream in html, a videojs.MediaSource is listening for\n        // hls-segment-time-mapping update its internal mapping of stream to display time\n        _this3.tech_.trigger({\n          type: 'hls-segment-time-mapping',\n          mapping: event.mapping\n        });\n      });\n\n      this.audioSegmentLoader_.on('ended', function () {\n        _this3.onEndOfStream();\n      });\n    }\n  }, {\n    key: 'mediaSecondsLoaded_',\n    value: function mediaSecondsLoaded_() {\n      return Math.max(this.audioSegmentLoader_.mediaSecondsLoaded + this.mainSegmentLoader_.mediaSecondsLoaded);\n    }\n\n    /**\n     * Call load on our SegmentLoaders\n     */\n\n  }, {\n    key: 'load',\n    value: function load() {\n      this.mainSegmentLoader_.load();\n      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n        this.audioSegmentLoader_.load();\n      }\n      if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {\n        this.subtitleSegmentLoader_.load();\n      }\n    }\n\n    /**\n     * Re-tune playback quality level for the current player\n     * conditions without performing destructive actions, like\n     * removing already buffered content\n     *\n     * @private\n     */\n\n  }, {\n    key: 'smoothQualityChange_',\n    value: function smoothQualityChange_() {\n      var media = this.selectPlaylist();\n\n      if (media !== this.masterPlaylistLoader_.media()) {\n        this.masterPlaylistLoader_.media(media);\n\n        this.mainSegmentLoader_.resetLoader();\n        // don't need to reset audio as it is reset when media changes\n      }\n    }\n\n    /**\n     * Re-tune playback quality level for the current player\n     * conditions. This method will perform destructive actions like removing\n     * already buffered content in order to readjust the currently active\n     * playlist quickly. This is good for manual quality changes\n     *\n     * @private\n     */\n\n  }, {\n    key: 'fastQualityChange_',\n    value: function fastQualityChange_() {\n      var _this4 = this;\n\n      var media = this.selectPlaylist();\n\n      if (media === this.masterPlaylistLoader_.media()) {\n        return;\n      }\n\n      this.masterPlaylistLoader_.media(media);\n\n      // delete all buffered data to allow an immediate quality switch, then seek\n      // in place to give the browser a kick to remove any cached frames from the\n      // previous rendition\n      this.mainSegmentLoader_.resetEverything(function () {\n        // Since this is not a typical seek, we avoid the seekTo method which can cause\n        // segments from the previously enabled rendition to load before the new playlist\n        // has finished loading\n        _this4.tech_.setCurrentTime(_this4.tech_.currentTime());\n      });\n\n      // don't need to reset audio as it is reset when media changes\n    }\n\n    /**\n     * Begin playback.\n     */\n\n  }, {\n    key: 'play',\n    value: function play() {\n      if (this.setupFirstPlay()) {\n        return;\n      }\n\n      if (this.tech_.ended()) {\n        this.seekTo_(0);\n      }\n\n      if (this.hasPlayed_()) {\n        this.load();\n      }\n\n      var seekable$$1 = this.tech_.seekable();\n\n      // if the viewer has paused and we fell out of the live window,\n      // seek forward to the live point\n      if (this.tech_.duration() === Infinity) {\n        if (this.tech_.currentTime() < seekable$$1.start(0)) {\n          return this.seekTo_(seekable$$1.end(seekable$$1.length - 1));\n        }\n      }\n    }\n\n    /**\n     * Seek to the latest media position if this is a live video and the\n     * player and video are loaded and initialized.\n     */\n\n  }, {\n    key: 'setupFirstPlay',\n    value: function setupFirstPlay() {\n      var _this5 = this;\n\n      var media = this.masterPlaylistLoader_.media();\n\n      // Check that everything is ready to begin buffering for the first call to play\n      //  If 1) there is no active media\n      //     2) the player is paused\n      //     3) the first play has already been setup\n      // then exit early\n      if (!media || this.tech_.paused() || this.hasPlayed_()) {\n        return false;\n      }\n\n      // when the video is a live stream\n      if (!media.endList) {\n        var seekable$$1 = this.seekable();\n\n        if (!seekable$$1.length) {\n          // without a seekable range, the player cannot seek to begin buffering at the live\n          // point\n          return false;\n        }\n\n        if (videojs$1.browser.IE_VERSION && this.tech_.readyState() === 0) {\n          // IE11 throws an InvalidStateError if you try to set currentTime while the\n          // readyState is 0, so it must be delayed until the tech fires loadedmetadata.\n          this.tech_.one('loadedmetadata', function () {\n            _this5.trigger('firstplay');\n            _this5.seekTo_(seekable$$1.end(0));\n            _this5.hasPlayed_ = function () {\n              return true;\n            };\n          });\n\n          return false;\n        }\n\n        // trigger firstplay to inform the source handler to ignore the next seek event\n        this.trigger('firstplay');\n        // seek to the live point\n        this.seekTo_(seekable$$1.end(0));\n      }\n\n      this.hasPlayed_ = function () {\n        return true;\n      };\n      // we can begin loading now that everything is ready\n      this.load();\n      return true;\n    }\n\n    /**\n     * handle the sourceopen event on the MediaSource\n     *\n     * @private\n     */\n\n  }, {\n    key: 'handleSourceOpen_',\n    value: function handleSourceOpen_() {\n      // Only attempt to create the source buffer if none already exist.\n      // handleSourceOpen is also called when we are \"re-opening\" a source buffer\n      // after `endOfStream` has been called (in response to a seek for instance)\n      try {\n        this.setupSourceBuffers_();\n      } catch (e) {\n        videojs$1.log.warn('Failed to create Source Buffers', e);\n        return this.mediaSource.endOfStream('decode');\n      }\n\n      // if autoplay is enabled, begin playback. This is duplicative of\n      // code in video.js but is required because play() must be invoked\n      // *after* the media source has opened.\n      if (this.tech_.autoplay()) {\n        var playPromise = this.tech_.play();\n\n        // Catch/silence error when a pause interrupts a play request\n        // on browsers which return a promise\n        if (typeof playPromise !== 'undefined' && typeof playPromise.then === 'function') {\n          playPromise.then(null, function (e) {});\n        }\n      }\n\n      this.trigger('sourceopen');\n    }\n\n    /**\n     * Calls endOfStream on the media source when all active stream types have called\n     * endOfStream\n     *\n     * @param {string} streamType\n     *        Stream type of the segment loader that called endOfStream\n     * @private\n     */\n\n  }, {\n    key: 'onEndOfStream',\n    value: function onEndOfStream() {\n      var isEndOfStream = this.mainSegmentLoader_.ended_;\n\n      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n        // if the audio playlist loader exists, then alternate audio is active\n        if (!this.mainSegmentLoader_.startingMedia_ || this.mainSegmentLoader_.startingMedia_.containsVideo) {\n          // if we do not know if the main segment loader contains video yet or if we\n          // definitively know the main segment loader contains video, then we need to wait\n          // for both main and audio segment loaders to call endOfStream\n          isEndOfStream = isEndOfStream && this.audioSegmentLoader_.ended_;\n        } else {\n          // otherwise just rely on the audio loader\n          isEndOfStream = this.audioSegmentLoader_.ended_;\n        }\n      }\n\n      if (isEndOfStream) {\n        this.mediaSource.endOfStream();\n      }\n    }\n\n    /**\n     * Check if a playlist has stopped being updated\n     * @param {Object} playlist the media playlist object\n     * @return {boolean} whether the playlist has stopped being updated or not\n     */\n\n  }, {\n    key: 'stuckAtPlaylistEnd_',\n    value: function stuckAtPlaylistEnd_(playlist) {\n      var seekable$$1 = this.seekable();\n\n      if (!seekable$$1.length) {\n        // playlist doesn't have enough information to determine whether we are stuck\n        return false;\n      }\n\n      var expired = this.syncController_.getExpiredTime(playlist, this.mediaSource.duration);\n\n      if (expired === null) {\n        return false;\n      }\n\n      // does not use the safe live end to calculate playlist end, since we\n      // don't want to say we are stuck while there is still content\n      var absolutePlaylistEnd = Hls.Playlist.playlistEnd(playlist, expired);\n      var currentTime = this.tech_.currentTime();\n      var buffered = this.tech_.buffered();\n\n      if (!buffered.length) {\n        // return true if the playhead reached the absolute end of the playlist\n        return absolutePlaylistEnd - currentTime <= SAFE_TIME_DELTA;\n      }\n      var bufferedEnd = buffered.end(buffered.length - 1);\n\n      // return true if there is too little buffer left and buffer has reached absolute\n      // end of playlist\n      return bufferedEnd - currentTime <= SAFE_TIME_DELTA && absolutePlaylistEnd - bufferedEnd <= SAFE_TIME_DELTA;\n    }\n\n    /**\n     * Blacklists a playlist when an error occurs for a set amount of time\n     * making it unavailable for selection by the rendition selection algorithm\n     * and then forces a new playlist (rendition) selection.\n     *\n     * @param {Object=} error an optional error that may include the playlist\n     * to blacklist\n     * @param {Number=} blacklistDuration an optional number of seconds to blacklist the\n     * playlist\n     */\n\n  }, {\n    key: 'blacklistCurrentPlaylist',\n    value: function blacklistCurrentPlaylist() {\n      var error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var blacklistDuration = arguments[1];\n\n      var currentPlaylist = void 0;\n      var nextPlaylist = void 0;\n\n      // If the `error` was generated by the playlist loader, it will contain\n      // the playlist we were trying to load (but failed) and that should be\n      // blacklisted instead of the currently selected playlist which is likely\n      // out-of-date in this scenario\n      currentPlaylist = error.playlist || this.masterPlaylistLoader_.media();\n\n      blacklistDuration = blacklistDuration || error.blacklistDuration || this.blacklistDuration;\n\n      // If there is no current playlist, then an error occurred while we were\n      // trying to load the master OR while we were disposing of the tech\n      if (!currentPlaylist) {\n        this.error = error;\n\n        try {\n          return this.mediaSource.endOfStream('network');\n        } catch (e) {\n          return this.trigger('error');\n        }\n      }\n\n      var isFinalRendition = this.masterPlaylistLoader_.master.playlists.filter(isEnabled).length === 1;\n\n      if (isFinalRendition) {\n        // Never blacklisting this playlist because it's final rendition\n        videojs$1.log.warn('Problem encountered with the current ' + 'HLS playlist. Trying again since it is the final playlist.');\n\n        this.tech_.trigger('retryplaylist');\n        return this.masterPlaylistLoader_.load(isFinalRendition);\n      }\n      // Blacklist this playlist\n      currentPlaylist.excludeUntil = Date.now() + blacklistDuration * 1000;\n      this.tech_.trigger('blacklistplaylist');\n      this.tech_.trigger({ type: 'usage', name: 'hls-rendition-blacklisted' });\n\n      // Select a new playlist\n      nextPlaylist = this.selectPlaylist();\n      videojs$1.log.warn('Problem encountered with the current HLS playlist.' + (error.message ? ' ' + error.message : '') + ' Switching to another playlist.');\n\n      return this.masterPlaylistLoader_.media(nextPlaylist);\n    }\n\n    /**\n     * Pause all segment loaders\n     */\n\n  }, {\n    key: 'pauseLoading',\n    value: function pauseLoading() {\n      this.mainSegmentLoader_.pause();\n      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n        this.audioSegmentLoader_.pause();\n      }\n      if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {\n        this.subtitleSegmentLoader_.pause();\n      }\n    }\n\n    /**\n     * set the current time on all segment loaders\n     *\n     * @param {TimeRange} currentTime the current time to set\n     * @return {TimeRange} the current time\n     */\n\n  }, {\n    key: 'setCurrentTime',\n    value: function setCurrentTime(currentTime) {\n      var buffered = findRange(this.tech_.buffered(), currentTime);\n\n      if (!(this.masterPlaylistLoader_ && this.masterPlaylistLoader_.media())) {\n        // return immediately if the metadata is not ready yet\n        return 0;\n      }\n\n      // it's clearly an edge-case but don't thrown an error if asked to\n      // seek within an empty playlist\n      if (!this.masterPlaylistLoader_.media().segments) {\n        return 0;\n      }\n\n      // In flash playback, the segment loaders should be reset on every seek, even\n      // in buffer seeks. If the seek location is already buffered, continue buffering as\n      // usual\n      // TODO: redo this comment\n      if (buffered && buffered.length) {\n        return currentTime;\n      }\n\n      // cancel outstanding requests so we begin buffering at the new\n      // location\n      this.mainSegmentLoader_.resetEverything();\n      this.mainSegmentLoader_.abort();\n      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n        this.audioSegmentLoader_.resetEverything();\n        this.audioSegmentLoader_.abort();\n      }\n      if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {\n        this.subtitleSegmentLoader_.resetEverything();\n        this.subtitleSegmentLoader_.abort();\n      }\n\n      // start segment loader loading in case they are paused\n      this.load();\n    }\n\n    /**\n     * get the current duration\n     *\n     * @return {TimeRange} the duration\n     */\n\n  }, {\n    key: 'duration',\n    value: function duration$$1() {\n      if (!this.masterPlaylistLoader_) {\n        return 0;\n      }\n\n      if (this.mediaSource) {\n        return this.mediaSource.duration;\n      }\n\n      return Hls.Playlist.duration(this.masterPlaylistLoader_.media());\n    }\n\n    /**\n     * check the seekable range\n     *\n     * @return {TimeRange} the seekable range\n     */\n\n  }, {\n    key: 'seekable',\n    value: function seekable$$1() {\n      return this.seekable_;\n    }\n  }, {\n    key: 'onSyncInfoUpdate_',\n    value: function onSyncInfoUpdate_() {\n      var mainSeekable = void 0;\n      var audioSeekable = void 0;\n\n      if (!this.masterPlaylistLoader_) {\n        return;\n      }\n\n      var media = this.masterPlaylistLoader_.media();\n\n      if (!media) {\n        return;\n      }\n\n      var expired = this.syncController_.getExpiredTime(media, this.mediaSource.duration);\n\n      if (expired === null) {\n        // not enough information to update seekable\n        return;\n      }\n\n      mainSeekable = Hls.Playlist.seekable(media, expired);\n\n      if (mainSeekable.length === 0) {\n        return;\n      }\n\n      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n        media = this.mediaTypes_.AUDIO.activePlaylistLoader.media();\n        expired = this.syncController_.getExpiredTime(media, this.mediaSource.duration);\n\n        if (expired === null) {\n          return;\n        }\n\n        audioSeekable = Hls.Playlist.seekable(media, expired);\n\n        if (audioSeekable.length === 0) {\n          return;\n        }\n      }\n\n      if (!audioSeekable) {\n        // seekable has been calculated based on buffering video data so it\n        // can be returned directly\n        this.seekable_ = mainSeekable;\n      } else if (audioSeekable.start(0) > mainSeekable.end(0) || mainSeekable.start(0) > audioSeekable.end(0)) {\n        // seekables are pretty far off, rely on main\n        this.seekable_ = mainSeekable;\n      } else {\n        this.seekable_ = videojs$1.createTimeRanges([[audioSeekable.start(0) > mainSeekable.start(0) ? audioSeekable.start(0) : mainSeekable.start(0), audioSeekable.end(0) < mainSeekable.end(0) ? audioSeekable.end(0) : mainSeekable.end(0)]]);\n      }\n\n      this.logger_('seekable updated [' + printableRange(this.seekable_) + ']');\n\n      this.tech_.trigger('seekablechanged');\n    }\n\n    /**\n     * Update the player duration\n     */\n\n  }, {\n    key: 'updateDuration',\n    value: function updateDuration() {\n      var _this6 = this;\n\n      var oldDuration = this.mediaSource.duration;\n      var newDuration = Hls.Playlist.duration(this.masterPlaylistLoader_.media());\n      var buffered = this.tech_.buffered();\n      var setDuration = function setDuration() {\n        _this6.mediaSource.duration = newDuration;\n        _this6.tech_.trigger('durationchange');\n\n        _this6.mediaSource.removeEventListener('sourceopen', setDuration);\n      };\n\n      if (buffered.length > 0) {\n        newDuration = Math.max(newDuration, buffered.end(buffered.length - 1));\n      }\n\n      // if the duration has changed, invalidate the cached value\n      if (oldDuration !== newDuration) {\n        // update the duration\n        if (this.mediaSource.readyState !== 'open') {\n          this.mediaSource.addEventListener('sourceopen', setDuration);\n        } else {\n          setDuration();\n        }\n      }\n    }\n\n    /**\n     * dispose of the MasterPlaylistController and everything\n     * that it controls\n     */\n\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      var _this7 = this;\n\n      this.decrypter_.terminate();\n      this.masterPlaylistLoader_.dispose();\n      this.mainSegmentLoader_.dispose();\n\n      ['AUDIO', 'SUBTITLES'].forEach(function (type) {\n        var groups = _this7.mediaTypes_[type].groups;\n\n        for (var id in groups) {\n          groups[id].forEach(function (group) {\n            if (group.playlistLoader) {\n              group.playlistLoader.dispose();\n            }\n          });\n        }\n      });\n\n      this.audioSegmentLoader_.dispose();\n      this.subtitleSegmentLoader_.dispose();\n    }\n\n    /**\n     * return the master playlist object if we have one\n     *\n     * @return {Object} the master playlist object that we parsed\n     */\n\n  }, {\n    key: 'master',\n    value: function master() {\n      return this.masterPlaylistLoader_.master;\n    }\n\n    /**\n     * return the currently selected playlist\n     *\n     * @return {Object} the currently selected playlist object that we parsed\n     */\n\n  }, {\n    key: 'media',\n    value: function media() {\n      // playlist loader will not return media if it has not been fully loaded\n      return this.masterPlaylistLoader_.media() || this.initialMedia_;\n    }\n\n    /**\n     * setup our internal source buffers on our segment Loaders\n     *\n     * @private\n     */\n\n  }, {\n    key: 'setupSourceBuffers_',\n    value: function setupSourceBuffers_() {\n      var media = this.masterPlaylistLoader_.media();\n      var mimeTypes = void 0;\n\n      // wait until a media playlist is available and the Media Source is\n      // attached\n      if (!media || this.mediaSource.readyState !== 'open') {\n        return;\n      }\n\n      mimeTypes = mimeTypesForPlaylist(this.masterPlaylistLoader_.master, media);\n      if (mimeTypes.length < 1) {\n        this.error = 'No compatible SourceBuffer configuration for the variant stream:' + media.resolvedUri;\n        return this.mediaSource.endOfStream('decode');\n      }\n\n      this.configureLoaderMimeTypes_(mimeTypes);\n      // exclude any incompatible variant streams from future playlist\n      // selection\n      this.excludeIncompatibleVariants_(media);\n    }\n  }, {\n    key: 'configureLoaderMimeTypes_',\n    value: function configureLoaderMimeTypes_(mimeTypes) {\n      // If the content is demuxed, we can't start appending segments to a source buffer\n      // until both source buffers are set up, or else the browser may not let us add the\n      // second source buffer (it will assume we are playing either audio only or video\n      // only).\n      var sourceBufferEmitter =\n      // If there is more than one mime type\n      mimeTypes.length > 1 &&\n      // and the first mime type does not have muxed video and audio\n      mimeTypes[0].indexOf(',') === -1 &&\n      // and the two mime types are different (they can be the same in the case of audio\n      // only with alternate audio)\n      mimeTypes[0] !== mimeTypes[1] ?\n      // then we want to wait on the second source buffer\n      new videojs$1.EventTarget() :\n      // otherwise there is no need to wait as the content is either audio only,\n      // video only, or muxed content.\n      null;\n\n      this.mainSegmentLoader_.mimeType(mimeTypes[0], sourceBufferEmitter);\n      if (mimeTypes[1]) {\n        this.audioSegmentLoader_.mimeType(mimeTypes[1], sourceBufferEmitter);\n      }\n    }\n\n    /**\n     * Blacklists playlists with codecs that are unsupported by the browser.\n     */\n\n  }, {\n    key: 'excludeUnsupportedVariants_',\n    value: function excludeUnsupportedVariants_() {\n      this.master().playlists.forEach(function (variant) {\n        if (variant.attributes.CODECS && window$1.MediaSource && window$1.MediaSource.isTypeSupported && !window$1.MediaSource.isTypeSupported('video/mp4; codecs=\"' + mapLegacyAvcCodecs(variant.attributes.CODECS) + '\"')) {\n          variant.excludeUntil = Infinity;\n        }\n      });\n    }\n\n    /**\n     * Blacklist playlists that are known to be codec or\n     * stream-incompatible with the SourceBuffer configuration. For\n     * instance, Media Source Extensions would cause the video element to\n     * stall waiting for video data if you switched from a variant with\n     * video and audio to an audio-only one.\n     *\n     * @param {Object} media a media playlist compatible with the current\n     * set of SourceBuffers. Variants in the current master playlist that\n     * do not appear to have compatible codec or stream configurations\n     * will be excluded from the default playlist selection algorithm\n     * indefinitely.\n     * @private\n     */\n\n  }, {\n    key: 'excludeIncompatibleVariants_',\n    value: function excludeIncompatibleVariants_(media) {\n      var codecCount = 2;\n      var videoCodec = null;\n      var codecs = void 0;\n\n      if (media.attributes.CODECS) {\n        codecs = parseCodecs(media.attributes.CODECS);\n        videoCodec = codecs.videoCodec;\n        codecCount = codecs.codecCount;\n      }\n\n      this.master().playlists.forEach(function (variant) {\n        var variantCodecs = {\n          codecCount: 2,\n          videoCodec: null\n        };\n\n        if (variant.attributes.CODECS) {\n          variantCodecs = parseCodecs(variant.attributes.CODECS);\n        }\n\n        // if the streams differ in the presence or absence of audio or\n        // video, they are incompatible\n        if (variantCodecs.codecCount !== codecCount) {\n          variant.excludeUntil = Infinity;\n        }\n\n        // if h.264 is specified on the current playlist, some flavor of\n        // it must be specified on all compatible variants\n        if (variantCodecs.videoCodec !== videoCodec) {\n          variant.excludeUntil = Infinity;\n        }\n      });\n    }\n  }, {\n    key: 'updateAdCues_',\n    value: function updateAdCues_(media) {\n      var offset = 0;\n      var seekable$$1 = this.seekable();\n\n      if (seekable$$1.length) {\n        offset = seekable$$1.start(0);\n      }\n\n      updateAdCues(media, this.cueTagsTrack_, offset);\n    }\n\n    /**\n     * Calculates the desired forward buffer length based on current time\n     *\n     * @return {Number} Desired forward buffer length in seconds\n     */\n\n  }, {\n    key: 'goalBufferLength',\n    value: function goalBufferLength() {\n      var currentTime = this.tech_.currentTime();\n      var initial = Config.GOAL_BUFFER_LENGTH;\n      var rate = Config.GOAL_BUFFER_LENGTH_RATE;\n      var max = Math.max(initial, Config.MAX_GOAL_BUFFER_LENGTH);\n\n      return Math.min(initial + currentTime * rate, max);\n    }\n\n    /**\n     * Calculates the desired buffer low water line based on current time\n     *\n     * @return {Number} Desired buffer low water line in seconds\n     */\n\n  }, {\n    key: 'bufferLowWaterLine',\n    value: function bufferLowWaterLine() {\n      var currentTime = this.tech_.currentTime();\n      var initial = Config.BUFFER_LOW_WATER_LINE;\n      var rate = Config.BUFFER_LOW_WATER_LINE_RATE;\n      var max = Math.max(initial, Config.MAX_BUFFER_LOW_WATER_LINE);\n\n      return Math.min(initial + currentTime * rate, max);\n    }\n  }]);\n  return MasterPlaylistController;\n}(videojs$1.EventTarget);\n\n/**\n * Returns a function that acts as the Enable/disable playlist function.\n *\n * @param {PlaylistLoader} loader - The master playlist loader\n * @param {String} playlistUri - uri of the playlist\n * @param {Function} changePlaylistFn - A function to be called after a\n * playlist's enabled-state has been changed. Will NOT be called if a\n * playlist's enabled-state is unchanged\n * @param {Boolean=} enable - Value to set the playlist enabled-state to\n * or if undefined returns the current enabled-state for the playlist\n * @return {Function} Function for setting/getting enabled\n */\nvar enableFunction = function enableFunction(loader, playlistUri, changePlaylistFn) {\n  return function (enable) {\n    var playlist = loader.master.playlists[playlistUri];\n    var incompatible = isIncompatible(playlist);\n    var currentlyEnabled = isEnabled(playlist);\n\n    if (typeof enable === 'undefined') {\n      return currentlyEnabled;\n    }\n\n    if (enable) {\n      delete playlist.disabled;\n    } else {\n      playlist.disabled = true;\n    }\n\n    if (enable !== currentlyEnabled && !incompatible) {\n      // Ensure the outside world knows about our changes\n      changePlaylistFn();\n      if (enable) {\n        loader.trigger('renditionenabled');\n      } else {\n        loader.trigger('renditiondisabled');\n      }\n    }\n    return enable;\n  };\n};\n\n/**\n * The representation object encapsulates the publicly visible information\n * in a media playlist along with a setter/getter-type function (enabled)\n * for changing the enabled-state of a particular playlist entry\n *\n * @class Representation\n */\n\nvar Representation = function Representation(hlsHandler, playlist, id) {\n  classCallCheck$1(this, Representation);\n\n  // Get a reference to a bound version of fastQualityChange_\n  var fastChangeFunction = hlsHandler.masterPlaylistController_.fastQualityChange_.bind(hlsHandler.masterPlaylistController_);\n\n  // some playlist attributes are optional\n  if (playlist.attributes.RESOLUTION) {\n    var resolution = playlist.attributes.RESOLUTION;\n\n    this.width = resolution.width;\n    this.height = resolution.height;\n  }\n\n  this.bandwidth = playlist.attributes.BANDWIDTH;\n\n  // The id is simply the ordinality of the media playlist\n  // within the master playlist\n  this.id = id;\n\n  // Partially-apply the enableFunction to create a playlist-\n  // specific variant\n  this.enabled = enableFunction(hlsHandler.playlists, playlist.uri, fastChangeFunction);\n};\n\n/**\n * A mixin function that adds the `representations` api to an instance\n * of the HlsHandler class\n * @param {HlsHandler} hlsHandler - An instance of HlsHandler to add the\n * representation API into\n */\n\nvar renditionSelectionMixin = function renditionSelectionMixin(hlsHandler) {\n  var playlists = hlsHandler.playlists;\n\n  // Add a single API-specific function to the HlsHandler instance\n  hlsHandler.representations = function () {\n    return playlists.master.playlists.filter(function (media) {\n      return !isIncompatible(media);\n    }).map(function (e, i) {\n      return new Representation(hlsHandler, e, e.uri);\n    });\n  };\n};\n\n/**\n * @file playback-watcher.js\n *\n * Playback starts, and now my watch begins. It shall not end until my death. I shall\n * take no wait, hold no uncleared timeouts, father no bad seeks. I shall wear no crowns\n * and win no glory. I shall live and die at my post. I am the corrector of the underflow.\n * I am the watcher of gaps. I am the shield that guards the realms of seekable. I pledge\n * my life and honor to the Playback Watch, for this Player and all the Players to come.\n */\n\n// Set of events that reset the playback-watcher time check logic and clear the timeout\nvar timerCancelEvents = ['seeking', 'seeked', 'pause', 'playing', 'error'];\n\n/**\n * @class PlaybackWatcher\n */\n\nvar PlaybackWatcher = function () {\n  /**\n   * Represents an PlaybackWatcher object.\n   * @constructor\n   * @param {object} options an object that includes the tech and settings\n   */\n  function PlaybackWatcher(options) {\n    var _this = this;\n\n    classCallCheck$1(this, PlaybackWatcher);\n\n    this.tech_ = options.tech;\n    this.seekable = options.seekable;\n    this.seekTo = options.seekTo;\n\n    this.consecutiveUpdates = 0;\n    this.lastRecordedTime = null;\n    this.timer_ = null;\n    this.checkCurrentTimeTimeout_ = null;\n    this.logger_ = logger('PlaybackWatcher');\n\n    this.logger_('initialize');\n\n    var canPlayHandler = function canPlayHandler() {\n      return _this.monitorCurrentTime_();\n    };\n    var waitingHandler = function waitingHandler() {\n      return _this.techWaiting_();\n    };\n    var cancelTimerHandler = function cancelTimerHandler() {\n      return _this.cancelTimer_();\n    };\n    var fixesBadSeeksHandler = function fixesBadSeeksHandler() {\n      return _this.fixesBadSeeks_();\n    };\n\n    this.tech_.on('seekablechanged', fixesBadSeeksHandler);\n    this.tech_.on('waiting', waitingHandler);\n    this.tech_.on(timerCancelEvents, cancelTimerHandler);\n    this.tech_.on('canplay', canPlayHandler);\n\n    // Define the dispose function to clean up our events\n    this.dispose = function () {\n      _this.logger_('dispose');\n      _this.tech_.off('seekablechanged', fixesBadSeeksHandler);\n      _this.tech_.off('waiting', waitingHandler);\n      _this.tech_.off(timerCancelEvents, cancelTimerHandler);\n      _this.tech_.off('canplay', canPlayHandler);\n      if (_this.checkCurrentTimeTimeout_) {\n        window$1.clearTimeout(_this.checkCurrentTimeTimeout_);\n      }\n      _this.cancelTimer_();\n    };\n  }\n\n  /**\n   * Periodically check current time to see if playback stopped\n   *\n   * @private\n   */\n\n  createClass$1(PlaybackWatcher, [{\n    key: 'monitorCurrentTime_',\n    value: function monitorCurrentTime_() {\n      this.checkCurrentTime_();\n\n      if (this.checkCurrentTimeTimeout_) {\n        window$1.clearTimeout(this.checkCurrentTimeTimeout_);\n      }\n\n      // 42 = 24 fps // 250 is what Webkit uses // FF uses 15\n      this.checkCurrentTimeTimeout_ = window$1.setTimeout(this.monitorCurrentTime_.bind(this), 250);\n    }\n\n    /**\n     * The purpose of this function is to emulate the \"waiting\" event on\n     * browsers that do not emit it when they are waiting for more\n     * data to continue playback\n     *\n     * @private\n     */\n\n  }, {\n    key: 'checkCurrentTime_',\n    value: function checkCurrentTime_() {\n      if (this.tech_.seeking() && this.fixesBadSeeks_()) {\n        this.consecutiveUpdates = 0;\n        this.lastRecordedTime = this.tech_.currentTime();\n        return;\n      }\n\n      if (this.tech_.paused() || this.tech_.seeking()) {\n        return;\n      }\n\n      var currentTime = this.tech_.currentTime();\n      var buffered = this.tech_.buffered();\n\n      if (this.lastRecordedTime === currentTime && (!buffered.length || currentTime + SAFE_TIME_DELTA >= buffered.end(buffered.length - 1))) {\n        // If current time is at the end of the final buffered region, then any playback\n        // stall is most likely caused by buffering in a low bandwidth environment. The tech\n        // should fire a `waiting` event in this scenario, but due to browser and tech\n        // inconsistencies. Calling `techWaiting_` here allows us to simulate\n        // responding to a native `waiting` event when the tech fails to emit one.\n        return this.techWaiting_();\n      }\n\n      if (this.consecutiveUpdates >= 5 && currentTime === this.lastRecordedTime) {\n        this.consecutiveUpdates++;\n        this.waiting_();\n      } else if (currentTime === this.lastRecordedTime) {\n        this.consecutiveUpdates++;\n      } else {\n        this.consecutiveUpdates = 0;\n        this.lastRecordedTime = currentTime;\n      }\n    }\n\n    /**\n     * Cancels any pending timers and resets the 'timeupdate' mechanism\n     * designed to detect that we are stalled\n     *\n     * @private\n     */\n\n  }, {\n    key: 'cancelTimer_',\n    value: function cancelTimer_() {\n      this.consecutiveUpdates = 0;\n\n      if (this.timer_) {\n        this.logger_('cancelTimer_');\n        clearTimeout(this.timer_);\n      }\n\n      this.timer_ = null;\n    }\n\n    /**\n     * Fixes situations where there's a bad seek\n     *\n     * @return {Boolean} whether an action was taken to fix the seek\n     * @private\n     */\n\n  }, {\n    key: 'fixesBadSeeks_',\n    value: function fixesBadSeeks_() {\n      var seeking = this.tech_.seeking();\n      var seekable = this.seekable();\n      var currentTime = this.tech_.currentTime();\n      var seekTo = void 0;\n\n      if (seeking && this.afterSeekableWindow_(seekable, currentTime)) {\n        var seekableEnd = seekable.end(seekable.length - 1);\n\n        // sync to live point (if VOD, our seekable was updated and we're simply adjusting)\n        seekTo = seekableEnd;\n      }\n\n      if (seeking && this.beforeSeekableWindow_(seekable, currentTime)) {\n        var seekableStart = seekable.start(0);\n\n        // sync to the beginning of the live window\n        // provide a buffer of .1 seconds to handle rounding/imprecise numbers\n        seekTo = seekableStart + SAFE_TIME_DELTA;\n      }\n\n      if (typeof seekTo !== 'undefined') {\n        this.logger_('Trying to seek outside of seekable at time ' + currentTime + ' with ' + ('seekable range ' + printableRange(seekable) + '. Seeking to ') + (seekTo + '.'));\n\n        this.seekTo(seekTo);\n        return true;\n      }\n\n      return false;\n    }\n\n    /**\n     * Handler for situations when we determine the player is waiting.\n     *\n     * @private\n     */\n\n  }, {\n    key: 'waiting_',\n    value: function waiting_() {\n      if (this.techWaiting_()) {\n        return;\n      }\n\n      // All tech waiting checks failed. Use last resort correction\n      var currentTime = this.tech_.currentTime();\n      var buffered = this.tech_.buffered();\n      var currentRange = findRange(buffered, currentTime);\n\n      // Sometimes the player can stall for unknown reasons within a contiguous buffered\n      // region with no indication that anything is amiss (seen in Firefox). Seeking to\n      // currentTime is usually enough to kickstart the player. This checks that the player\n      // is currently within a buffered region before attempting a corrective seek.\n      // Chrome does not appear to continue `timeupdate` events after a `waiting` event\n      // until there is ~ 3 seconds of forward buffer available. PlaybackWatcher should also\n      // make sure there is ~3 seconds of forward buffer before taking any corrective action\n      // to avoid triggering an `unknownwaiting` event when the network is slow.\n      if (currentRange.length && currentTime + 3 <= currentRange.end(0)) {\n        this.cancelTimer_();\n        this.seekTo(currentTime);\n\n        this.logger_('Stopped at ' + currentTime + ' while inside a buffered region ' + ('[' + currentRange.start(0) + ' -> ' + currentRange.end(0) + ']. Attempting to resume ') + 'playback by seeking to the current time.');\n\n        // unknown waiting corrections may be useful for monitoring QoS\n        this.tech_.trigger({ type: 'usage', name: 'hls-unknown-waiting' });\n        return;\n      }\n    }\n\n    /**\n     * Handler for situations when the tech fires a `waiting` event\n     *\n     * @return {Boolean}\n     *         True if an action (or none) was needed to correct the waiting. False if no\n     *         checks passed\n     * @private\n     */\n\n  }, {\n    key: 'techWaiting_',\n    value: function techWaiting_() {\n      var seekable = this.seekable();\n      var currentTime = this.tech_.currentTime();\n\n      if (this.tech_.seeking() && this.fixesBadSeeks_()) {\n        // Tech is seeking or bad seek fixed, no action needed\n        return true;\n      }\n\n      if (this.tech_.seeking() || this.timer_ !== null) {\n        // Tech is seeking or already waiting on another action, no action needed\n        return true;\n      }\n\n      if (this.beforeSeekableWindow_(seekable, currentTime)) {\n        var livePoint = seekable.end(seekable.length - 1);\n\n        this.logger_('Fell out of live window at time ' + currentTime + '. Seeking to ' + ('live point (seekable end) ' + livePoint));\n        this.cancelTimer_();\n        this.seekTo(livePoint);\n\n        // live window resyncs may be useful for monitoring QoS\n        this.tech_.trigger({ type: 'usage', name: 'hls-live-resync' });\n        return true;\n      }\n\n      var buffered = this.tech_.buffered();\n      var nextRange = findNextRange(buffered, currentTime);\n\n      if (this.videoUnderflow_(nextRange, buffered, currentTime)) {\n        // Even though the video underflowed and was stuck in a gap, the audio overplayed\n        // the gap, leading currentTime into a buffered range. Seeking to currentTime\n        // allows the video to catch up to the audio position without losing any audio\n        // (only suffering ~3 seconds of frozen video and a pause in audio playback).\n        this.cancelTimer_();\n        this.seekTo(currentTime);\n\n        // video underflow may be useful for monitoring QoS\n        this.tech_.trigger({ type: 'usage', name: 'hls-video-underflow' });\n        return true;\n      }\n\n      // check for gap\n      if (nextRange.length > 0) {\n        var difference = nextRange.start(0) - currentTime;\n\n        this.logger_('Stopped at ' + currentTime + ', setting timer for ' + difference + ', seeking ' + ('to ' + nextRange.start(0)));\n\n        this.timer_ = setTimeout(this.skipTheGap_.bind(this), difference * 1000, currentTime);\n        return true;\n      }\n\n      // All checks failed. Returning false to indicate failure to correct waiting\n      return false;\n    }\n  }, {\n    key: 'afterSeekableWindow_',\n    value: function afterSeekableWindow_(seekable, currentTime) {\n      if (!seekable.length) {\n        // we can't make a solid case if there's no seekable, default to false\n        return false;\n      }\n\n      if (currentTime > seekable.end(seekable.length - 1) + SAFE_TIME_DELTA) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: 'beforeSeekableWindow_',\n    value: function beforeSeekableWindow_(seekable, currentTime) {\n      if (seekable.length &&\n      // can't fall before 0 and 0 seekable start identifies VOD stream\n      seekable.start(0) > 0 && currentTime < seekable.start(0) - SAFE_TIME_DELTA) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: 'videoUnderflow_',\n    value: function videoUnderflow_(nextRange, buffered, currentTime) {\n      if (nextRange.length === 0) {\n        // Even if there is no available next range, there is still a possibility we are\n        // stuck in a gap due to video underflow.\n        var gap = this.gapFromVideoUnderflow_(buffered, currentTime);\n\n        if (gap) {\n          this.logger_('Encountered a gap in video from ' + gap.start + ' to ' + gap.end + '. ' + ('Seeking to current time ' + currentTime));\n\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    /**\n     * Timer callback. If playback still has not proceeded, then we seek\n     * to the start of the next buffered region.\n     *\n     * @private\n     */\n\n  }, {\n    key: 'skipTheGap_',\n    value: function skipTheGap_(scheduledCurrentTime) {\n      var buffered = this.tech_.buffered();\n      var currentTime = this.tech_.currentTime();\n      var nextRange = findNextRange(buffered, currentTime);\n\n      this.cancelTimer_();\n\n      if (nextRange.length === 0 || currentTime !== scheduledCurrentTime) {\n        return;\n      }\n\n      this.logger_('skipTheGap_:', 'currentTime:', currentTime, 'scheduled currentTime:', scheduledCurrentTime, 'nextRange start:', nextRange.start(0));\n\n      // only seek if we still have not played\n      this.seekTo(nextRange.start(0) + TIME_FUDGE_FACTOR);\n\n      this.tech_.trigger({ type: 'usage', name: 'hls-gap-skip' });\n    }\n  }, {\n    key: 'gapFromVideoUnderflow_',\n    value: function gapFromVideoUnderflow_(buffered, currentTime) {\n      // At least in Chrome, if there is a gap in the video buffer, the audio will continue\n      // playing for ~3 seconds after the video gap starts. This is done to account for\n      // video buffer underflow/underrun (note that this is not done when there is audio\n      // buffer underflow/underrun -- in that case the video will stop as soon as it\n      // encounters the gap, as audio stalls are more noticeable/jarring to a user than\n      // video stalls). The player's time will reflect the playthrough of audio, so the\n      // time will appear as if we are in a buffered region, even if we are stuck in a\n      // \"gap.\"\n      //\n      // Example:\n      // video buffer:   0 => 10.1, 10.2 => 20\n      // audio buffer:   0 => 20\n      // overall buffer: 0 => 10.1, 10.2 => 20\n      // current time: 13\n      //\n      // Chrome's video froze at 10 seconds, where the video buffer encountered the gap,\n      // however, the audio continued playing until it reached ~3 seconds past the gap\n      // (13 seconds), at which point it stops as well. Since current time is past the\n      // gap, findNextRange will return no ranges.\n      //\n      // To check for this issue, we see if there is a gap that starts somewhere within\n      // a 3 second range (3 seconds +/- 1 second) back from our current time.\n      var gaps = findGaps(buffered);\n\n      for (var i = 0; i < gaps.length; i++) {\n        var start = gaps.start(i);\n        var end = gaps.end(i);\n\n        // gap is starts no more than 4 seconds back\n        if (currentTime - start < 4 && currentTime - start > 2) {\n          return {\n            start: start,\n            end: end\n          };\n        }\n      }\n\n      return null;\n    }\n  }]);\n  return PlaybackWatcher;\n}();\n\nvar defaultOptions = {\n  errorInterval: 30,\n  getSource: function getSource(next) {\n    var tech = this.tech({ IWillNotUseThisInPlugins: true });\n    var sourceObj = tech.currentSource_;\n\n    return next(sourceObj);\n  }\n};\n\n/**\n * Main entry point for the plugin\n *\n * @param {Player} player a reference to a videojs Player instance\n * @param {Object} [options] an object with plugin options\n * @private\n */\nvar initPlugin = function initPlugin(player, options) {\n  var lastCalled = 0;\n  var seekTo = 0;\n  var localOptions = videojs$1.mergeOptions(defaultOptions, options);\n\n  player.ready(function () {\n    player.trigger({ type: 'usage', name: 'hls-error-reload-initialized' });\n  });\n\n  /**\n   * Player modifications to perform that must wait until `loadedmetadata`\n   * has been triggered\n   *\n   * @private\n   */\n  var loadedMetadataHandler = function loadedMetadataHandler() {\n    if (seekTo) {\n      player.currentTime(seekTo);\n    }\n  };\n\n  /**\n   * Set the source on the player element, play, and seek if necessary\n   *\n   * @param {Object} sourceObj An object specifying the source url and mime-type to play\n   * @private\n   */\n  var setSource = function setSource(sourceObj) {\n    if (sourceObj === null || sourceObj === undefined) {\n      return;\n    }\n    seekTo = player.duration() !== Infinity && player.currentTime() || 0;\n\n    player.one('loadedmetadata', loadedMetadataHandler);\n\n    player.src(sourceObj);\n    player.trigger({ type: 'usage', name: 'hls-error-reload' });\n    player.play();\n  };\n\n  /**\n   * Attempt to get a source from either the built-in getSource function\n   * or a custom function provided via the options\n   *\n   * @private\n   */\n  var errorHandler = function errorHandler() {\n    // Do not attempt to reload the source if a source-reload occurred before\n    // 'errorInterval' time has elapsed since the last source-reload\n    if (Date.now() - lastCalled < localOptions.errorInterval * 1000) {\n      player.trigger({ type: 'usage', name: 'hls-error-reload-canceled' });\n      return;\n    }\n\n    if (!localOptions.getSource || typeof localOptions.getSource !== 'function') {\n      videojs$1.log.error('ERROR: reloadSourceOnError - The option getSource must be a function!');\n      return;\n    }\n    lastCalled = Date.now();\n\n    return localOptions.getSource.call(player, setSource);\n  };\n\n  /**\n   * Unbind any event handlers that were bound by the plugin\n   *\n   * @private\n   */\n  var cleanupEvents = function cleanupEvents() {\n    player.off('loadedmetadata', loadedMetadataHandler);\n    player.off('error', errorHandler);\n    player.off('dispose', cleanupEvents);\n  };\n\n  /**\n   * Cleanup before re-initializing the plugin\n   *\n   * @param {Object} [newOptions] an object with plugin options\n   * @private\n   */\n  var reinitPlugin = function reinitPlugin(newOptions) {\n    cleanupEvents();\n    initPlugin(player, newOptions);\n  };\n\n  player.on('error', errorHandler);\n  player.on('dispose', cleanupEvents);\n\n  // Overwrite the plugin function so that we can correctly cleanup before\n  // initializing the plugin\n  player.reloadSourceOnError = reinitPlugin;\n};\n\n/**\n * Reload the source when an error is detected as long as there\n * wasn't an error previously within the last 30 seconds\n *\n * @param {Object} [options] an object with plugin options\n */\nvar reloadSourceOnError = function reloadSourceOnError(options) {\n  initPlugin(this, options);\n};\n\nvar version$1 = \"1.2.5\";\n\n// since VHS handles HLS and DASH (and in the future, more types), use * to capture all\nvideojs$1.use('*', function (player) {\n  return {\n    setSource: function setSource(srcObj, next) {\n      // pass null as the first argument to indicate that the source is not rejected\n      next(null, srcObj);\n    },\n\n    // VHS needs to know when seeks happen. For external seeks (generated at the player\n    // level), this middleware will capture the action. For internal seeks (generated at\n    // the tech level), we use a wrapped function so that we can handle it on our own\n    // (specified elsewhere).\n    setCurrentTime: function setCurrentTime(time) {\n      if (player.vhs && player.currentSource().src === player.vhs.source_.src) {\n        player.vhs.setCurrentTime(time);\n      }\n\n      return time;\n    },\n\n    // Sync VHS after play requests.\n    // This specifically handles replay where the order of actions is\n    // play, video element will seek to 0 (skipping the setCurrentTime middleware)\n    // then triggers a play event.\n    play: function play() {\n      if (player.vhs && player.currentSource().src === player.vhs.source_.src) {\n        player.vhs.setCurrentTime(player.currentTime());\n      }\n    }\n  };\n});\n\n/**\n * @file videojs-http-streaming.js\n *\n * The main file for the HLS project.\n * License: https://github.com/videojs/videojs-http-streaming/blob/master/LICENSE\n */\n\nvar Hls$1 = {\n  PlaylistLoader: PlaylistLoader,\n  Playlist: Playlist,\n  Decrypter: Decrypter,\n  AsyncStream: AsyncStream,\n  decrypt: decrypt,\n  utils: utils,\n\n  STANDARD_PLAYLIST_SELECTOR: lastBandwidthSelector,\n  INITIAL_PLAYLIST_SELECTOR: lowestBitrateCompatibleVariantSelector,\n  comparePlaylistBandwidth: comparePlaylistBandwidth,\n  comparePlaylistResolution: comparePlaylistResolution,\n\n  xhr: xhrFactory()\n};\n\n// 0.5 MB/s\nvar INITIAL_BANDWIDTH = 4194304;\n\n// Define getter/setters for config properites\n['GOAL_BUFFER_LENGTH', 'MAX_GOAL_BUFFER_LENGTH', 'GOAL_BUFFER_LENGTH_RATE', 'BUFFER_LOW_WATER_LINE', 'MAX_BUFFER_LOW_WATER_LINE', 'BUFFER_LOW_WATER_LINE_RATE', 'BANDWIDTH_VARIANCE'].forEach(function (prop) {\n  Object.defineProperty(Hls$1, prop, {\n    get: function get$$1() {\n      videojs$1.log.warn('using Hls.' + prop + ' is UNSAFE be sure you know what you are doing');\n      return Config[prop];\n    },\n    set: function set$$1(value) {\n      videojs$1.log.warn('using Hls.' + prop + ' is UNSAFE be sure you know what you are doing');\n\n      if (typeof value !== 'number' || value < 0) {\n        videojs$1.log.warn('value of Hls.' + prop + ' must be greater than or equal to 0');\n        return;\n      }\n\n      Config[prop] = value;\n    }\n  });\n});\n\nvar simpleTypeFromSourceType = function simpleTypeFromSourceType(type) {\n  var mpegurlRE = /^(audio|video|application)\\/(x-|vnd\\.apple\\.)?mpegurl/i;\n\n  if (mpegurlRE.test(type)) {\n    return 'hls';\n  }\n\n  var dashRE = /^application\\/dash\\+xml/i;\n\n  if (dashRE.test(type)) {\n    return 'dash';\n  }\n\n  return null;\n};\n\n/**\n * Updates the selectedIndex of the QualityLevelList when a mediachange happens in hls.\n *\n * @param {QualityLevelList} qualityLevels The QualityLevelList to update.\n * @param {PlaylistLoader} playlistLoader PlaylistLoader containing the new media info.\n * @function handleHlsMediaChange\n */\nvar handleHlsMediaChange = function handleHlsMediaChange(qualityLevels, playlistLoader) {\n  var newPlaylist = playlistLoader.media();\n  var selectedIndex = -1;\n\n  for (var i = 0; i < qualityLevels.length; i++) {\n    if (qualityLevels[i].id === newPlaylist.uri) {\n      selectedIndex = i;\n      break;\n    }\n  }\n\n  qualityLevels.selectedIndex_ = selectedIndex;\n  qualityLevels.trigger({\n    selectedIndex: selectedIndex,\n    type: 'change'\n  });\n};\n\n/**\n * Adds quality levels to list once playlist metadata is available\n *\n * @param {QualityLevelList} qualityLevels The QualityLevelList to attach events to.\n * @param {Object} hls Hls object to listen to for media events.\n * @function handleHlsLoadedMetadata\n */\nvar handleHlsLoadedMetadata = function handleHlsLoadedMetadata(qualityLevels, hls) {\n  hls.representations().forEach(function (rep) {\n    qualityLevels.addQualityLevel(rep);\n  });\n  handleHlsMediaChange(qualityLevels, hls.playlists);\n};\n\n// HLS is a source handler, not a tech. Make sure attempts to use it\n// as one do not cause exceptions.\nHls$1.canPlaySource = function () {\n  return videojs$1.log.warn('HLS is no longer a tech. Please remove it from ' + 'your player\\'s techOrder.');\n};\n\nvar emeKeySystems = function emeKeySystems(keySystemOptions, videoPlaylist, audioPlaylist) {\n  if (!keySystemOptions) {\n    return keySystemOptions;\n  }\n\n  // upsert the content types based on the selected playlist\n  var keySystemContentTypes = {};\n\n  for (var keySystem in keySystemOptions) {\n    keySystemContentTypes[keySystem] = {\n      audioContentType: 'audio/mp4; codecs=\"' + audioPlaylist.attributes.CODECS + '\"',\n      videoContentType: 'video/mp4; codecs=\"' + videoPlaylist.attributes.CODECS + '\"'\n    };\n\n    if (videoPlaylist.contentProtection && videoPlaylist.contentProtection[keySystem] && videoPlaylist.contentProtection[keySystem].pssh) {\n      keySystemContentTypes[keySystem].pssh = videoPlaylist.contentProtection[keySystem].pssh;\n    }\n\n    // videojs-contrib-eme accepts the option of specifying: 'com.some.cdm': 'url'\n    // so we need to prevent overwriting the URL entirely\n    if (typeof keySystemOptions[keySystem] === 'string') {\n      keySystemContentTypes[keySystem].url = keySystemOptions[keySystem];\n    }\n  }\n\n  return videojs$1.mergeOptions(keySystemOptions, keySystemContentTypes);\n};\n\nvar setupEmeOptions = function setupEmeOptions(hlsHandler) {\n  if (hlsHandler.options_.sourceType !== 'dash') {\n    return;\n  }\n  var player = videojs$1.players[hlsHandler.tech_.options_.playerId];\n\n  if (player.eme) {\n    var sourceOptions = emeKeySystems(hlsHandler.source_.keySystems, hlsHandler.playlists.media(), hlsHandler.masterPlaylistController_.mediaTypes_.AUDIO.activePlaylistLoader.media());\n\n    if (sourceOptions) {\n      player.currentSource().keySystems = sourceOptions;\n    }\n  }\n};\n\n/**\n * Whether the browser has built-in HLS support.\n */\nHls$1.supportsNativeHls = function () {\n  var video = document.createElement('video');\n\n  // native HLS is definitely not supported if HTML5 video isn't\n  if (!videojs$1.getTech('Html5').isSupported()) {\n    return false;\n  }\n\n  // HLS manifests can go by many mime-types\n  var canPlay = [\n  // Apple santioned\n  'application/vnd.apple.mpegurl',\n  // Apple sanctioned for backwards compatibility\n  'audio/mpegurl',\n  // Very common\n  'audio/x-mpegurl',\n  // Very common\n  'application/x-mpegurl',\n  // Included for completeness\n  'video/x-mpegurl', 'video/mpegurl', 'application/mpegurl'];\n\n  return canPlay.some(function (canItPlay) {\n    return (/maybe|probably/i.test(video.canPlayType(canItPlay))\n    );\n  });\n}();\n\nHls$1.supportsNativeDash = function () {\n  if (!videojs$1.getTech('Html5').isSupported()) {\n    return false;\n  }\n\n  return (/maybe|probably/i.test(document.createElement('video').canPlayType('application/dash+xml'))\n  );\n}();\n\nHls$1.supportsTypeNatively = function (type) {\n  if (type === 'hls') {\n    return Hls$1.supportsNativeHls;\n  }\n\n  if (type === 'dash') {\n    return Hls$1.supportsNativeDash;\n  }\n\n  return false;\n};\n\n/**\n * HLS is a source handler, not a tech. Make sure attempts to use it\n * as one do not cause exceptions.\n */\nHls$1.isSupported = function () {\n  return videojs$1.log.warn('HLS is no longer a tech. Please remove it from ' + 'your player\\'s techOrder.');\n};\n\nvar Component$1 = videojs$1.getComponent('Component');\n\n/**\n * The Hls Handler object, where we orchestrate all of the parts\n * of HLS to interact with video.js\n *\n * @class HlsHandler\n * @extends videojs.Component\n * @param {Object} source the soruce object\n * @param {Tech} tech the parent tech object\n * @param {Object} options optional and required options\n */\n\nvar HlsHandler = function (_Component) {\n  inherits$1(HlsHandler, _Component);\n\n  function HlsHandler(source, tech, options) {\n    classCallCheck$1(this, HlsHandler);\n\n    // tech.player() is deprecated but setup a reference to HLS for\n    // backwards-compatibility\n    var _this = possibleConstructorReturn$1(this, (HlsHandler.__proto__ || Object.getPrototypeOf(HlsHandler)).call(this, tech, options.hls));\n\n    if (tech.options_ && tech.options_.playerId) {\n      var _player = videojs$1(tech.options_.playerId);\n\n      if (!_player.hasOwnProperty('hls')) {\n        Object.defineProperty(_player, 'hls', {\n          get: function get$$1() {\n            videojs$1.log.warn('player.hls is deprecated. Use player.tech().hls instead.');\n            tech.trigger({ type: 'usage', name: 'hls-player-access' });\n            return _this;\n          }\n        });\n      }\n\n      // Set up a reference to the HlsHandler from player.vhs. This allows users to start\n      // migrating from player.tech_.hls... to player.vhs... for API access. Although this\n      // isn't the most appropriate form of reference for video.js (since all APIs should\n      // be provided through core video.js), it is a common pattern for plugins, and vhs\n      // will act accordingly.\n      _player.vhs = _this;\n      // deprecated, for backwards compatibility\n      _player.dash = _this;\n    }\n\n    _this.tech_ = tech;\n    _this.source_ = source;\n    _this.stats = {};\n    _this.setOptions_();\n\n    if (_this.options_.overrideNative && tech.overrideNativeAudioTracks && tech.overrideNativeVideoTracks) {\n      tech.overrideNativeAudioTracks(true);\n      tech.overrideNativeVideoTracks(true);\n    } else if (_this.options_.overrideNative && (tech.featuresNativeVideoTracks || tech.featuresNativeAudioTracks)) {\n      // overriding native HLS only works if audio tracks have been emulated\n      // error early if we're misconfigured\n      throw new Error('Overriding native HLS requires emulated tracks. ' + 'See https://git.io/vMpjB');\n    }\n\n    // listen for fullscreenchange events for this player so that we\n    // can adjust our quality selection quickly\n    _this.on(document, ['fullscreenchange', 'webkitfullscreenchange', 'mozfullscreenchange', 'MSFullscreenChange'], function (event) {\n      var fullscreenElement = document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement;\n\n      if (fullscreenElement && fullscreenElement.contains(_this.tech_.el())) {\n        _this.masterPlaylistController_.smoothQualityChange_();\n      }\n    });\n    _this.on(_this.tech_, 'error', function () {\n      if (this.masterPlaylistController_) {\n        this.masterPlaylistController_.pauseLoading();\n      }\n    });\n\n    _this.on(_this.tech_, 'play', _this.play);\n    return _this;\n  }\n\n  createClass$1(HlsHandler, [{\n    key: 'setOptions_',\n    value: function setOptions_() {\n      var _this2 = this;\n\n      // defaults\n      this.options_.withCredentials = this.options_.withCredentials || false;\n\n      if (typeof this.options_.blacklistDuration !== 'number') {\n        this.options_.blacklistDuration = 5 * 60;\n      }\n\n      // start playlist selection at a reasonable bandwidth for\n      // broadband internet (0.5 MB/s) or mobile (0.0625 MB/s)\n      if (typeof this.options_.bandwidth !== 'number') {\n        this.options_.bandwidth = INITIAL_BANDWIDTH;\n      }\n\n      // If the bandwidth number is unchanged from the initial setting\n      // then this takes precedence over the enableLowInitialPlaylist option\n      this.options_.enableLowInitialPlaylist = this.options_.enableLowInitialPlaylist && this.options_.bandwidth === INITIAL_BANDWIDTH;\n\n      // grab options passed to player.src\n      ['withCredentials', 'bandwidth'].forEach(function (option) {\n        if (typeof _this2.source_[option] !== 'undefined') {\n          _this2.options_[option] = _this2.source_[option];\n        }\n      });\n\n      this.bandwidth = this.options_.bandwidth;\n    }\n    /**\n     * called when player.src gets called, handle a new source\n     *\n     * @param {Object} src the source object to handle\n     */\n\n  }, {\n    key: 'src',\n    value: function src(_src, type) {\n      var _this3 = this;\n\n      // do nothing if the src is falsey\n      if (!_src) {\n        return;\n      }\n      this.setOptions_();\n      // add master playlist controller options\n      this.options_.url = this.source_.src;\n      this.options_.tech = this.tech_;\n      this.options_.externHls = Hls$1;\n      this.options_.sourceType = simpleTypeFromSourceType(type);\n      // Whenever we seek internally, we should update both the tech and call our own\n      // setCurrentTime function. This is needed because \"seeking\" events aren't always\n      // reliable. External seeks (via the player object) are handled via middleware.\n      this.options_.seekTo = function (time) {\n        _this3.tech_.setCurrentTime(time);\n        _this3.setCurrentTime(time);\n      };\n\n      this.masterPlaylistController_ = new MasterPlaylistController(this.options_);\n      this.playbackWatcher_ = new PlaybackWatcher(videojs$1.mergeOptions(this.options_, {\n        seekable: function seekable$$1() {\n          return _this3.seekable();\n        }\n      }));\n\n      this.masterPlaylistController_.on('error', function () {\n        var player = videojs$1.players[_this3.tech_.options_.playerId];\n\n        player.error(_this3.masterPlaylistController_.error);\n      });\n\n      // `this` in selectPlaylist should be the HlsHandler for backwards\n      // compatibility with < v2\n      this.masterPlaylistController_.selectPlaylist = this.selectPlaylist ? this.selectPlaylist.bind(this) : Hls$1.STANDARD_PLAYLIST_SELECTOR.bind(this);\n\n      this.masterPlaylistController_.selectInitialPlaylist = Hls$1.INITIAL_PLAYLIST_SELECTOR.bind(this);\n\n      // re-expose some internal objects for backwards compatibility with < v2\n      this.playlists = this.masterPlaylistController_.masterPlaylistLoader_;\n      this.mediaSource = this.masterPlaylistController_.mediaSource;\n\n      // Proxy assignment of some properties to the master playlist\n      // controller. Using a custom property for backwards compatibility\n      // with < v2\n      Object.defineProperties(this, {\n        selectPlaylist: {\n          get: function get$$1() {\n            return this.masterPlaylistController_.selectPlaylist;\n          },\n          set: function set$$1(selectPlaylist) {\n            this.masterPlaylistController_.selectPlaylist = selectPlaylist.bind(this);\n          }\n        },\n        throughput: {\n          get: function get$$1() {\n            return this.masterPlaylistController_.mainSegmentLoader_.throughput.rate;\n          },\n          set: function set$$1(throughput) {\n            this.masterPlaylistController_.mainSegmentLoader_.throughput.rate = throughput;\n            // By setting `count` to 1 the throughput value becomes the starting value\n            // for the cumulative average\n            this.masterPlaylistController_.mainSegmentLoader_.throughput.count = 1;\n          }\n        },\n        bandwidth: {\n          get: function get$$1() {\n            return this.masterPlaylistController_.mainSegmentLoader_.bandwidth;\n          },\n          set: function set$$1(bandwidth) {\n            this.masterPlaylistController_.mainSegmentLoader_.bandwidth = bandwidth;\n            // setting the bandwidth manually resets the throughput counter\n            // `count` is set to zero that current value of `rate` isn't included\n            // in the cumulative average\n            this.masterPlaylistController_.mainSegmentLoader_.throughput = {\n              rate: 0,\n              count: 0\n            };\n          }\n        },\n        /**\n         * `systemBandwidth` is a combination of two serial processes bit-rates. The first\n         * is the network bitrate provided by `bandwidth` and the second is the bitrate of\n         * the entire process after that - decryption, transmuxing, and appending - provided\n         * by `throughput`.\n         *\n         * Since the two process are serial, the overall system bandwidth is given by:\n         *   sysBandwidth = 1 / (1 / bandwidth + 1 / throughput)\n         */\n        systemBandwidth: {\n          get: function get$$1() {\n            var invBandwidth = 1 / (this.bandwidth || 1);\n            var invThroughput = void 0;\n\n            if (this.throughput > 0) {\n              invThroughput = 1 / this.throughput;\n            } else {\n              invThroughput = 0;\n            }\n\n            var systemBitrate = Math.floor(1 / (invBandwidth + invThroughput));\n\n            return systemBitrate;\n          },\n          set: function set$$1() {\n            videojs$1.log.error('The \"systemBandwidth\" property is read-only');\n          }\n        }\n      });\n\n      Object.defineProperties(this.stats, {\n        bandwidth: {\n          get: function get$$1() {\n            return _this3.bandwidth || 0;\n          },\n          enumerable: true\n        },\n        mediaRequests: {\n          get: function get$$1() {\n            return _this3.masterPlaylistController_.mediaRequests_() || 0;\n          },\n          enumerable: true\n        },\n        mediaRequestsAborted: {\n          get: function get$$1() {\n            return _this3.masterPlaylistController_.mediaRequestsAborted_() || 0;\n          },\n          enumerable: true\n        },\n        mediaRequestsTimedout: {\n          get: function get$$1() {\n            return _this3.masterPlaylistController_.mediaRequestsTimedout_() || 0;\n          },\n          enumerable: true\n        },\n        mediaRequestsErrored: {\n          get: function get$$1() {\n            return _this3.masterPlaylistController_.mediaRequestsErrored_() || 0;\n          },\n          enumerable: true\n        },\n        mediaTransferDuration: {\n          get: function get$$1() {\n            return _this3.masterPlaylistController_.mediaTransferDuration_() || 0;\n          },\n          enumerable: true\n        },\n        mediaBytesTransferred: {\n          get: function get$$1() {\n            return _this3.masterPlaylistController_.mediaBytesTransferred_() || 0;\n          },\n          enumerable: true\n        },\n        mediaSecondsLoaded: {\n          get: function get$$1() {\n            return _this3.masterPlaylistController_.mediaSecondsLoaded_() || 0;\n          },\n          enumerable: true\n        },\n        buffered: {\n          get: function get$$1() {\n            return timeRangesToArray(_this3.tech_.buffered());\n          },\n          enumerable: true\n        },\n        currentTime: {\n          get: function get$$1() {\n            return _this3.tech_.currentTime();\n          },\n          enumerable: true\n        },\n        currentSource: {\n          get: function get$$1() {\n            return _this3.tech_.currentSource_;\n          },\n          enumerable: true\n        },\n        currentTech: {\n          get: function get$$1() {\n            return _this3.tech_.name_;\n          },\n          enumerable: true\n        },\n        duration: {\n          get: function get$$1() {\n            return _this3.tech_.duration();\n          },\n          enumerable: true\n        },\n        master: {\n          get: function get$$1() {\n            return _this3.playlists.master;\n          },\n          enumerable: true\n        },\n        playerDimensions: {\n          get: function get$$1() {\n            return _this3.tech_.currentDimensions();\n          },\n          enumerable: true\n        },\n        seekable: {\n          get: function get$$1() {\n            return timeRangesToArray(_this3.tech_.seekable());\n          },\n          enumerable: true\n        },\n        timestamp: {\n          get: function get$$1() {\n            return Date.now();\n          },\n          enumerable: true\n        },\n        videoPlaybackQuality: {\n          get: function get$$1() {\n            return _this3.tech_.getVideoPlaybackQuality();\n          },\n          enumerable: true\n        }\n      });\n\n      this.tech_.one('canplay', this.masterPlaylistController_.setupFirstPlay.bind(this.masterPlaylistController_));\n\n      this.masterPlaylistController_.on('selectedinitialmedia', function () {\n        // Add the manual rendition mix-in to HlsHandler\n        renditionSelectionMixin(_this3);\n        setupEmeOptions(_this3);\n      });\n\n      // the bandwidth of the primary segment loader is our best\n      // estimate of overall bandwidth\n      this.on(this.masterPlaylistController_, 'progress', function () {\n        this.tech_.trigger('progress');\n      });\n\n      this.tech_.ready(function () {\n        return _this3.setupQualityLevels_();\n      });\n\n      // do nothing if the tech has been disposed already\n      // this can occur if someone sets the src in player.ready(), for instance\n      if (!this.tech_.el()) {\n        return;\n      }\n\n      this.tech_.src(videojs$1.URL.createObjectURL(this.masterPlaylistController_.mediaSource));\n    }\n\n    /**\n     * Initializes the quality levels and sets listeners to update them.\n     *\n     * @method setupQualityLevels_\n     * @private\n     */\n\n  }, {\n    key: 'setupQualityLevels_',\n    value: function setupQualityLevels_() {\n      var _this4 = this;\n\n      var player = videojs$1.players[this.tech_.options_.playerId];\n\n      if (player && player.qualityLevels) {\n        this.qualityLevels_ = player.qualityLevels();\n\n        this.masterPlaylistController_.on('selectedinitialmedia', function () {\n          handleHlsLoadedMetadata(_this4.qualityLevels_, _this4);\n        });\n\n        this.playlists.on('mediachange', function () {\n          handleHlsMediaChange(_this4.qualityLevels_, _this4.playlists);\n        });\n      }\n    }\n\n    /**\n     * Begin playing the video.\n     */\n\n  }, {\n    key: 'play',\n    value: function play() {\n      this.masterPlaylistController_.play();\n    }\n\n    /**\n     * a wrapper around the function in MasterPlaylistController\n     */\n\n  }, {\n    key: 'setCurrentTime',\n    value: function setCurrentTime(currentTime) {\n      this.masterPlaylistController_.setCurrentTime(currentTime);\n    }\n\n    /**\n     * a wrapper around the function in MasterPlaylistController\n     */\n\n  }, {\n    key: 'duration',\n    value: function duration$$1() {\n      return this.masterPlaylistController_.duration();\n    }\n\n    /**\n     * a wrapper around the function in MasterPlaylistController\n     */\n\n  }, {\n    key: 'seekable',\n    value: function seekable$$1() {\n      return this.masterPlaylistController_.seekable();\n    }\n\n    /**\n     * Abort all outstanding work and cleanup.\n     */\n\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      if (this.playbackWatcher_) {\n        this.playbackWatcher_.dispose();\n      }\n      if (this.masterPlaylistController_) {\n        this.masterPlaylistController_.dispose();\n      }\n      if (this.qualityLevels_) {\n        this.qualityLevels_.dispose();\n      }\n      get$2(HlsHandler.prototype.__proto__ || Object.getPrototypeOf(HlsHandler.prototype), 'dispose', this).call(this);\n    }\n  }]);\n  return HlsHandler;\n}(Component$1);\n\n/**\n * The Source Handler object, which informs video.js what additional\n * MIME types are supported and sets up playback. It is registered\n * automatically to the appropriate tech based on the capabilities of\n * the browser it is running in. It is not necessary to use or modify\n * this object in normal usage.\n */\n\nvar HlsSourceHandler = {\n  name: 'videojs-http-streaming',\n  VERSION: version$1,\n  canHandleSource: function canHandleSource(srcObj) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var localOptions = videojs$1.mergeOptions(videojs$1.options, options);\n\n    return HlsSourceHandler.canPlayType(srcObj.type, localOptions);\n  },\n  handleSource: function handleSource(source, tech) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var localOptions = videojs$1.mergeOptions(videojs$1.options, options);\n\n    tech.hls = new HlsHandler(source, tech, localOptions);\n    tech.hls.xhr = xhrFactory();\n\n    tech.hls.src(source.src, source.type);\n    return tech.hls;\n  },\n  canPlayType: function canPlayType(type) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var _videojs$mergeOptions = videojs$1.mergeOptions(videojs$1.options, options),\n        overrideNative = _videojs$mergeOptions.hls.overrideNative;\n\n    var supportedType = simpleTypeFromSourceType(type);\n    var canUseMsePlayback = supportedType && (!Hls$1.supportsTypeNatively(supportedType) || overrideNative);\n\n    return canUseMsePlayback ? 'maybe' : '';\n  }\n};\n\nif (typeof videojs$1.MediaSource === 'undefined' || typeof videojs$1.URL === 'undefined') {\n  videojs$1.MediaSource = MediaSource;\n  videojs$1.URL = URL$1;\n}\n\n// register source handlers with the appropriate techs\nif (MediaSource.supportsNativeMediaSources()) {\n  videojs$1.getTech('Html5').registerSourceHandler(HlsSourceHandler, 0);\n}\n\nvideojs$1.HlsHandler = HlsHandler;\nvideojs$1.HlsSourceHandler = HlsSourceHandler;\nvideojs$1.Hls = Hls$1;\nif (!videojs$1.use) {\n  videojs$1.registerComponent('Hls', Hls$1);\n}\nvideojs$1.options.hls = videojs$1.options.hls || {};\n\nif (videojs$1.registerPlugin) {\n  videojs$1.registerPlugin('reloadSourceOnError', reloadSourceOnError);\n} else {\n  videojs$1.plugin('reloadSourceOnError', reloadSourceOnError);\n}\n\nexport default videojs$1;\n"],"sourceRoot":""}