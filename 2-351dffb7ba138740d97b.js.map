{"version":3,"sources":["webpack:///./node_modules/mux.js/lib/utils/stream.js","webpack:///./node_modules/mux.js/lib/m2ts/stream-types.js","webpack:///./node_modules/core-js/modules/es6.string.starts-with.js","webpack:///./node_modules/global/window.js","webpack:///./node_modules/mux.js/lib/mp4/probe.js","webpack:///./node_modules/m3u8-parser/dist/m3u8-parser.es.js","webpack:///./node_modules/mpd-parser/dist/mpd-parser.es.js","webpack:///./node_modules/pkcs7/dist/pkcs7.es.js","webpack:///./node_modules/aes-decrypter/dist/aes-decrypter.es.js","webpack:///./node_modules/video.js/dist/video.es.js","webpack:///./node_modules/mux.js/lib/mp4/transmuxer.js","webpack:///./node_modules/url-toolkit/src/url-toolkit.js","webpack:///./node_modules/mux.js/lib/mp4/mp4-generator.js","webpack:///./node_modules/mux.js/lib/m2ts/caption-stream.js","webpack:///./node_modules/mux.js/lib/tools/caption-packet-parser.js","webpack:///./node_modules/mux.js/lib/m2ts/timestamp-rollover-stream.js","webpack:///./node_modules/core-js/modules/_string-context.js","webpack:///./node_modules/core-js/modules/_fails-is-regexp.js","webpack:///./node_modules/global/document.js","webpack:///./node_modules/tsml/tsml.js","webpack:///./node_modules/xhr/index.js","webpack:///./node_modules/is-function/index.js","webpack:///./node_modules/parse-headers/parse-headers.js","webpack:///./node_modules/trim/index.js","webpack:///./node_modules/for-each/index.js","webpack:///./node_modules/is-callable/index.js","webpack:///./node_modules/xtend/immutable.js","webpack:///./node_modules/videojs-vtt.js/lib/browser-index.js","webpack:///./node_modules/videojs-vtt.js/lib/vtt.js","webpack:///./node_modules/videojs-vtt.js/lib/vttcue.js","webpack:///./node_modules/videojs-vtt.js/lib/vttregion.js","webpack:///./node_modules/safe-json-parse/tuple.js","webpack:///./node_modules/mux.js/lib/utils/bin.js","webpack:///./node_modules/mux.js/lib/mp4/index.js","webpack:///./node_modules/mux.js/lib/mp4/frame-utils.js","webpack:///./node_modules/mux.js/lib/mp4/track-decode-info.js","webpack:///./node_modules/mux.js/lib/m2ts/m2ts.js","webpack:///./node_modules/mux.js/lib/m2ts/metadata-stream.js","webpack:///./node_modules/mux.js/lib/codecs/adts.js","webpack:///./node_modules/mux.js/lib/codecs/h264.js","webpack:///./node_modules/mux.js/lib/utils/exp-golomb.js","webpack:///./node_modules/mux.js/lib/aac/index.js","webpack:///./node_modules/mux.js/lib/data/silence.js","webpack:///./node_modules/mux.js/lib/utils/clock.js","webpack:///./node_modules/mux.js/lib/mp4/caption-parser.js","webpack:///./node_modules/mux.js/lib/tools/mp4-inspector.js","webpack:///./node_modules/mux.js/lib/tools/ts-inspector.js","webpack:///./node_modules/mux.js/lib/m2ts/probe.js","webpack:///./node_modules/mux.js/lib/aac/probe.js"],"names":["Stream","this","init","listeners","on","type","listener","concat","off","index","indexOf","slice","splice","trigger","callbacks","i","length","args","arguments","call","push","apply","dispose","prototype","pipe","destination","data","flushSource","flush","module","exports","H264_STREAM_TYPE","ADTS_STREAM_TYPE","METADATA_STREAM_TYPE","$export","__webpack_require__","toLength","context","$startsWith","P","F","startsWith","searchString","that","Math","min","undefined","search","String","global","win","window","self","findBox","parseType","timescale","startTime","getVideoTrackIds","toUnsigned","path","size","end","subresults","results","byteLength","subarray","buffer","result","fromCharCode","reduce","trak","tkhd","version","id","mdhd","fragment","trafs","baseTimes","map","traf","tfhd","scale","tfdt","pow","Infinity","isFinite","traks","videoTrackIds","forEach","hdlrs","tkhds","hdlr","view","trackId","handlerType","DataView","byteOffset","getUint8","getUint32","classCallCheck","instance","Constructor","TypeError","_extends","Object","assign","target","source","key","hasOwnProperty","inherits","subClass","superClass","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","possibleConstructorReturn","ReferenceError","Array","LineStream","_Stream","_this","nextNewline","substring","parseAttributes","attributes","attrs","split","RegExp","attr","exec","replace","ParseStream","customParsers","line","match","event","tagType","duration","parseFloat","title","parseInt","number","playlistType","offset","allowed","test","URI","uri","BYTERANGE","_attributes$BYTERANGE","byterange","RESOLUTION","resolution","width","height","BANDWIDTH","dateTimeString","dateTimeObject","Date","IV","toLowerCase","Uint32Array","PRECISE","text","addParser","_ref","_this2","expression","customType","dataParser","segment","Parser","lineStream","parseStream","uris","currentUri","currentMap","_key","defaultMediaGroups","AUDIO","VIDEO","CLOSED-CAPTIONS","SUBTITLES","currentTimeline","manifest","allowCache","discontinuityStarts","segments","entry","mediaGroup","rendition","tag","allow-cache","message","endlist","endList","inf","mediaSequence","discontinuitySequence","METHOD","method","iv","media-sequence","discontinuity-sequence","playlist-type","playlist","stream-inf","playlists","mediaGroups","media","TYPE","NAME","mediaGroupType","default","DEFAULT","autoselect","AUTOSELECT","LANGUAGE","language","instreamId","CHARACTERISTICS","characteristics","FORCED","forced","discontinuity","program-date-time","targetduration","targetDuration","totalduration","totalDuration","start","isNaN","timeOffset","precise","cue-out","cueOut","cue-out-cont","cueOutCont","cue-in","cueIn","timeline","comment","custom","chunk","options","formatVideoPlaylist","_ref3","_attributes3","CODECS","codecs","bandwidth","periodIndex","resolvedUri","contentProtection","_typeof","Symbol","iterator","obj","isObject","merge","_len","objects","keys","isArray","mpd_parser_es_resolveUrl","baseUrl","relativeUrl","url_toolkit_default","a","buildAbsoluteURL","window_default","location","href","urlTypeToSegment","_ref$baseUrl","_ref$source","_ref$range","range","ranges","startRange","endRange","getLiveRValue","time","NOW","clientOffset","availabilityStartTime","_attributes$timescale","_attributes$start","_attributes$minimumUp","minimumUpdatePeriod","periodDuration","ceil","parseByTimeline","segmentTimeline","_attributes$type","_attributes$minimumUp2","_attributes$media","sourceDuration","_attributes$timescale2","_attributes$startNumb","startNumber","sIndex","S","d","repeat","r","segmentTime","t","count","nextS","flatten","lists","x","y","from","list","segmentRange","static","dynamic","_attributes$timeShift","timeShiftBufferDepth","now","periodStartWC","segmentCount","availableStart","floor","availableEnd","max","parseByDuration","_attributes$timescale4","_segmentRange$type","_attributes$timescale3","toSegments","identifierPattern","constructTemplateUrl","url","values","identifier","format","join","identifierReplacement","segmentsFromTemplate","templateValues","RepresentationID","Bandwidth","_attributes$initializ","initialization","sourceURL","mapSegment","parseTemplateInfo","Number","Time","mpd_parser_es_errors","segmentsFromList","_attributes$segmentUr","segmentUrls","Error","segmentUrlMap","segmentUrlObject","segmentUrl","initSegment","mediaRange","SegmentURLToSegmentObject","segmentTimeInfo","filter","segmentsFromBase","_attributes$indexRang","indexRange","generateSegments","segmentInfo","segmentAttributes","segmentsFn","template","base","_segmentAttributes","_segmentAttributes$ti","findChildren","element","name","childNodes","tagName","getContent","textContent","trim","parseDuration","str","_match$slice","year","month","day","hour","minute","second","parsers","mediaPresentationDuration","parse","parsedValue","mpd_parser_es_parseAttributes","el","e","parseFn","keySystemsMap","urn:uuid:1077efec-c0b2-4d02-ace3-3c1e52e2fb4b","urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed","urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95","urn:uuid:f239e769-efa3-4850-9c16-a903c6932efb","buildBaseUrls","referenceUrls","baseUrlElements","reference","baseUrlElement","getSegmentInformation","adaptationSet","segmentTemplate","segmentList","s","segmentBase","segmentTimelineParentNode","segmentInitializationParentNode","segmentInitialization","generateKeySystemInformation","contentProtectionNodes","acc","node","keySystem","schemeIdUri","psshNode","pssh","psshBuffer","b64Text","decodedString","atob","array","Uint8Array","charCodeAt","decodeB64ToUint8Array","toRepresentations","periodAttributes","periodBaseUrls","periodSegmentInfo","adaptationSetAttributes","adaptationSetBaseUrls","role","roleAttributes","representations","adaptationSetSegmentInfo","representation","repBaseUrlElements","repBaseUrls","representationSegmentInfo","inheritBaseUrls","inheritAttributes","mpd","_options$manifestUri","manifestUri","_options$NOW","_options$clientOffset","periods","mpdAttributes","mpdBaseUrls","period","periodAtt","adaptationSets","toAdaptationSets","mpd_parser_es_stringToMpdXml","manifestString","xml","DOMParser","parseFromString","documentElement","getElementsByTagName","dashPlaylists","_mediaGroups","_dashPlaylists$0$attr","_dashPlaylists$0$attr2","videoPlaylists","_ref4","mimeType","contentType","audioPlaylists","_ref5","vttPlaylists","_ref6","master","audio","lang","label","_attributes","formatAudioPlaylist","subs","_ref2","_attributes2","organizeVttPlaylists","toM3u8","parseUTCTiming","UTCTimingNode","parseUTCTimingScheme","aes_decrypter_es_classCallCheck","createClass","defineProperties","props","descriptor","defineProperty","protoProps","staticProps","aes_decrypter_es_possibleConstructorReturn","precompute","tables","encTable","decTable","sbox","sboxInv","xInv","th","x2","x4","tEnc","tDec","aesTables","AES","_tables","j","tmp","encKey","decKey","keyLen","rcon","decrypt","encrypted0","encrypted1","encrypted2","encrypted3","out","b","c","a2","b2","c2","nInnerRounds","kIndex","table","table0","table1","table2","table3","aes_decrypter_es_Stream","_length","_i","AsyncStream","jobs","delay","timeout_","aes_decrypter_es_inherits","processJob_","shift","setTimeout","bind","job","ntoh","word","encrypted","initVector","encrypted32","Int32Array","decipher","decrypted","decrypted32","init0","init1","init2","init3","wordIx","aes_decrypter_es_Decrypter","Decrypter","done","step","STEP","asyncStream_","decryptChunk_","padded","bytes","set","get","video_es_version","log","level","video_es_history","video_es_logByType","lvl","levels","lvlRegExp","unshift","toUpperCase","console","fn","info","all","debug","warn","error","history","clear","disable","enable","_len2","_key2","_len3","_key3","_len4","_key4","log$1","video_es_typeof","video_es_classCallCheck","video_es_inherits","video_es_possibleConstructorReturn","taggedTemplateLiteralLoose","strings","raw","video_es_toString","toString","object","video_es_isObject","each","video_es_assign","sources","isPlain","video_es_computedStyle","prop","getComputedStyle","cs","_templateObject","isNonBlankString","throwIfWhitespace","isReal","document_default","document","isEl","nodeType","isInFrame","parent","createQuerier","selector","querySelector","ctx","createEl","properties","content","createElement","getOwnPropertyNames","propName","val","tsml_default","setAttribute","attrName","appendContent","innerText","prependTo","child","firstChild","insertBefore","appendChild","hasClass","classToCheck","classList","contains","className","addClass","classToAdd","add","removeClass","classToRemove","remove","toggleClass","classToToggle","predicate","has","setAttributes","attrValue","removeAttribute","getAttributes","knownBooleans","attrVal","getAttribute","attribute","blockTextSelection","body","focus","onselectstart","unblockTextSelection","getBoundingClientRect","parentNode","rect","k","findPosition","box","left","top","docEl","clientLeft","scrollLeft","pageXOffset","clientTop","scrollTop","pageYOffset","round","getPointerPosition","position","boxW","offsetWidth","boxH","offsetHeight","boxY","boxX","pageY","pageX","changedTouches","isTextNode","emptyEl","removeChild","normalizeContent","createTextNode","insertContent","isSingleLeftClick","button","buttons","$","$$","Dom","freeze","_guid","newGUID","elData","elIdAttr","getTime","getData","hasData","removeData","_cleanUpEvents","elem","handlers","removeEventListener","dispatcher","detachEvent","disabled","_handleMultipleEvents","types","callback","fixEvent","returnTrue","returnFalse","isPropagationStopped","old","preventDefault","srcElement","relatedTarget","fromElement","toElement","returnValue","defaultPrevented","stopPropagation","cancelBubble","stopImmediatePropagation","isImmediatePropagationStopped","clientX","doc","clientY","which","charCode","keyCode","_supportsPassive","opts","addEventListener","passiveEvents","guid","hash","handlersCopy","m","n","passive","attachEvent","removeType","elemData","ownerDocument","bubbles","targetData","one","func","Events","_windowLoaded","videojs","video_es_autoSetup","autoSetup","vids","audios","divs","mediaEls","mediaEl","autoSetupTimeout","player","wait","vjs","readyState","video_es_createStyleElement","style","setTextContent","styleSheet","cssText","uid","bound","throttle","last","video_es_debounce","immediate","timeout","debounced","_later","clearTimeout","cancel","EventTarget","allowedEvents_","ael","dispatchEvent","EVENT_MAP","queueTrigger","Map","oldTimeout","delete","isEvented","eventBusEl_","every","isValidEventType","validateTarget","nodeName","validateEventType","validateListener","normalizeListenArgs","isTargetingSelf","listen","EventedMixin","_normalizeListenArgs","removeListenerOnDispose","removeRemoverOnTargetDispose","_normalizeListenArgs2","wrapper","largs","targetOrType","typeOrListener","evented","eventBusKey","StatefulMixin","state","setState","stateUpdates","changes","to","stateful","defaultState","handleStateChanged","toTitleCase","string","charAt","mergeOptions","video_es_Component","Component","ready","play","player_","options_","id_","name_","el_","children_","childIndex_","childNameIndex_","initChildren","reportTouchActivity","enableTouchActivity","localize","tokens","defaultValue","code","languages","primaryCode","primaryLang","localizedString","ret","contentEl","contentEl_","children","getChildById","getChild","addChild","component","componentName","componentClassName","componentClass","ComponentClass","getComponent","refNode","childFound","compEl","parentOptions","workingChildren","Tech","some","wchild","isTech","playerOptions","newChild","buildCSSClass","sync","isReady_","readyQueue_","triggerReady","readyQueue","show","hide","lockShowing","unlockShowing","num","skipListeners","dimension","dimensions","widthOrHeight","pxIndex","currentDimension","computedWidthOrHeight","computedStyle","getPropertyValue","rule","currentDimensions","currentWidth","currentHeight","blur","emitTapEvents","touchStart","firstTouch","couldBeTap","touches","xdiff","ydiff","sqrt","noTap","reportUserActivity","report","touchHolding","clearInterval","setInterval","touchEnd","timeoutId","disposeFn","interval","_this3","intervalId","requestAnimationFrame","_this4","supportsRaf_","cancelAnimationFrame","registerComponent","ComponentToRegister","isComp","isPrototypeOf","reason","components_","Player","players","playerNames","pname","Boolean","USER_AGENT","navigator","userAgent","webkitVersionMap","appleWebkitVersion","pop","IS_IPAD","IS_IPHONE","IS_IPOD","IS_IOS","IOS_VERSION","IS_ANDROID","ANDROID_VERSION","major","minor","IS_NATIVE_ANDROID","IS_FIREFOX","IS_EDGE","IS_CHROME","CHROME_VERSION","IE_VERSION","IS_SAFARI","IS_ANY_SAFARI","TOUCH_ENABLED","maxTouchPoints","DocumentTouch","browser","getRange","fnName","valueIndex","rangeIndex","maxIndex","rangeCheck","createTimeRangesObj","createTimeRanges","bufferedPercent","buffered","bufferedDuration","FullscreenApi","apiMap","specApi","browserApi","video_es_i","dist_video_es_i","MediaError","defaultMessages","status","errorTypes","1","2","3","4","5","errNum","isPromise","then","silencePromise","trackToJson_","track","cues","cue","endTime","textTrackConverter","tech","trackEls","trackObjs","trackEl","json","src","textTracks","addedTrack","addRemoteTextTrack","addCue","MODAL_CLASS_NAME","video_es_ModalDialog","_Component","ModalDialog","opened_","hasBeenOpened_","hasBeenFilled_","closeable","uncloseable","descEl_","description","tabIndex","aria-describedby","aria-hidden","aria-label","previouslyActiveEl_","handleKeyPress","close","desc","open","fillAlways","fill","wasPlaying_","paused","pauseOnOpen","pause","hadControls_","controls","conditionalFocus_","opened","conditionalBlur_","temporary","closeable_","temp","controlText","fillWith","parentEl","nextSiblingEl","nextSibling","empty","closeButton","content_","activeEl","activeElement","playerEl","handleKeyDown","focusableEls","focusableEls_","focusIndex","shiftKey","allChildren","querySelectorAll","HTMLAnchorElement","HTMLAreaElement","hasAttribute","HTMLInputElement","HTMLSelectElement","HTMLTextAreaElement","HTMLButtonElement","HTMLIFrameElement","HTMLObjectElement","HTMLEmbedElement","TrackList","_EventTarget","tracks","tracks_","addTrack","removeTrack","rtrack","l","getTrackById","video_es_event","change","addtrack","removetrack","disableOthers","enabled","AudioTrackList","_TrackList","changing_","disableOthers$1","selected","VideoTrackList","TextTrackList","kind","HtmlTrackElementList","trackElements","trackElements_","addTrackElement_","trackElement","getTrackElementByTrack_","trackElement_","removeTrackElement_","TextTrackCueList","setCues_","length_","oldLength","cues_","defineProp","getCueById","VideoTrackKind","alternative","captions","main","sign","subtitles","commentary","AudioTrackKind","descriptions","main-desc","translation","TextTrackKind","chapters","metadata","TextTrackMode","hidden","showing","Track","trackProps","_loop","video_es_parseUrl","addToBody","host","protocol","div","innerHTML","details","video_es_getAbsoluteURL","getFileExtension","pathParts","video_es_isCrossOrigin","winLoc","urlInfo","Url","parseUrl","getAbsoluteURL","isCrossOrigin","video_es_parseCues","srcContent","parser","WebVTT","vttjs","StringDecoder","errors","oncue","onparsingerror","onflush","groupCollapsed","groupEnd","video_es_loadTrack","crossOrigin","cors","xhr_default","err","response","responseBody","loaded_","tech_","loadHandler","video_es_TextTrack","_Track","TextTrack","settings","srclang","mode","default_","activeCues_","activeCues","changed","timeupdateHandler","newMode","ct","currentTime","active","originalCue","VTTCue","originalCue_","removeCue","_removeCue","cuechange","AudioTrack","newEnabled","VideoTrack","newSelected","NONE","LOADED","HTMLTrackElement","load","LOADING","ERROR","NORMAL","ListClass","TrackClass","capitalName","video","getterName","privateName","REMOTE","remoteText","remoteTextEl","ALL","names","video_es_Tech","hasStarted_","featuresProgressEvents","manualProgressOn","featuresTimeupdateEvents","manualTimeUpdatesOn","nativeCaptions","nativeTextTracks","featuresNativeTextTracks","emulateTextTracks","autoRemoteTextTracks_","initTrackListeners","nativeControlsForTouch","triggerSourceset","onDurationChange","manualProgress","trackProgress","manualProgressOff","stopTrackingProgress","progressInterval","numBufferedPercent","bufferedPercent_","duration_","manualTimeUpdates","trackCurrentTime","stopTrackingCurrentTime","manualTimeUpdatesOff","currentTimeInterval","manuallyTriggered","clearTracks","removeRemoteTextTrack","cleanupAutoTextTracks","reset","error_","played","setCurrentTime","trackListChanges","addWebVttScript_","_this5","browser_index_default","script","onload","onerror","_this6","remoteTracks","remoteTextTracks","handleAddTrack","handleRemoveTrack","updateDisplay","textTracksChanges","addTextTrack","createTrackHelper","createRemoteTextTrack","_this7","manualCleanup","htmlTrackElement","remoteTextTrackEls","getVideoPlaybackQuality","setPoster","playsinline","setPlaysinline","overrideNativeAudioTracks","overrideNativeVideoTracks","canPlayType","canPlaySource","srcObj","registerTech","techs_","defaultTechOrder_","getTech","featuresVolumeControl","featuresMuteControl","featuresFullscreenResize","featuresPlaybackRate","featuresSourceset","withSourceHandlers","_Tech","registerSourceHandler","handler","sourceHandlers","can","selectSourceHandler","canHandleSource","sh","originalFn","sourceHandler_","setSource","nativeSourceHandler","disposeSourceHandler","currentSource_","handleSource","middlewares","middlewareInstances","TERMINATOR","next","setSourceHelper","middleware","lastRun","mwFactory","mwrest","mw","mws","_mws$i","mwf","mwi","getOrCreateFactory","_src","mediate","arg","callMethod","middlewareValue","middlewareIterator","terminated","executeRight","allowedGetters","seekable","allowedSetters","allowedMediators","MimetypesKind","opus","ogv","mp4","mov","m4v","mkv","mp3","aac","oga","m3u8","getMimetype","ext","fixSource","mimetype","MediaLoader","techOrder","techName","isSupported","loadTech_","video_es_ClickableComponent","ClickableComponent","tabIndex_","createControlTextEl","controlTextEl_","aria-live","controlText_","localizedText","nonIconControl","enabled_","handleClick","handleFocus","handleBlur","PosterImage","_ClickableComponent","update","poster","setSrc","backgroundImage","fontMap","monospace","sansSerif","serif","monospaceSansSerif","monospaceSerif","proportionalSansSerif","proportionalSerif","casual","smallcaps","constructColor","color","opacity","hex","tryUpdateStyle","video_es_TextTrackDisplay","TextTrackDisplay","toggleDisplay","preselectTrack","modes","trackList","userPref","cache_","selectedLanguage","firstDesc","firstCaptions","preferredTrack","aria-atomic","clearDisplay","processCues","descriptionsTrack","captionsSubtitlesTrack","updateForTrack","textTrackSettings","overrides","getValues","cueDiv","displayState","textOpacity","backgroundColor","backgroundOpacity","windowColor","windowOpacity","edgeStyle","textShadow","fontPercent","fontSize","bottom","fontFamily","fontVariant","LoadingSpinner","isAudio","playerType","dir","Button","BigPlayButton","_Button","mouseused_","handleMouseDown","playPromise","cb","playToggle","playFocus","CloseButton","PlayToggle","handlePlay","handlePause","handleEnded","handleSeeked","defaultImplementation","seconds","guide","h","gm","gh","implementation","formatTime","video_es_TimeDisplay","TimeDisplay","throttledUpdateContent","updateContent","plainName","labelText_","updateTextNode_","textNode_","formattedTime_","formatTime_","updateFormattedTime_","formattedTime","CurrentTimeDisplay","_TimeDisplay","scrubbing","getCache","DurationDisplay","TimeDivider","RemainingTimeDisplay","remainingTimeDisplay","remainingTime","LiveDisplay","updateShowing","Slider","bar","barName","vertical","playerEvent","handleMouseMove","handleMouseUp","aria-valuenow","aria-valuemin","aria-valuemax","progress","getPercent","percentage","toFixed","calculateDistance","stepBack","stepForward","bool","vertical_","LoadProgressBar","partEls_","bufferedEnd","percentify","percent","part","TimeTooltip","seekBarRect","seekBarPoint","tooltipRect","playerRect","seekBarPointPx","spaceLeftOfPoint","spaceRightOfPoint","right","pullTooltipBy","PlayProgressBar","rafId_","timeTooltip","MouseTimeDisplay","SeekBar","_Slider","setEventHandlers_","updateInterval","update_","getCurrentTime_","videoWasPlaying","newTime","mouseTimeDisplay","handleAction","ProgressControl","throttledHandleMouseSeek","handleMouseSeek","seekBar","seekBarEl","video_es_FullscreenToggle","FullscreenToggle","handleFullscreenChange","fullscreenEnabled","isFullscreen","exitFullscreen","requestFullscreen","checkVolumeSupport","VolumeLevel","VolumeBar","updateLastVolume_","updateARIAAttributes","checkMuted","volume","muted","ariaValue","volumeAsPercentage_","volumeBeforeDrag","lastVolume_","VolumeControl","volumeBar","throttledHandleMouseMove","orientationClass","checkMuteSupport","MuteToggle","vol","lastVolume","volumeToSet","updateIcon_","updateControlText_","VolumePanel","inline","volumeControl","volumePanelState_","sliderActive_","sliderInactive_","muteToggle","Menu","menuButton_","menuButton","focusedChild_","addItem","unpressButton","contentElType","append","stepChild","item","video_es_MenuButton","MenuButton","buttonClass","handleSubmenuKeyPress","menu","createMenu","buttonPressed_","items","hideThreshold_","createItems","buildWrapperCSSClass","menuButtonClass","pressButton","TrackButton","_MenuButton","updateHandler","MenuItem","selectable","isSelected_","multiSelectable","_selected","video_es_TextTrackMenuItem","_MenuItem","TextTrackMenuItem","changeHandler","handleTracksChange","selectedLanguageChangeHandler","handleSelectedLanguageChange","onchange","Event","createEvent","initEvent","kinds","shouldBeSelected","OffTextTrackMenuItem","_TextTrackMenuItem","allHidden","TextTrackButton","_TrackButton","TrackMenuItem","label_","kinds_","kind_","ChaptersTrackMenuItem","ChaptersButton","_TextTrackButton","track_","setTrack","findChaptersTrack","updateHandler_","remoteTextTrackEl","_remoteTextTrackEl","getMenuCaption","mi","DescriptionsButton","SubtitlesButton","CaptionSettingsMenuItem","CaptionsButton","SubsCapsMenuItem","SubsCapsButton","language_","AudioTrackMenuItem","audioTracks","AudioTrackButton","PlaybackRateMenuItem","rate","playbackRate","PlaybackRateMenuButton","updateVisibility","updateLabel","labelEl_","rates","playbackRates","currentRate","newRate","playbackRateSupported","Spacer","CustomControlSpacer","_Spacer","ControlBar","ErrorDisplay","_ModalDialog","COLOR_BLACK","COLOR_BLUE","COLOR_CYAN","COLOR_GREEN","COLOR_MAGENTA","COLOR_RED","COLOR_WHITE","COLOR_YELLOW","OPACITY_OPAQUE","OPACITY_SEMI","OPACITY_TRANS","selectConfigs","v","parseOptionValue","video_es_TextTrackSettings","TextTrackSettings","endDialog","setDefaults","persistTextTrackSettings","saveSettings","config","restoreSettings","createElSelect_","legendId","selectLabelledbyIds","o","optionId","createElFgColor_","createElBgColor_","createElWinColor_","createElColors_","createElFont_","createElControls_","defaultsDescription","initial","accum","selectedIndex","setValues","setSelectedOption","JSON","localStorage","getItem","setItem","stringify","removeItem","ttDisplay","controlBar","subsCapsBtn","subsCapsButton","ccBtn","captionsButton","video_es_ResizeManager","ResizeManager","RESIZE_OBSERVER_AVAILABLE","ResizeObserver","loadListener_","resizeObserver_","debouncedHandler_","resizeHandler","observe","contentWindow","unobserve","disconnect","resizeObserver","sourcesetLoad","srcUrls","innerHTMLDescriptorPolyfill","cloneNode","dummy","docFrag","createDocumentFragment","Element","getDescriptor","priority","getOwnPropertyDescriptor","firstSourceWatch","resetSourceWatch_","innerDescriptor","HTMLMediaElement","video_es_getInnerHTMLDescriptor","appendWrapper","appendFn","retval","srcDescriptorPolyfill","setupSourceset","resetSourceset_","srcDescriptor","video_es_getSrcDescriptor","oldSetAttribute","oldLoad","currentSrc","_templateObject$1","video_es_Html5","Html5","crossoriginTracks","initNetworkState_","handleLateInit_","enableSourceset","setupSourcesetHandling_","hasChildNodes","nodes","nodesLength","removeNodes","proxyNativeTracks_","restoreMetadataTracksInIOSNativePlayer_","setControls","proxyWebkitFullscreen_","disposeMediaElement","metadataTracksPreFullscreenState","takeMetadataTrackSnapshot","storedMode","restoreTrackMode","storedTrack","overrideNative_","override","lowerCaseType","eventName","proxyNativeTracksForType_","elTracks","techTracks","currentTarget","removeOldTracks","removeTracks","found","playerElIngest","movingMediaElementInDOM","clone","techId","class","playerId","preload","settingsAttrs","networkState","loadstartFired","setLoadstartFired","triggerLoadstart","eventsToTrigger","checkProgress","NaN","endFn","beginFn","webkitPresentationMode","supportsFullScreen","webkitEnterFullScreen","enterFullScreen","HAVE_METADATA","exitFullScreen","webkitExitFullScreen","resetMediaElement","videoPlaybackQuality","webkitDroppedFrameCount","webkitDecodedFrameCount","droppedVideoFrames","totalVideoFrames","performance","creationTime","timing","navigationStart","TEST_VID","video_es_track","canControlVolume","canMuteVolume","canControlPlaybackRate","canOverrideAttributes","noop","supportsNativeTextTracks","supportsNativeVideoTracks","videoTracks","supportsNativeAudioTracks","featuresNativeVideoTracks","featuresNativeAudioTracks","mpegurlRE","patchCanPlayType","unpatchCanPlayType","_templateObject$2","TECH_EVENTS_RETRIGGER","TECH_EVENTS_QUEUE","canplay","canplaythrough","playing","seeked","video_es_Player","getTagSettings","closest","isPosterFromTech_","queuedCallbacks_","userActive_","tagAttributes","languagesToLower","name$$1","languages_","poster_","controls_","autoplay","scrubbing_","lastPlaybackRate","defaultPlaybackRate","playerOptionsCopy","plugins","middleware_","flexNotSupported_","majorVersion","userActive","listenForUserActivity_","handleFullscreenChange_","handleStageClick_","changingSrc_","playWaitingForReady_","playOnLoadstart_","styleEl_","playerElIngest_","divEmbed","tabindex","VIDEOJS_NO_DYNAMIC_STYLE","defaultsStyleEl","head","fluid","aspectRatio","links","linkEl","_dimension","privDimension","updateStyleEl_","parsedVal","fluid_","ratio","aspectRatio_","idClass","ratioParts","videoWidth","videoHeight","ratioMultiplier","width_","height_","_width","_height","techEl","unloadTech_","titleTechName","camelTechName","techName_","techOptions","loop","vtt.js","canOverridePoster","techCanOverridePoster","TechClass","handleTechReady_","textTracksJson_","eventObj","seeking","handleTechLoadStart_","handleTechSourceset_","handleTechWaiting_","handleTechEnded_","handleTechSeeking_","handleTechPlay_","handleTechFirstPlay_","handleTechPause_","handleTechDurationChange_","handleTechFullscreenChange_","handleTechError_","handleTechPosterChange_","handleTechTextData_","handleTechRateChange_","usingNativeControls","techGet_","addTechControlsListeners_","safety","removeTechControlsListeners_","handleTechClick_","handleTechDoubleClick_","handleTechTouchStart_","handleTechTouchMove_","handleTechTouchEnd_","handleTechTap_","techCall_","hasStarted","manualAutoplay_","previouslyMuted","catch","promise","updateSourceCaches_","matchingSources","findMimetype","sourceElSources","sourceEls","matchingSourceEls","sourceObj","updateCache","request","queued","handleTechCanPlay_","handleTechCanPlayThrough_","handleTechPlaying_","handleTechSeeked_","starttime","userWasActive","set$1","reduceRight","get$1","PromiseClass","Promise","resolve","play_","_this8","isScrubbing","percentAsDecimal","_muted","defaultMuted","_defaultMuted","isFS","isFullscreen_","fsApi","fullscreenchange","documentFullscreenChange","fullscreenElement","enterFullWindow","exitFullWindow","isFullWindow","docOrigOverflow","overflow","fullWindowOnEscKey","selectSource","_this9","techs","findFirstPassingTechSourcePair","outerArray","innerArray","tester","outerChoice","innerChoice","finder","sourceOrder","_this10","filterSource","newsrc","srcobj","middlewareSource","src_","notSupportedMessage","setTech","str1","str2","_this11","sourceTech","currentSources","currentSource","currentType","techAutoplay","newPoster","usingNativeControls_","errorDisplay","userActivity_","mouseInProgress","lastMoveX","lastMoveY","handleActivity","screenX","screenY","inactivityTimeout","isAudio_","_ref3$track","toJSON","createModal","_this12","modal","baseOptions","tagOptions","dataSetup","_safeParseTuple","tuple_default","childName","video_es_navigator","html5","flash","userLanguage","pluginStorage","pluginExists","getPlugin","markPluginAsActive","triggerSetupEvent","before","createPluginFactory","PluginSubClass","plugin","Function","getEventHash","Plugin","VERSION","isBasic","p","registerPlugin","basicPluginWrapper","createBasicPlugin","deregisterPlugin","getPlugins","getPluginVersion","BASE_PLUGIN_NAME","usingPlugin","hasPlugin","normalizeId","videojs$1","getPlayer","hooks","hookFunction","PlayerComponent","hooks_","hook","hookOnce","original","removeHook","style$1","video_es_head","getPlayers","nId","_tag","_player","getAllPlayers","comp","use","writeable","extend","subClassMethods","methods","super_","_inherits","addLanguage","_mergeOptions","createTimeRange","setFormatTime","customImplementation","resetFormatTime","xhr","dom","video_es_resolveUrl","baseURL","relativeURL","classCallCheck$1","createClass$1","inherits$1","possibleConstructorReturn$1","slicedToArray$1","arr","_arr","_n","_d","_e","_s","sliceIterator","mergeOptions$1","EventTarget$1","log$2","forEachMediaGroup","mediaType","groupKey","labelKey","mediaProperties","updateMaster","mergedPlaylist","updateSegments","baseUri","resolveSegmentUris","setupMediaPlaylists","resolveMediaGroupUris","refreshDelay","lastSegment","video_es_PlaylistLoader","PlaylistLoader","srcUrl","hls","withCredentials","getPrototypeOf","hls_","req","playlistRequestError","haveMetadata","xhr$$1","startingState","responseText","media_","mediaUpdateTimeout","stopRequest","oldRequest","onreadystatechange","abort","mediaChange","started","isFinalRendition","intervalDuration","endSequence","expired","backward","forward","backwardDuration","forwardDuration","video_es_duration","sumDurations","startIndex","endIndex","durations","safeLiveIndex","distanceFromEnd","safeDistance","playlistEnd","useSafeLiveEnd","isWholeNumber","roundSignificantDigit","increment","numDecimalDigits","ceilLeastSignificantDigit","floorLeastSignificantDigit","isBlacklisted","excludeUntil","isIncompatible","isEnabled","blacklisted","isLowestEnabledRendition","currentBandwidth","MAX_VALUE","Playlist","seekableStart","seekableEnd","getMediaInfoForTime","numSegments","mediaIndex","isDisabled","isAes","isFmp4","estimateSegmentRequestTime","segmentDuration","bytesReceived","videojsXHR","mergeOptions$1$1","xhrFactory","XhrFunction","beforeRequest","Hls","newOptions","reqResponse","responseTime","roundTripTime","requestTime","headers","responseHeaders","timedout","aborted","statusCode","originalAbort","textRange","formatHexString","formatAsciiString","createTransferableMessage","transferable","ArrayBuffer","isView","initSegmentId","hexDump","utils","tagDump","textRanges","filterRanges","timeRanges","findRange","findNextRange","printableRange","strArr","timeRangesToArray","timeRangesList","removeCuesFromTrack","durationOfVideo","abs","video_es_addTextTrackData","sourceHandler","captionArray","metadataArray","Cue","WebKitDataCue","caption","stream","inbandTextTracks_","timestampOffset","videoDuration","mediaSource_","cueTime","frames","frame","privateData","deprecateOldCue","metadataTrack_","cuesArray","cuesGroupedByStartTime","timeSlot","sortedStartTimes","sort","idx","cueGroup","nextTime","TARGET","SCRIPT_TYPE","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","URL","webkitURL","msURL","Worker","shimWorker","filename","forceFallback","objURL","createSourceObject","worker","term","terminate","revokeObjectURL","wrapTerminate","selfShim","postMessage","onmessage","isThisThread","testWorker","testArray","createObjectURL","Blob","blob","getBlob","TransmuxWorker","document$$1","dinf","esds","ftyp","mfhd","minf","moof","moov","mvex","mvhd","mdia","sdtp","stbl","stsd","trex","trun","MAJOR_BRAND","MINOR_VERSION","AVC1_BRAND","VIDEO_HDLR","AUDIO_HDLR","HDLR_TYPES","VMHD","SMHD","DREF","STCO","STSC","STSZ","STTS","videoSample","audioSample","audioTrun","videoTrun","trunHeader","UINT32_MAX","avc1","avcC","btrt","dref","mdat","mp4a","smhd","stco","stsc","stsz","stts","styp","vmhd","payload","setUint32","audioobjecttype","samplingfrequencyindex","channelcount","samplerate","sequenceNumber","trackFragments","boxes","flags","samples","dependsOn","isDependedOn","hasRedundancy","sps","pps","sequenceParameterSets","pictureParameterSets","profileIdc","profileCompatibility","levelIdc","samplesize","trackFragmentHeader","trackFragmentDecodeTime","trackFragmentRun","sampleDependencyTable","upperWordBaseMediaDecodeTime","lowerWordBaseMediaDecodeTime","baseMediaDecodeTime","durationPresent","sizePresent","flagsPresent","compositionTimeOffset","sample","isLeading","paddingValue","isNonSyncSample","degradationPriority","_findBox","mp4Generator","fileType","movie","toUnsigned$1","probe","sampleForFrame","dataOffset","pts","dts","keyFrame","frameUtils","nalUnits","currentNal","currentFrame","nalUnitType","currentGop","gops","nalCount","baseDataOffset","nalsByteLength","numberOfNals","trackDecodeInfo","minSegmentDts","maxSegmentDts","minSegmentPts","maxSegmentPts","keepOriginalTimestamps","timelineStartInfo","captionPacketParser","payloadType","payloadSize","sei","userData","ccData","newLength","newData","emulationPreventionBytesPositions","sourceIndex","CaptionStream","captionPackets_","ccStreams_","Cea608Stream","cc","newCaptionPackets","escapedRBSP","latestDts_","ignoreNextEqualDts_","numSameDts_","presortIndex","packet","dispatchCea608Packet","activeCea608Channel_","ccStream","setsChannel1Active","setsChannel2Active","CHARACTER_TRANSLATION","42","92","94","95","96","123","124","125","126","127","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","544","545","546","547","548","549","550","551","552","553","554","555","556","557","558","559","560","561","562","563","564","565","566","567","568","569","570","571","572","573","574","575","800","801","802","803","804","805","806","807","808","809","810","811","812","813","814","815","816","817","818","819","820","821","822","823","824","825","826","827","828","829","830","831","getCharFromCode","ROWS","createDisplayBuffer","BOTTOM_ROW","field","dataChannel","field_","dataChannel_","setConstants","swap","char0","char1","lastControlCode_","PADDING_","RESUME_CAPTION_LOADING_","mode_","END_OF_CAPTION_","clearFormatting","flushDisplayed","displayed_","nonDisplayed_","startPts_","ROLL_UP_2_ROWS_","rollUpRows_","setRollUp","ROLL_UP_3_ROWS_","ROLL_UP_4_ROWS_","CARRIAGE_RETURN_","shiftRowsUp_","BACKSPACE_","row_","ERASE_DISPLAYED_MEMORY_","ERASE_NON_DISPLAYED_MEMORY_","RESUME_DIRECT_CAPTIONING_","isSpecialCharacter","column_","isExtCharacter","isMidRowCode","addFormatting","isOffsetControlCode","isPAC","row","formatting_","isColorPAC","isNormalChar","startPts","endPts","topRow_","BASE_","EXT_","CONTROL_","OFFSET_","char","newBaseRow","reverse","popOn","baseRow","rollUp","paintOn","captionStream","streamTypes","handleRollover","direction","TimestampRolloverStream","lastDTS","referenceDTS","type_","_MetadataStream","timestampRolloverStream","percentEncode","parseUtf8","decodeURIComponent","parseSyncSafeInteger","tagParsers","TXXX","WXXX","PRIV","owner","unescape","tagSize","bufferSize","dispatchType","frameStart","frameSize","dataAlignmentIndicator","timeStamp","_TransportPacketStream","_TransportParseStream","_ElementaryStream","metadataStream","TimestampRolloverStream$1","bytesInBuffer","everything","parsePsi","parsePat","parsePmt","packetsWaitingForPmt","programMapTable","psi","payloadUnitStartIndicator","pat","section_number","last_section_number","pmtPid","pmt","tableEnd","timed-metadata","streamType","pid","processPes_","STREAM_TYPES","h264","adts","timedMetadata","flushStream","stream$$1","forceFlush","packetFlushable","packetData","pes","ptsDtsFlags","packetLength","codec","m2ts","PAT_PID","MP2T_PACKET_LENGTH","TransportPacketStream","TransportParseStream","ElementaryStream","MetadataStream","_AdtsStream","m2ts_1","ADTS_SAMPLING_FREQUENCIES","frameLength","protectionSkipBytes","frameEnd","oldBuffer","sampleCount","adtsFrameDuration","frameNum","_H264Stream","_NalByteStream","PROFILES_WITH_OPTIONAL_SPS_DATA","expGolomb","workingData","workingBytesAvailable","workingWord","workingBitsAvailable","bitsAvailable","loadWord","workingBytes","availableBytes","skipBits","skipBytes","readBits","bits","valu","skipLeadingZeros","leadingZeroCount","skipUnsignedExpGolomb","skipExpGolomb","readUnsignedExpGolomb","clz","readExpGolomb","readBoolean","readUnsignedByte","syncPoint","swapBuffer","100","110","122","244","44","83","86","118","128","138","139","134","currentPts","currentDts","discardEmulationPreventionBytes","readSequenceParameterSet","skipScalingList","nalByteStream","expGolombDecoder","lastScale","nextScale","chromaFormatIdc","picOrderCntType","numRefFramesInPicOrderCntCycle","picWidthInMbsMinus1","picHeightInMapUnitsMinus1","frameMbsOnlyFlag","scalingListCount","sarRatio","frameCropLeftOffset","frameCropRightOffset","frameCropTopOffset","frameCropBottomOffset","sarScale","_AacStream","H264Stream","NalByteStream","setTimestamp","timestamp","parseId3TagSize","header","byteIndex","returnSize","parseAdtsSize","lowThree","middle","bytesLeft","tempLength","metaTable","secondsToVideoTs","secondsToAudioTs","videoTsToSeconds","audioTsToSeconds","audioTsToVideoTs","videoTsToAudioTs","highPrefix","lowPrefix","zeroFill","coneOfSilence","96000","88200","64000","48000","44100","32000","24000","16000","12000","11025","8000","silence","sampleRate","_VideoSegmentStream","_AudioSegmentStream","_Transmuxer","_CoalesceStream","isLikelyAacData","arrayEquals","sumFrameByteLengths","clock","AUDIO_PROPERTIES","VIDEO_PROPERTIES","sum","adtsFrames","earliestAllowedDts","audioAppendStartTs","videoBaseMediaDecodeTime","setEarliestDts","earliestDts","setVideoBaseMediaDecodeTime","setAudioAppendStart","trimAdtsFramesByEarliestDts_","prefixWithSilence_","generateSampleTable_","concatenateFrameData_","baseMediaDecodeTimeTs","frameDuration","silentFrame","audioGapDuration","audioFillFrameCount","audioFillDuration","ONE_SECOND_IN_TS$2","gopsToAlignWith","minPTS","gopCache_","nalUnit","gopForFusion","resetStream_","getGopForFusion_","alignedGops","alignGopsAtEnd","alignGopsAtEnd_","alignGopsAtStart_","gop","dtsDistance","nearestGopObj","currentGopObj","nearestDistance","alignIndex","gopIndex","align","alignEndIndex","matchFound","trimIndex","total","alignGopsWith","newGopsToAlignWith","numberOfTracks","remux","remuxTracks","pendingTracks","videoTrack","pendingBoxes","pendingCaptions","pendingMetadata","pendingBytes","emittedTracks","output","audioTrack","id3","captionStreams","timelineStartPts","hasFlushed","transmuxPipeline_","setupAacPipeline","pipeline","aacStream","audioTimestampRolloverStream","timedMetadataTimestampRolloverStream","adtsStream","coalesceStream","headOfPipeline","audioSegmentStream","setupTsPipeline","packetStream","elementaryStream","videoTimestampRolloverStream","h264Stream","videoSegmentStream","setBaseMediaDecodeTime","isAac","resetCaptions","inspectMp4","_textifyMp","transmuxer","Transmuxer","VideoSegmentStream","AudioSegmentStream","parseType$1","parseMp4Date","parseSampleFlags","parse$$1","dataReferenceIndex","getUint16","horizresolution","vertresolution","frameCount","depth","numOfPictureParameterSets","nalSize","configurationVersion","avcProfileIndication","avcLevelIndication","lengthSizeMinusOne","numOfSequenceParameterSets","bufferSizeDB","maxBitrate","avgBitrate","esId","streamPriority","decoderConfig","objectProfileIndication","decoderConfigDescriptor","audioObjectType","samplingFrequencyIndex","channelConfiguration","majorBrand","minorVersion","compatibleBrands","dataReferences","escape","nals","avcStream","avcView","nalParse","modificationTime","streamDescriptor","matrix","nextTrackId","pdin","initialDelay","sidx","references","referenceId","earliestPresentationTime","firstOffset","referenceCount","referenceType","referencedSize","subsegmentDuration","startsWithSap","sapType","sapDeltaTime","balance","chunkOffsets","entryCount","sampleToChunks","firstChunk","samplesPerChunk","sampleDescriptionIndex","sampleDescriptions","sampleSize","entries","timeToSamples","sampleDelta","baseDataOffsetPresent","sampleDescriptionIndexPresent","defaultSampleDurationPresent","defaultSampleSizePresent","defaultSampleFlagsPresent","durationIsEmpty","defaultBaseIsMoof","defaultSampleDuration","defaultSampleSize","defaultSampleFlags","baseDataOffsetIsMoof","layer","alternateGroup","defaultSampleDescriptionIndex","sampleDependsOn","sampleIsDependedOn","sampleHasRedundancy","samplePaddingValue","sampleIsDifferenceSample","sampleDegradationPriority","dataOffsetPresent","firstSampleFlagsPresent","sampleDurationPresent","sampleSizePresent","sampleFlagsPresent","sampleCompositionTimeOffsetPresent","getInt32","url ","graphicsmode","opcolor","Uint16Array","mp4Inspector","inspect","ab","z","textify","inspectedMp4","indent","prefix","byte","parseTfdt","parseHdlr","parseTfhd","parseTrun","discardEmulationPreventionBytes$1","CaptionStream$1","mapToSample","approximateOffset","parseCaptionNals","videoTrackId","mdats","captionNals","mdatTrafPairs","matchingTraf","pair","seiNals","headerInfo","truns","seiNal","lastMatchedSample","matchingSample","findSeiNals","allSamples","parseSamples","generator","CaptionParser","captionStream$$1","segmentCache","parsedCaptions","isInitialized","isNewInit","timescales","parsedData","cachedSegment","parseEmbeddedCaptions","pushNals","nal","clearParsedCaptions","resetCaptionStream","clearAllCaptions","classCallCheck$$1","createClass$$1","MessageHandlers","initArray","typedArray","action","gopInfo","appendStart","messageHandlers","defaultCodecs","videoCodec","videoObjectTypeIndicator","audioProfile","translateLegacyCodecs","orig","profile","avcLevel","parseCodecs","parsed","codecCount","makeMimeTypeString","container","mimeTypesForPlaylist","containerType","getContainerType","codecInfo","mediaAttributes","getCodecs","isMuxed","isMaat","audioGroup","groupId","audioGroupId","audioType","audioProfileFromDefault","codecStrings","justAudio","justVideo","bothVideoAudio","isAudioCodec","isVideoCodec","videoBuffer","audioBuffer","audioDisabled","arity","extents","videoBuffered","audioBuffered","VirtualSourceBuffer","_videojs$EventTarget","mediaSource","timestampOffset_","pendingBuffers_","bufferUpdating_","codecs_","audioCodec_","videoCodec_","audioDisabled_","appendAudioInitSegment_","gopBuffer_","timeMapping_","safeAppend_","transmuxer_","data_","done_","appendGopInfo_","videoBuffer_","audioBuffer_","appendWindowStart","updating","sourceBuffer","inBandMetadataTrackDispatchType","createTextTracksIfNecessary","processPendingSegments_","addSourceBuffer","realBuffer_","makeWrappedSourceBuffer","nativeMediaSource_","mapping","currentTimePts","gopsSafeToAlignWith","updateGopBuffer","updatedBuffer","removeGopBuffer","sortedSegments","segmentObj","createRealSourceBuffers_","triggerUpdateend","concatAndAppendSegments_","destinationBuffer","tempBuffer","appendBuffer","originalError","video_es_HtmlMediaSource","HtmlMediaSource","property","MediaSource","activeSourceBuffers_","sourceBuffers","updateActiveSourceBuffers_","disableCombined","disableAudioOnly","onPlayerMediachange_","onHlsReset_","onHlsSegmentTimeMapping_","url_","sourcebuffer","parsedType","parameters","parameter","parseContentType","urlCount","mediaSources","video_es_open","msObjectURL","swfId","video_es_supportsNativeMediaSources","isTypeSupported","supportsNativeMediaSources","URL$1","EventTarget$1$1","mergeOptions$2","updateMaster$1","oldMaster","newMaster","playlistUpdate","group","_playlistUpdate","video_es_DashPlaylistLoader","DashPlaylistLoader","srcUrlOrPlaylist","masterPlaylistLoader","refreshXml_","refreshMedia_","masterPlaylistLoader_","masterXml_","clientOffset_","phonyUri","_phonyUri","date","masterLoaded_","syncClientServerClock_","onClientServerClockSync_","utcTiming","serverTime","parseMasterXml","updatedMaster","logger","video_es_noop","SourceUpdater","sourceBufferEmitter","callbacks_","pendingCallback_","processedAppend_","mimeType_","logger_","createSourceBuffer_","sourceBuffer_","start_","started_","onUpdateendCallback_","pendingCallback","runCallback_","queueCallback_","Config","GOAL_BUFFER_LENGTH","MAX_GOAL_BUFFER_LENGTH","GOAL_BUFFER_LENGTH_RATE","BANDWIDTH_VARIANCE","BUFFER_LOW_WATER_LINE","MAX_BUFFER_LOW_WATER_LINE","BUFFER_LOW_WATER_LINE_RATE","REQUEST_ERRORS","segmentXhrHeaders","byterangeEnd","Range","abortAll","activeXhrs","handleErrors","waitForCompletion","decrypter","doneFn","endOfAllRequests","worstError","prev","getMostImportantError","encryptedBytes","decryptionHandler","requestId","decryptSegment","handleProgress","progressFn","progressEvent","stats","loaded","firstBytesReceivedAt","mediaSegmentRequest","xhrOptions","decryptionWorker","captionParser","finishProcessingFn","keyXhr","responseType","errorObj","handleKeyResponse","initSegmentXhr","probe_default","video_es_handleInitSegmentResponse","segmentXhr","getRequestStats","fmp4Captions","handleSegmentResponse","video_es_safeGetComputedStyle","stableSort","sortFn","newArray","cmp","video_es_comparePlaylistBandwidth","leftBandwidth","rightBandwidth","detectEndOfStream","segmentIndex","appendedLastSegment","finite","video_es_SegmentLoader","SegmentLoader","throughput","roundTrip","resetStats_","hasPlayed_","hasPlayed","currentTime_","seekable_","seeking_","loaderType_","loaderType","startingMedia_","segmentMetadataTrack_","segmentMetadataTrack","goalBufferLength_","goalBufferLength","sourceType_","sourceType","inbandTextTracks","state_","checkBufferTimeout_","currentTimeline_","pendingSegment_","sourceUpdater_","xhrOptions_","activeInitSegmentId_","initSegments_","captionParser_","decrypter_","syncController_","syncController","syncPoint_","ended_","fetchAtBuffer_","newState","mediaBytesTransferred","mediaRequests","mediaRequestsAborted","mediaRequestsTimedout","mediaRequestsErrored","mediaTransferDuration","mediaSecondsLoaded","abort_","monitorBuffer_","abortRequests","_error","set$$1","storedMap","playlist_","setDateTimeMapping","couldBeginLoading_","init_","sourceBufferEmitter_","resetEverything","newPlaylist","oldPlaylist","syncInfo","oldId","mediaSequenceDiff","saveExpiredSegmentInfo","resyncLoader","_mimeType","resetLoader","monitorBufferTick_","fillBuffer_","getSyncPoint","checkBuffer_","buffered_","endOfStream","startOfSegment","loadSegment_","lastBufferedEnd","bufferedTime","getSyncSegmentCandidate_","generateSegmentInfo_","mediaSourceInfo","_mediaSourceInfo","segmentIndexArray","isSyncRequest","random","measuredBandwidth","requestTimeRemaining","timeUntilRebuffer$$1","timeUntilRebuffer","switchCandidate","duration$$1","compatiblePlaylists","enabledPlaylists","rebufferingEstimates","numRequests","rebufferingImpact","noRebufferingPlaylists","estimate","minRebufferMaxBandwidthSelector","timeSavedBySwitching","minimumTimeSaving","simpleSegment","abortRequestEarly_","trimBackBuffer_","createSimplifiedSegmentObj_","handleProgress_","segmentRequestFinished_","removeToTime","seekable$$1","safeBackBufferTrimTime","processSegmentResponse_","createCaptionsTrackIfNotExists","addCaptionData","handleSegment_","timingInfo","probeSegmentInfo","containsAudio","containsVideo","startingMedia","newSegmentMedia","illegalMediaSwitchError","blacklistDuration","timelineMapping","mappingForTimeline","initId","_segmentInfo$segment","_segmentInfo$playlist","seq","_segmentInfo$playlist2","segmentInfoString","handleUpdateEnd_","isWalkingForward","recordThroughput_","addSegmentMetadataCue_","segmentProcessingTime","segmentProcessingThroughput","uint8ToUtf8","uintArray","VTT_LINE_TERMINATORS","video_es_VTTSegmentLoader","_SegmentLoader","VTTSegmentLoader","subtitlesTrack_","combinedByteLength","combinedSegment","_track","skipEmptySegments_","timestampOffsetForTimeline","requested","parseVTTCues_","updateTimeMapping_","timelines","decoder","decodeBytesToString","TextDecoder","timestampmap","MPEGTS","LOCAL","ontimestampmap","mapData","segmentData","mappingObj","diff","firstStart","lastStart","findAdCue","mediaTime","adStartTime","adEndTime","tsprobe","ts_inspector_default","syncPointStrategies","run","datetimeToDisplayTime","lastDistance","segmentStart","distance","discontinuitySync","discontinuities","video_es_SyncController","SyncController","inspectCache_","syncPoints","runStrategies_","selectSyncPoint_","strategy","bestSyncPoint","bestDistance","bestStrategy","newDistance","lastRemovedSegment","playlistTimestamp","probeMp4Segment_","probeTsSegment_","calculateSegmentTimeMapping_","saveDiscontinuitySyncInfo_","timeInfo","segmentStartTime","segmentEndTime","dtsTime","accuracy","mediaIndexDiff","Decrypter$1","possibleConstructorReturn$$1","AsyncStream$$1","inherits$$1","Decrypter$$1","decrypt$$1","audioTrackKind_","stopLoaders","segmentLoader","activePlaylistLoader","startLoaders","playlistLoader","onError","segmentLoaders","mediaTypes","blacklistCurrentPlaylist","activeTrack","activeGroup","defaultTrack","onTrackChanged","setupListeners","requestOptions","byGroupId","byResolvedUri","initialize","_settings$master","_settings$mediaTypes$","groups","groupPlaylists","variantLabel","_settings$mediaTypes$2","_settings$mediaTypes$3","setupMediaGroups","variants","onGroupChanged","_settings$segmentLoad","mainSegmentLoader","previousActiveLoader","_settings$segmentLoad2","onAudioTrackChanged","createMediaTypes","loaderStats","sumLoaderStat","stat","audioSegmentLoader_","mainSegmentLoader_","video_es_MasterPlaylistController","MasterPlaylistController","externHls","useCueTags","enableLowInitialPlaylist","seekTo","seekTo_","useCueTags_","cueTagsTrack_","requestOptions_","mediaTypes_","handleSourceOpen_","segmentLoaderSettings","setupMasterPlaylistLoaderListeners_","subtitleSegmentLoader_","setupSegmentLoaderListeners_","requestTimeout","triggerPresenceUsage_","setupSourceBuffers_","setupFirstPlay","updatedPlaylist","excludeUnsupportedVariants_","selectedMedia","selectInitialPlaylist","selectPlaylist","initialMedia_","updateAdCues_","updateDuration","addSeekableRange","addSeekableRange_","onDurationchange","stuckAtPlaylistEnd_","defaultDemuxed","audioGroupKeys","nextPlaylist","currentPlaylist","forwardBuffer","bufferLowWaterLine","onSyncInfoUpdate_","onEndOfStream","ended","isEndOfStream","getExpiredTime","absolutePlaylistEnd","TIME_FUDGE_FACTOR","mainSeekable","audioSeekable","oldDuration","newDuration","setDuration","mimeTypes","configureLoaderMimeTypes_","excludeIncompatibleVariants_","variant","codecString","variantCodecs","adOffset","adTotal","_segment$cueOutCont$s","_segment$cueOutCont$s2","video_es_updateAdCues","Representation","hlsHandler","loader","playlistUri","changePlaylistFn","fastChangeFunction","masterPlaylistController_","fastQualityChange_","incompatible","currentlyEnabled","timerCancelEvents","video_es_PlaybackWatcher","PlaybackWatcher","consecutiveUpdates","lastRecordedTime","timer_","checkCurrentTimeTimeout_","canPlayHandler","monitorCurrentTime_","waitingHandler","techWaiting_","cancelTimerHandler","cancelTimer_","fixesBadSeeksHandler","fixesBadSeeks_","checkCurrentTime_","waiting_","afterSeekableWindow_","beforeSeekableWindow_","currentRange","livePoint","nextRange","videoUnderflow_","difference","skipTheGap_","gap","gapFromVideoUnderflow_","scheduledCurrentTime","gaps","findGaps","defaultOptions","errorInterval","getSource","IWillNotUseThisInPlugins","reloadSourceOnError","initPlugin","lastCalled","localOptions","loadedMetadataHandler","errorHandler","cleanupEvents","vhs","source_","Hls$1","STANDARD_PLAYLIST_SELECTOR","playerBandwidth","playerWidth","playerHeight","sortedPlaylistReps","enabledPlaylistReps","rep","bandwidthPlaylistReps","highestRemainingBandwidthRep","bandwidthBestRep","haveResolution","resolutionBestRepList","resolutionBestRep","resolutionPlusOneList","resolutionPlusOneSmallest","resolutionPlusOneRep","chosenRep","video_es_simpleSelector","systemBandwidth","INITIAL_PLAYLIST_SELECTOR","comparePlaylistBandwidth","comparePlaylistResolution","leftWidth","rightWidth","simpleTypeFromSourceType","handleHlsMediaChange","qualityLevels","selectedIndex_","setupEmeOptions","eme","sourceOptions","keySystemOptions","videoPlaylist","audioPlaylist","keySystemContentTypes","audioContentType","videoContentType","emeKeySystems","keySystems","supportsNativeHls","canItPlay","supportsNativeDash","supportsTypeNatively","Component$1","video_es_HlsHandler","HlsHandler","dash","setOptions_","overrideNative","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","smoothQualityChange_","pauseLoading","option","playbackWatcher_","invBandwidth","invThroughput","mediaRequests_","mediaRequestsAborted_","mediaRequestsTimedout_","mediaRequestsErrored_","mediaTransferDuration_","mediaBytesTransferred_","mediaSecondsLoaded_","currentTech","playerDimensions","setupQualityLevels_","qualityLevels_","addQualityLevel","get$$1","receiver","getter","get$2","HlsSourceHandler","supportedType","__webpack_exports__","CoalesceStream","AdtsStream","AacStream","collectDtsInfo","calculateTrackBaseMediaDecodeTime","clearDtsInfo","ONE_SECOND_IN_TS","groupNalsIntoFrames","groupFramesIntoGops","extendFirstKeyFrame","generateSampleTable","concatenateNalData","URL_REGEX","FIRST_SEGMENT_REGEX","SLASH_DOT_REGEX","SLASH_DOT_DOT_REGEX","URLToolkit","alwaysNormalize","basePartsForNormalise","parseURL","normalizePath","buildURLFromParts","relativeParts","scheme","baseParts","netLoc","builtParts","params","query","baseURLPath","newPath","lastIndexOf","parts","cea708Parser","parseSei","USER_DATA_REGISTERED_ITU_T_T35","parseUserData","parseCaptionPackets","isRegExp","defined","MATCH","KEY","re","f","doccy","topLevel","minDoc","clean","sa","isFunction","parseHeaders","xtend","initParams","createXHR","_createXHR","called","errorFunc","evt","timeoutTimer","failureResponse","loadFunc","useXDR","responseXML","firefoxBugTakenEffect","getXml","isJson","getBody","rawRequest","getAllResponseHeaders","XDomainRequest","XMLHttpRequest","onprogress","onabort","ontimeout","username","password","setRequestHeader","isEmpty","beforeSend","send","forEachArray","alert","confirm","prompt","isCallable","toStr","thisArg","len","forEachString","forEachObject","fnToStr","constructorRegex","isES6ClassFn","fnStr","hasToStringTag","toStringTag","tryFunctionObject","strClass","VTTRegion","cueShim","regionShim","nativeVTTCue","nativeVTTRegion","shim","restore","_objCreate","ParsingError","errorData","parseTimeStamp","input","computeSeconds","Settings","parseOptions","keyValueDelim","groupDelim","kv","parseCue","regionList","oInput","consumeTimeStamp","ts","Errors","BadTimeStamp","skipWhitespace","substr","region","alt","vals","vals0","integer","lineAlign","snapToLines","positionAlign","consumeCueSettings","BadSignature","dflt","defaultKey","ESCAPE","&amp;","&lt;","&gt;","&lrm;","&rlm;","&nbsp;","TAG_NAME","u","ruby","rt","TAG_ANNOTATION","NEEDS_PARENT","parseContent","nextToken","unescape1","shouldAdd","current","localName","annotation","rootDiv","tagStack","createProcessingInstruction","strongRTLRanges","isStrongRTLChar","StyleBox","CueStyleBox","styleOptions","styles","display","writingMode","unicodeBidi","applyStyles","nodeStack","pushNodes","nextTextNode","determineBidi","textAlign","font","whiteSpace","textPos","formatStyle","move","BoxPosition","lh","offsetTop","rects","getClientRects","lineHeight","moveBoxToLinePosition","styleBox","containerBox","boxPositions","boxPosition","linePos","textTrackList","mediaElement","computeLinePos","axis","maxPosition","initialAxis","calculatedPercentage","bestPosition","specifiedPosition","overlapsOppositeAxis","within","overlapsAny","intersectPercentage","findBestPosition","toCSSCompatValues","unit","toMove","overlaps","getSimpleBoxPosition","decode","encodeURIComponent","convertCueToDOMTree","cuetext","overlay","paddedOverlay","margin","hasBeenReset","shouldCompute","reportOrThrowError","collectNextLine","pos","parseHeader","xy","anchor","lines","regionAnchorX","regionAnchorY","viewportAnchorX","viewportAnchorY","scroll","onregion","parseRegion","alreadyCollectedLine","hasSubstring","autoKeyword","directionSetting","","lr","rl","alignSetting","findAlignSetting","_id","_pauseOnExit","_startTime","_endTime","_text","_region","_vertical","_snapToLines","_line","_lineAlign","_position","_positionAlign","_size","_align","pauseOnExit","setting","findDirectionSetting","SyntaxError","getCueAsHTML","scrollSetting","up","isValidPercentValue","_lines","_regionAnchorX","_regionAnchorY","_viewportAnchorX","_viewportAnchorY","_scroll","findScrollSetting","reviver","StreamTypes","m2tsStreamTypes","ExpGolomb","textifyMp4","parseAudioPes_","pesType","pusi","endLoop","parsePesType","parsePayloadUnitStartIndicator","parsePesTime","parseVideoPes_","firstKeyFrame","videoPacketContainsKeyFrame","inspectTs_","parsePsi_","baseTimestamp","audioCount","parseAacTimestamp","parseSampleRate","audioTimescale","inspectAac_","audioBaseTimestamp","ptsTime","videoBaseTimestamp","adjustTimestamp_","parsePid","parseAdaptionField","parseNalUnitType","payloadOffset","frameBuffer","frameI","frameSyncPoint","foundKeyFrame"],"mappings":"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","file":"2-351dffb7ba138740d97b.js","sourcesContent":["/**\n * mux.js\n *\n * Copyright (c) 2014 Brightcove\n * All rights reserved.\n *\n * A lightweight readable stream implemention that handles event dispatching.\n * Objects that inherit from streams should call init in their constructors.\n */\n'use strict';\n\nvar Stream = function() {\n  this.init = function() {\n    var listeners = {};\n    /**\n     * Add a listener for a specified event type.\n     * @param type {string} the event name\n     * @param listener {function} the callback to be invoked when an event of\n     * the specified type occurs\n     */\n    this.on = function(type, listener) {\n      if (!listeners[type]) {\n        listeners[type] = [];\n      }\n      listeners[type] = listeners[type].concat(listener);\n    };\n    /**\n     * Remove a listener for a specified event type.\n     * @param type {string} the event name\n     * @param listener {function} a function previously registered for this\n     * type of event through `on`\n     */\n    this.off = function(type, listener) {\n      var index;\n      if (!listeners[type]) {\n        return false;\n      }\n      index = listeners[type].indexOf(listener);\n      listeners[type] = listeners[type].slice();\n      listeners[type].splice(index, 1);\n      return index > -1;\n    };\n    /**\n     * Trigger an event of the specified type on this stream. Any additional\n     * arguments to this function are passed as parameters to event listeners.\n     * @param type {string} the event name\n     */\n    this.trigger = function(type) {\n      var callbacks, i, length, args;\n      callbacks = listeners[type];\n      if (!callbacks) {\n        return;\n      }\n      // Slicing the arguments on every invocation of this method\n      // can add a significant amount of overhead. Avoid the\n      // intermediate object creation for the common case of a\n      // single callback argument\n      if (arguments.length === 2) {\n        length = callbacks.length;\n        for (i = 0; i < length; ++i) {\n          callbacks[i].call(this, arguments[1]);\n        }\n      } else {\n        args = [];\n        i = arguments.length;\n        for (i = 1; i < arguments.length; ++i) {\n          args.push(arguments[i]);\n        }\n        length = callbacks.length;\n        for (i = 0; i < length; ++i) {\n          callbacks[i].apply(this, args);\n        }\n      }\n    };\n    /**\n     * Destroys the stream and cleans up.\n     */\n    this.dispose = function() {\n      listeners = {};\n    };\n  };\n};\n\n/**\n * Forwards all `data` events on this stream to the destination stream. The\n * destination stream should provide a method `push` to receive the data\n * events as they arrive.\n * @param destination {stream} the stream that will receive all `data` events\n * @param autoFlush {boolean} if false, we will not call `flush` on the destination\n *                            when the current stream emits a 'done' event\n * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n */\nStream.prototype.pipe = function(destination) {\n  this.on('data', function(data) {\n    destination.push(data);\n  });\n\n  this.on('done', function(flushSource) {\n    destination.flush(flushSource);\n  });\n\n  return destination;\n};\n\n// Default stream functions that are expected to be overridden to perform\n// actual work. These are provided by the prototype as a sort of no-op\n// implementation so that we don't have to check for their existence in the\n// `pipe` function above.\nStream.prototype.push = function(data) {\n  this.trigger('data', data);\n};\n\nStream.prototype.flush = function(flushSource) {\n  this.trigger('done', flushSource);\n};\n\nmodule.exports = Stream;\n","'use strict';\n\nmodule.exports = {\n  H264_STREAM_TYPE: 0x1B,\n  ADTS_STREAM_TYPE: 0x0F,\n  METADATA_STREAM_TYPE: 0x15\n};\n","// 21.1.3.18 String.prototype.startsWith(searchString [, position ])\n'use strict';\nvar $export = require('./_export');\nvar toLength = require('./_to-length');\nvar context = require('./_string-context');\nvar STARTS_WITH = 'startsWith';\nvar $startsWith = ''[STARTS_WITH];\n\n$export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {\n  startsWith: function startsWith(searchString /* , position = 0 */) {\n    var that = context(this, searchString, STARTS_WITH);\n    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));\n    var search = String(searchString);\n    return $startsWith\n      ? $startsWith.call(that, search, index)\n      : that.slice(index, index + search.length) === search;\n  }\n});\n","var win;\n\nif (typeof window !== \"undefined\") {\n    win = window;\n} else if (typeof global !== \"undefined\") {\n    win = global;\n} else if (typeof self !== \"undefined\"){\n    win = self;\n} else {\n    win = {};\n}\n\nmodule.exports = win;\n","/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * Utilities to detect basic properties and metadata about MP4s.\n */\n'use strict';\n\nvar toUnsigned = require('../utils/bin').toUnsigned;\nvar findBox, parseType, timescale, startTime, getVideoTrackIds;\n\n// Find the data for a box specified by its path\nfindBox = function(data, path) {\n  var results = [],\n      i, size, type, end, subresults;\n\n  if (!path.length) {\n    // short-circuit the search for empty paths\n    return null;\n  }\n\n  for (i = 0; i < data.byteLength;) {\n    size  = toUnsigned(data[i]     << 24 |\n                       data[i + 1] << 16 |\n                       data[i + 2] <<  8 |\n                       data[i + 3]);\n\n    type = parseType(data.subarray(i + 4, i + 8));\n\n    end = size > 1 ? i + size : data.byteLength;\n\n    if (type === path[0]) {\n      if (path.length === 1) {\n        // this is the end of the path and we've found the box we were\n        // looking for\n        results.push(data.subarray(i + 8, end));\n      } else {\n        // recursively search for the next box along the path\n        subresults = findBox(data.subarray(i + 8, end), path.slice(1));\n        if (subresults.length) {\n          results = results.concat(subresults);\n        }\n      }\n    }\n    i = end;\n  }\n\n  // we've finished searching all of data\n  return results;\n};\n\n/**\n * Returns the string representation of an ASCII encoded four byte buffer.\n * @param buffer {Uint8Array} a four-byte buffer to translate\n * @return {string} the corresponding string\n */\nparseType = function(buffer) {\n  var result = '';\n  result += String.fromCharCode(buffer[0]);\n  result += String.fromCharCode(buffer[1]);\n  result += String.fromCharCode(buffer[2]);\n  result += String.fromCharCode(buffer[3]);\n  return result;\n};\n\n/**\n * Parses an MP4 initialization segment and extracts the timescale\n * values for any declared tracks. Timescale values indicate the\n * number of clock ticks per second to assume for time-based values\n * elsewhere in the MP4.\n *\n * To determine the start time of an MP4, you need two pieces of\n * information: the timescale unit and the earliest base media decode\n * time. Multiple timescales can be specified within an MP4 but the\n * base media decode time is always expressed in the timescale from\n * the media header box for the track:\n * ```\n * moov > trak > mdia > mdhd.timescale\n * ```\n * @param init {Uint8Array} the bytes of the init segment\n * @return {object} a hash of track ids to timescale values or null if\n * the init segment is malformed.\n */\ntimescale = function(init) {\n  var\n    result = {},\n    traks = findBox(init, ['moov', 'trak']);\n\n  // mdhd timescale\n  return traks.reduce(function(result, trak) {\n    var tkhd, version, index, id, mdhd;\n\n    tkhd = findBox(trak, ['tkhd'])[0];\n    if (!tkhd) {\n      return null;\n    }\n    version = tkhd[0];\n    index = version === 0 ? 12 : 20;\n    id = toUnsigned(tkhd[index]     << 24 |\n                    tkhd[index + 1] << 16 |\n                    tkhd[index + 2] <<  8 |\n                    tkhd[index + 3]);\n\n    mdhd = findBox(trak, ['mdia', 'mdhd'])[0];\n    if (!mdhd) {\n      return null;\n    }\n    version = mdhd[0];\n    index = version === 0 ? 12 : 20;\n    result[id] = toUnsigned(mdhd[index]     << 24 |\n                            mdhd[index + 1] << 16 |\n                            mdhd[index + 2] <<  8 |\n                            mdhd[index + 3]);\n    return result;\n  }, result);\n};\n\n/**\n * Determine the base media decode start time, in seconds, for an MP4\n * fragment. If multiple fragments are specified, the earliest time is\n * returned.\n *\n * The base media decode time can be parsed from track fragment\n * metadata:\n * ```\n * moof > traf > tfdt.baseMediaDecodeTime\n * ```\n * It requires the timescale value from the mdhd to interpret.\n *\n * @param timescale {object} a hash of track ids to timescale values.\n * @return {number} the earliest base media decode start time for the\n * fragment, in seconds\n */\nstartTime = function(timescale, fragment) {\n  var trafs, baseTimes, result;\n\n  // we need info from two childrend of each track fragment box\n  trafs = findBox(fragment, ['moof', 'traf']);\n\n  // determine the start times for each track\n  baseTimes = [].concat.apply([], trafs.map(function(traf) {\n    return findBox(traf, ['tfhd']).map(function(tfhd) {\n      var id, scale, baseTime;\n\n      // get the track id from the tfhd\n      id = toUnsigned(tfhd[4] << 24 |\n                      tfhd[5] << 16 |\n                      tfhd[6] <<  8 |\n                      tfhd[7]);\n      // assume a 90kHz clock if no timescale was specified\n      scale = timescale[id] || 90e3;\n\n      // get the base media decode time from the tfdt\n      baseTime = findBox(traf, ['tfdt']).map(function(tfdt) {\n        var version, result;\n\n        version = tfdt[0];\n        result = toUnsigned(tfdt[4] << 24 |\n                            tfdt[5] << 16 |\n                            tfdt[6] <<  8 |\n                            tfdt[7]);\n        if (version ===  1) {\n          result *= Math.pow(2, 32);\n          result += toUnsigned(tfdt[8]  << 24 |\n                               tfdt[9]  << 16 |\n                               tfdt[10] <<  8 |\n                               tfdt[11]);\n        }\n        return result;\n      })[0];\n      baseTime = baseTime || Infinity;\n\n      // convert base time to seconds\n      return baseTime / scale;\n    });\n  }));\n\n  // return the minimum\n  result = Math.min.apply(null, baseTimes);\n  return isFinite(result) ? result : 0;\n};\n\n/**\n  * Find the trackIds of the video tracks in this source.\n  * Found by parsing the Handler Reference and Track Header Boxes:\n  *   moov > trak > mdia > hdlr\n  *   moov > trak > tkhd\n  *\n  * @param {Uint8Array} init - The bytes of the init segment for this source\n  * @return {Number[]} A list of trackIds\n  *\n  * @see ISO-BMFF-12/2015, Section 8.4.3\n **/\ngetVideoTrackIds = function(init) {\n  var traks = findBox(init, ['moov', 'trak']);\n  var videoTrackIds = [];\n\n  traks.forEach(function(trak) {\n    var hdlrs = findBox(trak, ['mdia', 'hdlr']);\n    var tkhds = findBox(trak, ['tkhd']);\n\n    hdlrs.forEach(function(hdlr, index) {\n      var handlerType = parseType(hdlr.subarray(8, 12));\n      var tkhd = tkhds[index];\n      var view;\n      var version;\n      var trackId;\n\n      if (handlerType === 'vide') {\n        view = new DataView(tkhd.buffer, tkhd.byteOffset, tkhd.byteLength);\n        version = view.getUint8(0);\n        trackId = (version === 0) ? view.getUint32(12) : view.getUint32(20);\n\n        videoTrackIds.push(trackId);\n      }\n    });\n  });\n\n  return videoTrackIds;\n};\n\nmodule.exports = {\n  findBox: findBox,\n  parseType: parseType,\n  timescale: timescale,\n  startTime: startTime,\n  videoTrackIds: getVideoTrackIds\n};\n","var classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\n\n\n\n\n\n\n\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\n\n\n\n\n\n\n\n\n\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\n/**\n * @file stream.js\n */\n/**\n * A lightweight readable stream implemention that handles event dispatching.\n *\n * @class Stream\n */\nvar Stream = function () {\n  function Stream() {\n    classCallCheck(this, Stream);\n\n    this.listeners = {};\n  }\n\n  /**\n   * Add a listener for a specified event type.\n   *\n   * @param {String} type the event name\n   * @param {Function} listener the callback to be invoked when an event of\n   * the specified type occurs\n   */\n\n\n  Stream.prototype.on = function on(type, listener) {\n    if (!this.listeners[type]) {\n      this.listeners[type] = [];\n    }\n    this.listeners[type].push(listener);\n  };\n\n  /**\n   * Remove a listener for a specified event type.\n   *\n   * @param {String} type the event name\n   * @param {Function} listener  a function previously registered for this\n   * type of event through `on`\n   * @return {Boolean} if we could turn it off or not\n   */\n\n\n  Stream.prototype.off = function off(type, listener) {\n    if (!this.listeners[type]) {\n      return false;\n    }\n\n    var index = this.listeners[type].indexOf(listener);\n\n    this.listeners[type].splice(index, 1);\n    return index > -1;\n  };\n\n  /**\n   * Trigger an event of the specified type on this stream. Any additional\n   * arguments to this function are passed as parameters to event listeners.\n   *\n   * @param {String} type the event name\n   */\n\n\n  Stream.prototype.trigger = function trigger(type) {\n    var callbacks = this.listeners[type];\n    var i = void 0;\n    var length = void 0;\n    var args = void 0;\n\n    if (!callbacks) {\n      return;\n    }\n    // Slicing the arguments on every invocation of this method\n    // can add a significant amount of overhead. Avoid the\n    // intermediate object creation for the common case of a\n    // single callback argument\n    if (arguments.length === 2) {\n      length = callbacks.length;\n      for (i = 0; i < length; ++i) {\n        callbacks[i].call(this, arguments[1]);\n      }\n    } else {\n      args = Array.prototype.slice.call(arguments, 1);\n      length = callbacks.length;\n      for (i = 0; i < length; ++i) {\n        callbacks[i].apply(this, args);\n      }\n    }\n  };\n\n  /**\n   * Destroys the stream and cleans up.\n   */\n\n\n  Stream.prototype.dispose = function dispose() {\n    this.listeners = {};\n  };\n  /**\n   * Forwards all `data` events on this stream to the destination stream. The\n   * destination stream should provide a method `push` to receive the data\n   * events as they arrive.\n   *\n   * @param {Stream} destination the stream that will receive all `data` events\n   * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n   */\n\n\n  Stream.prototype.pipe = function pipe(destination) {\n    this.on('data', function (data) {\n      destination.push(data);\n    });\n  };\n\n  return Stream;\n}();\n\n/**\n * @file m3u8/line-stream.js\n */\n/**\n * A stream that buffers string input and generates a `data` event for each\n * line.\n *\n * @class LineStream\n * @extends Stream\n */\n\nvar LineStream = function (_Stream) {\n  inherits(LineStream, _Stream);\n\n  function LineStream() {\n    classCallCheck(this, LineStream);\n\n    var _this = possibleConstructorReturn(this, _Stream.call(this));\n\n    _this.buffer = '';\n    return _this;\n  }\n\n  /**\n   * Add new data to be parsed.\n   *\n   * @param {String} data the text to process\n   */\n\n\n  LineStream.prototype.push = function push(data) {\n    var nextNewline = void 0;\n\n    this.buffer += data;\n    nextNewline = this.buffer.indexOf('\\n');\n\n    for (; nextNewline > -1; nextNewline = this.buffer.indexOf('\\n')) {\n      this.trigger('data', this.buffer.substring(0, nextNewline));\n      this.buffer = this.buffer.substring(nextNewline + 1);\n    }\n  };\n\n  return LineStream;\n}(Stream);\n\n/**\n * @file m3u8/parse-stream.js\n */\n/**\n * \"forgiving\" attribute list psuedo-grammar:\n * attributes -> keyvalue (',' keyvalue)*\n * keyvalue   -> key '=' value\n * key        -> [^=]*\n * value      -> '\"' [^\"]* '\"' | [^,]*\n */\nvar attributeSeparator = function attributeSeparator() {\n  var key = '[^=]*';\n  var value = '\"[^\"]*\"|[^,]*';\n  var keyvalue = '(?:' + key + ')=(?:' + value + ')';\n\n  return new RegExp('(?:^|,)(' + keyvalue + ')');\n};\n\n/**\n * Parse attributes from a line given the seperator\n *\n * @param {String} attributes the attibute line to parse\n */\nvar parseAttributes = function parseAttributes(attributes) {\n  // split the string using attributes as the separator\n  var attrs = attributes.split(attributeSeparator());\n  var result = {};\n  var i = attrs.length;\n  var attr = void 0;\n\n  while (i--) {\n    // filter out unmatched portions of the string\n    if (attrs[i] === '') {\n      continue;\n    }\n\n    // split the key and value\n    attr = /([^=]*)=(.*)/.exec(attrs[i]).slice(1);\n    // trim whitespace and remove optional quotes around the value\n    attr[0] = attr[0].replace(/^\\s+|\\s+$/g, '');\n    attr[1] = attr[1].replace(/^\\s+|\\s+$/g, '');\n    attr[1] = attr[1].replace(/^['\"](.*)['\"]$/g, '$1');\n    result[attr[0]] = attr[1];\n  }\n  return result;\n};\n\n/**\n * A line-level M3U8 parser event stream. It expects to receive input one\n * line at a time and performs a context-free parse of its contents. A stream\n * interpretation of a manifest can be useful if the manifest is expected to\n * be too large to fit comfortably into memory or the entirety of the input\n * is not immediately available. Otherwise, it's probably much easier to work\n * with a regular `Parser` object.\n *\n * Produces `data` events with an object that captures the parser's\n * interpretation of the input. That object has a property `tag` that is one\n * of `uri`, `comment`, or `tag`. URIs only have a single additional\n * property, `line`, which captures the entirety of the input without\n * interpretation. Comments similarly have a single additional property\n * `text` which is the input without the leading `#`.\n *\n * Tags always have a property `tagType` which is the lower-cased version of\n * the M3U8 directive without the `#EXT` or `#EXT-X-` prefix. For instance,\n * `#EXT-X-MEDIA-SEQUENCE` becomes `media-sequence` when parsed. Unrecognized\n * tags are given the tag type `unknown` and a single additional property\n * `data` with the remainder of the input.\n *\n * @class ParseStream\n * @extends Stream\n */\n\nvar ParseStream = function (_Stream) {\n  inherits(ParseStream, _Stream);\n\n  function ParseStream() {\n    classCallCheck(this, ParseStream);\n\n    var _this = possibleConstructorReturn(this, _Stream.call(this));\n\n    _this.customParsers = [];\n    return _this;\n  }\n\n  /**\n   * Parses an additional line of input.\n   *\n   * @param {String} line a single line of an M3U8 file to parse\n   */\n\n\n  ParseStream.prototype.push = function push(line) {\n    var match = void 0;\n    var event = void 0;\n\n    // strip whitespace\n    line = line.replace(/^[\\u0000\\s]+|[\\u0000\\s]+$/g, '');\n    if (line.length === 0) {\n      // ignore empty lines\n      return;\n    }\n\n    // URIs\n    if (line[0] !== '#') {\n      this.trigger('data', {\n        type: 'uri',\n        uri: line\n      });\n      return;\n    }\n\n    for (var i = 0; i < this.customParsers.length; i++) {\n      if (this.customParsers[i].call(this, line)) {\n        return;\n      }\n    }\n\n    // Comments\n    if (line.indexOf('#EXT') !== 0) {\n      this.trigger('data', {\n        type: 'comment',\n        text: line.slice(1)\n      });\n      return;\n    }\n\n    // strip off any carriage returns here so the regex matching\n    // doesn't have to account for them.\n    line = line.replace('\\r', '');\n\n    // Tags\n    match = /^#EXTM3U/.exec(line);\n    if (match) {\n      this.trigger('data', {\n        type: 'tag',\n        tagType: 'm3u'\n      });\n      return;\n    }\n    match = /^#EXTINF:?([0-9\\.]*)?,?(.*)?$/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'inf'\n      };\n      if (match[1]) {\n        event.duration = parseFloat(match[1]);\n      }\n      if (match[2]) {\n        event.title = match[2];\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-TARGETDURATION:?([0-9.]*)?/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'targetduration'\n      };\n      if (match[1]) {\n        event.duration = parseInt(match[1], 10);\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#ZEN-TOTAL-DURATION:?([0-9.]*)?/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'totalduration'\n      };\n      if (match[1]) {\n        event.duration = parseInt(match[1], 10);\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-VERSION:?([0-9.]*)?/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'version'\n      };\n      if (match[1]) {\n        event.version = parseInt(match[1], 10);\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-MEDIA-SEQUENCE:?(\\-?[0-9.]*)?/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'media-sequence'\n      };\n      if (match[1]) {\n        event.number = parseInt(match[1], 10);\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-DISCONTINUITY-SEQUENCE:?(\\-?[0-9.]*)?/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'discontinuity-sequence'\n      };\n      if (match[1]) {\n        event.number = parseInt(match[1], 10);\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-PLAYLIST-TYPE:?(.*)?$/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'playlist-type'\n      };\n      if (match[1]) {\n        event.playlistType = match[1];\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-BYTERANGE:?([0-9.]*)?@?([0-9.]*)?/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'byterange'\n      };\n      if (match[1]) {\n        event.length = parseInt(match[1], 10);\n      }\n      if (match[2]) {\n        event.offset = parseInt(match[2], 10);\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-ALLOW-CACHE:?(YES|NO)?/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'allow-cache'\n      };\n      if (match[1]) {\n        event.allowed = !/NO/.test(match[1]);\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-MAP:?(.*)$/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'map'\n      };\n\n      if (match[1]) {\n        var attributes = parseAttributes(match[1]);\n\n        if (attributes.URI) {\n          event.uri = attributes.URI;\n        }\n        if (attributes.BYTERANGE) {\n          var _attributes$BYTERANGE = attributes.BYTERANGE.split('@'),\n              length = _attributes$BYTERANGE[0],\n              offset = _attributes$BYTERANGE[1];\n\n          event.byterange = {};\n          if (length) {\n            event.byterange.length = parseInt(length, 10);\n          }\n          if (offset) {\n            event.byterange.offset = parseInt(offset, 10);\n          }\n        }\n      }\n\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-STREAM-INF:?(.*)$/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'stream-inf'\n      };\n      if (match[1]) {\n        event.attributes = parseAttributes(match[1]);\n\n        if (event.attributes.RESOLUTION) {\n          var split = event.attributes.RESOLUTION.split('x');\n          var resolution = {};\n\n          if (split[0]) {\n            resolution.width = parseInt(split[0], 10);\n          }\n          if (split[1]) {\n            resolution.height = parseInt(split[1], 10);\n          }\n          event.attributes.RESOLUTION = resolution;\n        }\n        if (event.attributes.BANDWIDTH) {\n          event.attributes.BANDWIDTH = parseInt(event.attributes.BANDWIDTH, 10);\n        }\n        if (event.attributes['PROGRAM-ID']) {\n          event.attributes['PROGRAM-ID'] = parseInt(event.attributes['PROGRAM-ID'], 10);\n        }\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-MEDIA:?(.*)$/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'media'\n      };\n      if (match[1]) {\n        event.attributes = parseAttributes(match[1]);\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-ENDLIST/.exec(line);\n    if (match) {\n      this.trigger('data', {\n        type: 'tag',\n        tagType: 'endlist'\n      });\n      return;\n    }\n    match = /^#EXT-X-DISCONTINUITY/.exec(line);\n    if (match) {\n      this.trigger('data', {\n        type: 'tag',\n        tagType: 'discontinuity'\n      });\n      return;\n    }\n    match = /^#EXT-X-PROGRAM-DATE-TIME:?(.*)$/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'program-date-time'\n      };\n      if (match[1]) {\n        event.dateTimeString = match[1];\n        event.dateTimeObject = new Date(match[1]);\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-KEY:?(.*)$/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'key'\n      };\n      if (match[1]) {\n        event.attributes = parseAttributes(match[1]);\n        // parse the IV string into a Uint32Array\n        if (event.attributes.IV) {\n          if (event.attributes.IV.substring(0, 2).toLowerCase() === '0x') {\n            event.attributes.IV = event.attributes.IV.substring(2);\n          }\n\n          event.attributes.IV = event.attributes.IV.match(/.{8}/g);\n          event.attributes.IV[0] = parseInt(event.attributes.IV[0], 16);\n          event.attributes.IV[1] = parseInt(event.attributes.IV[1], 16);\n          event.attributes.IV[2] = parseInt(event.attributes.IV[2], 16);\n          event.attributes.IV[3] = parseInt(event.attributes.IV[3], 16);\n          event.attributes.IV = new Uint32Array(event.attributes.IV);\n        }\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-START:?(.*)$/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'start'\n      };\n      if (match[1]) {\n        event.attributes = parseAttributes(match[1]);\n\n        event.attributes['TIME-OFFSET'] = parseFloat(event.attributes['TIME-OFFSET']);\n        event.attributes.PRECISE = /YES/.test(event.attributes.PRECISE);\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-CUE-OUT-CONT:?(.*)?$/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'cue-out-cont'\n      };\n      if (match[1]) {\n        event.data = match[1];\n      } else {\n        event.data = '';\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-CUE-OUT:?(.*)?$/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'cue-out'\n      };\n      if (match[1]) {\n        event.data = match[1];\n      } else {\n        event.data = '';\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-CUE-IN:?(.*)?$/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'cue-in'\n      };\n      if (match[1]) {\n        event.data = match[1];\n      } else {\n        event.data = '';\n      }\n      this.trigger('data', event);\n      return;\n    }\n\n    // unknown tag type\n    this.trigger('data', {\n      type: 'tag',\n      data: line.slice(4)\n    });\n  };\n\n  /**\n   * Add a parser for custom headers\n   *\n   * @param {Object}   options              a map of options for the added parser\n   * @param {RegExp}   options.expression   a regular expression to match the custom header\n   * @param {string}   options.customType   the custom type to register to the output\n   * @param {Function} [options.dataParser] function to parse the line into an object\n   * @param {boolean}  [options.segment]    should tag data be attached to the segment object\n   */\n\n\n  ParseStream.prototype.addParser = function addParser(_ref) {\n    var _this2 = this;\n\n    var expression = _ref.expression,\n        customType = _ref.customType,\n        dataParser = _ref.dataParser,\n        segment = _ref.segment;\n\n    if (typeof dataParser !== 'function') {\n      dataParser = function dataParser(line) {\n        return line;\n      };\n    }\n    this.customParsers.push(function (line) {\n      var match = expression.exec(line);\n\n      if (match) {\n        _this2.trigger('data', {\n          type: 'custom',\n          data: dataParser(line),\n          customType: customType,\n          segment: segment\n        });\n        return true;\n      }\n    });\n  };\n\n  return ParseStream;\n}(Stream);\n\n/**\n * @file m3u8/parser.js\n */\n/**\n * A parser for M3U8 files. The current interpretation of the input is\n * exposed as a property `manifest` on parser objects. It's just two lines to\n * create and parse a manifest once you have the contents available as a string:\n *\n * ```js\n * var parser = new m3u8.Parser();\n * parser.push(xhr.responseText);\n * ```\n *\n * New input can later be applied to update the manifest object by calling\n * `push` again.\n *\n * The parser attempts to create a usable manifest object even if the\n * underlying input is somewhat nonsensical. It emits `info` and `warning`\n * events during the parse if it encounters input that seems invalid or\n * requires some property of the manifest object to be defaulted.\n *\n * @class Parser\n * @extends Stream\n */\n\nvar Parser = function (_Stream) {\n  inherits(Parser, _Stream);\n\n  function Parser() {\n    classCallCheck(this, Parser);\n\n    var _this = possibleConstructorReturn(this, _Stream.call(this));\n\n    _this.lineStream = new LineStream();\n    _this.parseStream = new ParseStream();\n    _this.lineStream.pipe(_this.parseStream);\n\n    /* eslint-disable consistent-this */\n    var self = _this;\n    /* eslint-enable consistent-this */\n    var uris = [];\n    var currentUri = {};\n    // if specified, the active EXT-X-MAP definition\n    var currentMap = void 0;\n    // if specified, the active decryption key\n    var _key = void 0;\n    var noop = function noop() {};\n    var defaultMediaGroups = {\n      'AUDIO': {},\n      'VIDEO': {},\n      'CLOSED-CAPTIONS': {},\n      'SUBTITLES': {}\n    };\n    // group segments into numbered timelines delineated by discontinuities\n    var currentTimeline = 0;\n\n    // the manifest is empty until the parse stream begins delivering data\n    _this.manifest = {\n      allowCache: true,\n      discontinuityStarts: [],\n      segments: []\n    };\n\n    // update the manifest with the m3u8 entry from the parse stream\n    _this.parseStream.on('data', function (entry) {\n      var mediaGroup = void 0;\n      var rendition = void 0;\n\n      ({\n        tag: function tag() {\n          // switch based on the tag type\n          (({\n            'allow-cache': function allowCache() {\n              this.manifest.allowCache = entry.allowed;\n              if (!('allowed' in entry)) {\n                this.trigger('info', {\n                  message: 'defaulting allowCache to YES'\n                });\n                this.manifest.allowCache = true;\n              }\n            },\n            byterange: function byterange() {\n              var byterange = {};\n\n              if ('length' in entry) {\n                currentUri.byterange = byterange;\n                byterange.length = entry.length;\n\n                if (!('offset' in entry)) {\n                  this.trigger('info', {\n                    message: 'defaulting offset to zero'\n                  });\n                  entry.offset = 0;\n                }\n              }\n              if ('offset' in entry) {\n                currentUri.byterange = byterange;\n                byterange.offset = entry.offset;\n              }\n            },\n            endlist: function endlist() {\n              this.manifest.endList = true;\n            },\n            inf: function inf() {\n              if (!('mediaSequence' in this.manifest)) {\n                this.manifest.mediaSequence = 0;\n                this.trigger('info', {\n                  message: 'defaulting media sequence to zero'\n                });\n              }\n              if (!('discontinuitySequence' in this.manifest)) {\n                this.manifest.discontinuitySequence = 0;\n                this.trigger('info', {\n                  message: 'defaulting discontinuity sequence to zero'\n                });\n              }\n              if (entry.duration > 0) {\n                currentUri.duration = entry.duration;\n              }\n\n              if (entry.duration === 0) {\n                currentUri.duration = 0.01;\n                this.trigger('info', {\n                  message: 'updating zero segment duration to a small value'\n                });\n              }\n\n              this.manifest.segments = uris;\n            },\n            key: function key() {\n              if (!entry.attributes) {\n                this.trigger('warn', {\n                  message: 'ignoring key declaration without attribute list'\n                });\n                return;\n              }\n              // clear the active encryption key\n              if (entry.attributes.METHOD === 'NONE') {\n                _key = null;\n                return;\n              }\n              if (!entry.attributes.URI) {\n                this.trigger('warn', {\n                  message: 'ignoring key declaration without URI'\n                });\n                return;\n              }\n              if (!entry.attributes.METHOD) {\n                this.trigger('warn', {\n                  message: 'defaulting key method to AES-128'\n                });\n              }\n\n              // setup an encryption key for upcoming segments\n              _key = {\n                method: entry.attributes.METHOD || 'AES-128',\n                uri: entry.attributes.URI\n              };\n\n              if (typeof entry.attributes.IV !== 'undefined') {\n                _key.iv = entry.attributes.IV;\n              }\n            },\n            'media-sequence': function mediaSequence() {\n              if (!isFinite(entry.number)) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid media sequence: ' + entry.number\n                });\n                return;\n              }\n              this.manifest.mediaSequence = entry.number;\n            },\n            'discontinuity-sequence': function discontinuitySequence() {\n              if (!isFinite(entry.number)) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid discontinuity sequence: ' + entry.number\n                });\n                return;\n              }\n              this.manifest.discontinuitySequence = entry.number;\n              currentTimeline = entry.number;\n            },\n            'playlist-type': function playlistType() {\n              if (!/VOD|EVENT/.test(entry.playlistType)) {\n                this.trigger('warn', {\n                  message: 'ignoring unknown playlist type: ' + entry.playlist\n                });\n                return;\n              }\n              this.manifest.playlistType = entry.playlistType;\n            },\n            map: function map() {\n              currentMap = {};\n              if (entry.uri) {\n                currentMap.uri = entry.uri;\n              }\n              if (entry.byterange) {\n                currentMap.byterange = entry.byterange;\n              }\n            },\n            'stream-inf': function streamInf() {\n              this.manifest.playlists = uris;\n              this.manifest.mediaGroups = this.manifest.mediaGroups || defaultMediaGroups;\n\n              if (!entry.attributes) {\n                this.trigger('warn', {\n                  message: 'ignoring empty stream-inf attributes'\n                });\n                return;\n              }\n\n              if (!currentUri.attributes) {\n                currentUri.attributes = {};\n              }\n              _extends(currentUri.attributes, entry.attributes);\n            },\n            media: function media() {\n              this.manifest.mediaGroups = this.manifest.mediaGroups || defaultMediaGroups;\n\n              if (!(entry.attributes && entry.attributes.TYPE && entry.attributes['GROUP-ID'] && entry.attributes.NAME)) {\n                this.trigger('warn', {\n                  message: 'ignoring incomplete or missing media group'\n                });\n                return;\n              }\n\n              // find the media group, creating defaults as necessary\n              var mediaGroupType = this.manifest.mediaGroups[entry.attributes.TYPE];\n\n              mediaGroupType[entry.attributes['GROUP-ID']] = mediaGroupType[entry.attributes['GROUP-ID']] || {};\n              mediaGroup = mediaGroupType[entry.attributes['GROUP-ID']];\n\n              // collect the rendition metadata\n              rendition = {\n                'default': /yes/i.test(entry.attributes.DEFAULT)\n              };\n              if (rendition['default']) {\n                rendition.autoselect = true;\n              } else {\n                rendition.autoselect = /yes/i.test(entry.attributes.AUTOSELECT);\n              }\n              if (entry.attributes.LANGUAGE) {\n                rendition.language = entry.attributes.LANGUAGE;\n              }\n              if (entry.attributes.URI) {\n                rendition.uri = entry.attributes.URI;\n              }\n              if (entry.attributes['INSTREAM-ID']) {\n                rendition.instreamId = entry.attributes['INSTREAM-ID'];\n              }\n              if (entry.attributes.CHARACTERISTICS) {\n                rendition.characteristics = entry.attributes.CHARACTERISTICS;\n              }\n              if (entry.attributes.FORCED) {\n                rendition.forced = /yes/i.test(entry.attributes.FORCED);\n              }\n\n              // insert the new rendition\n              mediaGroup[entry.attributes.NAME] = rendition;\n            },\n            discontinuity: function discontinuity() {\n              currentTimeline += 1;\n              currentUri.discontinuity = true;\n              this.manifest.discontinuityStarts.push(uris.length);\n            },\n            'program-date-time': function programDateTime() {\n              if (typeof this.manifest.dateTimeString === 'undefined') {\n                // PROGRAM-DATE-TIME is a media-segment tag, but for backwards\n                // compatibility, we add the first occurence of the PROGRAM-DATE-TIME tag\n                // to the manifest object\n                // TODO: Consider removing this in future major version\n                this.manifest.dateTimeString = entry.dateTimeString;\n                this.manifest.dateTimeObject = entry.dateTimeObject;\n              }\n\n              currentUri.dateTimeString = entry.dateTimeString;\n              currentUri.dateTimeObject = entry.dateTimeObject;\n            },\n            targetduration: function targetduration() {\n              if (!isFinite(entry.duration) || entry.duration < 0) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid target duration: ' + entry.duration\n                });\n                return;\n              }\n              this.manifest.targetDuration = entry.duration;\n            },\n            totalduration: function totalduration() {\n              if (!isFinite(entry.duration) || entry.duration < 0) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid total duration: ' + entry.duration\n                });\n                return;\n              }\n              this.manifest.totalDuration = entry.duration;\n            },\n            start: function start() {\n              if (!entry.attributes || isNaN(entry.attributes['TIME-OFFSET'])) {\n                this.trigger('warn', {\n                  message: 'ignoring start declaration without appropriate attribute list'\n                });\n                return;\n              }\n              this.manifest.start = {\n                timeOffset: entry.attributes['TIME-OFFSET'],\n                precise: entry.attributes.PRECISE\n              };\n            },\n            'cue-out': function cueOut() {\n              currentUri.cueOut = entry.data;\n            },\n            'cue-out-cont': function cueOutCont() {\n              currentUri.cueOutCont = entry.data;\n            },\n            'cue-in': function cueIn() {\n              currentUri.cueIn = entry.data;\n            }\n          })[entry.tagType] || noop).call(self);\n        },\n        uri: function uri() {\n          currentUri.uri = entry.uri;\n          uris.push(currentUri);\n\n          // if no explicit duration was declared, use the target duration\n          if (this.manifest.targetDuration && !('duration' in currentUri)) {\n            this.trigger('warn', {\n              message: 'defaulting segment duration to the target duration'\n            });\n            currentUri.duration = this.manifest.targetDuration;\n          }\n          // annotate with encryption information, if necessary\n          if (_key) {\n            currentUri.key = _key;\n          }\n          currentUri.timeline = currentTimeline;\n          // annotate with initialization segment information, if necessary\n          if (currentMap) {\n            currentUri.map = currentMap;\n          }\n\n          // prepare for the next URI\n          currentUri = {};\n        },\n        comment: function comment() {\n          // comments are not important for playback\n        },\n        custom: function custom() {\n          // if this is segment-level data attach the output to the segment\n          if (entry.segment) {\n            currentUri.custom = currentUri.custom || {};\n            currentUri.custom[entry.customType] = entry.data;\n            // if this is manifest-level data attach to the top level manifest object\n          } else {\n            this.manifest.custom = this.manifest.custom || {};\n            this.manifest.custom[entry.customType] = entry.data;\n          }\n        }\n      })[entry.type].call(self);\n    });\n    return _this;\n  }\n\n  /**\n   * Parse the input string and update the manifest object.\n   *\n   * @param {String} chunk a potentially incomplete portion of the manifest\n   */\n\n\n  Parser.prototype.push = function push(chunk) {\n    this.lineStream.push(chunk);\n  };\n\n  /**\n   * Flush any remaining input. This can be handy if the last line of an M3U8\n   * manifest did not contain a trailing newline but the file has been\n   * completely received.\n   */\n\n\n  Parser.prototype.end = function end() {\n    // flush any buffered input\n    this.lineStream.push('\\n');\n  };\n  /**\n   * Add an additional parser for non-standard tags\n   *\n   * @param {Object}   options              a map of options for the added parser\n   * @param {RegExp}   options.expression   a regular expression to match the custom header\n   * @param {string}   options.type         the type to register to the output\n   * @param {Function} [options.dataParser] function to parse the line into an object\n   * @param {boolean}  [options.segment]    should tag data be attached to the segment object\n   */\n\n\n  Parser.prototype.addParser = function addParser(options) {\n    this.parseStream.addParser(options);\n  };\n\n  return Parser;\n}(Stream);\n\n/**\n * @file m3u8/index.js\n *\n * Utilities for parsing M3U8 files. If the entire manifest is available,\n * `Parser` will create an object representation with enough detail for managing\n * playback. `ParseStream` and `LineStream` are lower-level parsing primitives\n * that do not assume the entirety of the manifest is ready and expose a\n * ReadableStream-like interface.\n */\n\nexport { LineStream, ParseStream, Parser };\n","/**\n * mpd-parser\n * @version 0.6.1\n * @copyright 2018 Brightcove, Inc\n * @license Apache-2.0\n */\nimport URLToolkit from 'url-toolkit';\nimport window from 'global/window';\n\nvar version = \"0.6.1\";\n\nvar formatAudioPlaylist = function formatAudioPlaylist(_ref) {\n  var _attributes;\n\n  var attributes = _ref.attributes,\n      segments = _ref.segments;\n\n  var playlist = {\n    attributes: (_attributes = {\n      NAME: attributes.id,\n      BANDWIDTH: attributes.bandwidth,\n      CODECS: attributes.codecs\n    }, _attributes['PROGRAM-ID'] = 1, _attributes),\n    uri: '',\n    endList: (attributes.type || 'static') === 'static',\n    timeline: attributes.periodIndex,\n    resolvedUri: '',\n    targetDuration: attributes.duration,\n    segments: segments,\n    mediaSequence: segments.length ? segments[0].number : 1\n  };\n\n  if (attributes.contentProtection) {\n    playlist.contentProtection = attributes.contentProtection;\n  }\n\n  return playlist;\n};\n\nvar formatVttPlaylist = function formatVttPlaylist(_ref2) {\n  var _attributes2;\n\n  var attributes = _ref2.attributes,\n      segments = _ref2.segments;\n\n  if (typeof segments === 'undefined') {\n    // vtt tracks may use single file in BaseURL\n    segments = [{\n      uri: attributes.baseUrl,\n      timeline: attributes.periodIndex,\n      resolvedUri: attributes.baseUrl || '',\n      duration: attributes.sourceDuration,\n      number: 0\n    }];\n    // targetDuration should be the same duration as the only segment\n    attributes.duration = attributes.sourceDuration;\n  }\n  return {\n    attributes: (_attributes2 = {\n      NAME: attributes.id,\n      BANDWIDTH: attributes.bandwidth\n    }, _attributes2['PROGRAM-ID'] = 1, _attributes2),\n    uri: '',\n    endList: (attributes.type || 'static') === 'static',\n    timeline: attributes.periodIndex,\n    resolvedUri: attributes.baseUrl || '',\n    targetDuration: attributes.duration,\n    segments: segments,\n    mediaSequence: segments.length ? segments[0].number : 1\n  };\n};\n\nvar organizeAudioPlaylists = function organizeAudioPlaylists(playlists) {\n  return playlists.reduce(function (a, playlist) {\n    var role = playlist.attributes.role && playlist.attributes.role.value || 'main';\n    var language = playlist.attributes.lang || '';\n\n    var label = 'main';\n\n    if (language) {\n      label = playlist.attributes.lang + ' (' + role + ')';\n    }\n\n    // skip if we already have the highest quality audio for a language\n    if (a[label] && a[label].playlists[0].attributes.BANDWIDTH > playlist.attributes.bandwidth) {\n      return a;\n    }\n\n    a[label] = {\n      language: language,\n      autoselect: true,\n      'default': role === 'main',\n      playlists: [formatAudioPlaylist(playlist)],\n      uri: ''\n    };\n\n    return a;\n  }, {});\n};\n\nvar organizeVttPlaylists = function organizeVttPlaylists(playlists) {\n  return playlists.reduce(function (a, playlist) {\n    var label = playlist.attributes.lang || 'text';\n\n    // skip if we already have subtitles\n    if (a[label]) {\n      return a;\n    }\n\n    a[label] = {\n      language: label,\n      'default': false,\n      autoselect: false,\n      playlists: [formatVttPlaylist(playlist)],\n      uri: ''\n    };\n\n    return a;\n  }, {});\n};\n\nvar formatVideoPlaylist = function formatVideoPlaylist(_ref3) {\n  var _attributes3;\n\n  var attributes = _ref3.attributes,\n      segments = _ref3.segments;\n\n  var playlist = {\n    attributes: (_attributes3 = {\n      NAME: attributes.id,\n      AUDIO: 'audio',\n      SUBTITLES: 'subs',\n      RESOLUTION: {\n        width: attributes.width,\n        height: attributes.height\n      },\n      CODECS: attributes.codecs,\n      BANDWIDTH: attributes.bandwidth\n    }, _attributes3['PROGRAM-ID'] = 1, _attributes3),\n    uri: '',\n    endList: (attributes.type || 'static') === 'static',\n    timeline: attributes.periodIndex,\n    resolvedUri: '',\n    targetDuration: attributes.duration,\n    segments: segments,\n    mediaSequence: segments.length ? segments[0].number : 1\n  };\n\n  if (attributes.contentProtection) {\n    playlist.contentProtection = attributes.contentProtection;\n  }\n\n  return playlist;\n};\n\nvar toM3u8 = function toM3u8(dashPlaylists) {\n  var _mediaGroups;\n\n  if (!dashPlaylists.length) {\n    return {};\n  }\n\n  // grab all master attributes\n  var _dashPlaylists$0$attr = dashPlaylists[0].attributes,\n      duration = _dashPlaylists$0$attr.sourceDuration,\n      _dashPlaylists$0$attr2 = _dashPlaylists$0$attr.minimumUpdatePeriod,\n      minimumUpdatePeriod = _dashPlaylists$0$attr2 === undefined ? 0 : _dashPlaylists$0$attr2;\n\n\n  var videoOnly = function videoOnly(_ref4) {\n    var attributes = _ref4.attributes;\n    return attributes.mimeType === 'video/mp4' || attributes.contentType === 'video';\n  };\n  var audioOnly = function audioOnly(_ref5) {\n    var attributes = _ref5.attributes;\n    return attributes.mimeType === 'audio/mp4' || attributes.contentType === 'audio';\n  };\n  var vttOnly = function vttOnly(_ref6) {\n    var attributes = _ref6.attributes;\n    return attributes.mimeType === 'text/vtt' || attributes.contentType === 'text';\n  };\n\n  var videoPlaylists = dashPlaylists.filter(videoOnly).map(formatVideoPlaylist);\n  var audioPlaylists = dashPlaylists.filter(audioOnly);\n  var vttPlaylists = dashPlaylists.filter(vttOnly);\n\n  var master = {\n    allowCache: true,\n    discontinuityStarts: [],\n    segments: [],\n    endList: true,\n    mediaGroups: (_mediaGroups = {\n      AUDIO: {},\n      VIDEO: {}\n    }, _mediaGroups['CLOSED-CAPTIONS'] = {}, _mediaGroups.SUBTITLES = {}, _mediaGroups),\n    uri: '',\n    duration: duration,\n    playlists: videoPlaylists,\n    minimumUpdatePeriod: minimumUpdatePeriod * 1000\n  };\n\n  if (audioPlaylists.length) {\n    master.mediaGroups.AUDIO.audio = organizeAudioPlaylists(audioPlaylists);\n  }\n\n  if (vttPlaylists.length) {\n    master.mediaGroups.SUBTITLES.subs = organizeVttPlaylists(vttPlaylists);\n  }\n\n  return master;\n};\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar isObject = function isObject(obj) {\n  return !!obj && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object';\n};\n\nvar merge = function merge() {\n  for (var _len = arguments.length, objects = Array(_len), _key = 0; _key < _len; _key++) {\n    objects[_key] = arguments[_key];\n  }\n\n  return objects.reduce(function (result, source) {\n\n    Object.keys(source).forEach(function (key) {\n\n      if (Array.isArray(result[key]) && Array.isArray(source[key])) {\n        result[key] = result[key].concat(source[key]);\n      } else if (isObject(result[key]) && isObject(source[key])) {\n        result[key] = merge(result[key], source[key]);\n      } else {\n        result[key] = source[key];\n      }\n    });\n    return result;\n  }, {});\n};\n\nvar resolveUrl = function resolveUrl(baseUrl, relativeUrl) {\n  // return early if we don't need to resolve\n  if (/^[a-z]+:/i.test(relativeUrl)) {\n    return relativeUrl;\n  }\n\n  // if the base URL is relative then combine with the current location\n  if (!/\\/\\//i.test(baseUrl)) {\n    baseUrl = URLToolkit.buildAbsoluteURL(window.location.href, baseUrl);\n  }\n\n  return URLToolkit.buildAbsoluteURL(baseUrl, relativeUrl);\n};\n\n/**\n * @typedef {Object} SingleUri\n * @property {string} uri - relative location of segment\n * @property {string} resolvedUri - resolved location of segment\n * @property {Object} byterange - Object containing information on how to make byte range\n *   requests following byte-range-spec per RFC2616.\n * @property {String} byterange.length - length of range request\n * @property {String} byterange.offset - byte offset of range request\n *\n * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.1\n */\n\n/**\n * Converts a URLType node (5.3.9.2.3 Table 13) to a segment object\n * that conforms to how m3u8-parser is structured\n *\n * @see https://github.com/videojs/m3u8-parser\n *\n * @param {string} baseUrl - baseUrl provided by <BaseUrl> nodes\n * @param {string} source - source url for segment\n * @param {string} range - optional range used for range calls, follows\n * @return {SingleUri} full segment information transformed into a format similar\n *   to m3u8-parser\n */\nvar urlTypeToSegment = function urlTypeToSegment(_ref) {\n  var _ref$baseUrl = _ref.baseUrl,\n      baseUrl = _ref$baseUrl === undefined ? '' : _ref$baseUrl,\n      _ref$source = _ref.source,\n      source = _ref$source === undefined ? '' : _ref$source,\n      _ref$range = _ref.range,\n      range = _ref$range === undefined ? '' : _ref$range;\n\n  var init = {\n    uri: source,\n    resolvedUri: resolveUrl(baseUrl || '', source)\n  };\n\n  if (range) {\n    var ranges = range.split('-');\n    var startRange = parseInt(ranges[0], 10);\n    var endRange = parseInt(ranges[1], 10);\n\n    init.byterange = {\n      length: endRange - startRange,\n      offset: startRange\n    };\n  }\n\n  return init;\n};\n\n/**\n * Calculates the R (repetition) value for a live stream (for the final segment\n * in a manifest where the r value is negative 1)\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {number} time\n *        current time (typically the total time up until the final segment)\n * @param {number} duration\n *        duration property for the given <S />\n *\n * @return {number}\n *        R value to reach the end of the given period\n */\nvar getLiveRValue = function getLiveRValue(attributes, time, duration) {\n  var NOW = attributes.NOW,\n      clientOffset = attributes.clientOffset,\n      availabilityStartTime = attributes.availabilityStartTime,\n      _attributes$timescale = attributes.timescale,\n      timescale = _attributes$timescale === undefined ? 1 : _attributes$timescale,\n      _attributes$start = attributes.start,\n      start = _attributes$start === undefined ? 0 : _attributes$start,\n      _attributes$minimumUp = attributes.minimumUpdatePeriod,\n      minimumUpdatePeriod = _attributes$minimumUp === undefined ? 0 : _attributes$minimumUp;\n\n  var now = (NOW + clientOffset) / 1000;\n  var periodStartWC = availabilityStartTime + start;\n  var periodEndWC = now + minimumUpdatePeriod;\n  var periodDuration = periodEndWC - periodStartWC;\n\n  return Math.ceil((periodDuration * timescale - time) / duration);\n};\n\n/**\n * Uses information provided by SegmentTemplate.SegmentTimeline to determine segment\n * timing and duration\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */\nvar parseByTimeline = function parseByTimeline(attributes, segmentTimeline) {\n  var _attributes$type = attributes.type,\n      type = _attributes$type === undefined ? 'static' : _attributes$type,\n      _attributes$minimumUp2 = attributes.minimumUpdatePeriod,\n      minimumUpdatePeriod = _attributes$minimumUp2 === undefined ? 0 : _attributes$minimumUp2,\n      _attributes$media = attributes.media,\n      media = _attributes$media === undefined ? '' : _attributes$media,\n      sourceDuration = attributes.sourceDuration,\n      _attributes$timescale2 = attributes.timescale,\n      timescale = _attributes$timescale2 === undefined ? 1 : _attributes$timescale2,\n      _attributes$startNumb = attributes.startNumber,\n      startNumber = _attributes$startNumb === undefined ? 1 : _attributes$startNumb,\n      timeline = attributes.periodIndex;\n\n  var segments = [];\n  var time = -1;\n\n  for (var sIndex = 0; sIndex < segmentTimeline.length; sIndex++) {\n    var S = segmentTimeline[sIndex];\n    var duration = S.d;\n    var repeat = S.r || 0;\n    var segmentTime = S.t || 0;\n\n    if (time < 0) {\n      // first segment\n      time = segmentTime;\n    }\n\n    if (segmentTime && segmentTime > time) {\n      // discontinuity\n\n      // TODO: How to handle this type of discontinuity\n      // timeline++ here would treat it like HLS discontuity and content would\n      // get appended without gap\n      // E.G.\n      //  <S t=\"0\" d=\"1\" />\n      //  <S d=\"1\" />\n      //  <S d=\"1\" />\n      //  <S t=\"5\" d=\"1\" />\n      // would have $Time$ values of [0, 1, 2, 5]\n      // should this be appened at time positions [0, 1, 2, 3],(#EXT-X-DISCONTINUITY)\n      // or [0, 1, 2, gap, gap, 5]? (#EXT-X-GAP)\n      // does the value of sourceDuration consider this when calculating arbitrary\n      // negative @r repeat value?\n      // E.G. Same elements as above with this added at the end\n      //  <S d=\"1\" r=\"-1\" />\n      //  with a sourceDuration of 10\n      // Would the 2 gaps be included in the time duration calculations resulting in\n      // 8 segments with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9] or 10 segments\n      // with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9, 10, 11] ?\n\n      time = segmentTime;\n    }\n\n    var count = void 0;\n\n    if (repeat < 0) {\n      var nextS = sIndex + 1;\n\n      if (nextS === segmentTimeline.length) {\n        // last segment\n        if (type === 'dynamic' && minimumUpdatePeriod > 0 && media.indexOf('$Number$') > 0) {\n          count = getLiveRValue(attributes, time, duration);\n        } else {\n          // TODO: This may be incorrect depending on conclusion of TODO above\n          count = (sourceDuration * timescale - time) / duration;\n        }\n      } else {\n        count = (segmentTimeline[nextS].t - time) / duration;\n      }\n    } else {\n      count = repeat + 1;\n    }\n\n    var end = startNumber + segments.length + count;\n    var number = startNumber + segments.length;\n\n    while (number < end) {\n      segments.push({ number: number, duration: duration / timescale, time: time, timeline: timeline });\n      time += duration;\n      number++;\n    }\n  }\n\n  return segments;\n};\n\nvar range = function range(start, end) {\n  var result = [];\n\n  for (var i = start; i < end; i++) {\n    result.push(i);\n  }\n\n  return result;\n};\n\nvar flatten = function flatten(lists) {\n  return lists.reduce(function (x, y) {\n    return x.concat(y);\n  }, []);\n};\n\nvar from = function from(list) {\n  if (!list.length) {\n    return [];\n  }\n\n  var result = [];\n\n  for (var i = 0; i < list.length; i++) {\n    result.push(list[i]);\n  }\n\n  return result;\n};\n\n/**\n * Functions for calculating the range of available segments in static and dynamic\n * manifests.\n */\nvar segmentRange = {\n  /**\n   * Returns the entire range of available segments for a static MPD\n   *\n   * @param {Object} attributes\n   *        Inheritied MPD attributes\n   * @return {{ start: number, end: number }}\n   *         The start and end numbers for available segments\n   */\n  'static': function _static(attributes) {\n    var duration = attributes.duration,\n        _attributes$timescale = attributes.timescale,\n        timescale = _attributes$timescale === undefined ? 1 : _attributes$timescale,\n        sourceDuration = attributes.sourceDuration;\n\n\n    return {\n      start: 0,\n      end: Math.ceil(sourceDuration / (duration / timescale))\n    };\n  },\n\n\n  /**\n   * Returns the current live window range of available segments for a dynamic MPD\n   *\n   * @param {Object} attributes\n   *        Inheritied MPD attributes\n   * @return {{ start: number, end: number }}\n   *         The start and end numbers for available segments\n   */\n  dynamic: function dynamic(attributes) {\n    var NOW = attributes.NOW,\n        clientOffset = attributes.clientOffset,\n        availabilityStartTime = attributes.availabilityStartTime,\n        _attributes$timescale2 = attributes.timescale,\n        timescale = _attributes$timescale2 === undefined ? 1 : _attributes$timescale2,\n        duration = attributes.duration,\n        _attributes$start = attributes.start,\n        start = _attributes$start === undefined ? 0 : _attributes$start,\n        _attributes$minimumUp = attributes.minimumUpdatePeriod,\n        minimumUpdatePeriod = _attributes$minimumUp === undefined ? 0 : _attributes$minimumUp,\n        _attributes$timeShift = attributes.timeShiftBufferDepth,\n        timeShiftBufferDepth = _attributes$timeShift === undefined ? Infinity : _attributes$timeShift;\n\n    var now = (NOW + clientOffset) / 1000;\n    var periodStartWC = availabilityStartTime + start;\n    var periodEndWC = now + minimumUpdatePeriod;\n    var periodDuration = periodEndWC - periodStartWC;\n    var segmentCount = Math.ceil(periodDuration * timescale / duration);\n    var availableStart = Math.floor((now - periodStartWC - timeShiftBufferDepth) * timescale / duration);\n    var availableEnd = Math.floor((now - periodStartWC) * timescale / duration);\n\n    return {\n      start: Math.max(0, availableStart),\n      end: Math.min(segmentCount, availableEnd)\n    };\n  }\n};\n\n/**\n * Maps a range of numbers to objects with information needed to build the corresponding\n * segment list\n *\n * @name toSegmentsCallback\n * @function\n * @param {number} number\n *        Number of the segment\n * @param {number} index\n *        Index of the number in the range list\n * @return {{ number: Number, duration: Number, timeline: Number, time: Number }}\n *         Object with segment timing and duration info\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping a range of numbers to\n * information needed to build the segment list.\n *\n * @param {Object} attributes\n *        Inherited MPD attributes\n * @return {toSegmentsCallback}\n *         Callback map function\n */\nvar toSegments = function toSegments(attributes) {\n  return function (number, index) {\n    var duration = attributes.duration,\n        _attributes$timescale3 = attributes.timescale,\n        timescale = _attributes$timescale3 === undefined ? 1 : _attributes$timescale3,\n        periodIndex = attributes.periodIndex,\n        _attributes$startNumb = attributes.startNumber,\n        startNumber = _attributes$startNumb === undefined ? 1 : _attributes$startNumb;\n\n\n    return {\n      number: startNumber + number,\n      duration: duration / timescale,\n      timeline: periodIndex,\n      time: index * duration\n    };\n  };\n};\n\n/**\n * Returns a list of objects containing segment timing and duration info used for\n * building the list of segments. This uses the @duration attribute specified\n * in the MPD manifest to derive the range of segments.\n *\n * @param {Object} attributes\n *        Inherited MPD attributes\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */\nvar parseByDuration = function parseByDuration(attributes) {\n  var _attributes$type = attributes.type,\n      type = _attributes$type === undefined ? 'static' : _attributes$type,\n      duration = attributes.duration,\n      _attributes$timescale4 = attributes.timescale,\n      timescale = _attributes$timescale4 === undefined ? 1 : _attributes$timescale4,\n      sourceDuration = attributes.sourceDuration;\n\n  var _segmentRange$type = segmentRange[type](attributes),\n      start = _segmentRange$type.start,\n      end = _segmentRange$type.end;\n\n  var segments = range(start, end).map(toSegments(attributes));\n\n  if (type === 'static') {\n    var index = segments.length - 1;\n\n    // final segment may be less than full segment duration\n    segments[index].duration = sourceDuration - duration / timescale * index;\n  }\n\n  return segments;\n};\n\nvar identifierPattern = /\\$([A-z]*)(?:(%0)([0-9]+)d)?\\$/g;\n\n/**\n * Replaces template identifiers with corresponding values. To be used as the callback\n * for String.prototype.replace\n *\n * @name replaceCallback\n * @function\n * @param {string} match\n *        Entire match of identifier\n * @param {string} identifier\n *        Name of matched identifier\n * @param {string} format\n *        Format tag string. Its presence indicates that padding is expected\n * @param {string} width\n *        Desired length of the replaced value. Values less than this width shall be left\n *        zero padded\n * @return {string}\n *         Replacement for the matched identifier\n */\n\n/**\n * Returns a function to be used as a callback for String.prototype.replace to replace\n * template identifiers\n *\n * @param {Obect} values\n *        Object containing values that shall be used to replace known identifiers\n * @param {number} values.RepresentationID\n *        Value of the Representation@id attribute\n * @param {number} values.Number\n *        Number of the corresponding segment\n * @param {number} values.Bandwidth\n *        Value of the Representation@bandwidth attribute.\n * @param {number} values.Time\n *        Timestamp value of the corresponding segment\n * @return {replaceCallback}\n *         Callback to be used with String.prototype.replace to replace identifiers\n */\nvar identifierReplacement = function identifierReplacement(values) {\n  return function (match, identifier, format, width) {\n    if (match === '$$') {\n      // escape sequence\n      return '$';\n    }\n\n    if (typeof values[identifier] === 'undefined') {\n      return match;\n    }\n\n    var value = '' + values[identifier];\n\n    if (identifier === 'RepresentationID') {\n      // Format tag shall not be present with RepresentationID\n      return value;\n    }\n\n    if (!format) {\n      width = 1;\n    } else {\n      width = parseInt(width, 10);\n    }\n\n    if (value.length >= width) {\n      return value;\n    }\n\n    return '' + new Array(width - value.length + 1).join('0') + value;\n  };\n};\n\n/**\n * Constructs a segment url from a template string\n *\n * @param {string} url\n *        Template string to construct url from\n * @param {Obect} values\n *        Object containing values that shall be used to replace known identifiers\n * @param {number} values.RepresentationID\n *        Value of the Representation@id attribute\n * @param {number} values.Number\n *        Number of the corresponding segment\n * @param {number} values.Bandwidth\n *        Value of the Representation@bandwidth attribute.\n * @param {number} values.Time\n *        Timestamp value of the corresponding segment\n * @return {string}\n *         Segment url with identifiers replaced\n */\nvar constructTemplateUrl = function constructTemplateUrl(url, values) {\n  return url.replace(identifierPattern, identifierReplacement(values));\n};\n\n/**\n * Generates a list of objects containing timing and duration information about each\n * segment needed to generate segment uris and the complete segment object\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */\nvar parseTemplateInfo = function parseTemplateInfo(attributes, segmentTimeline) {\n  if (!attributes.duration && !segmentTimeline) {\n    // if neither @duration or SegmentTimeline are present, then there shall be exactly\n    // one media segment\n    return [{\n      number: attributes.startNumber || 1,\n      duration: attributes.sourceDuration,\n      time: 0,\n      timeline: attributes.periodIndex\n    }];\n  }\n\n  if (attributes.duration) {\n    return parseByDuration(attributes);\n  }\n\n  return parseByTimeline(attributes, segmentTimeline);\n};\n\n/**\n * Generates a list of segments using information provided by the SegmentTemplate element\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {Object[]}\n *         List of segment objects\n */\nvar segmentsFromTemplate = function segmentsFromTemplate(attributes, segmentTimeline) {\n  var templateValues = {\n    RepresentationID: attributes.id,\n    Bandwidth: attributes.bandwidth || 0\n  };\n\n  var _attributes$initializ = attributes.initialization,\n      initialization = _attributes$initializ === undefined ? { sourceURL: '', range: '' } : _attributes$initializ;\n\n\n  var mapSegment = urlTypeToSegment({\n    baseUrl: attributes.baseUrl,\n    source: constructTemplateUrl(initialization.sourceURL, templateValues),\n    range: initialization.range\n  });\n\n  var segments = parseTemplateInfo(attributes, segmentTimeline);\n\n  return segments.map(function (segment) {\n    templateValues.Number = segment.number;\n    templateValues.Time = segment.time;\n\n    var uri = constructTemplateUrl(attributes.media || '', templateValues);\n\n    return {\n      uri: uri,\n      timeline: segment.timeline,\n      duration: segment.duration,\n      resolvedUri: resolveUrl(attributes.baseUrl || '', uri),\n      map: mapSegment,\n      number: segment.number\n    };\n  });\n};\n\nvar errors = {\n  INVALID_NUMBER_OF_PERIOD: 'INVALID_NUMBER_OF_PERIOD',\n  DASH_EMPTY_MANIFEST: 'DASH_EMPTY_MANIFEST',\n  DASH_INVALID_XML: 'DASH_INVALID_XML',\n  NO_BASE_URL: 'NO_BASE_URL',\n  MISSING_SEGMENT_INFORMATION: 'MISSING_SEGMENT_INFORMATION',\n  SEGMENT_TIME_UNSPECIFIED: 'SEGMENT_TIME_UNSPECIFIED',\n  UNSUPPORTED_UTC_TIMING_SCHEME: 'UNSUPPORTED_UTC_TIMING_SCHEME'\n};\n\n/**\n * Converts a <SegmentUrl> (of type URLType from the DASH spec 5.3.9.2 Table 14)\n * to an object that matches the output of a segment in videojs/mpd-parser\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @param {Object} segmentUrl\n *   <SegmentURL> node to translate into a segment object\n * @return {Object} translated segment object\n */\nvar SegmentURLToSegmentObject = function SegmentURLToSegmentObject(attributes, segmentUrl) {\n  var baseUrl = attributes.baseUrl,\n      _attributes$initializ = attributes.initialization,\n      initialization = _attributes$initializ === undefined ? {} : _attributes$initializ;\n\n\n  var initSegment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: initialization.sourceURL,\n    range: initialization.range\n  });\n\n  var segment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: segmentUrl.media,\n    range: segmentUrl.mediaRange\n  });\n\n  segment.map = initSegment;\n\n  return segment;\n};\n\n/**\n * Generates a list of segments using information provided by the SegmentList element\n * SegmentList (DASH SPEC Section 5.3.9.3.2) contains a set of <SegmentURL> nodes.  Each\n * node should be translated into segment.\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {Object.<Array>} list of segments\n */\nvar segmentsFromList = function segmentsFromList(attributes, segmentTimeline) {\n  var duration = attributes.duration,\n      _attributes$segmentUr = attributes.segmentUrls,\n      segmentUrls = _attributes$segmentUr === undefined ? [] : _attributes$segmentUr;\n\n  // Per spec (5.3.9.2.1) no way to determine segment duration OR\n  // if both SegmentTimeline and @duration are defined, it is outside of spec.\n\n  if (!duration && !segmentTimeline || duration && segmentTimeline) {\n    throw new Error(errors.SEGMENT_TIME_UNSPECIFIED);\n  }\n\n  var segmentUrlMap = segmentUrls.map(function (segmentUrlObject) {\n    return SegmentURLToSegmentObject(attributes, segmentUrlObject);\n  });\n  var segmentTimeInfo = void 0;\n\n  if (duration) {\n    segmentTimeInfo = parseByDuration(attributes);\n  }\n\n  if (segmentTimeline) {\n    segmentTimeInfo = parseByTimeline(attributes, segmentTimeline);\n  }\n\n  var segments = segmentTimeInfo.map(function (segmentTime, index) {\n    if (segmentUrlMap[index]) {\n      var segment = segmentUrlMap[index];\n\n      segment.timeline = segmentTime.timeline;\n      segment.duration = segmentTime.duration;\n      segment.number = segmentTime.number;\n      return segment;\n    }\n    // Since we're mapping we should get rid of any blank segments (in case\n    // the given SegmentTimeline is handling for more elements than we have\n    // SegmentURLs for).\n  }).filter(function (segment) {\n    return segment;\n  });\n\n  return segments;\n};\n\n/**\n * Translates SegmentBase into a set of segments.\n * (DASH SPEC Section 5.3.9.3.2) contains a set of <SegmentURL> nodes.  Each\n * node should be translated into segment.\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @return {Object.<Array>} list of segments\n */\nvar segmentsFromBase = function segmentsFromBase(attributes) {\n  var baseUrl = attributes.baseUrl,\n      _attributes$initializ = attributes.initialization,\n      initialization = _attributes$initializ === undefined ? {} : _attributes$initializ,\n      sourceDuration = attributes.sourceDuration,\n      _attributes$timescale = attributes.timescale,\n      timescale = _attributes$timescale === undefined ? 1 : _attributes$timescale,\n      _attributes$indexRang = attributes.indexRange,\n      indexRange = _attributes$indexRang === undefined ? '' : _attributes$indexRang,\n      duration = attributes.duration;\n\n  // base url is required for SegmentBase to work, per spec (Section 5.3.9.2.1)\n\n  if (!baseUrl) {\n    throw new Error(errors.NO_BASE_URL);\n  }\n\n  var initSegment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: initialization.sourceURL,\n    range: initialization.range\n  });\n  var segment = urlTypeToSegment({ baseUrl: baseUrl, source: baseUrl, range: indexRange });\n\n  segment.map = initSegment;\n\n  // If there is a duration, use it, otherwise use the given duration of the source\n  // (since SegmentBase is only for one total segment)\n  if (duration) {\n    var segmentTimeInfo = parseByDuration(attributes);\n\n    if (segmentTimeInfo.length) {\n      segment.duration = segmentTimeInfo[0].duration;\n      segment.timeline = segmentTimeInfo[0].timeline;\n    }\n  } else if (sourceDuration) {\n    segment.duration = sourceDuration / timescale;\n    segment.timeline = 0;\n  }\n\n  // This is used for mediaSequence\n  segment.number = 0;\n\n  return [segment];\n};\n\nvar generateSegments = function generateSegments(_ref) {\n  var attributes = _ref.attributes,\n      segmentInfo = _ref.segmentInfo;\n\n  var segmentAttributes = void 0;\n  var segmentsFn = void 0;\n\n  if (segmentInfo.template) {\n    segmentsFn = segmentsFromTemplate;\n    segmentAttributes = merge(attributes, segmentInfo.template);\n  } else if (segmentInfo.base) {\n    segmentsFn = segmentsFromBase;\n    segmentAttributes = merge(attributes, segmentInfo.base);\n  } else if (segmentInfo.list) {\n    segmentsFn = segmentsFromList;\n    segmentAttributes = merge(attributes, segmentInfo.list);\n  }\n\n  if (!segmentsFn) {\n    return { attributes: attributes };\n  }\n\n  var segments = segmentsFn(segmentAttributes, segmentInfo.timeline);\n\n  // The @duration attribute will be used to determin the playlist's targetDuration which\n  // must be in seconds. Since we've generated the segment list, we no longer need\n  // @duration to be in @timescale units, so we can convert it here.\n  if (segmentAttributes.duration) {\n    var _segmentAttributes = segmentAttributes,\n        duration = _segmentAttributes.duration,\n        _segmentAttributes$ti = _segmentAttributes.timescale,\n        timescale = _segmentAttributes$ti === undefined ? 1 : _segmentAttributes$ti;\n\n\n    segmentAttributes.duration = duration / timescale;\n  } else if (segments.length) {\n    // if there is no @duration attribute, use the largest segment duration as\n    // as target duration\n    segmentAttributes.duration = segments.reduce(function (max, segment) {\n      return Math.max(max, Math.ceil(segment.duration));\n    }, 0);\n  } else {\n    segmentAttributes.duration = 0;\n  }\n\n  return {\n    attributes: segmentAttributes,\n    segments: segments\n  };\n};\n\nvar toPlaylists = function toPlaylists(representations) {\n  return representations.map(generateSegments);\n};\n\nvar findChildren = function findChildren(element, name) {\n  return from(element.childNodes).filter(function (_ref) {\n    var tagName = _ref.tagName;\n    return tagName === name;\n  });\n};\n\nvar getContent = function getContent(element) {\n  return element.textContent.trim();\n};\n\nvar parseDuration = function parseDuration(str) {\n  var SECONDS_IN_YEAR = 365 * 24 * 60 * 60;\n  var SECONDS_IN_MONTH = 30 * 24 * 60 * 60;\n  var SECONDS_IN_DAY = 24 * 60 * 60;\n  var SECONDS_IN_HOUR = 60 * 60;\n  var SECONDS_IN_MIN = 60;\n\n  // P10Y10M10DT10H10M10.1S\n  var durationRegex = /P(?:(\\d*)Y)?(?:(\\d*)M)?(?:(\\d*)D)?(?:T(?:(\\d*)H)?(?:(\\d*)M)?(?:([\\d.]*)S)?)?/;\n  var match = durationRegex.exec(str);\n\n  if (!match) {\n    return 0;\n  }\n\n  var _match$slice = match.slice(1),\n      year = _match$slice[0],\n      month = _match$slice[1],\n      day = _match$slice[2],\n      hour = _match$slice[3],\n      minute = _match$slice[4],\n      second = _match$slice[5];\n\n  return parseFloat(year || 0) * SECONDS_IN_YEAR + parseFloat(month || 0) * SECONDS_IN_MONTH + parseFloat(day || 0) * SECONDS_IN_DAY + parseFloat(hour || 0) * SECONDS_IN_HOUR + parseFloat(minute || 0) * SECONDS_IN_MIN + parseFloat(second || 0);\n};\n\nvar parseDate = function parseDate(str) {\n  // Date format without timezone according to ISO 8601\n  // YYY-MM-DDThh:mm:ss.ssssss\n  var dateRegex = /^\\d+-\\d+-\\d+T\\d+:\\d+:\\d+(\\.\\d+)?$/;\n\n  // If the date string does not specifiy a timezone, we must specifiy UTC. This is\n  // expressed by ending with 'Z'\n  if (dateRegex.test(str)) {\n    str += 'Z';\n  }\n\n  return Date.parse(str);\n};\n\n// TODO: maybe order these in some way that makes it easy to find specific attributes\nvar parsers = {\n  /**\n   * Specifies the duration of the entire Media Presentation. Format is a duration string\n   * as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  mediaPresentationDuration: function mediaPresentationDuration(value) {\n    return parseDuration(value);\n  },\n\n\n  /**\n   * Specifies the Segment availability start time for all Segments referred to in this\n   * MPD. For a dynamic manifest, it specifies the anchor for the earliest availability\n   * time. Format is a date string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The date as seconds from unix epoch\n   */\n  availabilityStartTime: function availabilityStartTime(value) {\n    return parseDate(value) / 1000;\n  },\n\n\n  /**\n   * Specifies the smallest period between potential changes to the MPD. Format is a\n   * duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  minimumUpdatePeriod: function minimumUpdatePeriod(value) {\n    return parseDuration(value);\n  },\n\n\n  /**\n   * Specifies the duration of the smallest time shifting buffer for any Representation\n   * in the MPD. Format is a duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  timeShiftBufferDepth: function timeShiftBufferDepth(value) {\n    return parseDuration(value);\n  },\n\n\n  /**\n   * Specifies the PeriodStart time of the Period relative to the availabilityStarttime.\n   * Format is a duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  start: function start(value) {\n    return parseDuration(value);\n  },\n\n\n  /**\n   * Specifies the width of the visual presentation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed width\n   */\n  width: function width(value) {\n    return parseInt(value, 10);\n  },\n\n\n  /**\n   * Specifies the height of the visual presentation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed height\n   */\n  height: function height(value) {\n    return parseInt(value, 10);\n  },\n\n\n  /**\n   * Specifies the bitrate of the representation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed bandwidth\n   */\n  bandwidth: function bandwidth(value) {\n    return parseInt(value, 10);\n  },\n\n\n  /**\n   * Specifies the number of the first Media Segment in this Representation in the Period\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed number\n   */\n  startNumber: function startNumber(value) {\n    return parseInt(value, 10);\n  },\n\n\n  /**\n   * Specifies the timescale in units per seconds\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The aprsed timescale\n   */\n  timescale: function timescale(value) {\n    return parseInt(value, 10);\n  },\n\n\n  /**\n   * Specifies the constant approximate Segment duration\n   * NOTE: The <Period> element also contains an @duration attribute. This duration\n   *       specifies the duration of the Period. This attribute is currently not\n   *       supported by the rest of the parser, however we still check for it to prevent\n   *       errors.\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed duration\n   */\n  duration: function duration(value) {\n    var parsedValue = parseInt(value, 10);\n\n    if (isNaN(parsedValue)) {\n      return parseDuration(value);\n    }\n\n    return parsedValue;\n  },\n\n\n  /**\n   * Specifies the Segment duration, in units of the value of the @timescale.\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed duration\n   */\n  d: function d(value) {\n    return parseInt(value, 10);\n  },\n\n\n  /**\n   * Specifies the MPD start time, in @timescale units, the first Segment in the series\n   * starts relative to the beginning of the Period\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed time\n   */\n  t: function t(value) {\n    return parseInt(value, 10);\n  },\n\n\n  /**\n   * Specifies the repeat count of the number of following contiguous Segments with the\n   * same duration expressed by the value of @d\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed number\n   */\n  r: function r(value) {\n    return parseInt(value, 10);\n  },\n\n\n  /**\n   * Default parser for all other attributes. Acts as a no-op and just returns the value\n   * as a string\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {string}\n   *         Unparsed value\n   */\n  DEFAULT: function DEFAULT(value) {\n    return value;\n  }\n};\n\n/**\n * Gets all the attributes and values of the provided node, parses attributes with known\n * types, and returns an object with attribute names mapped to values.\n *\n * @param {Node} el\n *        The node to parse attributes from\n * @return {Object}\n *         Object with all attributes of el parsed\n */\nvar parseAttributes = function parseAttributes(el) {\n  if (!(el && el.attributes)) {\n    return {};\n  }\n\n  return from(el.attributes).reduce(function (a, e) {\n    var parseFn = parsers[e.name] || parsers.DEFAULT;\n\n    a[e.name] = parseFn(e.value);\n\n    return a;\n  }, {});\n};\n\nfunction decodeB64ToUint8Array(b64Text) {\n  var decodedString = window.atob(b64Text);\n  var array = new Uint8Array(decodedString.length);\n\n  for (var i = 0; i < decodedString.length; i++) {\n    array[i] = decodedString.charCodeAt(i);\n  }\n  return array;\n}\n\nvar keySystemsMap = {\n  'urn:uuid:1077efec-c0b2-4d02-ace3-3c1e52e2fb4b': 'org.w3.clearkey',\n  'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed': 'com.widevine.alpha',\n  'urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95': 'com.microsoft.playready',\n  'urn:uuid:f239e769-efa3-4850-9c16-a903c6932efb': 'com.adobe.primetime'\n};\n\n/**\n * Builds a list of urls that is the product of the reference urls and BaseURL values\n *\n * @param {string[]} referenceUrls\n *        List of reference urls to resolve to\n * @param {Node[]} baseUrlElements\n *        List of BaseURL nodes from the mpd\n * @return {string[]}\n *         List of resolved urls\n */\nvar buildBaseUrls = function buildBaseUrls(referenceUrls, baseUrlElements) {\n  if (!baseUrlElements.length) {\n    return referenceUrls;\n  }\n\n  return flatten(referenceUrls.map(function (reference) {\n    return baseUrlElements.map(function (baseUrlElement) {\n      return resolveUrl(reference, getContent(baseUrlElement));\n    });\n  }));\n};\n\n/**\n * Contains all Segment information for its containing AdaptationSet\n *\n * @typedef {Object} SegmentInformation\n * @property {Object|undefined} template\n *           Contains the attributes for the SegmentTemplate node\n * @property {Object[]|undefined} timeline\n *           Contains a list of atrributes for each S node within the SegmentTimeline node\n * @property {Object|undefined} list\n *           Contains the attributes for the SegmentList node\n * @property {Object|undefined} base\n *           Contains the attributes for the SegmentBase node\n */\n\n/**\n * Returns all available Segment information contained within the AdaptationSet node\n *\n * @param {Node} adaptationSet\n *        The AdaptationSet node to get Segment information from\n * @return {SegmentInformation}\n *         The Segment information contained within the provided AdaptationSet\n */\nvar getSegmentInformation = function getSegmentInformation(adaptationSet) {\n  var segmentTemplate = findChildren(adaptationSet, 'SegmentTemplate')[0];\n  var segmentList = findChildren(adaptationSet, 'SegmentList')[0];\n  var segmentUrls = segmentList && findChildren(segmentList, 'SegmentURL').map(function (s) {\n    return merge({ tag: 'SegmentURL' }, parseAttributes(s));\n  });\n  var segmentBase = findChildren(adaptationSet, 'SegmentBase')[0];\n  var segmentTimelineParentNode = segmentList || segmentTemplate;\n  var segmentTimeline = segmentTimelineParentNode && findChildren(segmentTimelineParentNode, 'SegmentTimeline')[0];\n  var segmentInitializationParentNode = segmentList || segmentBase || segmentTemplate;\n  var segmentInitialization = segmentInitializationParentNode && findChildren(segmentInitializationParentNode, 'Initialization')[0];\n\n  // SegmentTemplate is handled slightly differently, since it can have both\n  // @initialization and an <Initialization> node.  @initialization can be templated,\n  // while the node can have a url and range specified.  If the <SegmentTemplate> has\n  // both @initialization and an <Initialization> subelement we opt to override with\n  // the node, as this interaction is not defined in the spec.\n  var template = segmentTemplate && parseAttributes(segmentTemplate);\n\n  if (template && segmentInitialization) {\n    template.initialization = segmentInitialization && parseAttributes(segmentInitialization);\n  } else if (template && template.initialization) {\n    // If it is @initialization we convert it to an object since this is the format that\n    // later functions will rely on for the initialization segment.  This is only valid\n    // for <SegmentTemplate>\n    template.initialization = { sourceURL: template.initialization };\n  }\n\n  var segmentInfo = {\n    template: template,\n    timeline: segmentTimeline && findChildren(segmentTimeline, 'S').map(function (s) {\n      return parseAttributes(s);\n    }),\n    list: segmentList && merge(parseAttributes(segmentList), {\n      segmentUrls: segmentUrls,\n      initialization: parseAttributes(segmentInitialization)\n    }),\n    base: segmentBase && merge(parseAttributes(segmentBase), {\n      initialization: parseAttributes(segmentInitialization)\n    })\n  };\n\n  Object.keys(segmentInfo).forEach(function (key) {\n    if (!segmentInfo[key]) {\n      delete segmentInfo[key];\n    }\n  });\n\n  return segmentInfo;\n};\n\n/**\n * Contains Segment information and attributes needed to construct a Playlist object\n * from a Representation\n *\n * @typedef {Object} RepresentationInformation\n * @property {SegmentInformation} segmentInfo\n *           Segment information for this Representation\n * @property {Object} attributes\n *           Inherited attributes for this Representation\n */\n\n/**\n * Maps a Representation node to an object containing Segment information and attributes\n *\n * @name inheritBaseUrlsCallback\n * @function\n * @param {Node} representation\n *        Representation node from the mpd\n * @return {RepresentationInformation}\n *         Representation information needed to construct a Playlist object\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping Representation nodes to\n * Segment information and attributes using inherited BaseURL nodes.\n *\n * @param {Object} adaptationSetAttributes\n *        Contains attributes inherited by the AdaptationSet\n * @param {string[]} adaptationSetBaseUrls\n *        Contains list of resolved base urls inherited by the AdaptationSet\n * @param {SegmentInformation} adaptationSetSegmentInfo\n *        Contains Segment information for the AdaptationSet\n * @return {inheritBaseUrlsCallback}\n *         Callback map function\n */\nvar inheritBaseUrls = function inheritBaseUrls(adaptationSetAttributes, adaptationSetBaseUrls, adaptationSetSegmentInfo) {\n  return function (representation) {\n    var repBaseUrlElements = findChildren(representation, 'BaseURL');\n    var repBaseUrls = buildBaseUrls(adaptationSetBaseUrls, repBaseUrlElements);\n    var attributes = merge(adaptationSetAttributes, parseAttributes(representation));\n    var representationSegmentInfo = getSegmentInformation(representation);\n\n    return repBaseUrls.map(function (baseUrl) {\n      return {\n        segmentInfo: merge(adaptationSetSegmentInfo, representationSegmentInfo),\n        attributes: merge(attributes, { baseUrl: baseUrl })\n      };\n    });\n  };\n};\n\n/**\n * Tranforms a series of content protection nodes to\n * an object containing pssh data by key system\n *\n * @param {Node[]} contentProtectionNodes\n *        Content protection nodes\n * @return {Object}\n *        Object containing pssh data by key system\n */\nvar generateKeySystemInformation = function generateKeySystemInformation(contentProtectionNodes) {\n  return contentProtectionNodes.reduce(function (acc, node) {\n    var attributes = parseAttributes(node);\n    var keySystem = keySystemsMap[attributes.schemeIdUri];\n\n    if (keySystem) {\n      acc[keySystem] = { attributes: attributes };\n\n      var psshNode = findChildren(node, 'cenc:pssh')[0];\n\n      if (psshNode) {\n        var pssh = getContent(psshNode);\n        var psshBuffer = pssh && decodeB64ToUint8Array(pssh);\n\n        acc[keySystem].pssh = psshBuffer;\n      }\n    }\n\n    return acc;\n  }, {});\n};\n\n/**\n * Maps an AdaptationSet node to a list of Representation information objects\n *\n * @name toRepresentationsCallback\n * @function\n * @param {Node} adaptationSet\n *        AdaptationSet node from the mpd\n * @return {RepresentationInformation[]}\n *         List of objects containing Representaion information\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping AdaptationSet nodes to a list of\n * Representation information objects\n *\n * @param {Object} periodAttributes\n *        Contains attributes inherited by the Period\n * @param {string[]} periodBaseUrls\n *        Contains list of resolved base urls inherited by the Period\n * @param {string[]} periodSegmentInfo\n *        Contains Segment Information at the period level\n * @return {toRepresentationsCallback}\n *         Callback map function\n */\nvar toRepresentations = function toRepresentations(periodAttributes, periodBaseUrls, periodSegmentInfo) {\n  return function (adaptationSet) {\n    var adaptationSetAttributes = parseAttributes(adaptationSet);\n    var adaptationSetBaseUrls = buildBaseUrls(periodBaseUrls, findChildren(adaptationSet, 'BaseURL'));\n    var role = findChildren(adaptationSet, 'Role')[0];\n    var roleAttributes = { role: parseAttributes(role) };\n\n    var attrs = merge(periodAttributes, adaptationSetAttributes, roleAttributes);\n\n    var contentProtection = generateKeySystemInformation(findChildren(adaptationSet, 'ContentProtection'));\n\n    if (Object.keys(contentProtection).length) {\n      attrs = merge(attrs, { contentProtection: contentProtection });\n    }\n\n    var segmentInfo = getSegmentInformation(adaptationSet);\n    var representations = findChildren(adaptationSet, 'Representation');\n    var adaptationSetSegmentInfo = merge(periodSegmentInfo, segmentInfo);\n\n    return flatten(representations.map(inheritBaseUrls(attrs, adaptationSetBaseUrls, adaptationSetSegmentInfo)));\n  };\n};\n\n/**\n * Maps an Period node to a list of Representation inforamtion objects for all\n * AdaptationSet nodes contained within the Period\n *\n * @name toAdaptationSetsCallback\n * @function\n * @param {Node} period\n *        Period node from the mpd\n * @param {number} periodIndex\n *        Index of the Period within the mpd\n * @return {RepresentationInformation[]}\n *         List of objects containing Representaion information\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping Period nodes to a list of\n * Representation information objects\n *\n * @param {Object} mpdAttributes\n *        Contains attributes inherited by the mpd\n * @param {string[]} mpdBaseUrls\n *        Contains list of resolved base urls inherited by the mpd\n * @return {toAdaptationSetsCallback}\n *         Callback map function\n */\nvar toAdaptationSets = function toAdaptationSets(mpdAttributes, mpdBaseUrls) {\n  return function (period, periodIndex) {\n    var periodBaseUrls = buildBaseUrls(mpdBaseUrls, findChildren(period, 'BaseURL'));\n    var periodAtt = parseAttributes(period);\n    var periodAttributes = merge(mpdAttributes, periodAtt, { periodIndex: periodIndex });\n    var adaptationSets = findChildren(period, 'AdaptationSet');\n    var periodSegmentInfo = getSegmentInformation(period);\n\n    return flatten(adaptationSets.map(toRepresentations(periodAttributes, periodBaseUrls, periodSegmentInfo)));\n  };\n};\n\n/**\n * Traverses the mpd xml tree to generate a list of Representation information objects\n * that have inherited attributes from parent nodes\n *\n * @param {Node} mpd\n *        The root node of the mpd\n * @param {Object} options\n *        Available options for inheritAttributes\n * @param {string} options.manifestUri\n *        The uri source of the mpd\n * @param {number} options.NOW\n *        Current time per DASH IOP.  Default is current time in ms since epoch\n * @param {number} options.clientOffset\n *        Client time difference from NOW (in milliseconds)\n * @return {RepresentationInformation[]}\n *         List of objects containing Representation information\n */\nvar inheritAttributes = function inheritAttributes(mpd) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$manifestUri = options.manifestUri,\n      manifestUri = _options$manifestUri === undefined ? '' : _options$manifestUri,\n      _options$NOW = options.NOW,\n      NOW = _options$NOW === undefined ? Date.now() : _options$NOW,\n      _options$clientOffset = options.clientOffset,\n      clientOffset = _options$clientOffset === undefined ? 0 : _options$clientOffset;\n\n  var periods = findChildren(mpd, 'Period');\n\n  if (periods.length !== 1) {\n    // TODO add support for multiperiod\n    throw new Error(errors.INVALID_NUMBER_OF_PERIOD);\n  }\n\n  var mpdAttributes = parseAttributes(mpd);\n  var mpdBaseUrls = buildBaseUrls([manifestUri], findChildren(mpd, 'BaseURL'));\n\n  mpdAttributes.sourceDuration = mpdAttributes.mediaPresentationDuration || 0;\n  mpdAttributes.NOW = NOW;\n  mpdAttributes.clientOffset = clientOffset;\n\n  return flatten(periods.map(toAdaptationSets(mpdAttributes, mpdBaseUrls)));\n};\n\nvar stringToMpdXml = function stringToMpdXml(manifestString) {\n  if (manifestString === '') {\n    throw new Error(errors.DASH_EMPTY_MANIFEST);\n  }\n\n  var parser = new window.DOMParser();\n  var xml = parser.parseFromString(manifestString, 'application/xml');\n  var mpd = xml && xml.documentElement.tagName === 'MPD' ? xml.documentElement : null;\n\n  if (!mpd || mpd && mpd.getElementsByTagName('parsererror').length > 0) {\n    throw new Error(errors.DASH_INVALID_XML);\n  }\n\n  return mpd;\n};\n\n/**\n * Parses the manifest for a UTCTiming node, returning the nodes attributes if found\n *\n * @param {string} mpd\n *        XML string of the MPD manifest\n * @return {Object|null}\n *         Attributes of UTCTiming node specified in the manifest. Null if none found\n */\nvar parseUTCTimingScheme = function parseUTCTimingScheme(mpd) {\n  var UTCTimingNode = findChildren(mpd, 'UTCTiming')[0];\n\n  if (!UTCTimingNode) {\n    return null;\n  }\n\n  var attributes = parseAttributes(UTCTimingNode);\n\n  switch (attributes.schemeIdUri) {\n    case 'urn:mpeg:dash:utc:http-head:2014':\n    case 'urn:mpeg:dash:utc:http-head:2012':\n      attributes.method = 'HEAD';\n      break;\n    case 'urn:mpeg:dash:utc:http-xsdate:2014':\n    case 'urn:mpeg:dash:utc:http-iso:2014':\n    case 'urn:mpeg:dash:utc:http-xsdate:2012':\n    case 'urn:mpeg:dash:utc:http-iso:2012':\n      attributes.method = 'GET';\n      break;\n    case 'urn:mpeg:dash:utc:direct:2014':\n    case 'urn:mpeg:dash:utc:direct:2012':\n      attributes.method = 'DIRECT';\n      attributes.value = Date.parse(attributes.value);\n      break;\n    case 'urn:mpeg:dash:utc:http-ntp:2014':\n    case 'urn:mpeg:dash:utc:ntp:2014':\n    case 'urn:mpeg:dash:utc:sntp:2014':\n    default:\n      throw new Error(errors.UNSUPPORTED_UTC_TIMING_SCHEME);\n  }\n\n  return attributes;\n};\n\nvar VERSION = version;\n\nvar parse = function parse(manifestString, options) {\n  return toM3u8(toPlaylists(inheritAttributes(stringToMpdXml(manifestString), options)));\n};\n\n/**\n * Parses the manifest for a UTCTiming node, returning the nodes attributes if found\n *\n * @param {string} manifestString\n *        XML string of the MPD manifest\n * @return {Object|null}\n *         Attributes of UTCTiming node specified in the manifest. Null if none found\n */\nvar parseUTCTiming = function parseUTCTiming(manifestString) {\n  return parseUTCTimingScheme(stringToMpdXml(manifestString));\n};\n\nexport { VERSION, parse, parseUTCTiming };\n","/*\n * pkcs7.pad\n * https://github.com/brightcove/pkcs7\n *\n * Copyright (c) 2014 Brightcove\n * Licensed under the apache2 license.\n */\n\nvar PADDING = void 0;\n\n/**\n * Returns a new Uint8Array that is padded with PKCS#7 padding.\n * @param plaintext {Uint8Array} the input bytes before encryption\n * @return {Uint8Array} the padded bytes\n * @see http://tools.ietf.org/html/rfc5652\n */\nfunction pad(plaintext) {\n  var padding = PADDING[plaintext.byteLength % 16 || 0];\n  var result = new Uint8Array(plaintext.byteLength + padding.length);\n\n  result.set(plaintext);\n  result.set(padding, plaintext.byteLength);\n\n  return result;\n}\n\n// pre-define the padding values\nPADDING = [[16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16], [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15], [14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14], [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13], [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12], [11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11], [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], [9, 9, 9, 9, 9, 9, 9, 9, 9], [8, 8, 8, 8, 8, 8, 8, 8], [7, 7, 7, 7, 7, 7, 7], [6, 6, 6, 6, 6, 6], [5, 5, 5, 5, 5], [4, 4, 4, 4], [3, 3, 3], [2, 2], [1]];\n\n/**\n * Returns the subarray of a Uint8Array without PKCS#7 padding.\n * @param padded {Uint8Array} unencrypted bytes that have been padded\n * @return {Uint8Array} the unpadded bytes\n * @see http://tools.ietf.org/html/rfc5652\n */\nfunction unpad(padded) {\n  return padded.subarray(0, padded.byteLength - padded[padded.byteLength - 1]);\n}\n\nvar version = \"1.0.2\";\n\nexport { pad, unpad, version as VERSION };\n","import { unpad } from 'pkcs7';\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\n\n\n\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\n\n\n\n\n\n\n\n\n\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\n/**\n * @file aes.js\n *\n * This file contains an adaptation of the AES decryption algorithm\n * from the Standford Javascript Cryptography Library. That work is\n * covered by the following copyright and permissions notice:\n *\n * Copyright 2009-2010 Emily Stark, Mike Hamburg, Dan Boneh.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR\n * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\n * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN\n * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * The views and conclusions contained in the software and documentation\n * are those of the authors and should not be interpreted as representing\n * official policies, either expressed or implied, of the authors.\n */\n\n/**\n * Expand the S-box tables.\n *\n * @private\n */\nvar precompute = function precompute() {\n  var tables = [[[], [], [], [], []], [[], [], [], [], []]];\n  var encTable = tables[0];\n  var decTable = tables[1];\n  var sbox = encTable[4];\n  var sboxInv = decTable[4];\n  var i = void 0;\n  var x = void 0;\n  var xInv = void 0;\n  var d = [];\n  var th = [];\n  var x2 = void 0;\n  var x4 = void 0;\n  var x8 = void 0;\n  var s = void 0;\n  var tEnc = void 0;\n  var tDec = void 0;\n\n  // Compute double and third tables\n  for (i = 0; i < 256; i++) {\n    th[(d[i] = i << 1 ^ (i >> 7) * 283) ^ i] = i;\n  }\n\n  for (x = xInv = 0; !sbox[x]; x ^= x2 || 1, xInv = th[xInv] || 1) {\n    // Compute sbox\n    s = xInv ^ xInv << 1 ^ xInv << 2 ^ xInv << 3 ^ xInv << 4;\n    s = s >> 8 ^ s & 255 ^ 99;\n    sbox[x] = s;\n    sboxInv[s] = x;\n\n    // Compute MixColumns\n    x8 = d[x4 = d[x2 = d[x]]];\n    tDec = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;\n    tEnc = d[s] * 0x101 ^ s * 0x1010100;\n\n    for (i = 0; i < 4; i++) {\n      encTable[i][x] = tEnc = tEnc << 24 ^ tEnc >>> 8;\n      decTable[i][s] = tDec = tDec << 24 ^ tDec >>> 8;\n    }\n  }\n\n  // Compactify. Considerable speedup on Firefox.\n  for (i = 0; i < 5; i++) {\n    encTable[i] = encTable[i].slice(0);\n    decTable[i] = decTable[i].slice(0);\n  }\n  return tables;\n};\nvar aesTables = null;\n\n/**\n * Schedule out an AES key for both encryption and decryption. This\n * is a low-level class. Use a cipher mode to do bulk encryption.\n *\n * @class AES\n * @param key {Array} The key as an array of 4, 6 or 8 words.\n */\n\nvar AES = function () {\n  function AES(key) {\n    classCallCheck(this, AES);\n\n    /**\n     * The expanded S-box and inverse S-box tables. These will be computed\n     * on the client so that we don't have to send them down the wire.\n     *\n     * There are two tables, _tables[0] is for encryption and\n     * _tables[1] is for decryption.\n     *\n     * The first 4 sub-tables are the expanded S-box with MixColumns. The\n     * last (_tables[01][4]) is the S-box itself.\n     *\n     * @private\n     */\n    // if we have yet to precompute the S-box tables\n    // do so now\n    if (!aesTables) {\n      aesTables = precompute();\n    }\n    // then make a copy of that object for use\n    this._tables = [[aesTables[0][0].slice(), aesTables[0][1].slice(), aesTables[0][2].slice(), aesTables[0][3].slice(), aesTables[0][4].slice()], [aesTables[1][0].slice(), aesTables[1][1].slice(), aesTables[1][2].slice(), aesTables[1][3].slice(), aesTables[1][4].slice()]];\n    var i = void 0;\n    var j = void 0;\n    var tmp = void 0;\n    var encKey = void 0;\n    var decKey = void 0;\n    var sbox = this._tables[0][4];\n    var decTable = this._tables[1];\n    var keyLen = key.length;\n    var rcon = 1;\n\n    if (keyLen !== 4 && keyLen !== 6 && keyLen !== 8) {\n      throw new Error('Invalid aes key size');\n    }\n\n    encKey = key.slice(0);\n    decKey = [];\n    this._key = [encKey, decKey];\n\n    // schedule encryption keys\n    for (i = keyLen; i < 4 * keyLen + 28; i++) {\n      tmp = encKey[i - 1];\n\n      // apply sbox\n      if (i % keyLen === 0 || keyLen === 8 && i % keyLen === 4) {\n        tmp = sbox[tmp >>> 24] << 24 ^ sbox[tmp >> 16 & 255] << 16 ^ sbox[tmp >> 8 & 255] << 8 ^ sbox[tmp & 255];\n\n        // shift rows and add rcon\n        if (i % keyLen === 0) {\n          tmp = tmp << 8 ^ tmp >>> 24 ^ rcon << 24;\n          rcon = rcon << 1 ^ (rcon >> 7) * 283;\n        }\n      }\n\n      encKey[i] = encKey[i - keyLen] ^ tmp;\n    }\n\n    // schedule decryption keys\n    for (j = 0; i; j++, i--) {\n      tmp = encKey[j & 3 ? i : i - 4];\n      if (i <= 4 || j < 4) {\n        decKey[j] = tmp;\n      } else {\n        decKey[j] = decTable[0][sbox[tmp >>> 24]] ^ decTable[1][sbox[tmp >> 16 & 255]] ^ decTable[2][sbox[tmp >> 8 & 255]] ^ decTable[3][sbox[tmp & 255]];\n      }\n    }\n  }\n\n  /**\n   * Decrypt 16 bytes, specified as four 32-bit words.\n   *\n   * @param {Number} encrypted0 the first word to decrypt\n   * @param {Number} encrypted1 the second word to decrypt\n   * @param {Number} encrypted2 the third word to decrypt\n   * @param {Number} encrypted3 the fourth word to decrypt\n   * @param {Int32Array} out the array to write the decrypted words\n   * into\n   * @param {Number} offset the offset into the output array to start\n   * writing results\n   * @return {Array} The plaintext.\n   */\n\n\n  AES.prototype.decrypt = function decrypt(encrypted0, encrypted1, encrypted2, encrypted3, out, offset) {\n    var key = this._key[1];\n    // state variables a,b,c,d are loaded with pre-whitened data\n    var a = encrypted0 ^ key[0];\n    var b = encrypted3 ^ key[1];\n    var c = encrypted2 ^ key[2];\n    var d = encrypted1 ^ key[3];\n    var a2 = void 0;\n    var b2 = void 0;\n    var c2 = void 0;\n\n    // key.length === 2 ?\n    var nInnerRounds = key.length / 4 - 2;\n    var i = void 0;\n    var kIndex = 4;\n    var table = this._tables[1];\n\n    // load up the tables\n    var table0 = table[0];\n    var table1 = table[1];\n    var table2 = table[2];\n    var table3 = table[3];\n    var sbox = table[4];\n\n    // Inner rounds. Cribbed from OpenSSL.\n    for (i = 0; i < nInnerRounds; i++) {\n      a2 = table0[a >>> 24] ^ table1[b >> 16 & 255] ^ table2[c >> 8 & 255] ^ table3[d & 255] ^ key[kIndex];\n      b2 = table0[b >>> 24] ^ table1[c >> 16 & 255] ^ table2[d >> 8 & 255] ^ table3[a & 255] ^ key[kIndex + 1];\n      c2 = table0[c >>> 24] ^ table1[d >> 16 & 255] ^ table2[a >> 8 & 255] ^ table3[b & 255] ^ key[kIndex + 2];\n      d = table0[d >>> 24] ^ table1[a >> 16 & 255] ^ table2[b >> 8 & 255] ^ table3[c & 255] ^ key[kIndex + 3];\n      kIndex += 4;\n      a = a2;b = b2;c = c2;\n    }\n\n    // Last round.\n    for (i = 0; i < 4; i++) {\n      out[(3 & -i) + offset] = sbox[a >>> 24] << 24 ^ sbox[b >> 16 & 255] << 16 ^ sbox[c >> 8 & 255] << 8 ^ sbox[d & 255] ^ key[kIndex++];\n      a2 = a;a = b;b = c;c = d;d = a2;\n    }\n  };\n\n  return AES;\n}();\n\n/**\n * @file stream.js\n */\n/**\n * A lightweight readable stream implemention that handles event dispatching.\n *\n * @class Stream\n */\nvar Stream = function () {\n  function Stream() {\n    classCallCheck(this, Stream);\n\n    this.listeners = {};\n  }\n\n  /**\n   * Add a listener for a specified event type.\n   *\n   * @param {String} type the event name\n   * @param {Function} listener the callback to be invoked when an event of\n   * the specified type occurs\n   */\n\n\n  Stream.prototype.on = function on(type, listener) {\n    if (!this.listeners[type]) {\n      this.listeners[type] = [];\n    }\n    this.listeners[type].push(listener);\n  };\n\n  /**\n   * Remove a listener for a specified event type.\n   *\n   * @param {String} type the event name\n   * @param {Function} listener  a function previously registered for this\n   * type of event through `on`\n   * @return {Boolean} if we could turn it off or not\n   */\n\n\n  Stream.prototype.off = function off(type, listener) {\n    if (!this.listeners[type]) {\n      return false;\n    }\n\n    var index = this.listeners[type].indexOf(listener);\n\n    this.listeners[type].splice(index, 1);\n    return index > -1;\n  };\n\n  /**\n   * Trigger an event of the specified type on this stream. Any additional\n   * arguments to this function are passed as parameters to event listeners.\n   *\n   * @param {String} type the event name\n   */\n\n\n  Stream.prototype.trigger = function trigger(type) {\n    var callbacks = this.listeners[type];\n\n    if (!callbacks) {\n      return;\n    }\n\n    // Slicing the arguments on every invocation of this method\n    // can add a significant amount of overhead. Avoid the\n    // intermediate object creation for the common case of a\n    // single callback argument\n    if (arguments.length === 2) {\n      var length = callbacks.length;\n\n      for (var i = 0; i < length; ++i) {\n        callbacks[i].call(this, arguments[1]);\n      }\n    } else {\n      var args = Array.prototype.slice.call(arguments, 1);\n      var _length = callbacks.length;\n\n      for (var _i = 0; _i < _length; ++_i) {\n        callbacks[_i].apply(this, args);\n      }\n    }\n  };\n\n  /**\n   * Destroys the stream and cleans up.\n   */\n\n\n  Stream.prototype.dispose = function dispose() {\n    this.listeners = {};\n  };\n  /**\n   * Forwards all `data` events on this stream to the destination stream. The\n   * destination stream should provide a method `push` to receive the data\n   * events as they arrive.\n   *\n   * @param {Stream} destination the stream that will receive all `data` events\n   * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n   */\n\n\n  Stream.prototype.pipe = function pipe(destination) {\n    this.on('data', function (data) {\n      destination.push(data);\n    });\n  };\n\n  return Stream;\n}();\n\n/**\n * @file async-stream.js\n */\n/**\n * A wrapper around the Stream class to use setTiemout\n * and run stream \"jobs\" Asynchronously\n *\n * @class AsyncStream\n * @extends Stream\n */\n\nvar AsyncStream = function (_Stream) {\n  inherits(AsyncStream, _Stream);\n\n  function AsyncStream() {\n    classCallCheck(this, AsyncStream);\n\n    var _this = possibleConstructorReturn(this, _Stream.call(this, Stream));\n\n    _this.jobs = [];\n    _this.delay = 1;\n    _this.timeout_ = null;\n    return _this;\n  }\n\n  /**\n   * process an async job\n   *\n   * @private\n   */\n\n\n  AsyncStream.prototype.processJob_ = function processJob_() {\n    this.jobs.shift()();\n    if (this.jobs.length) {\n      this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);\n    } else {\n      this.timeout_ = null;\n    }\n  };\n\n  /**\n   * push a job into the stream\n   *\n   * @param {Function} job the job to push into the stream\n   */\n\n\n  AsyncStream.prototype.push = function push(job) {\n    this.jobs.push(job);\n    if (!this.timeout_) {\n      this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);\n    }\n  };\n\n  return AsyncStream;\n}(Stream);\n\n/**\n * @file decrypter.js\n *\n * An asynchronous implementation of AES-128 CBC decryption with\n * PKCS#7 padding.\n */\n\n/**\n * Convert network-order (big-endian) bytes into their little-endian\n * representation.\n */\nvar ntoh = function ntoh(word) {\n  return word << 24 | (word & 0xff00) << 8 | (word & 0xff0000) >> 8 | word >>> 24;\n};\n\n/**\n * Decrypt bytes using AES-128 with CBC and PKCS#7 padding.\n *\n * @param {Uint8Array} encrypted the encrypted bytes\n * @param {Uint32Array} key the bytes of the decryption key\n * @param {Uint32Array} initVector the initialization vector (IV) to\n * use for the first round of CBC.\n * @return {Uint8Array} the decrypted bytes\n *\n * @see http://en.wikipedia.org/wiki/Advanced_Encryption_Standard\n * @see http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_.28CBC.29\n * @see https://tools.ietf.org/html/rfc2315\n */\nvar decrypt = function decrypt(encrypted, key, initVector) {\n  // word-level access to the encrypted bytes\n  var encrypted32 = new Int32Array(encrypted.buffer, encrypted.byteOffset, encrypted.byteLength >> 2);\n\n  var decipher = new AES(Array.prototype.slice.call(key));\n\n  // byte and word-level access for the decrypted output\n  var decrypted = new Uint8Array(encrypted.byteLength);\n  var decrypted32 = new Int32Array(decrypted.buffer);\n\n  // temporary variables for working with the IV, encrypted, and\n  // decrypted data\n  var init0 = void 0;\n  var init1 = void 0;\n  var init2 = void 0;\n  var init3 = void 0;\n  var encrypted0 = void 0;\n  var encrypted1 = void 0;\n  var encrypted2 = void 0;\n  var encrypted3 = void 0;\n\n  // iteration variable\n  var wordIx = void 0;\n\n  // pull out the words of the IV to ensure we don't modify the\n  // passed-in reference and easier access\n  init0 = initVector[0];\n  init1 = initVector[1];\n  init2 = initVector[2];\n  init3 = initVector[3];\n\n  // decrypt four word sequences, applying cipher-block chaining (CBC)\n  // to each decrypted block\n  for (wordIx = 0; wordIx < encrypted32.length; wordIx += 4) {\n    // convert big-endian (network order) words into little-endian\n    // (javascript order)\n    encrypted0 = ntoh(encrypted32[wordIx]);\n    encrypted1 = ntoh(encrypted32[wordIx + 1]);\n    encrypted2 = ntoh(encrypted32[wordIx + 2]);\n    encrypted3 = ntoh(encrypted32[wordIx + 3]);\n\n    // decrypt the block\n    decipher.decrypt(encrypted0, encrypted1, encrypted2, encrypted3, decrypted32, wordIx);\n\n    // XOR with the IV, and restore network byte-order to obtain the\n    // plaintext\n    decrypted32[wordIx] = ntoh(decrypted32[wordIx] ^ init0);\n    decrypted32[wordIx + 1] = ntoh(decrypted32[wordIx + 1] ^ init1);\n    decrypted32[wordIx + 2] = ntoh(decrypted32[wordIx + 2] ^ init2);\n    decrypted32[wordIx + 3] = ntoh(decrypted32[wordIx + 3] ^ init3);\n\n    // setup the IV for the next round\n    init0 = encrypted0;\n    init1 = encrypted1;\n    init2 = encrypted2;\n    init3 = encrypted3;\n  }\n\n  return decrypted;\n};\n\n/**\n * The `Decrypter` class that manages decryption of AES\n * data through `AsyncStream` objects and the `decrypt`\n * function\n *\n * @param {Uint8Array} encrypted the encrypted bytes\n * @param {Uint32Array} key the bytes of the decryption key\n * @param {Uint32Array} initVector the initialization vector (IV) to\n * @param {Function} done the function to run when done\n * @class Decrypter\n */\n\nvar Decrypter = function () {\n  function Decrypter(encrypted, key, initVector, done) {\n    classCallCheck(this, Decrypter);\n\n    var step = Decrypter.STEP;\n    var encrypted32 = new Int32Array(encrypted.buffer);\n    var decrypted = new Uint8Array(encrypted.byteLength);\n    var i = 0;\n\n    this.asyncStream_ = new AsyncStream();\n\n    // split up the encryption job and do the individual chunks asynchronously\n    this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));\n    for (i = step; i < encrypted32.length; i += step) {\n      initVector = new Uint32Array([ntoh(encrypted32[i - 4]), ntoh(encrypted32[i - 3]), ntoh(encrypted32[i - 2]), ntoh(encrypted32[i - 1])]);\n      this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));\n    }\n    // invoke the done() callback when everything is finished\n    this.asyncStream_.push(function () {\n      // remove pkcs#7 padding from the decrypted bytes\n      done(null, unpad(decrypted));\n    });\n  }\n\n  /**\n   * a getter for step the maximum number of bytes to process at one time\n   *\n   * @return {Number} the value of step 32000\n   */\n\n\n  /**\n   * @private\n   */\n  Decrypter.prototype.decryptChunk_ = function decryptChunk_(encrypted, key, initVector, decrypted) {\n    return function () {\n      var bytes = decrypt(encrypted, key, initVector);\n\n      decrypted.set(bytes, encrypted.byteOffset);\n    };\n  };\n\n  createClass(Decrypter, null, [{\n    key: 'STEP',\n    get: function get$$1() {\n      // 4 * 8000;\n      return 32000;\n    }\n  }]);\n  return Decrypter;\n}();\n\n/**\n * @file index.js\n *\n * Index module to easily import the primary components of AES-128\n * decryption. Like this:\n *\n * ```js\n * import {Decrypter, decrypt, AsyncStream} from 'aes-decrypter';\n * ```\n */\n\nexport { decrypt, Decrypter, AsyncStream };\n","/**\n * @license\n * Video.js 7.2.3 <http://videojs.com/>\n * Copyright Brightcove, Inc. <https://www.brightcove.com/>\n * Available under Apache License Version 2.0\n * <https://github.com/videojs/video.js/blob/master/LICENSE>\n *\n * Includes vtt.js <https://github.com/mozilla/vtt.js>\n * Available under Apache License Version 2.0\n * <https://github.com/mozilla/vtt.js/blob/master/LICENSE>\n */\n\nimport window$1 from 'global/window';\nimport document from 'global/document';\nimport tsml from 'tsml';\nimport xhr from 'xhr';\nimport vtt from 'videojs-vtt.js';\nimport safeParseTuple from 'safe-json-parse/tuple';\nimport URLToolkit from 'url-toolkit';\nimport { Parser } from 'm3u8-parser';\nimport { parse, parseUTCTiming } from 'mpd-parser';\nimport mp4probe from 'mux.js/lib/mp4/probe';\nimport { CaptionParser } from 'mux.js/lib/mp4';\nimport tsInspector from 'mux.js/lib/tools/ts-inspector.js';\nimport { Decrypter, AsyncStream, decrypt } from 'aes-decrypter';\n\nvar version = \"7.2.3\";\n\n/**\n * @file log.js\n * @module log\n */\n\nvar log = void 0;\n\n// This is the private tracking variable for logging level.\nvar level = 'info';\n\n// This is the private tracking variable for the logging history.\nvar history = [];\n\n/**\n * Log messages to the console and history based on the type of message\n *\n * @private\n * @param  {string} type\n *         The name of the console method to use.\n *\n * @param  {Array} args\n *         The arguments to be passed to the matching console method.\n */\nvar logByType = function logByType(type, args) {\n  var lvl = log.levels[level];\n  var lvlRegExp = new RegExp('^(' + lvl + ')$');\n\n  if (type !== 'log') {\n\n    // Add the type to the front of the message when it's not \"log\".\n    args.unshift(type.toUpperCase() + ':');\n  }\n\n  // Add a clone of the args at this point to history.\n  if (history) {\n    history.push([].concat(args));\n  }\n\n  // Add console prefix after adding to history.\n  args.unshift('VIDEOJS:');\n\n  // If there's no console then don't try to output messages, but they will\n  // still be stored in history.\n  if (!window$1.console) {\n    return;\n  }\n\n  // Was setting these once outside of this function, but containing them\n  // in the function makes it easier to test cases where console doesn't exist\n  // when the module is executed.\n  var fn = window$1.console[type];\n\n  if (!fn && type === 'debug') {\n    // Certain browsers don't have support for console.debug. For those, we\n    // should default to the closest comparable log.\n    fn = window$1.console.info || window$1.console.log;\n  }\n\n  // Bail out if there's no console or if this type is not allowed by the\n  // current logging level.\n  if (!fn || !lvl || !lvlRegExp.test(type)) {\n    return;\n  }\n\n  fn[Array.isArray(args) ? 'apply' : 'call'](window$1.console, args);\n};\n\n/**\n * Logs plain debug messages. Similar to `console.log`.\n *\n * @class\n * @param    {Mixed[]} args\n *           One or more messages or objects that should be logged.\n */\nlog = function log() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  logByType('log', args);\n};\n\n/**\n * Enumeration of available logging levels, where the keys are the level names\n * and the values are `|`-separated strings containing logging methods allowed\n * in that logging level. These strings are used to create a regular expression\n * matching the function name being called.\n *\n * Levels provided by video.js are:\n *\n * - `off`: Matches no calls. Any value that can be cast to `false` will have\n *   this effect. The most restrictive.\n * - `all`: Matches only Video.js-provided functions (`debug`, `log`,\n *   `log.warn`, and `log.error`).\n * - `debug`: Matches `log.debug`, `log`, `log.warn`, and `log.error` calls.\n * - `info` (default): Matches `log`, `log.warn`, and `log.error` calls.\n * - `warn`: Matches `log.warn` and `log.error` calls.\n * - `error`: Matches only `log.error` calls.\n *\n * @type {Object}\n */\nlog.levels = {\n  all: 'debug|log|warn|error',\n  off: '',\n  debug: 'debug|log|warn|error',\n  info: 'log|warn|error',\n  warn: 'warn|error',\n  error: 'error',\n  DEFAULT: level\n};\n\n/**\n * Get or set the current logging level. If a string matching a key from\n * {@link log.levels} is provided, acts as a setter. Regardless of argument,\n * returns the current logging level.\n *\n * @param  {string} [lvl]\n *         Pass to set a new logging level.\n *\n * @return {string}\n *         The current logging level.\n */\nlog.level = function (lvl) {\n  if (typeof lvl === 'string') {\n    if (!log.levels.hasOwnProperty(lvl)) {\n      throw new Error('\"' + lvl + '\" in not a valid log level');\n    }\n    level = lvl;\n  }\n  return level;\n};\n\n/**\n * Returns an array containing everything that has been logged to the history.\n *\n * This array is a shallow clone of the internal history record. However, its\n * contents are _not_ cloned; so, mutating objects inside this array will\n * mutate them in history.\n *\n * @return {Array}\n */\nlog.history = function () {\n  return history ? [].concat(history) : [];\n};\n\n/**\n * Clears the internal history tracking, but does not prevent further history\n * tracking.\n */\nlog.history.clear = function () {\n  if (history) {\n    history.length = 0;\n  }\n};\n\n/**\n * Disable history tracking if it is currently enabled.\n */\nlog.history.disable = function () {\n  if (history !== null) {\n    history.length = 0;\n    history = null;\n  }\n};\n\n/**\n * Enable history tracking if it is currently disabled.\n */\nlog.history.enable = function () {\n  if (history === null) {\n    history = [];\n  }\n};\n\n/**\n * Logs error messages. Similar to `console.error`.\n *\n * @param {Mixed[]} args\n *        One or more messages or objects that should be logged as an error\n */\nlog.error = function () {\n  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  return logByType('error', args);\n};\n\n/**\n * Logs warning messages. Similar to `console.warn`.\n *\n * @param {Mixed[]} args\n *        One or more messages or objects that should be logged as a warning.\n */\nlog.warn = function () {\n  for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    args[_key3] = arguments[_key3];\n  }\n\n  return logByType('warn', args);\n};\n\n/**\n * Logs debug messages. Similar to `console.debug`, but may also act as a comparable\n * log if `console.debug` is not available\n *\n * @param {Mixed[]} args\n *        One or more messages or objects that should be logged as debug.\n */\nlog.debug = function () {\n  for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    args[_key4] = arguments[_key4];\n  }\n\n  return logByType('debug', args);\n};\n\nvar log$1 = log;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar taggedTemplateLiteralLoose = function (strings, raw) {\n  strings.raw = raw;\n  return strings;\n};\n\n/**\n * @file obj.js\n * @module obj\n */\n\n/**\n * @callback obj:EachCallback\n *\n * @param {Mixed} value\n *        The current key for the object that is being iterated over.\n *\n * @param {string} key\n *        The current key-value for object that is being iterated over\n */\n\n/**\n * @callback obj:ReduceCallback\n *\n * @param {Mixed} accum\n *        The value that is accumulating over the reduce loop.\n *\n * @param {Mixed} value\n *        The current key for the object that is being iterated over.\n *\n * @param {string} key\n *        The current key-value for object that is being iterated over\n *\n * @return {Mixed}\n *         The new accumulated value.\n */\nvar toString = Object.prototype.toString;\n\n/**\n * Get the keys of an Object\n *\n * @param {Object}\n *        The Object to get the keys from\n *\n * @return {string[]}\n *         An array of the keys from the object. Returns an empty array if the\n *         object passed in was invalid or had no keys.\n *\n * @private\n */\nvar keys = function keys(object) {\n  return isObject(object) ? Object.keys(object) : [];\n};\n\n/**\n * Array-like iteration for objects.\n *\n * @param {Object} object\n *        The object to iterate over\n *\n * @param {obj:EachCallback} fn\n *        The callback function which is called for each key in the object.\n */\nfunction each(object, fn) {\n  keys(object).forEach(function (key) {\n    return fn(object[key], key);\n  });\n}\n\n/**\n * Array-like reduce for objects.\n *\n * @param {Object} object\n *        The Object that you want to reduce.\n *\n * @param {Function} fn\n *         A callback function which is called for each key in the object. It\n *         receives the accumulated value and the per-iteration value and key\n *         as arguments.\n *\n * @param {Mixed} [initial = 0]\n *        Starting value\n *\n * @return {Mixed}\n *         The final accumulated value.\n */\nfunction reduce(object, fn) {\n  var initial = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  return keys(object).reduce(function (accum, key) {\n    return fn(accum, object[key], key);\n  }, initial);\n}\n\n/**\n * Object.assign-style object shallow merge/extend.\n *\n * @param  {Object} target\n * @param  {Object} ...sources\n * @return {Object}\n */\nfunction assign(target) {\n  for (var _len = arguments.length, sources = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    sources[_key - 1] = arguments[_key];\n  }\n\n  if (Object.assign) {\n    return Object.assign.apply(Object, [target].concat(sources));\n  }\n\n  sources.forEach(function (source) {\n    if (!source) {\n      return;\n    }\n\n    each(source, function (value, key) {\n      target[key] = value;\n    });\n  });\n\n  return target;\n}\n\n/**\n * Returns whether a value is an object of any kind - including DOM nodes,\n * arrays, regular expressions, etc. Not functions, though.\n *\n * This avoids the gotcha where using `typeof` on a `null` value\n * results in `'object'`.\n *\n * @param  {Object} value\n * @return {Boolean}\n */\nfunction isObject(value) {\n  return !!value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object';\n}\n\n/**\n * Returns whether an object appears to be a \"plain\" object - that is, a\n * direct instance of `Object`.\n *\n * @param  {Object} value\n * @return {Boolean}\n */\nfunction isPlain(value) {\n  return isObject(value) && toString.call(value) === '[object Object]' && value.constructor === Object;\n}\n\n/**\n * @file computed-style.js\n * @module computed-style\n */\n\n/**\n * A safe getComputedStyle.\n *\n * This is needed because in Firefox, if the player is loaded in an iframe with\n * `display:none`, then `getComputedStyle` returns `null`, so, we do a null-check to\n * make sure  that the player doesn't break in these cases.\n *\n * @param {Element} el\n *        The element you want the computed style of\n *\n * @param {string} prop\n *        The property name you want\n *\n * @see https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n *\n * @static\n * @const\n */\nfunction computedStyle(el, prop) {\n  if (!el || !prop) {\n    return '';\n  }\n\n  if (typeof window$1.getComputedStyle === 'function') {\n    var cs = window$1.getComputedStyle(el);\n\n    return cs ? cs[prop] : '';\n  }\n\n  return '';\n}\n\nvar _templateObject = taggedTemplateLiteralLoose(['Setting attributes in the second argument of createEl()\\n                has been deprecated. Use the third argument instead.\\n                createEl(type, properties, attributes). Attempting to set ', ' to ', '.'], ['Setting attributes in the second argument of createEl()\\n                has been deprecated. Use the third argument instead.\\n                createEl(type, properties, attributes). Attempting to set ', ' to ', '.']);\n\n/**\n * Detect if a value is a string with any non-whitespace characters.\n *\n * @param {string} str\n *        The string to check\n *\n * @return {boolean}\n *         - True if the string is non-blank\n *         - False otherwise\n *\n */\nfunction isNonBlankString(str) {\n  return typeof str === 'string' && /\\S/.test(str);\n}\n\n/**\n * Throws an error if the passed string has whitespace. This is used by\n * class methods to be relatively consistent with the classList API.\n *\n * @param {string} str\n *         The string to check for whitespace.\n *\n * @throws {Error}\n *         Throws an error if there is whitespace in the string.\n *\n */\nfunction throwIfWhitespace(str) {\n  if (/\\s/.test(str)) {\n    throw new Error('class has illegal whitespace characters');\n  }\n}\n\n/**\n * Produce a regular expression for matching a className within an elements className.\n *\n * @param {string} className\n *         The className to generate the RegExp for.\n *\n * @return {RegExp}\n *         The RegExp that will check for a specific `className` in an elements\n *         className.\n */\nfunction classRegExp(className) {\n  return new RegExp('(^|\\\\s)' + className + '($|\\\\s)');\n}\n\n/**\n * Whether the current DOM interface appears to be real.\n *\n * @return {Boolean}\n */\nfunction isReal() {\n  // Both document and window will never be undefined thanks to `global`.\n  return document === window$1.document;\n}\n\n/**\n * Determines, via duck typing, whether or not a value is a DOM element.\n *\n * @param {Mixed} value\n *        The thing to check\n *\n * @return {boolean}\n *         - True if it is a DOM element\n *         - False otherwise\n */\nfunction isEl(value) {\n  return isObject(value) && value.nodeType === 1;\n}\n\n/**\n * Determines if the current DOM is embedded in an iframe.\n *\n * @return {boolean}\n *\n */\nfunction isInFrame() {\n\n  // We need a try/catch here because Safari will throw errors when attempting\n  // to get either `parent` or `self`\n  try {\n    return window$1.parent !== window$1.self;\n  } catch (x) {\n    return true;\n  }\n}\n\n/**\n * Creates functions to query the DOM using a given method.\n *\n * @param {string} method\n *         The method to create the query with.\n *\n * @return {Function}\n *         The query method\n */\nfunction createQuerier(method) {\n  return function (selector, context) {\n    if (!isNonBlankString(selector)) {\n      return document[method](null);\n    }\n    if (isNonBlankString(context)) {\n      context = document.querySelector(context);\n    }\n\n    var ctx = isEl(context) ? context : document;\n\n    return ctx[method] && ctx[method](selector);\n  };\n}\n\n/**\n * Creates an element and applies properties.\n *\n * @param {string} [tagName='div']\n *         Name of tag to be created.\n *\n * @param {Object} [properties={}]\n *         Element properties to be applied.\n *\n * @param {Object} [attributes={}]\n *         Element attributes to be applied.\n *\n * @param {String|Element|TextNode|Array|Function} [content]\n *         Contents for the element (see: {@link dom:normalizeContent})\n *\n * @return {Element}\n *         The element that was created.\n */\nfunction createEl() {\n  var tagName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'div';\n  var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var content = arguments[3];\n\n  var el = document.createElement(tagName);\n\n  Object.getOwnPropertyNames(properties).forEach(function (propName) {\n    var val = properties[propName];\n\n    // See #2176\n    // We originally were accepting both properties and attributes in the\n    // same object, but that doesn't work so well.\n    if (propName.indexOf('aria-') !== -1 || propName === 'role' || propName === 'type') {\n      log$1.warn(tsml(_templateObject, propName, val));\n      el.setAttribute(propName, val);\n\n      // Handle textContent since it's not supported everywhere and we have a\n      // method for it.\n    } else if (propName === 'textContent') {\n      textContent(el, val);\n    } else {\n      el[propName] = val;\n    }\n  });\n\n  Object.getOwnPropertyNames(attributes).forEach(function (attrName) {\n    el.setAttribute(attrName, attributes[attrName]);\n  });\n\n  if (content) {\n    appendContent(el, content);\n  }\n\n  return el;\n}\n\n/**\n * Injects text into an element, replacing any existing contents entirely.\n *\n * @param {Element} el\n *        The element to add text content into\n *\n * @param {string} text\n *        The text content to add.\n *\n * @return {Element}\n *         The element with added text content.\n */\nfunction textContent(el, text) {\n  if (typeof el.textContent === 'undefined') {\n    el.innerText = text;\n  } else {\n    el.textContent = text;\n  }\n  return el;\n}\n\n/**\n * Insert an element as the first child node of another\n *\n * @param {Element} child\n *        Element to insert\n *\n * @param {Element} parent\n *        Element to insert child into\n */\nfunction prependTo(child, parent) {\n  if (parent.firstChild) {\n    parent.insertBefore(child, parent.firstChild);\n  } else {\n    parent.appendChild(child);\n  }\n}\n\n/**\n * Check if an element has a CSS class\n *\n * @param {Element} element\n *        Element to check\n *\n * @param {string} classToCheck\n *        Class name to check for\n *\n * @return {boolean}\n *         - True if the element had the class\n *         - False otherwise.\n *\n * @throws {Error}\n *         Throws an error if `classToCheck` has white space.\n */\nfunction hasClass(element, classToCheck) {\n  throwIfWhitespace(classToCheck);\n  if (element.classList) {\n    return element.classList.contains(classToCheck);\n  }\n  return classRegExp(classToCheck).test(element.className);\n}\n\n/**\n * Add a CSS class name to an element\n *\n * @param {Element} element\n *        Element to add class name to.\n *\n * @param {string} classToAdd\n *        Class name to add.\n *\n * @return {Element}\n *         The dom element with the added class name.\n */\nfunction addClass(element, classToAdd) {\n  if (element.classList) {\n    element.classList.add(classToAdd);\n\n    // Don't need to `throwIfWhitespace` here because `hasElClass` will do it\n    // in the case of classList not being supported.\n  } else if (!hasClass(element, classToAdd)) {\n    element.className = (element.className + ' ' + classToAdd).trim();\n  }\n\n  return element;\n}\n\n/**\n * Remove a CSS class name from an element\n *\n * @param {Element} element\n *        Element to remove a class name from.\n *\n * @param {string} classToRemove\n *        Class name to remove\n *\n * @return {Element}\n *         The dom element with class name removed.\n */\nfunction removeClass(element, classToRemove) {\n  if (element.classList) {\n    element.classList.remove(classToRemove);\n  } else {\n    throwIfWhitespace(classToRemove);\n    element.className = element.className.split(/\\s+/).filter(function (c) {\n      return c !== classToRemove;\n    }).join(' ');\n  }\n\n  return element;\n}\n\n/**\n * The callback definition for toggleElClass.\n *\n * @callback Dom~PredicateCallback\n * @param {Element} element\n *        The DOM element of the Component.\n *\n * @param {string} classToToggle\n *        The `className` that wants to be toggled\n *\n * @return {boolean|undefined}\n *         - If true the `classToToggle` will get added to `element`.\n *         - If false the `classToToggle` will get removed from `element`.\n *         - If undefined this callback will be ignored\n */\n\n/**\n * Adds or removes a CSS class name on an element depending on an optional\n * condition or the presence/absence of the class name.\n *\n * @param {Element} element\n *        The element to toggle a class name on.\n *\n * @param {string} classToToggle\n *        The class that should be toggled\n *\n * @param {boolean|PredicateCallback} [predicate]\n *        See the return value for {@link Dom~PredicateCallback}\n *\n * @return {Element}\n *         The element with a class that has been toggled.\n */\nfunction toggleClass(element, classToToggle, predicate) {\n\n  // This CANNOT use `classList` internally because IE11 does not support the\n  // second parameter to the `classList.toggle()` method! Which is fine because\n  // `classList` will be used by the add/remove functions.\n  var has = hasClass(element, classToToggle);\n\n  if (typeof predicate === 'function') {\n    predicate = predicate(element, classToToggle);\n  }\n\n  if (typeof predicate !== 'boolean') {\n    predicate = !has;\n  }\n\n  // If the necessary class operation matches the current state of the\n  // element, no action is required.\n  if (predicate === has) {\n    return;\n  }\n\n  if (predicate) {\n    addClass(element, classToToggle);\n  } else {\n    removeClass(element, classToToggle);\n  }\n\n  return element;\n}\n\n/**\n * Apply attributes to an HTML element.\n *\n * @param {Element} el\n *        Element to add attributes to.\n *\n * @param {Object} [attributes]\n *        Attributes to be applied.\n */\nfunction setAttributes(el, attributes) {\n  Object.getOwnPropertyNames(attributes).forEach(function (attrName) {\n    var attrValue = attributes[attrName];\n\n    if (attrValue === null || typeof attrValue === 'undefined' || attrValue === false) {\n      el.removeAttribute(attrName);\n    } else {\n      el.setAttribute(attrName, attrValue === true ? '' : attrValue);\n    }\n  });\n}\n\n/**\n * Get an element's attribute values, as defined on the HTML tag\n * Attributes are not the same as properties. They're defined on the tag\n * or with setAttribute (which shouldn't be used with HTML)\n * This will return true or false for boolean attributes.\n *\n * @param {Element} tag\n *        Element from which to get tag attributes.\n *\n * @return {Object}\n *         All attributes of the element.\n */\nfunction getAttributes(tag) {\n  var obj = {};\n\n  // known boolean attributes\n  // we can check for matching boolean properties, but not all browsers\n  // and not all tags know about these attributes, so, we still want to check them manually\n  var knownBooleans = ',' + 'autoplay,controls,playsinline,loop,muted,default,defaultMuted' + ',';\n\n  if (tag && tag.attributes && tag.attributes.length > 0) {\n    var attrs = tag.attributes;\n\n    for (var i = attrs.length - 1; i >= 0; i--) {\n      var attrName = attrs[i].name;\n      var attrVal = attrs[i].value;\n\n      // check for known booleans\n      // the matching element property will return a value for typeof\n      if (typeof tag[attrName] === 'boolean' || knownBooleans.indexOf(',' + attrName + ',') !== -1) {\n        // the value of an included boolean attribute is typically an empty\n        // string ('') which would equal false if we just check for a false value.\n        // we also don't want support bad code like autoplay='false'\n        attrVal = attrVal !== null ? true : false;\n      }\n\n      obj[attrName] = attrVal;\n    }\n  }\n\n  return obj;\n}\n\n/**\n * Get the value of an element's attribute\n *\n * @param {Element} el\n *        A DOM element\n *\n * @param {string} attribute\n *        Attribute to get the value of\n *\n * @return {string}\n *         value of the attribute\n */\nfunction getAttribute(el, attribute) {\n  return el.getAttribute(attribute);\n}\n\n/**\n * Set the value of an element's attribute\n *\n * @param {Element} el\n *        A DOM element\n *\n * @param {string} attribute\n *        Attribute to set\n *\n * @param {string} value\n *        Value to set the attribute to\n */\nfunction setAttribute(el, attribute, value) {\n  el.setAttribute(attribute, value);\n}\n\n/**\n * Remove an element's attribute\n *\n * @param {Element} el\n *        A DOM element\n *\n * @param {string} attribute\n *        Attribute to remove\n */\nfunction removeAttribute(el, attribute) {\n  el.removeAttribute(attribute);\n}\n\n/**\n * Attempt to block the ability to select text while dragging controls\n */\nfunction blockTextSelection() {\n  document.body.focus();\n  document.onselectstart = function () {\n    return false;\n  };\n}\n\n/**\n * Turn off text selection blocking\n */\nfunction unblockTextSelection() {\n  document.onselectstart = function () {\n    return true;\n  };\n}\n\n/**\n * Identical to the native `getBoundingClientRect` function, but ensures that\n * the method is supported at all (it is in all browsers we claim to support)\n * and that the element is in the DOM before continuing.\n *\n * This wrapper function also shims properties which are not provided by some\n * older browsers (namely, IE8).\n *\n * Additionally, some browsers do not support adding properties to a\n * `ClientRect`/`DOMRect` object; so, we shallow-copy it with the standard\n * properties (except `x` and `y` which are not widely supported). This helps\n * avoid implementations where keys are non-enumerable.\n *\n * @param  {Element} el\n *         Element whose `ClientRect` we want to calculate.\n *\n * @return {Object|undefined}\n *         Always returns a plain\n */\nfunction getBoundingClientRect(el) {\n  if (el && el.getBoundingClientRect && el.parentNode) {\n    var rect = el.getBoundingClientRect();\n    var result = {};\n\n    ['bottom', 'height', 'left', 'right', 'top', 'width'].forEach(function (k) {\n      if (rect[k] !== undefined) {\n        result[k] = rect[k];\n      }\n    });\n\n    if (!result.height) {\n      result.height = parseFloat(computedStyle(el, 'height'));\n    }\n\n    if (!result.width) {\n      result.width = parseFloat(computedStyle(el, 'width'));\n    }\n\n    return result;\n  }\n}\n\n/**\n * The postion of a DOM element on the page.\n *\n * @typedef {Object} module:dom~Position\n *\n * @property {number} left\n *           Pixels to the left\n *\n * @property {number} top\n *           Pixels on top\n */\n\n/**\n * Offset Left.\n * getBoundingClientRect technique from\n * John Resig\n *\n * @see http://ejohn.org/blog/getboundingclientrect-is-awesome/\n *\n * @param {Element} el\n *        Element from which to get offset\n *\n * @return {module:dom~Position}\n *         The position of the element that was passed in.\n */\nfunction findPosition(el) {\n  var box = void 0;\n\n  if (el.getBoundingClientRect && el.parentNode) {\n    box = el.getBoundingClientRect();\n  }\n\n  if (!box) {\n    return {\n      left: 0,\n      top: 0\n    };\n  }\n\n  var docEl = document.documentElement;\n  var body = document.body;\n\n  var clientLeft = docEl.clientLeft || body.clientLeft || 0;\n  var scrollLeft = window$1.pageXOffset || body.scrollLeft;\n  var left = box.left + scrollLeft - clientLeft;\n\n  var clientTop = docEl.clientTop || body.clientTop || 0;\n  var scrollTop = window$1.pageYOffset || body.scrollTop;\n  var top = box.top + scrollTop - clientTop;\n\n  // Android sometimes returns slightly off decimal values, so need to round\n  return {\n    left: Math.round(left),\n    top: Math.round(top)\n  };\n}\n\n/**\n * x and y coordinates for a dom element or mouse pointer\n *\n * @typedef {Object} Dom~Coordinates\n *\n * @property {number} x\n *           x coordinate in pixels\n *\n * @property {number} y\n *           y coordinate in pixels\n */\n\n/**\n * Get pointer position in element\n * Returns an object with x and y coordinates.\n * The base on the coordinates are the bottom left of the element.\n *\n * @param {Element} el\n *        Element on which to get the pointer position on\n *\n * @param {EventTarget~Event} event\n *        Event object\n *\n * @return {Dom~Coordinates}\n *         A Coordinates object corresponding to the mouse position.\n *\n */\nfunction getPointerPosition(el, event) {\n  var position = {};\n  var box = findPosition(el);\n  var boxW = el.offsetWidth;\n  var boxH = el.offsetHeight;\n\n  var boxY = box.top;\n  var boxX = box.left;\n  var pageY = event.pageY;\n  var pageX = event.pageX;\n\n  if (event.changedTouches) {\n    pageX = event.changedTouches[0].pageX;\n    pageY = event.changedTouches[0].pageY;\n  }\n\n  position.y = Math.max(0, Math.min(1, (boxY - pageY + boxH) / boxH));\n  position.x = Math.max(0, Math.min(1, (pageX - boxX) / boxW));\n\n  return position;\n}\n\n/**\n * Determines, via duck typing, whether or not a value is a text node.\n *\n * @param {Mixed} value\n *        Check if this value is a text node.\n *\n * @return {boolean}\n *         - True if it is a text node\n *         - False otherwise\n */\nfunction isTextNode(value) {\n  return isObject(value) && value.nodeType === 3;\n}\n\n/**\n * Empties the contents of an element.\n *\n * @param {Element} el\n *        The element to empty children from\n *\n * @return {Element}\n *         The element with no children\n */\nfunction emptyEl(el) {\n  while (el.firstChild) {\n    el.removeChild(el.firstChild);\n  }\n  return el;\n}\n\n/**\n * Normalizes content for eventual insertion into the DOM.\n *\n * This allows a wide range of content definition methods, but protects\n * from falling into the trap of simply writing to `innerHTML`, which is\n * an XSS concern.\n *\n * The content for an element can be passed in multiple types and\n * combinations, whose behavior is as follows:\n *\n * @param {String|Element|TextNode|Array|Function} content\n *        - String: Normalized into a text node.\n *        - Element/TextNode: Passed through.\n *        - Array: A one-dimensional array of strings, elements, nodes, or functions\n *          (which return single strings, elements, or nodes).\n *        - Function: If the sole argument, is expected to produce a string, element,\n *          node, or array as defined above.\n *\n * @return {Array}\n *         All of the content that was passed in normalized.\n */\nfunction normalizeContent(content) {\n\n  // First, invoke content if it is a function. If it produces an array,\n  // that needs to happen before normalization.\n  if (typeof content === 'function') {\n    content = content();\n  }\n\n  // Next up, normalize to an array, so one or many items can be normalized,\n  // filtered, and returned.\n  return (Array.isArray(content) ? content : [content]).map(function (value) {\n\n    // First, invoke value if it is a function to produce a new value,\n    // which will be subsequently normalized to a Node of some kind.\n    if (typeof value === 'function') {\n      value = value();\n    }\n\n    if (isEl(value) || isTextNode(value)) {\n      return value;\n    }\n\n    if (typeof value === 'string' && /\\S/.test(value)) {\n      return document.createTextNode(value);\n    }\n  }).filter(function (value) {\n    return value;\n  });\n}\n\n/**\n * Normalizes and appends content to an element.\n *\n * @param {Element} el\n *        Element to append normalized content to.\n *\n *\n * @param {String|Element|TextNode|Array|Function} content\n *        See the `content` argument of {@link dom:normalizeContent}\n *\n * @return {Element}\n *         The element with appended normalized content.\n */\nfunction appendContent(el, content) {\n  normalizeContent(content).forEach(function (node) {\n    return el.appendChild(node);\n  });\n  return el;\n}\n\n/**\n * Normalizes and inserts content into an element; this is identical to\n * `appendContent()`, except it empties the element first.\n *\n * @param {Element} el\n *        Element to insert normalized content into.\n *\n * @param {String|Element|TextNode|Array|Function} content\n *        See the `content` argument of {@link dom:normalizeContent}\n *\n * @return {Element}\n *         The element with inserted normalized content.\n *\n */\nfunction insertContent(el, content) {\n  return appendContent(emptyEl(el), content);\n}\n\n/**\n * Check if event was a single left click\n *\n * @param {EventTarget~Event} event\n *        Event object\n *\n * @return {boolean}\n *         - True if a left click\n *         - False if not a left click\n */\nfunction isSingleLeftClick(event) {\n  // Note: if you create something draggable, be sure to\n  // call it on both `mousedown` and `mousemove` event,\n  // otherwise `mousedown` should be enough for a button\n\n  if (event.button === undefined && event.buttons === undefined) {\n    // Why do we need `buttons` ?\n    // Because, middle mouse sometimes have this:\n    // e.button === 0 and e.buttons === 4\n    // Furthermore, we want to prevent combination click, something like\n    // HOLD middlemouse then left click, that would be\n    // e.button === 0, e.buttons === 5\n    // just `button` is not gonna work\n\n    // Alright, then what this block does ?\n    // this is for chrome `simulate mobile devices`\n    // I want to support this as well\n\n    return true;\n  }\n\n  if (event.button === 0 && event.buttons === undefined) {\n    // Touch screen, sometimes on some specific device, `buttons`\n    // doesn't have anything (safari on ios, blackberry...)\n\n    return true;\n  }\n\n  if (event.button !== 0 || event.buttons !== 1) {\n    // This is the reason we have those if else block above\n    // if any special case we can catch and let it slide\n    // we do it above, when get to here, this definitely\n    // is-not-left-click\n\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Finds a single DOM element matching `selector` within the optional\n * `context` of another DOM element (defaulting to `document`).\n *\n * @param {string} selector\n *        A valid CSS selector, which will be passed to `querySelector`.\n *\n * @param {Element|String} [context=document]\n *        A DOM element within which to query. Can also be a selector\n *        string in which case the first matching element will be used\n *        as context. If missing (or no element matches selector), falls\n *        back to `document`.\n *\n * @return {Element|null}\n *         The element that was found or null.\n */\nvar $ = createQuerier('querySelector');\n\n/**\n * Finds a all DOM elements matching `selector` within the optional\n * `context` of another DOM element (defaulting to `document`).\n *\n * @param {string} selector\n *           A valid CSS selector, which will be passed to `querySelectorAll`.\n *\n * @param {Element|String} [context=document]\n *           A DOM element within which to query. Can also be a selector\n *           string in which case the first matching element will be used\n *           as context. If missing (or no element matches selector), falls\n *           back to `document`.\n *\n * @return {NodeList}\n *         A element list of elements that were found. Will be empty if none were found.\n *\n */\nvar $$ = createQuerier('querySelectorAll');\n\nvar Dom = /*#__PURE__*/Object.freeze({\n  isReal: isReal,\n  isEl: isEl,\n  isInFrame: isInFrame,\n  createEl: createEl,\n  textContent: textContent,\n  prependTo: prependTo,\n  hasClass: hasClass,\n  addClass: addClass,\n  removeClass: removeClass,\n  toggleClass: toggleClass,\n  setAttributes: setAttributes,\n  getAttributes: getAttributes,\n  getAttribute: getAttribute,\n  setAttribute: setAttribute,\n  removeAttribute: removeAttribute,\n  blockTextSelection: blockTextSelection,\n  unblockTextSelection: unblockTextSelection,\n  getBoundingClientRect: getBoundingClientRect,\n  findPosition: findPosition,\n  getPointerPosition: getPointerPosition,\n  isTextNode: isTextNode,\n  emptyEl: emptyEl,\n  normalizeContent: normalizeContent,\n  appendContent: appendContent,\n  insertContent: insertContent,\n  isSingleLeftClick: isSingleLeftClick,\n  $: $,\n  $$: $$\n});\n\n/**\n * @file guid.js\n * @module guid\n */\n\n/**\n * Unique ID for an element or function\n * @type {Number}\n */\nvar _guid = 1;\n\n/**\n * Get a unique auto-incrementing ID by number that has not been returned before.\n *\n * @return {number}\n *         A new unique ID.\n */\nfunction newGUID() {\n  return _guid++;\n}\n\n/**\n * @file dom-data.js\n * @module dom-data\n */\n\n/**\n * Element Data Store.\n *\n * Allows for binding data to an element without putting it directly on the\n * element. Ex. Event listeners are stored here.\n * (also from jsninja.com, slightly modified and updated for closure compiler)\n *\n * @type {Object}\n * @private\n */\nvar elData = {};\n\n/*\n * Unique attribute name to store an element's guid in\n *\n * @type {String}\n * @constant\n * @private\n */\nvar elIdAttr = 'vdata' + new Date().getTime();\n\n/**\n * Returns the cache object where data for an element is stored\n *\n * @param {Element} el\n *        Element to store data for.\n *\n * @return {Object}\n *         The cache object for that el that was passed in.\n */\nfunction getData(el) {\n  var id = el[elIdAttr];\n\n  if (!id) {\n    id = el[elIdAttr] = newGUID();\n  }\n\n  if (!elData[id]) {\n    elData[id] = {};\n  }\n\n  return elData[id];\n}\n\n/**\n * Returns whether or not an element has cached data\n *\n * @param {Element} el\n *        Check if this element has cached data.\n *\n * @return {boolean}\n *         - True if the DOM element has cached data.\n *         - False otherwise.\n */\nfunction hasData(el) {\n  var id = el[elIdAttr];\n\n  if (!id) {\n    return false;\n  }\n\n  return !!Object.getOwnPropertyNames(elData[id]).length;\n}\n\n/**\n * Delete data for the element from the cache and the guid attr from getElementById\n *\n * @param {Element} el\n *        Remove cached data for this element.\n */\nfunction removeData(el) {\n  var id = el[elIdAttr];\n\n  if (!id) {\n    return;\n  }\n\n  // Remove all stored data\n  delete elData[id];\n\n  // Remove the elIdAttr property from the DOM node\n  try {\n    delete el[elIdAttr];\n  } catch (e) {\n    if (el.removeAttribute) {\n      el.removeAttribute(elIdAttr);\n    } else {\n      // IE doesn't appear to support removeAttribute on the document element\n      el[elIdAttr] = null;\n    }\n  }\n}\n\n/**\n * @file events.js. An Event System (John Resig - Secrets of a JS Ninja http://jsninja.com/)\n * (Original book version wasn't completely usable, so fixed some things and made Closure Compiler compatible)\n * This should work very similarly to jQuery's events, however it's based off the book version which isn't as\n * robust as jquery's, so there's probably some differences.\n *\n * @module events\n */\n\n/**\n * Clean up the listener cache and dispatchers\n *\n * @param {Element|Object} elem\n *        Element to clean up\n *\n * @param {string} type\n *        Type of event to clean up\n */\nfunction _cleanUpEvents(elem, type) {\n  var data = getData(elem);\n\n  // Remove the events of a particular type if there are none left\n  if (data.handlers[type].length === 0) {\n    delete data.handlers[type];\n    // data.handlers[type] = null;\n    // Setting to null was causing an error with data.handlers\n\n    // Remove the meta-handler from the element\n    if (elem.removeEventListener) {\n      elem.removeEventListener(type, data.dispatcher, false);\n    } else if (elem.detachEvent) {\n      elem.detachEvent('on' + type, data.dispatcher);\n    }\n  }\n\n  // Remove the events object if there are no types left\n  if (Object.getOwnPropertyNames(data.handlers).length <= 0) {\n    delete data.handlers;\n    delete data.dispatcher;\n    delete data.disabled;\n  }\n\n  // Finally remove the element data if there is no data left\n  if (Object.getOwnPropertyNames(data).length === 0) {\n    removeData(elem);\n  }\n}\n\n/**\n * Loops through an array of event types and calls the requested method for each type.\n *\n * @param {Function} fn\n *        The event method we want to use.\n *\n * @param {Element|Object} elem\n *        Element or object to bind listeners to\n *\n * @param {string} type\n *        Type of event to bind to.\n *\n * @param {EventTarget~EventListener} callback\n *        Event listener.\n */\nfunction _handleMultipleEvents(fn, elem, types, callback) {\n  types.forEach(function (type) {\n    // Call the event method for each one of the types\n    fn(elem, type, callback);\n  });\n}\n\n/**\n * Fix a native event to have standard property values\n *\n * @param {Object} event\n *        Event object to fix.\n *\n * @return {Object}\n *         Fixed event object.\n */\nfunction fixEvent(event) {\n\n  function returnTrue() {\n    return true;\n  }\n\n  function returnFalse() {\n    return false;\n  }\n\n  // Test if fixing up is needed\n  // Used to check if !event.stopPropagation instead of isPropagationStopped\n  // But native events return true for stopPropagation, but don't have\n  // other expected methods like isPropagationStopped. Seems to be a problem\n  // with the Javascript Ninja code. So we're just overriding all events now.\n  if (!event || !event.isPropagationStopped) {\n    var old = event || window$1.event;\n\n    event = {};\n    // Clone the old object so that we can modify the values event = {};\n    // IE8 Doesn't like when you mess with native event properties\n    // Firefox returns false for event.hasOwnProperty('type') and other props\n    //  which makes copying more difficult.\n    // TODO: Probably best to create a whitelist of event props\n    for (var key in old) {\n      // Safari 6.0.3 warns you if you try to copy deprecated layerX/Y\n      // Chrome warns you if you try to copy deprecated keyboardEvent.keyLocation\n      // and webkitMovementX/Y\n      if (key !== 'layerX' && key !== 'layerY' && key !== 'keyLocation' && key !== 'webkitMovementX' && key !== 'webkitMovementY') {\n        // Chrome 32+ warns if you try to copy deprecated returnValue, but\n        // we still want to if preventDefault isn't supported (IE8).\n        if (!(key === 'returnValue' && old.preventDefault)) {\n          event[key] = old[key];\n        }\n      }\n    }\n\n    // The event occurred on this element\n    if (!event.target) {\n      event.target = event.srcElement || document;\n    }\n\n    // Handle which other element the event is related to\n    if (!event.relatedTarget) {\n      event.relatedTarget = event.fromElement === event.target ? event.toElement : event.fromElement;\n    }\n\n    // Stop the default browser action\n    event.preventDefault = function () {\n      if (old.preventDefault) {\n        old.preventDefault();\n      }\n      event.returnValue = false;\n      old.returnValue = false;\n      event.defaultPrevented = true;\n    };\n\n    event.defaultPrevented = false;\n\n    // Stop the event from bubbling\n    event.stopPropagation = function () {\n      if (old.stopPropagation) {\n        old.stopPropagation();\n      }\n      event.cancelBubble = true;\n      old.cancelBubble = true;\n      event.isPropagationStopped = returnTrue;\n    };\n\n    event.isPropagationStopped = returnFalse;\n\n    // Stop the event from bubbling and executing other handlers\n    event.stopImmediatePropagation = function () {\n      if (old.stopImmediatePropagation) {\n        old.stopImmediatePropagation();\n      }\n      event.isImmediatePropagationStopped = returnTrue;\n      event.stopPropagation();\n    };\n\n    event.isImmediatePropagationStopped = returnFalse;\n\n    // Handle mouse position\n    if (event.clientX !== null && event.clientX !== undefined) {\n      var doc = document.documentElement;\n      var body = document.body;\n\n      event.pageX = event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);\n      event.pageY = event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);\n    }\n\n    // Handle key presses\n    event.which = event.charCode || event.keyCode;\n\n    // Fix button for mouse clicks:\n    // 0 == left; 1 == middle; 2 == right\n    if (event.button !== null && event.button !== undefined) {\n\n      // The following is disabled because it does not pass videojs-standard\n      // and... yikes.\n      /* eslint-disable */\n      event.button = event.button & 1 ? 0 : event.button & 4 ? 1 : event.button & 2 ? 2 : 0;\n      /* eslint-enable */\n    }\n  }\n\n  // Returns fixed-up instance\n  return event;\n}\n\n/**\n * Whether passive event listeners are supported\n */\nvar _supportsPassive = false;\n\n(function () {\n  try {\n    var opts = Object.defineProperty({}, 'passive', {\n      get: function get() {\n        _supportsPassive = true;\n      }\n    });\n\n    window$1.addEventListener('test', null, opts);\n    window$1.removeEventListener('test', null, opts);\n  } catch (e) {\n    // disregard\n  }\n})();\n\n/**\n * Touch events Chrome expects to be passive\n */\nvar passiveEvents = ['touchstart', 'touchmove'];\n\n/**\n * Add an event listener to element\n * It stores the handler function in a separate cache object\n * and adds a generic handler to the element's event,\n * along with a unique id (guid) to the element.\n *\n * @param {Element|Object} elem\n *        Element or object to bind listeners to\n *\n * @param {string|string[]} type\n *        Type of event to bind to.\n *\n * @param {EventTarget~EventListener} fn\n *        Event listener.\n */\nfunction on(elem, type, fn) {\n  if (Array.isArray(type)) {\n    return _handleMultipleEvents(on, elem, type, fn);\n  }\n\n  var data = getData(elem);\n\n  // We need a place to store all our handler data\n  if (!data.handlers) {\n    data.handlers = {};\n  }\n\n  if (!data.handlers[type]) {\n    data.handlers[type] = [];\n  }\n\n  if (!fn.guid) {\n    fn.guid = newGUID();\n  }\n\n  data.handlers[type].push(fn);\n\n  if (!data.dispatcher) {\n    data.disabled = false;\n\n    data.dispatcher = function (event, hash) {\n\n      if (data.disabled) {\n        return;\n      }\n\n      event = fixEvent(event);\n\n      var handlers = data.handlers[event.type];\n\n      if (handlers) {\n        // Copy handlers so if handlers are added/removed during the process it doesn't throw everything off.\n        var handlersCopy = handlers.slice(0);\n\n        for (var m = 0, n = handlersCopy.length; m < n; m++) {\n          if (event.isImmediatePropagationStopped()) {\n            break;\n          } else {\n            try {\n              handlersCopy[m].call(elem, event, hash);\n            } catch (e) {\n              log$1.error(e);\n            }\n          }\n        }\n      }\n    };\n  }\n\n  if (data.handlers[type].length === 1) {\n    if (elem.addEventListener) {\n      var options = false;\n\n      if (_supportsPassive && passiveEvents.indexOf(type) > -1) {\n        options = { passive: true };\n      }\n      elem.addEventListener(type, data.dispatcher, options);\n    } else if (elem.attachEvent) {\n      elem.attachEvent('on' + type, data.dispatcher);\n    }\n  }\n}\n\n/**\n * Removes event listeners from an element\n *\n * @param {Element|Object} elem\n *        Object to remove listeners from.\n *\n * @param {string|string[]} [type]\n *        Type of listener to remove. Don't include to remove all events from element.\n *\n * @param {EventTarget~EventListener} [fn]\n *        Specific listener to remove. Don't include to remove listeners for an event\n *        type.\n */\nfunction off(elem, type, fn) {\n  // Don't want to add a cache object through getElData if not needed\n  if (!hasData(elem)) {\n    return;\n  }\n\n  var data = getData(elem);\n\n  // If no events exist, nothing to unbind\n  if (!data.handlers) {\n    return;\n  }\n\n  if (Array.isArray(type)) {\n    return _handleMultipleEvents(off, elem, type, fn);\n  }\n\n  // Utility function\n  var removeType = function removeType(el, t) {\n    data.handlers[t] = [];\n    _cleanUpEvents(el, t);\n  };\n\n  // Are we removing all bound events?\n  if (type === undefined) {\n    for (var t in data.handlers) {\n      if (Object.prototype.hasOwnProperty.call(data.handlers || {}, t)) {\n        removeType(elem, t);\n      }\n    }\n    return;\n  }\n\n  var handlers = data.handlers[type];\n\n  // If no handlers exist, nothing to unbind\n  if (!handlers) {\n    return;\n  }\n\n  // If no listener was provided, remove all listeners for type\n  if (!fn) {\n    removeType(elem, type);\n    return;\n  }\n\n  // We're only removing a single handler\n  if (fn.guid) {\n    for (var n = 0; n < handlers.length; n++) {\n      if (handlers[n].guid === fn.guid) {\n        handlers.splice(n--, 1);\n      }\n    }\n  }\n\n  _cleanUpEvents(elem, type);\n}\n\n/**\n * Trigger an event for an element\n *\n * @param {Element|Object} elem\n *        Element to trigger an event on\n *\n * @param {EventTarget~Event|string} event\n *        A string (the type) or an event object with a type attribute\n *\n * @param {Object} [hash]\n *        data hash to pass along with the event\n *\n * @return {boolean|undefined}\n *         - Returns the opposite of `defaultPrevented` if default was prevented\n *         - Otherwise returns undefined\n */\nfunction trigger(elem, event, hash) {\n  // Fetches element data and a reference to the parent (for bubbling).\n  // Don't want to add a data object to cache for every parent,\n  // so checking hasElData first.\n  var elemData = hasData(elem) ? getData(elem) : {};\n  var parent = elem.parentNode || elem.ownerDocument;\n  // type = event.type || event,\n  // handler;\n\n  // If an event name was passed as a string, creates an event out of it\n  if (typeof event === 'string') {\n    event = { type: event, target: elem };\n  } else if (!event.target) {\n    event.target = elem;\n  }\n\n  // Normalizes the event properties.\n  event = fixEvent(event);\n\n  // If the passed element has a dispatcher, executes the established handlers.\n  if (elemData.dispatcher) {\n    elemData.dispatcher.call(elem, event, hash);\n  }\n\n  // Unless explicitly stopped or the event does not bubble (e.g. media events)\n  // recursively calls this function to bubble the event up the DOM.\n  if (parent && !event.isPropagationStopped() && event.bubbles === true) {\n    trigger.call(null, parent, event, hash);\n\n    // If at the top of the DOM, triggers the default action unless disabled.\n  } else if (!parent && !event.defaultPrevented) {\n    var targetData = getData(event.target);\n\n    // Checks if the target has a default action for this event.\n    if (event.target[event.type]) {\n      // Temporarily disables event dispatching on the target as we have already executed the handler.\n      targetData.disabled = true;\n      // Executes the default action.\n      if (typeof event.target[event.type] === 'function') {\n        event.target[event.type]();\n      }\n      // Re-enables event dispatching.\n      targetData.disabled = false;\n    }\n  }\n\n  // Inform the triggerer if the default was prevented by returning false\n  return !event.defaultPrevented;\n}\n\n/**\n * Trigger a listener only once for an event\n *\n * @param {Element|Object} elem\n *        Element or object to bind to.\n *\n * @param {string|string[]} type\n *        Name/type of event\n *\n * @param {Event~EventListener} fn\n *        Event Listener function\n */\nfunction one(elem, type, fn) {\n  if (Array.isArray(type)) {\n    return _handleMultipleEvents(one, elem, type, fn);\n  }\n  var func = function func() {\n    off(elem, type, func);\n    fn.apply(this, arguments);\n  };\n\n  // copy the guid to the new function so it can removed using the original function's ID\n  func.guid = fn.guid = fn.guid || newGUID();\n  on(elem, type, func);\n}\n\nvar Events = /*#__PURE__*/Object.freeze({\n  fixEvent: fixEvent,\n  on: on,\n  off: off,\n  trigger: trigger,\n  one: one\n});\n\n/**\n * @file setup.js - Functions for setting up a player without\n * user interaction based on the data-setup `attribute` of the video tag.\n *\n * @module setup\n */\n\nvar _windowLoaded = false;\nvar videojs = void 0;\n\n/**\n * Set up any tags that have a data-setup `attribute` when the player is started.\n */\nvar autoSetup = function autoSetup() {\n\n  // Protect against breakage in non-browser environments and check global autoSetup option.\n  if (!isReal() || videojs.options.autoSetup === false) {\n    return;\n  }\n\n  var vids = Array.prototype.slice.call(document.getElementsByTagName('video'));\n  var audios = Array.prototype.slice.call(document.getElementsByTagName('audio'));\n  var divs = Array.prototype.slice.call(document.getElementsByTagName('video-js'));\n  var mediaEls = vids.concat(audios, divs);\n\n  // Check if any media elements exist\n  if (mediaEls && mediaEls.length > 0) {\n\n    for (var i = 0, e = mediaEls.length; i < e; i++) {\n      var mediaEl = mediaEls[i];\n\n      // Check if element exists, has getAttribute func.\n      if (mediaEl && mediaEl.getAttribute) {\n\n        // Make sure this player hasn't already been set up.\n        if (mediaEl.player === undefined) {\n          var options = mediaEl.getAttribute('data-setup');\n\n          // Check if data-setup attr exists.\n          // We only auto-setup if they've added the data-setup attr.\n          if (options !== null) {\n            // Create new video.js instance.\n            videojs(mediaEl);\n          }\n        }\n\n        // If getAttribute isn't defined, we need to wait for the DOM.\n      } else {\n        autoSetupTimeout(1);\n        break;\n      }\n    }\n\n    // No videos were found, so keep looping unless page is finished loading.\n  } else if (!_windowLoaded) {\n    autoSetupTimeout(1);\n  }\n};\n\n/**\n * Wait until the page is loaded before running autoSetup. This will be called in\n * autoSetup if `hasLoaded` returns false.\n *\n * @param {number} wait\n *        How long to wait in ms\n *\n * @param {module:videojs} [vjs]\n *        The videojs library function\n */\nfunction autoSetupTimeout(wait, vjs) {\n  if (vjs) {\n    videojs = vjs;\n  }\n\n  window$1.setTimeout(autoSetup, wait);\n}\n\nif (isReal() && document.readyState === 'complete') {\n  _windowLoaded = true;\n} else {\n  /**\n   * Listen for the load event on window, and set _windowLoaded to true.\n   *\n   * @listens load\n   */\n  one(window$1, 'load', function () {\n    _windowLoaded = true;\n  });\n}\n\n/**\n * @file stylesheet.js\n * @module stylesheet\n */\n\n/**\n * Create a DOM syle element given a className for it.\n *\n * @param {string} className\n *        The className to add to the created style element.\n *\n * @return {Element}\n *         The element that was created.\n */\nvar createStyleElement = function createStyleElement(className) {\n  var style = document.createElement('style');\n\n  style.className = className;\n\n  return style;\n};\n\n/**\n * Add text to a DOM element.\n *\n * @param {Element} el\n *        The Element to add text content to.\n *\n * @param {string} content\n *        The text to add to the element.\n */\nvar setTextContent = function setTextContent(el, content) {\n  if (el.styleSheet) {\n    el.styleSheet.cssText = content;\n  } else {\n    el.textContent = content;\n  }\n};\n\n/**\n * @file fn.js\n * @module fn\n */\n\n/**\n * Bind (a.k.a proxy or Context). A simple method for changing the context of a function\n * It also stores a unique id on the function so it can be easily removed from events.\n *\n * @param {Mixed} context\n *        The object to bind as scope.\n *\n * @param {Function} fn\n *        The function to be bound to a scope.\n *\n * @param {number} [uid]\n *        An optional unique ID for the function to be set\n *\n * @return {Function}\n *         The new function that will be bound into the context given\n */\nvar bind = function bind(context, fn, uid) {\n  // Make sure the function has a unique ID\n  if (!fn.guid) {\n    fn.guid = newGUID();\n  }\n\n  // Create the new function that changes the context\n  var bound = function bound() {\n    return fn.apply(context, arguments);\n  };\n\n  // Allow for the ability to individualize this function\n  // Needed in the case where multiple objects might share the same prototype\n  // IF both items add an event listener with the same function, then you try to remove just one\n  // it will remove both because they both have the same guid.\n  // when using this, you need to use the bind method when you remove the listener as well.\n  // currently used in text tracks\n  bound.guid = uid ? uid + '_' + fn.guid : fn.guid;\n\n  return bound;\n};\n\n/**\n * Wraps the given function, `fn`, with a new function that only invokes `fn`\n * at most once per every `wait` milliseconds.\n *\n * @param  {Function} fn\n *         The function to be throttled.\n *\n * @param  {Number}   wait\n *         The number of milliseconds by which to throttle.\n *\n * @return {Function}\n */\nvar throttle = function throttle(fn, wait) {\n  var last = Date.now();\n\n  var throttled = function throttled() {\n    var now = Date.now();\n\n    if (now - last >= wait) {\n      fn.apply(undefined, arguments);\n      last = now;\n    }\n  };\n\n  return throttled;\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked.\n *\n * Inspired by lodash and underscore implementations.\n *\n * @param  {Function} func\n *         The function to wrap with debounce behavior.\n *\n * @param  {number} wait\n *         The number of milliseconds to wait after the last invocation.\n *\n * @param  {boolean} [immediate]\n *         Whether or not to invoke the function immediately upon creation.\n *\n * @param  {Object} [context=window]\n *         The \"context\" in which the debounced function should debounce. For\n *         example, if this function should be tied to a Video.js player,\n *         the player can be passed here. Alternatively, defaults to the\n *         global `window` object.\n *\n * @return {Function}\n *         A debounced function.\n */\nvar debounce = function debounce(func, wait, immediate) {\n  var context = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : window$1;\n\n  var timeout = void 0;\n\n  var cancel = function cancel() {\n    context.clearTimeout(timeout);\n    timeout = null;\n  };\n\n  /* eslint-disable consistent-this */\n  var debounced = function debounced() {\n    var self = this;\n    var args = arguments;\n\n    var _later = function later() {\n      timeout = null;\n      _later = null;\n      if (!immediate) {\n        func.apply(self, args);\n      }\n    };\n\n    if (!timeout && immediate) {\n      func.apply(self, args);\n    }\n\n    context.clearTimeout(timeout);\n    timeout = context.setTimeout(_later, wait);\n  };\n  /* eslint-enable consistent-this */\n\n  debounced.cancel = cancel;\n\n  return debounced;\n};\n\n/**\n * @file src/js/event-target.js\n */\n\n/**\n * `EventTarget` is a class that can have the same API as the DOM `EventTarget`. It\n * adds shorthand functions that wrap around lengthy functions. For example:\n * the `on` function is a wrapper around `addEventListener`.\n *\n * @see [EventTarget Spec]{@link https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget}\n * @class EventTarget\n */\nvar EventTarget = function EventTarget() {};\n\n/**\n * A Custom DOM event.\n *\n * @typedef {Object} EventTarget~Event\n * @see [Properties]{@link https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent}\n */\n\n/**\n * All event listeners should follow the following format.\n *\n * @callback EventTarget~EventListener\n * @this {EventTarget}\n *\n * @param {EventTarget~Event} event\n *        the event that triggered this function\n *\n * @param {Object} [hash]\n *        hash of data sent during the event\n */\n\n/**\n * An object containing event names as keys and booleans as values.\n *\n * > NOTE: If an event name is set to a true value here {@link EventTarget#trigger}\n *         will have extra functionality. See that function for more information.\n *\n * @property EventTarget.prototype.allowedEvents_\n * @private\n */\nEventTarget.prototype.allowedEvents_ = {};\n\n/**\n * Adds an `event listener` to an instance of an `EventTarget`. An `event listener` is a\n * function that will get called when an event with a certain name gets triggered.\n *\n * @param {string|string[]} type\n *        An event name or an array of event names.\n *\n * @param {EventTarget~EventListener} fn\n *        The function to call with `EventTarget`s\n */\nEventTarget.prototype.on = function (type, fn) {\n  // Remove the addEventListener alias before calling Events.on\n  // so we don't get into an infinite type loop\n  var ael = this.addEventListener;\n\n  this.addEventListener = function () {};\n  on(this, type, fn);\n  this.addEventListener = ael;\n};\n\n/**\n * An alias of {@link EventTarget#on}. Allows `EventTarget` to mimic\n * the standard DOM API.\n *\n * @function\n * @see {@link EventTarget#on}\n */\nEventTarget.prototype.addEventListener = EventTarget.prototype.on;\n\n/**\n * Removes an `event listener` for a specific event from an instance of `EventTarget`.\n * This makes it so that the `event listener` will no longer get called when the\n * named event happens.\n *\n * @param {string|string[]} type\n *        An event name or an array of event names.\n *\n * @param {EventTarget~EventListener} fn\n *        The function to remove.\n */\nEventTarget.prototype.off = function (type, fn) {\n  off(this, type, fn);\n};\n\n/**\n * An alias of {@link EventTarget#off}. Allows `EventTarget` to mimic\n * the standard DOM API.\n *\n * @function\n * @see {@link EventTarget#off}\n */\nEventTarget.prototype.removeEventListener = EventTarget.prototype.off;\n\n/**\n * This function will add an `event listener` that gets triggered only once. After the\n * first trigger it will get removed. This is like adding an `event listener`\n * with {@link EventTarget#on} that calls {@link EventTarget#off} on itself.\n *\n * @param {string|string[]} type\n *        An event name or an array of event names.\n *\n * @param {EventTarget~EventListener} fn\n *        The function to be called once for each event name.\n */\nEventTarget.prototype.one = function (type, fn) {\n  // Remove the addEventListener alialing Events.on\n  // so we don't get into an infinite type loop\n  var ael = this.addEventListener;\n\n  this.addEventListener = function () {};\n  one(this, type, fn);\n  this.addEventListener = ael;\n};\n\n/**\n * This function causes an event to happen. This will then cause any `event listeners`\n * that are waiting for that event, to get called. If there are no `event listeners`\n * for an event then nothing will happen.\n *\n * If the name of the `Event` that is being triggered is in `EventTarget.allowedEvents_`.\n * Trigger will also call the `on` + `uppercaseEventName` function.\n *\n * Example:\n * 'click' is in `EventTarget.allowedEvents_`, so, trigger will attempt to call\n * `onClick` if it exists.\n *\n * @param {string|EventTarget~Event|Object} event\n *        The name of the event, an `Event`, or an object with a key of type set to\n *        an event name.\n */\nEventTarget.prototype.trigger = function (event) {\n  var type = event.type || event;\n\n  if (typeof event === 'string') {\n    event = { type: type };\n  }\n  event = fixEvent(event);\n\n  if (this.allowedEvents_[type] && this['on' + type]) {\n    this['on' + type](event);\n  }\n\n  trigger(this, event);\n};\n\n/**\n * An alias of {@link EventTarget#trigger}. Allows `EventTarget` to mimic\n * the standard DOM API.\n *\n * @function\n * @see {@link EventTarget#trigger}\n */\nEventTarget.prototype.dispatchEvent = EventTarget.prototype.trigger;\n\nvar EVENT_MAP = void 0;\n\nEventTarget.prototype.queueTrigger = function (event) {\n  var _this = this;\n\n  // only set up EVENT_MAP if it'll be used\n  if (!EVENT_MAP) {\n    EVENT_MAP = new Map();\n  }\n\n  var type = event.type || event;\n  var map = EVENT_MAP.get(this);\n\n  if (!map) {\n    map = new Map();\n    EVENT_MAP.set(this, map);\n  }\n\n  var oldTimeout = map.get(type);\n\n  map.delete(type);\n  window$1.clearTimeout(oldTimeout);\n\n  var timeout = window$1.setTimeout(function () {\n    // if we cleared out all timeouts for the current target, delete its map\n    if (map.size === 0) {\n      map = null;\n      EVENT_MAP.delete(_this);\n    }\n\n    _this.trigger(event);\n  }, 0);\n\n  map.set(type, timeout);\n};\n\n/**\n * @file mixins/evented.js\n * @module evented\n */\n\n/**\n * Returns whether or not an object has had the evented mixin applied.\n *\n * @param  {Object} object\n *         An object to test.\n *\n * @return {boolean}\n *         Whether or not the object appears to be evented.\n */\nvar isEvented = function isEvented(object) {\n  return object instanceof EventTarget || !!object.eventBusEl_ && ['on', 'one', 'off', 'trigger'].every(function (k) {\n    return typeof object[k] === 'function';\n  });\n};\n\n/**\n * Whether a value is a valid event type - non-empty string or array.\n *\n * @private\n * @param  {string|Array} type\n *         The type value to test.\n *\n * @return {boolean}\n *         Whether or not the type is a valid event type.\n */\nvar isValidEventType = function isValidEventType(type) {\n  return (\n    // The regex here verifies that the `type` contains at least one non-\n    // whitespace character.\n    typeof type === 'string' && /\\S/.test(type) || Array.isArray(type) && !!type.length\n  );\n};\n\n/**\n * Validates a value to determine if it is a valid event target. Throws if not.\n *\n * @private\n * @throws {Error}\n *         If the target does not appear to be a valid event target.\n *\n * @param  {Object} target\n *         The object to test.\n */\nvar validateTarget = function validateTarget(target) {\n  if (!target.nodeName && !isEvented(target)) {\n    throw new Error('Invalid target; must be a DOM node or evented object.');\n  }\n};\n\n/**\n * Validates a value to determine if it is a valid event target. Throws if not.\n *\n * @private\n * @throws {Error}\n *         If the type does not appear to be a valid event type.\n *\n * @param  {string|Array} type\n *         The type to test.\n */\nvar validateEventType = function validateEventType(type) {\n  if (!isValidEventType(type)) {\n    throw new Error('Invalid event type; must be a non-empty string or array.');\n  }\n};\n\n/**\n * Validates a value to determine if it is a valid listener. Throws if not.\n *\n * @private\n * @throws {Error}\n *         If the listener is not a function.\n *\n * @param  {Function} listener\n *         The listener to test.\n */\nvar validateListener = function validateListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new Error('Invalid listener; must be a function.');\n  }\n};\n\n/**\n * Takes an array of arguments given to `on()` or `one()`, validates them, and\n * normalizes them into an object.\n *\n * @private\n * @param  {Object} self\n *         The evented object on which `on()` or `one()` was called. This\n *         object will be bound as the `this` value for the listener.\n *\n * @param  {Array} args\n *         An array of arguments passed to `on()` or `one()`.\n *\n * @return {Object}\n *         An object containing useful values for `on()` or `one()` calls.\n */\nvar normalizeListenArgs = function normalizeListenArgs(self, args) {\n\n  // If the number of arguments is less than 3, the target is always the\n  // evented object itself.\n  var isTargetingSelf = args.length < 3 || args[0] === self || args[0] === self.eventBusEl_;\n  var target = void 0;\n  var type = void 0;\n  var listener = void 0;\n\n  if (isTargetingSelf) {\n    target = self.eventBusEl_;\n\n    // Deal with cases where we got 3 arguments, but we are still listening to\n    // the evented object itself.\n    if (args.length >= 3) {\n      args.shift();\n    }\n\n    type = args[0];\n    listener = args[1];\n  } else {\n    target = args[0];\n    type = args[1];\n    listener = args[2];\n  }\n\n  validateTarget(target);\n  validateEventType(type);\n  validateListener(listener);\n\n  listener = bind(self, listener);\n\n  return { isTargetingSelf: isTargetingSelf, target: target, type: type, listener: listener };\n};\n\n/**\n * Adds the listener to the event type(s) on the target, normalizing for\n * the type of target.\n *\n * @private\n * @param  {Element|Object} target\n *         A DOM node or evented object.\n *\n * @param  {string} method\n *         The event binding method to use (\"on\" or \"one\").\n *\n * @param  {string|Array} type\n *         One or more event type(s).\n *\n * @param  {Function} listener\n *         A listener function.\n */\nvar listen = function listen(target, method, type, listener) {\n  validateTarget(target);\n\n  if (target.nodeName) {\n    Events[method](target, type, listener);\n  } else {\n    target[method](type, listener);\n  }\n};\n\n/**\n * Contains methods that provide event capabilities to an object which is passed\n * to {@link module:evented|evented}.\n *\n * @mixin EventedMixin\n */\nvar EventedMixin = {\n\n  /**\n   * Add a listener to an event (or events) on this object or another evented\n   * object.\n   *\n   * @param  {string|Array|Element|Object} targetOrType\n   *         If this is a string or array, it represents the event type(s)\n   *         that will trigger the listener.\n   *\n   *         Another evented object can be passed here instead, which will\n   *         cause the listener to listen for events on _that_ object.\n   *\n   *         In either case, the listener's `this` value will be bound to\n   *         this object.\n   *\n   * @param  {string|Array|Function} typeOrListener\n   *         If the first argument was a string or array, this should be the\n   *         listener function. Otherwise, this is a string or array of event\n   *         type(s).\n   *\n   * @param  {Function} [listener]\n   *         If the first argument was another evented object, this will be\n   *         the listener function.\n   */\n  on: function on$$1() {\n    var _this = this;\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var _normalizeListenArgs = normalizeListenArgs(this, args),\n        isTargetingSelf = _normalizeListenArgs.isTargetingSelf,\n        target = _normalizeListenArgs.target,\n        type = _normalizeListenArgs.type,\n        listener = _normalizeListenArgs.listener;\n\n    listen(target, 'on', type, listener);\n\n    // If this object is listening to another evented object.\n    if (!isTargetingSelf) {\n\n      // If this object is disposed, remove the listener.\n      var removeListenerOnDispose = function removeListenerOnDispose() {\n        return _this.off(target, type, listener);\n      };\n\n      // Use the same function ID as the listener so we can remove it later it\n      // using the ID of the original listener.\n      removeListenerOnDispose.guid = listener.guid;\n\n      // Add a listener to the target's dispose event as well. This ensures\n      // that if the target is disposed BEFORE this object, we remove the\n      // removal listener that was just added. Otherwise, we create a memory leak.\n      var removeRemoverOnTargetDispose = function removeRemoverOnTargetDispose() {\n        return _this.off('dispose', removeListenerOnDispose);\n      };\n\n      // Use the same function ID as the listener so we can remove it later\n      // it using the ID of the original listener.\n      removeRemoverOnTargetDispose.guid = listener.guid;\n\n      listen(this, 'on', 'dispose', removeListenerOnDispose);\n      listen(target, 'on', 'dispose', removeRemoverOnTargetDispose);\n    }\n  },\n\n\n  /**\n   * Add a listener to an event (or events) on this object or another evented\n   * object. The listener will only be called once and then removed.\n   *\n   * @param  {string|Array|Element|Object} targetOrType\n   *         If this is a string or array, it represents the event type(s)\n   *         that will trigger the listener.\n   *\n   *         Another evented object can be passed here instead, which will\n   *         cause the listener to listen for events on _that_ object.\n   *\n   *         In either case, the listener's `this` value will be bound to\n   *         this object.\n   *\n   * @param  {string|Array|Function} typeOrListener\n   *         If the first argument was a string or array, this should be the\n   *         listener function. Otherwise, this is a string or array of event\n   *         type(s).\n   *\n   * @param  {Function} [listener]\n   *         If the first argument was another evented object, this will be\n   *         the listener function.\n   */\n  one: function one$$1() {\n    var _this2 = this;\n\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    var _normalizeListenArgs2 = normalizeListenArgs(this, args),\n        isTargetingSelf = _normalizeListenArgs2.isTargetingSelf,\n        target = _normalizeListenArgs2.target,\n        type = _normalizeListenArgs2.type,\n        listener = _normalizeListenArgs2.listener;\n\n    // Targeting this evented object.\n\n\n    if (isTargetingSelf) {\n      listen(target, 'one', type, listener);\n\n      // Targeting another evented object.\n    } else {\n      var wrapper = function wrapper() {\n        for (var _len3 = arguments.length, largs = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          largs[_key3] = arguments[_key3];\n        }\n\n        _this2.off(target, type, wrapper);\n        listener.apply(null, largs);\n      };\n\n      // Use the same function ID as the listener so we can remove it later\n      // it using the ID of the original listener.\n      wrapper.guid = listener.guid;\n      listen(target, 'one', type, wrapper);\n    }\n  },\n\n\n  /**\n   * Removes listener(s) from event(s) on an evented object.\n   *\n   * @param  {string|Array|Element|Object} [targetOrType]\n   *         If this is a string or array, it represents the event type(s).\n   *\n   *         Another evented object can be passed here instead, in which case\n   *         ALL 3 arguments are _required_.\n   *\n   * @param  {string|Array|Function} [typeOrListener]\n   *         If the first argument was a string or array, this may be the\n   *         listener function. Otherwise, this is a string or array of event\n   *         type(s).\n   *\n   * @param  {Function} [listener]\n   *         If the first argument was another evented object, this will be\n   *         the listener function; otherwise, _all_ listeners bound to the\n   *         event type(s) will be removed.\n   */\n  off: function off$$1(targetOrType, typeOrListener, listener) {\n\n    // Targeting this evented object.\n    if (!targetOrType || isValidEventType(targetOrType)) {\n      off(this.eventBusEl_, targetOrType, typeOrListener);\n\n      // Targeting another evented object.\n    } else {\n      var target = targetOrType;\n      var type = typeOrListener;\n\n      // Fail fast and in a meaningful way!\n      validateTarget(target);\n      validateEventType(type);\n      validateListener(listener);\n\n      // Ensure there's at least a guid, even if the function hasn't been used\n      listener = bind(this, listener);\n\n      // Remove the dispose listener on this evented object, which was given\n      // the same guid as the event listener in on().\n      this.off('dispose', listener);\n\n      if (target.nodeName) {\n        off(target, type, listener);\n        off(target, 'dispose', listener);\n      } else if (isEvented(target)) {\n        target.off(type, listener);\n        target.off('dispose', listener);\n      }\n    }\n  },\n\n\n  /**\n   * Fire an event on this evented object, causing its listeners to be called.\n   *\n   * @param   {string|Object} event\n   *          An event type or an object with a type property.\n   *\n   * @param   {Object} [hash]\n   *          An additional object to pass along to listeners.\n   *\n   * @returns {boolean}\n   *          Whether or not the default behavior was prevented.\n   */\n  trigger: function trigger$$1(event, hash) {\n    return trigger(this.eventBusEl_, event, hash);\n  }\n};\n\n/**\n * Applies {@link module:evented~EventedMixin|EventedMixin} to a target object.\n *\n * @param  {Object} target\n *         The object to which to add event methods.\n *\n * @param  {Object} [options={}]\n *         Options for customizing the mixin behavior.\n *\n * @param  {String} [options.eventBusKey]\n *         By default, adds a `eventBusEl_` DOM element to the target object,\n *         which is used as an event bus. If the target object already has a\n *         DOM element that should be used, pass its key here.\n *\n * @return {Object}\n *         The target object.\n */\nfunction evented(target) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var eventBusKey = options.eventBusKey;\n\n  // Set or create the eventBusEl_.\n\n  if (eventBusKey) {\n    if (!target[eventBusKey].nodeName) {\n      throw new Error('The eventBusKey \"' + eventBusKey + '\" does not refer to an element.');\n    }\n    target.eventBusEl_ = target[eventBusKey];\n  } else {\n    target.eventBusEl_ = createEl('span', { className: 'vjs-event-bus' });\n  }\n\n  assign(target, EventedMixin);\n\n  // When any evented object is disposed, it removes all its listeners.\n  target.on('dispose', function () {\n    target.off();\n    window$1.setTimeout(function () {\n      target.eventBusEl_ = null;\n    }, 0);\n  });\n\n  return target;\n}\n\n/**\n * @file mixins/stateful.js\n * @module stateful\n */\n\n/**\n * Contains methods that provide statefulness to an object which is passed\n * to {@link module:stateful}.\n *\n * @mixin StatefulMixin\n */\nvar StatefulMixin = {\n\n  /**\n   * A hash containing arbitrary keys and values representing the state of\n   * the object.\n   *\n   * @type {Object}\n   */\n  state: {},\n\n  /**\n   * Set the state of an object by mutating its\n   * {@link module:stateful~StatefulMixin.state|state} object in place.\n   *\n   * @fires   module:stateful~StatefulMixin#statechanged\n   * @param   {Object|Function} stateUpdates\n   *          A new set of properties to shallow-merge into the plugin state.\n   *          Can be a plain object or a function returning a plain object.\n   *\n   * @returns {Object|undefined}\n   *          An object containing changes that occurred. If no changes\n   *          occurred, returns `undefined`.\n   */\n  setState: function setState(stateUpdates) {\n    var _this = this;\n\n    // Support providing the `stateUpdates` state as a function.\n    if (typeof stateUpdates === 'function') {\n      stateUpdates = stateUpdates();\n    }\n\n    var changes = void 0;\n\n    each(stateUpdates, function (value, key) {\n\n      // Record the change if the value is different from what's in the\n      // current state.\n      if (_this.state[key] !== value) {\n        changes = changes || {};\n        changes[key] = {\n          from: _this.state[key],\n          to: value\n        };\n      }\n\n      _this.state[key] = value;\n    });\n\n    // Only trigger \"statechange\" if there were changes AND we have a trigger\n    // function. This allows us to not require that the target object be an\n    // evented object.\n    if (changes && isEvented(this)) {\n\n      /**\n       * An event triggered on an object that is both\n       * {@link module:stateful|stateful} and {@link module:evented|evented}\n       * indicating that its state has changed.\n       *\n       * @event    module:stateful~StatefulMixin#statechanged\n       * @type     {Object}\n       * @property {Object} changes\n       *           A hash containing the properties that were changed and\n       *           the values they were changed `from` and `to`.\n       */\n      this.trigger({\n        changes: changes,\n        type: 'statechanged'\n      });\n    }\n\n    return changes;\n  }\n};\n\n/**\n * Applies {@link module:stateful~StatefulMixin|StatefulMixin} to a target\n * object.\n *\n * If the target object is {@link module:evented|evented} and has a\n * `handleStateChanged` method, that method will be automatically bound to the\n * `statechanged` event on itself.\n *\n * @param   {Object} target\n *          The object to be made stateful.\n *\n * @param   {Object} [defaultState]\n *          A default set of properties to populate the newly-stateful object's\n *          `state` property.\n *\n * @returns {Object}\n *          Returns the `target`.\n */\nfunction stateful(target, defaultState) {\n  assign(target, StatefulMixin);\n\n  // This happens after the mixing-in because we need to replace the `state`\n  // added in that step.\n  target.state = assign({}, target.state, defaultState);\n\n  // Auto-bind the `handleStateChanged` method of the target object if it exists.\n  if (typeof target.handleStateChanged === 'function' && isEvented(target)) {\n    target.on('statechanged', target.handleStateChanged);\n  }\n\n  return target;\n}\n\n/**\n * @file to-title-case.js\n * @module to-title-case\n */\n\n/**\n * Uppercase the first letter of a string.\n *\n * @param {string} string\n *        String to be uppercased\n *\n * @return {string}\n *         The string with an uppercased first letter\n */\nfunction toTitleCase(string) {\n  if (typeof string !== 'string') {\n    return string;\n  }\n\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n/**\n * Compares the TitleCase versions of the two strings for equality.\n *\n * @param {string} str1\n *        The first string to compare\n *\n * @param {string} str2\n *        The second string to compare\n *\n * @return {boolean}\n *         Whether the TitleCase versions of the strings are equal\n */\nfunction titleCaseEquals(str1, str2) {\n  return toTitleCase(str1) === toTitleCase(str2);\n}\n\n/**\n * @file merge-options.js\n * @module merge-options\n */\n\n/**\n * Deep-merge one or more options objects, recursively merging **only** plain\n * object properties.\n *\n * @param   {Object[]} sources\n *          One or more objects to merge into a new object.\n *\n * @returns {Object}\n *          A new object that is the merged result of all sources.\n */\nfunction mergeOptions() {\n  var result = {};\n\n  for (var _len = arguments.length, sources = Array(_len), _key = 0; _key < _len; _key++) {\n    sources[_key] = arguments[_key];\n  }\n\n  sources.forEach(function (source) {\n    if (!source) {\n      return;\n    }\n\n    each(source, function (value, key) {\n      if (!isPlain(value)) {\n        result[key] = value;\n        return;\n      }\n\n      if (!isPlain(result[key])) {\n        result[key] = {};\n      }\n\n      result[key] = mergeOptions(result[key], value);\n    });\n  });\n\n  return result;\n}\n\n/**\n * Player Component - Base class for all UI objects\n *\n * @file component.js\n */\n\n/**\n * Base class for all UI Components.\n * Components are UI objects which represent both a javascript object and an element\n * in the DOM. They can be children of other components, and can have\n * children themselves.\n *\n * Components can also use methods from {@link EventTarget}\n */\n\nvar Component = function () {\n\n  /**\n   * A callback that is called when a component is ready. Does not have any\n   * paramters and any callback value will be ignored.\n   *\n   * @callback Component~ReadyCallback\n   * @this Component\n   */\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Object[]} [options.children]\n   *        An array of children objects to intialize this component with. Children objects have\n   *        a name property that will be used if more than one component of the same type needs to be\n   *        added.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        Function that gets called when the `Component` is ready.\n   */\n  function Component(player, options, ready) {\n    classCallCheck(this, Component);\n\n\n    // The component might be the player itself and we can't pass `this` to super\n    if (!player && this.play) {\n      this.player_ = player = this; // eslint-disable-line\n    } else {\n      this.player_ = player;\n    }\n\n    // Make a copy of prototype.options_ to protect against overriding defaults\n    this.options_ = mergeOptions({}, this.options_);\n\n    // Updated options with supplied options\n    options = this.options_ = mergeOptions(this.options_, options);\n\n    // Get ID from options or options element if one is supplied\n    this.id_ = options.id || options.el && options.el.id;\n\n    // If there was no ID from the options, generate one\n    if (!this.id_) {\n      // Don't require the player ID function in the case of mock players\n      var id = player && player.id && player.id() || 'no_player';\n\n      this.id_ = id + '_component_' + newGUID();\n    }\n\n    this.name_ = options.name || null;\n\n    // Create element if one wasn't provided in options\n    if (options.el) {\n      this.el_ = options.el;\n    } else if (options.createEl !== false) {\n      this.el_ = this.createEl();\n    }\n\n    // if evented is anything except false, we want to mixin in evented\n    if (options.evented !== false) {\n      // Make this an evented object and use `el_`, if available, as its event bus\n      evented(this, { eventBusKey: this.el_ ? 'el_' : null });\n    }\n    stateful(this, this.constructor.defaultState);\n\n    this.children_ = [];\n    this.childIndex_ = {};\n    this.childNameIndex_ = {};\n\n    // Add any child components in options\n    if (options.initChildren !== false) {\n      this.initChildren();\n    }\n\n    this.ready(ready);\n    // Don't want to trigger ready here or it will before init is actually\n    // finished for all children that run this constructor\n\n    if (options.reportTouchActivity !== false) {\n      this.enableTouchActivity();\n    }\n  }\n\n  /**\n   * Dispose of the `Component` and all child components.\n   *\n   * @fires Component#dispose\n   */\n\n\n  Component.prototype.dispose = function dispose() {\n\n    /**\n     * Triggered when a `Component` is disposed.\n     *\n     * @event Component#dispose\n     * @type {EventTarget~Event}\n     *\n     * @property {boolean} [bubbles=false]\n     *           set to false so that the close event does not\n     *           bubble up\n     */\n    this.trigger({ type: 'dispose', bubbles: false });\n\n    // Dispose all children.\n    if (this.children_) {\n      for (var i = this.children_.length - 1; i >= 0; i--) {\n        if (this.children_[i].dispose) {\n          this.children_[i].dispose();\n        }\n      }\n    }\n\n    // Delete child references\n    this.children_ = null;\n    this.childIndex_ = null;\n    this.childNameIndex_ = null;\n\n    if (this.el_) {\n      // Remove element from DOM\n      if (this.el_.parentNode) {\n        this.el_.parentNode.removeChild(this.el_);\n      }\n\n      removeData(this.el_);\n      this.el_ = null;\n    }\n\n    // remove reference to the player after disposing of the element\n    this.player_ = null;\n  };\n\n  /**\n   * Return the {@link Player} that the `Component` has attached to.\n   *\n   * @return {Player}\n   *         The player that this `Component` has attached to.\n   */\n\n\n  Component.prototype.player = function player() {\n    return this.player_;\n  };\n\n  /**\n   * Deep merge of options objects with new options.\n   * > Note: When both `obj` and `options` contain properties whose values are objects.\n   *         The two properties get merged using {@link module:mergeOptions}\n   *\n   * @param {Object} obj\n   *        The object that contains new options.\n   *\n   * @return {Object}\n   *         A new object of `this.options_` and `obj` merged together.\n   *\n   * @deprecated since version 5\n   */\n\n\n  Component.prototype.options = function options(obj) {\n    log$1.warn('this.options() has been deprecated and will be moved to the constructor in 6.0');\n\n    if (!obj) {\n      return this.options_;\n    }\n\n    this.options_ = mergeOptions(this.options_, obj);\n    return this.options_;\n  };\n\n  /**\n   * Get the `Component`s DOM element\n   *\n   * @return {Element}\n   *         The DOM element for this `Component`.\n   */\n\n\n  Component.prototype.el = function el() {\n    return this.el_;\n  };\n\n  /**\n   * Create the `Component`s DOM element.\n   *\n   * @param {string} [tagName]\n   *        Element's DOM node type. e.g. 'div'\n   *\n   * @param {Object} [properties]\n   *        An object of properties that should be set.\n   *\n   * @param {Object} [attributes]\n   *        An object of attributes that should be set.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n\n\n  Component.prototype.createEl = function createEl$$1(tagName, properties, attributes) {\n    return createEl(tagName, properties, attributes);\n  };\n\n  /**\n   * Localize a string given the string in english.\n   *\n   * If tokens are provided, it'll try and run a simple token replacement on the provided string.\n   * The tokens it looks for look like `{1}` with the index being 1-indexed into the tokens array.\n   *\n   * If a `defaultValue` is provided, it'll use that over `string`,\n   * if a value isn't found in provided language files.\n   * This is useful if you want to have a descriptive key for token replacement\n   * but have a succinct localized string and not require `en.json` to be included.\n   *\n   * Currently, it is used for the progress bar timing.\n   * ```js\n   * {\n   *   \"progress bar timing: currentTime={1} duration={2}\": \"{1} of {2}\"\n   * }\n   * ```\n   * It is then used like so:\n   * ```js\n   * this.localize('progress bar timing: currentTime={1} duration{2}',\n   *               [this.player_.currentTime(), this.player_.duration()],\n   *               '{1} of {2}');\n   * ```\n   *\n   * Which outputs something like: `01:23 of 24:56`.\n   *\n   *\n   * @param {string} string\n   *        The string to localize and the key to lookup in the language files.\n   * @param {string[]} [tokens]\n   *        If the current item has token replacements, provide the tokens here.\n   * @param {string} [defaultValue]\n   *        Defaults to `string`. Can be a default value to use for token replacement\n   *        if the lookup key is needed to be separate.\n   *\n   * @return {string}\n   *         The localized string or if no localization exists the english string.\n   */\n\n\n  Component.prototype.localize = function localize(string, tokens) {\n    var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : string;\n\n    var code = this.player_.language && this.player_.language();\n    var languages = this.player_.languages && this.player_.languages();\n    var language = languages && languages[code];\n    var primaryCode = code && code.split('-')[0];\n    var primaryLang = languages && languages[primaryCode];\n\n    var localizedString = defaultValue;\n\n    if (language && language[string]) {\n      localizedString = language[string];\n    } else if (primaryLang && primaryLang[string]) {\n      localizedString = primaryLang[string];\n    }\n\n    if (tokens) {\n      localizedString = localizedString.replace(/\\{(\\d+)\\}/g, function (match, index) {\n        var value = tokens[index - 1];\n        var ret = value;\n\n        if (typeof value === 'undefined') {\n          ret = match;\n        }\n\n        return ret;\n      });\n    }\n\n    return localizedString;\n  };\n\n  /**\n   * Return the `Component`s DOM element. This is where children get inserted.\n   * This will usually be the the same as the element returned in {@link Component#el}.\n   *\n   * @return {Element}\n   *         The content element for this `Component`.\n   */\n\n\n  Component.prototype.contentEl = function contentEl() {\n    return this.contentEl_ || this.el_;\n  };\n\n  /**\n   * Get this `Component`s ID\n   *\n   * @return {string}\n   *         The id of this `Component`\n   */\n\n\n  Component.prototype.id = function id() {\n    return this.id_;\n  };\n\n  /**\n   * Get the `Component`s name. The name gets used to reference the `Component`\n   * and is set during registration.\n   *\n   * @return {string}\n   *         The name of this `Component`.\n   */\n\n\n  Component.prototype.name = function name() {\n    return this.name_;\n  };\n\n  /**\n   * Get an array of all child components\n   *\n   * @return {Array}\n   *         The children\n   */\n\n\n  Component.prototype.children = function children() {\n    return this.children_;\n  };\n\n  /**\n   * Returns the child `Component` with the given `id`.\n   *\n   * @param {string} id\n   *        The id of the child `Component` to get.\n   *\n   * @return {Component|undefined}\n   *         The child `Component` with the given `id` or undefined.\n   */\n\n\n  Component.prototype.getChildById = function getChildById(id) {\n    return this.childIndex_[id];\n  };\n\n  /**\n   * Returns the child `Component` with the given `name`.\n   *\n   * @param {string} name\n   *        The name of the child `Component` to get.\n   *\n   * @return {Component|undefined}\n   *         The child `Component` with the given `name` or undefined.\n   */\n\n\n  Component.prototype.getChild = function getChild(name) {\n    if (!name) {\n      return;\n    }\n\n    name = toTitleCase(name);\n\n    return this.childNameIndex_[name];\n  };\n\n  /**\n   * Add a child `Component` inside the current `Component`.\n   *\n   *\n   * @param {string|Component} child\n   *        The name or instance of a child to add.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of options that will get passed to children of\n   *        the child.\n   *\n   * @param {number} [index=this.children_.length]\n   *        The index to attempt to add a child into.\n   *\n   * @return {Component}\n   *         The `Component` that gets added as a child. When using a string the\n   *         `Component` will get created by this process.\n   */\n\n\n  Component.prototype.addChild = function addChild(child) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.children_.length;\n\n    var component = void 0;\n    var componentName = void 0;\n\n    // If child is a string, create component with options\n    if (typeof child === 'string') {\n      componentName = toTitleCase(child);\n\n      var componentClassName = options.componentClass || componentName;\n\n      // Set name through options\n      options.name = componentName;\n\n      // Create a new object & element for this controls set\n      // If there's no .player_, this is a player\n      var ComponentClass = Component.getComponent(componentClassName);\n\n      if (!ComponentClass) {\n        throw new Error('Component ' + componentClassName + ' does not exist');\n      }\n\n      // data stored directly on the videojs object may be\n      // misidentified as a component to retain\n      // backwards-compatibility with 4.x. check to make sure the\n      // component class can be instantiated.\n      if (typeof ComponentClass !== 'function') {\n        return null;\n      }\n\n      component = new ComponentClass(this.player_ || this, options);\n\n      // child is a component instance\n    } else {\n      component = child;\n    }\n\n    this.children_.splice(index, 0, component);\n\n    if (typeof component.id === 'function') {\n      this.childIndex_[component.id()] = component;\n    }\n\n    // If a name wasn't used to create the component, check if we can use the\n    // name function of the component\n    componentName = componentName || component.name && toTitleCase(component.name());\n\n    if (componentName) {\n      this.childNameIndex_[componentName] = component;\n    }\n\n    // Add the UI object's element to the container div (box)\n    // Having an element is not required\n    if (typeof component.el === 'function' && component.el()) {\n      var childNodes = this.contentEl().children;\n      var refNode = childNodes[index] || null;\n\n      this.contentEl().insertBefore(component.el(), refNode);\n    }\n\n    // Return so it can stored on parent object if desired.\n    return component;\n  };\n\n  /**\n   * Remove a child `Component` from this `Component`s list of children. Also removes\n   * the child `Component`s element from this `Component`s element.\n   *\n   * @param {Component} component\n   *        The child `Component` to remove.\n   */\n\n\n  Component.prototype.removeChild = function removeChild(component) {\n    if (typeof component === 'string') {\n      component = this.getChild(component);\n    }\n\n    if (!component || !this.children_) {\n      return;\n    }\n\n    var childFound = false;\n\n    for (var i = this.children_.length - 1; i >= 0; i--) {\n      if (this.children_[i] === component) {\n        childFound = true;\n        this.children_.splice(i, 1);\n        break;\n      }\n    }\n\n    if (!childFound) {\n      return;\n    }\n\n    this.childIndex_[component.id()] = null;\n    this.childNameIndex_[component.name()] = null;\n\n    var compEl = component.el();\n\n    if (compEl && compEl.parentNode === this.contentEl()) {\n      this.contentEl().removeChild(component.el());\n    }\n  };\n\n  /**\n   * Add and initialize default child `Component`s based upon options.\n   */\n\n\n  Component.prototype.initChildren = function initChildren() {\n    var _this = this;\n\n    var children = this.options_.children;\n\n    if (children) {\n      // `this` is `parent`\n      var parentOptions = this.options_;\n\n      var handleAdd = function handleAdd(child) {\n        var name = child.name;\n        var opts = child.opts;\n\n        // Allow options for children to be set at the parent options\n        // e.g. videojs(id, { controlBar: false });\n        // instead of videojs(id, { children: { controlBar: false });\n        if (parentOptions[name] !== undefined) {\n          opts = parentOptions[name];\n        }\n\n        // Allow for disabling default components\n        // e.g. options['children']['posterImage'] = false\n        if (opts === false) {\n          return;\n        }\n\n        // Allow options to be passed as a simple boolean if no configuration\n        // is necessary.\n        if (opts === true) {\n          opts = {};\n        }\n\n        // We also want to pass the original player options\n        // to each component as well so they don't need to\n        // reach back into the player for options later.\n        opts.playerOptions = _this.options_.playerOptions;\n\n        // Create and add the child component.\n        // Add a direct reference to the child by name on the parent instance.\n        // If two of the same component are used, different names should be supplied\n        // for each\n        var newChild = _this.addChild(name, opts);\n\n        if (newChild) {\n          _this[name] = newChild;\n        }\n      };\n\n      // Allow for an array of children details to passed in the options\n      var workingChildren = void 0;\n      var Tech = Component.getComponent('Tech');\n\n      if (Array.isArray(children)) {\n        workingChildren = children;\n      } else {\n        workingChildren = Object.keys(children);\n      }\n\n      workingChildren\n      // children that are in this.options_ but also in workingChildren  would\n      // give us extra children we do not want. So, we want to filter them out.\n      .concat(Object.keys(this.options_).filter(function (child) {\n        return !workingChildren.some(function (wchild) {\n          if (typeof wchild === 'string') {\n            return child === wchild;\n          }\n          return child === wchild.name;\n        });\n      })).map(function (child) {\n        var name = void 0;\n        var opts = void 0;\n\n        if (typeof child === 'string') {\n          name = child;\n          opts = children[name] || _this.options_[name] || {};\n        } else {\n          name = child.name;\n          opts = child;\n        }\n\n        return { name: name, opts: opts };\n      }).filter(function (child) {\n        // we have to make sure that child.name isn't in the techOrder since\n        // techs are registerd as Components but can't aren't compatible\n        // See https://github.com/videojs/video.js/issues/2772\n        var c = Component.getComponent(child.opts.componentClass || toTitleCase(child.name));\n\n        return c && !Tech.isTech(c);\n      }).forEach(handleAdd);\n    }\n  };\n\n  /**\n   * Builds the default DOM class name. Should be overriden by sub-components.\n   *\n   * @return {string}\n   *         The DOM class name for this object.\n   *\n   * @abstract\n   */\n\n\n  Component.prototype.buildCSSClass = function buildCSSClass() {\n    // Child classes can include a function that does:\n    // return 'CLASS NAME' + this._super();\n    return '';\n  };\n\n  /**\n   * Bind a listener to the component's ready state.\n   * Different from event listeners in that if the ready event has already happened\n   * it will trigger the function immediately.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n\n\n  Component.prototype.ready = function ready(fn) {\n    var sync = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (!fn) {\n      return;\n    }\n\n    if (!this.isReady_) {\n      this.readyQueue_ = this.readyQueue_ || [];\n      this.readyQueue_.push(fn);\n      return;\n    }\n\n    if (sync) {\n      fn.call(this);\n    } else {\n      // Call the function asynchronously by default for consistency\n      this.setTimeout(fn, 1);\n    }\n  };\n\n  /**\n   * Trigger all the ready listeners for this `Component`.\n   *\n   * @fires Component#ready\n   */\n\n\n  Component.prototype.triggerReady = function triggerReady() {\n    this.isReady_ = true;\n\n    // Ensure ready is triggered asynchronously\n    this.setTimeout(function () {\n      var readyQueue = this.readyQueue_;\n\n      // Reset Ready Queue\n      this.readyQueue_ = [];\n\n      if (readyQueue && readyQueue.length > 0) {\n        readyQueue.forEach(function (fn) {\n          fn.call(this);\n        }, this);\n      }\n\n      // Allow for using event listeners also\n      /**\n       * Triggered when a `Component` is ready.\n       *\n       * @event Component#ready\n       * @type {EventTarget~Event}\n       */\n      this.trigger('ready');\n    }, 1);\n  };\n\n  /**\n   * Find a single DOM element matching a `selector`. This can be within the `Component`s\n   * `contentEl()` or another custom context.\n   *\n   * @param {string} selector\n   *        A valid CSS selector, which will be passed to `querySelector`.\n   *\n   * @param {Element|string} [context=this.contentEl()]\n   *        A DOM element within which to query. Can also be a selector string in\n   *        which case the first matching element will get used as context. If\n   *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns\n   *        nothing it falls back to `document`.\n   *\n   * @return {Element|null}\n   *         the dom element that was found, or null\n   *\n   * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)\n   */\n\n\n  Component.prototype.$ = function $$$1(selector, context) {\n    return $(selector, context || this.contentEl());\n  };\n\n  /**\n   * Finds all DOM element matching a `selector`. This can be within the `Component`s\n   * `contentEl()` or another custom context.\n   *\n   * @param {string} selector\n   *        A valid CSS selector, which will be passed to `querySelectorAll`.\n   *\n   * @param {Element|string} [context=this.contentEl()]\n   *        A DOM element within which to query. Can also be a selector string in\n   *        which case the first matching element will get used as context. If\n   *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns\n   *        nothing it falls back to `document`.\n   *\n   * @return {NodeList}\n   *         a list of dom elements that were found\n   *\n   * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)\n   */\n\n\n  Component.prototype.$$ = function $$$$1(selector, context) {\n    return $$(selector, context || this.contentEl());\n  };\n\n  /**\n   * Check if a component's element has a CSS class name.\n   *\n   * @param {string} classToCheck\n   *        CSS class name to check.\n   *\n   * @return {boolean}\n   *         - True if the `Component` has the class.\n   *         - False if the `Component` does not have the class`\n   */\n\n\n  Component.prototype.hasClass = function hasClass$$1(classToCheck) {\n    return hasClass(this.el_, classToCheck);\n  };\n\n  /**\n   * Add a CSS class name to the `Component`s element.\n   *\n   * @param {string} classToAdd\n   *        CSS class name to add\n   */\n\n\n  Component.prototype.addClass = function addClass$$1(classToAdd) {\n    addClass(this.el_, classToAdd);\n  };\n\n  /**\n   * Remove a CSS class name from the `Component`s element.\n   *\n   * @param {string} classToRemove\n   *        CSS class name to remove\n   */\n\n\n  Component.prototype.removeClass = function removeClass$$1(classToRemove) {\n    removeClass(this.el_, classToRemove);\n  };\n\n  /**\n   * Add or remove a CSS class name from the component's element.\n   * - `classToToggle` gets added when {@link Component#hasClass} would return false.\n   * - `classToToggle` gets removed when {@link Component#hasClass} would return true.\n   *\n   * @param  {string} classToToggle\n   *         The class to add or remove based on (@link Component#hasClass}\n   *\n   * @param  {boolean|Dom~predicate} [predicate]\n   *         An {@link Dom~predicate} function or a boolean\n   */\n\n\n  Component.prototype.toggleClass = function toggleClass$$1(classToToggle, predicate) {\n    toggleClass(this.el_, classToToggle, predicate);\n  };\n\n  /**\n   * Show the `Component`s element if it is hidden by removing the\n   * 'vjs-hidden' class name from it.\n   */\n\n\n  Component.prototype.show = function show() {\n    this.removeClass('vjs-hidden');\n  };\n\n  /**\n   * Hide the `Component`s element if it is currently showing by adding the\n   * 'vjs-hidden` class name to it.\n   */\n\n\n  Component.prototype.hide = function hide() {\n    this.addClass('vjs-hidden');\n  };\n\n  /**\n   * Lock a `Component`s element in its visible state by adding the 'vjs-lock-showing'\n   * class name to it. Used during fadeIn/fadeOut.\n   *\n   * @private\n   */\n\n\n  Component.prototype.lockShowing = function lockShowing() {\n    this.addClass('vjs-lock-showing');\n  };\n\n  /**\n   * Unlock a `Component`s element from its visible state by removing the 'vjs-lock-showing'\n   * class name from it. Used during fadeIn/fadeOut.\n   *\n   * @private\n   */\n\n\n  Component.prototype.unlockShowing = function unlockShowing() {\n    this.removeClass('vjs-lock-showing');\n  };\n\n  /**\n   * Get the value of an attribute on the `Component`s element.\n   *\n   * @param {string} attribute\n   *        Name of the attribute to get the value from.\n   *\n   * @return {string|null}\n   *         - The value of the attribute that was asked for.\n   *         - Can be an empty string on some browsers if the attribute does not exist\n   *           or has no value\n   *         - Most browsers will return null if the attibute does not exist or has\n   *           no value.\n   *\n   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute}\n   */\n\n\n  Component.prototype.getAttribute = function getAttribute$$1(attribute) {\n    return getAttribute(this.el_, attribute);\n  };\n\n  /**\n   * Set the value of an attribute on the `Component`'s element\n   *\n   * @param {string} attribute\n   *        Name of the attribute to set.\n   *\n   * @param {string} value\n   *        Value to set the attribute to.\n   *\n   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute}\n   */\n\n\n  Component.prototype.setAttribute = function setAttribute$$1(attribute, value) {\n    setAttribute(this.el_, attribute, value);\n  };\n\n  /**\n   * Remove an attribute from the `Component`s element.\n   *\n   * @param {string} attribute\n   *        Name of the attribute to remove.\n   *\n   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute}\n   */\n\n\n  Component.prototype.removeAttribute = function removeAttribute$$1(attribute) {\n    removeAttribute(this.el_, attribute);\n  };\n\n  /**\n   * Get or set the width of the component based upon the CSS styles.\n   * See {@link Component#dimension} for more detailed information.\n   *\n   * @param {number|string} [num]\n   *        The width that you want to set postfixed with '%', 'px' or nothing.\n   *\n   * @param {boolean} [skipListeners]\n   *        Skip the componentresize event trigger\n   *\n   * @return {number|string}\n   *         The width when getting, zero if there is no width. Can be a string\n   *           postpixed with '%' or 'px'.\n   */\n\n\n  Component.prototype.width = function width(num, skipListeners) {\n    return this.dimension('width', num, skipListeners);\n  };\n\n  /**\n   * Get or set the height of the component based upon the CSS styles.\n   * See {@link Component#dimension} for more detailed information.\n   *\n   * @param {number|string} [num]\n   *        The height that you want to set postfixed with '%', 'px' or nothing.\n   *\n   * @param {boolean} [skipListeners]\n   *        Skip the componentresize event trigger\n   *\n   * @return {number|string}\n   *         The width when getting, zero if there is no width. Can be a string\n   *         postpixed with '%' or 'px'.\n   */\n\n\n  Component.prototype.height = function height(num, skipListeners) {\n    return this.dimension('height', num, skipListeners);\n  };\n\n  /**\n   * Set both the width and height of the `Component` element at the same time.\n   *\n   * @param  {number|string} width\n   *         Width to set the `Component`s element to.\n   *\n   * @param  {number|string} height\n   *         Height to set the `Component`s element to.\n   */\n\n\n  Component.prototype.dimensions = function dimensions(width, height) {\n    // Skip componentresize listeners on width for optimization\n    this.width(width, true);\n    this.height(height);\n  };\n\n  /**\n   * Get or set width or height of the `Component` element. This is the shared code\n   * for the {@link Component#width} and {@link Component#height}.\n   *\n   * Things to know:\n   * - If the width or height in an number this will return the number postfixed with 'px'.\n   * - If the width/height is a percent this will return the percent postfixed with '%'\n   * - Hidden elements have a width of 0 with `window.getComputedStyle`. This function\n   *   defaults to the `Component`s `style.width` and falls back to `window.getComputedStyle`.\n   *   See [this]{@link http://www.foliotek.com/devblog/getting-the-width-of-a-hidden-element-with-jquery-using-width/}\n   *   for more information\n   * - If you want the computed style of the component, use {@link Component#currentWidth}\n   *   and {@link {Component#currentHeight}\n   *\n   * @fires Component#componentresize\n   *\n   * @param {string} widthOrHeight\n   8        'width' or 'height'\n   *\n   * @param  {number|string} [num]\n   8         New dimension\n   *\n   * @param  {boolean} [skipListeners]\n   *         Skip componentresize event trigger\n   *\n   * @return {number}\n   *         The dimension when getting or 0 if unset\n   */\n\n\n  Component.prototype.dimension = function dimension(widthOrHeight, num, skipListeners) {\n    if (num !== undefined) {\n      // Set to zero if null or literally NaN (NaN !== NaN)\n      if (num === null || num !== num) {\n        num = 0;\n      }\n\n      // Check if using css width/height (% or px) and adjust\n      if (('' + num).indexOf('%') !== -1 || ('' + num).indexOf('px') !== -1) {\n        this.el_.style[widthOrHeight] = num;\n      } else if (num === 'auto') {\n        this.el_.style[widthOrHeight] = '';\n      } else {\n        this.el_.style[widthOrHeight] = num + 'px';\n      }\n\n      // skipListeners allows us to avoid triggering the resize event when setting both width and height\n      if (!skipListeners) {\n        /**\n         * Triggered when a component is resized.\n         *\n         * @event Component#componentresize\n         * @type {EventTarget~Event}\n         */\n        this.trigger('componentresize');\n      }\n\n      return;\n    }\n\n    // Not setting a value, so getting it\n    // Make sure element exists\n    if (!this.el_) {\n      return 0;\n    }\n\n    // Get dimension value from style\n    var val = this.el_.style[widthOrHeight];\n    var pxIndex = val.indexOf('px');\n\n    if (pxIndex !== -1) {\n      // Return the pixel value with no 'px'\n      return parseInt(val.slice(0, pxIndex), 10);\n    }\n\n    // No px so using % or no style was set, so falling back to offsetWidth/height\n    // If component has display:none, offset will return 0\n    // TODO: handle display:none and no dimension style using px\n    return parseInt(this.el_['offset' + toTitleCase(widthOrHeight)], 10);\n  };\n\n  /**\n   * Get the width or the height of the `Component` elements computed style. Uses\n   * `window.getComputedStyle`.\n   *\n   * @param {string} widthOrHeight\n   *        A string containing 'width' or 'height'. Whichever one you want to get.\n   *\n   * @return {number}\n   *         The dimension that gets asked for or 0 if nothing was set\n   *         for that dimension.\n   */\n\n\n  Component.prototype.currentDimension = function currentDimension(widthOrHeight) {\n    var computedWidthOrHeight = 0;\n\n    if (widthOrHeight !== 'width' && widthOrHeight !== 'height') {\n      throw new Error('currentDimension only accepts width or height value');\n    }\n\n    if (typeof window$1.getComputedStyle === 'function') {\n      var computedStyle = window$1.getComputedStyle(this.el_);\n\n      computedWidthOrHeight = computedStyle.getPropertyValue(widthOrHeight) || computedStyle[widthOrHeight];\n    }\n\n    // remove 'px' from variable and parse as integer\n    computedWidthOrHeight = parseFloat(computedWidthOrHeight);\n\n    // if the computed value is still 0, it's possible that the browser is lying\n    // and we want to check the offset values.\n    // This code also runs wherever getComputedStyle doesn't exist.\n    if (computedWidthOrHeight === 0) {\n      var rule = 'offset' + toTitleCase(widthOrHeight);\n\n      computedWidthOrHeight = this.el_[rule];\n    }\n\n    return computedWidthOrHeight;\n  };\n\n  /**\n   * An object that contains width and height values of the `Component`s\n   * computed style. Uses `window.getComputedStyle`.\n   *\n   * @typedef {Object} Component~DimensionObject\n   *\n   * @property {number} width\n   *           The width of the `Component`s computed style.\n   *\n   * @property {number} height\n   *           The height of the `Component`s computed style.\n   */\n\n  /**\n   * Get an object that contains width and height values of the `Component`s\n   * computed style.\n   *\n   * @return {Component~DimensionObject}\n   *         The dimensions of the components element\n   */\n\n\n  Component.prototype.currentDimensions = function currentDimensions() {\n    return {\n      width: this.currentDimension('width'),\n      height: this.currentDimension('height')\n    };\n  };\n\n  /**\n   * Get the width of the `Component`s computed style. Uses `window.getComputedStyle`.\n   *\n   * @return {number} width\n   *           The width of the `Component`s computed style.\n   */\n\n\n  Component.prototype.currentWidth = function currentWidth() {\n    return this.currentDimension('width');\n  };\n\n  /**\n   * Get the height of the `Component`s computed style. Uses `window.getComputedStyle`.\n   *\n   * @return {number} height\n   *           The height of the `Component`s computed style.\n   */\n\n\n  Component.prototype.currentHeight = function currentHeight() {\n    return this.currentDimension('height');\n  };\n\n  /**\n   * Set the focus to this component\n   */\n\n\n  Component.prototype.focus = function focus() {\n    this.el_.focus();\n  };\n\n  /**\n   * Remove the focus from this component\n   */\n\n\n  Component.prototype.blur = function blur() {\n    this.el_.blur();\n  };\n\n  /**\n   * Emit a 'tap' events when touch event support gets detected. This gets used to\n   * support toggling the controls through a tap on the video. They get enabled\n   * because every sub-component would have extra overhead otherwise.\n   *\n   * @private\n   * @fires Component#tap\n   * @listens Component#touchstart\n   * @listens Component#touchmove\n   * @listens Component#touchleave\n   * @listens Component#touchcancel\n   * @listens Component#touchend\n    */\n\n\n  Component.prototype.emitTapEvents = function emitTapEvents() {\n    // Track the start time so we can determine how long the touch lasted\n    var touchStart = 0;\n    var firstTouch = null;\n\n    // Maximum movement allowed during a touch event to still be considered a tap\n    // Other popular libs use anywhere from 2 (hammer.js) to 15,\n    // so 10 seems like a nice, round number.\n    var tapMovementThreshold = 10;\n\n    // The maximum length a touch can be while still being considered a tap\n    var touchTimeThreshold = 200;\n\n    var couldBeTap = void 0;\n\n    this.on('touchstart', function (event) {\n      // If more than one finger, don't consider treating this as a click\n      if (event.touches.length === 1) {\n        // Copy pageX/pageY from the object\n        firstTouch = {\n          pageX: event.touches[0].pageX,\n          pageY: event.touches[0].pageY\n        };\n        // Record start time so we can detect a tap vs. \"touch and hold\"\n        touchStart = new Date().getTime();\n        // Reset couldBeTap tracking\n        couldBeTap = true;\n      }\n    });\n\n    this.on('touchmove', function (event) {\n      // If more than one finger, don't consider treating this as a click\n      if (event.touches.length > 1) {\n        couldBeTap = false;\n      } else if (firstTouch) {\n        // Some devices will throw touchmoves for all but the slightest of taps.\n        // So, if we moved only a small distance, this could still be a tap\n        var xdiff = event.touches[0].pageX - firstTouch.pageX;\n        var ydiff = event.touches[0].pageY - firstTouch.pageY;\n        var touchDistance = Math.sqrt(xdiff * xdiff + ydiff * ydiff);\n\n        if (touchDistance > tapMovementThreshold) {\n          couldBeTap = false;\n        }\n      }\n    });\n\n    var noTap = function noTap() {\n      couldBeTap = false;\n    };\n\n    // TODO: Listen to the original target. http://youtu.be/DujfpXOKUp8?t=13m8s\n    this.on('touchleave', noTap);\n    this.on('touchcancel', noTap);\n\n    // When the touch ends, measure how long it took and trigger the appropriate\n    // event\n    this.on('touchend', function (event) {\n      firstTouch = null;\n      // Proceed only if the touchmove/leave/cancel event didn't happen\n      if (couldBeTap === true) {\n        // Measure how long the touch lasted\n        var touchTime = new Date().getTime() - touchStart;\n\n        // Make sure the touch was less than the threshold to be considered a tap\n        if (touchTime < touchTimeThreshold) {\n          // Don't let browser turn this into a click\n          event.preventDefault();\n          /**\n           * Triggered when a `Component` is tapped.\n           *\n           * @event Component#tap\n           * @type {EventTarget~Event}\n           */\n          this.trigger('tap');\n          // It may be good to copy the touchend event object and change the\n          // type to tap, if the other event properties aren't exact after\n          // Events.fixEvent runs (e.g. event.target)\n        }\n      }\n    });\n  };\n\n  /**\n   * This function reports user activity whenever touch events happen. This can get\n   * turned off by any sub-components that wants touch events to act another way.\n   *\n   * Report user touch activity when touch events occur. User activity gets used to\n   * determine when controls should show/hide. It is simple when it comes to mouse\n   * events, because any mouse event should show the controls. So we capture mouse\n   * events that bubble up to the player and report activity when that happens.\n   * With touch events it isn't as easy as `touchstart` and `touchend` toggle player\n   * controls. So touch events can't help us at the player level either.\n   *\n   * User activity gets checked asynchronously. So what could happen is a tap event\n   * on the video turns the controls off. Then the `touchend` event bubbles up to\n   * the player. Which, if it reported user activity, would turn the controls right\n   * back on. We also don't want to completely block touch events from bubbling up.\n   * Furthermore a `touchmove` event and anything other than a tap, should not turn\n   * controls back on.\n   *\n   * @listens Component#touchstart\n   * @listens Component#touchmove\n   * @listens Component#touchend\n   * @listens Component#touchcancel\n   */\n\n\n  Component.prototype.enableTouchActivity = function enableTouchActivity() {\n    // Don't continue if the root player doesn't support reporting user activity\n    if (!this.player() || !this.player().reportUserActivity) {\n      return;\n    }\n\n    // listener for reporting that the user is active\n    var report = bind(this.player(), this.player().reportUserActivity);\n\n    var touchHolding = void 0;\n\n    this.on('touchstart', function () {\n      report();\n      // For as long as the they are touching the device or have their mouse down,\n      // we consider them active even if they're not moving their finger or mouse.\n      // So we want to continue to update that they are active\n      this.clearInterval(touchHolding);\n      // report at the same interval as activityCheck\n      touchHolding = this.setInterval(report, 250);\n    });\n\n    var touchEnd = function touchEnd(event) {\n      report();\n      // stop the interval that maintains activity if the touch is holding\n      this.clearInterval(touchHolding);\n    };\n\n    this.on('touchmove', report);\n    this.on('touchend', touchEnd);\n    this.on('touchcancel', touchEnd);\n  };\n\n  /**\n   * A callback that has no parameters and is bound into `Component`s context.\n   *\n   * @callback Component~GenericCallback\n   * @this Component\n   */\n\n  /**\n   * Creates a function that runs after an `x` millisecond timeout. This function is a\n   * wrapper around `window.setTimeout`. There are a few reasons to use this one\n   * instead though:\n   * 1. It gets cleared via  {@link Component#clearTimeout} when\n   *    {@link Component#dispose} gets called.\n   * 2. The function callback will gets turned into a {@link Component~GenericCallback}\n   *\n   * > Note: You can't use `window.clearTimeout` on the id returned by this function. This\n   *         will cause its dispose listener not to get cleaned up! Please use\n   *         {@link Component#clearTimeout} or {@link Component#dispose} instead.\n   *\n   * @param {Component~GenericCallback} fn\n   *        The function that will be run after `timeout`.\n   *\n   * @param {number} timeout\n   *        Timeout in milliseconds to delay before executing the specified function.\n   *\n   * @return {number}\n   *         Returns a timeout ID that gets used to identify the timeout. It can also\n   *         get used in {@link Component#clearTimeout} to clear the timeout that\n   *         was set.\n   *\n   * @listens Component#dispose\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout}\n   */\n\n\n  Component.prototype.setTimeout = function setTimeout(fn, timeout) {\n    var _this2 = this;\n\n    // declare as variables so they are properly available in timeout function\n    // eslint-disable-next-line\n    var timeoutId, disposeFn;\n\n    fn = bind(this, fn);\n\n    timeoutId = window$1.setTimeout(function () {\n      _this2.off('dispose', disposeFn);\n      fn();\n    }, timeout);\n\n    disposeFn = function disposeFn() {\n      return _this2.clearTimeout(timeoutId);\n    };\n\n    disposeFn.guid = 'vjs-timeout-' + timeoutId;\n\n    this.on('dispose', disposeFn);\n\n    return timeoutId;\n  };\n\n  /**\n   * Clears a timeout that gets created via `window.setTimeout` or\n   * {@link Component#setTimeout}. If you set a timeout via {@link Component#setTimeout}\n   * use this function instead of `window.clearTimout`. If you don't your dispose\n   * listener will not get cleaned up until {@link Component#dispose}!\n   *\n   * @param {number} timeoutId\n   *        The id of the timeout to clear. The return value of\n   *        {@link Component#setTimeout} or `window.setTimeout`.\n   *\n   * @return {number}\n   *         Returns the timeout id that was cleared.\n   *\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearTimeout}\n   */\n\n\n  Component.prototype.clearTimeout = function clearTimeout(timeoutId) {\n    window$1.clearTimeout(timeoutId);\n\n    var disposeFn = function disposeFn() {};\n\n    disposeFn.guid = 'vjs-timeout-' + timeoutId;\n\n    this.off('dispose', disposeFn);\n\n    return timeoutId;\n  };\n\n  /**\n   * Creates a function that gets run every `x` milliseconds. This function is a wrapper\n   * around `window.setInterval`. There are a few reasons to use this one instead though.\n   * 1. It gets cleared via  {@link Component#clearInterval} when\n   *    {@link Component#dispose} gets called.\n   * 2. The function callback will be a {@link Component~GenericCallback}\n   *\n   * @param {Component~GenericCallback} fn\n   *        The function to run every `x` seconds.\n   *\n   * @param {number} interval\n   *        Execute the specified function every `x` milliseconds.\n   *\n   * @return {number}\n   *         Returns an id that can be used to identify the interval. It can also be be used in\n   *         {@link Component#clearInterval} to clear the interval.\n   *\n   * @listens Component#dispose\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval}\n   */\n\n\n  Component.prototype.setInterval = function setInterval(fn, interval) {\n    var _this3 = this;\n\n    fn = bind(this, fn);\n\n    var intervalId = window$1.setInterval(fn, interval);\n\n    var disposeFn = function disposeFn() {\n      return _this3.clearInterval(intervalId);\n    };\n\n    disposeFn.guid = 'vjs-interval-' + intervalId;\n\n    this.on('dispose', disposeFn);\n\n    return intervalId;\n  };\n\n  /**\n   * Clears an interval that gets created via `window.setInterval` or\n   * {@link Component#setInterval}. If you set an inteval via {@link Component#setInterval}\n   * use this function instead of `window.clearInterval`. If you don't your dispose\n   * listener will not get cleaned up until {@link Component#dispose}!\n   *\n   * @param {number} intervalId\n   *        The id of the interval to clear. The return value of\n   *        {@link Component#setInterval} or `window.setInterval`.\n   *\n   * @return {number}\n   *         Returns the interval id that was cleared.\n   *\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearInterval}\n   */\n\n\n  Component.prototype.clearInterval = function clearInterval(intervalId) {\n    window$1.clearInterval(intervalId);\n\n    var disposeFn = function disposeFn() {};\n\n    disposeFn.guid = 'vjs-interval-' + intervalId;\n\n    this.off('dispose', disposeFn);\n\n    return intervalId;\n  };\n\n  /**\n   * Queues up a callback to be passed to requestAnimationFrame (rAF), but\n   * with a few extra bonuses:\n   *\n   * - Supports browsers that do not support rAF by falling back to\n   *   {@link Component#setTimeout}.\n   *\n   * - The callback is turned into a {@link Component~GenericCallback} (i.e.\n   *   bound to the component).\n   *\n   * - Automatic cancellation of the rAF callback is handled if the component\n   *   is disposed before it is called.\n   *\n   * @param  {Component~GenericCallback} fn\n   *         A function that will be bound to this component and executed just\n   *         before the browser's next repaint.\n   *\n   * @return {number}\n   *         Returns an rAF ID that gets used to identify the timeout. It can\n   *         also be used in {@link Component#cancelAnimationFrame} to cancel\n   *         the animation frame callback.\n   *\n   * @listens Component#dispose\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame}\n   */\n\n\n  Component.prototype.requestAnimationFrame = function requestAnimationFrame(fn) {\n    var _this4 = this;\n\n    // declare as variables so they are properly available in rAF function\n    // eslint-disable-next-line\n    var id, disposeFn;\n\n    if (this.supportsRaf_) {\n      fn = bind(this, fn);\n\n      id = window$1.requestAnimationFrame(function () {\n        _this4.off('dispose', disposeFn);\n        fn();\n      });\n\n      disposeFn = function disposeFn() {\n        return _this4.cancelAnimationFrame(id);\n      };\n\n      disposeFn.guid = 'vjs-raf-' + id;\n      this.on('dispose', disposeFn);\n\n      return id;\n    }\n\n    // Fall back to using a timer.\n    return this.setTimeout(fn, 1000 / 60);\n  };\n\n  /**\n   * Cancels a queued callback passed to {@link Component#requestAnimationFrame}\n   * (rAF).\n   *\n   * If you queue an rAF callback via {@link Component#requestAnimationFrame},\n   * use this function instead of `window.cancelAnimationFrame`. If you don't,\n   * your dispose listener will not get cleaned up until {@link Component#dispose}!\n   *\n   * @param {number} id\n   *        The rAF ID to clear. The return value of {@link Component#requestAnimationFrame}.\n   *\n   * @return {number}\n   *         Returns the rAF ID that was cleared.\n   *\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/window/cancelAnimationFrame}\n   */\n\n\n  Component.prototype.cancelAnimationFrame = function cancelAnimationFrame(id) {\n    if (this.supportsRaf_) {\n      window$1.cancelAnimationFrame(id);\n\n      var disposeFn = function disposeFn() {};\n\n      disposeFn.guid = 'vjs-raf-' + id;\n\n      this.off('dispose', disposeFn);\n\n      return id;\n    }\n\n    // Fall back to using a timer.\n    return this.clearTimeout(id);\n  };\n\n  /**\n   * Register a `Component` with `videojs` given the name and the component.\n   *\n   * > NOTE: {@link Tech}s should not be registered as a `Component`. {@link Tech}s\n   *         should be registered using {@link Tech.registerTech} or\n   *         {@link videojs:videojs.registerTech}.\n   *\n   * > NOTE: This function can also be seen on videojs as\n   *         {@link videojs:videojs.registerComponent}.\n   *\n   * @param {string} name\n   *        The name of the `Component` to register.\n   *\n   * @param {Component} ComponentToRegister\n   *        The `Component` class to register.\n   *\n   * @return {Component}\n   *         The `Component` that was registered.\n   */\n\n\n  Component.registerComponent = function registerComponent(name, ComponentToRegister) {\n    if (typeof name !== 'string' || !name) {\n      throw new Error('Illegal component name, \"' + name + '\"; must be a non-empty string.');\n    }\n\n    var Tech = Component.getComponent('Tech');\n\n    // We need to make sure this check is only done if Tech has been registered.\n    var isTech = Tech && Tech.isTech(ComponentToRegister);\n    var isComp = Component === ComponentToRegister || Component.prototype.isPrototypeOf(ComponentToRegister.prototype);\n\n    if (isTech || !isComp) {\n      var reason = void 0;\n\n      if (isTech) {\n        reason = 'techs must be registered using Tech.registerTech()';\n      } else {\n        reason = 'must be a Component subclass';\n      }\n\n      throw new Error('Illegal component, \"' + name + '\"; ' + reason + '.');\n    }\n\n    name = toTitleCase(name);\n\n    if (!Component.components_) {\n      Component.components_ = {};\n    }\n\n    var Player = Component.getComponent('Player');\n\n    if (name === 'Player' && Player && Player.players) {\n      var players = Player.players;\n      var playerNames = Object.keys(players);\n\n      // If we have players that were disposed, then their name will still be\n      // in Players.players. So, we must loop through and verify that the value\n      // for each item is not null. This allows registration of the Player component\n      // after all players have been disposed or before any were created.\n      if (players && playerNames.length > 0 && playerNames.map(function (pname) {\n        return players[pname];\n      }).every(Boolean)) {\n        throw new Error('Can not register Player component after player has been created.');\n      }\n    }\n\n    Component.components_[name] = ComponentToRegister;\n\n    return ComponentToRegister;\n  };\n\n  /**\n   * Get a `Component` based on the name it was registered with.\n   *\n   * @param {string} name\n   *        The Name of the component to get.\n   *\n   * @return {Component}\n   *         The `Component` that got registered under the given name.\n   *\n   * @deprecated In `videojs` 6 this will not return `Component`s that were not\n   *             registered using {@link Component.registerComponent}. Currently we\n   *             check the global `videojs` object for a `Component` name and\n   *             return that if it exists.\n   */\n\n\n  Component.getComponent = function getComponent(name) {\n    if (!name) {\n      return;\n    }\n\n    name = toTitleCase(name);\n\n    if (Component.components_ && Component.components_[name]) {\n      return Component.components_[name];\n    }\n  };\n\n  return Component;\n}();\n\n/**\n * Whether or not this component supports `requestAnimationFrame`.\n *\n * This is exposed primarily for testing purposes.\n *\n * @private\n * @type {Boolean}\n */\n\n\nComponent.prototype.supportsRaf_ = typeof window$1.requestAnimationFrame === 'function' && typeof window$1.cancelAnimationFrame === 'function';\n\nComponent.registerComponent('Component', Component);\n\n/**\n * @file browser.js\n * @module browser\n */\n\nvar USER_AGENT = window$1.navigator && window$1.navigator.userAgent || '';\nvar webkitVersionMap = /AppleWebKit\\/([\\d.]+)/i.exec(USER_AGENT);\nvar appleWebkitVersion = webkitVersionMap ? parseFloat(webkitVersionMap.pop()) : null;\n\n/*\n * Device is an iPhone\n *\n * @type {Boolean}\n * @constant\n * @private\n */\nvar IS_IPAD = /iPad/i.test(USER_AGENT);\n\n// The Facebook app's UIWebView identifies as both an iPhone and iPad, so\n// to identify iPhones, we need to exclude iPads.\n// http://artsy.github.io/blog/2012/10/18/the-perils-of-ios-user-agent-sniffing/\nvar IS_IPHONE = /iPhone/i.test(USER_AGENT) && !IS_IPAD;\nvar IS_IPOD = /iPod/i.test(USER_AGENT);\nvar IS_IOS = IS_IPHONE || IS_IPAD || IS_IPOD;\n\nvar IOS_VERSION = function () {\n  var match = USER_AGENT.match(/OS (\\d+)_/i);\n\n  if (match && match[1]) {\n    return match[1];\n  }\n  return null;\n}();\n\nvar IS_ANDROID = /Android/i.test(USER_AGENT);\nvar ANDROID_VERSION = function () {\n  // This matches Android Major.Minor.Patch versions\n  // ANDROID_VERSION is Major.Minor as a Number, if Minor isn't available, then only Major is returned\n  var match = USER_AGENT.match(/Android (\\d+)(?:\\.(\\d+))?(?:\\.(\\d+))*/i);\n\n  if (!match) {\n    return null;\n  }\n\n  var major = match[1] && parseFloat(match[1]);\n  var minor = match[2] && parseFloat(match[2]);\n\n  if (major && minor) {\n    return parseFloat(match[1] + '.' + match[2]);\n  } else if (major) {\n    return major;\n  }\n  return null;\n}();\n\nvar IS_NATIVE_ANDROID = IS_ANDROID && ANDROID_VERSION < 5 && appleWebkitVersion < 537;\n\nvar IS_FIREFOX = /Firefox/i.test(USER_AGENT);\nvar IS_EDGE = /Edge/i.test(USER_AGENT);\nvar IS_CHROME = !IS_EDGE && (/Chrome/i.test(USER_AGENT) || /CriOS/i.test(USER_AGENT));\nvar CHROME_VERSION = function () {\n  var match = USER_AGENT.match(/(Chrome|CriOS)\\/(\\d+)/);\n\n  if (match && match[2]) {\n    return parseFloat(match[2]);\n  }\n  return null;\n}();\nvar IE_VERSION = function () {\n  var result = /MSIE\\s(\\d+)\\.\\d/.exec(USER_AGENT);\n  var version = result && parseFloat(result[1]);\n\n  if (!version && /Trident\\/7.0/i.test(USER_AGENT) && /rv:11.0/.test(USER_AGENT)) {\n    // IE 11 has a different user agent string than other IE versions\n    version = 11.0;\n  }\n\n  return version;\n}();\n\nvar IS_SAFARI = /Safari/i.test(USER_AGENT) && !IS_CHROME && !IS_ANDROID && !IS_EDGE;\nvar IS_ANY_SAFARI = (IS_SAFARI || IS_IOS) && !IS_CHROME;\n\nvar TOUCH_ENABLED = isReal() && ('ontouchstart' in window$1 || window$1.navigator.maxTouchPoints || window$1.DocumentTouch && window$1.document instanceof window$1.DocumentTouch);\n\nvar browser = /*#__PURE__*/Object.freeze({\n  IS_IPAD: IS_IPAD,\n  IS_IPHONE: IS_IPHONE,\n  IS_IPOD: IS_IPOD,\n  IS_IOS: IS_IOS,\n  IOS_VERSION: IOS_VERSION,\n  IS_ANDROID: IS_ANDROID,\n  ANDROID_VERSION: ANDROID_VERSION,\n  IS_NATIVE_ANDROID: IS_NATIVE_ANDROID,\n  IS_FIREFOX: IS_FIREFOX,\n  IS_EDGE: IS_EDGE,\n  IS_CHROME: IS_CHROME,\n  CHROME_VERSION: CHROME_VERSION,\n  IE_VERSION: IE_VERSION,\n  IS_SAFARI: IS_SAFARI,\n  IS_ANY_SAFARI: IS_ANY_SAFARI,\n  TOUCH_ENABLED: TOUCH_ENABLED\n});\n\n/**\n * @file time-ranges.js\n * @module time-ranges\n */\n\n/**\n * Returns the time for the specified index at the start or end\n * of a TimeRange object.\n *\n * @function time-ranges:indexFunction\n *\n * @param {number} [index=0]\n *        The range number to return the time for.\n *\n * @return {number}\n *         The time that offset at the specified index.\n *\n * @depricated index must be set to a value, in the future this will throw an error.\n */\n\n/**\n * An object that contains ranges of time for various reasons.\n *\n * @typedef {Object} TimeRange\n *\n * @property {number} length\n *           The number of time ranges represented by this Object\n *\n * @property {time-ranges:indexFunction} start\n *           Returns the time offset at which a specified time range begins.\n *\n * @property {time-ranges:indexFunction} end\n *           Returns the time offset at which a specified time range ends.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges\n */\n\n/**\n * Check if any of the time ranges are over the maximum index.\n *\n * @param {string} fnName\n *        The function name to use for logging\n *\n * @param {number} index\n *        The index to check\n *\n * @param {number} maxIndex\n *        The maximum possible index\n *\n * @throws {Error} if the timeRanges provided are over the maxIndex\n */\nfunction rangeCheck(fnName, index, maxIndex) {\n  if (typeof index !== 'number' || index < 0 || index > maxIndex) {\n    throw new Error('Failed to execute \\'' + fnName + '\\' on \\'TimeRanges\\': The index provided (' + index + ') is non-numeric or out of bounds (0-' + maxIndex + ').');\n  }\n}\n\n/**\n * Get the time for the specified index at the start or end\n * of a TimeRange object.\n *\n * @param {string} fnName\n *        The function name to use for logging\n *\n * @param {string} valueIndex\n *        The property that should be used to get the time. should be 'start' or 'end'\n *\n * @param {Array} ranges\n *        An array of time ranges\n *\n * @param {Array} [rangeIndex=0]\n *        The index to start the search at\n *\n * @return {number}\n *         The time that offset at the specified index.\n *\n *\n * @depricated rangeIndex must be set to a value, in the future this will throw an error.\n * @throws {Error} if rangeIndex is more than the length of ranges\n */\nfunction getRange(fnName, valueIndex, ranges, rangeIndex) {\n  rangeCheck(fnName, rangeIndex, ranges.length - 1);\n  return ranges[rangeIndex][valueIndex];\n}\n\n/**\n * Create a time range object given ranges of time.\n *\n * @param {Array} [ranges]\n *        An array of time ranges.\n */\nfunction createTimeRangesObj(ranges) {\n  if (ranges === undefined || ranges.length === 0) {\n    return {\n      length: 0,\n      start: function start() {\n        throw new Error('This TimeRanges object is empty');\n      },\n      end: function end() {\n        throw new Error('This TimeRanges object is empty');\n      }\n    };\n  }\n  return {\n    length: ranges.length,\n    start: getRange.bind(null, 'start', 0, ranges),\n    end: getRange.bind(null, 'end', 1, ranges)\n  };\n}\n\n/**\n * Should create a fake `TimeRange` object which mimics an HTML5 time range instance.\n *\n * @param {number|Array} start\n *        The start of a single range or an array of ranges\n *\n * @param {number} end\n *        The end of a single range.\n *\n * @private\n */\nfunction createTimeRanges(start, end) {\n  if (Array.isArray(start)) {\n    return createTimeRangesObj(start);\n  } else if (start === undefined || end === undefined) {\n    return createTimeRangesObj();\n  }\n  return createTimeRangesObj([[start, end]]);\n}\n\n/**\n * @file buffer.js\n * @module buffer\n */\n\n/**\n * Compute the percentage of the media that has been buffered.\n *\n * @param {TimeRange} buffered\n *        The current `TimeRange` object representing buffered time ranges\n *\n * @param {number} duration\n *        Total duration of the media\n *\n * @return {number}\n *         Percent buffered of the total duration in decimal form.\n */\nfunction bufferedPercent(buffered, duration) {\n  var bufferedDuration = 0;\n  var start = void 0;\n  var end = void 0;\n\n  if (!duration) {\n    return 0;\n  }\n\n  if (!buffered || !buffered.length) {\n    buffered = createTimeRanges(0, 0);\n  }\n\n  for (var i = 0; i < buffered.length; i++) {\n    start = buffered.start(i);\n    end = buffered.end(i);\n\n    // buffered end can be bigger than duration by a very small fraction\n    if (end > duration) {\n      end = duration;\n    }\n\n    bufferedDuration += end - start;\n  }\n\n  return bufferedDuration / duration;\n}\n\n/**\n * @file fullscreen-api.js\n * @module fullscreen-api\n * @private\n */\n\n/**\n * Store the browser-specific methods for the fullscreen API.\n *\n * @type {Object}\n * @see [Specification]{@link https://fullscreen.spec.whatwg.org}\n * @see [Map Approach From Screenfull.js]{@link https://github.com/sindresorhus/screenfull.js}\n */\nvar FullscreenApi = {};\n\n// browser API methods\nvar apiMap = [['requestFullscreen', 'exitFullscreen', 'fullscreenElement', 'fullscreenEnabled', 'fullscreenchange', 'fullscreenerror'],\n// WebKit\n['webkitRequestFullscreen', 'webkitExitFullscreen', 'webkitFullscreenElement', 'webkitFullscreenEnabled', 'webkitfullscreenchange', 'webkitfullscreenerror'],\n// Old WebKit (Safari 5.1)\n['webkitRequestFullScreen', 'webkitCancelFullScreen', 'webkitCurrentFullScreenElement', 'webkitCancelFullScreen', 'webkitfullscreenchange', 'webkitfullscreenerror'],\n// Mozilla\n['mozRequestFullScreen', 'mozCancelFullScreen', 'mozFullScreenElement', 'mozFullScreenEnabled', 'mozfullscreenchange', 'mozfullscreenerror'],\n// Microsoft\n['msRequestFullscreen', 'msExitFullscreen', 'msFullscreenElement', 'msFullscreenEnabled', 'MSFullscreenChange', 'MSFullscreenError']];\n\nvar specApi = apiMap[0];\nvar browserApi = void 0;\n\n// determine the supported set of functions\nfor (var i = 0; i < apiMap.length; i++) {\n  // check for exitFullscreen function\n  if (apiMap[i][1] in document) {\n    browserApi = apiMap[i];\n    break;\n  }\n}\n\n// map the browser API names to the spec API names\nif (browserApi) {\n  for (var _i = 0; _i < browserApi.length; _i++) {\n    FullscreenApi[specApi[_i]] = browserApi[_i];\n  }\n}\n\n/**\n * @file media-error.js\n */\n\n/**\n * A Custom `MediaError` class which mimics the standard HTML5 `MediaError` class.\n *\n * @param {number|string|Object|MediaError} value\n *        This can be of multiple types:\n *        - number: should be a standard error code\n *        - string: an error message (the code will be 0)\n *        - Object: arbitrary properties\n *        - `MediaError` (native): used to populate a video.js `MediaError` object\n *        - `MediaError` (video.js): will return itself if it's already a\n *          video.js `MediaError` object.\n *\n * @see [MediaError Spec]{@link https://dev.w3.org/html5/spec-author-view/video.html#mediaerror}\n * @see [Encrypted MediaError Spec]{@link https://www.w3.org/TR/2013/WD-encrypted-media-20130510/#error-codes}\n *\n * @class MediaError\n */\nfunction MediaError(value) {\n\n  // Allow redundant calls to this constructor to avoid having `instanceof`\n  // checks peppered around the code.\n  if (value instanceof MediaError) {\n    return value;\n  }\n\n  if (typeof value === 'number') {\n    this.code = value;\n  } else if (typeof value === 'string') {\n    // default code is zero, so this is a custom error\n    this.message = value;\n  } else if (isObject(value)) {\n\n    // We assign the `code` property manually because native `MediaError` objects\n    // do not expose it as an own/enumerable property of the object.\n    if (typeof value.code === 'number') {\n      this.code = value.code;\n    }\n\n    assign(this, value);\n  }\n\n  if (!this.message) {\n    this.message = MediaError.defaultMessages[this.code] || '';\n  }\n}\n\n/**\n * The error code that refers two one of the defined `MediaError` types\n *\n * @type {Number}\n */\nMediaError.prototype.code = 0;\n\n/**\n * An optional message that to show with the error. Message is not part of the HTML5\n * video spec but allows for more informative custom errors.\n *\n * @type {String}\n */\nMediaError.prototype.message = '';\n\n/**\n * An optional status code that can be set by plugins to allow even more detail about\n * the error. For example a plugin might provide a specific HTTP status code and an\n * error message for that code. Then when the plugin gets that error this class will\n * know how to display an error message for it. This allows a custom message to show\n * up on the `Player` error overlay.\n *\n * @type {Array}\n */\nMediaError.prototype.status = null;\n\n/**\n * Errors indexed by the W3C standard. The order **CANNOT CHANGE**! See the\n * specification listed under {@link MediaError} for more information.\n *\n * @enum {array}\n * @readonly\n * @property {string} 0 - MEDIA_ERR_CUSTOM\n * @property {string} 1 - MEDIA_ERR_CUSTOM\n * @property {string} 2 - MEDIA_ERR_ABORTED\n * @property {string} 3 - MEDIA_ERR_NETWORK\n * @property {string} 4 - MEDIA_ERR_SRC_NOT_SUPPORTED\n * @property {string} 5 - MEDIA_ERR_ENCRYPTED\n */\nMediaError.errorTypes = ['MEDIA_ERR_CUSTOM', 'MEDIA_ERR_ABORTED', 'MEDIA_ERR_NETWORK', 'MEDIA_ERR_DECODE', 'MEDIA_ERR_SRC_NOT_SUPPORTED', 'MEDIA_ERR_ENCRYPTED'];\n\n/**\n * The default `MediaError` messages based on the {@link MediaError.errorTypes}.\n *\n * @type {Array}\n * @constant\n */\nMediaError.defaultMessages = {\n  1: 'You aborted the media playback',\n  2: 'A network error caused the media download to fail part-way.',\n  3: 'The media playback was aborted due to a corruption problem or because the media used features your browser did not support.',\n  4: 'The media could not be loaded, either because the server or network failed or because the format is not supported.',\n  5: 'The media is encrypted and we do not have the keys to decrypt it.'\n};\n\n// Add types as properties on MediaError\n// e.g. MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED = 4;\nfor (var errNum = 0; errNum < MediaError.errorTypes.length; errNum++) {\n  MediaError[MediaError.errorTypes[errNum]] = errNum;\n  // values should be accessible on both the class and instance\n  MediaError.prototype[MediaError.errorTypes[errNum]] = errNum;\n}\n\n/**\n * Returns whether an object is `Promise`-like (i.e. has a `then` method).\n *\n * @param  {Object}  value\n *         An object that may or may not be `Promise`-like.\n *\n * @return {Boolean}\n *         Whether or not the object is `Promise`-like.\n */\nfunction isPromise(value) {\n  return value !== undefined && value !== null && typeof value.then === 'function';\n}\n\n/**\n * Silence a Promise-like object.\n *\n * This is useful for avoiding non-harmful, but potentially confusing \"uncaught\n * play promise\" rejection error messages.\n *\n * @param  {Object} value\n *         An object that may or may not be `Promise`-like.\n */\nfunction silencePromise(value) {\n  if (isPromise(value)) {\n    value.then(null, function (e) {});\n  }\n}\n\n/**\n * @file text-track-list-converter.js Utilities for capturing text track state and\n * re-creating tracks based on a capture.\n *\n * @module text-track-list-converter\n */\n\n/**\n * Examine a single {@link TextTrack} and return a JSON-compatible javascript object that\n * represents the {@link TextTrack}'s state.\n *\n * @param {TextTrack} track\n *        The text track to query.\n *\n * @return {Object}\n *         A serializable javascript representation of the TextTrack.\n * @private\n */\nvar trackToJson_ = function trackToJson_(track) {\n  var ret = ['kind', 'label', 'language', 'id', 'inBandMetadataTrackDispatchType', 'mode', 'src'].reduce(function (acc, prop, i) {\n\n    if (track[prop]) {\n      acc[prop] = track[prop];\n    }\n\n    return acc;\n  }, {\n    cues: track.cues && Array.prototype.map.call(track.cues, function (cue) {\n      return {\n        startTime: cue.startTime,\n        endTime: cue.endTime,\n        text: cue.text,\n        id: cue.id\n      };\n    })\n  });\n\n  return ret;\n};\n\n/**\n * Examine a {@link Tech} and return a JSON-compatible javascript array that represents the\n * state of all {@link TextTrack}s currently configured. The return array is compatible with\n * {@link text-track-list-converter:jsonToTextTracks}.\n *\n * @param {Tech} tech\n *        The tech object to query\n *\n * @return {Array}\n *         A serializable javascript representation of the {@link Tech}s\n *         {@link TextTrackList}.\n */\nvar textTracksToJson = function textTracksToJson(tech) {\n\n  var trackEls = tech.$$('track');\n\n  var trackObjs = Array.prototype.map.call(trackEls, function (t) {\n    return t.track;\n  });\n  var tracks = Array.prototype.map.call(trackEls, function (trackEl) {\n    var json = trackToJson_(trackEl.track);\n\n    if (trackEl.src) {\n      json.src = trackEl.src;\n    }\n    return json;\n  });\n\n  return tracks.concat(Array.prototype.filter.call(tech.textTracks(), function (track) {\n    return trackObjs.indexOf(track) === -1;\n  }).map(trackToJson_));\n};\n\n/**\n * Create a set of remote {@link TextTrack}s on a {@link Tech} based on an array of javascript\n * object {@link TextTrack} representations.\n *\n * @param {Array} json\n *        An array of `TextTrack` representation objects, like those that would be\n *        produced by `textTracksToJson`.\n *\n * @param {Tech} tech\n *        The `Tech` to create the `TextTrack`s on.\n */\nvar jsonToTextTracks = function jsonToTextTracks(json, tech) {\n  json.forEach(function (track) {\n    var addedTrack = tech.addRemoteTextTrack(track).track;\n\n    if (!track.src && track.cues) {\n      track.cues.forEach(function (cue) {\n        return addedTrack.addCue(cue);\n      });\n    }\n  });\n\n  return tech.textTracks();\n};\n\nvar textTrackConverter = { textTracksToJson: textTracksToJson, jsonToTextTracks: jsonToTextTracks, trackToJson_: trackToJson_ };\n\n/**\n * @file modal-dialog.js\n */\n\nvar MODAL_CLASS_NAME = 'vjs-modal-dialog';\nvar ESC = 27;\n\n/**\n * The `ModalDialog` displays over the video and its controls, which blocks\n * interaction with the player until it is closed.\n *\n * Modal dialogs include a \"Close\" button and will close when that button\n * is activated - or when ESC is pressed anywhere.\n *\n * @extends Component\n */\n\nvar ModalDialog = function (_Component) {\n  inherits(ModalDialog, _Component);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Mixed} [options.content=undefined]\n   *        Provide customized content for this modal.\n   *\n   * @param {string} [options.description]\n   *        A text description for the modal, primarily for accessibility.\n   *\n   * @param {boolean} [options.fillAlways=false]\n   *        Normally, modals are automatically filled only the first time\n   *        they open. This tells the modal to refresh its content\n   *        every time it opens.\n   *\n   * @param {string} [options.label]\n   *        A text label for the modal, primarily for accessibility.\n   *\n   * @param {boolean} [options.temporary=true]\n   *        If `true`, the modal can only be opened once; it will be\n   *        disposed as soon as it's closed.\n   *\n   * @param {boolean} [options.uncloseable=false]\n   *        If `true`, the user will not be able to close the modal\n   *        through the UI in the normal ways. Programmatic closing is\n   *        still possible.\n   */\n  function ModalDialog(player, options) {\n    classCallCheck(this, ModalDialog);\n\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));\n\n    _this.opened_ = _this.hasBeenOpened_ = _this.hasBeenFilled_ = false;\n\n    _this.closeable(!_this.options_.uncloseable);\n    _this.content(_this.options_.content);\n\n    // Make sure the contentEl is defined AFTER any children are initialized\n    // because we only want the contents of the modal in the contentEl\n    // (not the UI elements like the close button).\n    _this.contentEl_ = createEl('div', {\n      className: MODAL_CLASS_NAME + '-content'\n    }, {\n      role: 'document'\n    });\n\n    _this.descEl_ = createEl('p', {\n      className: MODAL_CLASS_NAME + '-description vjs-control-text',\n      id: _this.el().getAttribute('aria-describedby')\n    });\n\n    textContent(_this.descEl_, _this.description());\n    _this.el_.appendChild(_this.descEl_);\n    _this.el_.appendChild(_this.contentEl_);\n    return _this;\n  }\n\n  /**\n   * Create the `ModalDialog`'s DOM element\n   *\n   * @return {Element}\n   *         The DOM element that gets created.\n   */\n\n\n  ModalDialog.prototype.createEl = function createEl$$1() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: this.buildCSSClass(),\n      tabIndex: -1\n    }, {\n      'aria-describedby': this.id() + '_description',\n      'aria-hidden': 'true',\n      'aria-label': this.label(),\n      'role': 'dialog'\n    });\n  };\n\n  ModalDialog.prototype.dispose = function dispose() {\n    this.contentEl_ = null;\n    this.descEl_ = null;\n    this.previouslyActiveEl_ = null;\n\n    _Component.prototype.dispose.call(this);\n  };\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  ModalDialog.prototype.buildCSSClass = function buildCSSClass() {\n    return MODAL_CLASS_NAME + ' vjs-hidden ' + _Component.prototype.buildCSSClass.call(this);\n  };\n\n  /**\n   * Handles `keydown` events on the document, looking for ESC, which closes\n   * the modal.\n   *\n   * @param {EventTarget~Event} e\n   *        The keypress that triggered this event.\n   *\n   * @listens keydown\n   */\n\n\n  ModalDialog.prototype.handleKeyPress = function handleKeyPress(e) {\n    if (e.which === ESC && this.closeable()) {\n      this.close();\n    }\n  };\n\n  /**\n   * Returns the label string for this modal. Primarily used for accessibility.\n   *\n   * @return {string}\n   *         the localized or raw label of this modal.\n   */\n\n\n  ModalDialog.prototype.label = function label() {\n    return this.localize(this.options_.label || 'Modal Window');\n  };\n\n  /**\n   * Returns the description string for this modal. Primarily used for\n   * accessibility.\n   *\n   * @return {string}\n   *         The localized or raw description of this modal.\n   */\n\n\n  ModalDialog.prototype.description = function description() {\n    var desc = this.options_.description || this.localize('This is a modal window.');\n\n    // Append a universal closeability message if the modal is closeable.\n    if (this.closeable()) {\n      desc += ' ' + this.localize('This modal can be closed by pressing the Escape key or activating the close button.');\n    }\n\n    return desc;\n  };\n\n  /**\n   * Opens the modal.\n   *\n   * @fires ModalDialog#beforemodalopen\n   * @fires ModalDialog#modalopen\n   */\n\n\n  ModalDialog.prototype.open = function open() {\n    if (!this.opened_) {\n      var player = this.player();\n\n      /**\n        * Fired just before a `ModalDialog` is opened.\n        *\n        * @event ModalDialog#beforemodalopen\n        * @type {EventTarget~Event}\n        */\n      this.trigger('beforemodalopen');\n      this.opened_ = true;\n\n      // Fill content if the modal has never opened before and\n      // never been filled.\n      if (this.options_.fillAlways || !this.hasBeenOpened_ && !this.hasBeenFilled_) {\n        this.fill();\n      }\n\n      // If the player was playing, pause it and take note of its previously\n      // playing state.\n      this.wasPlaying_ = !player.paused();\n\n      if (this.options_.pauseOnOpen && this.wasPlaying_) {\n        player.pause();\n      }\n\n      if (this.closeable()) {\n        this.on(this.el_.ownerDocument, 'keydown', bind(this, this.handleKeyPress));\n      }\n\n      // Hide controls and note if they were enabled.\n      this.hadControls_ = player.controls();\n      player.controls(false);\n\n      this.show();\n      this.conditionalFocus_();\n      this.el().setAttribute('aria-hidden', 'false');\n\n      /**\n        * Fired just after a `ModalDialog` is opened.\n        *\n        * @event ModalDialog#modalopen\n        * @type {EventTarget~Event}\n        */\n      this.trigger('modalopen');\n      this.hasBeenOpened_ = true;\n    }\n  };\n\n  /**\n   * If the `ModalDialog` is currently open or closed.\n   *\n   * @param  {boolean} [value]\n   *         If given, it will open (`true`) or close (`false`) the modal.\n   *\n   * @return {boolean}\n   *         the current open state of the modaldialog\n   */\n\n\n  ModalDialog.prototype.opened = function opened(value) {\n    if (typeof value === 'boolean') {\n      this[value ? 'open' : 'close']();\n    }\n    return this.opened_;\n  };\n\n  /**\n   * Closes the modal, does nothing if the `ModalDialog` is\n   * not open.\n   *\n   * @fires ModalDialog#beforemodalclose\n   * @fires ModalDialog#modalclose\n   */\n\n\n  ModalDialog.prototype.close = function close() {\n    if (!this.opened_) {\n      return;\n    }\n    var player = this.player();\n\n    /**\n      * Fired just before a `ModalDialog` is closed.\n      *\n      * @event ModalDialog#beforemodalclose\n      * @type {EventTarget~Event}\n      */\n    this.trigger('beforemodalclose');\n    this.opened_ = false;\n\n    if (this.wasPlaying_ && this.options_.pauseOnOpen) {\n      player.play();\n    }\n\n    if (this.closeable()) {\n      this.off(this.el_.ownerDocument, 'keydown', bind(this, this.handleKeyPress));\n    }\n\n    if (this.hadControls_) {\n      player.controls(true);\n    }\n\n    this.hide();\n    this.el().setAttribute('aria-hidden', 'true');\n\n    /**\n      * Fired just after a `ModalDialog` is closed.\n      *\n      * @event ModalDialog#modalclose\n      * @type {EventTarget~Event}\n      */\n    this.trigger('modalclose');\n    this.conditionalBlur_();\n\n    if (this.options_.temporary) {\n      this.dispose();\n    }\n  };\n\n  /**\n   * Check to see if the `ModalDialog` is closeable via the UI.\n   *\n   * @param  {boolean} [value]\n   *         If given as a boolean, it will set the `closeable` option.\n   *\n   * @return {boolean}\n   *         Returns the final value of the closable option.\n   */\n\n\n  ModalDialog.prototype.closeable = function closeable(value) {\n    if (typeof value === 'boolean') {\n      var closeable = this.closeable_ = !!value;\n      var close = this.getChild('closeButton');\n\n      // If this is being made closeable and has no close button, add one.\n      if (closeable && !close) {\n\n        // The close button should be a child of the modal - not its\n        // content element, so temporarily change the content element.\n        var temp = this.contentEl_;\n\n        this.contentEl_ = this.el_;\n        close = this.addChild('closeButton', { controlText: 'Close Modal Dialog' });\n        this.contentEl_ = temp;\n        this.on(close, 'close', this.close);\n      }\n\n      // If this is being made uncloseable and has a close button, remove it.\n      if (!closeable && close) {\n        this.off(close, 'close', this.close);\n        this.removeChild(close);\n        close.dispose();\n      }\n    }\n    return this.closeable_;\n  };\n\n  /**\n   * Fill the modal's content element with the modal's \"content\" option.\n   * The content element will be emptied before this change takes place.\n   */\n\n\n  ModalDialog.prototype.fill = function fill() {\n    this.fillWith(this.content());\n  };\n\n  /**\n   * Fill the modal's content element with arbitrary content.\n   * The content element will be emptied before this change takes place.\n   *\n   * @fires ModalDialog#beforemodalfill\n   * @fires ModalDialog#modalfill\n   *\n   * @param {Mixed} [content]\n   *        The same rules apply to this as apply to the `content` option.\n   */\n\n\n  ModalDialog.prototype.fillWith = function fillWith(content) {\n    var contentEl = this.contentEl();\n    var parentEl = contentEl.parentNode;\n    var nextSiblingEl = contentEl.nextSibling;\n\n    /**\n     * Fired just before a `ModalDialog` is filled with content.\n     *\n     * @event ModalDialog#beforemodalfill\n     * @type {EventTarget~Event}\n     */\n    this.trigger('beforemodalfill');\n    this.hasBeenFilled_ = true;\n\n    // Detach the content element from the DOM before performing\n    // manipulation to avoid modifying the live DOM multiple times.\n    parentEl.removeChild(contentEl);\n    this.empty();\n    insertContent(contentEl, content);\n    /**\n     * Fired just after a `ModalDialog` is filled with content.\n     *\n     * @event ModalDialog#modalfill\n     * @type {EventTarget~Event}\n     */\n    this.trigger('modalfill');\n\n    // Re-inject the re-filled content element.\n    if (nextSiblingEl) {\n      parentEl.insertBefore(contentEl, nextSiblingEl);\n    } else {\n      parentEl.appendChild(contentEl);\n    }\n\n    // make sure that the close button is last in the dialog DOM\n    var closeButton = this.getChild('closeButton');\n\n    if (closeButton) {\n      parentEl.appendChild(closeButton.el_);\n    }\n  };\n\n  /**\n   * Empties the content element. This happens anytime the modal is filled.\n   *\n   * @fires ModalDialog#beforemodalempty\n   * @fires ModalDialog#modalempty\n   */\n\n\n  ModalDialog.prototype.empty = function empty() {\n    /**\n     * Fired just before a `ModalDialog` is emptied.\n     *\n     * @event ModalDialog#beforemodalempty\n     * @type {EventTarget~Event}\n     */\n    this.trigger('beforemodalempty');\n    emptyEl(this.contentEl());\n\n    /**\n     * Fired just after a `ModalDialog` is emptied.\n     *\n     * @event ModalDialog#modalempty\n     * @type {EventTarget~Event}\n     */\n    this.trigger('modalempty');\n  };\n\n  /**\n   * Gets or sets the modal content, which gets normalized before being\n   * rendered into the DOM.\n   *\n   * This does not update the DOM or fill the modal, but it is called during\n   * that process.\n   *\n   * @param  {Mixed} [value]\n   *         If defined, sets the internal content value to be used on the\n   *         next call(s) to `fill`. This value is normalized before being\n   *         inserted. To \"clear\" the internal content value, pass `null`.\n   *\n   * @return {Mixed}\n   *         The current content of the modal dialog\n   */\n\n\n  ModalDialog.prototype.content = function content(value) {\n    if (typeof value !== 'undefined') {\n      this.content_ = value;\n    }\n    return this.content_;\n  };\n\n  /**\n   * conditionally focus the modal dialog if focus was previously on the player.\n   *\n   * @private\n   */\n\n\n  ModalDialog.prototype.conditionalFocus_ = function conditionalFocus_() {\n    var activeEl = document.activeElement;\n    var playerEl = this.player_.el_;\n\n    this.previouslyActiveEl_ = null;\n\n    if (playerEl.contains(activeEl) || playerEl === activeEl) {\n      this.previouslyActiveEl_ = activeEl;\n\n      this.focus();\n\n      this.on(document, 'keydown', this.handleKeyDown);\n    }\n  };\n\n  /**\n   * conditionally blur the element and refocus the last focused element\n   *\n   * @private\n   */\n\n\n  ModalDialog.prototype.conditionalBlur_ = function conditionalBlur_() {\n    if (this.previouslyActiveEl_) {\n      this.previouslyActiveEl_.focus();\n      this.previouslyActiveEl_ = null;\n    }\n\n    this.off(document, 'keydown', this.handleKeyDown);\n  };\n\n  /**\n   * Keydown handler. Attached when modal is focused.\n   *\n   * @listens keydown\n   */\n\n\n  ModalDialog.prototype.handleKeyDown = function handleKeyDown(event) {\n    // exit early if it isn't a tab key\n    if (event.which !== 9) {\n      return;\n    }\n\n    var focusableEls = this.focusableEls_();\n    var activeEl = this.el_.querySelector(':focus');\n    var focusIndex = void 0;\n\n    for (var i = 0; i < focusableEls.length; i++) {\n      if (activeEl === focusableEls[i]) {\n        focusIndex = i;\n        break;\n      }\n    }\n\n    if (document.activeElement === this.el_) {\n      focusIndex = 0;\n    }\n\n    if (event.shiftKey && focusIndex === 0) {\n      focusableEls[focusableEls.length - 1].focus();\n      event.preventDefault();\n    } else if (!event.shiftKey && focusIndex === focusableEls.length - 1) {\n      focusableEls[0].focus();\n      event.preventDefault();\n    }\n  };\n\n  /**\n   * get all focusable elements\n   *\n   * @private\n   */\n\n\n  ModalDialog.prototype.focusableEls_ = function focusableEls_() {\n    var allChildren = this.el_.querySelectorAll('*');\n\n    return Array.prototype.filter.call(allChildren, function (child) {\n      return (child instanceof window$1.HTMLAnchorElement || child instanceof window$1.HTMLAreaElement) && child.hasAttribute('href') || (child instanceof window$1.HTMLInputElement || child instanceof window$1.HTMLSelectElement || child instanceof window$1.HTMLTextAreaElement || child instanceof window$1.HTMLButtonElement) && !child.hasAttribute('disabled') || child instanceof window$1.HTMLIFrameElement || child instanceof window$1.HTMLObjectElement || child instanceof window$1.HTMLEmbedElement || child.hasAttribute('tabindex') && child.getAttribute('tabindex') !== -1 || child.hasAttribute('contenteditable');\n    });\n  };\n\n  return ModalDialog;\n}(Component);\n\n/**\n * Default options for `ModalDialog` default options.\n *\n * @type {Object}\n * @private\n */\n\n\nModalDialog.prototype.options_ = {\n  pauseOnOpen: true,\n  temporary: true\n};\n\nComponent.registerComponent('ModalDialog', ModalDialog);\n\n/**\n * @file track-list.js\n */\n\n/**\n * Common functionaliy between {@link TextTrackList}, {@link AudioTrackList}, and\n * {@link VideoTrackList}\n *\n * @extends EventTarget\n */\n\nvar TrackList = function (_EventTarget) {\n  inherits(TrackList, _EventTarget);\n\n  /**\n   * Create an instance of this class\n   *\n   * @param {Track[]} tracks\n   *        A list of tracks to initialize the list with.\n   *\n   * @abstract\n   */\n  function TrackList() {\n    var tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    classCallCheck(this, TrackList);\n\n    var _this = possibleConstructorReturn(this, _EventTarget.call(this));\n\n    _this.tracks_ = [];\n\n    /**\n     * @memberof TrackList\n     * @member {number} length\n     *         The current number of `Track`s in the this Trackist.\n     * @instance\n     */\n    Object.defineProperty(_this, 'length', {\n      get: function get$$1() {\n        return this.tracks_.length;\n      }\n    });\n\n    for (var i = 0; i < tracks.length; i++) {\n      _this.addTrack(tracks[i]);\n    }\n    return _this;\n  }\n\n  /**\n   * Add a {@link Track} to the `TrackList`\n   *\n   * @param {Track} track\n   *        The audio, video, or text track to add to the list.\n   *\n   * @fires TrackList#addtrack\n   */\n\n\n  TrackList.prototype.addTrack = function addTrack(track) {\n    var index = this.tracks_.length;\n\n    if (!('' + index in this)) {\n      Object.defineProperty(this, index, {\n        get: function get$$1() {\n          return this.tracks_[index];\n        }\n      });\n    }\n\n    // Do not add duplicate tracks\n    if (this.tracks_.indexOf(track) === -1) {\n      this.tracks_.push(track);\n      /**\n       * Triggered when a track is added to a track list.\n       *\n       * @event TrackList#addtrack\n       * @type {EventTarget~Event}\n       * @property {Track} track\n       *           A reference to track that was added.\n       */\n      this.trigger({\n        track: track,\n        type: 'addtrack'\n      });\n    }\n  };\n\n  /**\n   * Remove a {@link Track} from the `TrackList`\n   *\n   * @param {Track} rtrack\n   *        The audio, video, or text track to remove from the list.\n   *\n   * @fires TrackList#removetrack\n   */\n\n\n  TrackList.prototype.removeTrack = function removeTrack(rtrack) {\n    var track = void 0;\n\n    for (var i = 0, l = this.length; i < l; i++) {\n      if (this[i] === rtrack) {\n        track = this[i];\n        if (track.off) {\n          track.off();\n        }\n\n        this.tracks_.splice(i, 1);\n\n        break;\n      }\n    }\n\n    if (!track) {\n      return;\n    }\n\n    /**\n     * Triggered when a track is removed from track list.\n     *\n     * @event TrackList#removetrack\n     * @type {EventTarget~Event}\n     * @property {Track} track\n     *           A reference to track that was removed.\n     */\n    this.trigger({\n      track: track,\n      type: 'removetrack'\n    });\n  };\n\n  /**\n   * Get a Track from the TrackList by a tracks id\n   *\n   * @param {String} id - the id of the track to get\n   * @method getTrackById\n   * @return {Track}\n   * @private\n   */\n\n\n  TrackList.prototype.getTrackById = function getTrackById(id) {\n    var result = null;\n\n    for (var i = 0, l = this.length; i < l; i++) {\n      var track = this[i];\n\n      if (track.id === id) {\n        result = track;\n        break;\n      }\n    }\n\n    return result;\n  };\n\n  return TrackList;\n}(EventTarget);\n\n/**\n * Triggered when a different track is selected/enabled.\n *\n * @event TrackList#change\n * @type {EventTarget~Event}\n */\n\n/**\n * Events that can be called with on + eventName. See {@link EventHandler}.\n *\n * @property {Object} TrackList#allowedEvents_\n * @private\n */\n\n\nTrackList.prototype.allowedEvents_ = {\n  change: 'change',\n  addtrack: 'addtrack',\n  removetrack: 'removetrack'\n};\n\n// emulate attribute EventHandler support to allow for feature detection\nfor (var event in TrackList.prototype.allowedEvents_) {\n  TrackList.prototype['on' + event] = null;\n}\n\n/**\n * @file audio-track-list.js\n */\n\n/**\n * Anywhere we call this function we diverge from the spec\n * as we only support one enabled audiotrack at a time\n *\n * @param {AudioTrackList} list\n *        list to work on\n *\n * @param {AudioTrack} track\n *        The track to skip\n *\n * @private\n */\nvar disableOthers = function disableOthers(list, track) {\n  for (var i = 0; i < list.length; i++) {\n    if (!Object.keys(list[i]).length || track.id === list[i].id) {\n      continue;\n    }\n    // another audio track is enabled, disable it\n    list[i].enabled = false;\n  }\n};\n\n/**\n * The current list of {@link AudioTrack} for a media file.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist}\n * @extends TrackList\n */\n\nvar AudioTrackList = function (_TrackList) {\n  inherits(AudioTrackList, _TrackList);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {AudioTrack[]} [tracks=[]]\n   *        A list of `AudioTrack` to instantiate the list with.\n   */\n  function AudioTrackList() {\n    var tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    classCallCheck(this, AudioTrackList);\n\n    // make sure only 1 track is enabled\n    // sorted from last index to first index\n    for (var i = tracks.length - 1; i >= 0; i--) {\n      if (tracks[i].enabled) {\n        disableOthers(tracks, tracks[i]);\n        break;\n      }\n    }\n\n    var _this = possibleConstructorReturn(this, _TrackList.call(this, tracks));\n\n    _this.changing_ = false;\n    return _this;\n  }\n\n  /**\n   * Add an {@link AudioTrack} to the `AudioTrackList`.\n   *\n   * @param {AudioTrack} track\n   *        The AudioTrack to add to the list\n   *\n   * @fires TrackList#addtrack\n   */\n\n\n  AudioTrackList.prototype.addTrack = function addTrack(track) {\n    var _this2 = this;\n\n    if (track.enabled) {\n      disableOthers(this, track);\n    }\n\n    _TrackList.prototype.addTrack.call(this, track);\n    // native tracks don't have this\n    if (!track.addEventListener) {\n      return;\n    }\n\n    /**\n     * @listens AudioTrack#enabledchange\n     * @fires TrackList#change\n     */\n    track.addEventListener('enabledchange', function () {\n      // when we are disabling other tracks (since we don't support\n      // more than one track at a time) we will set changing_\n      // to true so that we don't trigger additional change events\n      if (_this2.changing_) {\n        return;\n      }\n      _this2.changing_ = true;\n      disableOthers(_this2, track);\n      _this2.changing_ = false;\n      _this2.trigger('change');\n    });\n  };\n\n  return AudioTrackList;\n}(TrackList);\n\n/**\n * @file video-track-list.js\n */\n\n/**\n * Un-select all other {@link VideoTrack}s that are selected.\n *\n * @param {VideoTrackList} list\n *        list to work on\n *\n * @param {VideoTrack} track\n *        The track to skip\n *\n * @private\n */\nvar disableOthers$1 = function disableOthers(list, track) {\n  for (var i = 0; i < list.length; i++) {\n    if (!Object.keys(list[i]).length || track.id === list[i].id) {\n      continue;\n    }\n    // another video track is enabled, disable it\n    list[i].selected = false;\n  }\n};\n\n/**\n * The current list of {@link VideoTrack} for a video.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist}\n * @extends TrackList\n */\n\nvar VideoTrackList = function (_TrackList) {\n  inherits(VideoTrackList, _TrackList);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {VideoTrack[]} [tracks=[]]\n   *        A list of `VideoTrack` to instantiate the list with.\n   */\n  function VideoTrackList() {\n    var tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    classCallCheck(this, VideoTrackList);\n\n    // make sure only 1 track is enabled\n    // sorted from last index to first index\n    for (var i = tracks.length - 1; i >= 0; i--) {\n      if (tracks[i].selected) {\n        disableOthers$1(tracks, tracks[i]);\n        break;\n      }\n    }\n\n    var _this = possibleConstructorReturn(this, _TrackList.call(this, tracks));\n\n    _this.changing_ = false;\n\n    /**\n     * @member {number} VideoTrackList#selectedIndex\n     *         The current index of the selected {@link VideoTrack`}.\n     */\n    Object.defineProperty(_this, 'selectedIndex', {\n      get: function get$$1() {\n        for (var _i = 0; _i < this.length; _i++) {\n          if (this[_i].selected) {\n            return _i;\n          }\n        }\n        return -1;\n      },\n      set: function set$$1() {}\n    });\n    return _this;\n  }\n\n  /**\n   * Add a {@link VideoTrack} to the `VideoTrackList`.\n   *\n   * @param {VideoTrack} track\n   *        The VideoTrack to add to the list\n   *\n   * @fires TrackList#addtrack\n   */\n\n\n  VideoTrackList.prototype.addTrack = function addTrack(track) {\n    var _this2 = this;\n\n    if (track.selected) {\n      disableOthers$1(this, track);\n    }\n\n    _TrackList.prototype.addTrack.call(this, track);\n    // native tracks don't have this\n    if (!track.addEventListener) {\n      return;\n    }\n\n    /**\n     * @listens VideoTrack#selectedchange\n     * @fires TrackList#change\n     */\n    track.addEventListener('selectedchange', function () {\n      if (_this2.changing_) {\n        return;\n      }\n      _this2.changing_ = true;\n      disableOthers$1(_this2, track);\n      _this2.changing_ = false;\n      _this2.trigger('change');\n    });\n  };\n\n  return VideoTrackList;\n}(TrackList);\n\n/**\n * @file text-track-list.js\n */\n\n/**\n * The current list of {@link TextTrack} for a media file.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttracklist}\n * @extends TrackList\n */\n\nvar TextTrackList = function (_TrackList) {\n  inherits(TextTrackList, _TrackList);\n\n  function TextTrackList() {\n    classCallCheck(this, TextTrackList);\n    return possibleConstructorReturn(this, _TrackList.apply(this, arguments));\n  }\n\n  /**\n   * Add a {@link TextTrack} to the `TextTrackList`\n   *\n   * @param {TextTrack} track\n   *        The text track to add to the list.\n   *\n   * @fires TrackList#addtrack\n   */\n  TextTrackList.prototype.addTrack = function addTrack(track) {\n    _TrackList.prototype.addTrack.call(this, track);\n\n    /**\n     * @listens TextTrack#modechange\n     * @fires TrackList#change\n     */\n    track.addEventListener('modechange', bind(this, function () {\n      this.queueTrigger('change');\n    }));\n\n    var nonLanguageTextTrackKind = ['metadata', 'chapters'];\n\n    if (nonLanguageTextTrackKind.indexOf(track.kind) === -1) {\n      track.addEventListener('modechange', bind(this, function () {\n        this.trigger('selectedlanguagechange');\n      }));\n    }\n  };\n\n  return TextTrackList;\n}(TrackList);\n\n/**\n * @file html-track-element-list.js\n */\n\n/**\n * The current list of {@link HtmlTrackElement}s.\n */\nvar HtmlTrackElementList = function () {\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {HtmlTrackElement[]} [tracks=[]]\n   *        A list of `HtmlTrackElement` to instantiate the list with.\n   */\n  function HtmlTrackElementList() {\n    var trackElements = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    classCallCheck(this, HtmlTrackElementList);\n\n    this.trackElements_ = [];\n\n    /**\n     * @memberof HtmlTrackElementList\n     * @member {number} length\n     *         The current number of `Track`s in the this Trackist.\n     * @instance\n     */\n    Object.defineProperty(this, 'length', {\n      get: function get$$1() {\n        return this.trackElements_.length;\n      }\n    });\n\n    for (var i = 0, length = trackElements.length; i < length; i++) {\n      this.addTrackElement_(trackElements[i]);\n    }\n  }\n\n  /**\n   * Add an {@link HtmlTrackElement} to the `HtmlTrackElementList`\n   *\n   * @param {HtmlTrackElement} trackElement\n   *        The track element to add to the list.\n   *\n   * @private\n   */\n\n\n  HtmlTrackElementList.prototype.addTrackElement_ = function addTrackElement_(trackElement) {\n    var index = this.trackElements_.length;\n\n    if (!('' + index in this)) {\n      Object.defineProperty(this, index, {\n        get: function get$$1() {\n          return this.trackElements_[index];\n        }\n      });\n    }\n\n    // Do not add duplicate elements\n    if (this.trackElements_.indexOf(trackElement) === -1) {\n      this.trackElements_.push(trackElement);\n    }\n  };\n\n  /**\n   * Get an {@link HtmlTrackElement} from the `HtmlTrackElementList` given an\n   * {@link TextTrack}.\n   *\n   * @param {TextTrack} track\n   *        The track associated with a track element.\n   *\n   * @return {HtmlTrackElement|undefined}\n   *         The track element that was found or undefined.\n   *\n   * @private\n   */\n\n\n  HtmlTrackElementList.prototype.getTrackElementByTrack_ = function getTrackElementByTrack_(track) {\n    var trackElement_ = void 0;\n\n    for (var i = 0, length = this.trackElements_.length; i < length; i++) {\n      if (track === this.trackElements_[i].track) {\n        trackElement_ = this.trackElements_[i];\n\n        break;\n      }\n    }\n\n    return trackElement_;\n  };\n\n  /**\n   * Remove a {@link HtmlTrackElement} from the `HtmlTrackElementList`\n   *\n   * @param {HtmlTrackElement} trackElement\n   *        The track element to remove from the list.\n   *\n   * @private\n   */\n\n\n  HtmlTrackElementList.prototype.removeTrackElement_ = function removeTrackElement_(trackElement) {\n    for (var i = 0, length = this.trackElements_.length; i < length; i++) {\n      if (trackElement === this.trackElements_[i]) {\n        this.trackElements_.splice(i, 1);\n\n        break;\n      }\n    }\n  };\n\n  return HtmlTrackElementList;\n}();\n\n/**\n * @file text-track-cue-list.js\n */\n\n/**\n * @typedef {Object} TextTrackCueList~TextTrackCue\n *\n * @property {string} id\n *           The unique id for this text track cue\n *\n * @property {number} startTime\n *           The start time for this text track cue\n *\n * @property {number} endTime\n *           The end time for this text track cue\n *\n * @property {boolean} pauseOnExit\n *           Pause when the end time is reached if true.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackcue}\n */\n\n/**\n * A List of TextTrackCues.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackcuelist}\n */\nvar TextTrackCueList = function () {\n\n  /**\n   * Create an instance of this class..\n   *\n   * @param {Array} cues\n   *        A list of cues to be initialized with\n   */\n  function TextTrackCueList(cues) {\n    classCallCheck(this, TextTrackCueList);\n\n    TextTrackCueList.prototype.setCues_.call(this, cues);\n\n    /**\n     * @memberof TextTrackCueList\n     * @member {number} length\n     *         The current number of `TextTrackCue`s in the TextTrackCueList.\n     * @instance\n     */\n    Object.defineProperty(this, 'length', {\n      get: function get$$1() {\n        return this.length_;\n      }\n    });\n  }\n\n  /**\n   * A setter for cues in this list. Creates getters\n   * an an index for the cues.\n   *\n   * @param {Array} cues\n   *        An array of cues to set\n   *\n   * @private\n   */\n\n\n  TextTrackCueList.prototype.setCues_ = function setCues_(cues) {\n    var oldLength = this.length || 0;\n    var i = 0;\n    var l = cues.length;\n\n    this.cues_ = cues;\n    this.length_ = cues.length;\n\n    var defineProp = function defineProp(index) {\n      if (!('' + index in this)) {\n        Object.defineProperty(this, '' + index, {\n          get: function get$$1() {\n            return this.cues_[index];\n          }\n        });\n      }\n    };\n\n    if (oldLength < l) {\n      i = oldLength;\n\n      for (; i < l; i++) {\n        defineProp.call(this, i);\n      }\n    }\n  };\n\n  /**\n   * Get a `TextTrackCue` that is currently in the `TextTrackCueList` by id.\n   *\n   * @param {string} id\n   *        The id of the cue that should be searched for.\n   *\n   * @return {TextTrackCueList~TextTrackCue|null}\n   *         A single cue or null if none was found.\n   */\n\n\n  TextTrackCueList.prototype.getCueById = function getCueById(id) {\n    var result = null;\n\n    for (var i = 0, l = this.length; i < l; i++) {\n      var cue = this[i];\n\n      if (cue.id === id) {\n        result = cue;\n        break;\n      }\n    }\n\n    return result;\n  };\n\n  return TextTrackCueList;\n}();\n\n/**\n * @file track-kinds.js\n */\n\n/**\n * All possible `VideoTrackKind`s\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-videotrack-kind\n * @typedef VideoTrack~Kind\n * @enum\n */\nvar VideoTrackKind = {\n  alternative: 'alternative',\n  captions: 'captions',\n  main: 'main',\n  sign: 'sign',\n  subtitles: 'subtitles',\n  commentary: 'commentary'\n};\n\n/**\n * All possible `AudioTrackKind`s\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-audiotrack-kind\n * @typedef AudioTrack~Kind\n * @enum\n */\nvar AudioTrackKind = {\n  'alternative': 'alternative',\n  'descriptions': 'descriptions',\n  'main': 'main',\n  'main-desc': 'main-desc',\n  'translation': 'translation',\n  'commentary': 'commentary'\n};\n\n/**\n * All possible `TextTrackKind`s\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-texttrack-kind\n * @typedef TextTrack~Kind\n * @enum\n */\nvar TextTrackKind = {\n  subtitles: 'subtitles',\n  captions: 'captions',\n  descriptions: 'descriptions',\n  chapters: 'chapters',\n  metadata: 'metadata'\n};\n\n/**\n * All possible `TextTrackMode`s\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackmode\n * @typedef TextTrack~Mode\n * @enum\n */\nvar TextTrackMode = {\n  disabled: 'disabled',\n  hidden: 'hidden',\n  showing: 'showing'\n};\n\n/**\n * @file track.js\n */\n\n/**\n * A Track class that contains all of the common functionality for {@link AudioTrack},\n * {@link VideoTrack}, and {@link TextTrack}.\n *\n * > Note: This class should not be used directly\n *\n * @see {@link https://html.spec.whatwg.org/multipage/embedded-content.html}\n * @extends EventTarget\n * @abstract\n */\n\nvar Track = function (_EventTarget) {\n  inherits(Track, _EventTarget);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Object} [options={}]\n   *        Object of option names and values\n   *\n   * @param {string} [options.kind='']\n   *        A valid kind for the track type you are creating.\n   *\n   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\n   *        A unique id for this AudioTrack.\n   *\n   * @param {string} [options.label='']\n   *        The menu label for this track.\n   *\n   * @param {string} [options.language='']\n   *        A valid two character language code.\n   *\n   * @abstract\n   */\n  function Track() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    classCallCheck(this, Track);\n\n    var _this = possibleConstructorReturn(this, _EventTarget.call(this));\n\n    var trackProps = {\n      id: options.id || 'vjs_track_' + newGUID(),\n      kind: options.kind || '',\n      label: options.label || '',\n      language: options.language || ''\n    };\n\n    /**\n     * @memberof Track\n     * @member {string} id\n     *         The id of this track. Cannot be changed after creation.\n     * @instance\n     *\n     * @readonly\n     */\n\n    /**\n     * @memberof Track\n     * @member {string} kind\n     *         The kind of track that this is. Cannot be changed after creation.\n     * @instance\n     *\n     * @readonly\n     */\n\n    /**\n     * @memberof Track\n     * @member {string} label\n     *         The label of this track. Cannot be changed after creation.\n     * @instance\n     *\n     * @readonly\n     */\n\n    /**\n     * @memberof Track\n     * @member {string} language\n     *         The two letter language code for this track. Cannot be changed after\n     *         creation.\n     * @instance\n     *\n     * @readonly\n     */\n\n    var _loop = function _loop(key) {\n      Object.defineProperty(_this, key, {\n        get: function get$$1() {\n          return trackProps[key];\n        },\n        set: function set$$1() {}\n      });\n    };\n\n    for (var key in trackProps) {\n      _loop(key);\n    }\n    return _this;\n  }\n\n  return Track;\n}(EventTarget);\n\n/**\n * @file url.js\n * @module url\n */\n\n/**\n * @typedef {Object} url:URLObject\n *\n * @property {string} protocol\n *           The protocol of the url that was parsed.\n *\n * @property {string} hostname\n *           The hostname of the url that was parsed.\n *\n * @property {string} port\n *           The port of the url that was parsed.\n *\n * @property {string} pathname\n *           The pathname of the url that was parsed.\n *\n * @property {string} search\n *           The search query of the url that was parsed.\n *\n * @property {string} hash\n *           The hash of the url that was parsed.\n *\n * @property {string} host\n *           The host of the url that was parsed.\n */\n\n/**\n * Resolve and parse the elements of a URL.\n *\n * @param  {String} url\n *         The url to parse\n *\n * @return {url:URLObject}\n *         An object of url details\n */\nvar parseUrl = function parseUrl(url) {\n  var props = ['protocol', 'hostname', 'port', 'pathname', 'search', 'hash', 'host'];\n\n  // add the url to an anchor and let the browser parse the URL\n  var a = document.createElement('a');\n\n  a.href = url;\n\n  // IE8 (and 9?) Fix\n  // ie8 doesn't parse the URL correctly until the anchor is actually\n  // added to the body, and an innerHTML is needed to trigger the parsing\n  var addToBody = a.host === '' && a.protocol !== 'file:';\n  var div = void 0;\n\n  if (addToBody) {\n    div = document.createElement('div');\n    div.innerHTML = '<a href=\"' + url + '\"></a>';\n    a = div.firstChild;\n    // prevent the div from affecting layout\n    div.setAttribute('style', 'display:none; position:absolute;');\n    document.body.appendChild(div);\n  }\n\n  // Copy the specific URL properties to a new object\n  // This is also needed for IE8 because the anchor loses its\n  // properties when it's removed from the dom\n  var details = {};\n\n  for (var i = 0; i < props.length; i++) {\n    details[props[i]] = a[props[i]];\n  }\n\n  // IE9 adds the port to the host property unlike everyone else. If\n  // a port identifier is added for standard ports, strip it.\n  if (details.protocol === 'http:') {\n    details.host = details.host.replace(/:80$/, '');\n  }\n\n  if (details.protocol === 'https:') {\n    details.host = details.host.replace(/:443$/, '');\n  }\n\n  if (!details.protocol) {\n    details.protocol = window$1.location.protocol;\n  }\n\n  if (addToBody) {\n    document.body.removeChild(div);\n  }\n\n  return details;\n};\n\n/**\n * Get absolute version of relative URL. Used to tell flash correct URL.\n *\n *\n * @param  {string} url\n *         URL to make absolute\n *\n * @return {string}\n *         Absolute URL\n *\n * @see http://stackoverflow.com/questions/470832/getting-an-absolute-url-from-a-relative-one-ie6-issue\n */\nvar getAbsoluteURL = function getAbsoluteURL(url) {\n  // Check if absolute URL\n  if (!url.match(/^https?:\\/\\//)) {\n    // Convert to absolute URL. Flash hosted off-site needs an absolute URL.\n    var div = document.createElement('div');\n\n    div.innerHTML = '<a href=\"' + url + '\">x</a>';\n    url = div.firstChild.href;\n  }\n\n  return url;\n};\n\n/**\n * Returns the extension of the passed file name. It will return an empty string\n * if passed an invalid path.\n *\n * @param {string} path\n *        The fileName path like '/path/to/file.mp4'\n *\n * @returns {string}\n *          The extension in lower case or an empty string if no\n *          extension could be found.\n */\nvar getFileExtension = function getFileExtension(path) {\n  if (typeof path === 'string') {\n    var splitPathRe = /^(\\/?)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?)(\\.([^\\.\\/\\?]+)))(?:[\\/]*|[\\?].*)$/i;\n    var pathParts = splitPathRe.exec(path);\n\n    if (pathParts) {\n      return pathParts.pop().toLowerCase();\n    }\n  }\n\n  return '';\n};\n\n/**\n * Returns whether the url passed is a cross domain request or not.\n *\n * @param {string} url\n *        The url to check.\n *\n * @return {boolean}\n *         Whether it is a cross domain request or not.\n */\nvar isCrossOrigin = function isCrossOrigin(url) {\n  var winLoc = window$1.location;\n  var urlInfo = parseUrl(url);\n\n  // IE8 protocol relative urls will return ':' for protocol\n  var srcProtocol = urlInfo.protocol === ':' ? winLoc.protocol : urlInfo.protocol;\n\n  // Check if url is for another domain/origin\n  // IE8 doesn't know location.origin, so we won't rely on it here\n  var crossOrigin = srcProtocol + urlInfo.host !== winLoc.protocol + winLoc.host;\n\n  return crossOrigin;\n};\n\nvar Url = /*#__PURE__*/Object.freeze({\n  parseUrl: parseUrl,\n  getAbsoluteURL: getAbsoluteURL,\n  getFileExtension: getFileExtension,\n  isCrossOrigin: isCrossOrigin\n});\n\n/**\n * @file text-track.js\n */\n\n/**\n * Takes a webvtt file contents and parses it into cues\n *\n * @param {string} srcContent\n *        webVTT file contents\n *\n * @param {TextTrack} track\n *        TextTrack to add cues to. Cues come from the srcContent.\n *\n * @private\n */\nvar parseCues = function parseCues(srcContent, track) {\n  var parser = new window$1.WebVTT.Parser(window$1, window$1.vttjs, window$1.WebVTT.StringDecoder());\n  var errors = [];\n\n  parser.oncue = function (cue) {\n    track.addCue(cue);\n  };\n\n  parser.onparsingerror = function (error) {\n    errors.push(error);\n  };\n\n  parser.onflush = function () {\n    track.trigger({\n      type: 'loadeddata',\n      target: track\n    });\n  };\n\n  parser.parse(srcContent);\n  if (errors.length > 0) {\n    if (window$1.console && window$1.console.groupCollapsed) {\n      window$1.console.groupCollapsed('Text Track parsing errors for ' + track.src);\n    }\n    errors.forEach(function (error) {\n      return log$1.error(error);\n    });\n    if (window$1.console && window$1.console.groupEnd) {\n      window$1.console.groupEnd();\n    }\n  }\n\n  parser.flush();\n};\n\n/**\n * Load a `TextTrack` from a specified url.\n *\n * @param {string} src\n *        Url to load track from.\n *\n * @param {TextTrack} track\n *        Track to add cues to. Comes from the content at the end of `url`.\n *\n * @private\n */\nvar loadTrack = function loadTrack(src, track) {\n  var opts = {\n    uri: src\n  };\n  var crossOrigin = isCrossOrigin(src);\n\n  if (crossOrigin) {\n    opts.cors = crossOrigin;\n  }\n\n  xhr(opts, bind(this, function (err, response, responseBody) {\n    if (err) {\n      return log$1.error(err, response);\n    }\n\n    track.loaded_ = true;\n\n    // Make sure that vttjs has loaded, otherwise, wait till it finished loading\n    // NOTE: this is only used for the alt/video.novtt.js build\n    if (typeof window$1.WebVTT !== 'function') {\n      if (track.tech_) {\n        var loadHandler = function loadHandler() {\n          return parseCues(responseBody, track);\n        };\n\n        track.tech_.on('vttjsloaded', loadHandler);\n        track.tech_.on('vttjserror', function () {\n          log$1.error('vttjs failed to load, stopping trying to process ' + track.src);\n          track.tech_.off('vttjsloaded', loadHandler);\n        });\n      }\n    } else {\n      parseCues(responseBody, track);\n    }\n  }));\n};\n\n/**\n * A representation of a single `TextTrack`.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrack}\n * @extends Track\n */\n\nvar TextTrack = function (_Track) {\n  inherits(TextTrack, _Track);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Object} options={}\n   *        Object of option names and values\n   *\n   * @param {Tech} options.tech\n   *        A reference to the tech that owns this TextTrack.\n   *\n   * @param {TextTrack~Kind} [options.kind='subtitles']\n   *        A valid text track kind.\n   *\n   * @param {TextTrack~Mode} [options.mode='disabled']\n   *        A valid text track mode.\n   *\n   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\n   *        A unique id for this TextTrack.\n   *\n   * @param {string} [options.label='']\n   *        The menu label for this track.\n   *\n   * @param {string} [options.language='']\n   *        A valid two character language code.\n   *\n   * @param {string} [options.srclang='']\n   *        A valid two character language code. An alternative, but deprioritized\n   *        version of `options.language`\n   *\n   * @param {string} [options.src]\n   *        A url to TextTrack cues.\n   *\n   * @param {boolean} [options.default]\n   *        If this track should default to on or off.\n   */\n  function TextTrack() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    classCallCheck(this, TextTrack);\n\n    if (!options.tech) {\n      throw new Error('A tech was not provided.');\n    }\n\n    var settings = mergeOptions(options, {\n      kind: TextTrackKind[options.kind] || 'subtitles',\n      language: options.language || options.srclang || ''\n    });\n    var mode = TextTrackMode[settings.mode] || 'disabled';\n    var default_ = settings.default;\n\n    if (settings.kind === 'metadata' || settings.kind === 'chapters') {\n      mode = 'hidden';\n    }\n\n    var _this = possibleConstructorReturn(this, _Track.call(this, settings));\n\n    _this.tech_ = settings.tech;\n\n    _this.cues_ = [];\n    _this.activeCues_ = [];\n\n    var cues = new TextTrackCueList(_this.cues_);\n    var activeCues = new TextTrackCueList(_this.activeCues_);\n    var changed = false;\n    var timeupdateHandler = bind(_this, function () {\n\n      // Accessing this.activeCues for the side-effects of updating itself\n      // due to it's nature as a getter function. Do not remove or cues will\n      // stop updating!\n      // Use the setter to prevent deletion from uglify (pure_getters rule)\n      this.activeCues = this.activeCues;\n      if (changed) {\n        this.trigger('cuechange');\n        changed = false;\n      }\n    });\n\n    if (mode !== 'disabled') {\n      _this.tech_.ready(function () {\n        _this.tech_.on('timeupdate', timeupdateHandler);\n      }, true);\n    }\n\n    Object.defineProperties(_this, {\n      /**\n       * @memberof TextTrack\n       * @member {boolean} default\n       *         If this track was set to be on or off by default. Cannot be changed after\n       *         creation.\n       * @instance\n       *\n       * @readonly\n       */\n      default: {\n        get: function get$$1() {\n          return default_;\n        },\n        set: function set$$1() {}\n      },\n\n      /**\n       * @memberof TextTrack\n       * @member {string} mode\n       *         Set the mode of this TextTrack to a valid {@link TextTrack~Mode}. Will\n       *         not be set if setting to an invalid mode.\n       * @instance\n       *\n       * @fires TextTrack#modechange\n       */\n      mode: {\n        get: function get$$1() {\n          return mode;\n        },\n        set: function set$$1(newMode) {\n          var _this2 = this;\n\n          if (!TextTrackMode[newMode]) {\n            return;\n          }\n          mode = newMode;\n          if (mode === 'showing') {\n\n            this.tech_.ready(function () {\n              _this2.tech_.on('timeupdate', timeupdateHandler);\n            }, true);\n          }\n          /**\n           * An event that fires when mode changes on this track. This allows\n           * the TextTrackList that holds this track to act accordingly.\n           *\n           * > Note: This is not part of the spec!\n           *\n           * @event TextTrack#modechange\n           * @type {EventTarget~Event}\n           */\n          this.trigger('modechange');\n        }\n      },\n\n      /**\n       * @memberof TextTrack\n       * @member {TextTrackCueList} cues\n       *         The text track cue list for this TextTrack.\n       * @instance\n       */\n      cues: {\n        get: function get$$1() {\n          if (!this.loaded_) {\n            return null;\n          }\n\n          return cues;\n        },\n        set: function set$$1() {}\n      },\n\n      /**\n       * @memberof TextTrack\n       * @member {TextTrackCueList} activeCues\n       *         The list text track cues that are currently active for this TextTrack.\n       * @instance\n       */\n      activeCues: {\n        get: function get$$1() {\n          if (!this.loaded_) {\n            return null;\n          }\n\n          // nothing to do\n          if (this.cues.length === 0) {\n            return activeCues;\n          }\n\n          var ct = this.tech_.currentTime();\n          var active = [];\n\n          for (var i = 0, l = this.cues.length; i < l; i++) {\n            var cue = this.cues[i];\n\n            if (cue.startTime <= ct && cue.endTime >= ct) {\n              active.push(cue);\n            } else if (cue.startTime === cue.endTime && cue.startTime <= ct && cue.startTime + 0.5 >= ct) {\n              active.push(cue);\n            }\n          }\n\n          changed = false;\n\n          if (active.length !== this.activeCues_.length) {\n            changed = true;\n          } else {\n            for (var _i = 0; _i < active.length; _i++) {\n              if (this.activeCues_.indexOf(active[_i]) === -1) {\n                changed = true;\n              }\n            }\n          }\n\n          this.activeCues_ = active;\n          activeCues.setCues_(this.activeCues_);\n\n          return activeCues;\n        },\n\n\n        // /!\\ Keep this setter empty (see the timeupdate handler above)\n        set: function set$$1() {}\n      }\n    });\n\n    if (settings.src) {\n      _this.src = settings.src;\n      loadTrack(settings.src, _this);\n    } else {\n      _this.loaded_ = true;\n    }\n    return _this;\n  }\n\n  /**\n   * Add a cue to the internal list of cues.\n   *\n   * @param {TextTrack~Cue} cue\n   *        The cue to add to our internal list\n   */\n\n\n  TextTrack.prototype.addCue = function addCue(originalCue) {\n    var cue = originalCue;\n\n    if (window$1.vttjs && !(originalCue instanceof window$1.vttjs.VTTCue)) {\n      cue = new window$1.vttjs.VTTCue(originalCue.startTime, originalCue.endTime, originalCue.text);\n\n      for (var prop in originalCue) {\n        if (!(prop in cue)) {\n          cue[prop] = originalCue[prop];\n        }\n      }\n\n      // make sure that `id` is copied over\n      cue.id = originalCue.id;\n      cue.originalCue_ = originalCue;\n    }\n\n    var tracks = this.tech_.textTracks();\n\n    for (var i = 0; i < tracks.length; i++) {\n      if (tracks[i] !== this) {\n        tracks[i].removeCue(cue);\n      }\n    }\n\n    this.cues_.push(cue);\n    this.cues.setCues_(this.cues_);\n  };\n\n  /**\n   * Remove a cue from our internal list\n   *\n   * @param {TextTrack~Cue} removeCue\n   *        The cue to remove from our internal list\n   */\n\n\n  TextTrack.prototype.removeCue = function removeCue(_removeCue) {\n    var i = this.cues_.length;\n\n    while (i--) {\n      var cue = this.cues_[i];\n\n      if (cue === _removeCue || cue.originalCue_ && cue.originalCue_ === _removeCue) {\n        this.cues_.splice(i, 1);\n        this.cues.setCues_(this.cues_);\n        break;\n      }\n    }\n  };\n\n  return TextTrack;\n}(Track);\n\n/**\n * cuechange - One or more cues in the track have become active or stopped being active.\n */\n\n\nTextTrack.prototype.allowedEvents_ = {\n  cuechange: 'cuechange'\n};\n\n/**\n * A representation of a single `AudioTrack`. If it is part of an {@link AudioTrackList}\n * only one `AudioTrack` in the list will be enabled at a time.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotrack}\n * @extends Track\n */\n\nvar AudioTrack = function (_Track) {\n  inherits(AudioTrack, _Track);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Object} [options={}]\n   *        Object of option names and values\n   *\n   * @param {AudioTrack~Kind} [options.kind='']\n   *        A valid audio track kind\n   *\n   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\n   *        A unique id for this AudioTrack.\n   *\n   * @param {string} [options.label='']\n   *        The menu label for this track.\n   *\n   * @param {string} [options.language='']\n   *        A valid two character language code.\n   *\n   * @param {boolean} [options.enabled]\n   *        If this track is the one that is currently playing. If this track is part of\n   *        an {@link AudioTrackList}, only one {@link AudioTrack} will be enabled.\n   */\n  function AudioTrack() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    classCallCheck(this, AudioTrack);\n\n    var settings = mergeOptions(options, {\n      kind: AudioTrackKind[options.kind] || ''\n    });\n\n    var _this = possibleConstructorReturn(this, _Track.call(this, settings));\n\n    var enabled = false;\n\n    /**\n     * @memberof AudioTrack\n     * @member {boolean} enabled\n     *         If this `AudioTrack` is enabled or not. When setting this will\n     *         fire {@link AudioTrack#enabledchange} if the state of enabled is changed.\n     * @instance\n     *\n     * @fires VideoTrack#selectedchange\n     */\n    Object.defineProperty(_this, 'enabled', {\n      get: function get$$1() {\n        return enabled;\n      },\n      set: function set$$1(newEnabled) {\n        // an invalid or unchanged value\n        if (typeof newEnabled !== 'boolean' || newEnabled === enabled) {\n          return;\n        }\n        enabled = newEnabled;\n\n        /**\n         * An event that fires when enabled changes on this track. This allows\n         * the AudioTrackList that holds this track to act accordingly.\n         *\n         * > Note: This is not part of the spec! Native tracks will do\n         *         this internally without an event.\n         *\n         * @event AudioTrack#enabledchange\n         * @type {EventTarget~Event}\n         */\n        this.trigger('enabledchange');\n      }\n    });\n\n    // if the user sets this track to selected then\n    // set selected to that true value otherwise\n    // we keep it false\n    if (settings.enabled) {\n      _this.enabled = settings.enabled;\n    }\n    _this.loaded_ = true;\n    return _this;\n  }\n\n  return AudioTrack;\n}(Track);\n\n/**\n * A representation of a single `VideoTrack`.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#videotrack}\n * @extends Track\n */\n\nvar VideoTrack = function (_Track) {\n  inherits(VideoTrack, _Track);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Object} [options={}]\n   *        Object of option names and values\n   *\n   * @param {string} [options.kind='']\n   *        A valid {@link VideoTrack~Kind}\n   *\n   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\n   *        A unique id for this AudioTrack.\n   *\n   * @param {string} [options.label='']\n   *        The menu label for this track.\n   *\n   * @param {string} [options.language='']\n   *        A valid two character language code.\n   *\n   * @param {boolean} [options.selected]\n   *        If this track is the one that is currently playing.\n   */\n  function VideoTrack() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    classCallCheck(this, VideoTrack);\n\n    var settings = mergeOptions(options, {\n      kind: VideoTrackKind[options.kind] || ''\n    });\n\n    var _this = possibleConstructorReturn(this, _Track.call(this, settings));\n\n    var selected = false;\n\n    /**\n     * @memberof VideoTrack\n     * @member {boolean} selected\n     *         If this `VideoTrack` is selected or not. When setting this will\n     *         fire {@link VideoTrack#selectedchange} if the state of selected changed.\n     * @instance\n     *\n     * @fires VideoTrack#selectedchange\n     */\n    Object.defineProperty(_this, 'selected', {\n      get: function get$$1() {\n        return selected;\n      },\n      set: function set$$1(newSelected) {\n        // an invalid or unchanged value\n        if (typeof newSelected !== 'boolean' || newSelected === selected) {\n          return;\n        }\n        selected = newSelected;\n\n        /**\n         * An event that fires when selected changes on this track. This allows\n         * the VideoTrackList that holds this track to act accordingly.\n         *\n         * > Note: This is not part of the spec! Native tracks will do\n         *         this internally without an event.\n         *\n         * @event VideoTrack#selectedchange\n         * @type {EventTarget~Event}\n         */\n        this.trigger('selectedchange');\n      }\n    });\n\n    // if the user sets this track to selected then\n    // set selected to that true value otherwise\n    // we keep it false\n    if (settings.selected) {\n      _this.selected = settings.selected;\n    }\n    return _this;\n  }\n\n  return VideoTrack;\n}(Track);\n\n/**\n * @file html-track-element.js\n */\n\n/**\n * @memberof HTMLTrackElement\n * @typedef {HTMLTrackElement~ReadyState}\n * @enum {number}\n */\nvar NONE = 0;\nvar LOADING = 1;\nvar LOADED = 2;\nvar ERROR = 3;\n\n/**\n * A single track represented in the DOM.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#htmltrackelement}\n * @extends EventTarget\n */\n\nvar HTMLTrackElement = function (_EventTarget) {\n  inherits(HTMLTrackElement, _EventTarget);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Object} options={}\n   *        Object of option names and values\n   *\n   * @param {Tech} options.tech\n   *        A reference to the tech that owns this HTMLTrackElement.\n   *\n   * @param {TextTrack~Kind} [options.kind='subtitles']\n   *        A valid text track kind.\n   *\n   * @param {TextTrack~Mode} [options.mode='disabled']\n   *        A valid text track mode.\n   *\n   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\n   *        A unique id for this TextTrack.\n   *\n   * @param {string} [options.label='']\n   *        The menu label for this track.\n   *\n   * @param {string} [options.language='']\n   *        A valid two character language code.\n   *\n   * @param {string} [options.srclang='']\n   *        A valid two character language code. An alternative, but deprioritized\n   *        vesion of `options.language`\n   *\n   * @param {string} [options.src]\n   *        A url to TextTrack cues.\n   *\n   * @param {boolean} [options.default]\n   *        If this track should default to on or off.\n   */\n  function HTMLTrackElement() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    classCallCheck(this, HTMLTrackElement);\n\n    var _this = possibleConstructorReturn(this, _EventTarget.call(this));\n\n    var readyState = void 0;\n\n    var track = new TextTrack(options);\n\n    _this.kind = track.kind;\n    _this.src = track.src;\n    _this.srclang = track.language;\n    _this.label = track.label;\n    _this.default = track.default;\n\n    Object.defineProperties(_this, {\n\n      /**\n       * @memberof HTMLTrackElement\n       * @member {HTMLTrackElement~ReadyState} readyState\n       *         The current ready state of the track element.\n       * @instance\n       */\n      readyState: {\n        get: function get$$1() {\n          return readyState;\n        }\n      },\n\n      /**\n       * @memberof HTMLTrackElement\n       * @member {TextTrack} track\n       *         The underlying TextTrack object.\n       * @instance\n       *\n       */\n      track: {\n        get: function get$$1() {\n          return track;\n        }\n      }\n    });\n\n    readyState = NONE;\n\n    /**\n     * @listens TextTrack#loadeddata\n     * @fires HTMLTrackElement#load\n     */\n    track.addEventListener('loadeddata', function () {\n      readyState = LOADED;\n\n      _this.trigger({\n        type: 'load',\n        target: _this\n      });\n    });\n    return _this;\n  }\n\n  return HTMLTrackElement;\n}(EventTarget);\n\nHTMLTrackElement.prototype.allowedEvents_ = {\n  load: 'load'\n};\n\nHTMLTrackElement.NONE = NONE;\nHTMLTrackElement.LOADING = LOADING;\nHTMLTrackElement.LOADED = LOADED;\nHTMLTrackElement.ERROR = ERROR;\n\n/*\n * This file contains all track properties that are used in\n * player.js, tech.js, html5.js and possibly other techs in the future.\n */\n\nvar NORMAL = {\n  audio: {\n    ListClass: AudioTrackList,\n    TrackClass: AudioTrack,\n    capitalName: 'Audio'\n  },\n  video: {\n    ListClass: VideoTrackList,\n    TrackClass: VideoTrack,\n    capitalName: 'Video'\n  },\n  text: {\n    ListClass: TextTrackList,\n    TrackClass: TextTrack,\n    capitalName: 'Text'\n  }\n};\n\nObject.keys(NORMAL).forEach(function (type) {\n  NORMAL[type].getterName = type + 'Tracks';\n  NORMAL[type].privateName = type + 'Tracks_';\n});\n\nvar REMOTE = {\n  remoteText: {\n    ListClass: TextTrackList,\n    TrackClass: TextTrack,\n    capitalName: 'RemoteText',\n    getterName: 'remoteTextTracks',\n    privateName: 'remoteTextTracks_'\n  },\n  remoteTextEl: {\n    ListClass: HtmlTrackElementList,\n    TrackClass: HTMLTrackElement,\n    capitalName: 'RemoteTextTrackEls',\n    getterName: 'remoteTextTrackEls',\n    privateName: 'remoteTextTrackEls_'\n  }\n};\n\nvar ALL = mergeOptions(NORMAL, REMOTE);\n\nREMOTE.names = Object.keys(REMOTE);\nNORMAL.names = Object.keys(NORMAL);\nALL.names = [].concat(REMOTE.names).concat(NORMAL.names);\n\n/**\n * @file tech.js\n */\n\n/**\n * An Object containing a structure like: `{src: 'url', type: 'mimetype'}` or string\n * that just contains the src url alone.\n * * `var SourceObject = {src: 'http://ex.com/video.mp4', type: 'video/mp4'};`\n   * `var SourceString = 'http://example.com/some-video.mp4';`\n *\n * @typedef {Object|string} Tech~SourceObject\n *\n * @property {string} src\n *           The url to the source\n *\n * @property {string} type\n *           The mime type of the source\n */\n\n/**\n * A function used by {@link Tech} to create a new {@link TextTrack}.\n *\n * @private\n *\n * @param {Tech} self\n *        An instance of the Tech class.\n *\n * @param {string} kind\n *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)\n *\n * @param {string} [label]\n *        Label to identify the text track\n *\n * @param {string} [language]\n *        Two letter language abbreviation\n *\n * @param {Object} [options={}]\n *        An object with additional text track options\n *\n * @return {TextTrack}\n *          The text track that was created.\n */\nfunction createTrackHelper(self, kind, label, language) {\n  var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n\n  var tracks = self.textTracks();\n\n  options.kind = kind;\n\n  if (label) {\n    options.label = label;\n  }\n  if (language) {\n    options.language = language;\n  }\n  options.tech = self;\n\n  var track = new ALL.text.TrackClass(options);\n\n  tracks.addTrack(track);\n\n  return track;\n}\n\n/**\n * This is the base class for media playback technology controllers, such as\n * {@link Flash} and {@link HTML5}\n *\n * @extends Component\n */\n\nvar Tech = function (_Component) {\n  inherits(Tech, _Component);\n\n  /**\n   * Create an instance of this Tech.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} ready\n   *        Callback function to call when the `HTML5` Tech is ready.\n   */\n  function Tech() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var ready = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\n    classCallCheck(this, Tech);\n\n    // we don't want the tech to report user activity automatically.\n    // This is done manually in addControlsListeners\n    options.reportTouchActivity = false;\n\n    // keep track of whether the current source has played at all to\n    // implement a very limited played()\n    var _this = possibleConstructorReturn(this, _Component.call(this, null, options, ready));\n\n    _this.hasStarted_ = false;\n    _this.on('playing', function () {\n      this.hasStarted_ = true;\n    });\n    _this.on('loadstart', function () {\n      this.hasStarted_ = false;\n    });\n\n    ALL.names.forEach(function (name) {\n      var props = ALL[name];\n\n      if (options && options[props.getterName]) {\n        _this[props.privateName] = options[props.getterName];\n      }\n    });\n\n    // Manually track progress in cases where the browser/flash player doesn't report it.\n    if (!_this.featuresProgressEvents) {\n      _this.manualProgressOn();\n    }\n\n    // Manually track timeupdates in cases where the browser/flash player doesn't report it.\n    if (!_this.featuresTimeupdateEvents) {\n      _this.manualTimeUpdatesOn();\n    }\n\n    ['Text', 'Audio', 'Video'].forEach(function (track) {\n      if (options['native' + track + 'Tracks'] === false) {\n        _this['featuresNative' + track + 'Tracks'] = false;\n      }\n    });\n\n    if (options.nativeCaptions === false || options.nativeTextTracks === false) {\n      _this.featuresNativeTextTracks = false;\n    } else if (options.nativeCaptions === true || options.nativeTextTracks === true) {\n      _this.featuresNativeTextTracks = true;\n    }\n\n    if (!_this.featuresNativeTextTracks) {\n      _this.emulateTextTracks();\n    }\n\n    _this.autoRemoteTextTracks_ = new ALL.text.ListClass();\n\n    _this.initTrackListeners();\n\n    // Turn on component tap events only if not using native controls\n    if (!options.nativeControlsForTouch) {\n      _this.emitTapEvents();\n    }\n\n    if (_this.constructor) {\n      _this.name_ = _this.constructor.name || 'Unknown Tech';\n    }\n    return _this;\n  }\n\n  /**\n   * A special function to trigger source set in a way that will allow player\n   * to re-trigger if the player or tech are not ready yet.\n   *\n   * @fires Tech#sourceset\n   * @param {string} src The source string at the time of the source changing.\n   */\n\n\n  Tech.prototype.triggerSourceset = function triggerSourceset(src) {\n    var _this2 = this;\n\n    if (!this.isReady_) {\n      // on initial ready we have to trigger source set\n      // 1ms after ready so that player can watch for it.\n      this.one('ready', function () {\n        return _this2.setTimeout(function () {\n          return _this2.triggerSourceset(src);\n        }, 1);\n      });\n    }\n\n    /**\n     * Fired when the source is set on the tech causing the media element\n     * to reload.\n     *\n     * @see {@link Player#event:sourceset}\n     * @event Tech#sourceset\n     * @type {EventTarget~Event}\n     */\n    this.trigger({\n      src: src,\n      type: 'sourceset'\n    });\n  };\n\n  /* Fallbacks for unsupported event types\n  ================================================================================ */\n\n  /**\n   * Polyfill the `progress` event for browsers that don't support it natively.\n   *\n   * @see {@link Tech#trackProgress}\n   */\n\n\n  Tech.prototype.manualProgressOn = function manualProgressOn() {\n    this.on('durationchange', this.onDurationChange);\n\n    this.manualProgress = true;\n\n    // Trigger progress watching when a source begins loading\n    this.one('ready', this.trackProgress);\n  };\n\n  /**\n   * Turn off the polyfill for `progress` events that was created in\n   * {@link Tech#manualProgressOn}\n   */\n\n\n  Tech.prototype.manualProgressOff = function manualProgressOff() {\n    this.manualProgress = false;\n    this.stopTrackingProgress();\n\n    this.off('durationchange', this.onDurationChange);\n  };\n\n  /**\n   * This is used to trigger a `progress` event when the buffered percent changes. It\n   * sets an interval function that will be called every 500 milliseconds to check if the\n   * buffer end percent has changed.\n   *\n   * > This function is called by {@link Tech#manualProgressOn}\n   *\n   * @param {EventTarget~Event} event\n   *        The `ready` event that caused this to run.\n   *\n   * @listens Tech#ready\n   * @fires Tech#progress\n   */\n\n\n  Tech.prototype.trackProgress = function trackProgress(event) {\n    this.stopTrackingProgress();\n    this.progressInterval = this.setInterval(bind(this, function () {\n      // Don't trigger unless buffered amount is greater than last time\n\n      var numBufferedPercent = this.bufferedPercent();\n\n      if (this.bufferedPercent_ !== numBufferedPercent) {\n        /**\n         * See {@link Player#progress}\n         *\n         * @event Tech#progress\n         * @type {EventTarget~Event}\n         */\n        this.trigger('progress');\n      }\n\n      this.bufferedPercent_ = numBufferedPercent;\n\n      if (numBufferedPercent === 1) {\n        this.stopTrackingProgress();\n      }\n    }), 500);\n  };\n\n  /**\n   * Update our internal duration on a `durationchange` event by calling\n   * {@link Tech#duration}.\n   *\n   * @param {EventTarget~Event} event\n   *        The `durationchange` event that caused this to run.\n   *\n   * @listens Tech#durationchange\n   */\n\n\n  Tech.prototype.onDurationChange = function onDurationChange(event) {\n    this.duration_ = this.duration();\n  };\n\n  /**\n   * Get and create a `TimeRange` object for buffering.\n   *\n   * @return {TimeRange}\n   *         The time range object that was created.\n   */\n\n\n  Tech.prototype.buffered = function buffered() {\n    return createTimeRanges(0, 0);\n  };\n\n  /**\n   * Get the percentage of the current video that is currently buffered.\n   *\n   * @return {number}\n   *         A number from 0 to 1 that represents the decimal percentage of the\n   *         video that is buffered.\n   *\n   */\n\n\n  Tech.prototype.bufferedPercent = function bufferedPercent$$1() {\n    return bufferedPercent(this.buffered(), this.duration_);\n  };\n\n  /**\n   * Turn off the polyfill for `progress` events that was created in\n   * {@link Tech#manualProgressOn}\n   * Stop manually tracking progress events by clearing the interval that was set in\n   * {@link Tech#trackProgress}.\n   */\n\n\n  Tech.prototype.stopTrackingProgress = function stopTrackingProgress() {\n    this.clearInterval(this.progressInterval);\n  };\n\n  /**\n   * Polyfill the `timeupdate` event for browsers that don't support it.\n   *\n   * @see {@link Tech#trackCurrentTime}\n   */\n\n\n  Tech.prototype.manualTimeUpdatesOn = function manualTimeUpdatesOn() {\n    this.manualTimeUpdates = true;\n\n    this.on('play', this.trackCurrentTime);\n    this.on('pause', this.stopTrackingCurrentTime);\n  };\n\n  /**\n   * Turn off the polyfill for `timeupdate` events that was created in\n   * {@link Tech#manualTimeUpdatesOn}\n   */\n\n\n  Tech.prototype.manualTimeUpdatesOff = function manualTimeUpdatesOff() {\n    this.manualTimeUpdates = false;\n    this.stopTrackingCurrentTime();\n    this.off('play', this.trackCurrentTime);\n    this.off('pause', this.stopTrackingCurrentTime);\n  };\n\n  /**\n   * Sets up an interval function to track current time and trigger `timeupdate` every\n   * 250 milliseconds.\n   *\n   * @listens Tech#play\n   * @triggers Tech#timeupdate\n   */\n\n\n  Tech.prototype.trackCurrentTime = function trackCurrentTime() {\n    if (this.currentTimeInterval) {\n      this.stopTrackingCurrentTime();\n    }\n    this.currentTimeInterval = this.setInterval(function () {\n      /**\n       * Triggered at an interval of 250ms to indicated that time is passing in the video.\n       *\n       * @event Tech#timeupdate\n       * @type {EventTarget~Event}\n       */\n      this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });\n\n      // 42 = 24 fps // 250 is what Webkit uses // FF uses 15\n    }, 250);\n  };\n\n  /**\n   * Stop the interval function created in {@link Tech#trackCurrentTime} so that the\n   * `timeupdate` event is no longer triggered.\n   *\n   * @listens {Tech#pause}\n   */\n\n\n  Tech.prototype.stopTrackingCurrentTime = function stopTrackingCurrentTime() {\n    this.clearInterval(this.currentTimeInterval);\n\n    // #1002 - if the video ends right before the next timeupdate would happen,\n    // the progress bar won't make it all the way to the end\n    this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });\n  };\n\n  /**\n   * Turn off all event polyfills, clear the `Tech`s {@link AudioTrackList},\n   * {@link VideoTrackList}, and {@link TextTrackList}, and dispose of this Tech.\n   *\n   * @fires Component#dispose\n   */\n\n\n  Tech.prototype.dispose = function dispose() {\n\n    // clear out all tracks because we can't reuse them between techs\n    this.clearTracks(NORMAL.names);\n\n    // Turn off any manual progress or timeupdate tracking\n    if (this.manualProgress) {\n      this.manualProgressOff();\n    }\n\n    if (this.manualTimeUpdates) {\n      this.manualTimeUpdatesOff();\n    }\n\n    _Component.prototype.dispose.call(this);\n  };\n\n  /**\n   * Clear out a single `TrackList` or an array of `TrackLists` given their names.\n   *\n   * > Note: Techs without source handlers should call this between sources for `video`\n   *         & `audio` tracks. You don't want to use them between tracks!\n   *\n   * @param {string[]|string} types\n   *        TrackList names to clear, valid names are `video`, `audio`, and\n   *        `text`.\n   */\n\n\n  Tech.prototype.clearTracks = function clearTracks(types) {\n    var _this3 = this;\n\n    types = [].concat(types);\n    // clear out all tracks because we can't reuse them between techs\n    types.forEach(function (type) {\n      var list = _this3[type + 'Tracks']() || [];\n      var i = list.length;\n\n      while (i--) {\n        var track = list[i];\n\n        if (type === 'text') {\n          _this3.removeRemoteTextTrack(track);\n        }\n        list.removeTrack(track);\n      }\n    });\n  };\n\n  /**\n   * Remove any TextTracks added via addRemoteTextTrack that are\n   * flagged for automatic garbage collection\n   */\n\n\n  Tech.prototype.cleanupAutoTextTracks = function cleanupAutoTextTracks() {\n    var list = this.autoRemoteTextTracks_ || [];\n    var i = list.length;\n\n    while (i--) {\n      var track = list[i];\n\n      this.removeRemoteTextTrack(track);\n    }\n  };\n\n  /**\n   * Reset the tech, which will removes all sources and reset the internal readyState.\n   *\n   * @abstract\n   */\n\n\n  Tech.prototype.reset = function reset() {};\n\n  /**\n   * Get or set an error on the Tech.\n   *\n   * @param {MediaError} [err]\n   *        Error to set on the Tech\n   *\n   * @return {MediaError|null}\n   *         The current error object on the tech, or null if there isn't one.\n   */\n\n\n  Tech.prototype.error = function error(err) {\n    if (err !== undefined) {\n      this.error_ = new MediaError(err);\n      this.trigger('error');\n    }\n    return this.error_;\n  };\n\n  /**\n   * Returns the `TimeRange`s that have been played through for the current source.\n   *\n   * > NOTE: This implementation is incomplete. It does not track the played `TimeRange`.\n   *         It only checks whether the source has played at all or not.\n   *\n   * @return {TimeRange}\n   *         - A single time range if this video has played\n   *         - An empty set of ranges if not.\n   */\n\n\n  Tech.prototype.played = function played() {\n    if (this.hasStarted_) {\n      return createTimeRanges(0, 0);\n    }\n    return createTimeRanges();\n  };\n\n  /**\n   * Causes a manual time update to occur if {@link Tech#manualTimeUpdatesOn} was\n   * previously called.\n   *\n   * @fires Tech#timeupdate\n   */\n\n\n  Tech.prototype.setCurrentTime = function setCurrentTime() {\n    // improve the accuracy of manual timeupdates\n    if (this.manualTimeUpdates) {\n      /**\n       * A manual `timeupdate` event.\n       *\n       * @event Tech#timeupdate\n       * @type {EventTarget~Event}\n       */\n      this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });\n    }\n  };\n\n  /**\n   * Turn on listeners for {@link VideoTrackList}, {@link {AudioTrackList}, and\n   * {@link TextTrackList} events.\n   *\n   * This adds {@link EventTarget~EventListeners} for `addtrack`, and  `removetrack`.\n   *\n   * @fires Tech#audiotrackchange\n   * @fires Tech#videotrackchange\n   * @fires Tech#texttrackchange\n   */\n\n\n  Tech.prototype.initTrackListeners = function initTrackListeners() {\n    var _this4 = this;\n\n    /**\n     * Triggered when tracks are added or removed on the Tech {@link AudioTrackList}\n     *\n     * @event Tech#audiotrackchange\n     * @type {EventTarget~Event}\n     */\n\n    /**\n     * Triggered when tracks are added or removed on the Tech {@link VideoTrackList}\n     *\n     * @event Tech#videotrackchange\n     * @type {EventTarget~Event}\n     */\n\n    /**\n     * Triggered when tracks are added or removed on the Tech {@link TextTrackList}\n     *\n     * @event Tech#texttrackchange\n     * @type {EventTarget~Event}\n     */\n    NORMAL.names.forEach(function (name) {\n      var props = NORMAL[name];\n      var trackListChanges = function trackListChanges() {\n        _this4.trigger(name + 'trackchange');\n      };\n\n      var tracks = _this4[props.getterName]();\n\n      tracks.addEventListener('removetrack', trackListChanges);\n      tracks.addEventListener('addtrack', trackListChanges);\n\n      _this4.on('dispose', function () {\n        tracks.removeEventListener('removetrack', trackListChanges);\n        tracks.removeEventListener('addtrack', trackListChanges);\n      });\n    });\n  };\n\n  /**\n   * Emulate TextTracks using vtt.js if necessary\n   *\n   * @fires Tech#vttjsloaded\n   * @fires Tech#vttjserror\n   */\n\n\n  Tech.prototype.addWebVttScript_ = function addWebVttScript_() {\n    var _this5 = this;\n\n    if (window$1.WebVTT) {\n      return;\n    }\n\n    // Initially, Tech.el_ is a child of a dummy-div wait until the Component system\n    // signals that the Tech is ready at which point Tech.el_ is part of the DOM\n    // before inserting the WebVTT script\n    if (document.body.contains(this.el())) {\n\n      // load via require if available and vtt.js script location was not passed in\n      // as an option. novtt builds will turn the above require call into an empty object\n      // which will cause this if check to always fail.\n      if (!this.options_['vtt.js'] && isPlain(vtt) && Object.keys(vtt).length > 0) {\n        this.trigger('vttjsloaded');\n        return;\n      }\n\n      // load vtt.js via the script location option or the cdn of no location was\n      // passed in\n      var script = document.createElement('script');\n\n      script.src = this.options_['vtt.js'] || 'https://vjs.zencdn.net/vttjs/0.14.1/vtt.min.js';\n      script.onload = function () {\n        /**\n         * Fired when vtt.js is loaded.\n         *\n         * @event Tech#vttjsloaded\n         * @type {EventTarget~Event}\n         */\n        _this5.trigger('vttjsloaded');\n      };\n      script.onerror = function () {\n        /**\n         * Fired when vtt.js was not loaded due to an error\n         *\n         * @event Tech#vttjsloaded\n         * @type {EventTarget~Event}\n         */\n        _this5.trigger('vttjserror');\n      };\n      this.on('dispose', function () {\n        script.onload = null;\n        script.onerror = null;\n      });\n      // but have not loaded yet and we set it to true before the inject so that\n      // we don't overwrite the injected window.WebVTT if it loads right away\n      window$1.WebVTT = true;\n      this.el().parentNode.appendChild(script);\n    } else {\n      this.ready(this.addWebVttScript_);\n    }\n  };\n\n  /**\n   * Emulate texttracks\n   *\n   */\n\n\n  Tech.prototype.emulateTextTracks = function emulateTextTracks() {\n    var _this6 = this;\n\n    var tracks = this.textTracks();\n    var remoteTracks = this.remoteTextTracks();\n    var handleAddTrack = function handleAddTrack(e) {\n      return tracks.addTrack(e.track);\n    };\n    var handleRemoveTrack = function handleRemoveTrack(e) {\n      return tracks.removeTrack(e.track);\n    };\n\n    remoteTracks.on('addtrack', handleAddTrack);\n    remoteTracks.on('removetrack', handleRemoveTrack);\n\n    this.addWebVttScript_();\n\n    var updateDisplay = function updateDisplay() {\n      return _this6.trigger('texttrackchange');\n    };\n\n    var textTracksChanges = function textTracksChanges() {\n      updateDisplay();\n\n      for (var i = 0; i < tracks.length; i++) {\n        var track = tracks[i];\n\n        track.removeEventListener('cuechange', updateDisplay);\n        if (track.mode === 'showing') {\n          track.addEventListener('cuechange', updateDisplay);\n        }\n      }\n    };\n\n    textTracksChanges();\n    tracks.addEventListener('change', textTracksChanges);\n    tracks.addEventListener('addtrack', textTracksChanges);\n    tracks.addEventListener('removetrack', textTracksChanges);\n\n    this.on('dispose', function () {\n      remoteTracks.off('addtrack', handleAddTrack);\n      remoteTracks.off('removetrack', handleRemoveTrack);\n      tracks.removeEventListener('change', textTracksChanges);\n      tracks.removeEventListener('addtrack', textTracksChanges);\n      tracks.removeEventListener('removetrack', textTracksChanges);\n\n      for (var i = 0; i < tracks.length; i++) {\n        var track = tracks[i];\n\n        track.removeEventListener('cuechange', updateDisplay);\n      }\n    });\n  };\n\n  /**\n   * Create and returns a remote {@link TextTrack} object.\n   *\n   * @param {string} kind\n   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)\n   *\n   * @param {string} [label]\n   *        Label to identify the text track\n   *\n   * @param {string} [language]\n   *        Two letter language abbreviation\n   *\n   * @return {TextTrack}\n   *         The TextTrack that gets created.\n   */\n\n\n  Tech.prototype.addTextTrack = function addTextTrack(kind, label, language) {\n    if (!kind) {\n      throw new Error('TextTrack kind is required but was not provided');\n    }\n\n    return createTrackHelper(this, kind, label, language);\n  };\n\n  /**\n   * Create an emulated TextTrack for use by addRemoteTextTrack\n   *\n   * This is intended to be overridden by classes that inherit from\n   * Tech in order to create native or custom TextTracks.\n   *\n   * @param {Object} options\n   *        The object should contain the options to initialize the TextTrack with.\n   *\n   * @param {string} [options.kind]\n   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).\n   *\n   * @param {string} [options.label].\n   *        Label to identify the text track\n   *\n   * @param {string} [options.language]\n   *        Two letter language abbreviation.\n   *\n   * @return {HTMLTrackElement}\n   *         The track element that gets created.\n   */\n\n\n  Tech.prototype.createRemoteTextTrack = function createRemoteTextTrack(options) {\n    var track = mergeOptions(options, {\n      tech: this\n    });\n\n    return new REMOTE.remoteTextEl.TrackClass(track);\n  };\n\n  /**\n   * Creates a remote text track object and returns an html track element.\n   *\n   * > Note: This can be an emulated {@link HTMLTrackElement} or a native one.\n   *\n   * @param {Object} options\n   *        See {@link Tech#createRemoteTextTrack} for more detailed properties.\n   *\n   * @param {boolean} [manualCleanup=true]\n   *        - When false: the TextTrack will be automatically removed from the video\n   *          element whenever the source changes\n   *        - When True: The TextTrack will have to be cleaned up manually\n   *\n   * @return {HTMLTrackElement}\n   *         An Html Track Element.\n   *\n   * @deprecated The default functionality for this function will be equivalent\n   *             to \"manualCleanup=false\" in the future. The manualCleanup parameter will\n   *             also be removed.\n   */\n\n\n  Tech.prototype.addRemoteTextTrack = function addRemoteTextTrack() {\n    var _this7 = this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var manualCleanup = arguments[1];\n\n    var htmlTrackElement = this.createRemoteTextTrack(options);\n\n    if (manualCleanup !== true && manualCleanup !== false) {\n      // deprecation warning\n      log$1.warn('Calling addRemoteTextTrack without explicitly setting the \"manualCleanup\" parameter to `true` is deprecated and default to `false` in future version of video.js');\n      manualCleanup = true;\n    }\n\n    // store HTMLTrackElement and TextTrack to remote list\n    this.remoteTextTrackEls().addTrackElement_(htmlTrackElement);\n    this.remoteTextTracks().addTrack(htmlTrackElement.track);\n\n    if (manualCleanup !== true) {\n      // create the TextTrackList if it doesn't exist\n      this.ready(function () {\n        return _this7.autoRemoteTextTracks_.addTrack(htmlTrackElement.track);\n      });\n    }\n\n    return htmlTrackElement;\n  };\n\n  /**\n   * Remove a remote text track from the remote `TextTrackList`.\n   *\n   * @param {TextTrack} track\n   *        `TextTrack` to remove from the `TextTrackList`\n   */\n\n\n  Tech.prototype.removeRemoteTextTrack = function removeRemoteTextTrack(track) {\n    var trackElement = this.remoteTextTrackEls().getTrackElementByTrack_(track);\n\n    // remove HTMLTrackElement and TextTrack from remote list\n    this.remoteTextTrackEls().removeTrackElement_(trackElement);\n    this.remoteTextTracks().removeTrack(track);\n    this.autoRemoteTextTracks_.removeTrack(track);\n  };\n\n  /**\n   * Gets available media playback quality metrics as specified by the W3C's Media\n   * Playback Quality API.\n   *\n   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}\n   *\n   * @return {Object}\n   *         An object with supported media playback quality metrics\n   *\n   * @abstract\n   */\n\n\n  Tech.prototype.getVideoPlaybackQuality = function getVideoPlaybackQuality() {\n    return {};\n  };\n\n  /**\n   * A method to set a poster from a `Tech`.\n   *\n   * @abstract\n   */\n\n\n  Tech.prototype.setPoster = function setPoster() {};\n\n  /**\n   * A method to check for the presence of the 'playsinline' <video> attribute.\n   *\n   * @abstract\n   */\n\n\n  Tech.prototype.playsinline = function playsinline() {};\n\n  /**\n   * A method to set or unset the 'playsinline' <video> attribute.\n   *\n   * @abstract\n   */\n\n\n  Tech.prototype.setPlaysinline = function setPlaysinline() {};\n\n  /**\n   * Attempt to force override of native audio tracks.\n   *\n   * @param {Boolean} override - If set to true native audio will be overridden,\n   * otherwise native audio will potentially be used.\n   *\n   * @abstract\n   */\n\n\n  Tech.prototype.overrideNativeAudioTracks = function overrideNativeAudioTracks() {};\n\n  /**\n   * Attempt to force override of native video tracks.\n   *\n   * @param {Boolean} override - If set to true native video will be overridden,\n   * otherwise native video will potentially be used.\n   *\n   * @abstract\n   */\n\n\n  Tech.prototype.overrideNativeVideoTracks = function overrideNativeVideoTracks() {};\n\n  /*\n   * Check if the tech can support the given mime-type.\n   *\n   * The base tech does not support any type, but source handlers might\n   * overwrite this.\n   *\n   * @param  {string} type\n   *         The mimetype to check for support\n   *\n   * @return {string}\n   *         'probably', 'maybe', or empty string\n   *\n   * @see [Spec]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canPlayType}\n   *\n   * @abstract\n   */\n\n\n  Tech.prototype.canPlayType = function canPlayType() {\n    return '';\n  };\n\n  /**\n   * Check if the type is supported by this tech.\n   *\n   * The base tech does not support any type, but source handlers might\n   * overwrite this.\n   *\n   * @param {string} type\n   *        The media type to check\n   * @return {string} Returns the native video element's response\n   */\n\n\n  Tech.canPlayType = function canPlayType() {\n    return '';\n  };\n\n  /**\n   * Check if the tech can support the given source\n   * @param {Object} srcObj\n   *        The source object\n   * @param {Object} options\n   *        The options passed to the tech\n   * @return {string} 'probably', 'maybe', or '' (empty string)\n   */\n\n\n  Tech.canPlaySource = function canPlaySource(srcObj, options) {\n    return Tech.canPlayType(srcObj.type);\n  };\n\n  /*\n   * Return whether the argument is a Tech or not.\n   * Can be passed either a Class like `Html5` or a instance like `player.tech_`\n   *\n   * @param {Object} component\n   *        The item to check\n   *\n   * @return {boolean}\n   *         Whether it is a tech or not\n   *         - True if it is a tech\n   *         - False if it is not\n   */\n\n\n  Tech.isTech = function isTech(component) {\n    return component.prototype instanceof Tech || component instanceof Tech || component === Tech;\n  };\n\n  /**\n   * Registers a `Tech` into a shared list for videojs.\n   *\n   * @param {string} name\n   *        Name of the `Tech` to register.\n   *\n   * @param {Object} tech\n   *        The `Tech` class to register.\n   */\n\n\n  Tech.registerTech = function registerTech(name, tech) {\n    if (!Tech.techs_) {\n      Tech.techs_ = {};\n    }\n\n    if (!Tech.isTech(tech)) {\n      throw new Error('Tech ' + name + ' must be a Tech');\n    }\n\n    if (!Tech.canPlayType) {\n      throw new Error('Techs must have a static canPlayType method on them');\n    }\n    if (!Tech.canPlaySource) {\n      throw new Error('Techs must have a static canPlaySource method on them');\n    }\n\n    name = toTitleCase(name);\n\n    Tech.techs_[name] = tech;\n    if (name !== 'Tech') {\n      // camel case the techName for use in techOrder\n      Tech.defaultTechOrder_.push(name);\n    }\n    return tech;\n  };\n\n  /**\n   * Get a `Tech` from the shared list by name.\n   *\n   * @param {string} name\n   *        `camelCase` or `TitleCase` name of the Tech to get\n   *\n   * @return {Tech|undefined}\n   *         The `Tech` or undefined if there was no tech with the name requested.\n   */\n\n\n  Tech.getTech = function getTech(name) {\n    if (!name) {\n      return;\n    }\n\n    name = toTitleCase(name);\n\n    if (Tech.techs_ && Tech.techs_[name]) {\n      return Tech.techs_[name];\n    }\n\n    if (window$1 && window$1.videojs && window$1.videojs[name]) {\n      log$1.warn('The ' + name + ' tech was added to the videojs object when it should be registered using videojs.registerTech(name, tech)');\n      return window$1.videojs[name];\n    }\n  };\n\n  return Tech;\n}(Component);\n\n/**\n * Get the {@link VideoTrackList}\n *\n * @returns {VideoTrackList}\n * @method Tech.prototype.videoTracks\n */\n\n/**\n * Get the {@link AudioTrackList}\n *\n * @returns {AudioTrackList}\n * @method Tech.prototype.audioTracks\n */\n\n/**\n * Get the {@link TextTrackList}\n *\n * @returns {TextTrackList}\n * @method Tech.prototype.textTracks\n */\n\n/**\n * Get the remote element {@link TextTrackList}\n *\n * @returns {TextTrackList}\n * @method Tech.prototype.remoteTextTracks\n */\n\n/**\n * Get the remote element {@link HtmlTrackElementList}\n *\n * @returns {HtmlTrackElementList}\n * @method Tech.prototype.remoteTextTrackEls\n */\n\nALL.names.forEach(function (name) {\n  var props = ALL[name];\n\n  Tech.prototype[props.getterName] = function () {\n    this[props.privateName] = this[props.privateName] || new props.ListClass();\n    return this[props.privateName];\n  };\n});\n\n/**\n * List of associated text tracks\n *\n * @type {TextTrackList}\n * @private\n * @property Tech#textTracks_\n */\n\n/**\n * List of associated audio tracks.\n *\n * @type {AudioTrackList}\n * @private\n * @property Tech#audioTracks_\n */\n\n/**\n * List of associated video tracks.\n *\n * @type {VideoTrackList}\n * @private\n * @property Tech#videoTracks_\n */\n\n/**\n * Boolean indicating whether the `Tech` supports volume control.\n *\n * @type {boolean}\n * @default\n */\nTech.prototype.featuresVolumeControl = true;\n\n/**\n * Boolean indicating whether the `Tech` supports muting volume.\n *\n * @type {bolean}\n * @default\n */\nTech.prototype.featuresMuteControl = true;\n\n/**\n * Boolean indicating whether the `Tech` supports fullscreen resize control.\n * Resizing plugins using request fullscreen reloads the plugin\n *\n * @type {boolean}\n * @default\n */\nTech.prototype.featuresFullscreenResize = false;\n\n/**\n * Boolean indicating whether the `Tech` supports changing the speed at which the video\n * plays. Examples:\n *   - Set player to play 2x (twice) as fast\n *   - Set player to play 0.5x (half) as fast\n *\n * @type {boolean}\n * @default\n */\nTech.prototype.featuresPlaybackRate = false;\n\n/**\n * Boolean indicating whether the `Tech` supports the `progress` event. This is currently\n * not triggered by video-js-swf. This will be used to determine if\n * {@link Tech#manualProgressOn} should be called.\n *\n * @type {boolean}\n * @default\n */\nTech.prototype.featuresProgressEvents = false;\n\n/**\n * Boolean indicating whether the `Tech` supports the `sourceset` event.\n *\n * A tech should set this to `true` and then use {@link Tech#triggerSourceset}\n * to trigger a {@link Tech#event:sourceset} at the earliest time after getting\n * a new source.\n *\n * @type {boolean}\n * @default\n */\nTech.prototype.featuresSourceset = false;\n\n/**\n * Boolean indicating whether the `Tech` supports the `timeupdate` event. This is currently\n * not triggered by video-js-swf. This will be used to determine if\n * {@link Tech#manualTimeUpdates} should be called.\n *\n * @type {boolean}\n * @default\n */\nTech.prototype.featuresTimeupdateEvents = false;\n\n/**\n * Boolean indicating whether the `Tech` supports the native `TextTrack`s.\n * This will help us integrate with native `TextTrack`s if the browser supports them.\n *\n * @type {boolean}\n * @default\n */\nTech.prototype.featuresNativeTextTracks = false;\n\n/**\n * A functional mixin for techs that want to use the Source Handler pattern.\n * Source handlers are scripts for handling specific formats.\n * The source handler pattern is used for adaptive formats (HLS, DASH) that\n * manually load video data and feed it into a Source Buffer (Media Source Extensions)\n * Example: `Tech.withSourceHandlers.call(MyTech);`\n *\n * @param {Tech} _Tech\n *        The tech to add source handler functions to.\n *\n * @mixes Tech~SourceHandlerAdditions\n */\nTech.withSourceHandlers = function (_Tech) {\n\n  /**\n   * Register a source handler\n   *\n   * @param {Function} handler\n   *        The source handler class\n   *\n   * @param {number} [index]\n   *        Register it at the following index\n   */\n  _Tech.registerSourceHandler = function (handler, index) {\n    var handlers = _Tech.sourceHandlers;\n\n    if (!handlers) {\n      handlers = _Tech.sourceHandlers = [];\n    }\n\n    if (index === undefined) {\n      // add to the end of the list\n      index = handlers.length;\n    }\n\n    handlers.splice(index, 0, handler);\n  };\n\n  /**\n   * Check if the tech can support the given type. Also checks the\n   * Techs sourceHandlers.\n   *\n   * @param {string} type\n   *         The mimetype to check.\n   *\n   * @return {string}\n   *         'probably', 'maybe', or '' (empty string)\n   */\n  _Tech.canPlayType = function (type) {\n    var handlers = _Tech.sourceHandlers || [];\n    var can = void 0;\n\n    for (var i = 0; i < handlers.length; i++) {\n      can = handlers[i].canPlayType(type);\n\n      if (can) {\n        return can;\n      }\n    }\n\n    return '';\n  };\n\n  /**\n   * Returns the first source handler that supports the source.\n   *\n   * TODO: Answer question: should 'probably' be prioritized over 'maybe'\n   *\n   * @param {Tech~SourceObject} source\n   *        The source object\n   *\n   * @param {Object} options\n   *        The options passed to the tech\n   *\n   * @return {SourceHandler|null}\n   *          The first source handler that supports the source or null if\n   *          no SourceHandler supports the source\n   */\n  _Tech.selectSourceHandler = function (source, options) {\n    var handlers = _Tech.sourceHandlers || [];\n    var can = void 0;\n\n    for (var i = 0; i < handlers.length; i++) {\n      can = handlers[i].canHandleSource(source, options);\n\n      if (can) {\n        return handlers[i];\n      }\n    }\n\n    return null;\n  };\n\n  /**\n   * Check if the tech can support the given source.\n   *\n   * @param {Tech~SourceObject} srcObj\n   *        The source object\n   *\n   * @param {Object} options\n   *        The options passed to the tech\n   *\n   * @return {string}\n   *         'probably', 'maybe', or '' (empty string)\n   */\n  _Tech.canPlaySource = function (srcObj, options) {\n    var sh = _Tech.selectSourceHandler(srcObj, options);\n\n    if (sh) {\n      return sh.canHandleSource(srcObj, options);\n    }\n\n    return '';\n  };\n\n  /**\n   * When using a source handler, prefer its implementation of\n   * any function normally provided by the tech.\n   */\n  var deferrable = ['seekable', 'seeking', 'duration'];\n\n  /**\n   * A wrapper around {@link Tech#seekable} that will call a `SourceHandler`s seekable\n   * function if it exists, with a fallback to the Techs seekable function.\n   *\n   * @method _Tech.seekable\n   */\n\n  /**\n   * A wrapper around {@link Tech#duration} that will call a `SourceHandler`s duration\n   * function if it exists, otherwise it will fallback to the techs duration function.\n   *\n   * @method _Tech.duration\n   */\n\n  deferrable.forEach(function (fnName) {\n    var originalFn = this[fnName];\n\n    if (typeof originalFn !== 'function') {\n      return;\n    }\n\n    this[fnName] = function () {\n      if (this.sourceHandler_ && this.sourceHandler_[fnName]) {\n        return this.sourceHandler_[fnName].apply(this.sourceHandler_, arguments);\n      }\n      return originalFn.apply(this, arguments);\n    };\n  }, _Tech.prototype);\n\n  /**\n   * Create a function for setting the source using a source object\n   * and source handlers.\n   * Should never be called unless a source handler was found.\n   *\n   * @param {Tech~SourceObject} source\n   *        A source object with src and type keys\n   */\n  _Tech.prototype.setSource = function (source) {\n    var sh = _Tech.selectSourceHandler(source, this.options_);\n\n    if (!sh) {\n      // Fall back to a native source hander when unsupported sources are\n      // deliberately set\n      if (_Tech.nativeSourceHandler) {\n        sh = _Tech.nativeSourceHandler;\n      } else {\n        log$1.error('No source handler found for the current source.');\n      }\n    }\n\n    // Dispose any existing source handler\n    this.disposeSourceHandler();\n    this.off('dispose', this.disposeSourceHandler);\n\n    if (sh !== _Tech.nativeSourceHandler) {\n      this.currentSource_ = source;\n    }\n\n    this.sourceHandler_ = sh.handleSource(source, this, this.options_);\n    this.on('dispose', this.disposeSourceHandler);\n  };\n\n  /**\n   * Clean up any existing SourceHandlers and listeners when the Tech is disposed.\n   *\n   * @listens Tech#dispose\n   */\n  _Tech.prototype.disposeSourceHandler = function () {\n    // if we have a source and get another one\n    // then we are loading something new\n    // than clear all of our current tracks\n    if (this.currentSource_) {\n      this.clearTracks(['audio', 'video']);\n      this.currentSource_ = null;\n    }\n\n    // always clean up auto-text tracks\n    this.cleanupAutoTextTracks();\n\n    if (this.sourceHandler_) {\n\n      if (this.sourceHandler_.dispose) {\n        this.sourceHandler_.dispose();\n      }\n\n      this.sourceHandler_ = null;\n    }\n  };\n};\n\n// The base Tech class needs to be registered as a Component. It is the only\n// Tech that can be registered as a Component.\nComponent.registerComponent('Tech', Tech);\nTech.registerTech('Tech', Tech);\n\n/**\n * A list of techs that should be added to techOrder on Players\n *\n * @private\n */\nTech.defaultTechOrder_ = [];\n\nvar middlewares = {};\nvar middlewareInstances = {};\n\nvar TERMINATOR = {};\n\nfunction use(type, middleware) {\n  middlewares[type] = middlewares[type] || [];\n  middlewares[type].push(middleware);\n}\n\nfunction setSource(player, src, next) {\n  player.setTimeout(function () {\n    return setSourceHelper(src, middlewares[src.type], next, player);\n  }, 1);\n}\n\nfunction setTech(middleware, tech) {\n  middleware.forEach(function (mw) {\n    return mw.setTech && mw.setTech(tech);\n  });\n}\n\n/**\n * Calls a getter on the tech first, through each middleware\n * from right to left to the player.\n */\nfunction get$1(middleware, tech, method) {\n  return middleware.reduceRight(middlewareIterator(method), tech[method]());\n}\n\n/**\n * Takes the argument given to the player and calls the setter method on each\n * middleware from left to right to the tech.\n */\nfunction set$1(middleware, tech, method, arg) {\n  return tech[method](middleware.reduce(middlewareIterator(method), arg));\n}\n\n/**\n * Takes the argument given to the player and calls the `call` version of the method\n * on each middleware from left to right.\n * Then, call the passed in method on the tech and return the result unchanged\n * back to the player, through middleware, this time from right to left.\n */\nfunction mediate(middleware, tech, method) {\n  var arg = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  var callMethod = 'call' + toTitleCase(method);\n  var middlewareValue = middleware.reduce(middlewareIterator(callMethod), arg);\n  var terminated = middlewareValue === TERMINATOR;\n  var returnValue = terminated ? null : tech[method](middlewareValue);\n\n  executeRight(middleware, method, returnValue, terminated);\n\n  return returnValue;\n}\n\nvar allowedGetters = {\n  buffered: 1,\n  currentTime: 1,\n  duration: 1,\n  seekable: 1,\n  played: 1,\n  paused: 1\n};\n\nvar allowedSetters = {\n  setCurrentTime: 1\n};\n\nvar allowedMediators = {\n  play: 1,\n  pause: 1\n};\n\nfunction middlewareIterator(method) {\n  return function (value, mw) {\n    // if the previous middleware terminated, pass along the termination\n    if (value === TERMINATOR) {\n      return TERMINATOR;\n    }\n\n    if (mw[method]) {\n      return mw[method](value);\n    }\n\n    return value;\n  };\n}\n\nfunction executeRight(mws, method, value, terminated) {\n  for (var i = mws.length - 1; i >= 0; i--) {\n    var mw = mws[i];\n\n    if (mw[method]) {\n      mw[method](terminated, value);\n    }\n  }\n}\n\nfunction clearCacheForPlayer(player) {\n  middlewareInstances[player.id()] = null;\n}\n\n/**\n * {\n *  [playerId]: [[mwFactory, mwInstance], ...]\n * }\n */\nfunction getOrCreateFactory(player, mwFactory) {\n  var mws = middlewareInstances[player.id()];\n  var mw = null;\n\n  if (mws === undefined || mws === null) {\n    mw = mwFactory(player);\n    middlewareInstances[player.id()] = [[mwFactory, mw]];\n    return mw;\n  }\n\n  for (var i = 0; i < mws.length; i++) {\n    var _mws$i = mws[i],\n        mwf = _mws$i[0],\n        mwi = _mws$i[1];\n\n\n    if (mwf !== mwFactory) {\n      continue;\n    }\n\n    mw = mwi;\n  }\n\n  if (mw === null) {\n    mw = mwFactory(player);\n    mws.push([mwFactory, mw]);\n  }\n\n  return mw;\n}\n\nfunction setSourceHelper() {\n  var src = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var middleware = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var next = arguments[2];\n  var player = arguments[3];\n  var acc = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  var lastRun = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n  var mwFactory = middleware[0],\n      mwrest = middleware.slice(1);\n\n  // if mwFactory is a string, then we're at a fork in the road\n\n  if (typeof mwFactory === 'string') {\n    setSourceHelper(src, middlewares[mwFactory], next, player, acc, lastRun);\n\n    // if we have an mwFactory, call it with the player to get the mw,\n    // then call the mw's setSource method\n  } else if (mwFactory) {\n    var mw = getOrCreateFactory(player, mwFactory);\n\n    // if setSource isn't present, implicitly select this middleware\n    if (!mw.setSource) {\n      acc.push(mw);\n      return setSourceHelper(src, mwrest, next, player, acc, lastRun);\n    }\n\n    mw.setSource(assign({}, src), function (err, _src) {\n\n      // something happened, try the next middleware on the current level\n      // make sure to use the old src\n      if (err) {\n        return setSourceHelper(src, mwrest, next, player, acc, lastRun);\n      }\n\n      // we've succeeded, now we need to go deeper\n      acc.push(mw);\n\n      // if it's the same type, continue down the current chain\n      // otherwise, we want to go down the new chain\n      setSourceHelper(_src, src.type === _src.type ? mwrest : middlewares[_src.type], next, player, acc, lastRun);\n    });\n  } else if (mwrest.length) {\n    setSourceHelper(src, mwrest, next, player, acc, lastRun);\n  } else if (lastRun) {\n    next(src, acc);\n  } else {\n    setSourceHelper(src, middlewares['*'], next, player, acc, true);\n  }\n}\n\n/**\n * Mimetypes\n *\n * @see http://hul.harvard.edu/ois/////systems/wax/wax-public-help/mimetypes.htm\n * @typedef Mimetypes~Kind\n * @enum\n */\nvar MimetypesKind = {\n  opus: 'video/ogg',\n  ogv: 'video/ogg',\n  mp4: 'video/mp4',\n  mov: 'video/mp4',\n  m4v: 'video/mp4',\n  mkv: 'video/x-matroska',\n  mp3: 'audio/mpeg',\n  aac: 'audio/aac',\n  oga: 'audio/ogg',\n  m3u8: 'application/x-mpegURL'\n};\n\n/**\n * Get the mimetype of a given src url if possible\n *\n * @param {string} src\n *        The url to the src\n *\n * @return {string}\n *         return the mimetype if it was known or empty string otherwise\n */\nvar getMimetype = function getMimetype() {\n  var src = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n  var ext = getFileExtension(src);\n  var mimetype = MimetypesKind[ext.toLowerCase()];\n\n  return mimetype || '';\n};\n\n/**\n * Find the mime type of a given source string if possible. Uses the player\n * source cache.\n *\n * @param {Player} player\n *        The player object\n *\n * @param {string} src\n *        The source string\n *\n * @return {string}\n *         The type that was found\n */\nvar findMimetype = function findMimetype(player, src) {\n  if (!src) {\n    return '';\n  }\n\n  // 1. check for the type in the `source` cache\n  if (player.cache_.source.src === src && player.cache_.source.type) {\n    return player.cache_.source.type;\n  }\n\n  // 2. see if we have this source in our `currentSources` cache\n  var matchingSources = player.cache_.sources.filter(function (s) {\n    return s.src === src;\n  });\n\n  if (matchingSources.length) {\n    return matchingSources[0].type;\n  }\n\n  // 3. look for the src url in source elements and use the type there\n  var sources = player.$$('source');\n\n  for (var i = 0; i < sources.length; i++) {\n    var s = sources[i];\n\n    if (s.type && s.src && s.src === src) {\n      return s.type;\n    }\n  }\n\n  // 4. finally fallback to our list of mime types based on src url extension\n  return getMimetype(src);\n};\n\n/**\n * @module filter-source\n */\n\n/**\n * Filter out single bad source objects or multiple source objects in an\n * array. Also flattens nested source object arrays into a 1 dimensional\n * array of source objects.\n *\n * @param {Tech~SourceObject|Tech~SourceObject[]} src\n *        The src object to filter\n *\n * @return {Tech~SourceObject[]}\n *         An array of sourceobjects containing only valid sources\n *\n * @private\n */\nvar filterSource = function filterSource(src) {\n  // traverse array\n  if (Array.isArray(src)) {\n    var newsrc = [];\n\n    src.forEach(function (srcobj) {\n      srcobj = filterSource(srcobj);\n\n      if (Array.isArray(srcobj)) {\n        newsrc = newsrc.concat(srcobj);\n      } else if (isObject(srcobj)) {\n        newsrc.push(srcobj);\n      }\n    });\n\n    src = newsrc;\n  } else if (typeof src === 'string' && src.trim()) {\n    // convert string into object\n    src = [fixSource({ src: src })];\n  } else if (isObject(src) && typeof src.src === 'string' && src.src && src.src.trim()) {\n    // src is already valid\n    src = [fixSource(src)];\n  } else {\n    // invalid source, turn it into an empty array\n    src = [];\n  }\n\n  return src;\n};\n\n/**\n * Checks src mimetype, adding it when possible\n *\n * @param {Tech~SourceObject} src\n *        The src object to check\n * @return {Tech~SourceObject}\n *        src Object with known type\n */\nfunction fixSource(src) {\n  var mimetype = getMimetype(src.src);\n\n  if (!src.type && mimetype) {\n    src.type = mimetype;\n  }\n\n  return src;\n}\n\n/**\n * @file loader.js\n */\n\n/**\n * The `MediaLoader` is the `Component` that decides which playback technology to load\n * when a player is initialized.\n *\n * @extends Component\n */\n\nvar MediaLoader = function (_Component) {\n  inherits(MediaLoader, _Component);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should attach to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        The function that is run when this component is ready.\n   */\n  function MediaLoader(player, options, ready) {\n    classCallCheck(this, MediaLoader);\n\n    // MediaLoader has no element\n    var options_ = mergeOptions({ createEl: false }, options);\n\n    // If there are no sources when the player is initialized,\n    // load the first supported playback technology.\n\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options_, ready));\n\n    if (!options.playerOptions.sources || options.playerOptions.sources.length === 0) {\n      for (var i = 0, j = options.playerOptions.techOrder; i < j.length; i++) {\n        var techName = toTitleCase(j[i]);\n        var tech = Tech.getTech(techName);\n\n        // Support old behavior of techs being registered as components.\n        // Remove once that deprecated behavior is removed.\n        if (!techName) {\n          tech = Component.getComponent(techName);\n        }\n\n        // Check if the browser supports this technology\n        if (tech && tech.isSupported()) {\n          player.loadTech_(techName);\n          break;\n        }\n      }\n    } else {\n      // Loop through playback technologies (HTML5, Flash) and check for support.\n      // Then load the best source.\n      // A few assumptions here:\n      //   All playback technologies respect preload false.\n      player.src(options.playerOptions.sources);\n    }\n    return _this;\n  }\n\n  return MediaLoader;\n}(Component);\n\nComponent.registerComponent('MediaLoader', MediaLoader);\n\n/**\n * @file clickable-component.js\n */\n\n/**\n * Clickable Component which is clickable or keyboard actionable,\n * but is not a native HTML button.\n *\n * @extends Component\n */\n\nvar ClickableComponent = function (_Component) {\n  inherits(ClickableComponent, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param  {Player} player\n   *         The `Player` that this class should be attached to.\n   *\n   * @param  {Object} [options]\n   *         The key/value store of player options.\n   */\n  function ClickableComponent(player, options) {\n    classCallCheck(this, ClickableComponent);\n\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));\n\n    _this.emitTapEvents();\n\n    _this.enable();\n    return _this;\n  }\n\n  /**\n   * Create the `Component`s DOM element.\n   *\n   * @param {string} [tag=div]\n   *        The element's node type.\n   *\n   * @param {Object} [props={}]\n   *        An object of properties that should be set on the element.\n   *\n   * @param {Object} [attributes={}]\n   *        An object of attributes that should be set on the element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n\n\n  ClickableComponent.prototype.createEl = function createEl$$1() {\n    var tag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'div';\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    props = assign({\n      innerHTML: '<span aria-hidden=\"true\" class=\"vjs-icon-placeholder\"></span>',\n      className: this.buildCSSClass(),\n      tabIndex: 0\n    }, props);\n\n    if (tag === 'button') {\n      log$1.error('Creating a ClickableComponent with an HTML element of ' + tag + ' is not supported; use a Button instead.');\n    }\n\n    // Add ARIA attributes for clickable element which is not a native HTML button\n    attributes = assign({\n      role: 'button'\n    }, attributes);\n\n    this.tabIndex_ = props.tabIndex;\n\n    var el = _Component.prototype.createEl.call(this, tag, props, attributes);\n\n    this.createControlTextEl(el);\n\n    return el;\n  };\n\n  ClickableComponent.prototype.dispose = function dispose() {\n    // remove controlTextEl_ on dispose\n    this.controlTextEl_ = null;\n\n    _Component.prototype.dispose.call(this);\n  };\n\n  /**\n   * Create a control text element on this `Component`\n   *\n   * @param {Element} [el]\n   *        Parent element for the control text.\n   *\n   * @return {Element}\n   *         The control text element that gets created.\n   */\n\n\n  ClickableComponent.prototype.createControlTextEl = function createControlTextEl(el) {\n    this.controlTextEl_ = createEl('span', {\n      className: 'vjs-control-text'\n    }, {\n      // let the screen reader user know that the text of the element may change\n      'aria-live': 'polite'\n    });\n\n    if (el) {\n      el.appendChild(this.controlTextEl_);\n    }\n\n    this.controlText(this.controlText_, el);\n\n    return this.controlTextEl_;\n  };\n\n  /**\n   * Get or set the localize text to use for the controls on the `Component`.\n   *\n   * @param {string} [text]\n   *        Control text for element.\n   *\n   * @param {Element} [el=this.el()]\n   *        Element to set the title on.\n   *\n   * @return {string}\n   *         - The control text when getting\n   */\n\n\n  ClickableComponent.prototype.controlText = function controlText(text) {\n    var el = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.el();\n\n    if (text === undefined) {\n      return this.controlText_ || 'Need Text';\n    }\n\n    var localizedText = this.localize(text);\n\n    this.controlText_ = text;\n    textContent(this.controlTextEl_, localizedText);\n    if (!this.nonIconControl) {\n      // Set title attribute if only an icon is shown\n      el.setAttribute('title', localizedText);\n    }\n  };\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  ClickableComponent.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-control vjs-button ' + _Component.prototype.buildCSSClass.call(this);\n  };\n\n  /**\n   * Enable this `Component`s element.\n   */\n\n\n  ClickableComponent.prototype.enable = function enable() {\n    if (!this.enabled_) {\n      this.enabled_ = true;\n      this.removeClass('vjs-disabled');\n      this.el_.setAttribute('aria-disabled', 'false');\n      if (typeof this.tabIndex_ !== 'undefined') {\n        this.el_.setAttribute('tabIndex', this.tabIndex_);\n      }\n      this.on(['tap', 'click'], this.handleClick);\n      this.on('focus', this.handleFocus);\n      this.on('blur', this.handleBlur);\n    }\n  };\n\n  /**\n   * Disable this `Component`s element.\n   */\n\n\n  ClickableComponent.prototype.disable = function disable() {\n    this.enabled_ = false;\n    this.addClass('vjs-disabled');\n    this.el_.setAttribute('aria-disabled', 'true');\n    if (typeof this.tabIndex_ !== 'undefined') {\n      this.el_.removeAttribute('tabIndex');\n    }\n    this.off(['tap', 'click'], this.handleClick);\n    this.off('focus', this.handleFocus);\n    this.off('blur', this.handleBlur);\n  };\n\n  /**\n   * This gets called when a `ClickableComponent` gets:\n   * - Clicked (via the `click` event, listening starts in the constructor)\n   * - Tapped (via the `tap` event, listening starts in the constructor)\n   * - The following things happen in order:\n   *   1. {@link ClickableComponent#handleFocus} is called via a `focus` event on the\n   *      `ClickableComponent`.\n   *   2. {@link ClickableComponent#handleFocus} adds a listener for `keydown` on using\n   *      {@link ClickableComponent#handleKeyPress}.\n   *   3. `ClickableComponent` has not had a `blur` event (`blur` means that focus was lost). The user presses\n   *      the space or enter key.\n   *   4. {@link ClickableComponent#handleKeyPress} calls this function with the `keydown`\n   *      event as a parameter.\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   * @abstract\n   */\n\n\n  ClickableComponent.prototype.handleClick = function handleClick(event) {};\n\n  /**\n   * This gets called when a `ClickableComponent` gains focus via a `focus` event.\n   * Turns on listening for `keydown` events. When they happen it\n   * calls `this.handleKeyPress`.\n   *\n   * @param {EventTarget~Event} event\n   *        The `focus` event that caused this function to be called.\n   *\n   * @listens focus\n   */\n\n\n  ClickableComponent.prototype.handleFocus = function handleFocus(event) {\n    on(document, 'keydown', bind(this, this.handleKeyPress));\n  };\n\n  /**\n   * Called when this ClickableComponent has focus and a key gets pressed down. By\n   * default it will call `this.handleClick` when the key is space or enter.\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown` event that caused this function to be called.\n   *\n   * @listens keydown\n   */\n\n\n  ClickableComponent.prototype.handleKeyPress = function handleKeyPress(event) {\n\n    // Support Space (32) or Enter (13) key operation to fire a click event\n    if (event.which === 32 || event.which === 13) {\n      event.preventDefault();\n      this.trigger('click');\n    } else if (_Component.prototype.handleKeyPress) {\n\n      // Pass keypress handling up for unsupported keys\n      _Component.prototype.handleKeyPress.call(this, event);\n    }\n  };\n\n  /**\n   * Called when a `ClickableComponent` loses focus. Turns off the listener for\n   * `keydown` events. Which Stops `this.handleKeyPress` from getting called.\n   *\n   * @param {EventTarget~Event} event\n   *        The `blur` event that caused this function to be called.\n   *\n   * @listens blur\n   */\n\n\n  ClickableComponent.prototype.handleBlur = function handleBlur(event) {\n    off(document, 'keydown', bind(this, this.handleKeyPress));\n  };\n\n  return ClickableComponent;\n}(Component);\n\nComponent.registerComponent('ClickableComponent', ClickableComponent);\n\n/**\n * @file poster-image.js\n */\n\n/**\n * A `ClickableComponent` that handles showing the poster image for the player.\n *\n * @extends ClickableComponent\n */\n\nvar PosterImage = function (_ClickableComponent) {\n  inherits(PosterImage, _ClickableComponent);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should attach to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function PosterImage(player, options) {\n    classCallCheck(this, PosterImage);\n\n    var _this = possibleConstructorReturn(this, _ClickableComponent.call(this, player, options));\n\n    _this.update();\n    player.on('posterchange', bind(_this, _this.update));\n    return _this;\n  }\n\n  /**\n   * Clean up and dispose of the `PosterImage`.\n   */\n\n\n  PosterImage.prototype.dispose = function dispose() {\n    this.player().off('posterchange', this.update);\n    _ClickableComponent.prototype.dispose.call(this);\n  };\n\n  /**\n   * Create the `PosterImage`s DOM element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n\n\n  PosterImage.prototype.createEl = function createEl$$1() {\n    var el = createEl('div', {\n      className: 'vjs-poster',\n\n      // Don't want poster to be tabbable.\n      tabIndex: -1\n    });\n\n    return el;\n  };\n\n  /**\n   * An {@link EventTarget~EventListener} for {@link Player#posterchange} events.\n   *\n   * @listens Player#posterchange\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `Player#posterchange` event that triggered this function.\n   */\n\n\n  PosterImage.prototype.update = function update(event) {\n    var url = this.player().poster();\n\n    this.setSrc(url);\n\n    // If there's no poster source we should display:none on this component\n    // so it's not still clickable or right-clickable\n    if (url) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  };\n\n  /**\n   * Set the source of the `PosterImage` depending on the display method.\n   *\n   * @param {string} url\n   *        The URL to the source for the `PosterImage`.\n   */\n\n\n  PosterImage.prototype.setSrc = function setSrc(url) {\n    var backgroundImage = '';\n\n    // Any falsy value should stay as an empty string, otherwise\n    // this will throw an extra error\n    if (url) {\n      backgroundImage = 'url(\"' + url + '\")';\n    }\n\n    this.el_.style.backgroundImage = backgroundImage;\n  };\n\n  /**\n   * An {@link EventTarget~EventListener} for clicks on the `PosterImage`. See\n   * {@link ClickableComponent#handleClick} for instances where this will be triggered.\n   *\n   * @listens tap\n   * @listens click\n   * @listens keydown\n   *\n   * @param {EventTarget~Event} event\n   +        The `click`, `tap` or `keydown` event that caused this function to be called.\n   */\n\n\n  PosterImage.prototype.handleClick = function handleClick(event) {\n    // We don't want a click to trigger playback when controls are disabled\n    if (!this.player_.controls()) {\n      return;\n    }\n\n    if (this.player_.paused()) {\n      silencePromise(this.player_.play());\n    } else {\n      this.player_.pause();\n    }\n  };\n\n  return PosterImage;\n}(ClickableComponent);\n\nComponent.registerComponent('PosterImage', PosterImage);\n\n/**\n * @file text-track-display.js\n */\n\nvar darkGray = '#222';\nvar lightGray = '#ccc';\nvar fontMap = {\n  monospace: 'monospace',\n  sansSerif: 'sans-serif',\n  serif: 'serif',\n  monospaceSansSerif: '\"Andale Mono\", \"Lucida Console\", monospace',\n  monospaceSerif: '\"Courier New\", monospace',\n  proportionalSansSerif: 'sans-serif',\n  proportionalSerif: 'serif',\n  casual: '\"Comic Sans MS\", Impact, fantasy',\n  script: '\"Monotype Corsiva\", cursive',\n  smallcaps: '\"Andale Mono\", \"Lucida Console\", monospace, sans-serif'\n};\n\n/**\n * Construct an rgba color from a given hex color code.\n *\n * @param {number} color\n *        Hex number for color, like #f0e or #f604e2.\n *\n * @param {number} opacity\n *        Value for opacity, 0.0 - 1.0.\n *\n * @return {string}\n *         The rgba color that was created, like 'rgba(255, 0, 0, 0.3)'.\n */\nfunction constructColor(color, opacity) {\n  var hex = void 0;\n\n  if (color.length === 4) {\n    // color looks like \"#f0e\"\n    hex = color[1] + color[1] + color[2] + color[2] + color[3] + color[3];\n  } else if (color.length === 7) {\n    // color looks like \"#f604e2\"\n    hex = color.slice(1);\n  } else {\n    throw new Error('Invalid color code provided, ' + color + '; must be formatted as e.g. #f0e or #f604e2.');\n  }\n  return 'rgba(' + parseInt(hex.slice(0, 2), 16) + ',' + parseInt(hex.slice(2, 4), 16) + ',' + parseInt(hex.slice(4, 6), 16) + ',' + opacity + ')';\n}\n\n/**\n * Try to update the style of a DOM element. Some style changes will throw an error,\n * particularly in IE8. Those should be noops.\n *\n * @param {Element} el\n *        The DOM element to be styled.\n *\n * @param {string} style\n *        The CSS property on the element that should be styled.\n *\n * @param {string} rule\n *        The style rule that should be applied to the property.\n *\n * @private\n */\nfunction tryUpdateStyle(el, style, rule) {\n  try {\n    el.style[style] = rule;\n  } catch (e) {\n\n    // Satisfies linter.\n    return;\n  }\n}\n\n/**\n * The component for displaying text track cues.\n *\n * @extends Component\n */\n\nvar TextTrackDisplay = function (_Component) {\n  inherits(TextTrackDisplay, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        The function to call when `TextTrackDisplay` is ready.\n   */\n  function TextTrackDisplay(player, options, ready) {\n    classCallCheck(this, TextTrackDisplay);\n\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options, ready));\n\n    player.on('loadstart', bind(_this, _this.toggleDisplay));\n    player.on('texttrackchange', bind(_this, _this.updateDisplay));\n    player.on('loadstart', bind(_this, _this.preselectTrack));\n\n    // This used to be called during player init, but was causing an error\n    // if a track should show by default and the display hadn't loaded yet.\n    // Should probably be moved to an external track loader when we support\n    // tracks that don't need a display.\n    player.ready(bind(_this, function () {\n      if (player.tech_ && player.tech_.featuresNativeTextTracks) {\n        this.hide();\n        return;\n      }\n\n      player.on('fullscreenchange', bind(this, this.updateDisplay));\n\n      var tracks = this.options_.playerOptions.tracks || [];\n\n      for (var i = 0; i < tracks.length; i++) {\n        this.player_.addRemoteTextTrack(tracks[i], true);\n      }\n\n      this.preselectTrack();\n    }));\n    return _this;\n  }\n\n  /**\n  * Preselect a track following this precedence:\n  * - matches the previously selected {@link TextTrack}'s language and kind\n  * - matches the previously selected {@link TextTrack}'s language only\n  * - is the first default captions track\n  * - is the first default descriptions track\n  *\n  * @listens Player#loadstart\n  */\n\n\n  TextTrackDisplay.prototype.preselectTrack = function preselectTrack() {\n    var modes = { captions: 1, subtitles: 1 };\n    var trackList = this.player_.textTracks();\n    var userPref = this.player_.cache_.selectedLanguage;\n    var firstDesc = void 0;\n    var firstCaptions = void 0;\n    var preferredTrack = void 0;\n\n    for (var i = 0; i < trackList.length; i++) {\n      var track = trackList[i];\n\n      if (userPref && userPref.enabled && userPref.language === track.language) {\n        // Always choose the track that matches both language and kind\n        if (track.kind === userPref.kind) {\n          preferredTrack = track;\n          // or choose the first track that matches language\n        } else if (!preferredTrack) {\n          preferredTrack = track;\n        }\n\n        // clear everything if offTextTrackMenuItem was clicked\n      } else if (userPref && !userPref.enabled) {\n        preferredTrack = null;\n        firstDesc = null;\n        firstCaptions = null;\n      } else if (track.default) {\n        if (track.kind === 'descriptions' && !firstDesc) {\n          firstDesc = track;\n        } else if (track.kind in modes && !firstCaptions) {\n          firstCaptions = track;\n        }\n      }\n    }\n\n    // The preferredTrack matches the user preference and takes\n    // precedence over all the other tracks.\n    // So, display the preferredTrack before the first default track\n    // and the subtitles/captions track before the descriptions track\n    if (preferredTrack) {\n      preferredTrack.mode = 'showing';\n    } else if (firstCaptions) {\n      firstCaptions.mode = 'showing';\n    } else if (firstDesc) {\n      firstDesc.mode = 'showing';\n    }\n  };\n\n  /**\n   * Turn display of {@link TextTrack}'s from the current state into the other state.\n   * There are only two states:\n   * - 'shown'\n   * - 'hidden'\n   *\n   * @listens Player#loadstart\n   */\n\n\n  TextTrackDisplay.prototype.toggleDisplay = function toggleDisplay() {\n    if (this.player_.tech_ && this.player_.tech_.featuresNativeTextTracks) {\n      this.hide();\n    } else {\n      this.show();\n    }\n  };\n\n  /**\n   * Create the {@link Component}'s DOM element.\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  TextTrackDisplay.prototype.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-text-track-display'\n    }, {\n      'aria-live': 'off',\n      'aria-atomic': 'true'\n    });\n  };\n\n  /**\n   * Clear all displayed {@link TextTrack}s.\n   */\n\n\n  TextTrackDisplay.prototype.clearDisplay = function clearDisplay() {\n    if (typeof window$1.WebVTT === 'function') {\n      window$1.WebVTT.processCues(window$1, [], this.el_);\n    }\n  };\n\n  /**\n   * Update the displayed TextTrack when a either a {@link Player#texttrackchange} or\n   * a {@link Player#fullscreenchange} is fired.\n   *\n   * @listens Player#texttrackchange\n   * @listens Player#fullscreenchange\n   */\n\n\n  TextTrackDisplay.prototype.updateDisplay = function updateDisplay() {\n    var tracks = this.player_.textTracks();\n\n    this.clearDisplay();\n\n    // Track display prioritization model: if multiple tracks are 'showing',\n    //  display the first 'subtitles' or 'captions' track which is 'showing',\n    //  otherwise display the first 'descriptions' track which is 'showing'\n\n    var descriptionsTrack = null;\n    var captionsSubtitlesTrack = null;\n    var i = tracks.length;\n\n    while (i--) {\n      var track = tracks[i];\n\n      if (track.mode === 'showing') {\n        if (track.kind === 'descriptions') {\n          descriptionsTrack = track;\n        } else {\n          captionsSubtitlesTrack = track;\n        }\n      }\n    }\n\n    if (captionsSubtitlesTrack) {\n      if (this.getAttribute('aria-live') !== 'off') {\n        this.setAttribute('aria-live', 'off');\n      }\n      this.updateForTrack(captionsSubtitlesTrack);\n    } else if (descriptionsTrack) {\n      if (this.getAttribute('aria-live') !== 'assertive') {\n        this.setAttribute('aria-live', 'assertive');\n      }\n      this.updateForTrack(descriptionsTrack);\n    }\n  };\n\n  /**\n   * Add an {@link TextTrack} to to the {@link Tech}s {@link TextTrackList}.\n   *\n   * @param {TextTrack} track\n   *        Text track object to be added to the list.\n   */\n\n\n  TextTrackDisplay.prototype.updateForTrack = function updateForTrack(track) {\n    if (typeof window$1.WebVTT !== 'function' || !track.activeCues) {\n      return;\n    }\n\n    var cues = [];\n\n    for (var _i = 0; _i < track.activeCues.length; _i++) {\n      cues.push(track.activeCues[_i]);\n    }\n\n    window$1.WebVTT.processCues(window$1, cues, this.el_);\n\n    if (!this.player_.textTrackSettings) {\n      return;\n    }\n\n    var overrides = this.player_.textTrackSettings.getValues();\n\n    var i = cues.length;\n\n    while (i--) {\n      var cue = cues[i];\n\n      if (!cue) {\n        continue;\n      }\n\n      var cueDiv = cue.displayState;\n\n      if (overrides.color) {\n        cueDiv.firstChild.style.color = overrides.color;\n      }\n      if (overrides.textOpacity) {\n        tryUpdateStyle(cueDiv.firstChild, 'color', constructColor(overrides.color || '#fff', overrides.textOpacity));\n      }\n      if (overrides.backgroundColor) {\n        cueDiv.firstChild.style.backgroundColor = overrides.backgroundColor;\n      }\n      if (overrides.backgroundOpacity) {\n        tryUpdateStyle(cueDiv.firstChild, 'backgroundColor', constructColor(overrides.backgroundColor || '#000', overrides.backgroundOpacity));\n      }\n      if (overrides.windowColor) {\n        if (overrides.windowOpacity) {\n          tryUpdateStyle(cueDiv, 'backgroundColor', constructColor(overrides.windowColor, overrides.windowOpacity));\n        } else {\n          cueDiv.style.backgroundColor = overrides.windowColor;\n        }\n      }\n      if (overrides.edgeStyle) {\n        if (overrides.edgeStyle === 'dropshadow') {\n          cueDiv.firstChild.style.textShadow = '2px 2px 3px ' + darkGray + ', 2px 2px 4px ' + darkGray + ', 2px 2px 5px ' + darkGray;\n        } else if (overrides.edgeStyle === 'raised') {\n          cueDiv.firstChild.style.textShadow = '1px 1px ' + darkGray + ', 2px 2px ' + darkGray + ', 3px 3px ' + darkGray;\n        } else if (overrides.edgeStyle === 'depressed') {\n          cueDiv.firstChild.style.textShadow = '1px 1px ' + lightGray + ', 0 1px ' + lightGray + ', -1px -1px ' + darkGray + ', 0 -1px ' + darkGray;\n        } else if (overrides.edgeStyle === 'uniform') {\n          cueDiv.firstChild.style.textShadow = '0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray;\n        }\n      }\n      if (overrides.fontPercent && overrides.fontPercent !== 1) {\n        var fontSize = window$1.parseFloat(cueDiv.style.fontSize);\n\n        cueDiv.style.fontSize = fontSize * overrides.fontPercent + 'px';\n        cueDiv.style.height = 'auto';\n        cueDiv.style.top = 'auto';\n        cueDiv.style.bottom = '2px';\n      }\n      if (overrides.fontFamily && overrides.fontFamily !== 'default') {\n        if (overrides.fontFamily === 'small-caps') {\n          cueDiv.firstChild.style.fontVariant = 'small-caps';\n        } else {\n          cueDiv.firstChild.style.fontFamily = fontMap[overrides.fontFamily];\n        }\n      }\n    }\n  };\n\n  return TextTrackDisplay;\n}(Component);\n\nComponent.registerComponent('TextTrackDisplay', TextTrackDisplay);\n\n/**\n * @file loading-spinner.js\n */\n\n/**\n * A loading spinner for use during waiting/loading events.\n *\n * @extends Component\n */\n\nvar LoadingSpinner = function (_Component) {\n  inherits(LoadingSpinner, _Component);\n\n  function LoadingSpinner() {\n    classCallCheck(this, LoadingSpinner);\n    return possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  /**\n   * Create the `LoadingSpinner`s DOM element.\n   *\n   * @return {Element}\n   *         The dom element that gets created.\n   */\n  LoadingSpinner.prototype.createEl = function createEl$$1() {\n    var isAudio = this.player_.isAudio();\n    var playerType = this.localize(isAudio ? 'Audio Player' : 'Video Player');\n    var controlText = createEl('span', {\n      className: 'vjs-control-text',\n      innerHTML: this.localize('{1} is loading.', [playerType])\n    });\n\n    var el = _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-loading-spinner',\n      dir: 'ltr'\n    });\n\n    el.appendChild(controlText);\n\n    return el;\n  };\n\n  return LoadingSpinner;\n}(Component);\n\nComponent.registerComponent('LoadingSpinner', LoadingSpinner);\n\n/**\n * @file button.js\n */\n\n/**\n * Base class for all buttons.\n *\n * @extends ClickableComponent\n */\n\nvar Button = function (_ClickableComponent) {\n  inherits(Button, _ClickableComponent);\n\n  function Button() {\n    classCallCheck(this, Button);\n    return possibleConstructorReturn(this, _ClickableComponent.apply(this, arguments));\n  }\n\n  /**\n   * Create the `Button`s DOM element.\n   *\n   * @param {string} [tag=\"button\"]\n   *        The element's node type. This argument is IGNORED: no matter what\n   *        is passed, it will always create a `button` element.\n   *\n   * @param {Object} [props={}]\n   *        An object of properties that should be set on the element.\n   *\n   * @param {Object} [attributes={}]\n   *        An object of attributes that should be set on the element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n  Button.prototype.createEl = function createEl(tag) {\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    tag = 'button';\n\n    props = assign({\n      innerHTML: '<span aria-hidden=\"true\" class=\"vjs-icon-placeholder\"></span>',\n      className: this.buildCSSClass()\n    }, props);\n\n    // Add attributes for button element\n    attributes = assign({\n\n      // Necessary since the default button type is \"submit\"\n      type: 'button'\n    }, attributes);\n\n    var el = Component.prototype.createEl.call(this, tag, props, attributes);\n\n    this.createControlTextEl(el);\n\n    return el;\n  };\n\n  /**\n   * Add a child `Component` inside of this `Button`.\n   *\n   * @param {string|Component} child\n   *        The name or instance of a child to add.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of options that will get passed to children of\n   *        the child.\n   *\n   * @return {Component}\n   *         The `Component` that gets added as a child. When using a string the\n   *         `Component` will get created by this process.\n   *\n   * @deprecated since version 5\n   */\n\n\n  Button.prototype.addChild = function addChild(child) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var className = this.constructor.name;\n\n    log$1.warn('Adding an actionable (user controllable) child to a Button (' + className + ') is not supported; use a ClickableComponent instead.');\n\n    // Avoid the error message generated by ClickableComponent's addChild method\n    return Component.prototype.addChild.call(this, child, options);\n  };\n\n  /**\n   * Enable the `Button` element so that it can be activated or clicked. Use this with\n   * {@link Button#disable}.\n   */\n\n\n  Button.prototype.enable = function enable() {\n    _ClickableComponent.prototype.enable.call(this);\n    this.el_.removeAttribute('disabled');\n  };\n\n  /**\n   * Disable the `Button` element so that it cannot be activated or clicked. Use this with\n   * {@link Button#enable}.\n   */\n\n\n  Button.prototype.disable = function disable() {\n    _ClickableComponent.prototype.disable.call(this);\n    this.el_.setAttribute('disabled', 'disabled');\n  };\n\n  /**\n   * This gets called when a `Button` has focus and `keydown` is triggered via a key\n   * press.\n   *\n   * @param {EventTarget~Event} event\n   *        The event that caused this function to get called.\n   *\n   * @listens keydown\n   */\n\n\n  Button.prototype.handleKeyPress = function handleKeyPress(event) {\n\n    // Ignore Space (32) or Enter (13) key operation, which is handled by the browser for a button.\n    if (event.which === 32 || event.which === 13) {\n      return;\n    }\n\n    // Pass keypress handling up for unsupported keys\n    _ClickableComponent.prototype.handleKeyPress.call(this, event);\n  };\n\n  return Button;\n}(ClickableComponent);\n\nComponent.registerComponent('Button', Button);\n\n/**\n * @file big-play-button.js\n */\n\n/**\n * The initial play button that shows before the video has played. The hiding of the\n * `BigPlayButton` get done via CSS and `Player` states.\n *\n * @extends Button\n */\n\nvar BigPlayButton = function (_Button) {\n  inherits(BigPlayButton, _Button);\n\n  function BigPlayButton(player, options) {\n    classCallCheck(this, BigPlayButton);\n\n    var _this = possibleConstructorReturn(this, _Button.call(this, player, options));\n\n    _this.mouseused_ = false;\n\n    _this.on('mousedown', _this.handleMouseDown);\n    return _this;\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object. Always returns 'vjs-big-play-button'.\n   */\n\n\n  BigPlayButton.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-big-play-button';\n  };\n\n  /**\n   * This gets called when a `BigPlayButton` \"clicked\". See {@link ClickableComponent}\n   * for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n\n\n  BigPlayButton.prototype.handleClick = function handleClick(event) {\n    var playPromise = this.player_.play();\n\n    // exit early if clicked via the mouse\n    if (this.mouseused_ && event.clientX && event.clientY) {\n      silencePromise(playPromise);\n      return;\n    }\n\n    var cb = this.player_.getChild('controlBar');\n    var playToggle = cb && cb.getChild('playToggle');\n\n    if (!playToggle) {\n      this.player_.focus();\n      return;\n    }\n\n    var playFocus = function playFocus() {\n      return playToggle.focus();\n    };\n\n    if (isPromise(playPromise)) {\n      playPromise.then(playFocus, function () {});\n    } else {\n      this.setTimeout(playFocus, 1);\n    }\n  };\n\n  BigPlayButton.prototype.handleKeyPress = function handleKeyPress(event) {\n    this.mouseused_ = false;\n\n    _Button.prototype.handleKeyPress.call(this, event);\n  };\n\n  BigPlayButton.prototype.handleMouseDown = function handleMouseDown(event) {\n    this.mouseused_ = true;\n  };\n\n  return BigPlayButton;\n}(Button);\n\n/**\n * The text that should display over the `BigPlayButton`s controls. Added to for localization.\n *\n * @type {string}\n * @private\n */\n\n\nBigPlayButton.prototype.controlText_ = 'Play Video';\n\nComponent.registerComponent('BigPlayButton', BigPlayButton);\n\n/**\n * @file close-button.js\n */\n\n/**\n * The `CloseButton` is a `{@link Button}` that fires a `close` event when\n * it gets clicked.\n *\n * @extends Button\n */\n\nvar CloseButton = function (_Button) {\n  inherits(CloseButton, _Button);\n\n  /**\n   * Creates an instance of the this class.\n   *\n   * @param  {Player} player\n   *         The `Player` that this class should be attached to.\n   *\n   * @param  {Object} [options]\n   *         The key/value store of player options.\n   */\n  function CloseButton(player, options) {\n    classCallCheck(this, CloseButton);\n\n    var _this = possibleConstructorReturn(this, _Button.call(this, player, options));\n\n    _this.controlText(options && options.controlText || _this.localize('Close'));\n    return _this;\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  CloseButton.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-close-button ' + _Button.prototype.buildCSSClass.call(this);\n  };\n\n  /**\n   * This gets called when a `CloseButton` gets clicked. See\n   * {@link ClickableComponent#handleClick} for more information on when this will be\n   * triggered\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   * @fires CloseButton#close\n   */\n\n\n  CloseButton.prototype.handleClick = function handleClick(event) {\n\n    /**\n     * Triggered when the a `CloseButton` is clicked.\n     *\n     * @event CloseButton#close\n     * @type {EventTarget~Event}\n     *\n     * @property {boolean} [bubbles=false]\n     *           set to false so that the close event does not\n     *           bubble up to parents if there is no listener\n     */\n    this.trigger({ type: 'close', bubbles: false });\n  };\n\n  return CloseButton;\n}(Button);\n\nComponent.registerComponent('CloseButton', CloseButton);\n\n/**\n * @file play-toggle.js\n */\n\n/**\n * Button to toggle between play and pause.\n *\n * @extends Button\n */\n\nvar PlayToggle = function (_Button) {\n  inherits(PlayToggle, _Button);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function PlayToggle(player, options) {\n    classCallCheck(this, PlayToggle);\n\n    var _this = possibleConstructorReturn(this, _Button.call(this, player, options));\n\n    _this.on(player, 'play', _this.handlePlay);\n    _this.on(player, 'pause', _this.handlePause);\n    _this.on(player, 'ended', _this.handleEnded);\n    return _this;\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  PlayToggle.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-play-control ' + _Button.prototype.buildCSSClass.call(this);\n  };\n\n  /**\n   * This gets called when an `PlayToggle` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n\n\n  PlayToggle.prototype.handleClick = function handleClick(event) {\n    if (this.player_.paused()) {\n      this.player_.play();\n    } else {\n      this.player_.pause();\n    }\n  };\n\n  /**\n   * This gets called once after the video has ended and the user seeks so that\n   * we can change the replay button back to a play button.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The event that caused this function to run.\n   *\n   * @listens Player#seeked\n   */\n\n\n  PlayToggle.prototype.handleSeeked = function handleSeeked(event) {\n    this.removeClass('vjs-ended');\n\n    if (this.player_.paused()) {\n      this.handlePause(event);\n    } else {\n      this.handlePlay(event);\n    }\n  };\n\n  /**\n   * Add the vjs-playing class to the element so it can change appearance.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The event that caused this function to run.\n   *\n   * @listens Player#play\n   */\n\n\n  PlayToggle.prototype.handlePlay = function handlePlay(event) {\n    this.removeClass('vjs-ended');\n    this.removeClass('vjs-paused');\n    this.addClass('vjs-playing');\n    // change the button text to \"Pause\"\n    this.controlText('Pause');\n  };\n\n  /**\n   * Add the vjs-paused class to the element so it can change appearance.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The event that caused this function to run.\n   *\n   * @listens Player#pause\n   */\n\n\n  PlayToggle.prototype.handlePause = function handlePause(event) {\n    this.removeClass('vjs-playing');\n    this.addClass('vjs-paused');\n    // change the button text to \"Play\"\n    this.controlText('Play');\n  };\n\n  /**\n   * Add the vjs-ended class to the element so it can change appearance\n   *\n   * @param {EventTarget~Event} [event]\n   *        The event that caused this function to run.\n   *\n   * @listens Player#ended\n   */\n\n\n  PlayToggle.prototype.handleEnded = function handleEnded(event) {\n    this.removeClass('vjs-playing');\n    this.addClass('vjs-ended');\n    // change the button text to \"Replay\"\n    this.controlText('Replay');\n\n    // on the next seek remove the replay button\n    this.one(this.player_, 'seeked', this.handleSeeked);\n  };\n\n  return PlayToggle;\n}(Button);\n\n/**\n * The text that should display over the `PlayToggle`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\n\n\nPlayToggle.prototype.controlText_ = 'Play';\n\nComponent.registerComponent('PlayToggle', PlayToggle);\n\n/**\n * @file format-time.js\n * @module format-time\n */\n\n/**\n* Format seconds as a time string, H:MM:SS or M:SS. Supplying a guide (in seconds)\n* will force a number of leading zeros to cover the length of the guide.\n*\n* @param {number} seconds\n*        Number of seconds to be turned into a string\n*\n* @param {number} guide\n*        Number (in seconds) to model the string after\n*\n* @return {string}\n*         Time formatted as H:MM:SS or M:SS\n*/\nvar defaultImplementation = function defaultImplementation(seconds, guide) {\n  seconds = seconds < 0 ? 0 : seconds;\n  var s = Math.floor(seconds % 60);\n  var m = Math.floor(seconds / 60 % 60);\n  var h = Math.floor(seconds / 3600);\n  var gm = Math.floor(guide / 60 % 60);\n  var gh = Math.floor(guide / 3600);\n\n  // handle invalid times\n  if (isNaN(seconds) || seconds === Infinity) {\n    // '-' is false for all relational operators (e.g. <, >=) so this setting\n    // will add the minimum number of fields specified by the guide\n    h = m = s = '-';\n  }\n\n  // Check if we need to show hours\n  h = h > 0 || gh > 0 ? h + ':' : '';\n\n  // If hours are showing, we may need to add a leading zero.\n  // Always show at least one digit of minutes.\n  m = ((h || gm >= 10) && m < 10 ? '0' + m : m) + ':';\n\n  // Check if leading zero is need for seconds\n  s = s < 10 ? '0' + s : s;\n\n  return h + m + s;\n};\n\nvar implementation = defaultImplementation;\n\n/**\n * Replaces the default formatTime implementation with a custom implementation.\n *\n * @param {Function} customImplementation\n *        A function which will be used in place of the default formatTime implementation.\n *        Will receive the current time in seconds and the guide (in seconds) as arguments.\n */\nfunction setFormatTime(customImplementation) {\n  implementation = customImplementation;\n}\n\n/**\n * Resets formatTime to the default implementation.\n */\nfunction resetFormatTime() {\n  implementation = defaultImplementation;\n}\n\nfunction formatTime (seconds) {\n  var guide = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : seconds;\n\n  return implementation(seconds, guide);\n}\n\n/**\n * @file time-display.js\n */\n\n/**\n * Displays the time left in the video\n *\n * @extends Component\n */\n\nvar TimeDisplay = function (_Component) {\n  inherits(TimeDisplay, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function TimeDisplay(player, options) {\n    classCallCheck(this, TimeDisplay);\n\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));\n\n    _this.throttledUpdateContent = throttle(bind(_this, _this.updateContent), 25);\n    _this.on(player, 'timeupdate', _this.throttledUpdateContent);\n    return _this;\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  TimeDisplay.prototype.createEl = function createEl$$1(plainName) {\n    var className = this.buildCSSClass();\n    var el = _Component.prototype.createEl.call(this, 'div', {\n      className: className + ' vjs-time-control vjs-control',\n      innerHTML: '<span class=\"vjs-control-text\">' + this.localize(this.labelText_) + '\\xA0</span>'\n    });\n\n    this.contentEl_ = createEl('span', {\n      className: className + '-display'\n    }, {\n      // tell screen readers not to automatically read the time as it changes\n      'aria-live': 'off'\n    });\n\n    this.updateTextNode_();\n    el.appendChild(this.contentEl_);\n    return el;\n  };\n\n  TimeDisplay.prototype.dispose = function dispose() {\n    this.contentEl_ = null;\n    this.textNode_ = null;\n\n    _Component.prototype.dispose.call(this);\n  };\n\n  /**\n   * Updates the \"remaining time\" text node with new content using the\n   * contents of the `formattedTime_` property.\n   *\n   * @private\n   */\n\n\n  TimeDisplay.prototype.updateTextNode_ = function updateTextNode_() {\n    if (!this.contentEl_) {\n      return;\n    }\n\n    while (this.contentEl_.firstChild) {\n      this.contentEl_.removeChild(this.contentEl_.firstChild);\n    }\n\n    this.textNode_ = document.createTextNode(this.formattedTime_ || this.formatTime_(0));\n    this.contentEl_.appendChild(this.textNode_);\n  };\n\n  /**\n   * Generates a formatted time for this component to use in display.\n   *\n   * @param  {number} time\n   *         A numeric time, in seconds.\n   *\n   * @return {string}\n   *         A formatted time\n   *\n   * @private\n   */\n\n\n  TimeDisplay.prototype.formatTime_ = function formatTime_(time) {\n    return formatTime(time);\n  };\n\n  /**\n   * Updates the time display text node if it has what was passed in changed\n   * the formatted time.\n   *\n   * @param {number} time\n   *        The time to update to\n   *\n   * @private\n   */\n\n\n  TimeDisplay.prototype.updateFormattedTime_ = function updateFormattedTime_(time) {\n    var formattedTime = this.formatTime_(time);\n\n    if (formattedTime === this.formattedTime_) {\n      return;\n    }\n\n    this.formattedTime_ = formattedTime;\n    this.requestAnimationFrame(this.updateTextNode_);\n  };\n\n  /**\n   * To be filled out in the child class, should update the displayed time\n   * in accordance with the fact that the current time has changed.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `timeupdate`  event that caused this to run.\n   *\n   * @listens Player#timeupdate\n   */\n\n\n  TimeDisplay.prototype.updateContent = function updateContent(event) {};\n\n  return TimeDisplay;\n}(Component);\n\n/**\n * The text that is added to the `TimeDisplay` for screen reader users.\n *\n * @type {string}\n * @private\n */\n\n\nTimeDisplay.prototype.labelText_ = 'Time';\n\n/**\n * The text that should display over the `TimeDisplay`s controls. Added to for localization.\n *\n * @type {string}\n * @private\n *\n * @deprecated in v7; controlText_ is not used in non-active display Components\n */\nTimeDisplay.prototype.controlText_ = 'Time';\n\nComponent.registerComponent('TimeDisplay', TimeDisplay);\n\n/**\n * @file current-time-display.js\n */\n\n/**\n * Displays the current time\n *\n * @extends Component\n */\n\nvar CurrentTimeDisplay = function (_TimeDisplay) {\n  inherits(CurrentTimeDisplay, _TimeDisplay);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function CurrentTimeDisplay(player, options) {\n    classCallCheck(this, CurrentTimeDisplay);\n\n    var _this = possibleConstructorReturn(this, _TimeDisplay.call(this, player, options));\n\n    _this.on(player, 'ended', _this.handleEnded);\n    return _this;\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  CurrentTimeDisplay.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-current-time';\n  };\n\n  /**\n   * Update current time display\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `timeupdate` event that caused this function to run.\n   *\n   * @listens Player#timeupdate\n   */\n\n\n  CurrentTimeDisplay.prototype.updateContent = function updateContent(event) {\n    // Allows for smooth scrubbing, when player can't keep up.\n    var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();\n\n    this.updateFormattedTime_(time);\n  };\n\n  /**\n   * When the player fires ended there should be no time left. Sadly\n   * this is not always the case, lets make it seem like that is the case\n   * for users.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `ended` event that caused this to run.\n   *\n   * @listens Player#ended\n   */\n\n\n  CurrentTimeDisplay.prototype.handleEnded = function handleEnded(event) {\n    if (!this.player_.duration()) {\n      return;\n    }\n    this.updateFormattedTime_(this.player_.duration());\n  };\n\n  return CurrentTimeDisplay;\n}(TimeDisplay);\n\n/**\n * The text that is added to the `CurrentTimeDisplay` for screen reader users.\n *\n * @type {string}\n * @private\n */\n\n\nCurrentTimeDisplay.prototype.labelText_ = 'Current Time';\n\n/**\n * The text that should display over the `CurrentTimeDisplay`s controls. Added to for localization.\n *\n * @type {string}\n * @private\n *\n * @deprecated in v7; controlText_ is not used in non-active display Components\n */\nCurrentTimeDisplay.prototype.controlText_ = 'Current Time';\n\nComponent.registerComponent('CurrentTimeDisplay', CurrentTimeDisplay);\n\n/**\n * @file duration-display.js\n */\n\n/**\n * Displays the duration\n *\n * @extends Component\n */\n\nvar DurationDisplay = function (_TimeDisplay) {\n  inherits(DurationDisplay, _TimeDisplay);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function DurationDisplay(player, options) {\n    classCallCheck(this, DurationDisplay);\n\n    // we do not want to/need to throttle duration changes,\n    // as they should always display the changed duration as\n    // it has changed\n    var _this = possibleConstructorReturn(this, _TimeDisplay.call(this, player, options));\n\n    _this.on(player, 'durationchange', _this.updateContent);\n\n    // Also listen for timeupdate (in the parent) and loadedmetadata because removing those\n    // listeners could have broken dependent applications/libraries. These\n    // can likely be removed for 7.0.\n    _this.on(player, 'loadedmetadata', _this.throttledUpdateContent);\n    return _this;\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  DurationDisplay.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-duration';\n  };\n\n  /**\n   * Update duration time display.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `durationchange`, `timeupdate`, or `loadedmetadata` event that caused\n   *        this function to be called.\n   *\n   * @listens Player#durationchange\n   * @listens Player#timeupdate\n   * @listens Player#loadedmetadata\n   */\n\n\n  DurationDisplay.prototype.updateContent = function updateContent(event) {\n    var duration = this.player_.duration();\n\n    if (duration && this.duration_ !== duration) {\n      this.duration_ = duration;\n      this.updateFormattedTime_(duration);\n    }\n  };\n\n  return DurationDisplay;\n}(TimeDisplay);\n\n/**\n * The text that is added to the `DurationDisplay` for screen reader users.\n *\n * @type {string}\n * @private\n */\n\n\nDurationDisplay.prototype.labelText_ = 'Duration';\n\n/**\n * The text that should display over the `DurationDisplay`s controls. Added to for localization.\n *\n * @type {string}\n * @private\n *\n * @deprecated in v7; controlText_ is not used in non-active display Components\n */\nDurationDisplay.prototype.controlText_ = 'Duration';\n\nComponent.registerComponent('DurationDisplay', DurationDisplay);\n\n/**\n * @file time-divider.js\n */\n\n/**\n * The separator between the current time and duration.\n * Can be hidden if it's not needed in the design.\n *\n * @extends Component\n */\n\nvar TimeDivider = function (_Component) {\n  inherits(TimeDivider, _Component);\n\n  function TimeDivider() {\n    classCallCheck(this, TimeDivider);\n    return possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  /**\n   * Create the component's DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  TimeDivider.prototype.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-time-control vjs-time-divider',\n      innerHTML: '<div><span>/</span></div>'\n    });\n  };\n\n  return TimeDivider;\n}(Component);\n\nComponent.registerComponent('TimeDivider', TimeDivider);\n\n/**\n * @file remaining-time-display.js\n */\n/**\n * Displays the time left in the video\n *\n * @extends Component\n */\n\nvar RemainingTimeDisplay = function (_TimeDisplay) {\n  inherits(RemainingTimeDisplay, _TimeDisplay);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function RemainingTimeDisplay(player, options) {\n    classCallCheck(this, RemainingTimeDisplay);\n\n    var _this = possibleConstructorReturn(this, _TimeDisplay.call(this, player, options));\n\n    _this.on(player, 'durationchange', _this.throttledUpdateContent);\n    _this.on(player, 'ended', _this.handleEnded);\n    return _this;\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  RemainingTimeDisplay.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-remaining-time';\n  };\n\n  /**\n   * The remaining time display prefixes numbers with a \"minus\" character.\n   *\n   * @param  {number} time\n   *         A numeric time, in seconds.\n   *\n   * @return {string}\n   *         A formatted time\n   *\n   * @private\n   */\n\n\n  RemainingTimeDisplay.prototype.formatTime_ = function formatTime_(time) {\n    // TODO: The \"-\" should be decorative, and not announced by a screen reader\n    return '-' + _TimeDisplay.prototype.formatTime_.call(this, time);\n  };\n\n  /**\n   * Update remaining time display.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `timeupdate` or `durationchange` event that caused this to run.\n   *\n   * @listens Player#timeupdate\n   * @listens Player#durationchange\n   */\n\n\n  RemainingTimeDisplay.prototype.updateContent = function updateContent(event) {\n    if (!this.player_.duration()) {\n      return;\n    }\n\n    // @deprecated We should only use remainingTimeDisplay\n    // as of video.js 7\n    if (this.player_.remainingTimeDisplay) {\n      this.updateFormattedTime_(this.player_.remainingTimeDisplay());\n    } else {\n      this.updateFormattedTime_(this.player_.remainingTime());\n    }\n  };\n\n  /**\n   * When the player fires ended there should be no time left. Sadly\n   * this is not always the case, lets make it seem like that is the case\n   * for users.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `ended` event that caused this to run.\n   *\n   * @listens Player#ended\n   */\n\n\n  RemainingTimeDisplay.prototype.handleEnded = function handleEnded(event) {\n    if (!this.player_.duration()) {\n      return;\n    }\n    this.updateFormattedTime_(0);\n  };\n\n  return RemainingTimeDisplay;\n}(TimeDisplay);\n\n/**\n * The text that is added to the `RemainingTimeDisplay` for screen reader users.\n *\n * @type {string}\n * @private\n */\n\n\nRemainingTimeDisplay.prototype.labelText_ = 'Remaining Time';\n\n/**\n * The text that should display over the `RemainingTimeDisplay`s controls. Added to for localization.\n *\n * @type {string}\n * @private\n *\n * @deprecated in v7; controlText_ is not used in non-active display Components\n */\nRemainingTimeDisplay.prototype.controlText_ = 'Remaining Time';\n\nComponent.registerComponent('RemainingTimeDisplay', RemainingTimeDisplay);\n\n/**\n * @file live-display.js\n */\n\n// TODO - Future make it click to snap to live\n\n/**\n * Displays the live indicator when duration is Infinity.\n *\n * @extends Component\n */\n\nvar LiveDisplay = function (_Component) {\n  inherits(LiveDisplay, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function LiveDisplay(player, options) {\n    classCallCheck(this, LiveDisplay);\n\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));\n\n    _this.updateShowing();\n    _this.on(_this.player(), 'durationchange', _this.updateShowing);\n    return _this;\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  LiveDisplay.prototype.createEl = function createEl$$1() {\n    var el = _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-live-control vjs-control'\n    });\n\n    this.contentEl_ = createEl('div', {\n      className: 'vjs-live-display',\n      innerHTML: '<span class=\"vjs-control-text\">' + this.localize('Stream Type') + '\\xA0</span>' + this.localize('LIVE')\n    }, {\n      'aria-live': 'off'\n    });\n\n    el.appendChild(this.contentEl_);\n    return el;\n  };\n\n  LiveDisplay.prototype.dispose = function dispose() {\n    this.contentEl_ = null;\n\n    _Component.prototype.dispose.call(this);\n  };\n\n  /**\n   * Check the duration to see if the LiveDisplay should be showing or not. Then show/hide\n   * it accordingly\n   *\n   * @param {EventTarget~Event} [event]\n   *        The {@link Player#durationchange} event that caused this function to run.\n   *\n   * @listens Player#durationchange\n   */\n\n\n  LiveDisplay.prototype.updateShowing = function updateShowing(event) {\n    if (this.player().duration() === Infinity) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  };\n\n  return LiveDisplay;\n}(Component);\n\nComponent.registerComponent('LiveDisplay', LiveDisplay);\n\n/**\n * @file slider.js\n */\n\n/**\n * The base functionality for a slider. Can be vertical or horizontal.\n * For instance the volume bar or the seek bar on a video is a slider.\n *\n * @extends Component\n */\n\nvar Slider = function (_Component) {\n  inherits(Slider, _Component);\n\n  /**\n   * Create an instance of this class\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function Slider(player, options) {\n    classCallCheck(this, Slider);\n\n    // Set property names to bar to match with the child Slider class is looking for\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));\n\n    _this.bar = _this.getChild(_this.options_.barName);\n\n    // Set a horizontal or vertical class on the slider depending on the slider type\n    _this.vertical(!!_this.options_.vertical);\n\n    _this.enable();\n    return _this;\n  }\n\n  /**\n   * Are controls are currently enabled for this slider or not.\n   *\n   * @return {boolean}\n   *         true if controls are enabled, false otherwise\n   */\n\n\n  Slider.prototype.enabled = function enabled() {\n    return this.enabled_;\n  };\n\n  /**\n   * Enable controls for this slider if they are disabled\n   */\n\n\n  Slider.prototype.enable = function enable() {\n    if (this.enabled()) {\n      return;\n    }\n\n    this.on('mousedown', this.handleMouseDown);\n    this.on('touchstart', this.handleMouseDown);\n    this.on('focus', this.handleFocus);\n    this.on('blur', this.handleBlur);\n    this.on('click', this.handleClick);\n\n    this.on(this.player_, 'controlsvisible', this.update);\n\n    if (this.playerEvent) {\n      this.on(this.player_, this.playerEvent, this.update);\n    }\n\n    this.removeClass('disabled');\n    this.setAttribute('tabindex', 0);\n\n    this.enabled_ = true;\n  };\n\n  /**\n   * Disable controls for this slider if they are enabled\n   */\n\n\n  Slider.prototype.disable = function disable() {\n    if (!this.enabled()) {\n      return;\n    }\n    var doc = this.bar.el_.ownerDocument;\n\n    this.off('mousedown', this.handleMouseDown);\n    this.off('touchstart', this.handleMouseDown);\n    this.off('focus', this.handleFocus);\n    this.off('blur', this.handleBlur);\n    this.off('click', this.handleClick);\n    this.off(this.player_, 'controlsvisible', this.update);\n    this.off(doc, 'mousemove', this.handleMouseMove);\n    this.off(doc, 'mouseup', this.handleMouseUp);\n    this.off(doc, 'touchmove', this.handleMouseMove);\n    this.off(doc, 'touchend', this.handleMouseUp);\n    this.removeAttribute('tabindex');\n\n    this.addClass('disabled');\n\n    if (this.playerEvent) {\n      this.off(this.player_, this.playerEvent, this.update);\n    }\n    this.enabled_ = false;\n  };\n\n  /**\n   * Create the `Slider`s DOM element.\n   *\n   * @param {string} type\n   *        Type of element to create.\n   *\n   * @param {Object} [props={}]\n   *        List of properties in Object form.\n   *\n   * @param {Object} [attributes={}]\n   *        list of attributes in Object form.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n\n\n  Slider.prototype.createEl = function createEl$$1(type) {\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    // Add the slider element class to all sub classes\n    props.className = props.className + ' vjs-slider';\n    props = assign({\n      tabIndex: 0\n    }, props);\n\n    attributes = assign({\n      'role': 'slider',\n      'aria-valuenow': 0,\n      'aria-valuemin': 0,\n      'aria-valuemax': 100,\n      'tabIndex': 0\n    }, attributes);\n\n    return _Component.prototype.createEl.call(this, type, props, attributes);\n  };\n\n  /**\n   * Handle `mousedown` or `touchstart` events on the `Slider`.\n   *\n   * @param {EventTarget~Event} event\n   *        `mousedown` or `touchstart` event that triggered this function\n   *\n   * @listens mousedown\n   * @listens touchstart\n   * @fires Slider#slideractive\n   */\n\n\n  Slider.prototype.handleMouseDown = function handleMouseDown(event) {\n    var doc = this.bar.el_.ownerDocument;\n\n    if (event.type === 'mousedown') {\n      event.preventDefault();\n    }\n    // Do not call preventDefault() on touchstart in Chrome\n    // to avoid console warnings. Use a 'touch-action: none' style\n    // instead to prevent unintented scrolling.\n    // https://developers.google.com/web/updates/2017/01/scrolling-intervention\n    if (event.type === 'touchstart' && !IS_CHROME) {\n      event.preventDefault();\n    }\n    blockTextSelection();\n\n    this.addClass('vjs-sliding');\n    /**\n     * Triggered when the slider is in an active state\n     *\n     * @event Slider#slideractive\n     * @type {EventTarget~Event}\n     */\n    this.trigger('slideractive');\n\n    this.on(doc, 'mousemove', this.handleMouseMove);\n    this.on(doc, 'mouseup', this.handleMouseUp);\n    this.on(doc, 'touchmove', this.handleMouseMove);\n    this.on(doc, 'touchend', this.handleMouseUp);\n\n    this.handleMouseMove(event);\n  };\n\n  /**\n   * Handle the `mousemove`, `touchmove`, and `mousedown` events on this `Slider`.\n   * The `mousemove` and `touchmove` events will only only trigger this function during\n   * `mousedown` and `touchstart`. This is due to {@link Slider#handleMouseDown} and\n   * {@link Slider#handleMouseUp}.\n   *\n   * @param {EventTarget~Event} event\n   *        `mousedown`, `mousemove`, `touchstart`, or `touchmove` event that triggered\n   *        this function\n   *\n   * @listens mousemove\n   * @listens touchmove\n   */\n\n\n  Slider.prototype.handleMouseMove = function handleMouseMove(event) {};\n\n  /**\n   * Handle `mouseup` or `touchend` events on the `Slider`.\n   *\n   * @param {EventTarget~Event} event\n   *        `mouseup` or `touchend` event that triggered this function.\n   *\n   * @listens touchend\n   * @listens mouseup\n   * @fires Slider#sliderinactive\n   */\n\n\n  Slider.prototype.handleMouseUp = function handleMouseUp() {\n    var doc = this.bar.el_.ownerDocument;\n\n    unblockTextSelection();\n\n    this.removeClass('vjs-sliding');\n    /**\n     * Triggered when the slider is no longer in an active state.\n     *\n     * @event Slider#sliderinactive\n     * @type {EventTarget~Event}\n     */\n    this.trigger('sliderinactive');\n\n    this.off(doc, 'mousemove', this.handleMouseMove);\n    this.off(doc, 'mouseup', this.handleMouseUp);\n    this.off(doc, 'touchmove', this.handleMouseMove);\n    this.off(doc, 'touchend', this.handleMouseUp);\n\n    this.update();\n  };\n\n  /**\n   * Update the progress bar of the `Slider`.\n   *\n   * @returns {number}\n   *          The percentage of progress the progress bar represents as a\n   *          number from 0 to 1.\n   */\n\n\n  Slider.prototype.update = function update() {\n\n    // In VolumeBar init we have a setTimeout for update that pops and update\n    // to the end of the execution stack. The player is destroyed before then\n    // update will cause an error\n    if (!this.el_) {\n      return;\n    }\n\n    // If scrubbing, we could use a cached value to make the handle keep up\n    // with the user's mouse. On HTML5 browsers scrubbing is really smooth, but\n    // some flash players are slow, so we might want to utilize this later.\n    // var progress =  (this.player_.scrubbing()) ? this.player_.getCache().currentTime / this.player_.duration() : this.player_.currentTime() / this.player_.duration();\n    var progress = this.getPercent();\n    var bar = this.bar;\n\n    // If there's no bar...\n    if (!bar) {\n      return;\n    }\n\n    // Protect against no duration and other division issues\n    if (typeof progress !== 'number' || progress !== progress || progress < 0 || progress === Infinity) {\n      progress = 0;\n    }\n\n    // Convert to a percentage for setting\n    var percentage = (progress * 100).toFixed(2) + '%';\n    var style = bar.el().style;\n\n    // Set the new bar width or height\n    if (this.vertical()) {\n      style.height = percentage;\n    } else {\n      style.width = percentage;\n    }\n\n    return progress;\n  };\n\n  /**\n   * Calculate distance for slider\n   *\n   * @param {EventTarget~Event} event\n   *        The event that caused this function to run.\n   *\n   * @return {number}\n   *         The current position of the Slider.\n   *         - position.x for vertical `Slider`s\n   *         - position.y for horizontal `Slider`s\n   */\n\n\n  Slider.prototype.calculateDistance = function calculateDistance(event) {\n    var position = getPointerPosition(this.el_, event);\n\n    if (this.vertical()) {\n      return position.y;\n    }\n    return position.x;\n  };\n\n  /**\n   * Handle a `focus` event on this `Slider`.\n   *\n   * @param {EventTarget~Event} event\n   *        The `focus` event that caused this function to run.\n   *\n   * @listens focus\n   */\n\n\n  Slider.prototype.handleFocus = function handleFocus() {\n    this.on(this.bar.el_.ownerDocument, 'keydown', this.handleKeyPress);\n  };\n\n  /**\n   * Handle a `keydown` event on the `Slider`. Watches for left, rigth, up, and down\n   * arrow keys. This function will only be called when the slider has focus. See\n   * {@link Slider#handleFocus} and {@link Slider#handleBlur}.\n   *\n   * @param {EventTarget~Event} event\n   *        the `keydown` event that caused this function to run.\n   *\n   * @listens keydown\n   */\n\n\n  Slider.prototype.handleKeyPress = function handleKeyPress(event) {\n    // Left and Down Arrows\n    if (event.which === 37 || event.which === 40) {\n      event.preventDefault();\n      this.stepBack();\n\n      // Up and Right Arrows\n    } else if (event.which === 38 || event.which === 39) {\n      event.preventDefault();\n      this.stepForward();\n    }\n  };\n\n  /**\n   * Handle a `blur` event on this `Slider`.\n   *\n   * @param {EventTarget~Event} event\n   *        The `blur` event that caused this function to run.\n   *\n   * @listens blur\n   */\n\n  Slider.prototype.handleBlur = function handleBlur() {\n    this.off(this.bar.el_.ownerDocument, 'keydown', this.handleKeyPress);\n  };\n\n  /**\n   * Listener for click events on slider, used to prevent clicks\n   *   from bubbling up to parent elements like button menus.\n   *\n   * @param {Object} event\n   *        Event that caused this object to run\n   */\n\n\n  Slider.prototype.handleClick = function handleClick(event) {\n    event.stopImmediatePropagation();\n    event.preventDefault();\n  };\n\n  /**\n   * Get/set if slider is horizontal for vertical\n   *\n   * @param {boolean} [bool]\n   *        - true if slider is vertical,\n   *        - false is horizontal\n   *\n   * @return {boolean}\n   *         - true if slider is vertical, and getting\n   *         - false if the slider is horizontal, and getting\n   */\n\n\n  Slider.prototype.vertical = function vertical(bool) {\n    if (bool === undefined) {\n      return this.vertical_ || false;\n    }\n\n    this.vertical_ = !!bool;\n\n    if (this.vertical_) {\n      this.addClass('vjs-slider-vertical');\n    } else {\n      this.addClass('vjs-slider-horizontal');\n    }\n  };\n\n  return Slider;\n}(Component);\n\nComponent.registerComponent('Slider', Slider);\n\n/**\n * @file load-progress-bar.js\n */\n\n/**\n * Shows loading progress\n *\n * @extends Component\n */\n\nvar LoadProgressBar = function (_Component) {\n  inherits(LoadProgressBar, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function LoadProgressBar(player, options) {\n    classCallCheck(this, LoadProgressBar);\n\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));\n\n    _this.partEls_ = [];\n    _this.on(player, 'progress', _this.update);\n    return _this;\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  LoadProgressBar.prototype.createEl = function createEl$$1() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-load-progress',\n      innerHTML: '<span class=\"vjs-control-text\"><span>' + this.localize('Loaded') + '</span>: 0%</span>'\n    });\n  };\n\n  LoadProgressBar.prototype.dispose = function dispose() {\n    this.partEls_ = null;\n\n    _Component.prototype.dispose.call(this);\n  };\n\n  /**\n   * Update progress bar\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `progress` event that caused this function to run.\n   *\n   * @listens Player#progress\n   */\n\n\n  LoadProgressBar.prototype.update = function update(event) {\n    var buffered = this.player_.buffered();\n    var duration = this.player_.duration();\n    var bufferedEnd = this.player_.bufferedEnd();\n    var children = this.partEls_;\n\n    // get the percent width of a time compared to the total end\n    var percentify = function percentify(time, end) {\n      // no NaN\n      var percent = time / end || 0;\n\n      return (percent >= 1 ? 1 : percent) * 100 + '%';\n    };\n\n    // update the width of the progress bar\n    this.el_.style.width = percentify(bufferedEnd, duration);\n\n    // add child elements to represent the individual buffered time ranges\n    for (var i = 0; i < buffered.length; i++) {\n      var start = buffered.start(i);\n      var end = buffered.end(i);\n      var part = children[i];\n\n      if (!part) {\n        part = this.el_.appendChild(createEl());\n        children[i] = part;\n      }\n\n      // set the percent based on the width of the progress bar (bufferedEnd)\n      part.style.left = percentify(start, bufferedEnd);\n      part.style.width = percentify(end - start, bufferedEnd);\n    }\n\n    // remove unused buffered range elements\n    for (var _i = children.length; _i > buffered.length; _i--) {\n      this.el_.removeChild(children[_i - 1]);\n    }\n    children.length = buffered.length;\n  };\n\n  return LoadProgressBar;\n}(Component);\n\nComponent.registerComponent('LoadProgressBar', LoadProgressBar);\n\n/**\n * @file time-tooltip.js\n */\n\n/**\n * Time tooltips display a time above the progress bar.\n *\n * @extends Component\n */\n\nvar TimeTooltip = function (_Component) {\n  inherits(TimeTooltip, _Component);\n\n  function TimeTooltip() {\n    classCallCheck(this, TimeTooltip);\n    return possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  /**\n   * Create the time tooltip DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  TimeTooltip.prototype.createEl = function createEl$$1() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-time-tooltip'\n    });\n  };\n\n  /**\n   * Updates the position of the time tooltip relative to the `SeekBar`.\n   *\n   * @param {Object} seekBarRect\n   *        The `ClientRect` for the {@link SeekBar} element.\n   *\n   * @param {number} seekBarPoint\n   *        A number from 0 to 1, representing a horizontal reference point\n   *        from the left edge of the {@link SeekBar}\n   */\n\n\n  TimeTooltip.prototype.update = function update(seekBarRect, seekBarPoint, content) {\n    var tooltipRect = getBoundingClientRect(this.el_);\n    var playerRect = getBoundingClientRect(this.player_.el());\n    var seekBarPointPx = seekBarRect.width * seekBarPoint;\n\n    // do nothing if either rect isn't available\n    // for example, if the player isn't in the DOM for testing\n    if (!playerRect || !tooltipRect) {\n      return;\n    }\n\n    // This is the space left of the `seekBarPoint` available within the bounds\n    // of the player. We calculate any gap between the left edge of the player\n    // and the left edge of the `SeekBar` and add the number of pixels in the\n    // `SeekBar` before hitting the `seekBarPoint`\n    var spaceLeftOfPoint = seekBarRect.left - playerRect.left + seekBarPointPx;\n\n    // This is the space right of the `seekBarPoint` available within the bounds\n    // of the player. We calculate the number of pixels from the `seekBarPoint`\n    // to the right edge of the `SeekBar` and add to that any gap between the\n    // right edge of the `SeekBar` and the player.\n    var spaceRightOfPoint = seekBarRect.width - seekBarPointPx + (playerRect.right - seekBarRect.right);\n\n    // This is the number of pixels by which the tooltip will need to be pulled\n    // further to the right to center it over the `seekBarPoint`.\n    var pullTooltipBy = tooltipRect.width / 2;\n\n    // Adjust the `pullTooltipBy` distance to the left or right depending on\n    // the results of the space calculations above.\n    if (spaceLeftOfPoint < pullTooltipBy) {\n      pullTooltipBy += pullTooltipBy - spaceLeftOfPoint;\n    } else if (spaceRightOfPoint < pullTooltipBy) {\n      pullTooltipBy = spaceRightOfPoint;\n    }\n\n    // Due to the imprecision of decimal/ratio based calculations and varying\n    // rounding behaviors, there are cases where the spacing adjustment is off\n    // by a pixel or two. This adds insurance to these calculations.\n    if (pullTooltipBy < 0) {\n      pullTooltipBy = 0;\n    } else if (pullTooltipBy > tooltipRect.width) {\n      pullTooltipBy = tooltipRect.width;\n    }\n\n    this.el_.style.right = '-' + pullTooltipBy + 'px';\n    textContent(this.el_, content);\n  };\n\n  return TimeTooltip;\n}(Component);\n\nComponent.registerComponent('TimeTooltip', TimeTooltip);\n\n/**\n * @file play-progress-bar.js\n */\n\n/**\n * Used by {@link SeekBar} to display media playback progress as part of the\n * {@link ProgressControl}.\n *\n * @extends Component\n */\n\nvar PlayProgressBar = function (_Component) {\n  inherits(PlayProgressBar, _Component);\n\n  function PlayProgressBar() {\n    classCallCheck(this, PlayProgressBar);\n    return possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  /**\n   * Create the the DOM element for this class.\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  PlayProgressBar.prototype.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-play-progress vjs-slider-bar',\n      innerHTML: '<span class=\"vjs-control-text\"><span>' + this.localize('Progress') + '</span>: 0%</span>'\n    });\n  };\n\n  /**\n   * Enqueues updates to its own DOM as well as the DOM of its\n   * {@link TimeTooltip} child.\n   *\n   * @param {Object} seekBarRect\n   *        The `ClientRect` for the {@link SeekBar} element.\n   *\n   * @param {number} seekBarPoint\n   *        A number from 0 to 1, representing a horizontal reference point\n   *        from the left edge of the {@link SeekBar}\n   */\n\n\n  PlayProgressBar.prototype.update = function update(seekBarRect, seekBarPoint) {\n    var _this2 = this;\n\n    // If there is an existing rAF ID, cancel it so we don't over-queue.\n    if (this.rafId_) {\n      this.cancelAnimationFrame(this.rafId_);\n    }\n\n    this.rafId_ = this.requestAnimationFrame(function () {\n      var time = _this2.player_.scrubbing() ? _this2.player_.getCache().currentTime : _this2.player_.currentTime();\n\n      var content = formatTime(time, _this2.player_.duration());\n      var timeTooltip = _this2.getChild('timeTooltip');\n\n      if (timeTooltip) {\n        timeTooltip.update(seekBarRect, seekBarPoint, content);\n      }\n    });\n  };\n\n  return PlayProgressBar;\n}(Component);\n\n/**\n * Default options for {@link PlayProgressBar}.\n *\n * @type {Object}\n * @private\n */\n\n\nPlayProgressBar.prototype.options_ = {\n  children: []\n};\n\n// Time tooltips should not be added to a player on mobile devices\nif (!IS_IOS && !IS_ANDROID) {\n  PlayProgressBar.prototype.options_.children.push('timeTooltip');\n}\n\nComponent.registerComponent('PlayProgressBar', PlayProgressBar);\n\n/**\n * @file mouse-time-display.js\n */\n\n/**\n * The {@link MouseTimeDisplay} component tracks mouse movement over the\n * {@link ProgressControl}. It displays an indicator and a {@link TimeTooltip}\n * indicating the time which is represented by a given point in the\n * {@link ProgressControl}.\n *\n * @extends Component\n */\n\nvar MouseTimeDisplay = function (_Component) {\n  inherits(MouseTimeDisplay, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The {@link Player} that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function MouseTimeDisplay(player, options) {\n    classCallCheck(this, MouseTimeDisplay);\n\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));\n\n    _this.update = throttle(bind(_this, _this.update), 25);\n    return _this;\n  }\n\n  /**\n   * Create the DOM element for this class.\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  MouseTimeDisplay.prototype.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-mouse-display'\n    });\n  };\n\n  /**\n   * Enqueues updates to its own DOM as well as the DOM of its\n   * {@link TimeTooltip} child.\n   *\n   * @param {Object} seekBarRect\n   *        The `ClientRect` for the {@link SeekBar} element.\n   *\n   * @param {number} seekBarPoint\n   *        A number from 0 to 1, representing a horizontal reference point\n   *        from the left edge of the {@link SeekBar}\n   */\n\n\n  MouseTimeDisplay.prototype.update = function update(seekBarRect, seekBarPoint) {\n    var _this2 = this;\n\n    // If there is an existing rAF ID, cancel it so we don't over-queue.\n    if (this.rafId_) {\n      this.cancelAnimationFrame(this.rafId_);\n    }\n\n    this.rafId_ = this.requestAnimationFrame(function () {\n      var duration = _this2.player_.duration();\n      var content = formatTime(seekBarPoint * duration, duration);\n\n      _this2.el_.style.left = seekBarRect.width * seekBarPoint + 'px';\n      _this2.getChild('timeTooltip').update(seekBarRect, seekBarPoint, content);\n    });\n  };\n\n  return MouseTimeDisplay;\n}(Component);\n\n/**\n * Default options for `MouseTimeDisplay`\n *\n * @type {Object}\n * @private\n */\n\n\nMouseTimeDisplay.prototype.options_ = {\n  children: ['timeTooltip']\n};\n\nComponent.registerComponent('MouseTimeDisplay', MouseTimeDisplay);\n\n/**\n * @file seek-bar.js\n */\n\n// The number of seconds the `step*` functions move the timeline.\nvar STEP_SECONDS = 5;\n\n// The interval at which the bar should update as it progresses.\nvar UPDATE_REFRESH_INTERVAL = 30;\n\n/**\n * Seek bar and container for the progress bars. Uses {@link PlayProgressBar}\n * as its `bar`.\n *\n * @extends Slider\n */\n\nvar SeekBar = function (_Slider) {\n  inherits(SeekBar, _Slider);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function SeekBar(player, options) {\n    classCallCheck(this, SeekBar);\n\n    var _this = possibleConstructorReturn(this, _Slider.call(this, player, options));\n\n    _this.setEventHandlers_();\n    return _this;\n  }\n\n  /**\n   * Sets the event handlers\n   *\n   * @private\n   */\n\n\n  SeekBar.prototype.setEventHandlers_ = function setEventHandlers_() {\n    var _this2 = this;\n\n    this.update = throttle(bind(this, this.update), UPDATE_REFRESH_INTERVAL);\n\n    this.on(this.player_, 'timeupdate', this.update);\n    this.on(this.player_, 'ended', this.handleEnded);\n\n    // when playing, let's ensure we smoothly update the play progress bar\n    // via an interval\n    this.updateInterval = null;\n\n    this.on(this.player_, ['playing'], function () {\n      _this2.clearInterval(_this2.updateInterval);\n\n      _this2.updateInterval = _this2.setInterval(function () {\n        _this2.requestAnimationFrame(function () {\n          _this2.update();\n        });\n      }, UPDATE_REFRESH_INTERVAL);\n    });\n\n    this.on(this.player_, ['ended', 'pause', 'waiting'], function () {\n      _this2.clearInterval(_this2.updateInterval);\n    });\n\n    this.on(this.player_, ['timeupdate', 'ended'], this.update);\n  };\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  SeekBar.prototype.createEl = function createEl$$1() {\n    return _Slider.prototype.createEl.call(this, 'div', {\n      className: 'vjs-progress-holder'\n    }, {\n      'aria-label': this.localize('Progress Bar')\n    });\n  };\n\n  /**\n   * This function updates the play progress bar and accessibility\n   * attributes to whatever is passed in.\n   *\n   * @param {number} currentTime\n   *        The currentTime value that should be used for accessibility\n   *\n   * @param {number} percent\n   *        The percentage as a decimal that the bar should be filled from 0-1.\n   *\n   * @private\n   */\n\n\n  SeekBar.prototype.update_ = function update_(currentTime, percent) {\n    var duration = this.player_.duration();\n\n    // machine readable value of progress bar (percentage complete)\n    this.el_.setAttribute('aria-valuenow', (percent * 100).toFixed(2));\n\n    // human readable value of progress bar (time complete)\n    this.el_.setAttribute('aria-valuetext', this.localize('progress bar timing: currentTime={1} duration={2}', [formatTime(currentTime, duration), formatTime(duration, duration)], '{1} of {2}'));\n\n    // Update the `PlayProgressBar`.\n    this.bar.update(getBoundingClientRect(this.el_), percent);\n  };\n\n  /**\n   * Update the seek bar's UI.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `timeupdate` or `ended` event that caused this to run.\n   *\n   * @listens Player#timeupdate\n   *\n   * @returns {number}\n   *          The current percent at a number from 0-1\n   */\n\n\n  SeekBar.prototype.update = function update(event) {\n    var percent = _Slider.prototype.update.call(this);\n\n    this.update_(this.getCurrentTime_(), percent);\n    return percent;\n  };\n\n  /**\n   * Get the value of current time but allows for smooth scrubbing,\n   * when player can't keep up.\n   *\n   * @return {number}\n   *         The current time value to display\n   *\n   * @private\n   */\n\n\n  SeekBar.prototype.getCurrentTime_ = function getCurrentTime_() {\n    return this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();\n  };\n\n  /**\n   * We want the seek bar to be full on ended\n   * no matter what the actual internal values are. so we force it.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `timeupdate` or `ended` event that caused this to run.\n   *\n   * @listens Player#ended\n   */\n\n\n  SeekBar.prototype.handleEnded = function handleEnded(event) {\n    this.update_(this.player_.duration(), 1);\n  };\n\n  /**\n   * Get the percentage of media played so far.\n   *\n   * @return {number}\n   *         The percentage of media played so far (0 to 1).\n   */\n\n\n  SeekBar.prototype.getPercent = function getPercent() {\n    var percent = this.getCurrentTime_() / this.player_.duration();\n\n    return percent >= 1 ? 1 : percent || 0;\n  };\n\n  /**\n   * Handle mouse down on seek bar\n   *\n   * @param {EventTarget~Event} event\n   *        The `mousedown` event that caused this to run.\n   *\n   * @listens mousedown\n   */\n\n\n  SeekBar.prototype.handleMouseDown = function handleMouseDown(event) {\n    if (!isSingleLeftClick(event)) {\n      return;\n    }\n\n    // Stop event propagation to prevent double fire in progress-control.js\n    event.stopPropagation();\n    this.player_.scrubbing(true);\n\n    this.videoWasPlaying = !this.player_.paused();\n    this.player_.pause();\n\n    _Slider.prototype.handleMouseDown.call(this, event);\n  };\n\n  /**\n   * Handle mouse move on seek bar\n   *\n   * @param {EventTarget~Event} event\n   *        The `mousemove` event that caused this to run.\n   *\n   * @listens mousemove\n   */\n\n\n  SeekBar.prototype.handleMouseMove = function handleMouseMove(event) {\n    if (!isSingleLeftClick(event)) {\n      return;\n    }\n\n    var newTime = this.calculateDistance(event) * this.player_.duration();\n\n    // Don't let video end while scrubbing.\n    if (newTime === this.player_.duration()) {\n      newTime = newTime - 0.1;\n    }\n\n    // Set new time (tell player to seek to new time)\n    this.player_.currentTime(newTime);\n  };\n\n  SeekBar.prototype.enable = function enable() {\n    _Slider.prototype.enable.call(this);\n    var mouseTimeDisplay = this.getChild('mouseTimeDisplay');\n\n    if (!mouseTimeDisplay) {\n      return;\n    }\n\n    mouseTimeDisplay.show();\n  };\n\n  SeekBar.prototype.disable = function disable() {\n    _Slider.prototype.disable.call(this);\n    var mouseTimeDisplay = this.getChild('mouseTimeDisplay');\n\n    if (!mouseTimeDisplay) {\n      return;\n    }\n\n    mouseTimeDisplay.hide();\n  };\n\n  /**\n   * Handle mouse up on seek bar\n   *\n   * @param {EventTarget~Event} event\n   *        The `mouseup` event that caused this to run.\n   *\n   * @listens mouseup\n   */\n\n\n  SeekBar.prototype.handleMouseUp = function handleMouseUp(event) {\n    _Slider.prototype.handleMouseUp.call(this, event);\n\n    // Stop event propagation to prevent double fire in progress-control.js\n    if (event) {\n      event.stopPropagation();\n    }\n    this.player_.scrubbing(false);\n\n    /**\n     * Trigger timeupdate because we're done seeking and the time has changed.\n     * This is particularly useful for if the player is paused to time the time displays.\n     *\n     * @event Tech#timeupdate\n     * @type {EventTarget~Event}\n     */\n    this.player_.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });\n    if (this.videoWasPlaying) {\n      silencePromise(this.player_.play());\n    }\n  };\n\n  /**\n   * Move more quickly fast forward for keyboard-only users\n   */\n\n\n  SeekBar.prototype.stepForward = function stepForward() {\n    this.player_.currentTime(this.player_.currentTime() + STEP_SECONDS);\n  };\n\n  /**\n   * Move more quickly rewind for keyboard-only users\n   */\n\n\n  SeekBar.prototype.stepBack = function stepBack() {\n    this.player_.currentTime(this.player_.currentTime() - STEP_SECONDS);\n  };\n\n  /**\n   * Toggles the playback state of the player\n   * This gets called when enter or space is used on the seekbar\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown` event that caused this function to be called\n   *\n   */\n\n\n  SeekBar.prototype.handleAction = function handleAction(event) {\n    if (this.player_.paused()) {\n      this.player_.play();\n    } else {\n      this.player_.pause();\n    }\n  };\n\n  /**\n   * Called when this SeekBar has focus and a key gets pressed down. By\n   * default it will call `this.handleAction` when the key is space or enter.\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown` event that caused this function to be called.\n   *\n   * @listens keydown\n   */\n\n\n  SeekBar.prototype.handleKeyPress = function handleKeyPress(event) {\n\n    // Support Space (32) or Enter (13) key operation to fire a click event\n    if (event.which === 32 || event.which === 13) {\n      event.preventDefault();\n      this.handleAction(event);\n    } else if (_Slider.prototype.handleKeyPress) {\n\n      // Pass keypress handling up for unsupported keys\n      _Slider.prototype.handleKeyPress.call(this, event);\n    }\n  };\n\n  return SeekBar;\n}(Slider);\n\n/**\n * Default options for the `SeekBar`\n *\n * @type {Object}\n * @private\n */\n\n\nSeekBar.prototype.options_ = {\n  children: ['loadProgressBar', 'playProgressBar'],\n  barName: 'playProgressBar'\n};\n\n// MouseTimeDisplay tooltips should not be added to a player on mobile devices\nif (!IS_IOS && !IS_ANDROID) {\n  SeekBar.prototype.options_.children.splice(1, 0, 'mouseTimeDisplay');\n}\n\n/**\n * Call the update event for this Slider when this event happens on the player.\n *\n * @type {string}\n */\nSeekBar.prototype.playerEvent = 'timeupdate';\n\nComponent.registerComponent('SeekBar', SeekBar);\n\n/**\n * @file progress-control.js\n */\n\n/**\n * The Progress Control component contains the seek bar, load progress,\n * and play progress.\n *\n * @extends Component\n */\n\nvar ProgressControl = function (_Component) {\n  inherits(ProgressControl, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function ProgressControl(player, options) {\n    classCallCheck(this, ProgressControl);\n\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));\n\n    _this.handleMouseMove = throttle(bind(_this, _this.handleMouseMove), 25);\n    _this.throttledHandleMouseSeek = throttle(bind(_this, _this.handleMouseSeek), 25);\n\n    _this.enable();\n    return _this;\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  ProgressControl.prototype.createEl = function createEl$$1() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-progress-control vjs-control'\n    });\n  };\n\n  /**\n   * When the mouse moves over the `ProgressControl`, the pointer position\n   * gets passed down to the `MouseTimeDisplay` component.\n   *\n   * @param {EventTarget~Event} event\n   *        The `mousemove` event that caused this function to run.\n   *\n   * @listen mousemove\n   */\n\n\n  ProgressControl.prototype.handleMouseMove = function handleMouseMove(event) {\n    var seekBar = this.getChild('seekBar');\n\n    if (seekBar) {\n      var mouseTimeDisplay = seekBar.getChild('mouseTimeDisplay');\n      var seekBarEl = seekBar.el();\n      var seekBarRect = getBoundingClientRect(seekBarEl);\n      var seekBarPoint = getPointerPosition(seekBarEl, event).x;\n\n      // The default skin has a gap on either side of the `SeekBar`. This means\n      // that it's possible to trigger this behavior outside the boundaries of\n      // the `SeekBar`. This ensures we stay within it at all times.\n      if (seekBarPoint > 1) {\n        seekBarPoint = 1;\n      } else if (seekBarPoint < 0) {\n        seekBarPoint = 0;\n      }\n\n      if (mouseTimeDisplay) {\n        mouseTimeDisplay.update(seekBarRect, seekBarPoint);\n      }\n    }\n  };\n\n  /**\n   * A throttled version of the {@link ProgressControl#handleMouseSeek} listener.\n   *\n   * @method ProgressControl#throttledHandleMouseSeek\n   * @param {EventTarget~Event} event\n   *        The `mousemove` event that caused this function to run.\n   *\n   * @listen mousemove\n   * @listen touchmove\n   */\n\n  /**\n   * Handle `mousemove` or `touchmove` events on the `ProgressControl`.\n   *\n   * @param {EventTarget~Event} event\n   *        `mousedown` or `touchstart` event that triggered this function\n   *\n   * @listens mousemove\n   * @listens touchmove\n   */\n\n\n  ProgressControl.prototype.handleMouseSeek = function handleMouseSeek(event) {\n    var seekBar = this.getChild('seekBar');\n\n    if (seekBar) {\n      seekBar.handleMouseMove(event);\n    }\n  };\n\n  /**\n   * Are controls are currently enabled for this progress control.\n   *\n   * @return {boolean}\n   *         true if controls are enabled, false otherwise\n   */\n\n\n  ProgressControl.prototype.enabled = function enabled() {\n    return this.enabled_;\n  };\n\n  /**\n   * Disable all controls on the progress control and its children\n   */\n\n\n  ProgressControl.prototype.disable = function disable() {\n    this.children().forEach(function (child) {\n      return child.disable && child.disable();\n    });\n\n    if (!this.enabled()) {\n      return;\n    }\n\n    this.off(['mousedown', 'touchstart'], this.handleMouseDown);\n    this.off(this.el_, 'mousemove', this.handleMouseMove);\n    this.handleMouseUp();\n\n    this.addClass('disabled');\n\n    this.enabled_ = false;\n  };\n\n  /**\n   * Enable all controls on the progress control and its children\n   */\n\n\n  ProgressControl.prototype.enable = function enable() {\n    this.children().forEach(function (child) {\n      return child.enable && child.enable();\n    });\n\n    if (this.enabled()) {\n      return;\n    }\n\n    this.on(['mousedown', 'touchstart'], this.handleMouseDown);\n    this.on(this.el_, 'mousemove', this.handleMouseMove);\n    this.removeClass('disabled');\n\n    this.enabled_ = true;\n  };\n\n  /**\n   * Handle `mousedown` or `touchstart` events on the `ProgressControl`.\n   *\n   * @param {EventTarget~Event} event\n   *        `mousedown` or `touchstart` event that triggered this function\n   *\n   * @listens mousedown\n   * @listens touchstart\n   */\n\n\n  ProgressControl.prototype.handleMouseDown = function handleMouseDown(event) {\n    var doc = this.el_.ownerDocument;\n    var seekBar = this.getChild('seekBar');\n\n    if (seekBar) {\n      seekBar.handleMouseDown(event);\n    }\n\n    this.on(doc, 'mousemove', this.throttledHandleMouseSeek);\n    this.on(doc, 'touchmove', this.throttledHandleMouseSeek);\n    this.on(doc, 'mouseup', this.handleMouseUp);\n    this.on(doc, 'touchend', this.handleMouseUp);\n  };\n\n  /**\n   * Handle `mouseup` or `touchend` events on the `ProgressControl`.\n   *\n   * @param {EventTarget~Event} event\n   *        `mouseup` or `touchend` event that triggered this function.\n   *\n   * @listens touchend\n   * @listens mouseup\n   */\n\n\n  ProgressControl.prototype.handleMouseUp = function handleMouseUp(event) {\n    var doc = this.el_.ownerDocument;\n    var seekBar = this.getChild('seekBar');\n\n    if (seekBar) {\n      seekBar.handleMouseUp(event);\n    }\n\n    this.off(doc, 'mousemove', this.throttledHandleMouseSeek);\n    this.off(doc, 'touchmove', this.throttledHandleMouseSeek);\n    this.off(doc, 'mouseup', this.handleMouseUp);\n    this.off(doc, 'touchend', this.handleMouseUp);\n  };\n\n  return ProgressControl;\n}(Component);\n\n/**\n * Default options for `ProgressControl`\n *\n * @type {Object}\n * @private\n */\n\n\nProgressControl.prototype.options_ = {\n  children: ['seekBar']\n};\n\nComponent.registerComponent('ProgressControl', ProgressControl);\n\n/**\n * @file fullscreen-toggle.js\n */\n\n/**\n * Toggle fullscreen video\n *\n * @extends Button\n */\n\nvar FullscreenToggle = function (_Button) {\n  inherits(FullscreenToggle, _Button);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function FullscreenToggle(player, options) {\n    classCallCheck(this, FullscreenToggle);\n\n    var _this = possibleConstructorReturn(this, _Button.call(this, player, options));\n\n    _this.on(player, 'fullscreenchange', _this.handleFullscreenChange);\n\n    if (document[FullscreenApi.fullscreenEnabled] === false) {\n      _this.disable();\n    }\n    return _this;\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  FullscreenToggle.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-fullscreen-control ' + _Button.prototype.buildCSSClass.call(this);\n  };\n\n  /**\n   * Handles fullscreenchange on the player and change control text accordingly.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The {@link Player#fullscreenchange} event that caused this function to be\n   *        called.\n   *\n   * @listens Player#fullscreenchange\n   */\n\n\n  FullscreenToggle.prototype.handleFullscreenChange = function handleFullscreenChange(event) {\n    if (this.player_.isFullscreen()) {\n      this.controlText('Non-Fullscreen');\n    } else {\n      this.controlText('Fullscreen');\n    }\n  };\n\n  /**\n   * This gets called when an `FullscreenToggle` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n\n\n  FullscreenToggle.prototype.handleClick = function handleClick(event) {\n    if (!this.player_.isFullscreen()) {\n      this.player_.requestFullscreen();\n    } else {\n      this.player_.exitFullscreen();\n    }\n  };\n\n  return FullscreenToggle;\n}(Button);\n\n/**\n * The text that should display over the `FullscreenToggle`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\n\n\nFullscreenToggle.prototype.controlText_ = 'Fullscreen';\n\nComponent.registerComponent('FullscreenToggle', FullscreenToggle);\n\n/**\n * Check if volume control is supported and if it isn't hide the\n * `Component` that was passed  using the `vjs-hidden` class.\n *\n * @param {Component} self\n *        The component that should be hidden if volume is unsupported\n *\n * @param {Player} player\n *        A reference to the player\n *\n * @private\n */\nvar checkVolumeSupport = function checkVolumeSupport(self, player) {\n  // hide volume controls when they're not supported by the current tech\n  if (player.tech_ && !player.tech_.featuresVolumeControl) {\n    self.addClass('vjs-hidden');\n  }\n\n  self.on(player, 'loadstart', function () {\n    if (!player.tech_.featuresVolumeControl) {\n      self.addClass('vjs-hidden');\n    } else {\n      self.removeClass('vjs-hidden');\n    }\n  });\n};\n\n/**\n * @file volume-level.js\n */\n\n/**\n * Shows volume level\n *\n * @extends Component\n */\n\nvar VolumeLevel = function (_Component) {\n  inherits(VolumeLevel, _Component);\n\n  function VolumeLevel() {\n    classCallCheck(this, VolumeLevel);\n    return possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  VolumeLevel.prototype.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-volume-level',\n      innerHTML: '<span class=\"vjs-control-text\"></span>'\n    });\n  };\n\n  return VolumeLevel;\n}(Component);\n\nComponent.registerComponent('VolumeLevel', VolumeLevel);\n\n/**\n * @file volume-bar.js\n */\n\n/**\n * The bar that contains the volume level and can be clicked on to adjust the level\n *\n * @extends Slider\n */\n\nvar VolumeBar = function (_Slider) {\n  inherits(VolumeBar, _Slider);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function VolumeBar(player, options) {\n    classCallCheck(this, VolumeBar);\n\n    var _this = possibleConstructorReturn(this, _Slider.call(this, player, options));\n\n    _this.on('slideractive', _this.updateLastVolume_);\n    _this.on(player, 'volumechange', _this.updateARIAAttributes);\n    player.ready(function () {\n      return _this.updateARIAAttributes();\n    });\n    return _this;\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  VolumeBar.prototype.createEl = function createEl$$1() {\n    return _Slider.prototype.createEl.call(this, 'div', {\n      className: 'vjs-volume-bar vjs-slider-bar'\n    }, {\n      'aria-label': this.localize('Volume Level'),\n      'aria-live': 'polite'\n    });\n  };\n\n  /**\n   * Handle mouse down on volume bar\n   *\n   * @param {EventTarget~Event} event\n   *        The `mousedown` event that caused this to run.\n   *\n   * @listens mousedown\n   */\n\n\n  VolumeBar.prototype.handleMouseDown = function handleMouseDown(event) {\n    if (!isSingleLeftClick(event)) {\n      return;\n    }\n\n    _Slider.prototype.handleMouseDown.call(this, event);\n  };\n\n  /**\n   * Handle movement events on the {@link VolumeMenuButton}.\n   *\n   * @param {EventTarget~Event} event\n   *        The event that caused this function to run.\n   *\n   * @listens mousemove\n   */\n\n\n  VolumeBar.prototype.handleMouseMove = function handleMouseMove(event) {\n    if (!isSingleLeftClick(event)) {\n      return;\n    }\n\n    this.checkMuted();\n    this.player_.volume(this.calculateDistance(event));\n  };\n\n  /**\n   * If the player is muted unmute it.\n   */\n\n\n  VolumeBar.prototype.checkMuted = function checkMuted() {\n    if (this.player_.muted()) {\n      this.player_.muted(false);\n    }\n  };\n\n  /**\n   * Get percent of volume level\n   *\n   * @return {number}\n   *         Volume level percent as a decimal number.\n   */\n\n\n  VolumeBar.prototype.getPercent = function getPercent() {\n    if (this.player_.muted()) {\n      return 0;\n    }\n    return this.player_.volume();\n  };\n\n  /**\n   * Increase volume level for keyboard users\n   */\n\n\n  VolumeBar.prototype.stepForward = function stepForward() {\n    this.checkMuted();\n    this.player_.volume(this.player_.volume() + 0.1);\n  };\n\n  /**\n   * Decrease volume level for keyboard users\n   */\n\n\n  VolumeBar.prototype.stepBack = function stepBack() {\n    this.checkMuted();\n    this.player_.volume(this.player_.volume() - 0.1);\n  };\n\n  /**\n   * Update ARIA accessibility attributes\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `volumechange` event that caused this function to run.\n   *\n   * @listens Player#volumechange\n   */\n\n\n  VolumeBar.prototype.updateARIAAttributes = function updateARIAAttributes(event) {\n    var ariaValue = this.player_.muted() ? 0 : this.volumeAsPercentage_();\n\n    this.el_.setAttribute('aria-valuenow', ariaValue);\n    this.el_.setAttribute('aria-valuetext', ariaValue + '%');\n  };\n\n  /**\n   * Returns the current value of the player volume as a percentage\n   *\n   * @private\n   */\n\n\n  VolumeBar.prototype.volumeAsPercentage_ = function volumeAsPercentage_() {\n    return Math.round(this.player_.volume() * 100);\n  };\n\n  /**\n   * When user starts dragging the VolumeBar, store the volume and listen for\n   * the end of the drag. When the drag ends, if the volume was set to zero,\n   * set lastVolume to the stored volume.\n   *\n   * @listens slideractive\n   * @private\n   */\n\n\n  VolumeBar.prototype.updateLastVolume_ = function updateLastVolume_() {\n    var _this2 = this;\n\n    var volumeBeforeDrag = this.player_.volume();\n\n    this.one('sliderinactive', function () {\n      if (_this2.player_.volume() === 0) {\n        _this2.player_.lastVolume_(volumeBeforeDrag);\n      }\n    });\n  };\n\n  return VolumeBar;\n}(Slider);\n\n/**\n * Default options for the `VolumeBar`\n *\n * @type {Object}\n * @private\n */\n\n\nVolumeBar.prototype.options_ = {\n  children: ['volumeLevel'],\n  barName: 'volumeLevel'\n};\n\n/**\n * Call the update event for this Slider when this event happens on the player.\n *\n * @type {string}\n */\nVolumeBar.prototype.playerEvent = 'volumechange';\n\nComponent.registerComponent('VolumeBar', VolumeBar);\n\n/**\n * @file volume-control.js\n */\n\n/**\n * The component for controlling the volume level\n *\n * @extends Component\n */\n\nvar VolumeControl = function (_Component) {\n  inherits(VolumeControl, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   */\n  function VolumeControl(player) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    classCallCheck(this, VolumeControl);\n\n    options.vertical = options.vertical || false;\n\n    // Pass the vertical option down to the VolumeBar if\n    // the VolumeBar is turned on.\n    if (typeof options.volumeBar === 'undefined' || isPlain(options.volumeBar)) {\n      options.volumeBar = options.volumeBar || {};\n      options.volumeBar.vertical = options.vertical;\n    }\n\n    // hide this control if volume support is missing\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));\n\n    checkVolumeSupport(_this, player);\n\n    _this.throttledHandleMouseMove = throttle(bind(_this, _this.handleMouseMove), 25);\n\n    _this.on('mousedown', _this.handleMouseDown);\n    _this.on('touchstart', _this.handleMouseDown);\n\n    // while the slider is active (the mouse has been pressed down and\n    // is dragging) or in focus we do not want to hide the VolumeBar\n    _this.on(_this.volumeBar, ['focus', 'slideractive'], function () {\n      _this.volumeBar.addClass('vjs-slider-active');\n      _this.addClass('vjs-slider-active');\n      _this.trigger('slideractive');\n    });\n\n    _this.on(_this.volumeBar, ['blur', 'sliderinactive'], function () {\n      _this.volumeBar.removeClass('vjs-slider-active');\n      _this.removeClass('vjs-slider-active');\n      _this.trigger('sliderinactive');\n    });\n    return _this;\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  VolumeControl.prototype.createEl = function createEl() {\n    var orientationClass = 'vjs-volume-horizontal';\n\n    if (this.options_.vertical) {\n      orientationClass = 'vjs-volume-vertical';\n    }\n\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-volume-control vjs-control ' + orientationClass\n    });\n  };\n\n  /**\n   * Handle `mousedown` or `touchstart` events on the `VolumeControl`.\n   *\n   * @param {EventTarget~Event} event\n   *        `mousedown` or `touchstart` event that triggered this function\n   *\n   * @listens mousedown\n   * @listens touchstart\n   */\n\n\n  VolumeControl.prototype.handleMouseDown = function handleMouseDown(event) {\n    var doc = this.el_.ownerDocument;\n\n    this.on(doc, 'mousemove', this.throttledHandleMouseMove);\n    this.on(doc, 'touchmove', this.throttledHandleMouseMove);\n    this.on(doc, 'mouseup', this.handleMouseUp);\n    this.on(doc, 'touchend', this.handleMouseUp);\n  };\n\n  /**\n   * Handle `mouseup` or `touchend` events on the `VolumeControl`.\n   *\n   * @param {EventTarget~Event} event\n   *        `mouseup` or `touchend` event that triggered this function.\n   *\n   * @listens touchend\n   * @listens mouseup\n   */\n\n\n  VolumeControl.prototype.handleMouseUp = function handleMouseUp(event) {\n    var doc = this.el_.ownerDocument;\n\n    this.off(doc, 'mousemove', this.throttledHandleMouseMove);\n    this.off(doc, 'touchmove', this.throttledHandleMouseMove);\n    this.off(doc, 'mouseup', this.handleMouseUp);\n    this.off(doc, 'touchend', this.handleMouseUp);\n  };\n\n  /**\n   * Handle `mousedown` or `touchstart` events on the `VolumeControl`.\n   *\n   * @param {EventTarget~Event} event\n   *        `mousedown` or `touchstart` event that triggered this function\n   *\n   * @listens mousedown\n   * @listens touchstart\n   */\n\n\n  VolumeControl.prototype.handleMouseMove = function handleMouseMove(event) {\n    this.volumeBar.handleMouseMove(event);\n  };\n\n  return VolumeControl;\n}(Component);\n\n/**\n * Default options for the `VolumeControl`\n *\n * @type {Object}\n * @private\n */\n\n\nVolumeControl.prototype.options_ = {\n  children: ['volumeBar']\n};\n\nComponent.registerComponent('VolumeControl', VolumeControl);\n\n/**\n * Check if muting volume is supported and if it isn't hide the mute toggle\n * button.\n *\n * @param {Component} self\n *        A reference to the mute toggle button\n *\n * @param {Player} player\n *        A reference to the player\n *\n * @private\n */\nvar checkMuteSupport = function checkMuteSupport(self, player) {\n  // hide mute toggle button if it's not supported by the current tech\n  if (player.tech_ && !player.tech_.featuresMuteControl) {\n    self.addClass('vjs-hidden');\n  }\n\n  self.on(player, 'loadstart', function () {\n    if (!player.tech_.featuresMuteControl) {\n      self.addClass('vjs-hidden');\n    } else {\n      self.removeClass('vjs-hidden');\n    }\n  });\n};\n\n/**\n * @file mute-toggle.js\n */\n\n/**\n * A button component for muting the audio.\n *\n * @extends Button\n */\n\nvar MuteToggle = function (_Button) {\n  inherits(MuteToggle, _Button);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function MuteToggle(player, options) {\n    classCallCheck(this, MuteToggle);\n\n    // hide this control if volume support is missing\n    var _this = possibleConstructorReturn(this, _Button.call(this, player, options));\n\n    checkMuteSupport(_this, player);\n\n    _this.on(player, ['loadstart', 'volumechange'], _this.update);\n    return _this;\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  MuteToggle.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-mute-control ' + _Button.prototype.buildCSSClass.call(this);\n  };\n\n  /**\n   * This gets called when an `MuteToggle` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n\n\n  MuteToggle.prototype.handleClick = function handleClick(event) {\n    var vol = this.player_.volume();\n    var lastVolume = this.player_.lastVolume_();\n\n    if (vol === 0) {\n      var volumeToSet = lastVolume < 0.1 ? 0.1 : lastVolume;\n\n      this.player_.volume(volumeToSet);\n      this.player_.muted(false);\n    } else {\n      this.player_.muted(this.player_.muted() ? false : true);\n    }\n  };\n\n  /**\n   * Update the `MuteToggle` button based on the state of `volume` and `muted`\n   * on the player.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The {@link Player#loadstart} event if this function was called\n   *        through an event.\n   *\n   * @listens Player#loadstart\n   * @listens Player#volumechange\n   */\n\n\n  MuteToggle.prototype.update = function update(event) {\n    this.updateIcon_();\n    this.updateControlText_();\n  };\n\n  /**\n   * Update the appearance of the `MuteToggle` icon.\n   *\n   * Possible states (given `level` variable below):\n   * - 0: crossed out\n   * - 1: zero bars of volume\n   * - 2: one bar of volume\n   * - 3: two bars of volume\n   *\n   * @private\n   */\n\n\n  MuteToggle.prototype.updateIcon_ = function updateIcon_() {\n    var vol = this.player_.volume();\n    var level = 3;\n\n    // in iOS when a player is loaded with muted attribute\n    // and volume is changed with a native mute button\n    // we want to make sure muted state is updated\n    if (IS_IOS) {\n      this.player_.muted(this.player_.tech_.el_.muted);\n    }\n\n    if (vol === 0 || this.player_.muted()) {\n      level = 0;\n    } else if (vol < 0.33) {\n      level = 1;\n    } else if (vol < 0.67) {\n      level = 2;\n    }\n\n    // TODO improve muted icon classes\n    for (var i = 0; i < 4; i++) {\n      removeClass(this.el_, 'vjs-vol-' + i);\n    }\n    addClass(this.el_, 'vjs-vol-' + level);\n  };\n\n  /**\n   * If `muted` has changed on the player, update the control text\n   * (`title` attribute on `vjs-mute-control` element and content of\n   * `vjs-control-text` element).\n   *\n   * @private\n   */\n\n\n  MuteToggle.prototype.updateControlText_ = function updateControlText_() {\n    var soundOff = this.player_.muted() || this.player_.volume() === 0;\n    var text = soundOff ? 'Unmute' : 'Mute';\n\n    if (this.controlText() !== text) {\n      this.controlText(text);\n    }\n  };\n\n  return MuteToggle;\n}(Button);\n\n/**\n * The text that should display over the `MuteToggle`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\n\n\nMuteToggle.prototype.controlText_ = 'Mute';\n\nComponent.registerComponent('MuteToggle', MuteToggle);\n\n/**\n * @file volume-control.js\n */\n\n/**\n * A Component to contain the MuteToggle and VolumeControl so that\n * they can work together.\n *\n * @extends Component\n */\n\nvar VolumePanel = function (_Component) {\n  inherits(VolumePanel, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   */\n  function VolumePanel(player) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    classCallCheck(this, VolumePanel);\n\n    if (typeof options.inline !== 'undefined') {\n      options.inline = options.inline;\n    } else {\n      options.inline = true;\n    }\n\n    // pass the inline option down to the VolumeControl as vertical if\n    // the VolumeControl is on.\n    if (typeof options.volumeControl === 'undefined' || isPlain(options.volumeControl)) {\n      options.volumeControl = options.volumeControl || {};\n      options.volumeControl.vertical = !options.inline;\n    }\n\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));\n\n    _this.on(player, ['loadstart'], _this.volumePanelState_);\n\n    // while the slider is active (the mouse has been pressed down and\n    // is dragging) we do not want to hide the VolumeBar\n    _this.on(_this.volumeControl, ['slideractive'], _this.sliderActive_);\n\n    _this.on(_this.volumeControl, ['sliderinactive'], _this.sliderInactive_);\n    return _this;\n  }\n\n  /**\n   * Add vjs-slider-active class to the VolumePanel\n   *\n   * @listens VolumeControl#slideractive\n   * @private\n   */\n\n\n  VolumePanel.prototype.sliderActive_ = function sliderActive_() {\n    this.addClass('vjs-slider-active');\n  };\n\n  /**\n   * Removes vjs-slider-active class to the VolumePanel\n   *\n   * @listens VolumeControl#sliderinactive\n   * @private\n   */\n\n\n  VolumePanel.prototype.sliderInactive_ = function sliderInactive_() {\n    this.removeClass('vjs-slider-active');\n  };\n\n  /**\n   * Adds vjs-hidden or vjs-mute-toggle-only to the VolumePanel\n   * depending on MuteToggle and VolumeControl state\n   *\n   * @listens Player#loadstart\n   * @private\n   */\n\n\n  VolumePanel.prototype.volumePanelState_ = function volumePanelState_() {\n    // hide volume panel if neither volume control or mute toggle\n    // are displayed\n    if (this.volumeControl.hasClass('vjs-hidden') && this.muteToggle.hasClass('vjs-hidden')) {\n      this.addClass('vjs-hidden');\n    }\n\n    // if only mute toggle is visible we don't want\n    // volume panel expanding when hovered or active\n    if (this.volumeControl.hasClass('vjs-hidden') && !this.muteToggle.hasClass('vjs-hidden')) {\n      this.addClass('vjs-mute-toggle-only');\n    }\n  };\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  VolumePanel.prototype.createEl = function createEl() {\n    var orientationClass = 'vjs-volume-panel-horizontal';\n\n    if (!this.options_.inline) {\n      orientationClass = 'vjs-volume-panel-vertical';\n    }\n\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-volume-panel vjs-control ' + orientationClass\n    });\n  };\n\n  return VolumePanel;\n}(Component);\n\n/**\n * Default options for the `VolumeControl`\n *\n * @type {Object}\n * @private\n */\n\n\nVolumePanel.prototype.options_ = {\n  children: ['muteToggle', 'volumeControl']\n};\n\nComponent.registerComponent('VolumePanel', VolumePanel);\n\n/**\n * @file menu.js\n */\n\n/**\n * The Menu component is used to build popup menus, including subtitle and\n * captions selection menus.\n *\n * @extends Component\n */\n\nvar Menu = function (_Component) {\n  inherits(Menu, _Component);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Player} player\n   *        the player that this component should attach to\n   *\n   * @param {Object} [options]\n   *        Object of option names and values\n   *\n   */\n  function Menu(player, options) {\n    classCallCheck(this, Menu);\n\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));\n\n    if (options) {\n      _this.menuButton_ = options.menuButton;\n    }\n\n    _this.focusedChild_ = -1;\n\n    _this.on('keydown', _this.handleKeyPress);\n    return _this;\n  }\n\n  /**\n   * Add a {@link MenuItem} to the menu.\n   *\n   * @param {Object|string} component\n   *        The name or instance of the `MenuItem` to add.\n   *\n   */\n\n\n  Menu.prototype.addItem = function addItem(component) {\n    this.addChild(component);\n    component.on('click', bind(this, function (event) {\n      // Unpress the associated MenuButton, and move focus back to it\n      if (this.menuButton_) {\n        this.menuButton_.unpressButton();\n\n        // don't focus menu button if item is a caption settings item\n        // because focus will move elsewhere\n        if (component.name() !== 'CaptionSettingsMenuItem') {\n          this.menuButton_.focus();\n        }\n      }\n    }));\n  };\n\n  /**\n   * Create the `Menu`s DOM element.\n   *\n   * @return {Element}\n   *         the element that was created\n   */\n\n\n  Menu.prototype.createEl = function createEl$$1() {\n    var contentElType = this.options_.contentElType || 'ul';\n\n    this.contentEl_ = createEl(contentElType, {\n      className: 'vjs-menu-content'\n    });\n\n    this.contentEl_.setAttribute('role', 'menu');\n\n    var el = _Component.prototype.createEl.call(this, 'div', {\n      append: this.contentEl_,\n      className: 'vjs-menu'\n    });\n\n    el.appendChild(this.contentEl_);\n\n    // Prevent clicks from bubbling up. Needed for Menu Buttons,\n    // where a click on the parent is significant\n    on(el, 'click', function (event) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    });\n\n    return el;\n  };\n\n  Menu.prototype.dispose = function dispose() {\n    this.contentEl_ = null;\n\n    _Component.prototype.dispose.call(this);\n  };\n\n  /**\n   * Handle a `keydown` event on this menu. This listener is added in the constructor.\n   *\n   * @param {EventTarget~Event} event\n   *        A `keydown` event that happened on the menu.\n   *\n   * @listens keydown\n   */\n\n\n  Menu.prototype.handleKeyPress = function handleKeyPress(event) {\n    // Left and Down Arrows\n    if (event.which === 37 || event.which === 40) {\n      event.preventDefault();\n      this.stepForward();\n\n      // Up and Right Arrows\n    } else if (event.which === 38 || event.which === 39) {\n      event.preventDefault();\n      this.stepBack();\n    }\n  };\n\n  /**\n   * Move to next (lower) menu item for keyboard users.\n   */\n\n\n  Menu.prototype.stepForward = function stepForward() {\n    var stepChild = 0;\n\n    if (this.focusedChild_ !== undefined) {\n      stepChild = this.focusedChild_ + 1;\n    }\n    this.focus(stepChild);\n  };\n\n  /**\n   * Move to previous (higher) menu item for keyboard users.\n   */\n\n\n  Menu.prototype.stepBack = function stepBack() {\n    var stepChild = 0;\n\n    if (this.focusedChild_ !== undefined) {\n      stepChild = this.focusedChild_ - 1;\n    }\n    this.focus(stepChild);\n  };\n\n  /**\n   * Set focus on a {@link MenuItem} in the `Menu`.\n   *\n   * @param {Object|string} [item=0]\n   *        Index of child item set focus on.\n   */\n\n\n  Menu.prototype.focus = function focus() {\n    var item = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n    var children = this.children().slice();\n    var haveTitle = children.length && children[0].className && /vjs-menu-title/.test(children[0].className);\n\n    if (haveTitle) {\n      children.shift();\n    }\n\n    if (children.length > 0) {\n      if (item < 0) {\n        item = 0;\n      } else if (item >= children.length) {\n        item = children.length - 1;\n      }\n\n      this.focusedChild_ = item;\n\n      children[item].el_.focus();\n    }\n  };\n\n  return Menu;\n}(Component);\n\nComponent.registerComponent('Menu', Menu);\n\n/**\n * @file menu-button.js\n */\n\n/**\n * A `MenuButton` class for any popup {@link Menu}.\n *\n * @extends Component\n */\n\nvar MenuButton = function (_Component) {\n  inherits(MenuButton, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   */\n  function MenuButton(player) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    classCallCheck(this, MenuButton);\n\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));\n\n    _this.menuButton_ = new Button(player, options);\n\n    _this.menuButton_.controlText(_this.controlText_);\n    _this.menuButton_.el_.setAttribute('aria-haspopup', 'true');\n\n    // Add buildCSSClass values to the button, not the wrapper\n    var buttonClass = Button.prototype.buildCSSClass();\n\n    _this.menuButton_.el_.className = _this.buildCSSClass() + ' ' + buttonClass;\n    _this.menuButton_.removeClass('vjs-control');\n\n    _this.addChild(_this.menuButton_);\n\n    _this.update();\n\n    _this.enabled_ = true;\n\n    _this.on(_this.menuButton_, 'tap', _this.handleClick);\n    _this.on(_this.menuButton_, 'click', _this.handleClick);\n    _this.on(_this.menuButton_, 'focus', _this.handleFocus);\n    _this.on(_this.menuButton_, 'blur', _this.handleBlur);\n\n    _this.on('keydown', _this.handleSubmenuKeyPress);\n    return _this;\n  }\n\n  /**\n   * Update the menu based on the current state of its items.\n   */\n\n\n  MenuButton.prototype.update = function update() {\n    var menu = this.createMenu();\n\n    if (this.menu) {\n      this.menu.dispose();\n      this.removeChild(this.menu);\n    }\n\n    this.menu = menu;\n    this.addChild(menu);\n\n    /**\n     * Track the state of the menu button\n     *\n     * @type {Boolean}\n     * @private\n     */\n    this.buttonPressed_ = false;\n    this.menuButton_.el_.setAttribute('aria-expanded', 'false');\n\n    if (this.items && this.items.length <= this.hideThreshold_) {\n      this.hide();\n    } else {\n      this.show();\n    }\n  };\n\n  /**\n   * Create the menu and add all items to it.\n   *\n   * @return {Menu}\n   *         The constructed menu\n   */\n\n\n  MenuButton.prototype.createMenu = function createMenu() {\n    var menu = new Menu(this.player_, { menuButton: this });\n\n    /**\n     * Hide the menu if the number of items is less than or equal to this threshold. This defaults\n     * to 0 and whenever we add items which can be hidden to the menu we'll increment it. We list\n     * it here because every time we run `createMenu` we need to reset the value.\n     *\n     * @protected\n     * @type {Number}\n     */\n    this.hideThreshold_ = 0;\n\n    // Add a title list item to the top\n    if (this.options_.title) {\n      var title = createEl('li', {\n        className: 'vjs-menu-title',\n        innerHTML: toTitleCase(this.options_.title),\n        tabIndex: -1\n      });\n\n      this.hideThreshold_ += 1;\n\n      menu.children_.unshift(title);\n      prependTo(title, menu.contentEl());\n    }\n\n    this.items = this.createItems();\n\n    if (this.items) {\n      // Add menu items to the menu\n      for (var i = 0; i < this.items.length; i++) {\n        menu.addItem(this.items[i]);\n      }\n    }\n\n    return menu;\n  };\n\n  /**\n   * Create the list of menu items. Specific to each subclass.\n   *\n   * @abstract\n   */\n\n\n  MenuButton.prototype.createItems = function createItems() {};\n\n  /**\n   * Create the `MenuButtons`s DOM element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n\n\n  MenuButton.prototype.createEl = function createEl$$1() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: this.buildWrapperCSSClass()\n    }, {});\n  };\n\n  /**\n   * Allow sub components to stack CSS class names for the wrapper element\n   *\n   * @return {string}\n   *         The constructed wrapper DOM `className`\n   */\n\n\n  MenuButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {\n    var menuButtonClass = 'vjs-menu-button';\n\n    // If the inline option is passed, we want to use different styles altogether.\n    if (this.options_.inline === true) {\n      menuButtonClass += '-inline';\n    } else {\n      menuButtonClass += '-popup';\n    }\n\n    // TODO: Fix the CSS so that this isn't necessary\n    var buttonClass = Button.prototype.buildCSSClass();\n\n    return 'vjs-menu-button ' + menuButtonClass + ' ' + buttonClass + ' ' + _Component.prototype.buildCSSClass.call(this);\n  };\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  MenuButton.prototype.buildCSSClass = function buildCSSClass() {\n    var menuButtonClass = 'vjs-menu-button';\n\n    // If the inline option is passed, we want to use different styles altogether.\n    if (this.options_.inline === true) {\n      menuButtonClass += '-inline';\n    } else {\n      menuButtonClass += '-popup';\n    }\n\n    return 'vjs-menu-button ' + menuButtonClass + ' ' + _Component.prototype.buildCSSClass.call(this);\n  };\n\n  /**\n   * Get or set the localized control text that will be used for accessibility.\n   *\n   * > NOTE: This will come from the internal `menuButton_` element.\n   *\n   * @param {string} [text]\n   *        Control text for element.\n   *\n   * @param {Element} [el=this.menuButton_.el()]\n   *        Element to set the title on.\n   *\n   * @return {string}\n   *         - The control text when getting\n   */\n\n\n  MenuButton.prototype.controlText = function controlText(text) {\n    var el = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.menuButton_.el();\n\n    return this.menuButton_.controlText(text, el);\n  };\n\n  /**\n   * Handle a click on a `MenuButton`.\n   * See {@link ClickableComponent#handleClick} for instances where this is called.\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n\n\n  MenuButton.prototype.handleClick = function handleClick(event) {\n    // When you click the button it adds focus, which will show the menu.\n    // So we'll remove focus when the mouse leaves the button. Focus is needed\n    // for tab navigation.\n\n    this.one(this.menu.contentEl(), 'mouseleave', bind(this, function (e) {\n      this.unpressButton();\n      this.el_.blur();\n    }));\n    if (this.buttonPressed_) {\n      this.unpressButton();\n    } else {\n      this.pressButton();\n    }\n  };\n\n  /**\n   * Set the focus to the actual button, not to this element\n   */\n\n\n  MenuButton.prototype.focus = function focus() {\n    this.menuButton_.focus();\n  };\n\n  /**\n   * Remove the focus from the actual button, not this element\n   */\n\n\n  MenuButton.prototype.blur = function blur() {\n    this.menuButton_.blur();\n  };\n\n  /**\n   * This gets called when a `MenuButton` gains focus via a `focus` event.\n   * Turns on listening for `keydown` events. When they happen it\n   * calls `this.handleKeyPress`.\n   *\n   * @param {EventTarget~Event} event\n   *        The `focus` event that caused this function to be called.\n   *\n   * @listens focus\n   */\n\n\n  MenuButton.prototype.handleFocus = function handleFocus() {\n    on(document, 'keydown', bind(this, this.handleKeyPress));\n  };\n\n  /**\n   * Called when a `MenuButton` loses focus. Turns off the listener for\n   * `keydown` events. Which Stops `this.handleKeyPress` from getting called.\n   *\n   * @param {EventTarget~Event} event\n   *        The `blur` event that caused this function to be called.\n   *\n   * @listens blur\n   */\n\n\n  MenuButton.prototype.handleBlur = function handleBlur() {\n    off(document, 'keydown', bind(this, this.handleKeyPress));\n  };\n\n  /**\n   * Handle tab, escape, down arrow, and up arrow keys for `MenuButton`. See\n   * {@link ClickableComponent#handleKeyPress} for instances where this is called.\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown` event that caused this function to be called.\n   *\n   * @listens keydown\n   */\n\n\n  MenuButton.prototype.handleKeyPress = function handleKeyPress(event) {\n\n    // Escape (27) key or Tab (9) key unpress the 'button'\n    if (event.which === 27 || event.which === 9) {\n      if (this.buttonPressed_) {\n        this.unpressButton();\n      }\n      // Don't preventDefault for Tab key - we still want to lose focus\n      if (event.which !== 9) {\n        event.preventDefault();\n        // Set focus back to the menu button's button\n        this.menuButton_.el_.focus();\n      }\n      // Up (38) key or Down (40) key press the 'button'\n    } else if (event.which === 38 || event.which === 40) {\n      if (!this.buttonPressed_) {\n        this.pressButton();\n        event.preventDefault();\n      }\n    }\n  };\n\n  /**\n   * Handle a `keydown` event on a sub-menu. The listener for this is added in\n   * the constructor.\n   *\n   * @param {EventTarget~Event} event\n   *        Key press event\n   *\n   * @listens keydown\n   */\n\n\n  MenuButton.prototype.handleSubmenuKeyPress = function handleSubmenuKeyPress(event) {\n\n    // Escape (27) key or Tab (9) key unpress the 'button'\n    if (event.which === 27 || event.which === 9) {\n      if (this.buttonPressed_) {\n        this.unpressButton();\n      }\n      // Don't preventDefault for Tab key - we still want to lose focus\n      if (event.which !== 9) {\n        event.preventDefault();\n        // Set focus back to the menu button's button\n        this.menuButton_.el_.focus();\n      }\n    }\n  };\n\n  /**\n   * Put the current `MenuButton` into a pressed state.\n   */\n\n\n  MenuButton.prototype.pressButton = function pressButton() {\n    if (this.enabled_) {\n      this.buttonPressed_ = true;\n      this.menu.lockShowing();\n      this.menuButton_.el_.setAttribute('aria-expanded', 'true');\n\n      // set the focus into the submenu, except on iOS where it is resulting in\n      // undesired scrolling behavior when the player is in an iframe\n      if (IS_IOS && isInFrame()) {\n        // Return early so that the menu isn't focused\n        return;\n      }\n\n      this.menu.focus();\n    }\n  };\n\n  /**\n   * Take the current `MenuButton` out of a pressed state.\n   */\n\n\n  MenuButton.prototype.unpressButton = function unpressButton() {\n    if (this.enabled_) {\n      this.buttonPressed_ = false;\n      this.menu.unlockShowing();\n      this.menuButton_.el_.setAttribute('aria-expanded', 'false');\n    }\n  };\n\n  /**\n   * Disable the `MenuButton`. Don't allow it to be clicked.\n   */\n\n\n  MenuButton.prototype.disable = function disable() {\n    this.unpressButton();\n\n    this.enabled_ = false;\n    this.addClass('vjs-disabled');\n\n    this.menuButton_.disable();\n  };\n\n  /**\n   * Enable the `MenuButton`. Allow it to be clicked.\n   */\n\n\n  MenuButton.prototype.enable = function enable() {\n    this.enabled_ = true;\n    this.removeClass('vjs-disabled');\n\n    this.menuButton_.enable();\n  };\n\n  return MenuButton;\n}(Component);\n\nComponent.registerComponent('MenuButton', MenuButton);\n\n/**\n * @file track-button.js\n */\n\n/**\n * The base class for buttons that toggle specific  track types (e.g. subtitles).\n *\n * @extends MenuButton\n */\n\nvar TrackButton = function (_MenuButton) {\n  inherits(TrackButton, _MenuButton);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function TrackButton(player, options) {\n    classCallCheck(this, TrackButton);\n\n    var tracks = options.tracks;\n\n    var _this = possibleConstructorReturn(this, _MenuButton.call(this, player, options));\n\n    if (_this.items.length <= 1) {\n      _this.hide();\n    }\n\n    if (!tracks) {\n      return possibleConstructorReturn(_this);\n    }\n\n    var updateHandler = bind(_this, _this.update);\n\n    tracks.addEventListener('removetrack', updateHandler);\n    tracks.addEventListener('addtrack', updateHandler);\n    _this.player_.on('ready', updateHandler);\n\n    _this.player_.on('dispose', function () {\n      tracks.removeEventListener('removetrack', updateHandler);\n      tracks.removeEventListener('addtrack', updateHandler);\n    });\n    return _this;\n  }\n\n  return TrackButton;\n}(MenuButton);\n\nComponent.registerComponent('TrackButton', TrackButton);\n\n/**\n * @file menu-item.js\n */\n\n/**\n * The component for a menu item. `<li>`\n *\n * @extends ClickableComponent\n */\n\nvar MenuItem = function (_ClickableComponent) {\n  inherits(MenuItem, _ClickableComponent);\n\n  /**\n   * Creates an instance of the this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   *\n   */\n  function MenuItem(player, options) {\n    classCallCheck(this, MenuItem);\n\n    var _this = possibleConstructorReturn(this, _ClickableComponent.call(this, player, options));\n\n    _this.selectable = options.selectable;\n    _this.isSelected_ = options.selected || false;\n    _this.multiSelectable = options.multiSelectable;\n\n    _this.selected(_this.isSelected_);\n\n    if (_this.selectable) {\n      if (_this.multiSelectable) {\n        _this.el_.setAttribute('role', 'menuitemcheckbox');\n      } else {\n        _this.el_.setAttribute('role', 'menuitemradio');\n      }\n    } else {\n      _this.el_.setAttribute('role', 'menuitem');\n    }\n    return _this;\n  }\n\n  /**\n   * Create the `MenuItem's DOM element\n   *\n   * @param {string} [type=li]\n   *        Element's node type, not actually used, always set to `li`.\n   *\n   * @param {Object} [props={}]\n   *        An object of properties that should be set on the element\n   *\n   * @param {Object} [attrs={}]\n   *        An object of attributes that should be set on the element\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n\n\n  MenuItem.prototype.createEl = function createEl(type, props, attrs) {\n    // The control is textual, not just an icon\n    this.nonIconControl = true;\n\n    return _ClickableComponent.prototype.createEl.call(this, 'li', assign({\n      className: 'vjs-menu-item',\n      innerHTML: '<span class=\"vjs-menu-item-text\">' + this.localize(this.options_.label) + '</span>',\n      tabIndex: -1\n    }, props), attrs);\n  };\n\n  /**\n   * Any click on a `MenuItem` puts it into the selected state.\n   * See {@link ClickableComponent#handleClick} for instances where this is called.\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n\n\n  MenuItem.prototype.handleClick = function handleClick(event) {\n    this.selected(true);\n  };\n\n  /**\n   * Set the state for this menu item as selected or not.\n   *\n   * @param {boolean} selected\n   *        if the menu item is selected or not\n   */\n\n\n  MenuItem.prototype.selected = function selected(_selected) {\n    if (this.selectable) {\n      if (_selected) {\n        this.addClass('vjs-selected');\n        this.el_.setAttribute('aria-checked', 'true');\n        // aria-checked isn't fully supported by browsers/screen readers,\n        // so indicate selected state to screen reader in the control text.\n        this.controlText(', selected');\n        this.isSelected_ = true;\n      } else {\n        this.removeClass('vjs-selected');\n        this.el_.setAttribute('aria-checked', 'false');\n        // Indicate un-selected state to screen reader\n        this.controlText('');\n        this.isSelected_ = false;\n      }\n    }\n  };\n\n  return MenuItem;\n}(ClickableComponent);\n\nComponent.registerComponent('MenuItem', MenuItem);\n\n/**\n * @file text-track-menu-item.js\n */\n\n/**\n * The specific menu item type for selecting a language within a text track kind\n *\n * @extends MenuItem\n */\n\nvar TextTrackMenuItem = function (_MenuItem) {\n  inherits(TextTrackMenuItem, _MenuItem);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function TextTrackMenuItem(player, options) {\n    classCallCheck(this, TextTrackMenuItem);\n\n    var track = options.track;\n    var tracks = player.textTracks();\n\n    // Modify options for parent MenuItem class's init.\n    options.label = track.label || track.language || 'Unknown';\n    options.selected = track.mode === 'showing';\n\n    var _this = possibleConstructorReturn(this, _MenuItem.call(this, player, options));\n\n    _this.track = track;\n    var changeHandler = function changeHandler() {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this.handleTracksChange.apply(_this, args);\n    };\n    var selectedLanguageChangeHandler = function selectedLanguageChangeHandler() {\n      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      _this.handleSelectedLanguageChange.apply(_this, args);\n    };\n\n    player.on(['loadstart', 'texttrackchange'], changeHandler);\n    tracks.addEventListener('change', changeHandler);\n    tracks.addEventListener('selectedlanguagechange', selectedLanguageChangeHandler);\n    _this.on('dispose', function () {\n      player.off(['loadstart', 'texttrackchange'], changeHandler);\n      tracks.removeEventListener('change', changeHandler);\n      tracks.removeEventListener('selectedlanguagechange', selectedLanguageChangeHandler);\n    });\n\n    // iOS7 doesn't dispatch change events to TextTrackLists when an\n    // associated track's mode changes. Without something like\n    // Object.observe() (also not present on iOS7), it's not\n    // possible to detect changes to the mode attribute and polyfill\n    // the change event. As a poor substitute, we manually dispatch\n    // change events whenever the controls modify the mode.\n    if (tracks.onchange === undefined) {\n      var event = void 0;\n\n      _this.on(['tap', 'click'], function () {\n        if (_typeof(window$1.Event) !== 'object') {\n          // Android 2.3 throws an Illegal Constructor error for window.Event\n          try {\n            event = new window$1.Event('change');\n          } catch (err) {\n            // continue regardless of error\n          }\n        }\n\n        if (!event) {\n          event = document.createEvent('Event');\n          event.initEvent('change', true, true);\n        }\n\n        tracks.dispatchEvent(event);\n      });\n    }\n\n    // set the default state based on current tracks\n    _this.handleTracksChange();\n    return _this;\n  }\n\n  /**\n   * This gets called when an `TextTrackMenuItem` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n\n\n  TextTrackMenuItem.prototype.handleClick = function handleClick(event) {\n    var kind = this.track.kind;\n    var kinds = this.track.kinds;\n    var tracks = this.player_.textTracks();\n\n    if (!kinds) {\n      kinds = [kind];\n    }\n\n    _MenuItem.prototype.handleClick.call(this, event);\n\n    if (!tracks) {\n      return;\n    }\n\n    for (var i = 0; i < tracks.length; i++) {\n      var track = tracks[i];\n\n      if (track === this.track && kinds.indexOf(track.kind) > -1) {\n        if (track.mode !== 'showing') {\n          track.mode = 'showing';\n        }\n      } else if (track.mode !== 'disabled') {\n        track.mode = 'disabled';\n      }\n    }\n  };\n\n  /**\n   * Handle text track list change\n   *\n   * @param {EventTarget~Event} event\n   *        The `change` event that caused this function to be called.\n   *\n   * @listens TextTrackList#change\n   */\n\n\n  TextTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {\n    var shouldBeSelected = this.track.mode === 'showing';\n\n    // Prevent redundant selected() calls because they may cause\n    // screen readers to read the appended control text unnecessarily\n    if (shouldBeSelected !== this.isSelected_) {\n      this.selected(shouldBeSelected);\n    }\n  };\n\n  TextTrackMenuItem.prototype.handleSelectedLanguageChange = function handleSelectedLanguageChange(event) {\n    if (this.track.mode === 'showing') {\n      var selectedLanguage = this.player_.cache_.selectedLanguage;\n\n      // Don't replace the kind of track across the same language\n      if (selectedLanguage && selectedLanguage.enabled && selectedLanguage.language === this.track.language && selectedLanguage.kind !== this.track.kind) {\n        return;\n      }\n\n      this.player_.cache_.selectedLanguage = {\n        enabled: true,\n        language: this.track.language,\n        kind: this.track.kind\n      };\n    }\n  };\n\n  TextTrackMenuItem.prototype.dispose = function dispose() {\n    // remove reference to track object on dispose\n    this.track = null;\n\n    _MenuItem.prototype.dispose.call(this);\n  };\n\n  return TextTrackMenuItem;\n}(MenuItem);\n\nComponent.registerComponent('TextTrackMenuItem', TextTrackMenuItem);\n\n/**\n * @file off-text-track-menu-item.js\n */\n\n/**\n * A special menu item for turning of a specific type of text track\n *\n * @extends TextTrackMenuItem\n */\n\nvar OffTextTrackMenuItem = function (_TextTrackMenuItem) {\n  inherits(OffTextTrackMenuItem, _TextTrackMenuItem);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function OffTextTrackMenuItem(player, options) {\n    classCallCheck(this, OffTextTrackMenuItem);\n\n    // Create pseudo track info\n    // Requires options['kind']\n    options.track = {\n      player: player,\n      kind: options.kind,\n      kinds: options.kinds,\n      default: false,\n      mode: 'disabled'\n    };\n\n    if (!options.kinds) {\n      options.kinds = [options.kind];\n    }\n\n    if (options.label) {\n      options.track.label = options.label;\n    } else {\n      options.track.label = options.kinds.join(' and ') + ' off';\n    }\n\n    // MenuItem is selectable\n    options.selectable = true;\n    // MenuItem is NOT multiSelectable (i.e. only one can be marked \"selected\" at a time)\n    options.multiSelectable = false;\n\n    return possibleConstructorReturn(this, _TextTrackMenuItem.call(this, player, options));\n  }\n\n  /**\n   * Handle text track change\n   *\n   * @param {EventTarget~Event} event\n   *        The event that caused this function to run\n   */\n\n\n  OffTextTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {\n    var tracks = this.player().textTracks();\n    var shouldBeSelected = true;\n\n    for (var i = 0, l = tracks.length; i < l; i++) {\n      var track = tracks[i];\n\n      if (this.options_.kinds.indexOf(track.kind) > -1 && track.mode === 'showing') {\n        shouldBeSelected = false;\n        break;\n      }\n    }\n\n    // Prevent redundant selected() calls because they may cause\n    // screen readers to read the appended control text unnecessarily\n    if (shouldBeSelected !== this.isSelected_) {\n      this.selected(shouldBeSelected);\n    }\n  };\n\n  OffTextTrackMenuItem.prototype.handleSelectedLanguageChange = function handleSelectedLanguageChange(event) {\n    var tracks = this.player().textTracks();\n    var allHidden = true;\n\n    for (var i = 0, l = tracks.length; i < l; i++) {\n      var track = tracks[i];\n\n      if (['captions', 'descriptions', 'subtitles'].indexOf(track.kind) > -1 && track.mode === 'showing') {\n        allHidden = false;\n        break;\n      }\n    }\n\n    if (allHidden) {\n      this.player_.cache_.selectedLanguage = {\n        enabled: false\n      };\n    }\n  };\n\n  return OffTextTrackMenuItem;\n}(TextTrackMenuItem);\n\nComponent.registerComponent('OffTextTrackMenuItem', OffTextTrackMenuItem);\n\n/**\n * @file text-track-button.js\n */\n\n/**\n * The base class for buttons that toggle specific text track types (e.g. subtitles)\n *\n * @extends MenuButton\n */\n\nvar TextTrackButton = function (_TrackButton) {\n  inherits(TextTrackButton, _TrackButton);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   */\n  function TextTrackButton(player) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    classCallCheck(this, TextTrackButton);\n\n    options.tracks = player.textTracks();\n\n    return possibleConstructorReturn(this, _TrackButton.call(this, player, options));\n  }\n\n  /**\n   * Create a menu item for each text track\n   *\n   * @param {TextTrackMenuItem[]} [items=[]]\n   *        Existing array of items to use during creation\n   *\n   * @return {TextTrackMenuItem[]}\n   *         Array of menu items that were created\n   */\n\n\n  TextTrackButton.prototype.createItems = function createItems() {\n    var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var TrackMenuItem = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TextTrackMenuItem;\n\n\n    // Label is an override for the [track] off label\n    // USed to localise captions/subtitles\n    var label = void 0;\n\n    if (this.label_) {\n      label = this.label_ + ' off';\n    }\n    // Add an OFF menu item to turn all tracks off\n    items.push(new OffTextTrackMenuItem(this.player_, {\n      kinds: this.kinds_,\n      kind: this.kind_,\n      label: label\n    }));\n\n    this.hideThreshold_ += 1;\n\n    var tracks = this.player_.textTracks();\n\n    if (!Array.isArray(this.kinds_)) {\n      this.kinds_ = [this.kind_];\n    }\n\n    for (var i = 0; i < tracks.length; i++) {\n      var track = tracks[i];\n\n      // only add tracks that are of an appropriate kind and have a label\n      if (this.kinds_.indexOf(track.kind) > -1) {\n\n        var item = new TrackMenuItem(this.player_, {\n          track: track,\n          // MenuItem is selectable\n          selectable: true,\n          // MenuItem is NOT multiSelectable (i.e. only one can be marked \"selected\" at a time)\n          multiSelectable: false\n        });\n\n        item.addClass('vjs-' + track.kind + '-menu-item');\n        items.push(item);\n      }\n    }\n\n    return items;\n  };\n\n  return TextTrackButton;\n}(TrackButton);\n\nComponent.registerComponent('TextTrackButton', TextTrackButton);\n\n/**\n * @file chapters-track-menu-item.js\n */\n\n/**\n * The chapter track menu item\n *\n * @extends MenuItem\n */\n\nvar ChaptersTrackMenuItem = function (_MenuItem) {\n  inherits(ChaptersTrackMenuItem, _MenuItem);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function ChaptersTrackMenuItem(player, options) {\n    classCallCheck(this, ChaptersTrackMenuItem);\n\n    var track = options.track;\n    var cue = options.cue;\n    var currentTime = player.currentTime();\n\n    // Modify options for parent MenuItem class's init.\n    options.selectable = true;\n    options.multiSelectable = false;\n    options.label = cue.text;\n    options.selected = cue.startTime <= currentTime && currentTime < cue.endTime;\n\n    var _this = possibleConstructorReturn(this, _MenuItem.call(this, player, options));\n\n    _this.track = track;\n    _this.cue = cue;\n    track.addEventListener('cuechange', bind(_this, _this.update));\n    return _this;\n  }\n\n  /**\n   * This gets called when an `ChaptersTrackMenuItem` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n\n\n  ChaptersTrackMenuItem.prototype.handleClick = function handleClick(event) {\n    _MenuItem.prototype.handleClick.call(this);\n    this.player_.currentTime(this.cue.startTime);\n    this.update(this.cue.startTime);\n  };\n\n  /**\n   * Update chapter menu item\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `cuechange` event that caused this function to run.\n   *\n   * @listens TextTrack#cuechange\n   */\n\n\n  ChaptersTrackMenuItem.prototype.update = function update(event) {\n    var cue = this.cue;\n    var currentTime = this.player_.currentTime();\n\n    // vjs.log(currentTime, cue.startTime);\n    this.selected(cue.startTime <= currentTime && currentTime < cue.endTime);\n  };\n\n  return ChaptersTrackMenuItem;\n}(MenuItem);\n\nComponent.registerComponent('ChaptersTrackMenuItem', ChaptersTrackMenuItem);\n\n/**\n * @file chapters-button.js\n */\n\n/**\n * The button component for toggling and selecting chapters\n * Chapters act much differently than other text tracks\n * Cues are navigation vs. other tracks of alternative languages\n *\n * @extends TextTrackButton\n */\n\nvar ChaptersButton = function (_TextTrackButton) {\n  inherits(ChaptersButton, _TextTrackButton);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        The function to call when this function is ready.\n   */\n  function ChaptersButton(player, options, ready) {\n    classCallCheck(this, ChaptersButton);\n    return possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  ChaptersButton.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-chapters-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);\n  };\n\n  ChaptersButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {\n    return 'vjs-chapters-button ' + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);\n  };\n\n  /**\n   * Update the menu based on the current state of its items.\n   *\n   * @param {EventTarget~Event} [event]\n   *        An event that triggered this function to run.\n   *\n   * @listens TextTrackList#addtrack\n   * @listens TextTrackList#removetrack\n   * @listens TextTrackList#change\n   */\n\n\n  ChaptersButton.prototype.update = function update(event) {\n    if (!this.track_ || event && (event.type === 'addtrack' || event.type === 'removetrack')) {\n      this.setTrack(this.findChaptersTrack());\n    }\n    _TextTrackButton.prototype.update.call(this);\n  };\n\n  /**\n   * Set the currently selected track for the chapters button.\n   *\n   * @param {TextTrack} track\n   *        The new track to select. Nothing will change if this is the currently selected\n   *        track.\n   */\n\n\n  ChaptersButton.prototype.setTrack = function setTrack(track) {\n    if (this.track_ === track) {\n      return;\n    }\n\n    if (!this.updateHandler_) {\n      this.updateHandler_ = this.update.bind(this);\n    }\n\n    // here this.track_ refers to the old track instance\n    if (this.track_) {\n      var remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);\n\n      if (remoteTextTrackEl) {\n        remoteTextTrackEl.removeEventListener('load', this.updateHandler_);\n      }\n\n      this.track_ = null;\n    }\n\n    this.track_ = track;\n\n    // here this.track_ refers to the new track instance\n    if (this.track_) {\n      this.track_.mode = 'hidden';\n\n      var _remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);\n\n      if (_remoteTextTrackEl) {\n        _remoteTextTrackEl.addEventListener('load', this.updateHandler_);\n      }\n    }\n  };\n\n  /**\n   * Find the track object that is currently in use by this ChaptersButton\n   *\n   * @return {TextTrack|undefined}\n   *         The current track or undefined if none was found.\n   */\n\n\n  ChaptersButton.prototype.findChaptersTrack = function findChaptersTrack() {\n    var tracks = this.player_.textTracks() || [];\n\n    for (var i = tracks.length - 1; i >= 0; i--) {\n      // We will always choose the last track as our chaptersTrack\n      var track = tracks[i];\n\n      if (track.kind === this.kind_) {\n        return track;\n      }\n    }\n  };\n\n  /**\n   * Get the caption for the ChaptersButton based on the track label. This will also\n   * use the current tracks localized kind as a fallback if a label does not exist.\n   *\n   * @return {string}\n   *         The tracks current label or the localized track kind.\n   */\n\n\n  ChaptersButton.prototype.getMenuCaption = function getMenuCaption() {\n    if (this.track_ && this.track_.label) {\n      return this.track_.label;\n    }\n    return this.localize(toTitleCase(this.kind_));\n  };\n\n  /**\n   * Create menu from chapter track\n   *\n   * @return {Menu}\n   *         New menu for the chapter buttons\n   */\n\n\n  ChaptersButton.prototype.createMenu = function createMenu() {\n    this.options_.title = this.getMenuCaption();\n    return _TextTrackButton.prototype.createMenu.call(this);\n  };\n\n  /**\n   * Create a menu item for each text track\n   *\n   * @return {TextTrackMenuItem[]}\n   *         Array of menu items\n   */\n\n\n  ChaptersButton.prototype.createItems = function createItems() {\n    var items = [];\n\n    if (!this.track_) {\n      return items;\n    }\n\n    var cues = this.track_.cues;\n\n    if (!cues) {\n      return items;\n    }\n\n    for (var i = 0, l = cues.length; i < l; i++) {\n      var cue = cues[i];\n      var mi = new ChaptersTrackMenuItem(this.player_, { track: this.track_, cue: cue });\n\n      items.push(mi);\n    }\n\n    return items;\n  };\n\n  return ChaptersButton;\n}(TextTrackButton);\n\n/**\n * `kind` of TextTrack to look for to associate it with this menu.\n *\n * @type {string}\n * @private\n */\n\n\nChaptersButton.prototype.kind_ = 'chapters';\n\n/**\n * The text that should display over the `ChaptersButton`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\nChaptersButton.prototype.controlText_ = 'Chapters';\n\nComponent.registerComponent('ChaptersButton', ChaptersButton);\n\n/**\n * @file descriptions-button.js\n */\n\n/**\n * The button component for toggling and selecting descriptions\n *\n * @extends TextTrackButton\n */\n\nvar DescriptionsButton = function (_TextTrackButton) {\n  inherits(DescriptionsButton, _TextTrackButton);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        The function to call when this component is ready.\n   */\n  function DescriptionsButton(player, options, ready) {\n    classCallCheck(this, DescriptionsButton);\n\n    var _this = possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));\n\n    var tracks = player.textTracks();\n    var changeHandler = bind(_this, _this.handleTracksChange);\n\n    tracks.addEventListener('change', changeHandler);\n    _this.on('dispose', function () {\n      tracks.removeEventListener('change', changeHandler);\n    });\n    return _this;\n  }\n\n  /**\n   * Handle text track change\n   *\n   * @param {EventTarget~Event} event\n   *        The event that caused this function to run\n   *\n   * @listens TextTrackList#change\n   */\n\n\n  DescriptionsButton.prototype.handleTracksChange = function handleTracksChange(event) {\n    var tracks = this.player().textTracks();\n    var disabled = false;\n\n    // Check whether a track of a different kind is showing\n    for (var i = 0, l = tracks.length; i < l; i++) {\n      var track = tracks[i];\n\n      if (track.kind !== this.kind_ && track.mode === 'showing') {\n        disabled = true;\n        break;\n      }\n    }\n\n    // If another track is showing, disable this menu button\n    if (disabled) {\n      this.disable();\n    } else {\n      this.enable();\n    }\n  };\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  DescriptionsButton.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-descriptions-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);\n  };\n\n  DescriptionsButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {\n    return 'vjs-descriptions-button ' + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);\n  };\n\n  return DescriptionsButton;\n}(TextTrackButton);\n\n/**\n * `kind` of TextTrack to look for to associate it with this menu.\n *\n * @type {string}\n * @private\n */\n\n\nDescriptionsButton.prototype.kind_ = 'descriptions';\n\n/**\n * The text that should display over the `DescriptionsButton`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\nDescriptionsButton.prototype.controlText_ = 'Descriptions';\n\nComponent.registerComponent('DescriptionsButton', DescriptionsButton);\n\n/**\n * @file subtitles-button.js\n */\n\n/**\n * The button component for toggling and selecting subtitles\n *\n * @extends TextTrackButton\n */\n\nvar SubtitlesButton = function (_TextTrackButton) {\n  inherits(SubtitlesButton, _TextTrackButton);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        The function to call when this component is ready.\n   */\n  function SubtitlesButton(player, options, ready) {\n    classCallCheck(this, SubtitlesButton);\n    return possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  SubtitlesButton.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-subtitles-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);\n  };\n\n  SubtitlesButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {\n    return 'vjs-subtitles-button ' + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);\n  };\n\n  return SubtitlesButton;\n}(TextTrackButton);\n\n/**\n * `kind` of TextTrack to look for to associate it with this menu.\n *\n * @type {string}\n * @private\n */\n\n\nSubtitlesButton.prototype.kind_ = 'subtitles';\n\n/**\n * The text that should display over the `SubtitlesButton`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\nSubtitlesButton.prototype.controlText_ = 'Subtitles';\n\nComponent.registerComponent('SubtitlesButton', SubtitlesButton);\n\n/**\n * @file caption-settings-menu-item.js\n */\n\n/**\n * The menu item for caption track settings menu\n *\n * @extends TextTrackMenuItem\n */\n\nvar CaptionSettingsMenuItem = function (_TextTrackMenuItem) {\n  inherits(CaptionSettingsMenuItem, _TextTrackMenuItem);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function CaptionSettingsMenuItem(player, options) {\n    classCallCheck(this, CaptionSettingsMenuItem);\n\n    options.track = {\n      player: player,\n      kind: options.kind,\n      label: options.kind + ' settings',\n      selectable: false,\n      default: false,\n      mode: 'disabled'\n    };\n\n    // CaptionSettingsMenuItem has no concept of 'selected'\n    options.selectable = false;\n\n    options.name = 'CaptionSettingsMenuItem';\n\n    var _this = possibleConstructorReturn(this, _TextTrackMenuItem.call(this, player, options));\n\n    _this.addClass('vjs-texttrack-settings');\n    _this.controlText(', opens ' + options.kind + ' settings dialog');\n    return _this;\n  }\n\n  /**\n   * This gets called when an `CaptionSettingsMenuItem` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n\n\n  CaptionSettingsMenuItem.prototype.handleClick = function handleClick(event) {\n    this.player().getChild('textTrackSettings').open();\n  };\n\n  return CaptionSettingsMenuItem;\n}(TextTrackMenuItem);\n\nComponent.registerComponent('CaptionSettingsMenuItem', CaptionSettingsMenuItem);\n\n/**\n * @file captions-button.js\n */\n\n/**\n * The button component for toggling and selecting captions\n *\n * @extends TextTrackButton\n */\n\nvar CaptionsButton = function (_TextTrackButton) {\n  inherits(CaptionsButton, _TextTrackButton);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        The function to call when this component is ready.\n   */\n  function CaptionsButton(player, options, ready) {\n    classCallCheck(this, CaptionsButton);\n    return possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  CaptionsButton.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-captions-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);\n  };\n\n  CaptionsButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {\n    return 'vjs-captions-button ' + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);\n  };\n\n  /**\n   * Create caption menu items\n   *\n   * @return {CaptionSettingsMenuItem[]}\n   *         The array of current menu items.\n   */\n\n\n  CaptionsButton.prototype.createItems = function createItems() {\n    var items = [];\n\n    if (!(this.player().tech_ && this.player().tech_.featuresNativeTextTracks) && this.player().getChild('textTrackSettings')) {\n      items.push(new CaptionSettingsMenuItem(this.player_, { kind: this.kind_ }));\n\n      this.hideThreshold_ += 1;\n    }\n\n    return _TextTrackButton.prototype.createItems.call(this, items);\n  };\n\n  return CaptionsButton;\n}(TextTrackButton);\n\n/**\n * `kind` of TextTrack to look for to associate it with this menu.\n *\n * @type {string}\n * @private\n */\n\n\nCaptionsButton.prototype.kind_ = 'captions';\n\n/**\n * The text that should display over the `CaptionsButton`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\nCaptionsButton.prototype.controlText_ = 'Captions';\n\nComponent.registerComponent('CaptionsButton', CaptionsButton);\n\n/**\n * @file subs-caps-menu-item.js\n */\n\n/**\n * SubsCapsMenuItem has an [cc] icon to distinguish captions from subtitles\n * in the SubsCapsMenu.\n *\n * @extends TextTrackMenuItem\n */\n\nvar SubsCapsMenuItem = function (_TextTrackMenuItem) {\n  inherits(SubsCapsMenuItem, _TextTrackMenuItem);\n\n  function SubsCapsMenuItem() {\n    classCallCheck(this, SubsCapsMenuItem);\n    return possibleConstructorReturn(this, _TextTrackMenuItem.apply(this, arguments));\n  }\n\n  SubsCapsMenuItem.prototype.createEl = function createEl(type, props, attrs) {\n    var innerHTML = '<span class=\"vjs-menu-item-text\">' + this.localize(this.options_.label);\n\n    if (this.options_.track.kind === 'captions') {\n      innerHTML += '\\n        <span aria-hidden=\"true\" class=\"vjs-icon-placeholder\"></span>\\n        <span class=\"vjs-control-text\"> ' + this.localize('Captions') + '</span>\\n      ';\n    }\n\n    innerHTML += '</span>';\n\n    var el = _TextTrackMenuItem.prototype.createEl.call(this, type, assign({\n      innerHTML: innerHTML\n    }, props), attrs);\n\n    return el;\n  };\n\n  return SubsCapsMenuItem;\n}(TextTrackMenuItem);\n\nComponent.registerComponent('SubsCapsMenuItem', SubsCapsMenuItem);\n\n/**\n * @file sub-caps-button.js\n */\n/**\n * The button component for toggling and selecting captions and/or subtitles\n *\n * @extends TextTrackButton\n */\n\nvar SubsCapsButton = function (_TextTrackButton) {\n  inherits(SubsCapsButton, _TextTrackButton);\n\n  function SubsCapsButton(player) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    classCallCheck(this, SubsCapsButton);\n\n    // Although North America uses \"captions\" in most cases for\n    // \"captions and subtitles\" other locales use \"subtitles\"\n    var _this = possibleConstructorReturn(this, _TextTrackButton.call(this, player, options));\n\n    _this.label_ = 'subtitles';\n    if (['en', 'en-us', 'en-ca', 'fr-ca'].indexOf(_this.player_.language_) > -1) {\n      _this.label_ = 'captions';\n    }\n    _this.menuButton_.controlText(toTitleCase(_this.label_));\n    return _this;\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  SubsCapsButton.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-subs-caps-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);\n  };\n\n  SubsCapsButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {\n    return 'vjs-subs-caps-button ' + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);\n  };\n\n  /**\n   * Create caption/subtitles menu items\n   *\n   * @return {CaptionSettingsMenuItem[]}\n   *         The array of current menu items.\n   */\n\n\n  SubsCapsButton.prototype.createItems = function createItems() {\n    var items = [];\n\n    if (!(this.player().tech_ && this.player().tech_.featuresNativeTextTracks) && this.player().getChild('textTrackSettings')) {\n      items.push(new CaptionSettingsMenuItem(this.player_, { kind: this.label_ }));\n\n      this.hideThreshold_ += 1;\n    }\n\n    items = _TextTrackButton.prototype.createItems.call(this, items, SubsCapsMenuItem);\n    return items;\n  };\n\n  return SubsCapsButton;\n}(TextTrackButton);\n\n/**\n * `kind`s of TextTrack to look for to associate it with this menu.\n *\n * @type {array}\n * @private\n */\n\n\nSubsCapsButton.prototype.kinds_ = ['captions', 'subtitles'];\n\n/**\n * The text that should display over the `SubsCapsButton`s controls.\n *\n *\n * @type {string}\n * @private\n */\nSubsCapsButton.prototype.controlText_ = 'Subtitles';\n\nComponent.registerComponent('SubsCapsButton', SubsCapsButton);\n\n/**\n * @file audio-track-menu-item.js\n */\n\n/**\n * An {@link AudioTrack} {@link MenuItem}\n *\n * @extends MenuItem\n */\n\nvar AudioTrackMenuItem = function (_MenuItem) {\n  inherits(AudioTrackMenuItem, _MenuItem);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function AudioTrackMenuItem(player, options) {\n    classCallCheck(this, AudioTrackMenuItem);\n\n    var track = options.track;\n    var tracks = player.audioTracks();\n\n    // Modify options for parent MenuItem class's init.\n    options.label = track.label || track.language || 'Unknown';\n    options.selected = track.enabled;\n\n    var _this = possibleConstructorReturn(this, _MenuItem.call(this, player, options));\n\n    _this.track = track;\n\n    _this.addClass('vjs-' + track.kind + '-menu-item');\n\n    var changeHandler = function changeHandler() {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this.handleTracksChange.apply(_this, args);\n    };\n\n    tracks.addEventListener('change', changeHandler);\n    _this.on('dispose', function () {\n      tracks.removeEventListener('change', changeHandler);\n    });\n    return _this;\n  }\n\n  AudioTrackMenuItem.prototype.createEl = function createEl(type, props, attrs) {\n    var innerHTML = '<span class=\"vjs-menu-item-text\">' + this.localize(this.options_.label);\n\n    if (this.options_.track.kind === 'main-desc') {\n      innerHTML += '\\n        <span aria-hidden=\"true\" class=\"vjs-icon-placeholder\"></span>\\n        <span class=\"vjs-control-text\"> ' + this.localize('Descriptions') + '</span>\\n      ';\n    }\n\n    innerHTML += '</span>';\n\n    var el = _MenuItem.prototype.createEl.call(this, type, assign({\n      innerHTML: innerHTML\n    }, props), attrs);\n\n    return el;\n  };\n\n  /**\n   * This gets called when an `AudioTrackMenuItem is \"clicked\". See {@link ClickableComponent}\n   * for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n\n\n  AudioTrackMenuItem.prototype.handleClick = function handleClick(event) {\n    var tracks = this.player_.audioTracks();\n\n    _MenuItem.prototype.handleClick.call(this, event);\n\n    for (var i = 0; i < tracks.length; i++) {\n      var track = tracks[i];\n\n      track.enabled = track === this.track;\n    }\n  };\n\n  /**\n   * Handle any {@link AudioTrack} change.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The {@link AudioTrackList#change} event that caused this to run.\n   *\n   * @listens AudioTrackList#change\n   */\n\n\n  AudioTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {\n    this.selected(this.track.enabled);\n  };\n\n  return AudioTrackMenuItem;\n}(MenuItem);\n\nComponent.registerComponent('AudioTrackMenuItem', AudioTrackMenuItem);\n\n/**\n * @file audio-track-button.js\n */\n\n/**\n * The base class for buttons that toggle specific {@link AudioTrack} types.\n *\n * @extends TrackButton\n */\n\nvar AudioTrackButton = function (_TrackButton) {\n  inherits(AudioTrackButton, _TrackButton);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   */\n  function AudioTrackButton(player) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    classCallCheck(this, AudioTrackButton);\n\n    options.tracks = player.audioTracks();\n\n    return possibleConstructorReturn(this, _TrackButton.call(this, player, options));\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  AudioTrackButton.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-audio-button ' + _TrackButton.prototype.buildCSSClass.call(this);\n  };\n\n  AudioTrackButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {\n    return 'vjs-audio-button ' + _TrackButton.prototype.buildWrapperCSSClass.call(this);\n  };\n\n  /**\n   * Create a menu item for each audio track\n   *\n   * @param {AudioTrackMenuItem[]} [items=[]]\n   *        An array of existing menu items to use.\n   *\n   * @return {AudioTrackMenuItem[]}\n   *         An array of menu items\n   */\n\n\n  AudioTrackButton.prototype.createItems = function createItems() {\n    var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n    // if there's only one audio track, there no point in showing it\n    this.hideThreshold_ = 1;\n\n    var tracks = this.player_.audioTracks();\n\n    for (var i = 0; i < tracks.length; i++) {\n      var track = tracks[i];\n\n      items.push(new AudioTrackMenuItem(this.player_, {\n        track: track,\n        // MenuItem is selectable\n        selectable: true,\n        // MenuItem is NOT multiSelectable (i.e. only one can be marked \"selected\" at a time)\n        multiSelectable: false\n      }));\n    }\n\n    return items;\n  };\n\n  return AudioTrackButton;\n}(TrackButton);\n\n/**\n * The text that should display over the `AudioTrackButton`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\n\n\nAudioTrackButton.prototype.controlText_ = 'Audio Track';\nComponent.registerComponent('AudioTrackButton', AudioTrackButton);\n\n/**\n * @file playback-rate-menu-item.js\n */\n\n/**\n * The specific menu item type for selecting a playback rate.\n *\n * @extends MenuItem\n */\n\nvar PlaybackRateMenuItem = function (_MenuItem) {\n  inherits(PlaybackRateMenuItem, _MenuItem);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function PlaybackRateMenuItem(player, options) {\n    classCallCheck(this, PlaybackRateMenuItem);\n\n    var label = options.rate;\n    var rate = parseFloat(label, 10);\n\n    // Modify options for parent MenuItem class's init.\n    options.label = label;\n    options.selected = rate === 1;\n    options.selectable = true;\n    options.multiSelectable = false;\n\n    var _this = possibleConstructorReturn(this, _MenuItem.call(this, player, options));\n\n    _this.label = label;\n    _this.rate = rate;\n\n    _this.on(player, 'ratechange', _this.update);\n    return _this;\n  }\n\n  /**\n   * This gets called when an `PlaybackRateMenuItem` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n\n\n  PlaybackRateMenuItem.prototype.handleClick = function handleClick(event) {\n    _MenuItem.prototype.handleClick.call(this);\n    this.player().playbackRate(this.rate);\n  };\n\n  /**\n   * Update the PlaybackRateMenuItem when the playbackrate changes.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `ratechange` event that caused this function to run.\n   *\n   * @listens Player#ratechange\n   */\n\n\n  PlaybackRateMenuItem.prototype.update = function update(event) {\n    this.selected(this.player().playbackRate() === this.rate);\n  };\n\n  return PlaybackRateMenuItem;\n}(MenuItem);\n\n/**\n * The text that should display over the `PlaybackRateMenuItem`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\n\n\nPlaybackRateMenuItem.prototype.contentElType = 'button';\n\nComponent.registerComponent('PlaybackRateMenuItem', PlaybackRateMenuItem);\n\n/**\n * @file playback-rate-menu-button.js\n */\n\n/**\n * The component for controlling the playback rate.\n *\n * @extends MenuButton\n */\n\nvar PlaybackRateMenuButton = function (_MenuButton) {\n  inherits(PlaybackRateMenuButton, _MenuButton);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function PlaybackRateMenuButton(player, options) {\n    classCallCheck(this, PlaybackRateMenuButton);\n\n    var _this = possibleConstructorReturn(this, _MenuButton.call(this, player, options));\n\n    _this.updateVisibility();\n    _this.updateLabel();\n\n    _this.on(player, 'loadstart', _this.updateVisibility);\n    _this.on(player, 'ratechange', _this.updateLabel);\n    return _this;\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  PlaybackRateMenuButton.prototype.createEl = function createEl$$1() {\n    var el = _MenuButton.prototype.createEl.call(this);\n\n    this.labelEl_ = createEl('div', {\n      className: 'vjs-playback-rate-value',\n      innerHTML: '1x'\n    });\n\n    el.appendChild(this.labelEl_);\n\n    return el;\n  };\n\n  PlaybackRateMenuButton.prototype.dispose = function dispose() {\n    this.labelEl_ = null;\n\n    _MenuButton.prototype.dispose.call(this);\n  };\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  PlaybackRateMenuButton.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-playback-rate ' + _MenuButton.prototype.buildCSSClass.call(this);\n  };\n\n  PlaybackRateMenuButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {\n    return 'vjs-playback-rate ' + _MenuButton.prototype.buildWrapperCSSClass.call(this);\n  };\n\n  /**\n   * Create the playback rate menu\n   *\n   * @return {Menu}\n   *         Menu object populated with {@link PlaybackRateMenuItem}s\n   */\n\n\n  PlaybackRateMenuButton.prototype.createMenu = function createMenu() {\n    var menu = new Menu(this.player());\n    var rates = this.playbackRates();\n\n    if (rates) {\n      for (var i = rates.length - 1; i >= 0; i--) {\n        menu.addChild(new PlaybackRateMenuItem(this.player(), { rate: rates[i] + 'x' }));\n      }\n    }\n\n    return menu;\n  };\n\n  /**\n   * Updates ARIA accessibility attributes\n   */\n\n\n  PlaybackRateMenuButton.prototype.updateARIAAttributes = function updateARIAAttributes() {\n    // Current playback rate\n    this.el().setAttribute('aria-valuenow', this.player().playbackRate());\n  };\n\n  /**\n   * This gets called when an `PlaybackRateMenuButton` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n\n\n  PlaybackRateMenuButton.prototype.handleClick = function handleClick(event) {\n    // select next rate option\n    var currentRate = this.player().playbackRate();\n    var rates = this.playbackRates();\n\n    // this will select first one if the last one currently selected\n    var newRate = rates[0];\n\n    for (var i = 0; i < rates.length; i++) {\n      if (rates[i] > currentRate) {\n        newRate = rates[i];\n        break;\n      }\n    }\n    this.player().playbackRate(newRate);\n  };\n\n  /**\n   * Get possible playback rates\n   *\n   * @return {Array}\n   *         All possible playback rates\n   */\n\n\n  PlaybackRateMenuButton.prototype.playbackRates = function playbackRates() {\n    return this.options_.playbackRates || this.options_.playerOptions && this.options_.playerOptions.playbackRates;\n  };\n\n  /**\n   * Get whether playback rates is supported by the tech\n   * and an array of playback rates exists\n   *\n   * @return {boolean}\n   *         Whether changing playback rate is supported\n   */\n\n\n  PlaybackRateMenuButton.prototype.playbackRateSupported = function playbackRateSupported() {\n    return this.player().tech_ && this.player().tech_.featuresPlaybackRate && this.playbackRates() && this.playbackRates().length > 0;\n  };\n\n  /**\n   * Hide playback rate controls when they're no playback rate options to select\n   *\n   * @param {EventTarget~Event} [event]\n   *        The event that caused this function to run.\n   *\n   * @listens Player#loadstart\n   */\n\n\n  PlaybackRateMenuButton.prototype.updateVisibility = function updateVisibility(event) {\n    if (this.playbackRateSupported()) {\n      this.removeClass('vjs-hidden');\n    } else {\n      this.addClass('vjs-hidden');\n    }\n  };\n\n  /**\n   * Update button label when rate changed\n   *\n   * @param {EventTarget~Event} [event]\n   *        The event that caused this function to run.\n   *\n   * @listens Player#ratechange\n   */\n\n\n  PlaybackRateMenuButton.prototype.updateLabel = function updateLabel(event) {\n    if (this.playbackRateSupported()) {\n      this.labelEl_.innerHTML = this.player().playbackRate() + 'x';\n    }\n  };\n\n  return PlaybackRateMenuButton;\n}(MenuButton);\n\n/**\n * The text that should display over the `FullscreenToggle`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\n\n\nPlaybackRateMenuButton.prototype.controlText_ = 'Playback Rate';\n\nComponent.registerComponent('PlaybackRateMenuButton', PlaybackRateMenuButton);\n\n/**\n * @file spacer.js\n */\n\n/**\n * Just an empty spacer element that can be used as an append point for plugins, etc.\n * Also can be used to create space between elements when necessary.\n *\n * @extends Component\n */\n\nvar Spacer = function (_Component) {\n  inherits(Spacer, _Component);\n\n  function Spacer() {\n    classCallCheck(this, Spacer);\n    return possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  Spacer.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-spacer ' + _Component.prototype.buildCSSClass.call(this);\n  };\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  Spacer.prototype.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: this.buildCSSClass()\n    });\n  };\n\n  return Spacer;\n}(Component);\n\nComponent.registerComponent('Spacer', Spacer);\n\n/**\n * @file custom-control-spacer.js\n */\n\n/**\n * Spacer specifically meant to be used as an insertion point for new plugins, etc.\n *\n * @extends Spacer\n */\n\nvar CustomControlSpacer = function (_Spacer) {\n  inherits(CustomControlSpacer, _Spacer);\n\n  function CustomControlSpacer() {\n    classCallCheck(this, CustomControlSpacer);\n    return possibleConstructorReturn(this, _Spacer.apply(this, arguments));\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  CustomControlSpacer.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-custom-control-spacer ' + _Spacer.prototype.buildCSSClass.call(this);\n  };\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  CustomControlSpacer.prototype.createEl = function createEl() {\n    var el = _Spacer.prototype.createEl.call(this, {\n      className: this.buildCSSClass()\n    });\n\n    // No-flex/table-cell mode requires there be some content\n    // in the cell to fill the remaining space of the table.\n    el.innerHTML = '\\xA0';\n    return el;\n  };\n\n  return CustomControlSpacer;\n}(Spacer);\n\nComponent.registerComponent('CustomControlSpacer', CustomControlSpacer);\n\n/**\n * @file control-bar.js\n */\n\n/**\n * Container of main controls.\n *\n * @extends Component\n */\n\nvar ControlBar = function (_Component) {\n  inherits(ControlBar, _Component);\n\n  function ControlBar() {\n    classCallCheck(this, ControlBar);\n    return possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  ControlBar.prototype.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-control-bar',\n      dir: 'ltr'\n    });\n  };\n\n  return ControlBar;\n}(Component);\n\n/**\n * Default options for `ControlBar`\n *\n * @type {Object}\n * @private\n */\n\n\nControlBar.prototype.options_ = {\n  children: ['playToggle', 'volumePanel', 'currentTimeDisplay', 'timeDivider', 'durationDisplay', 'progressControl', 'liveDisplay', 'remainingTimeDisplay', 'customControlSpacer', 'playbackRateMenuButton', 'chaptersButton', 'descriptionsButton', 'subsCapsButton', 'audioTrackButton', 'fullscreenToggle']\n};\n\nComponent.registerComponent('ControlBar', ControlBar);\n\n/**\n * @file error-display.js\n */\n\n/**\n * A display that indicates an error has occurred. This means that the video\n * is unplayable.\n *\n * @extends ModalDialog\n */\n\nvar ErrorDisplay = function (_ModalDialog) {\n  inherits(ErrorDisplay, _ModalDialog);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param  {Player} player\n   *         The `Player` that this class should be attached to.\n   *\n   * @param  {Object} [options]\n   *         The key/value store of player options.\n   */\n  function ErrorDisplay(player, options) {\n    classCallCheck(this, ErrorDisplay);\n\n    var _this = possibleConstructorReturn(this, _ModalDialog.call(this, player, options));\n\n    _this.on(player, 'error', _this.open);\n    return _this;\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   *\n   * @deprecated Since version 5.\n   */\n\n\n  ErrorDisplay.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-error-display ' + _ModalDialog.prototype.buildCSSClass.call(this);\n  };\n\n  /**\n   * Gets the localized error message based on the `Player`s error.\n   *\n   * @return {string}\n   *         The `Player`s error message localized or an empty string.\n   */\n\n\n  ErrorDisplay.prototype.content = function content() {\n    var error = this.player().error();\n\n    return error ? this.localize(error.message) : '';\n  };\n\n  return ErrorDisplay;\n}(ModalDialog);\n\n/**\n * The default options for an `ErrorDisplay`.\n *\n * @private\n */\n\n\nErrorDisplay.prototype.options_ = mergeOptions(ModalDialog.prototype.options_, {\n  pauseOnOpen: false,\n  fillAlways: true,\n  temporary: false,\n  uncloseable: true\n});\n\nComponent.registerComponent('ErrorDisplay', ErrorDisplay);\n\n/**\n * @file text-track-settings.js\n */\n\nvar LOCAL_STORAGE_KEY = 'vjs-text-track-settings';\n\nvar COLOR_BLACK = ['#000', 'Black'];\nvar COLOR_BLUE = ['#00F', 'Blue'];\nvar COLOR_CYAN = ['#0FF', 'Cyan'];\nvar COLOR_GREEN = ['#0F0', 'Green'];\nvar COLOR_MAGENTA = ['#F0F', 'Magenta'];\nvar COLOR_RED = ['#F00', 'Red'];\nvar COLOR_WHITE = ['#FFF', 'White'];\nvar COLOR_YELLOW = ['#FF0', 'Yellow'];\n\nvar OPACITY_OPAQUE = ['1', 'Opaque'];\nvar OPACITY_SEMI = ['0.5', 'Semi-Transparent'];\nvar OPACITY_TRANS = ['0', 'Transparent'];\n\n// Configuration for the various <select> elements in the DOM of this component.\n//\n// Possible keys include:\n//\n// `default`:\n//   The default option index. Only needs to be provided if not zero.\n// `parser`:\n//   A function which is used to parse the value from the selected option in\n//   a customized way.\n// `selector`:\n//   The selector used to find the associated <select> element.\nvar selectConfigs = {\n  backgroundColor: {\n    selector: '.vjs-bg-color > select',\n    id: 'captions-background-color-%s',\n    label: 'Color',\n    options: [COLOR_BLACK, COLOR_WHITE, COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW, COLOR_MAGENTA, COLOR_CYAN]\n  },\n\n  backgroundOpacity: {\n    selector: '.vjs-bg-opacity > select',\n    id: 'captions-background-opacity-%s',\n    label: 'Transparency',\n    options: [OPACITY_OPAQUE, OPACITY_SEMI, OPACITY_TRANS]\n  },\n\n  color: {\n    selector: '.vjs-fg-color > select',\n    id: 'captions-foreground-color-%s',\n    label: 'Color',\n    options: [COLOR_WHITE, COLOR_BLACK, COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW, COLOR_MAGENTA, COLOR_CYAN]\n  },\n\n  edgeStyle: {\n    selector: '.vjs-edge-style > select',\n    id: '%s',\n    label: 'Text Edge Style',\n    options: [['none', 'None'], ['raised', 'Raised'], ['depressed', 'Depressed'], ['uniform', 'Uniform'], ['dropshadow', 'Dropshadow']]\n  },\n\n  fontFamily: {\n    selector: '.vjs-font-family > select',\n    id: 'captions-font-family-%s',\n    label: 'Font Family',\n    options: [['proportionalSansSerif', 'Proportional Sans-Serif'], ['monospaceSansSerif', 'Monospace Sans-Serif'], ['proportionalSerif', 'Proportional Serif'], ['monospaceSerif', 'Monospace Serif'], ['casual', 'Casual'], ['script', 'Script'], ['small-caps', 'Small Caps']]\n  },\n\n  fontPercent: {\n    selector: '.vjs-font-percent > select',\n    id: 'captions-font-size-%s',\n    label: 'Font Size',\n    options: [['0.50', '50%'], ['0.75', '75%'], ['1.00', '100%'], ['1.25', '125%'], ['1.50', '150%'], ['1.75', '175%'], ['2.00', '200%'], ['3.00', '300%'], ['4.00', '400%']],\n    default: 2,\n    parser: function parser(v) {\n      return v === '1.00' ? null : Number(v);\n    }\n  },\n\n  textOpacity: {\n    selector: '.vjs-text-opacity > select',\n    id: 'captions-foreground-opacity-%s',\n    label: 'Transparency',\n    options: [OPACITY_OPAQUE, OPACITY_SEMI]\n  },\n\n  // Options for this object are defined below.\n  windowColor: {\n    selector: '.vjs-window-color > select',\n    id: 'captions-window-color-%s',\n    label: 'Color'\n  },\n\n  // Options for this object are defined below.\n  windowOpacity: {\n    selector: '.vjs-window-opacity > select',\n    id: 'captions-window-opacity-%s',\n    label: 'Transparency',\n    options: [OPACITY_TRANS, OPACITY_SEMI, OPACITY_OPAQUE]\n  }\n};\n\nselectConfigs.windowColor.options = selectConfigs.backgroundColor.options;\n\n/**\n * Get the actual value of an option.\n *\n * @param  {string} value\n *         The value to get\n *\n * @param  {Function} [parser]\n *         Optional function to adjust the value.\n *\n * @return {Mixed}\n *         - Will be `undefined` if no value exists\n *         - Will be `undefined` if the given value is \"none\".\n *         - Will be the actual value otherwise.\n *\n * @private\n */\nfunction parseOptionValue(value, parser) {\n  if (parser) {\n    value = parser(value);\n  }\n\n  if (value && value !== 'none') {\n    return value;\n  }\n}\n\n/**\n * Gets the value of the selected <option> element within a <select> element.\n *\n * @param  {Element} el\n *         the element to look in\n *\n * @param  {Function} [parser]\n *         Optional function to adjust the value.\n *\n * @return {Mixed}\n *         - Will be `undefined` if no value exists\n *         - Will be `undefined` if the given value is \"none\".\n *         - Will be the actual value otherwise.\n *\n * @private\n */\nfunction getSelectedOptionValue(el, parser) {\n  var value = el.options[el.options.selectedIndex].value;\n\n  return parseOptionValue(value, parser);\n}\n\n/**\n * Sets the selected <option> element within a <select> element based on a\n * given value.\n *\n * @param {Element} el\n *        The element to look in.\n *\n * @param {string} value\n *        the property to look on.\n *\n * @param {Function} [parser]\n *        Optional function to adjust the value before comparing.\n *\n * @private\n */\nfunction setSelectedOption(el, value, parser) {\n  if (!value) {\n    return;\n  }\n\n  for (var i = 0; i < el.options.length; i++) {\n    if (parseOptionValue(el.options[i].value, parser) === value) {\n      el.selectedIndex = i;\n      break;\n    }\n  }\n}\n\n/**\n * Manipulate Text Tracks settings.\n *\n * @extends ModalDialog\n */\n\nvar TextTrackSettings = function (_ModalDialog) {\n  inherits(TextTrackSettings, _ModalDialog);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *         The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *         The key/value store of player options.\n   */\n  function TextTrackSettings(player, options) {\n    classCallCheck(this, TextTrackSettings);\n\n    options.temporary = false;\n\n    var _this = possibleConstructorReturn(this, _ModalDialog.call(this, player, options));\n\n    _this.updateDisplay = bind(_this, _this.updateDisplay);\n\n    // fill the modal and pretend we have opened it\n    _this.fill();\n    _this.hasBeenOpened_ = _this.hasBeenFilled_ = true;\n\n    _this.endDialog = createEl('p', {\n      className: 'vjs-control-text',\n      textContent: _this.localize('End of dialog window.')\n    });\n    _this.el().appendChild(_this.endDialog);\n\n    _this.setDefaults();\n\n    // Grab `persistTextTrackSettings` from the player options if not passed in child options\n    if (options.persistTextTrackSettings === undefined) {\n      _this.options_.persistTextTrackSettings = _this.options_.playerOptions.persistTextTrackSettings;\n    }\n\n    _this.on(_this.$('.vjs-done-button'), 'click', function () {\n      _this.saveSettings();\n      _this.close();\n    });\n\n    _this.on(_this.$('.vjs-default-button'), 'click', function () {\n      _this.setDefaults();\n      _this.updateDisplay();\n    });\n\n    each(selectConfigs, function (config) {\n      _this.on(_this.$(config.selector), 'change', _this.updateDisplay);\n    });\n\n    if (_this.options_.persistTextTrackSettings) {\n      _this.restoreSettings();\n    }\n    return _this;\n  }\n\n  TextTrackSettings.prototype.dispose = function dispose() {\n    this.endDialog = null;\n\n    _ModalDialog.prototype.dispose.call(this);\n  };\n\n  /**\n   * Create a <select> element with configured options.\n   *\n   * @param {string} key\n   *        Configuration key to use during creation.\n   *\n   * @return {string}\n   *         An HTML string.\n   *\n   * @private\n   */\n\n\n  TextTrackSettings.prototype.createElSelect_ = function createElSelect_(key) {\n    var _this2 = this;\n\n    var legendId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'label';\n\n    var config = selectConfigs[key];\n    var id = config.id.replace('%s', this.id_);\n    var selectLabelledbyIds = [legendId, id].join(' ').trim();\n\n    return ['<' + type + ' id=\"' + id + '\" class=\"' + (type === 'label' ? 'vjs-label' : '') + '\">', this.localize(config.label), '</' + type + '>', '<select aria-labelledby=\"' + selectLabelledbyIds + '\">'].concat(config.options.map(function (o) {\n      var optionId = id + '-' + o[1].replace(/\\W+/g, '');\n\n      return ['<option id=\"' + optionId + '\" value=\"' + o[0] + '\" ', 'aria-labelledby=\"' + selectLabelledbyIds + ' ' + optionId + '\">', _this2.localize(o[1]), '</option>'].join('');\n    })).concat('</select>').join('');\n  };\n\n  /**\n   * Create foreground color element for the component\n   *\n   * @return {string}\n   *         An HTML string.\n   *\n   * @private\n   */\n\n\n  TextTrackSettings.prototype.createElFgColor_ = function createElFgColor_() {\n    var legendId = 'captions-text-legend-' + this.id_;\n\n    return ['<fieldset class=\"vjs-fg-color vjs-track-setting\">', '<legend id=\"' + legendId + '\">', this.localize('Text'), '</legend>', this.createElSelect_('color', legendId), '<span class=\"vjs-text-opacity vjs-opacity\">', this.createElSelect_('textOpacity', legendId), '</span>', '</fieldset>'].join('');\n  };\n\n  /**\n   * Create background color element for the component\n   *\n   * @return {string}\n   *         An HTML string.\n   *\n   * @private\n   */\n\n\n  TextTrackSettings.prototype.createElBgColor_ = function createElBgColor_() {\n    var legendId = 'captions-background-' + this.id_;\n\n    return ['<fieldset class=\"vjs-bg-color vjs-track-setting\">', '<legend id=\"' + legendId + '\">', this.localize('Background'), '</legend>', this.createElSelect_('backgroundColor', legendId), '<span class=\"vjs-bg-opacity vjs-opacity\">', this.createElSelect_('backgroundOpacity', legendId), '</span>', '</fieldset>'].join('');\n  };\n\n  /**\n   * Create window color element for the component\n   *\n   * @return {string}\n   *         An HTML string.\n   *\n   * @private\n   */\n\n\n  TextTrackSettings.prototype.createElWinColor_ = function createElWinColor_() {\n    var legendId = 'captions-window-' + this.id_;\n\n    return ['<fieldset class=\"vjs-window-color vjs-track-setting\">', '<legend id=\"' + legendId + '\">', this.localize('Window'), '</legend>', this.createElSelect_('windowColor', legendId), '<span class=\"vjs-window-opacity vjs-opacity\">', this.createElSelect_('windowOpacity', legendId), '</span>', '</fieldset>'].join('');\n  };\n\n  /**\n   * Create color elements for the component\n   *\n   * @return {Element}\n   *         The element that was created\n   *\n   * @private\n   */\n\n\n  TextTrackSettings.prototype.createElColors_ = function createElColors_() {\n    return createEl('div', {\n      className: 'vjs-track-settings-colors',\n      innerHTML: [this.createElFgColor_(), this.createElBgColor_(), this.createElWinColor_()].join('')\n    });\n  };\n\n  /**\n   * Create font elements for the component\n   *\n   * @return {Element}\n   *         The element that was created.\n   *\n   * @private\n   */\n\n\n  TextTrackSettings.prototype.createElFont_ = function createElFont_() {\n    return createEl('div', {\n      className: 'vjs-track-settings-font',\n      innerHTML: ['<fieldset class=\"vjs-font-percent vjs-track-setting\">', this.createElSelect_('fontPercent', '', 'legend'), '</fieldset>', '<fieldset class=\"vjs-edge-style vjs-track-setting\">', this.createElSelect_('edgeStyle', '', 'legend'), '</fieldset>', '<fieldset class=\"vjs-font-family vjs-track-setting\">', this.createElSelect_('fontFamily', '', 'legend'), '</fieldset>'].join('')\n    });\n  };\n\n  /**\n   * Create controls for the component\n   *\n   * @return {Element}\n   *         The element that was created.\n   *\n   * @private\n   */\n\n\n  TextTrackSettings.prototype.createElControls_ = function createElControls_() {\n    var defaultsDescription = this.localize('restore all settings to the default values');\n\n    return createEl('div', {\n      className: 'vjs-track-settings-controls',\n      innerHTML: ['<button class=\"vjs-default-button\" title=\"' + defaultsDescription + '\">', this.localize('Reset'), '<span class=\"vjs-control-text\"> ' + defaultsDescription + '</span>', '</button>', '<button class=\"vjs-done-button\">' + this.localize('Done') + '</button>'].join('')\n    });\n  };\n\n  TextTrackSettings.prototype.content = function content() {\n    return [this.createElColors_(), this.createElFont_(), this.createElControls_()];\n  };\n\n  TextTrackSettings.prototype.label = function label() {\n    return this.localize('Caption Settings Dialog');\n  };\n\n  TextTrackSettings.prototype.description = function description() {\n    return this.localize('Beginning of dialog window. Escape will cancel and close the window.');\n  };\n\n  TextTrackSettings.prototype.buildCSSClass = function buildCSSClass() {\n    return _ModalDialog.prototype.buildCSSClass.call(this) + ' vjs-text-track-settings';\n  };\n\n  /**\n   * Gets an object of text track settings (or null).\n   *\n   * @return {Object}\n   *         An object with config values parsed from the DOM or localStorage.\n   */\n\n\n  TextTrackSettings.prototype.getValues = function getValues() {\n    var _this3 = this;\n\n    return reduce(selectConfigs, function (accum, config, key) {\n      var value = getSelectedOptionValue(_this3.$(config.selector), config.parser);\n\n      if (value !== undefined) {\n        accum[key] = value;\n      }\n\n      return accum;\n    }, {});\n  };\n\n  /**\n   * Sets text track settings from an object of values.\n   *\n   * @param {Object} values\n   *        An object with config values parsed from the DOM or localStorage.\n   */\n\n\n  TextTrackSettings.prototype.setValues = function setValues(values) {\n    var _this4 = this;\n\n    each(selectConfigs, function (config, key) {\n      setSelectedOption(_this4.$(config.selector), values[key], config.parser);\n    });\n  };\n\n  /**\n   * Sets all `<select>` elements to their default values.\n   */\n\n\n  TextTrackSettings.prototype.setDefaults = function setDefaults() {\n    var _this5 = this;\n\n    each(selectConfigs, function (config) {\n      var index = config.hasOwnProperty('default') ? config.default : 0;\n\n      _this5.$(config.selector).selectedIndex = index;\n    });\n  };\n\n  /**\n   * Restore texttrack settings from localStorage\n   */\n\n\n  TextTrackSettings.prototype.restoreSettings = function restoreSettings() {\n    var values = void 0;\n\n    try {\n      values = JSON.parse(window$1.localStorage.getItem(LOCAL_STORAGE_KEY));\n    } catch (err) {\n      log$1.warn(err);\n    }\n\n    if (values) {\n      this.setValues(values);\n    }\n  };\n\n  /**\n   * Save text track settings to localStorage\n   */\n\n\n  TextTrackSettings.prototype.saveSettings = function saveSettings() {\n    if (!this.options_.persistTextTrackSettings) {\n      return;\n    }\n\n    var values = this.getValues();\n\n    try {\n      if (Object.keys(values).length) {\n        window$1.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(values));\n      } else {\n        window$1.localStorage.removeItem(LOCAL_STORAGE_KEY);\n      }\n    } catch (err) {\n      log$1.warn(err);\n    }\n  };\n\n  /**\n   * Update display of text track settings\n   */\n\n\n  TextTrackSettings.prototype.updateDisplay = function updateDisplay() {\n    var ttDisplay = this.player_.getChild('textTrackDisplay');\n\n    if (ttDisplay) {\n      ttDisplay.updateDisplay();\n    }\n  };\n\n  /**\n   * conditionally blur the element and refocus the captions button\n   *\n   * @private\n   */\n\n\n  TextTrackSettings.prototype.conditionalBlur_ = function conditionalBlur_() {\n    this.previouslyActiveEl_ = null;\n    this.off(document, 'keydown', this.handleKeyDown);\n\n    var cb = this.player_.controlBar;\n    var subsCapsBtn = cb && cb.subsCapsButton;\n    var ccBtn = cb && cb.captionsButton;\n\n    if (subsCapsBtn) {\n      subsCapsBtn.focus();\n    } else if (ccBtn) {\n      ccBtn.focus();\n    }\n  };\n\n  return TextTrackSettings;\n}(ModalDialog);\n\nComponent.registerComponent('TextTrackSettings', TextTrackSettings);\n\n/**\n * @file resize-manager.js\n */\n\n/**\n * A Resize Manager. It is in charge of triggering `playerresize` on the player in the right conditions.\n *\n * It'll either create an iframe and use a debounced resize handler on it or use the new {@link https://wicg.github.io/ResizeObserver/|ResizeObserver}.\n *\n * If the ResizeObserver is available natively, it will be used. A polyfill can be passed in as an option.\n * If a `playerresize` event is not needed, the ResizeManager component can be removed from the player, see the example below.\n * @example <caption>How to disable the resize manager</caption>\n * const player = videojs('#vid', {\n *   resizeManager: false\n * });\n *\n * @see {@link https://wicg.github.io/ResizeObserver/|ResizeObserver specification}\n *\n * @extends Component\n */\n\nvar ResizeManager = function (_Component) {\n  inherits(ResizeManager, _Component);\n\n  /**\n   * Create the ResizeManager.\n   *\n   * @param {Object} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of ResizeManager options.\n   *\n   * @param {Object} [options.ResizeObserver]\n   *        A polyfill for ResizeObserver can be passed in here.\n   *        If this is set to null it will ignore the native ResizeObserver and fall back to the iframe fallback.\n   */\n  function ResizeManager(player, options) {\n    classCallCheck(this, ResizeManager);\n\n    var RESIZE_OBSERVER_AVAILABLE = options.ResizeObserver || window$1.ResizeObserver;\n\n    // if `null` was passed, we want to disable the ResizeObserver\n    if (options.ResizeObserver === null) {\n      RESIZE_OBSERVER_AVAILABLE = false;\n    }\n\n    // Only create an element when ResizeObserver isn't available\n    var options_ = mergeOptions({\n      createEl: !RESIZE_OBSERVER_AVAILABLE,\n      reportTouchActivity: false\n    }, options);\n\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options_));\n\n    _this.ResizeObserver = options.ResizeObserver || window$1.ResizeObserver;\n    _this.loadListener_ = null;\n    _this.resizeObserver_ = null;\n    _this.debouncedHandler_ = debounce(function () {\n      _this.resizeHandler();\n    }, 100, false, _this);\n\n    if (RESIZE_OBSERVER_AVAILABLE) {\n      _this.resizeObserver_ = new _this.ResizeObserver(_this.debouncedHandler_);\n      _this.resizeObserver_.observe(player.el());\n    } else {\n      _this.loadListener_ = function () {\n        if (!_this.el_ || !_this.el_.contentWindow) {\n          return;\n        }\n\n        on(_this.el_.contentWindow, 'resize', _this.debouncedHandler_);\n      };\n\n      _this.one('load', _this.loadListener_);\n    }\n    return _this;\n  }\n\n  ResizeManager.prototype.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'iframe', {\n      className: 'vjs-resize-manager'\n    });\n  };\n\n  /**\n   * Called when a resize is triggered on the iframe or a resize is observed via the ResizeObserver\n   *\n   * @fires Player#playerresize\n   */\n\n\n  ResizeManager.prototype.resizeHandler = function resizeHandler() {\n    /**\n     * Called when the player size has changed\n     *\n     * @event Player#playerresize\n     * @type {EventTarget~Event}\n     */\n    // make sure player is still around to trigger\n    // prevents this from causing an error after dispose\n    if (!this.player_ || !this.player_.trigger) {\n      return;\n    }\n\n    this.player_.trigger('playerresize');\n  };\n\n  ResizeManager.prototype.dispose = function dispose() {\n    if (this.debouncedHandler_) {\n      this.debouncedHandler_.cancel();\n    }\n\n    if (this.resizeObserver_) {\n      if (this.player_.el()) {\n        this.resizeObserver_.unobserve(this.player_.el());\n      }\n      this.resizeObserver_.disconnect();\n    }\n\n    if (this.el_ && this.el_.contentWindow) {\n      off(this.el_.contentWindow, 'resize', this.debouncedHandler_);\n    }\n\n    if (this.loadListener_) {\n      this.off('load', this.loadListener_);\n    }\n\n    this.ResizeObserver = null;\n    this.resizeObserver = null;\n    this.debouncedHandler_ = null;\n    this.loadListener_ = null;\n  };\n\n  return ResizeManager;\n}(Component);\n\nComponent.registerComponent('ResizeManager', ResizeManager);\n\n/**\n * This function is used to fire a sourceset when there is something\n * similar to `mediaEl.load()` being called. It will try to find the source via\n * the `src` attribute and then the `<source>` elements. It will then fire `sourceset`\n * with the source that was found or empty string if we cannot know. If it cannot\n * find a source then `sourceset` will not be fired.\n *\n * @param {Html5} tech\n *        The tech object that sourceset was setup on\n *\n * @return {boolean}\n *         returns false if the sourceset was not fired and true otherwise.\n */\nvar sourcesetLoad = function sourcesetLoad(tech) {\n  var el = tech.el();\n\n  // if `el.src` is set, that source will be loaded.\n  if (el.hasAttribute('src')) {\n    tech.triggerSourceset(el.src);\n    return true;\n  }\n\n  /**\n   * Since there isn't a src property on the media element, source elements will be used for\n   * implementing the source selection algorithm. This happens asynchronously and\n   * for most cases were there is more than one source we cannot tell what source will\n   * be loaded, without re-implementing the source selection algorithm. At this time we are not\n   * going to do that. There are three special cases that we do handle here though:\n   *\n   * 1. If there are no sources, do not fire `sourceset`.\n   * 2. If there is only one `<source>` with a `src` property/attribute that is our `src`\n   * 3. If there is more than one `<source>` but all of them have the same `src` url.\n   *    That will be our src.\n   */\n  var sources = tech.$$('source');\n  var srcUrls = [];\n  var src = '';\n\n  // if there are no sources, do not fire sourceset\n  if (!sources.length) {\n    return false;\n  }\n\n  // only count valid/non-duplicate source elements\n  for (var i = 0; i < sources.length; i++) {\n    var url = sources[i].src;\n\n    if (url && srcUrls.indexOf(url) === -1) {\n      srcUrls.push(url);\n    }\n  }\n\n  // there were no valid sources\n  if (!srcUrls.length) {\n    return false;\n  }\n\n  // there is only one valid source element url\n  // use that\n  if (srcUrls.length === 1) {\n    src = srcUrls[0];\n  }\n\n  tech.triggerSourceset(src);\n  return true;\n};\n\n/**\n * our implementation of an `innerHTML` descriptor for browsers\n * that do not have one.\n */\nvar innerHTMLDescriptorPolyfill = Object.defineProperty({}, 'innerHTML', {\n  get: function get() {\n    return this.cloneNode(true).innerHTML;\n  },\n  set: function set(v) {\n    // make a dummy node to use innerHTML on\n    var dummy = document.createElement(this.nodeName.toLowerCase());\n\n    // set innerHTML to the value provided\n    dummy.innerHTML = v;\n\n    // make a document fragment to hold the nodes from dummy\n    var docFrag = document.createDocumentFragment();\n\n    // copy all of the nodes created by the innerHTML on dummy\n    // to the document fragment\n    while (dummy.childNodes.length) {\n      docFrag.appendChild(dummy.childNodes[0]);\n    }\n\n    // remove content\n    this.innerText = '';\n\n    // now we add all of that html in one by appending the\n    // document fragment. This is how innerHTML does it.\n    window$1.Element.prototype.appendChild.call(this, docFrag);\n\n    // then return the result that innerHTML's setter would\n    return this.innerHTML;\n  }\n});\n\n/**\n * Get a property descriptor given a list of priorities and the\n * property to get.\n */\nvar getDescriptor = function getDescriptor(priority, prop) {\n  var descriptor = {};\n\n  for (var i = 0; i < priority.length; i++) {\n    descriptor = Object.getOwnPropertyDescriptor(priority[i], prop);\n\n    if (descriptor && descriptor.set && descriptor.get) {\n      break;\n    }\n  }\n\n  descriptor.enumerable = true;\n  descriptor.configurable = true;\n\n  return descriptor;\n};\n\nvar getInnerHTMLDescriptor = function getInnerHTMLDescriptor(tech) {\n  return getDescriptor([tech.el(), window$1.HTMLMediaElement.prototype, window$1.Element.prototype, innerHTMLDescriptorPolyfill], 'innerHTML');\n};\n\n/**\n * Patches browser internal functions so that we can tell synchronously\n * if a `<source>` was appended to the media element. For some reason this\n * causes a `sourceset` if the the media element is ready and has no source.\n * This happens when:\n * - The page has just loaded and the media element does not have a source.\n * - The media element was emptied of all sources, then `load()` was called.\n *\n * It does this by patching the following functions/properties when they are supported:\n *\n * - `append()` - can be used to add a `<source>` element to the media element\n * - `appendChild()` - can be used to add a `<source>` element to the media element\n * - `insertAdjacentHTML()` -  can be used to add a `<source>` element to the media element\n * - `innerHTML` -  can be used to add a `<source>` element to the media element\n *\n * @param {Html5} tech\n *        The tech object that sourceset is being setup on.\n */\nvar firstSourceWatch = function firstSourceWatch(tech) {\n  var el = tech.el();\n\n  // make sure firstSourceWatch isn't setup twice.\n  if (el.resetSourceWatch_) {\n    return;\n  }\n\n  var old = {};\n  var innerDescriptor = getInnerHTMLDescriptor(tech);\n  var appendWrapper = function appendWrapper(appendFn) {\n    return function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var retval = appendFn.apply(el, args);\n\n      sourcesetLoad(tech);\n\n      return retval;\n    };\n  };\n\n  ['append', 'appendChild', 'insertAdjacentHTML'].forEach(function (k) {\n    if (!el[k]) {\n      return;\n    }\n\n    // store the old function\n    old[k] = el[k];\n\n    // call the old function with a sourceset if a source\n    // was loaded\n    el[k] = appendWrapper(old[k]);\n  });\n\n  Object.defineProperty(el, 'innerHTML', mergeOptions(innerDescriptor, {\n    set: appendWrapper(innerDescriptor.set)\n  }));\n\n  el.resetSourceWatch_ = function () {\n    el.resetSourceWatch_ = null;\n    Object.keys(old).forEach(function (k) {\n      el[k] = old[k];\n    });\n\n    Object.defineProperty(el, 'innerHTML', innerDescriptor);\n  };\n\n  // on the first sourceset, we need to revert our changes\n  tech.one('sourceset', el.resetSourceWatch_);\n};\n\n/**\n * our implementation of a `src` descriptor for browsers\n * that do not have one.\n */\nvar srcDescriptorPolyfill = Object.defineProperty({}, 'src', {\n  get: function get() {\n    if (this.hasAttribute('src')) {\n      return getAbsoluteURL(window$1.Element.prototype.getAttribute.call(this, 'src'));\n    }\n\n    return '';\n  },\n  set: function set(v) {\n    window$1.Element.prototype.setAttribute.call(this, 'src', v);\n\n    return v;\n  }\n});\n\nvar getSrcDescriptor = function getSrcDescriptor(tech) {\n  return getDescriptor([tech.el(), window$1.HTMLMediaElement.prototype, srcDescriptorPolyfill], 'src');\n};\n\n/**\n * setup `sourceset` handling on the `Html5` tech. This function\n * patches the following element properties/functions:\n *\n * - `src` - to determine when `src` is set\n * - `setAttribute()` - to determine when `src` is set\n * - `load()` - this re-triggers the source selection algorithm, and can\n *              cause a sourceset.\n *\n * If there is no source when we are adding `sourceset` support or during a `load()`\n * we also patch the functions listed in `firstSourceWatch`.\n *\n * @param {Html5} tech\n *        The tech to patch\n */\nvar setupSourceset = function setupSourceset(tech) {\n  if (!tech.featuresSourceset) {\n    return;\n  }\n\n  var el = tech.el();\n\n  // make sure sourceset isn't setup twice.\n  if (el.resetSourceset_) {\n    return;\n  }\n\n  var srcDescriptor = getSrcDescriptor(tech);\n  var oldSetAttribute = el.setAttribute;\n  var oldLoad = el.load;\n\n  Object.defineProperty(el, 'src', mergeOptions(srcDescriptor, {\n    set: function set(v) {\n      var retval = srcDescriptor.set.call(el, v);\n\n      // we use the getter here to get the actual value set on src\n      tech.triggerSourceset(el.src);\n\n      return retval;\n    }\n  }));\n\n  el.setAttribute = function (n, v) {\n    var retval = oldSetAttribute.call(el, n, v);\n\n    if (/src/i.test(n)) {\n      tech.triggerSourceset(el.src);\n    }\n\n    return retval;\n  };\n\n  el.load = function () {\n    var retval = oldLoad.call(el);\n\n    // if load was called, but there was no source to fire\n    // sourceset on. We have to watch for a source append\n    // as that can trigger a `sourceset` when the media element\n    // has no source\n    if (!sourcesetLoad(tech)) {\n      tech.triggerSourceset('');\n      firstSourceWatch(tech);\n    }\n\n    return retval;\n  };\n\n  if (el.currentSrc) {\n    tech.triggerSourceset(el.currentSrc);\n  } else if (!sourcesetLoad(tech)) {\n    firstSourceWatch(tech);\n  }\n\n  el.resetSourceset_ = function () {\n    el.resetSourceset_ = null;\n    el.load = oldLoad;\n    el.setAttribute = oldSetAttribute;\n    Object.defineProperty(el, 'src', srcDescriptor);\n    if (el.resetSourceWatch_) {\n      el.resetSourceWatch_();\n    }\n  };\n};\n\nvar _templateObject$1 = taggedTemplateLiteralLoose(['Text Tracks are being loaded from another origin but the crossorigin attribute isn\\'t used.\\n            This may prevent text tracks from loading.'], ['Text Tracks are being loaded from another origin but the crossorigin attribute isn\\'t used.\\n            This may prevent text tracks from loading.']);\n\n/**\n * HTML5 Media Controller - Wrapper for HTML5 Media API\n *\n * @mixes Tech~SourceHandlerAdditions\n * @extends Tech\n */\n\nvar Html5 = function (_Tech) {\n  inherits(Html5, _Tech);\n\n  /**\n   * Create an instance of this Tech.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} ready\n   *        Callback function to call when the `HTML5` Tech is ready.\n   */\n  function Html5(options, ready) {\n    classCallCheck(this, Html5);\n\n    var _this = possibleConstructorReturn(this, _Tech.call(this, options, ready));\n\n    var source = options.source;\n    var crossoriginTracks = false;\n\n    // Set the source if one is provided\n    // 1) Check if the source is new (if not, we want to keep the original so playback isn't interrupted)\n    // 2) Check to see if the network state of the tag was failed at init, and if so, reset the source\n    // anyway so the error gets fired.\n    if (source && (_this.el_.currentSrc !== source.src || options.tag && options.tag.initNetworkState_ === 3)) {\n      _this.setSource(source);\n    } else {\n      _this.handleLateInit_(_this.el_);\n    }\n\n    // setup sourceset after late sourceset/init\n    if (options.enableSourceset) {\n      _this.setupSourcesetHandling_();\n    }\n\n    if (_this.el_.hasChildNodes()) {\n\n      var nodes = _this.el_.childNodes;\n      var nodesLength = nodes.length;\n      var removeNodes = [];\n\n      while (nodesLength--) {\n        var node = nodes[nodesLength];\n        var nodeName = node.nodeName.toLowerCase();\n\n        if (nodeName === 'track') {\n          if (!_this.featuresNativeTextTracks) {\n            // Empty video tag tracks so the built-in player doesn't use them also.\n            // This may not be fast enough to stop HTML5 browsers from reading the tags\n            // so we'll need to turn off any default tracks if we're manually doing\n            // captions and subtitles. videoElement.textTracks\n            removeNodes.push(node);\n          } else {\n            // store HTMLTrackElement and TextTrack to remote list\n            _this.remoteTextTrackEls().addTrackElement_(node);\n            _this.remoteTextTracks().addTrack(node.track);\n            _this.textTracks().addTrack(node.track);\n            if (!crossoriginTracks && !_this.el_.hasAttribute('crossorigin') && isCrossOrigin(node.src)) {\n              crossoriginTracks = true;\n            }\n          }\n        }\n      }\n\n      for (var i = 0; i < removeNodes.length; i++) {\n        _this.el_.removeChild(removeNodes[i]);\n      }\n    }\n\n    _this.proxyNativeTracks_();\n    if (_this.featuresNativeTextTracks && crossoriginTracks) {\n      log$1.warn(tsml(_templateObject$1));\n    }\n\n    // prevent iOS Safari from disabling metadata text tracks during native playback\n    _this.restoreMetadataTracksInIOSNativePlayer_();\n\n    // Determine if native controls should be used\n    // Our goal should be to get the custom controls on mobile solid everywhere\n    // so we can remove this all together. Right now this will block custom\n    // controls on touch enabled laptops like the Chrome Pixel\n    if ((TOUCH_ENABLED || IS_IPHONE || IS_NATIVE_ANDROID) && options.nativeControlsForTouch === true) {\n      _this.setControls(true);\n    }\n\n    // on iOS, we want to proxy `webkitbeginfullscreen` and `webkitendfullscreen`\n    // into a `fullscreenchange` event\n    _this.proxyWebkitFullscreen_();\n\n    _this.triggerReady();\n    return _this;\n  }\n\n  /**\n   * Dispose of `HTML5` media element and remove all tracks.\n   */\n\n\n  Html5.prototype.dispose = function dispose() {\n    if (this.el_ && this.el_.resetSourceset_) {\n      this.el_.resetSourceset_();\n    }\n    Html5.disposeMediaElement(this.el_);\n    this.options_ = null;\n\n    // tech will handle clearing of the emulated track list\n    _Tech.prototype.dispose.call(this);\n  };\n\n  /**\n   * Modify the media element so that we can detect when\n   * the source is changed. Fires `sourceset` just after the source has changed\n   */\n\n\n  Html5.prototype.setupSourcesetHandling_ = function setupSourcesetHandling_() {\n    setupSourceset(this);\n  };\n\n  /**\n   * When a captions track is enabled in the iOS Safari native player, all other\n   * tracks are disabled (including metadata tracks), which nulls all of their\n   * associated cue points. This will restore metadata tracks to their pre-fullscreen\n   * state in those cases so that cue points are not needlessly lost.\n   *\n   * @private\n   */\n\n\n  Html5.prototype.restoreMetadataTracksInIOSNativePlayer_ = function restoreMetadataTracksInIOSNativePlayer_() {\n    var textTracks = this.textTracks();\n    var metadataTracksPreFullscreenState = void 0;\n\n    // captures a snapshot of every metadata track's current state\n    var takeMetadataTrackSnapshot = function takeMetadataTrackSnapshot() {\n      metadataTracksPreFullscreenState = [];\n\n      for (var i = 0; i < textTracks.length; i++) {\n        var track = textTracks[i];\n\n        if (track.kind === 'metadata') {\n          metadataTracksPreFullscreenState.push({\n            track: track,\n            storedMode: track.mode\n          });\n        }\n      }\n    };\n\n    // snapshot each metadata track's initial state, and update the snapshot\n    // each time there is a track 'change' event\n    takeMetadataTrackSnapshot();\n    textTracks.addEventListener('change', takeMetadataTrackSnapshot);\n\n    this.on('dispose', function () {\n      return textTracks.removeEventListener('change', takeMetadataTrackSnapshot);\n    });\n\n    var restoreTrackMode = function restoreTrackMode() {\n      for (var i = 0; i < metadataTracksPreFullscreenState.length; i++) {\n        var storedTrack = metadataTracksPreFullscreenState[i];\n\n        if (storedTrack.track.mode === 'disabled' && storedTrack.track.mode !== storedTrack.storedMode) {\n          storedTrack.track.mode = storedTrack.storedMode;\n        }\n      }\n      // we only want this handler to be executed on the first 'change' event\n      textTracks.removeEventListener('change', restoreTrackMode);\n    };\n\n    // when we enter fullscreen playback, stop updating the snapshot and\n    // restore all track modes to their pre-fullscreen state\n    this.on('webkitbeginfullscreen', function () {\n      textTracks.removeEventListener('change', takeMetadataTrackSnapshot);\n\n      // remove the listener before adding it just in case it wasn't previously removed\n      textTracks.removeEventListener('change', restoreTrackMode);\n      textTracks.addEventListener('change', restoreTrackMode);\n    });\n\n    // start updating the snapshot again after leaving fullscreen\n    this.on('webkitendfullscreen', function () {\n      // remove the listener before adding it just in case it wasn't previously removed\n      textTracks.removeEventListener('change', takeMetadataTrackSnapshot);\n      textTracks.addEventListener('change', takeMetadataTrackSnapshot);\n\n      // remove the restoreTrackMode handler in case it wasn't triggered during fullscreen playback\n      textTracks.removeEventListener('change', restoreTrackMode);\n    });\n  };\n\n  /**\n   * Attempt to force override of tracks for the given type\n   *\n   * @param {String} type - Track type to override, possible values include 'Audio',\n   * 'Video', and 'Text'.\n   * @param {Boolean} override - If set to true native audio/video will be overridden,\n   * otherwise native audio/video will potentially be used.\n   * @private\n   */\n\n\n  Html5.prototype.overrideNative_ = function overrideNative_(type, override) {\n    var _this2 = this;\n\n    // If there is no behavioral change don't add/remove listeners\n    if (override !== this['featuresNative' + type + 'Tracks']) {\n      return;\n    }\n\n    var lowerCaseType = type.toLowerCase();\n\n    if (this[lowerCaseType + 'TracksListeners_']) {\n      Object.keys(this[lowerCaseType + 'TracksListeners_']).forEach(function (eventName) {\n        var elTracks = _this2.el()[lowerCaseType + 'Tracks'];\n\n        elTracks.removeEventListener(eventName, _this2[lowerCaseType + 'TracksListeners_'][eventName]);\n      });\n    }\n\n    this['featuresNative' + type + 'Tracks'] = !override;\n    this[lowerCaseType + 'TracksListeners_'] = null;\n\n    this.proxyNativeTracksForType_(lowerCaseType);\n  };\n\n  /**\n   * Attempt to force override of native audio tracks.\n   *\n   * @param {Boolean} override - If set to true native audio will be overridden,\n   * otherwise native audio will potentially be used.\n   */\n\n\n  Html5.prototype.overrideNativeAudioTracks = function overrideNativeAudioTracks(override) {\n    this.overrideNative_('Audio', override);\n  };\n\n  /**\n   * Attempt to force override of native video tracks.\n   *\n   * @param {Boolean} override - If set to true native video will be overridden,\n   * otherwise native video will potentially be used.\n   */\n\n\n  Html5.prototype.overrideNativeVideoTracks = function overrideNativeVideoTracks(override) {\n    this.overrideNative_('Video', override);\n  };\n\n  /**\n    * Proxy native track list events for the given type to our track\n    * lists if the browser we are playing in supports that type of track list.\n    *\n    * @param {string} name - Track type; values include 'audio', 'video', and 'text'\n    * @private\n    */\n\n\n  Html5.prototype.proxyNativeTracksForType_ = function proxyNativeTracksForType_(name) {\n    var _this3 = this;\n\n    var props = NORMAL[name];\n    var elTracks = this.el()[props.getterName];\n    var techTracks = this[props.getterName]();\n\n    if (!this['featuresNative' + props.capitalName + 'Tracks'] || !elTracks || !elTracks.addEventListener) {\n      return;\n    }\n    var listeners = {\n      change: function change(e) {\n        techTracks.trigger({\n          type: 'change',\n          target: techTracks,\n          currentTarget: techTracks,\n          srcElement: techTracks\n        });\n      },\n      addtrack: function addtrack(e) {\n        techTracks.addTrack(e.track);\n      },\n      removetrack: function removetrack(e) {\n        techTracks.removeTrack(e.track);\n      }\n    };\n    var removeOldTracks = function removeOldTracks() {\n      var removeTracks = [];\n\n      for (var i = 0; i < techTracks.length; i++) {\n        var found = false;\n\n        for (var j = 0; j < elTracks.length; j++) {\n          if (elTracks[j] === techTracks[i]) {\n            found = true;\n            break;\n          }\n        }\n\n        if (!found) {\n          removeTracks.push(techTracks[i]);\n        }\n      }\n\n      while (removeTracks.length) {\n        techTracks.removeTrack(removeTracks.shift());\n      }\n    };\n\n    this[props.getterName + 'Listeners_'] = listeners;\n\n    Object.keys(listeners).forEach(function (eventName) {\n      var listener = listeners[eventName];\n\n      elTracks.addEventListener(eventName, listener);\n      _this3.on('dispose', function (e) {\n        return elTracks.removeEventListener(eventName, listener);\n      });\n    });\n\n    // Remove (native) tracks that are not used anymore\n    this.on('loadstart', removeOldTracks);\n    this.on('dispose', function (e) {\n      return _this3.off('loadstart', removeOldTracks);\n    });\n  };\n\n  /**\n   * Proxy all native track list events to our track lists if the browser we are playing\n   * in supports that type of track list.\n   *\n   * @private\n   */\n\n\n  Html5.prototype.proxyNativeTracks_ = function proxyNativeTracks_() {\n    var _this4 = this;\n\n    NORMAL.names.forEach(function (name) {\n      _this4.proxyNativeTracksForType_(name);\n    });\n  };\n\n  /**\n   * Create the `Html5` Tech's DOM element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n\n\n  Html5.prototype.createEl = function createEl$$1() {\n    var el = this.options_.tag;\n\n    // Check if this browser supports moving the element into the box.\n    // On the iPhone video will break if you move the element,\n    // So we have to create a brand new element.\n    // If we ingested the player div, we do not need to move the media element.\n    if (!el || !(this.options_.playerElIngest || this.movingMediaElementInDOM)) {\n\n      // If the original tag is still there, clone and remove it.\n      if (el) {\n        var clone = el.cloneNode(true);\n\n        if (el.parentNode) {\n          el.parentNode.insertBefore(clone, el);\n        }\n        Html5.disposeMediaElement(el);\n        el = clone;\n      } else {\n        el = document.createElement('video');\n\n        // determine if native controls should be used\n        var tagAttributes = this.options_.tag && getAttributes(this.options_.tag);\n        var attributes = mergeOptions({}, tagAttributes);\n\n        if (!TOUCH_ENABLED || this.options_.nativeControlsForTouch !== true) {\n          delete attributes.controls;\n        }\n\n        setAttributes(el, assign(attributes, {\n          id: this.options_.techId,\n          class: 'vjs-tech'\n        }));\n      }\n\n      el.playerId = this.options_.playerId;\n    }\n\n    if (typeof this.options_.preload !== 'undefined') {\n      setAttribute(el, 'preload', this.options_.preload);\n    }\n\n    // Update specific tag settings, in case they were overridden\n    // `autoplay` has to be *last* so that `muted` and `playsinline` are present\n    // when iOS/Safari or other browsers attempt to autoplay.\n    var settingsAttrs = ['loop', 'muted', 'playsinline', 'autoplay'];\n\n    for (var i = 0; i < settingsAttrs.length; i++) {\n      var attr = settingsAttrs[i];\n      var value = this.options_[attr];\n\n      if (typeof value !== 'undefined') {\n        if (value) {\n          setAttribute(el, attr, attr);\n        } else {\n          removeAttribute(el, attr);\n        }\n        el[attr] = value;\n      }\n    }\n\n    return el;\n  };\n\n  /**\n   * This will be triggered if the loadstart event has already fired, before videojs was\n   * ready. Two known examples of when this can happen are:\n   * 1. If we're loading the playback object after it has started loading\n   * 2. The media is already playing the (often with autoplay on) then\n   *\n   * This function will fire another loadstart so that videojs can catchup.\n   *\n   * @fires Tech#loadstart\n   *\n   * @return {undefined}\n   *         returns nothing.\n   */\n\n\n  Html5.prototype.handleLateInit_ = function handleLateInit_(el) {\n    if (el.networkState === 0 || el.networkState === 3) {\n      // The video element hasn't started loading the source yet\n      // or didn't find a source\n      return;\n    }\n\n    if (el.readyState === 0) {\n      // NetworkState is set synchronously BUT loadstart is fired at the\n      // end of the current stack, usually before setInterval(fn, 0).\n      // So at this point we know loadstart may have already fired or is\n      // about to fire, and either way the player hasn't seen it yet.\n      // We don't want to fire loadstart prematurely here and cause a\n      // double loadstart so we'll wait and see if it happens between now\n      // and the next loop, and fire it if not.\n      // HOWEVER, we also want to make sure it fires before loadedmetadata\n      // which could also happen between now and the next loop, so we'll\n      // watch for that also.\n      var loadstartFired = false;\n      var setLoadstartFired = function setLoadstartFired() {\n        loadstartFired = true;\n      };\n\n      this.on('loadstart', setLoadstartFired);\n\n      var triggerLoadstart = function triggerLoadstart() {\n        // We did miss the original loadstart. Make sure the player\n        // sees loadstart before loadedmetadata\n        if (!loadstartFired) {\n          this.trigger('loadstart');\n        }\n      };\n\n      this.on('loadedmetadata', triggerLoadstart);\n\n      this.ready(function () {\n        this.off('loadstart', setLoadstartFired);\n        this.off('loadedmetadata', triggerLoadstart);\n\n        if (!loadstartFired) {\n          // We did miss the original native loadstart. Fire it now.\n          this.trigger('loadstart');\n        }\n      });\n\n      return;\n    }\n\n    // From here on we know that loadstart already fired and we missed it.\n    // The other readyState events aren't as much of a problem if we double\n    // them, so not going to go to as much trouble as loadstart to prevent\n    // that unless we find reason to.\n    var eventsToTrigger = ['loadstart'];\n\n    // loadedmetadata: newly equal to HAVE_METADATA (1) or greater\n    eventsToTrigger.push('loadedmetadata');\n\n    // loadeddata: newly increased to HAVE_CURRENT_DATA (2) or greater\n    if (el.readyState >= 2) {\n      eventsToTrigger.push('loadeddata');\n    }\n\n    // canplay: newly increased to HAVE_FUTURE_DATA (3) or greater\n    if (el.readyState >= 3) {\n      eventsToTrigger.push('canplay');\n    }\n\n    // canplaythrough: newly equal to HAVE_ENOUGH_DATA (4)\n    if (el.readyState >= 4) {\n      eventsToTrigger.push('canplaythrough');\n    }\n\n    // We still need to give the player time to add event listeners\n    this.ready(function () {\n      eventsToTrigger.forEach(function (type) {\n        this.trigger(type);\n      }, this);\n    });\n  };\n\n  /**\n   * Set current time for the `HTML5` tech.\n   *\n   * @param {number} seconds\n   *        Set the current time of the media to this.\n   */\n\n\n  Html5.prototype.setCurrentTime = function setCurrentTime(seconds) {\n    try {\n      this.el_.currentTime = seconds;\n    } catch (e) {\n      log$1(e, 'Video is not ready. (Video.js)');\n      // this.warning(VideoJS.warnings.videoNotReady);\n    }\n  };\n\n  /**\n   * Get the current duration of the HTML5 media element.\n   *\n   * @return {number}\n   *         The duration of the media or 0 if there is no duration.\n   */\n\n\n  Html5.prototype.duration = function duration() {\n    var _this5 = this;\n\n    // Android Chrome will report duration as Infinity for VOD HLS until after\n    // playback has started, which triggers the live display erroneously.\n    // Return NaN if playback has not started and trigger a durationupdate once\n    // the duration can be reliably known.\n    if (this.el_.duration === Infinity && IS_ANDROID && IS_CHROME && this.el_.currentTime === 0) {\n      // Wait for the first `timeupdate` with currentTime > 0 - there may be\n      // several with 0\n      var checkProgress = function checkProgress() {\n        if (_this5.el_.currentTime > 0) {\n          // Trigger durationchange for genuinely live video\n          if (_this5.el_.duration === Infinity) {\n            _this5.trigger('durationchange');\n          }\n          _this5.off('timeupdate', checkProgress);\n        }\n      };\n\n      this.on('timeupdate', checkProgress);\n      return NaN;\n    }\n    return this.el_.duration || NaN;\n  };\n\n  /**\n   * Get the current width of the HTML5 media element.\n   *\n   * @return {number}\n   *         The width of the HTML5 media element.\n   */\n\n\n  Html5.prototype.width = function width() {\n    return this.el_.offsetWidth;\n  };\n\n  /**\n   * Get the current height of the HTML5 media element.\n   *\n   * @return {number}\n   *         The height of the HTML5 media element.\n   */\n\n\n  Html5.prototype.height = function height() {\n    return this.el_.offsetHeight;\n  };\n\n  /**\n   * Proxy iOS `webkitbeginfullscreen` and `webkitendfullscreen` into\n   * `fullscreenchange` event.\n   *\n   * @private\n   * @fires fullscreenchange\n   * @listens webkitendfullscreen\n   * @listens webkitbeginfullscreen\n   * @listens webkitbeginfullscreen\n   */\n\n\n  Html5.prototype.proxyWebkitFullscreen_ = function proxyWebkitFullscreen_() {\n    var _this6 = this;\n\n    if (!('webkitDisplayingFullscreen' in this.el_)) {\n      return;\n    }\n\n    var endFn = function endFn() {\n      this.trigger('fullscreenchange', { isFullscreen: false });\n    };\n\n    var beginFn = function beginFn() {\n      if ('webkitPresentationMode' in this.el_ && this.el_.webkitPresentationMode !== 'picture-in-picture') {\n        this.one('webkitendfullscreen', endFn);\n\n        this.trigger('fullscreenchange', { isFullscreen: true });\n      }\n    };\n\n    this.on('webkitbeginfullscreen', beginFn);\n    this.on('dispose', function () {\n      _this6.off('webkitbeginfullscreen', beginFn);\n      _this6.off('webkitendfullscreen', endFn);\n    });\n  };\n\n  /**\n   * Check if fullscreen is supported on the current playback device.\n   *\n   * @return {boolean}\n   *         - True if fullscreen is supported.\n   *         - False if fullscreen is not supported.\n   */\n\n\n  Html5.prototype.supportsFullScreen = function supportsFullScreen() {\n    if (typeof this.el_.webkitEnterFullScreen === 'function') {\n      var userAgent = window$1.navigator && window$1.navigator.userAgent || '';\n\n      // Seems to be broken in Chromium/Chrome && Safari in Leopard\n      if (/Android/.test(userAgent) || !/Chrome|Mac OS X 10.5/.test(userAgent)) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  /**\n   * Request that the `HTML5` Tech enter fullscreen.\n   */\n\n\n  Html5.prototype.enterFullScreen = function enterFullScreen() {\n    var video = this.el_;\n\n    if (video.paused && video.networkState <= video.HAVE_METADATA) {\n      // attempt to prime the video element for programmatic access\n      // this isn't necessary on the desktop but shouldn't hurt\n      this.el_.play();\n\n      // playing and pausing synchronously during the transition to fullscreen\n      // can get iOS ~6.1 devices into a play/pause loop\n      this.setTimeout(function () {\n        video.pause();\n        video.webkitEnterFullScreen();\n      }, 0);\n    } else {\n      video.webkitEnterFullScreen();\n    }\n  };\n\n  /**\n   * Request that the `HTML5` Tech exit fullscreen.\n   */\n\n\n  Html5.prototype.exitFullScreen = function exitFullScreen() {\n    this.el_.webkitExitFullScreen();\n  };\n\n  /**\n   * A getter/setter for the `Html5` Tech's source object.\n   * > Note: Please use {@link Html5#setSource}\n   *\n   * @param {Tech~SourceObject} [src]\n   *        The source object you want to set on the `HTML5` techs element.\n   *\n   * @return {Tech~SourceObject|undefined}\n   *         - The current source object when a source is not passed in.\n   *         - undefined when setting\n   *\n   * @deprecated Since version 5.\n   */\n\n\n  Html5.prototype.src = function src(_src) {\n    if (_src === undefined) {\n      return this.el_.src;\n    }\n\n    // Setting src through `src` instead of `setSrc` will be deprecated\n    this.setSrc(_src);\n  };\n\n  /**\n   * Reset the tech by removing all sources and then calling\n   * {@link Html5.resetMediaElement}.\n   */\n\n\n  Html5.prototype.reset = function reset() {\n    Html5.resetMediaElement(this.el_);\n  };\n\n  /**\n   * Get the current source on the `HTML5` Tech. Falls back to returning the source from\n   * the HTML5 media element.\n   *\n   * @return {Tech~SourceObject}\n   *         The current source object from the HTML5 tech. With a fallback to the\n   *         elements source.\n   */\n\n\n  Html5.prototype.currentSrc = function currentSrc() {\n    if (this.currentSource_) {\n      return this.currentSource_.src;\n    }\n    return this.el_.currentSrc;\n  };\n\n  /**\n   * Set controls attribute for the HTML5 media Element.\n   *\n   * @param {string} val\n   *        Value to set the controls attribute to\n   */\n\n\n  Html5.prototype.setControls = function setControls(val) {\n    this.el_.controls = !!val;\n  };\n\n  /**\n   * Create and returns a remote {@link TextTrack} object.\n   *\n   * @param {string} kind\n   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)\n   *\n   * @param {string} [label]\n   *        Label to identify the text track\n   *\n   * @param {string} [language]\n   *        Two letter language abbreviation\n   *\n   * @return {TextTrack}\n   *         The TextTrack that gets created.\n   */\n\n\n  Html5.prototype.addTextTrack = function addTextTrack(kind, label, language) {\n    if (!this.featuresNativeTextTracks) {\n      return _Tech.prototype.addTextTrack.call(this, kind, label, language);\n    }\n\n    return this.el_.addTextTrack(kind, label, language);\n  };\n\n  /**\n   * Creates either native TextTrack or an emulated TextTrack depending\n   * on the value of `featuresNativeTextTracks`\n   *\n   * @param {Object} options\n   *        The object should contain the options to initialize the TextTrack with.\n   *\n   * @param {string} [options.kind]\n   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).\n   *\n   * @param {string} [options.label]\n   *        Label to identify the text track\n   *\n   * @param {string} [options.language]\n   *        Two letter language abbreviation.\n   *\n   * @param {boolean} [options.default]\n   *        Default this track to on.\n   *\n   * @param {string} [options.id]\n   *        The internal id to assign this track.\n   *\n   * @param {string} [options.src]\n   *        A source url for the track.\n   *\n   * @return {HTMLTrackElement}\n   *         The track element that gets created.\n   */\n\n\n  Html5.prototype.createRemoteTextTrack = function createRemoteTextTrack(options) {\n    if (!this.featuresNativeTextTracks) {\n      return _Tech.prototype.createRemoteTextTrack.call(this, options);\n    }\n    var htmlTrackElement = document.createElement('track');\n\n    if (options.kind) {\n      htmlTrackElement.kind = options.kind;\n    }\n    if (options.label) {\n      htmlTrackElement.label = options.label;\n    }\n    if (options.language || options.srclang) {\n      htmlTrackElement.srclang = options.language || options.srclang;\n    }\n    if (options.default) {\n      htmlTrackElement.default = options.default;\n    }\n    if (options.id) {\n      htmlTrackElement.id = options.id;\n    }\n    if (options.src) {\n      htmlTrackElement.src = options.src;\n    }\n\n    return htmlTrackElement;\n  };\n\n  /**\n   * Creates a remote text track object and returns an html track element.\n   *\n   * @param {Object} options The object should contain values for\n   * kind, language, label, and src (location of the WebVTT file)\n   * @param {Boolean} [manualCleanup=true] if set to false, the TextTrack will be\n   * automatically removed from the video element whenever the source changes\n   * @return {HTMLTrackElement} An Html Track Element.\n   * This can be an emulated {@link HTMLTrackElement} or a native one.\n   * @deprecated The default value of the \"manualCleanup\" parameter will default\n   * to \"false\" in upcoming versions of Video.js\n   */\n\n\n  Html5.prototype.addRemoteTextTrack = function addRemoteTextTrack(options, manualCleanup) {\n    var htmlTrackElement = _Tech.prototype.addRemoteTextTrack.call(this, options, manualCleanup);\n\n    if (this.featuresNativeTextTracks) {\n      this.el().appendChild(htmlTrackElement);\n    }\n\n    return htmlTrackElement;\n  };\n\n  /**\n   * Remove remote `TextTrack` from `TextTrackList` object\n   *\n   * @param {TextTrack} track\n   *        `TextTrack` object to remove\n   */\n\n\n  Html5.prototype.removeRemoteTextTrack = function removeRemoteTextTrack(track) {\n    _Tech.prototype.removeRemoteTextTrack.call(this, track);\n\n    if (this.featuresNativeTextTracks) {\n      var tracks = this.$$('track');\n\n      var i = tracks.length;\n\n      while (i--) {\n        if (track === tracks[i] || track === tracks[i].track) {\n          this.el().removeChild(tracks[i]);\n        }\n      }\n    }\n  };\n\n  /**\n   * Gets available media playback quality metrics as specified by the W3C's Media\n   * Playback Quality API.\n   *\n   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}\n   *\n   * @return {Object}\n   *         An object with supported media playback quality metrics\n   */\n\n\n  Html5.prototype.getVideoPlaybackQuality = function getVideoPlaybackQuality() {\n    if (typeof this.el().getVideoPlaybackQuality === 'function') {\n      return this.el().getVideoPlaybackQuality();\n    }\n\n    var videoPlaybackQuality = {};\n\n    if (typeof this.el().webkitDroppedFrameCount !== 'undefined' && typeof this.el().webkitDecodedFrameCount !== 'undefined') {\n      videoPlaybackQuality.droppedVideoFrames = this.el().webkitDroppedFrameCount;\n      videoPlaybackQuality.totalVideoFrames = this.el().webkitDecodedFrameCount;\n    }\n\n    if (window$1.performance && typeof window$1.performance.now === 'function') {\n      videoPlaybackQuality.creationTime = window$1.performance.now();\n    } else if (window$1.performance && window$1.performance.timing && typeof window$1.performance.timing.navigationStart === 'number') {\n      videoPlaybackQuality.creationTime = window$1.Date.now() - window$1.performance.timing.navigationStart;\n    }\n\n    return videoPlaybackQuality;\n  };\n\n  return Html5;\n}(Tech);\n\n/* HTML5 Support Testing ---------------------------------------------------- */\n\nif (isReal()) {\n\n  /**\n   * Element for testing browser HTML5 media capabilities\n   *\n   * @type {Element}\n   * @constant\n   * @private\n   */\n  Html5.TEST_VID = document.createElement('video');\n  var track = document.createElement('track');\n\n  track.kind = 'captions';\n  track.srclang = 'en';\n  track.label = 'English';\n  Html5.TEST_VID.appendChild(track);\n}\n\n/**\n * Check if HTML5 media is supported by this browser/device.\n *\n * @return {boolean}\n *         - True if HTML5 media is supported.\n *         - False if HTML5 media is not supported.\n */\nHtml5.isSupported = function () {\n  // IE with no Media Player is a LIAR! (#984)\n  try {\n    Html5.TEST_VID.volume = 0.5;\n  } catch (e) {\n    return false;\n  }\n\n  return !!(Html5.TEST_VID && Html5.TEST_VID.canPlayType);\n};\n\n/**\n * Check if the tech can support the given type\n *\n * @param {string} type\n *        The mimetype to check\n * @return {string} 'probably', 'maybe', or '' (empty string)\n */\nHtml5.canPlayType = function (type) {\n  return Html5.TEST_VID.canPlayType(type);\n};\n\n/**\n * Check if the tech can support the given source\n * @param {Object} srcObj\n *        The source object\n * @param {Object} options\n *        The options passed to the tech\n * @return {string} 'probably', 'maybe', or '' (empty string)\n */\nHtml5.canPlaySource = function (srcObj, options) {\n  return Html5.canPlayType(srcObj.type);\n};\n\n/**\n * Check if the volume can be changed in this browser/device.\n * Volume cannot be changed in a lot of mobile devices.\n * Specifically, it can't be changed from 1 on iOS.\n *\n * @return {boolean}\n *         - True if volume can be controlled\n *         - False otherwise\n */\nHtml5.canControlVolume = function () {\n  // IE will error if Windows Media Player not installed #3315\n  try {\n    var volume = Html5.TEST_VID.volume;\n\n    Html5.TEST_VID.volume = volume / 2 + 0.1;\n    return volume !== Html5.TEST_VID.volume;\n  } catch (e) {\n    return false;\n  }\n};\n\n/**\n * Check if the volume can be muted in this browser/device.\n * Some devices, e.g. iOS, don't allow changing volume\n * but permits muting/unmuting.\n *\n * @return {bolean}\n *      - True if volume can be muted\n *      - False otherwise\n */\nHtml5.canMuteVolume = function () {\n  try {\n    var muted = Html5.TEST_VID.muted;\n\n    // in some versions of iOS muted property doesn't always\n    // work, so we want to set both property and attribute\n    Html5.TEST_VID.muted = !muted;\n    if (Html5.TEST_VID.muted) {\n      setAttribute(Html5.TEST_VID, 'muted', 'muted');\n    } else {\n      removeAttribute(Html5.TEST_VID, 'muted', 'muted');\n    }\n    return muted !== Html5.TEST_VID.muted;\n  } catch (e) {\n    return false;\n  }\n};\n\n/**\n * Check if the playback rate can be changed in this browser/device.\n *\n * @return {boolean}\n *         - True if playback rate can be controlled\n *         - False otherwise\n */\nHtml5.canControlPlaybackRate = function () {\n  // Playback rate API is implemented in Android Chrome, but doesn't do anything\n  // https://github.com/videojs/video.js/issues/3180\n  if (IS_ANDROID && IS_CHROME && CHROME_VERSION < 58) {\n    return false;\n  }\n  // IE will error if Windows Media Player not installed #3315\n  try {\n    var playbackRate = Html5.TEST_VID.playbackRate;\n\n    Html5.TEST_VID.playbackRate = playbackRate / 2 + 0.1;\n    return playbackRate !== Html5.TEST_VID.playbackRate;\n  } catch (e) {\n    return false;\n  }\n};\n\n/**\n * Check if we can override a video/audio elements attributes, with\n * Object.defineProperty.\n *\n * @return {boolean}\n *         - True if builtin attributes can be overridden\n *         - False otherwise\n */\nHtml5.canOverrideAttributes = function () {\n  // if we cannot overwrite the src/innerHTML property, there is no support\n  // iOS 7 safari for instance cannot do this.\n  try {\n    var noop = function noop() {};\n\n    Object.defineProperty(document.createElement('video'), 'src', { get: noop, set: noop });\n    Object.defineProperty(document.createElement('audio'), 'src', { get: noop, set: noop });\n    Object.defineProperty(document.createElement('video'), 'innerHTML', { get: noop, set: noop });\n    Object.defineProperty(document.createElement('audio'), 'innerHTML', { get: noop, set: noop });\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * Check to see if native `TextTrack`s are supported by this browser/device.\n *\n * @return {boolean}\n *         - True if native `TextTrack`s are supported.\n *         - False otherwise\n */\nHtml5.supportsNativeTextTracks = function () {\n  return IS_ANY_SAFARI || IS_IOS && IS_CHROME;\n};\n\n/**\n * Check to see if native `VideoTrack`s are supported by this browser/device\n *\n * @return {boolean}\n *        - True if native `VideoTrack`s are supported.\n *        - False otherwise\n */\nHtml5.supportsNativeVideoTracks = function () {\n  return !!(Html5.TEST_VID && Html5.TEST_VID.videoTracks);\n};\n\n/**\n * Check to see if native `AudioTrack`s are supported by this browser/device\n *\n * @return {boolean}\n *        - True if native `AudioTrack`s are supported.\n *        - False otherwise\n */\nHtml5.supportsNativeAudioTracks = function () {\n  return !!(Html5.TEST_VID && Html5.TEST_VID.audioTracks);\n};\n\n/**\n * An array of events available on the Html5 tech.\n *\n * @private\n * @type {Array}\n */\nHtml5.Events = ['loadstart', 'suspend', 'abort', 'error', 'emptied', 'stalled', 'loadedmetadata', 'loadeddata', 'canplay', 'canplaythrough', 'playing', 'waiting', 'seeking', 'seeked', 'ended', 'durationchange', 'timeupdate', 'progress', 'play', 'pause', 'ratechange', 'resize', 'volumechange'];\n\n/**\n * Boolean indicating whether the `Tech` supports volume control.\n *\n * @type {boolean}\n * @default {@link Html5.canControlVolume}\n */\nHtml5.prototype.featuresVolumeControl = Html5.canControlVolume();\n\n/**\n * Boolean indicating whether the `Tech` supports muting volume.\n *\n * @type {bolean}\n * @default {@link Html5.canMuteVolume}\n */\nHtml5.prototype.featuresMuteControl = Html5.canMuteVolume();\n\n/**\n * Boolean indicating whether the `Tech` supports changing the speed at which the media\n * plays. Examples:\n *   - Set player to play 2x (twice) as fast\n *   - Set player to play 0.5x (half) as fast\n *\n * @type {boolean}\n * @default {@link Html5.canControlPlaybackRate}\n */\nHtml5.prototype.featuresPlaybackRate = Html5.canControlPlaybackRate();\n\n/**\n * Boolean indicating whether the `Tech` supports the `sourceset` event.\n *\n * @type {boolean}\n * @default\n */\nHtml5.prototype.featuresSourceset = Html5.canOverrideAttributes();\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports the media element\n * moving in the DOM. iOS breaks if you move the media element, so this is set this to\n * false there. Everywhere else this should be true.\n *\n * @type {boolean}\n * @default\n */\nHtml5.prototype.movingMediaElementInDOM = !IS_IOS;\n\n// TODO: Previous comment: No longer appears to be used. Can probably be removed.\n//       Is this true?\n/**\n * Boolean indicating whether the `HTML5` tech currently supports automatic media resize\n * when going into fullscreen.\n *\n * @type {boolean}\n * @default\n */\nHtml5.prototype.featuresFullscreenResize = true;\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports the progress event.\n * If this is false, manual `progress` events will be triggered instead.\n *\n * @type {boolean}\n * @default\n */\nHtml5.prototype.featuresProgressEvents = true;\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports the timeupdate event.\n * If this is false, manual `timeupdate` events will be triggered instead.\n *\n * @default\n */\nHtml5.prototype.featuresTimeupdateEvents = true;\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports native `TextTrack`s.\n *\n * @type {boolean}\n * @default {@link Html5.supportsNativeTextTracks}\n */\nHtml5.prototype.featuresNativeTextTracks = Html5.supportsNativeTextTracks();\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports native `VideoTrack`s.\n *\n * @type {boolean}\n * @default {@link Html5.supportsNativeVideoTracks}\n */\nHtml5.prototype.featuresNativeVideoTracks = Html5.supportsNativeVideoTracks();\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports native `AudioTrack`s.\n *\n * @type {boolean}\n * @default {@link Html5.supportsNativeAudioTracks}\n */\nHtml5.prototype.featuresNativeAudioTracks = Html5.supportsNativeAudioTracks();\n\n// HTML5 Feature detection and Device Fixes --------------------------------- //\nvar canPlayType = Html5.TEST_VID && Html5.TEST_VID.constructor.prototype.canPlayType;\nvar mpegurlRE = /^application\\/(?:x-|vnd\\.apple\\.)mpegurl/i;\n\nHtml5.patchCanPlayType = function () {\n\n  // Android 4.0 and above can play HLS to some extent but it reports being unable to do so\n  // Firefox and Chrome report correctly\n  if (ANDROID_VERSION >= 4.0 && !IS_FIREFOX && !IS_CHROME) {\n    Html5.TEST_VID.constructor.prototype.canPlayType = function (type) {\n      if (type && mpegurlRE.test(type)) {\n        return 'maybe';\n      }\n      return canPlayType.call(this, type);\n    };\n  }\n};\n\nHtml5.unpatchCanPlayType = function () {\n  var r = Html5.TEST_VID.constructor.prototype.canPlayType;\n\n  Html5.TEST_VID.constructor.prototype.canPlayType = canPlayType;\n  return r;\n};\n\n// by default, patch the media element\nHtml5.patchCanPlayType();\n\nHtml5.disposeMediaElement = function (el) {\n  if (!el) {\n    return;\n  }\n\n  if (el.parentNode) {\n    el.parentNode.removeChild(el);\n  }\n\n  // remove any child track or source nodes to prevent their loading\n  while (el.hasChildNodes()) {\n    el.removeChild(el.firstChild);\n  }\n\n  // remove any src reference. not setting `src=''` because that causes a warning\n  // in firefox\n  el.removeAttribute('src');\n\n  // force the media element to update its loading state by calling load()\n  // however IE on Windows 7N has a bug that throws an error so need a try/catch (#793)\n  if (typeof el.load === 'function') {\n    // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)\n    (function () {\n      try {\n        el.load();\n      } catch (e) {\n        // not supported\n      }\n    })();\n  }\n};\n\nHtml5.resetMediaElement = function (el) {\n  if (!el) {\n    return;\n  }\n\n  var sources = el.querySelectorAll('source');\n  var i = sources.length;\n\n  while (i--) {\n    el.removeChild(sources[i]);\n  }\n\n  // remove any src reference.\n  // not setting `src=''` because that throws an error\n  el.removeAttribute('src');\n\n  if (typeof el.load === 'function') {\n    // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)\n    (function () {\n      try {\n        el.load();\n      } catch (e) {\n        // satisfy linter\n      }\n    })();\n  }\n};\n\n/* Native HTML5 element property wrapping ----------------------------------- */\n// Wrap native boolean attributes with getters that check both property and attribute\n// The list is as followed:\n// muted, defaultMuted, autoplay, controls, loop, playsinline\n[\n/**\n * Get the value of `muted` from the media element. `muted` indicates\n * that the volume for the media should be set to silent. This does not actually change\n * the `volume` attribute.\n *\n * @method Html5#muted\n * @return {boolean}\n *         - True if the value of `volume` should be ignored and the audio set to silent.\n *         - False if the value of `volume` should be used.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}\n */\n'muted',\n\n/**\n * Get the value of `defaultMuted` from the media element. `defaultMuted` indicates\n * whether the media should start muted or not. Only changes the default state of the\n * media. `muted` and `defaultMuted` can have different values. {@link Html5#muted} indicates the\n * current state.\n *\n * @method Html5#defaultMuted\n * @return {boolean}\n *         - The value of `defaultMuted` from the media element.\n *         - True indicates that the media should start muted.\n *         - False indicates that the media should not start muted\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}\n */\n'defaultMuted',\n\n/**\n * Get the value of `autoplay` from the media element. `autoplay` indicates\n * that the media should start to play as soon as the page is ready.\n *\n * @method Html5#autoplay\n * @return {boolean}\n *         - The value of `autoplay` from the media element.\n *         - True indicates that the media should start as soon as the page loads.\n *         - False indicates that the media should not start as soon as the page loads.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}\n */\n'autoplay',\n\n/**\n * Get the value of `controls` from the media element. `controls` indicates\n * whether the native media controls should be shown or hidden.\n *\n * @method Html5#controls\n * @return {boolean}\n *         - The value of `controls` from the media element.\n *         - True indicates that native controls should be showing.\n *         - False indicates that native controls should be hidden.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-controls}\n */\n'controls',\n\n/**\n * Get the value of `loop` from the media element. `loop` indicates\n * that the media should return to the start of the media and continue playing once\n * it reaches the end.\n *\n * @method Html5#loop\n * @return {boolean}\n *         - The value of `loop` from the media element.\n *         - True indicates that playback should seek back to start once\n *           the end of a media is reached.\n *         - False indicates that playback should not loop back to the start when the\n *           end of the media is reached.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}\n */\n'loop',\n\n/**\n * Get the value of `playsinline` from the media element. `playsinline` indicates\n * to the browser that non-fullscreen playback is preferred when fullscreen\n * playback is the native default, such as in iOS Safari.\n *\n * @method Html5#playsinline\n * @return {boolean}\n *         - The value of `playsinline` from the media element.\n *         - True indicates that the media should play inline.\n *         - False indicates that the media should not play inline.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}\n */\n'playsinline'].forEach(function (prop) {\n  Html5.prototype[prop] = function () {\n    return this.el_[prop] || this.el_.hasAttribute(prop);\n  };\n});\n\n// Wrap native boolean attributes with setters that set both property and attribute\n// The list is as followed:\n// setMuted, setDefaultMuted, setAutoplay, setLoop, setPlaysinline\n// setControls is special-cased above\n[\n/**\n * Set the value of `muted` on the media element. `muted` indicates that the current\n * audio level should be silent.\n *\n * @method Html5#setMuted\n * @param {boolean} muted\n *        - True if the audio should be set to silent\n *        - False otherwise\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}\n */\n'muted',\n\n/**\n * Set the value of `defaultMuted` on the media element. `defaultMuted` indicates that the current\n * audio level should be silent, but will only effect the muted level on intial playback..\n *\n * @method Html5.prototype.setDefaultMuted\n * @param {boolean} defaultMuted\n *        - True if the audio should be set to silent\n *        - False otherwise\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}\n */\n'defaultMuted',\n\n/**\n * Set the value of `autoplay` on the media element. `autoplay` indicates\n * that the media should start to play as soon as the page is ready.\n *\n * @method Html5#setAutoplay\n * @param {boolean} autoplay\n *         - True indicates that the media should start as soon as the page loads.\n *         - False indicates that the media should not start as soon as the page loads.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}\n */\n'autoplay',\n\n/**\n * Set the value of `loop` on the media element. `loop` indicates\n * that the media should return to the start of the media and continue playing once\n * it reaches the end.\n *\n * @method Html5#setLoop\n * @param {boolean} loop\n *         - True indicates that playback should seek back to start once\n *           the end of a media is reached.\n *         - False indicates that playback should not loop back to the start when the\n *           end of the media is reached.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}\n */\n'loop',\n\n/**\n * Set the value of `playsinline` from the media element. `playsinline` indicates\n * to the browser that non-fullscreen playback is preferred when fullscreen\n * playback is the native default, such as in iOS Safari.\n *\n * @method Html5#setPlaysinline\n * @param {boolean} playsinline\n *         - True indicates that the media should play inline.\n *         - False indicates that the media should not play inline.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}\n */\n'playsinline'].forEach(function (prop) {\n  Html5.prototype['set' + toTitleCase(prop)] = function (v) {\n    this.el_[prop] = v;\n\n    if (v) {\n      this.el_.setAttribute(prop, prop);\n    } else {\n      this.el_.removeAttribute(prop);\n    }\n  };\n});\n\n// Wrap native properties with a getter\n// The list is as followed\n// paused, currentTime, buffered, volume, poster, preload, error, seeking\n// seekable, ended, playbackRate, defaultPlaybackRate, played, networkState\n// readyState, videoWidth, videoHeight\n[\n/**\n * Get the value of `paused` from the media element. `paused` indicates whether the media element\n * is currently paused or not.\n *\n * @method Html5#paused\n * @return {boolean}\n *         The value of `paused` from the media element.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-paused}\n */\n'paused',\n\n/**\n * Get the value of `currentTime` from the media element. `currentTime` indicates\n * the current second that the media is at in playback.\n *\n * @method Html5#currentTime\n * @return {number}\n *         The value of `currentTime` from the media element.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-currenttime}\n */\n'currentTime',\n\n/**\n * Get the value of `buffered` from the media element. `buffered` is a `TimeRange`\n * object that represents the parts of the media that are already downloaded and\n * available for playback.\n *\n * @method Html5#buffered\n * @return {TimeRange}\n *         The value of `buffered` from the media element.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-buffered}\n */\n'buffered',\n\n/**\n * Get the value of `volume` from the media element. `volume` indicates\n * the current playback volume of audio for a media. `volume` will be a value from 0\n * (silent) to 1 (loudest and default).\n *\n * @method Html5#volume\n * @return {number}\n *         The value of `volume` from the media element. Value will be between 0-1.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}\n */\n'volume',\n\n/**\n * Get the value of `poster` from the media element. `poster` indicates\n * that the url of an image file that can/will be shown when no media data is available.\n *\n * @method Html5#poster\n * @return {string}\n *         The value of `poster` from the media element. Value will be a url to an\n *         image.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-video-poster}\n */\n'poster',\n\n/**\n * Get the value of `preload` from the media element. `preload` indicates\n * what should download before the media is interacted with. It can have the following\n * values:\n * - none: nothing should be downloaded\n * - metadata: poster and the first few frames of the media may be downloaded to get\n *   media dimensions and other metadata\n * - auto: allow the media and metadata for the media to be downloaded before\n *    interaction\n *\n * @method Html5#preload\n * @return {string}\n *         The value of `preload` from the media element. Will be 'none', 'metadata',\n *         or 'auto'.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}\n */\n'preload',\n\n/**\n * Get the value of the `error` from the media element. `error` indicates any\n * MediaError that may have occurred during playback. If error returns null there is no\n * current error.\n *\n * @method Html5#error\n * @return {MediaError|null}\n *         The value of `error` from the media element. Will be `MediaError` if there\n *         is a current error and null otherwise.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-error}\n */\n'error',\n\n/**\n * Get the value of `seeking` from the media element. `seeking` indicates whether the\n * media is currently seeking to a new position or not.\n *\n * @method Html5#seeking\n * @return {boolean}\n *         - The value of `seeking` from the media element.\n *         - True indicates that the media is currently seeking to a new position.\n *         - False indicates that the media is not seeking to a new position at this time.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seeking}\n */\n'seeking',\n\n/**\n * Get the value of `seekable` from the media element. `seekable` returns a\n * `TimeRange` object indicating ranges of time that can currently be `seeked` to.\n *\n * @method Html5#seekable\n * @return {TimeRange}\n *         The value of `seekable` from the media element. A `TimeRange` object\n *         indicating the current ranges of time that can be seeked to.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seekable}\n */\n'seekable',\n\n/**\n * Get the value of `ended` from the media element. `ended` indicates whether\n * the media has reached the end or not.\n *\n * @method Html5#ended\n * @return {boolean}\n *         - The value of `ended` from the media element.\n *         - True indicates that the media has ended.\n *         - False indicates that the media has not ended.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-ended}\n */\n'ended',\n\n/**\n * Get the value of `playbackRate` from the media element. `playbackRate` indicates\n * the rate at which the media is currently playing back. Examples:\n *   - if playbackRate is set to 2, media will play twice as fast.\n *   - if playbackRate is set to 0.5, media will play half as fast.\n *\n * @method Html5#playbackRate\n * @return {number}\n *         The value of `playbackRate` from the media element. A number indicating\n *         the current playback speed of the media, where 1 is normal speed.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}\n */\n'playbackRate',\n\n/**\n * Get the value of `defaultPlaybackRate` from the media element. `defaultPlaybackRate` indicates\n * the rate at which the media is currently playing back. This value will not indicate the current\n * `playbackRate` after playback has started, use {@link Html5#playbackRate} for that.\n *\n * Examples:\n *   - if defaultPlaybackRate is set to 2, media will play twice as fast.\n *   - if defaultPlaybackRate is set to 0.5, media will play half as fast.\n *\n * @method Html5.prototype.defaultPlaybackRate\n * @return {number}\n *         The value of `defaultPlaybackRate` from the media element. A number indicating\n *         the current playback speed of the media, where 1 is normal speed.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}\n */\n'defaultPlaybackRate',\n\n/**\n * Get the value of `played` from the media element. `played` returns a `TimeRange`\n * object representing points in the media timeline that have been played.\n *\n * @method Html5#played\n * @return {TimeRange}\n *         The value of `played` from the media element. A `TimeRange` object indicating\n *         the ranges of time that have been played.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-played}\n */\n'played',\n\n/**\n * Get the value of `networkState` from the media element. `networkState` indicates\n * the current network state. It returns an enumeration from the following list:\n * - 0: NETWORK_EMPTY\n * - 1: NETWORK_IDLE\n * - 2: NETWORK_LOADING\n * - 3: NETWORK_NO_SOURCE\n *\n * @method Html5#networkState\n * @return {number}\n *         The value of `networkState` from the media element. This will be a number\n *         from the list in the description.\n *\n * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-networkstate}\n */\n'networkState',\n\n/**\n * Get the value of `readyState` from the media element. `readyState` indicates\n * the current state of the media element. It returns an enumeration from the\n * following list:\n * - 0: HAVE_NOTHING\n * - 1: HAVE_METADATA\n * - 2: HAVE_CURRENT_DATA\n * - 3: HAVE_FUTURE_DATA\n * - 4: HAVE_ENOUGH_DATA\n *\n * @method Html5#readyState\n * @return {number}\n *         The value of `readyState` from the media element. This will be a number\n *         from the list in the description.\n *\n * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#ready-states}\n */\n'readyState',\n\n/**\n * Get the value of `videoWidth` from the video element. `videoWidth` indicates\n * the current width of the video in css pixels.\n *\n * @method Html5#videoWidth\n * @return {number}\n *         The value of `videoWidth` from the video element. This will be a number\n *         in css pixels.\n *\n * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}\n */\n'videoWidth',\n\n/**\n * Get the value of `videoHeight` from the video element. `videoHeight` indicates\n * the current height of the video in css pixels.\n *\n * @method Html5#videoHeight\n * @return {number}\n *         The value of `videoHeight` from the video element. This will be a number\n *         in css pixels.\n *\n * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}\n */\n'videoHeight'].forEach(function (prop) {\n  Html5.prototype[prop] = function () {\n    return this.el_[prop];\n  };\n});\n\n// Wrap native properties with a setter in this format:\n// set + toTitleCase(name)\n// The list is as follows:\n// setVolume, setSrc, setPoster, setPreload, setPlaybackRate, setDefaultPlaybackRate\n[\n/**\n * Set the value of `volume` on the media element. `volume` indicates the current\n * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and\n * so on.\n *\n * @method Html5#setVolume\n * @param {number} percentAsDecimal\n *        The volume percent as a decimal. Valid range is from 0-1.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}\n */\n'volume',\n\n/**\n * Set the value of `src` on the media element. `src` indicates the current\n * {@link Tech~SourceObject} for the media.\n *\n * @method Html5#setSrc\n * @param {Tech~SourceObject} src\n *        The source object to set as the current source.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-src}\n */\n'src',\n\n/**\n * Set the value of `poster` on the media element. `poster` is the url to\n * an image file that can/will be shown when no media data is available.\n *\n * @method Html5#setPoster\n * @param {string} poster\n *        The url to an image that should be used as the `poster` for the media\n *        element.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-poster}\n */\n'poster',\n\n/**\n * Set the value of `preload` on the media element. `preload` indicates\n * what should download before the media is interacted with. It can have the following\n * values:\n * - none: nothing should be downloaded\n * - metadata: poster and the first few frames of the media may be downloaded to get\n *   media dimensions and other metadata\n * - auto: allow the media and metadata for the media to be downloaded before\n *    interaction\n *\n * @method Html5#setPreload\n * @param {string} preload\n *         The value of `preload` to set on the media element. Must be 'none', 'metadata',\n *         or 'auto'.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}\n */\n'preload',\n\n/**\n * Set the value of `playbackRate` on the media element. `playbackRate` indicates\n * the rate at which the media should play back. Examples:\n *   - if playbackRate is set to 2, media will play twice as fast.\n *   - if playbackRate is set to 0.5, media will play half as fast.\n *\n * @method Html5#setPlaybackRate\n * @return {number}\n *         The value of `playbackRate` from the media element. A number indicating\n *         the current playback speed of the media, where 1 is normal speed.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}\n */\n'playbackRate',\n\n/**\n * Set the value of `defaultPlaybackRate` on the media element. `defaultPlaybackRate` indicates\n * the rate at which the media should play back upon initial startup. Changing this value\n * after a video has started will do nothing. Instead you should used {@link Html5#setPlaybackRate}.\n *\n * Example Values:\n *   - if playbackRate is set to 2, media will play twice as fast.\n *   - if playbackRate is set to 0.5, media will play half as fast.\n *\n * @method Html5.prototype.setDefaultPlaybackRate\n * @return {number}\n *         The value of `defaultPlaybackRate` from the media element. A number indicating\n *         the current playback speed of the media, where 1 is normal speed.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultplaybackrate}\n */\n'defaultPlaybackRate'].forEach(function (prop) {\n  Html5.prototype['set' + toTitleCase(prop)] = function (v) {\n    this.el_[prop] = v;\n  };\n});\n\n// wrap native functions with a function\n// The list is as follows:\n// pause, load, play\n[\n/**\n * A wrapper around the media elements `pause` function. This will call the `HTML5`\n * media elements `pause` function.\n *\n * @method Html5#pause\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-pause}\n */\n'pause',\n\n/**\n * A wrapper around the media elements `load` function. This will call the `HTML5`s\n * media element `load` function.\n *\n * @method Html5#load\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-load}\n */\n'load',\n\n/**\n * A wrapper around the media elements `play` function. This will call the `HTML5`s\n * media element `play` function.\n *\n * @method Html5#play\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-play}\n */\n'play'].forEach(function (prop) {\n  Html5.prototype[prop] = function () {\n    return this.el_[prop]();\n  };\n});\n\nTech.withSourceHandlers(Html5);\n\n/**\n * Native source handler for Html5, simply passes the source to the media element.\n *\n * @property {Tech~SourceObject} source\n *        The source object\n *\n * @property {Html5} tech\n *        The instance of the HTML5 tech.\n */\nHtml5.nativeSourceHandler = {};\n\n/**\n * Check if the media element can play the given mime type.\n *\n * @param {string} type\n *        The mimetype to check\n *\n * @return {string}\n *         'probably', 'maybe', or '' (empty string)\n */\nHtml5.nativeSourceHandler.canPlayType = function (type) {\n  // IE without MediaPlayer throws an error (#519)\n  try {\n    return Html5.TEST_VID.canPlayType(type);\n  } catch (e) {\n    return '';\n  }\n};\n\n/**\n * Check if the media element can handle a source natively.\n *\n * @param {Tech~SourceObject} source\n *         The source object\n *\n * @param {Object} [options]\n *         Options to be passed to the tech.\n *\n * @return {string}\n *         'probably', 'maybe', or '' (empty string).\n */\nHtml5.nativeSourceHandler.canHandleSource = function (source, options) {\n\n  // If a type was provided we should rely on that\n  if (source.type) {\n    return Html5.nativeSourceHandler.canPlayType(source.type);\n\n    // If no type, fall back to checking 'video/[EXTENSION]'\n  } else if (source.src) {\n    var ext = getFileExtension(source.src);\n\n    return Html5.nativeSourceHandler.canPlayType('video/' + ext);\n  }\n\n  return '';\n};\n\n/**\n * Pass the source to the native media element.\n *\n * @param {Tech~SourceObject} source\n *        The source object\n *\n * @param {Html5} tech\n *        The instance of the Html5 tech\n *\n * @param {Object} [options]\n *        The options to pass to the source\n */\nHtml5.nativeSourceHandler.handleSource = function (source, tech, options) {\n  tech.setSrc(source.src);\n};\n\n/**\n * A noop for the native dispose function, as cleanup is not needed.\n */\nHtml5.nativeSourceHandler.dispose = function () {};\n\n// Register the native source handler\nHtml5.registerSourceHandler(Html5.nativeSourceHandler);\n\nTech.registerTech('Html5', Html5);\n\nvar _templateObject$2 = taggedTemplateLiteralLoose(['\\n        Using the tech directly can be dangerous. I hope you know what you\\'re doing.\\n        See https://github.com/videojs/video.js/issues/2617 for more info.\\n      '], ['\\n        Using the tech directly can be dangerous. I hope you know what you\\'re doing.\\n        See https://github.com/videojs/video.js/issues/2617 for more info.\\n      ']);\n\n// The following tech events are simply re-triggered\n// on the player when they happen\nvar TECH_EVENTS_RETRIGGER = [\n/**\n * Fired while the user agent is downloading media data.\n *\n * @event Player#progress\n * @type {EventTarget~Event}\n */\n/**\n * Retrigger the `progress` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechProgress_\n * @fires Player#progress\n * @listens Tech#progress\n */\n'progress',\n\n/**\n * Fires when the loading of an audio/video is aborted.\n *\n * @event Player#abort\n * @type {EventTarget~Event}\n */\n/**\n * Retrigger the `abort` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechAbort_\n * @fires Player#abort\n * @listens Tech#abort\n */\n'abort',\n\n/**\n * Fires when the browser is intentionally not getting media data.\n *\n * @event Player#suspend\n * @type {EventTarget~Event}\n */\n/**\n * Retrigger the `suspend` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechSuspend_\n * @fires Player#suspend\n * @listens Tech#suspend\n */\n'suspend',\n\n/**\n * Fires when the current playlist is empty.\n *\n * @event Player#emptied\n * @type {EventTarget~Event}\n */\n/**\n * Retrigger the `emptied` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechEmptied_\n * @fires Player#emptied\n * @listens Tech#emptied\n */\n'emptied',\n/**\n * Fires when the browser is trying to get media data, but data is not available.\n *\n * @event Player#stalled\n * @type {EventTarget~Event}\n */\n/**\n * Retrigger the `stalled` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechStalled_\n * @fires Player#stalled\n * @listens Tech#stalled\n */\n'stalled',\n\n/**\n * Fires when the browser has loaded meta data for the audio/video.\n *\n * @event Player#loadedmetadata\n * @type {EventTarget~Event}\n */\n/**\n * Retrigger the `stalled` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechLoadedmetadata_\n * @fires Player#loadedmetadata\n * @listens Tech#loadedmetadata\n */\n'loadedmetadata',\n\n/**\n * Fires when the browser has loaded the current frame of the audio/video.\n *\n * @event Player#loadeddata\n * @type {event}\n */\n/**\n * Retrigger the `loadeddata` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechLoaddeddata_\n * @fires Player#loadeddata\n * @listens Tech#loadeddata\n */\n'loadeddata',\n\n/**\n * Fires when the current playback position has changed.\n *\n * @event Player#timeupdate\n * @type {event}\n */\n/**\n * Retrigger the `timeupdate` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechTimeUpdate_\n * @fires Player#timeupdate\n * @listens Tech#timeupdate\n */\n'timeupdate',\n\n/**\n * Fires when the video's intrinsic dimensions change\n *\n * @event Player#resize\n * @type {event}\n */\n/**\n * Retrigger the `resize` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechResize_\n * @fires Player#resize\n * @listens Tech#resize\n */\n'resize',\n\n/**\n * Fires when the volume has been changed\n *\n * @event Player#volumechange\n * @type {event}\n */\n/**\n * Retrigger the `volumechange` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechVolumechange_\n * @fires Player#volumechange\n * @listens Tech#volumechange\n */\n'volumechange',\n\n/**\n * Fires when the text track has been changed\n *\n * @event Player#texttrackchange\n * @type {event}\n */\n/**\n * Retrigger the `texttrackchange` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechTexttrackchange_\n * @fires Player#texttrackchange\n * @listens Tech#texttrackchange\n */\n'texttrackchange'];\n\n// events to queue when playback rate is zero\n// this is a hash for the sole purpose of mapping non-camel-cased event names\n// to camel-cased function names\nvar TECH_EVENTS_QUEUE = {\n  canplay: 'CanPlay',\n  canplaythrough: 'CanPlayThrough',\n  playing: 'Playing',\n  seeked: 'Seeked'\n};\n\n/**\n * An instance of the `Player` class is created when any of the Video.js setup methods\n * are used to initialize a video.\n *\n * After an instance has been created it can be accessed globally in two ways:\n * 1. By calling `videojs('example_video_1');`\n * 2. By using it directly via  `videojs.players.example_video_1;`\n *\n * @extends Component\n */\n\nvar Player = function (_Component) {\n  inherits(Player, _Component);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Element} tag\n   *        The original video DOM element used for configuring options.\n   *\n   * @param {Object} [options]\n   *        Object of option names and values.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        Ready callback function.\n   */\n  function Player(tag, options, ready) {\n    classCallCheck(this, Player);\n\n    // Make sure tag ID exists\n    tag.id = tag.id || options.id || 'vjs_video_' + newGUID();\n\n    // Set Options\n    // The options argument overrides options set in the video tag\n    // which overrides globally set options.\n    // This latter part coincides with the load order\n    // (tag must exist before Player)\n    options = assign(Player.getTagSettings(tag), options);\n\n    // Delay the initialization of children because we need to set up\n    // player properties first, and can't use `this` before `super()`\n    options.initChildren = false;\n\n    // Same with creating the element\n    options.createEl = false;\n\n    // don't auto mixin the evented mixin\n    options.evented = false;\n\n    // we don't want the player to report touch activity on itself\n    // see enableTouchActivity in Component\n    options.reportTouchActivity = false;\n\n    // If language is not set, get the closest lang attribute\n    if (!options.language) {\n      if (typeof tag.closest === 'function') {\n        var closest = tag.closest('[lang]');\n\n        if (closest && closest.getAttribute) {\n          options.language = closest.getAttribute('lang');\n        }\n      } else {\n        var element = tag;\n\n        while (element && element.nodeType === 1) {\n          if (getAttributes(element).hasOwnProperty('lang')) {\n            options.language = element.getAttribute('lang');\n            break;\n          }\n          element = element.parentNode;\n        }\n      }\n    }\n\n    // Run base component initializing with new options\n\n    // Tracks when a tech changes the poster\n    var _this = possibleConstructorReturn(this, _Component.call(this, null, options, ready));\n\n    _this.isPosterFromTech_ = false;\n\n    // Holds callback info that gets queued when playback rate is zero\n    // and a seek is happening\n    _this.queuedCallbacks_ = [];\n\n    // Turn off API access because we're loading a new tech that might load asynchronously\n    _this.isReady_ = false;\n\n    // Init state hasStarted_\n    _this.hasStarted_ = false;\n\n    // Init state userActive_\n    _this.userActive_ = false;\n\n    // if the global option object was accidentally blown away by\n    // someone, bail early with an informative error\n    if (!_this.options_ || !_this.options_.techOrder || !_this.options_.techOrder.length) {\n      throw new Error('No techOrder specified. Did you overwrite ' + 'videojs.options instead of just changing the ' + 'properties you want to override?');\n    }\n\n    // Store the original tag used to set options\n    _this.tag = tag;\n\n    // Store the tag attributes used to restore html5 element\n    _this.tagAttributes = tag && getAttributes(tag);\n\n    // Update current language\n    _this.language(_this.options_.language);\n\n    // Update Supported Languages\n    if (options.languages) {\n      // Normalise player option languages to lowercase\n      var languagesToLower = {};\n\n      Object.getOwnPropertyNames(options.languages).forEach(function (name$$1) {\n        languagesToLower[name$$1.toLowerCase()] = options.languages[name$$1];\n      });\n      _this.languages_ = languagesToLower;\n    } else {\n      _this.languages_ = Player.prototype.options_.languages;\n    }\n\n    // Cache for video property values.\n    _this.cache_ = {};\n\n    // Set poster\n    _this.poster_ = options.poster || '';\n\n    // Set controls\n    _this.controls_ = !!options.controls;\n\n    // Set default values for lastVolume\n    _this.cache_.lastVolume = 1;\n\n    // Original tag settings stored in options\n    // now remove immediately so native controls don't flash.\n    // May be turned back on by HTML5 tech if nativeControlsForTouch is true\n    tag.controls = false;\n    tag.removeAttribute('controls');\n\n    // the attribute overrides the option\n    if (tag.hasAttribute('autoplay')) {\n      _this.options_.autoplay = true;\n    } else {\n      // otherwise use the setter to validate and\n      // set the correct value.\n      _this.autoplay(_this.options_.autoplay);\n    }\n\n    /*\n     * Store the internal state of scrubbing\n     *\n     * @private\n     * @return {Boolean} True if the user is scrubbing\n     */\n    _this.scrubbing_ = false;\n\n    _this.el_ = _this.createEl();\n\n    // Set default value for lastPlaybackRate\n    _this.cache_.lastPlaybackRate = _this.defaultPlaybackRate();\n\n    // Make this an evented object and use `el_` as its event bus.\n    evented(_this, { eventBusKey: 'el_' });\n\n    // We also want to pass the original player options to each component and plugin\n    // as well so they don't need to reach back into the player for options later.\n    // We also need to do another copy of this.options_ so we don't end up with\n    // an infinite loop.\n    var playerOptionsCopy = mergeOptions(_this.options_);\n\n    // Load plugins\n    if (options.plugins) {\n      var plugins = options.plugins;\n\n      Object.keys(plugins).forEach(function (name$$1) {\n        if (typeof this[name$$1] === 'function') {\n          this[name$$1](plugins[name$$1]);\n        } else {\n          throw new Error('plugin \"' + name$$1 + '\" does not exist');\n        }\n      }, _this);\n    }\n\n    _this.options_.playerOptions = playerOptionsCopy;\n\n    _this.middleware_ = [];\n\n    _this.initChildren();\n\n    // Set isAudio based on whether or not an audio tag was used\n    _this.isAudio(tag.nodeName.toLowerCase() === 'audio');\n\n    // Update controls className. Can't do this when the controls are initially\n    // set because the element doesn't exist yet.\n    if (_this.controls()) {\n      _this.addClass('vjs-controls-enabled');\n    } else {\n      _this.addClass('vjs-controls-disabled');\n    }\n\n    // Set ARIA label and region role depending on player type\n    _this.el_.setAttribute('role', 'region');\n    if (_this.isAudio()) {\n      _this.el_.setAttribute('aria-label', _this.localize('Audio Player'));\n    } else {\n      _this.el_.setAttribute('aria-label', _this.localize('Video Player'));\n    }\n\n    if (_this.isAudio()) {\n      _this.addClass('vjs-audio');\n    }\n\n    if (_this.flexNotSupported_()) {\n      _this.addClass('vjs-no-flex');\n    }\n\n    // TODO: Make this smarter. Toggle user state between touching/mousing\n    // using events, since devices can have both touch and mouse events.\n    // if (browser.TOUCH_ENABLED) {\n    //   this.addClass('vjs-touch-enabled');\n    // }\n\n    // iOS Safari has broken hover handling\n    if (!IS_IOS) {\n      _this.addClass('vjs-workinghover');\n    }\n\n    // Make player easily findable by ID\n    Player.players[_this.id_] = _this;\n\n    // Add a major version class to aid css in plugins\n    var majorVersion = version.split('.')[0];\n\n    _this.addClass('vjs-v' + majorVersion);\n\n    // When the player is first initialized, trigger activity so components\n    // like the control bar show themselves if needed\n    _this.userActive(true);\n    _this.reportUserActivity();\n\n    _this.one('play', _this.listenForUserActivity_);\n    _this.on('fullscreenchange', _this.handleFullscreenChange_);\n    _this.on('stageclick', _this.handleStageClick_);\n\n    _this.changingSrc_ = false;\n    _this.playWaitingForReady_ = false;\n    _this.playOnLoadstart_ = null;\n    return _this;\n  }\n\n  /**\n   * Destroys the video player and does any necessary cleanup.\n   *\n   * This is especially helpful if you are dynamically adding and removing videos\n   * to/from the DOM.\n   *\n   * @fires Player#dispose\n   */\n\n\n  Player.prototype.dispose = function dispose() {\n    /**\n     * Called when the player is being disposed of.\n     *\n     * @event Player#dispose\n     * @type {EventTarget~Event}\n     */\n    this.trigger('dispose');\n    // prevent dispose from being called twice\n    this.off('dispose');\n\n    if (this.styleEl_ && this.styleEl_.parentNode) {\n      this.styleEl_.parentNode.removeChild(this.styleEl_);\n      this.styleEl_ = null;\n    }\n\n    // Kill reference to this player\n    Player.players[this.id_] = null;\n\n    if (this.tag && this.tag.player) {\n      this.tag.player = null;\n    }\n\n    if (this.el_ && this.el_.player) {\n      this.el_.player = null;\n    }\n\n    if (this.tech_) {\n      this.tech_.dispose();\n      this.isPosterFromTech_ = false;\n      this.poster_ = '';\n    }\n\n    if (this.playerElIngest_) {\n      this.playerElIngest_ = null;\n    }\n\n    if (this.tag) {\n      this.tag = null;\n    }\n\n    clearCacheForPlayer(this);\n\n    // the actual .el_ is removed here\n    _Component.prototype.dispose.call(this);\n  };\n\n  /**\n   * Create the `Player`'s DOM element.\n   *\n   * @return {Element}\n   *         The DOM element that gets created.\n   */\n\n\n  Player.prototype.createEl = function createEl$$1() {\n    var tag = this.tag;\n    var el = void 0;\n    var playerElIngest = this.playerElIngest_ = tag.parentNode && tag.parentNode.hasAttribute && tag.parentNode.hasAttribute('data-vjs-player');\n    var divEmbed = this.tag.tagName.toLowerCase() === 'video-js';\n\n    if (playerElIngest) {\n      el = this.el_ = tag.parentNode;\n    } else if (!divEmbed) {\n      el = this.el_ = _Component.prototype.createEl.call(this, 'div');\n    }\n\n    // Copy over all the attributes from the tag, including ID and class\n    // ID will now reference player box, not the video tag\n    var attrs = getAttributes(tag);\n\n    if (divEmbed) {\n      el = this.el_ = tag;\n      tag = this.tag = document.createElement('video');\n      while (el.children.length) {\n        tag.appendChild(el.firstChild);\n      }\n\n      if (!hasClass(el, 'video-js')) {\n        addClass(el, 'video-js');\n      }\n\n      el.appendChild(tag);\n\n      playerElIngest = this.playerElIngest_ = el;\n      // move properties over from our custom `video-js` element\n      // to our new `video` element. This will move things like\n      // `src` or `controls` that were set via js before the player\n      // was initialized.\n      Object.keys(el).forEach(function (k) {\n        tag[k] = el[k];\n      });\n    }\n\n    // set tabindex to -1 to remove the video element from the focus order\n    tag.setAttribute('tabindex', '-1');\n    attrs.tabindex = '-1';\n\n    // Workaround for #4583 (JAWS+IE doesn't announce BPB or play button)\n    // See https://github.com/FreedomScientific/VFO-standards-support/issues/78\n    // Note that we can't detect if JAWS is being used, but this ARIA attribute\n    //  doesn't change behavior of IE11 if JAWS is not being used\n    if (IE_VERSION) {\n      tag.setAttribute('role', 'application');\n      attrs.role = 'application';\n    }\n\n    // Remove width/height attrs from tag so CSS can make it 100% width/height\n    tag.removeAttribute('width');\n    tag.removeAttribute('height');\n\n    if ('width' in attrs) {\n      delete attrs.width;\n    }\n    if ('height' in attrs) {\n      delete attrs.height;\n    }\n\n    Object.getOwnPropertyNames(attrs).forEach(function (attr) {\n      // don't copy over the class attribute to the player element when we're in a div embed\n      // the class is already set up properly in the divEmbed case\n      // and we want to make sure that the `video-js` class doesn't get lost\n      if (!(divEmbed && attr === 'class')) {\n        el.setAttribute(attr, attrs[attr]);\n      }\n\n      if (divEmbed) {\n        tag.setAttribute(attr, attrs[attr]);\n      }\n    });\n\n    // Update tag id/class for use as HTML5 playback tech\n    // Might think we should do this after embedding in container so .vjs-tech class\n    // doesn't flash 100% width/height, but class only applies with .video-js parent\n    tag.playerId = tag.id;\n    tag.id += '_html5_api';\n    tag.className = 'vjs-tech';\n\n    // Make player findable on elements\n    tag.player = el.player = this;\n    // Default state of video is paused\n    this.addClass('vjs-paused');\n\n    // Add a style element in the player that we'll use to set the width/height\n    // of the player in a way that's still overrideable by CSS, just like the\n    // video element\n    if (window$1.VIDEOJS_NO_DYNAMIC_STYLE !== true) {\n      this.styleEl_ = createStyleElement('vjs-styles-dimensions');\n      var defaultsStyleEl = $('.vjs-styles-defaults');\n      var head = $('head');\n\n      head.insertBefore(this.styleEl_, defaultsStyleEl ? defaultsStyleEl.nextSibling : head.firstChild);\n    }\n\n    // Pass in the width/height/aspectRatio options which will update the style el\n    this.width(this.options_.width);\n    this.height(this.options_.height);\n    this.fluid(this.options_.fluid);\n    this.aspectRatio(this.options_.aspectRatio);\n\n    // Hide any links within the video/audio tag,\n    // because IE doesn't hide them completely from screen readers.\n    var links = tag.getElementsByTagName('a');\n\n    for (var i = 0; i < links.length; i++) {\n      var linkEl = links.item(i);\n\n      addClass(linkEl, 'vjs-hidden');\n      linkEl.setAttribute('hidden', 'hidden');\n    }\n\n    // insertElFirst seems to cause the networkState to flicker from 3 to 2, so\n    // keep track of the original for later so we can know if the source originally failed\n    tag.initNetworkState_ = tag.networkState;\n\n    // Wrap video tag in div (el/box) container\n    if (tag.parentNode && !playerElIngest) {\n      tag.parentNode.insertBefore(el, tag);\n    }\n\n    // insert the tag as the first child of the player element\n    // then manually add it to the children array so that this.addChild\n    // will work properly for other components\n    //\n    // Breaks iPhone, fixed in HTML5 setup.\n    prependTo(tag, el);\n    this.children_.unshift(tag);\n\n    // Set lang attr on player to ensure CSS :lang() in consistent with player\n    // if it's been set to something different to the doc\n    this.el_.setAttribute('lang', this.language_);\n\n    this.el_ = el;\n\n    return el;\n  };\n\n  /**\n   * A getter/setter for the `Player`'s width. Returns the player's configured value.\n   * To get the current width use `currentWidth()`.\n   *\n   * @param {number} [value]\n   *        The value to set the `Player`'s width to.\n   *\n   * @return {number}\n   *         The current width of the `Player` when getting.\n   */\n\n\n  Player.prototype.width = function width(value) {\n    return this.dimension('width', value);\n  };\n\n  /**\n   * A getter/setter for the `Player`'s height. Returns the player's configured value.\n   * To get the current height use `currentheight()`.\n   *\n   * @param {number} [value]\n   *        The value to set the `Player`'s heigth to.\n   *\n   * @return {number}\n   *         The current height of the `Player` when getting.\n   */\n\n\n  Player.prototype.height = function height(value) {\n    return this.dimension('height', value);\n  };\n\n  /**\n   * A getter/setter for the `Player`'s width & height.\n   *\n   * @param {string} dimension\n   *        This string can be:\n   *        - 'width'\n   *        - 'height'\n   *\n   * @param {number} [value]\n   *        Value for dimension specified in the first argument.\n   *\n   * @return {number}\n   *         The dimension arguments value when getting (width/height).\n   */\n\n\n  Player.prototype.dimension = function dimension(_dimension, value) {\n    var privDimension = _dimension + '_';\n\n    if (value === undefined) {\n      return this[privDimension] || 0;\n    }\n\n    if (value === '') {\n      // If an empty string is given, reset the dimension to be automatic\n      this[privDimension] = undefined;\n      this.updateStyleEl_();\n      return;\n    }\n\n    var parsedVal = parseFloat(value);\n\n    if (isNaN(parsedVal)) {\n      log$1.error('Improper value \"' + value + '\" supplied for for ' + _dimension);\n      return;\n    }\n\n    this[privDimension] = parsedVal;\n    this.updateStyleEl_();\n  };\n\n  /**\n   * A getter/setter/toggler for the vjs-fluid `className` on the `Player`.\n   *\n   * @param {boolean} [bool]\n   *        - A value of true adds the class.\n   *        - A value of false removes the class.\n   *        - No value will toggle the fluid class.\n   *\n   * @return {boolean|undefined}\n   *         - The value of fluid when getting.\n   *         - `undefined` when setting.\n   */\n\n\n  Player.prototype.fluid = function fluid(bool) {\n    if (bool === undefined) {\n      return !!this.fluid_;\n    }\n\n    this.fluid_ = !!bool;\n\n    if (bool) {\n      this.addClass('vjs-fluid');\n    } else {\n      this.removeClass('vjs-fluid');\n    }\n\n    this.updateStyleEl_();\n  };\n\n  /**\n   * Get/Set the aspect ratio\n   *\n   * @param {string} [ratio]\n   *        Aspect ratio for player\n   *\n   * @return {string|undefined}\n   *         returns the current aspect ratio when getting\n   */\n\n  /**\n   * A getter/setter for the `Player`'s aspect ratio.\n   *\n   * @param {string} [ratio]\n   *        The value to set the `Player's aspect ratio to.\n   *\n   * @return {string|undefined}\n   *         - The current aspect ratio of the `Player` when getting.\n   *         - undefined when setting\n   */\n\n\n  Player.prototype.aspectRatio = function aspectRatio(ratio) {\n    if (ratio === undefined) {\n      return this.aspectRatio_;\n    }\n\n    // Check for width:height format\n    if (!/^\\d+\\:\\d+$/.test(ratio)) {\n      throw new Error('Improper value supplied for aspect ratio. The format should be width:height, for example 16:9.');\n    }\n    this.aspectRatio_ = ratio;\n\n    // We're assuming if you set an aspect ratio you want fluid mode,\n    // because in fixed mode you could calculate width and height yourself.\n    this.fluid(true);\n\n    this.updateStyleEl_();\n  };\n\n  /**\n   * Update styles of the `Player` element (height, width and aspect ratio).\n   *\n   * @private\n   * @listens Tech#loadedmetadata\n   */\n\n\n  Player.prototype.updateStyleEl_ = function updateStyleEl_() {\n    if (window$1.VIDEOJS_NO_DYNAMIC_STYLE === true) {\n      var _width = typeof this.width_ === 'number' ? this.width_ : this.options_.width;\n      var _height = typeof this.height_ === 'number' ? this.height_ : this.options_.height;\n      var techEl = this.tech_ && this.tech_.el();\n\n      if (techEl) {\n        if (_width >= 0) {\n          techEl.width = _width;\n        }\n        if (_height >= 0) {\n          techEl.height = _height;\n        }\n      }\n\n      return;\n    }\n\n    var width = void 0;\n    var height = void 0;\n    var aspectRatio = void 0;\n    var idClass = void 0;\n\n    // The aspect ratio is either used directly or to calculate width and height.\n    if (this.aspectRatio_ !== undefined && this.aspectRatio_ !== 'auto') {\n      // Use any aspectRatio that's been specifically set\n      aspectRatio = this.aspectRatio_;\n    } else if (this.videoWidth() > 0) {\n      // Otherwise try to get the aspect ratio from the video metadata\n      aspectRatio = this.videoWidth() + ':' + this.videoHeight();\n    } else {\n      // Or use a default. The video element's is 2:1, but 16:9 is more common.\n      aspectRatio = '16:9';\n    }\n\n    // Get the ratio as a decimal we can use to calculate dimensions\n    var ratioParts = aspectRatio.split(':');\n    var ratioMultiplier = ratioParts[1] / ratioParts[0];\n\n    if (this.width_ !== undefined) {\n      // Use any width that's been specifically set\n      width = this.width_;\n    } else if (this.height_ !== undefined) {\n      // Or calulate the width from the aspect ratio if a height has been set\n      width = this.height_ / ratioMultiplier;\n    } else {\n      // Or use the video's metadata, or use the video el's default of 300\n      width = this.videoWidth() || 300;\n    }\n\n    if (this.height_ !== undefined) {\n      // Use any height that's been specifically set\n      height = this.height_;\n    } else {\n      // Otherwise calculate the height from the ratio and the width\n      height = width * ratioMultiplier;\n    }\n\n    // Ensure the CSS class is valid by starting with an alpha character\n    if (/^[^a-zA-Z]/.test(this.id())) {\n      idClass = 'dimensions-' + this.id();\n    } else {\n      idClass = this.id() + '-dimensions';\n    }\n\n    // Ensure the right class is still on the player for the style element\n    this.addClass(idClass);\n\n    setTextContent(this.styleEl_, '\\n      .' + idClass + ' {\\n        width: ' + width + 'px;\\n        height: ' + height + 'px;\\n      }\\n\\n      .' + idClass + '.vjs-fluid {\\n        padding-top: ' + ratioMultiplier * 100 + '%;\\n      }\\n    ');\n  };\n\n  /**\n   * Load/Create an instance of playback {@link Tech} including element\n   * and API methods. Then append the `Tech` element in `Player` as a child.\n   *\n   * @param {string} techName\n   *        name of the playback technology\n   *\n   * @param {string} source\n   *        video source\n   *\n   * @private\n   */\n\n\n  Player.prototype.loadTech_ = function loadTech_(techName, source) {\n    var _this2 = this;\n\n    // Pause and remove current playback technology\n    if (this.tech_) {\n      this.unloadTech_();\n    }\n\n    var titleTechName = toTitleCase(techName);\n    var camelTechName = techName.charAt(0).toLowerCase() + techName.slice(1);\n\n    // get rid of the HTML5 video tag as soon as we are using another tech\n    if (titleTechName !== 'Html5' && this.tag) {\n      Tech.getTech('Html5').disposeMediaElement(this.tag);\n      this.tag.player = null;\n      this.tag = null;\n    }\n\n    this.techName_ = titleTechName;\n\n    // Turn off API access because we're loading a new tech that might load asynchronously\n    this.isReady_ = false;\n\n    // if autoplay is a string we pass false to the tech\n    // because the player is going to handle autoplay on `loadstart`\n    var autoplay = typeof this.autoplay() === 'string' ? false : this.autoplay();\n\n    // Grab tech-specific options from player options and add source and parent element to use.\n    var techOptions = {\n      source: source,\n      autoplay: autoplay,\n      'nativeControlsForTouch': this.options_.nativeControlsForTouch,\n      'playerId': this.id(),\n      'techId': this.id() + '_' + camelTechName + '_api',\n      'playsinline': this.options_.playsinline,\n      'preload': this.options_.preload,\n      'loop': this.options_.loop,\n      'muted': this.options_.muted,\n      'poster': this.poster(),\n      'language': this.language(),\n      'playerElIngest': this.playerElIngest_ || false,\n      'vtt.js': this.options_['vtt.js'],\n      'canOverridePoster': !!this.options_.techCanOverridePoster,\n      'enableSourceset': this.options_.enableSourceset\n    };\n\n    ALL.names.forEach(function (name$$1) {\n      var props = ALL[name$$1];\n\n      techOptions[props.getterName] = _this2[props.privateName];\n    });\n\n    assign(techOptions, this.options_[titleTechName]);\n    assign(techOptions, this.options_[camelTechName]);\n    assign(techOptions, this.options_[techName.toLowerCase()]);\n\n    if (this.tag) {\n      techOptions.tag = this.tag;\n    }\n\n    if (source && source.src === this.cache_.src && this.cache_.currentTime > 0) {\n      techOptions.startTime = this.cache_.currentTime;\n    }\n\n    // Initialize tech instance\n    var TechClass = Tech.getTech(techName);\n\n    if (!TechClass) {\n      throw new Error('No Tech named \\'' + titleTechName + '\\' exists! \\'' + titleTechName + '\\' should be registered using videojs.registerTech()\\'');\n    }\n\n    this.tech_ = new TechClass(techOptions);\n\n    // player.triggerReady is always async, so don't need this to be async\n    this.tech_.ready(bind(this, this.handleTechReady_), true);\n\n    textTrackConverter.jsonToTextTracks(this.textTracksJson_ || [], this.tech_);\n\n    // Listen to all HTML5-defined events and trigger them on the player\n    TECH_EVENTS_RETRIGGER.forEach(function (event) {\n      _this2.on(_this2.tech_, event, _this2['handleTech' + toTitleCase(event) + '_']);\n    });\n\n    Object.keys(TECH_EVENTS_QUEUE).forEach(function (event) {\n      _this2.on(_this2.tech_, event, function (eventObj) {\n        if (_this2.tech_.playbackRate() === 0 && _this2.tech_.seeking()) {\n          _this2.queuedCallbacks_.push({\n            callback: _this2['handleTech' + TECH_EVENTS_QUEUE[event] + '_'].bind(_this2),\n            event: eventObj\n          });\n          return;\n        }\n        _this2['handleTech' + TECH_EVENTS_QUEUE[event] + '_'](eventObj);\n      });\n    });\n\n    this.on(this.tech_, 'loadstart', this.handleTechLoadStart_);\n    this.on(this.tech_, 'sourceset', this.handleTechSourceset_);\n    this.on(this.tech_, 'waiting', this.handleTechWaiting_);\n    this.on(this.tech_, 'ended', this.handleTechEnded_);\n    this.on(this.tech_, 'seeking', this.handleTechSeeking_);\n    this.on(this.tech_, 'play', this.handleTechPlay_);\n    this.on(this.tech_, 'firstplay', this.handleTechFirstPlay_);\n    this.on(this.tech_, 'pause', this.handleTechPause_);\n    this.on(this.tech_, 'durationchange', this.handleTechDurationChange_);\n    this.on(this.tech_, 'fullscreenchange', this.handleTechFullscreenChange_);\n    this.on(this.tech_, 'error', this.handleTechError_);\n    this.on(this.tech_, 'loadedmetadata', this.updateStyleEl_);\n    this.on(this.tech_, 'posterchange', this.handleTechPosterChange_);\n    this.on(this.tech_, 'textdata', this.handleTechTextData_);\n    this.on(this.tech_, 'ratechange', this.handleTechRateChange_);\n\n    this.usingNativeControls(this.techGet_('controls'));\n\n    if (this.controls() && !this.usingNativeControls()) {\n      this.addTechControlsListeners_();\n    }\n\n    // Add the tech element in the DOM if it was not already there\n    // Make sure to not insert the original video element if using Html5\n    if (this.tech_.el().parentNode !== this.el() && (titleTechName !== 'Html5' || !this.tag)) {\n      prependTo(this.tech_.el(), this.el());\n    }\n\n    // Get rid of the original video tag reference after the first tech is loaded\n    if (this.tag) {\n      this.tag.player = null;\n      this.tag = null;\n    }\n  };\n\n  /**\n   * Unload and dispose of the current playback {@link Tech}.\n   *\n   * @private\n   */\n\n\n  Player.prototype.unloadTech_ = function unloadTech_() {\n    var _this3 = this;\n\n    // Save the current text tracks so that we can reuse the same text tracks with the next tech\n    ALL.names.forEach(function (name$$1) {\n      var props = ALL[name$$1];\n\n      _this3[props.privateName] = _this3[props.getterName]();\n    });\n    this.textTracksJson_ = textTrackConverter.textTracksToJson(this.tech_);\n\n    this.isReady_ = false;\n\n    this.tech_.dispose();\n\n    this.tech_ = false;\n\n    if (this.isPosterFromTech_) {\n      this.poster_ = '';\n      this.trigger('posterchange');\n    }\n\n    this.isPosterFromTech_ = false;\n  };\n\n  /**\n   * Return a reference to the current {@link Tech}.\n   * It will print a warning by default about the danger of using the tech directly\n   * but any argument that is passed in will silence the warning.\n   *\n   * @param {*} [safety]\n   *        Anything passed in to silence the warning\n   *\n   * @return {Tech}\n   *         The Tech\n   */\n\n\n  Player.prototype.tech = function tech(safety) {\n    if (safety === undefined) {\n      log$1.warn(tsml(_templateObject$2));\n    }\n\n    return this.tech_;\n  };\n\n  /**\n   * Set up click and touch listeners for the playback element\n   *\n   * - On desktops: a click on the video itself will toggle playback\n   * - On mobile devices: a click on the video toggles controls\n   *   which is done by toggling the user state between active and\n   *   inactive\n   * - A tap can signal that a user has become active or has become inactive\n   *   e.g. a quick tap on an iPhone movie should reveal the controls. Another\n   *   quick tap should hide them again (signaling the user is in an inactive\n   *   viewing state)\n   * - In addition to this, we still want the user to be considered inactive after\n   *   a few seconds of inactivity.\n   *\n   * > Note: the only part of iOS interaction we can't mimic with this setup\n   * is a touch and hold on the video element counting as activity in order to\n   * keep the controls showing, but that shouldn't be an issue. A touch and hold\n   * on any controls will still keep the user active\n   *\n   * @private\n   */\n\n\n  Player.prototype.addTechControlsListeners_ = function addTechControlsListeners_() {\n    // Make sure to remove all the previous listeners in case we are called multiple times.\n    this.removeTechControlsListeners_();\n\n    // Some browsers (Chrome & IE) don't trigger a click on a flash swf, but do\n    // trigger mousedown/up.\n    // http://stackoverflow.com/questions/1444562/javascript-onclick-event-over-flash-object\n    // Any touch events are set to block the mousedown event from happening\n    this.on(this.tech_, 'mousedown', this.handleTechClick_);\n    this.on(this.tech_, 'dblclick', this.handleTechDoubleClick_);\n\n    // If the controls were hidden we don't want that to change without a tap event\n    // so we'll check if the controls were already showing before reporting user\n    // activity\n    this.on(this.tech_, 'touchstart', this.handleTechTouchStart_);\n    this.on(this.tech_, 'touchmove', this.handleTechTouchMove_);\n    this.on(this.tech_, 'touchend', this.handleTechTouchEnd_);\n\n    // The tap listener needs to come after the touchend listener because the tap\n    // listener cancels out any reportedUserActivity when setting userActive(false)\n    this.on(this.tech_, 'tap', this.handleTechTap_);\n  };\n\n  /**\n   * Remove the listeners used for click and tap controls. This is needed for\n   * toggling to controls disabled, where a tap/touch should do nothing.\n   *\n   * @private\n   */\n\n\n  Player.prototype.removeTechControlsListeners_ = function removeTechControlsListeners_() {\n    // We don't want to just use `this.off()` because there might be other needed\n    // listeners added by techs that extend this.\n    this.off(this.tech_, 'tap', this.handleTechTap_);\n    this.off(this.tech_, 'touchstart', this.handleTechTouchStart_);\n    this.off(this.tech_, 'touchmove', this.handleTechTouchMove_);\n    this.off(this.tech_, 'touchend', this.handleTechTouchEnd_);\n    this.off(this.tech_, 'mousedown', this.handleTechClick_);\n    this.off(this.tech_, 'dblclick', this.handleTechDoubleClick_);\n  };\n\n  /**\n   * Player waits for the tech to be ready\n   *\n   * @private\n   */\n\n\n  Player.prototype.handleTechReady_ = function handleTechReady_() {\n    this.triggerReady();\n\n    // Keep the same volume as before\n    if (this.cache_.volume) {\n      this.techCall_('setVolume', this.cache_.volume);\n    }\n\n    // Look if the tech found a higher resolution poster while loading\n    this.handleTechPosterChange_();\n\n    // Update the duration if available\n    this.handleTechDurationChange_();\n  };\n\n  /**\n   * Retrigger the `loadstart` event that was triggered by the {@link Tech}. This\n   * function will also trigger {@link Player#firstplay} if it is the first loadstart\n   * for a video.\n   *\n   * @fires Player#loadstart\n   * @fires Player#firstplay\n   * @listens Tech#loadstart\n   * @private\n   */\n\n\n  Player.prototype.handleTechLoadStart_ = function handleTechLoadStart_() {\n    // TODO: Update to use `emptied` event instead. See #1277.\n\n    this.removeClass('vjs-ended');\n    this.removeClass('vjs-seeking');\n\n    // reset the error state\n    this.error(null);\n\n    // If it's already playing we want to trigger a firstplay event now.\n    // The firstplay event relies on both the play and loadstart events\n    // which can happen in any order for a new source\n    if (!this.paused()) {\n      /**\n       * Fired when the user agent begins looking for media data\n       *\n       * @event Player#loadstart\n       * @type {EventTarget~Event}\n       */\n      this.trigger('loadstart');\n      this.trigger('firstplay');\n    } else {\n      // reset the hasStarted state\n      this.hasStarted(false);\n      this.trigger('loadstart');\n    }\n\n    // autoplay happens after loadstart for the browser,\n    // so we mimic that behavior\n    this.manualAutoplay_(this.autoplay());\n  };\n\n  /**\n   * Handle autoplay string values, rather than the typical boolean\n   * values that should be handled by the tech. Note that this is not\n   * part of any specification. Valid values and what they do can be\n   * found on the autoplay getter at Player#autoplay()\n   */\n\n\n  Player.prototype.manualAutoplay_ = function manualAutoplay_(type) {\n    var _this4 = this;\n\n    if (!this.tech_ || typeof type !== 'string') {\n      return;\n    }\n\n    var muted = function muted() {\n      var previouslyMuted = _this4.muted();\n\n      _this4.muted(true);\n\n      var playPromise = _this4.play();\n\n      if (!playPromise || !playPromise.then || !playPromise.catch) {\n        return;\n      }\n\n      return playPromise.catch(function (e) {\n        // restore old value of muted on failure\n        _this4.muted(previouslyMuted);\n      });\n    };\n\n    var promise = void 0;\n\n    if (type === 'any') {\n      promise = this.play();\n\n      if (promise && promise.then && promise.catch) {\n        promise.catch(function () {\n          return muted();\n        });\n      }\n    } else if (type === 'muted') {\n      promise = muted();\n    } else {\n      promise = this.play();\n    }\n\n    if (!promise || !promise.then || !promise.catch) {\n      return;\n    }\n\n    return promise.then(function () {\n      _this4.trigger({ type: 'autoplay-success', autoplay: type });\n    }).catch(function (e) {\n      _this4.trigger({ type: 'autoplay-failure', autoplay: type });\n    });\n  };\n\n  /**\n   * Update the internal source caches so that we return the correct source from\n   * `src()`, `currentSource()`, and `currentSources()`.\n   *\n   * > Note: `currentSources` will not be updated if the source that is passed in exists\n   *         in the current `currentSources` cache.\n   *\n   *\n   * @param {Tech~SourceObject} srcObj\n   *        A string or object source to update our caches to.\n   */\n\n\n  Player.prototype.updateSourceCaches_ = function updateSourceCaches_() {\n    var srcObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n\n    var src = srcObj;\n    var type = '';\n\n    if (typeof src !== 'string') {\n      src = srcObj.src;\n      type = srcObj.type;\n    }\n\n    // if we are a blob url, don't update the source cache\n    // blob urls can arise when playback is done via Media Source Extension (MSE)\n    // such as m3u8 sources with @videojs/http-streaming (VHS)\n    if (/^blob:/.test(src)) {\n      return;\n    }\n\n    // make sure all the caches are set to default values\n    // to prevent null checking\n    this.cache_.source = this.cache_.source || {};\n    this.cache_.sources = this.cache_.sources || [];\n\n    // try to get the type of the src that was passed in\n    if (src && !type) {\n      type = findMimetype(this, src);\n    }\n\n    // update `currentSource` cache always\n    this.cache_.source = mergeOptions({}, srcObj, { src: src, type: type });\n\n    var matchingSources = this.cache_.sources.filter(function (s) {\n      return s.src && s.src === src;\n    });\n    var sourceElSources = [];\n    var sourceEls = this.$$('source');\n    var matchingSourceEls = [];\n\n    for (var i = 0; i < sourceEls.length; i++) {\n      var sourceObj = getAttributes(sourceEls[i]);\n\n      sourceElSources.push(sourceObj);\n\n      if (sourceObj.src && sourceObj.src === src) {\n        matchingSourceEls.push(sourceObj.src);\n      }\n    }\n\n    // if we have matching source els but not matching sources\n    // the current source cache is not up to date\n    if (matchingSourceEls.length && !matchingSources.length) {\n      this.cache_.sources = sourceElSources;\n      // if we don't have matching source or source els set the\n      // sources cache to the `currentSource` cache\n    } else if (!matchingSources.length) {\n      this.cache_.sources = [this.cache_.source];\n    }\n\n    // update the tech `src` cache\n    this.cache_.src = src;\n  };\n\n  /**\n   * *EXPERIMENTAL* Fired when the source is set or changed on the {@link Tech}\n   * causing the media element to reload.\n   *\n   * It will fire for the initial source and each subsequent source.\n   * This event is a custom event from Video.js and is triggered by the {@link Tech}.\n   *\n   * The event object for this event contains a `src` property that will contain the source\n   * that was available when the event was triggered. This is generally only necessary if Video.js\n   * is switching techs while the source was being changed.\n   *\n   * It is also fired when `load` is called on the player (or media element)\n   * because the {@link https://html.spec.whatwg.org/multipage/media.html#dom-media-load|specification for `load`}\n   * says that the resource selection algorithm needs to be aborted and restarted.\n   * In this case, it is very likely that the `src` property will be set to the\n   * empty string `\"\"` to indicate we do not know what the source will be but\n   * that it is changing.\n   *\n   * *This event is currently still experimental and may change in minor releases.*\n   * __To use this, pass `enableSourceset` option to the player.__\n   *\n   * @event Player#sourceset\n   * @type {EventTarget~Event}\n   * @prop {string} src\n   *                The source url available when the `sourceset` was triggered.\n   *                It will be an empty string if we cannot know what the source is\n   *                but know that the source will change.\n   */\n  /**\n   * Retrigger the `sourceset` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#sourceset\n   * @listens Tech#sourceset\n   * @private\n   */\n\n\n  Player.prototype.handleTechSourceset_ = function handleTechSourceset_(event) {\n    var _this5 = this;\n\n    // only update the source cache when the source\n    // was not updated using the player api\n    if (!this.changingSrc_) {\n      // update the source to the intial source right away\n      // in some cases this will be empty string\n      this.updateSourceCaches_(event.src);\n\n      // if the `sourceset` `src` was an empty string\n      // wait for a `loadstart` to update the cache to `currentSrc`.\n      // If a sourceset happens before a `loadstart`, we reset the state\n      // as this function will be called again.\n      if (!event.src) {\n        var updateCache = function updateCache(e) {\n          if (e.type !== 'sourceset') {\n            _this5.updateSourceCaches_(_this5.techGet_('currentSrc'));\n          }\n\n          _this5.tech_.off(['sourceset', 'loadstart'], updateCache);\n        };\n\n        this.tech_.one(['sourceset', 'loadstart'], updateCache);\n      }\n    }\n\n    this.trigger({\n      src: event.src,\n      type: 'sourceset'\n    });\n  };\n\n  /**\n   * Add/remove the vjs-has-started class\n   *\n   * @fires Player#firstplay\n   *\n   * @param {boolean} request\n   *        - true: adds the class\n   *        - false: remove the class\n   *\n   * @return {boolean}\n   *         the boolean value of hasStarted_\n   */\n\n\n  Player.prototype.hasStarted = function hasStarted(request) {\n    if (request === undefined) {\n      // act as getter, if we have no request to change\n      return this.hasStarted_;\n    }\n\n    if (request === this.hasStarted_) {\n      return;\n    }\n\n    this.hasStarted_ = request;\n\n    if (this.hasStarted_) {\n      this.addClass('vjs-has-started');\n      this.trigger('firstplay');\n    } else {\n      this.removeClass('vjs-has-started');\n    }\n  };\n\n  /**\n   * Fired whenever the media begins or resumes playback\n   *\n   * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-play}\n   * @fires Player#play\n   * @listens Tech#play\n   * @private\n   */\n\n\n  Player.prototype.handleTechPlay_ = function handleTechPlay_() {\n    this.removeClass('vjs-ended');\n    this.removeClass('vjs-paused');\n    this.addClass('vjs-playing');\n\n    // hide the poster when the user hits play\n    this.hasStarted(true);\n    /**\n     * Triggered whenever an {@link Tech#play} event happens. Indicates that\n     * playback has started or resumed.\n     *\n     * @event Player#play\n     * @type {EventTarget~Event}\n     */\n    this.trigger('play');\n  };\n\n  /**\n   * Retrigger the `ratechange` event that was triggered by the {@link Tech}.\n   *\n   * If there were any events queued while the playback rate was zero, fire\n   * those events now.\n   *\n   * @private\n   * @method Player#handleTechRateChange_\n   * @fires Player#ratechange\n   * @listens Tech#ratechange\n   */\n\n\n  Player.prototype.handleTechRateChange_ = function handleTechRateChange_() {\n    if (this.tech_.playbackRate() > 0 && this.cache_.lastPlaybackRate === 0) {\n      this.queuedCallbacks_.forEach(function (queued) {\n        return queued.callback(queued.event);\n      });\n      this.queuedCallbacks_ = [];\n    }\n    this.cache_.lastPlaybackRate = this.tech_.playbackRate();\n    /**\n     * Fires when the playing speed of the audio/video is changed\n     *\n     * @event Player#ratechange\n     * @type {event}\n     */\n    this.trigger('ratechange');\n  };\n\n  /**\n   * Retrigger the `waiting` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#waiting\n   * @listens Tech#waiting\n   * @private\n   */\n\n\n  Player.prototype.handleTechWaiting_ = function handleTechWaiting_() {\n    var _this6 = this;\n\n    this.addClass('vjs-waiting');\n    /**\n     * A readyState change on the DOM element has caused playback to stop.\n     *\n     * @event Player#waiting\n     * @type {EventTarget~Event}\n     */\n    this.trigger('waiting');\n    this.one('timeupdate', function () {\n      return _this6.removeClass('vjs-waiting');\n    });\n  };\n\n  /**\n   * Retrigger the `canplay` event that was triggered by the {@link Tech}.\n   * > Note: This is not consistent between browsers. See #1351\n   *\n   * @fires Player#canplay\n   * @listens Tech#canplay\n   * @private\n   */\n\n\n  Player.prototype.handleTechCanPlay_ = function handleTechCanPlay_() {\n    this.removeClass('vjs-waiting');\n    /**\n     * The media has a readyState of HAVE_FUTURE_DATA or greater.\n     *\n     * @event Player#canplay\n     * @type {EventTarget~Event}\n     */\n    this.trigger('canplay');\n  };\n\n  /**\n   * Retrigger the `canplaythrough` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#canplaythrough\n   * @listens Tech#canplaythrough\n   * @private\n   */\n\n\n  Player.prototype.handleTechCanPlayThrough_ = function handleTechCanPlayThrough_() {\n    this.removeClass('vjs-waiting');\n    /**\n     * The media has a readyState of HAVE_ENOUGH_DATA or greater. This means that the\n     * entire media file can be played without buffering.\n     *\n     * @event Player#canplaythrough\n     * @type {EventTarget~Event}\n     */\n    this.trigger('canplaythrough');\n  };\n\n  /**\n   * Retrigger the `playing` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#playing\n   * @listens Tech#playing\n   * @private\n   */\n\n\n  Player.prototype.handleTechPlaying_ = function handleTechPlaying_() {\n    this.removeClass('vjs-waiting');\n    /**\n     * The media is no longer blocked from playback, and has started playing.\n     *\n     * @event Player#playing\n     * @type {EventTarget~Event}\n     */\n    this.trigger('playing');\n  };\n\n  /**\n   * Retrigger the `seeking` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#seeking\n   * @listens Tech#seeking\n   * @private\n   */\n\n\n  Player.prototype.handleTechSeeking_ = function handleTechSeeking_() {\n    this.addClass('vjs-seeking');\n    /**\n     * Fired whenever the player is jumping to a new time\n     *\n     * @event Player#seeking\n     * @type {EventTarget~Event}\n     */\n    this.trigger('seeking');\n  };\n\n  /**\n   * Retrigger the `seeked` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#seeked\n   * @listens Tech#seeked\n   * @private\n   */\n\n\n  Player.prototype.handleTechSeeked_ = function handleTechSeeked_() {\n    this.removeClass('vjs-seeking');\n    /**\n     * Fired when the player has finished jumping to a new time\n     *\n     * @event Player#seeked\n     * @type {EventTarget~Event}\n     */\n    this.trigger('seeked');\n  };\n\n  /**\n   * Retrigger the `firstplay` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#firstplay\n   * @listens Tech#firstplay\n   * @deprecated As of 6.0 firstplay event is deprecated.\n   *             As of 6.0 passing the `starttime` option to the player and the firstplay event are deprecated.\n   * @private\n   */\n\n\n  Player.prototype.handleTechFirstPlay_ = function handleTechFirstPlay_() {\n    // If the first starttime attribute is specified\n    // then we will start at the given offset in seconds\n    if (this.options_.starttime) {\n      log$1.warn('Passing the `starttime` option to the player will be deprecated in 6.0');\n      this.currentTime(this.options_.starttime);\n    }\n\n    this.addClass('vjs-has-started');\n    /**\n     * Fired the first time a video is played. Not part of the HLS spec, and this is\n     * probably not the best implementation yet, so use sparingly. If you don't have a\n     * reason to prevent playback, use `myPlayer.one('play');` instead.\n     *\n     * @event Player#firstplay\n     * @deprecated As of 6.0 firstplay event is deprecated.\n     * @type {EventTarget~Event}\n     */\n    this.trigger('firstplay');\n  };\n\n  /**\n   * Retrigger the `pause` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#pause\n   * @listens Tech#pause\n   * @private\n   */\n\n\n  Player.prototype.handleTechPause_ = function handleTechPause_() {\n    this.removeClass('vjs-playing');\n    this.addClass('vjs-paused');\n    /**\n     * Fired whenever the media has been paused\n     *\n     * @event Player#pause\n     * @type {EventTarget~Event}\n     */\n    this.trigger('pause');\n  };\n\n  /**\n   * Retrigger the `ended` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#ended\n   * @listens Tech#ended\n   * @private\n   */\n\n\n  Player.prototype.handleTechEnded_ = function handleTechEnded_() {\n    this.addClass('vjs-ended');\n    if (this.options_.loop) {\n      this.currentTime(0);\n      this.play();\n    } else if (!this.paused()) {\n      this.pause();\n    }\n\n    /**\n     * Fired when the end of the media resource is reached (currentTime == duration)\n     *\n     * @event Player#ended\n     * @type {EventTarget~Event}\n     */\n    this.trigger('ended');\n  };\n\n  /**\n   * Fired when the duration of the media resource is first known or changed\n   *\n   * @listens Tech#durationchange\n   * @private\n   */\n\n\n  Player.prototype.handleTechDurationChange_ = function handleTechDurationChange_() {\n    this.duration(this.techGet_('duration'));\n  };\n\n  /**\n   * Handle a click on the media element to play/pause\n   *\n   * @param {EventTarget~Event} event\n   *        the event that caused this function to trigger\n   *\n   * @listens Tech#mousedown\n   * @private\n   */\n\n\n  Player.prototype.handleTechClick_ = function handleTechClick_(event) {\n    if (!isSingleLeftClick(event)) {\n      return;\n    }\n\n    // When controls are disabled a click should not toggle playback because\n    // the click is considered a control\n    if (!this.controls_) {\n      return;\n    }\n\n    if (this.paused()) {\n      silencePromise(this.play());\n    } else {\n      this.pause();\n    }\n  };\n\n  /**\n   * Handle a double-click on the media element to enter/exit fullscreen\n   *\n   * @param {EventTarget~Event} event\n   *        the event that caused this function to trigger\n   *\n   * @listens Tech#dblclick\n   * @private\n   */\n\n\n  Player.prototype.handleTechDoubleClick_ = function handleTechDoubleClick_(event) {\n    if (!this.controls_) {\n      return;\n    }\n\n    // we do not want to toggle fullscreen state\n    // when double-clicking inside a control bar or a modal\n    var inAllowedEls = Array.prototype.some.call(this.$$('.vjs-control-bar, .vjs-modal-dialog'), function (el) {\n      return el.contains(event.target);\n    });\n\n    if (!inAllowedEls) {\n      if (this.isFullscreen()) {\n        this.exitFullscreen();\n      } else {\n        this.requestFullscreen();\n      }\n    }\n  };\n\n  /**\n   * Handle a tap on the media element. It will toggle the user\n   * activity state, which hides and shows the controls.\n   *\n   * @listens Tech#tap\n   * @private\n   */\n\n\n  Player.prototype.handleTechTap_ = function handleTechTap_() {\n    this.userActive(!this.userActive());\n  };\n\n  /**\n   * Handle touch to start\n   *\n   * @listens Tech#touchstart\n   * @private\n   */\n\n\n  Player.prototype.handleTechTouchStart_ = function handleTechTouchStart_() {\n    this.userWasActive = this.userActive();\n  };\n\n  /**\n   * Handle touch to move\n   *\n   * @listens Tech#touchmove\n   * @private\n   */\n\n\n  Player.prototype.handleTechTouchMove_ = function handleTechTouchMove_() {\n    if (this.userWasActive) {\n      this.reportUserActivity();\n    }\n  };\n\n  /**\n   * Handle touch to end\n   *\n   * @param {EventTarget~Event} event\n   *        the touchend event that triggered\n   *        this function\n   *\n   * @listens Tech#touchend\n   * @private\n   */\n\n\n  Player.prototype.handleTechTouchEnd_ = function handleTechTouchEnd_(event) {\n    // Stop the mouse events from also happening\n    event.preventDefault();\n  };\n\n  /**\n   * Fired when the player switches in or out of fullscreen mode\n   *\n   * @private\n   * @listens Player#fullscreenchange\n   */\n\n\n  Player.prototype.handleFullscreenChange_ = function handleFullscreenChange_() {\n    if (this.isFullscreen()) {\n      this.addClass('vjs-fullscreen');\n    } else {\n      this.removeClass('vjs-fullscreen');\n    }\n  };\n\n  /**\n   * native click events on the SWF aren't triggered on IE11, Win8.1RT\n   * use stageclick events triggered from inside the SWF instead\n   *\n   * @private\n   * @listens stageclick\n   */\n\n\n  Player.prototype.handleStageClick_ = function handleStageClick_() {\n    this.reportUserActivity();\n  };\n\n  /**\n   * Handle Tech Fullscreen Change\n   *\n   * @param {EventTarget~Event} event\n   *        the fullscreenchange event that triggered this function\n   *\n   * @param {Object} data\n   *        the data that was sent with the event\n   *\n   * @private\n   * @listens Tech#fullscreenchange\n   * @fires Player#fullscreenchange\n   */\n\n\n  Player.prototype.handleTechFullscreenChange_ = function handleTechFullscreenChange_(event, data) {\n    if (data) {\n      this.isFullscreen(data.isFullscreen);\n    }\n    /**\n     * Fired when going in and out of fullscreen.\n     *\n     * @event Player#fullscreenchange\n     * @type {EventTarget~Event}\n     */\n    this.trigger('fullscreenchange');\n  };\n\n  /**\n   * Fires when an error occurred during the loading of an audio/video.\n   *\n   * @private\n   * @listens Tech#error\n   */\n\n\n  Player.prototype.handleTechError_ = function handleTechError_() {\n    var error = this.tech_.error();\n\n    this.error(error);\n  };\n\n  /**\n   * Retrigger the `textdata` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#textdata\n   * @listens Tech#textdata\n   * @private\n   */\n\n\n  Player.prototype.handleTechTextData_ = function handleTechTextData_() {\n    var data = null;\n\n    if (arguments.length > 1) {\n      data = arguments[1];\n    }\n\n    /**\n     * Fires when we get a textdata event from tech\n     *\n     * @event Player#textdata\n     * @type {EventTarget~Event}\n     */\n    this.trigger('textdata', data);\n  };\n\n  /**\n   * Get object for cached values.\n   *\n   * @return {Object}\n   *         get the current object cache\n   */\n\n\n  Player.prototype.getCache = function getCache() {\n    return this.cache_;\n  };\n\n  /**\n   * Pass values to the playback tech\n   *\n   * @param {string} [method]\n   *        the method to call\n   *\n   * @param {Object} arg\n   *        the argument to pass\n   *\n   * @private\n   */\n\n\n  Player.prototype.techCall_ = function techCall_(method, arg) {\n    // If it's not ready yet, call method when it is\n\n    this.ready(function () {\n      if (method in allowedSetters) {\n        return set$1(this.middleware_, this.tech_, method, arg);\n      } else if (method in allowedMediators) {\n        return mediate(this.middleware_, this.tech_, method, arg);\n      }\n\n      try {\n        if (this.tech_) {\n          this.tech_[method](arg);\n        }\n      } catch (e) {\n        log$1(e);\n        throw e;\n      }\n    }, true);\n  };\n\n  /**\n   * Get calls can't wait for the tech, and sometimes don't need to.\n   *\n   * @param {string} method\n   *        Tech method\n   *\n   * @return {Function|undefined}\n   *         the method or undefined\n   *\n   * @private\n   */\n\n\n  Player.prototype.techGet_ = function techGet_(method) {\n    if (!this.tech_ || !this.tech_.isReady_) {\n      return;\n    }\n\n    if (method in allowedGetters) {\n      return get$1(this.middleware_, this.tech_, method);\n    } else if (method in allowedMediators) {\n      return mediate(this.middleware_, this.tech_, method);\n    }\n\n    // Flash likes to die and reload when you hide or reposition it.\n    // In these cases the object methods go away and we get errors.\n    // When that happens we'll catch the errors and inform tech that it's not ready any more.\n    try {\n      return this.tech_[method]();\n    } catch (e) {\n\n      // When building additional tech libs, an expected method may not be defined yet\n      if (this.tech_[method] === undefined) {\n        log$1('Video.js: ' + method + ' method not defined for ' + this.techName_ + ' playback technology.', e);\n        throw e;\n      }\n\n      // When a method isn't available on the object it throws a TypeError\n      if (e.name === 'TypeError') {\n        log$1('Video.js: ' + method + ' unavailable on ' + this.techName_ + ' playback technology element.', e);\n        this.tech_.isReady_ = false;\n        throw e;\n      }\n\n      // If error unknown, just log and throw\n      log$1(e);\n      throw e;\n    }\n  };\n\n  /**\n   * Attempt to begin playback at the first opportunity.\n   *\n   * @return {Promise|undefined}\n   *         Returns a promise if the browser supports Promises (or one\n   *         was passed in as an option). This promise will be resolved on\n   *         the return value of play. If this is undefined it will fulfill the\n   *         promise chain otherwise the promise chain will be fulfilled when\n   *         the promise from play is fulfilled.\n   */\n\n\n  Player.prototype.play = function play() {\n    var _this7 = this;\n\n    var PromiseClass = this.options_.Promise || window$1.Promise;\n\n    if (PromiseClass) {\n      return new PromiseClass(function (resolve) {\n        _this7.play_(resolve);\n      });\n    }\n\n    return this.play_();\n  };\n\n  /**\n   * The actual logic for play, takes a callback that will be resolved on the\n   * return value of play. This allows us to resolve to the play promise if there\n   * is one on modern browsers.\n   *\n   * @private\n   * @param {Function} [callback]\n   *        The callback that should be called when the techs play is actually called\n   */\n\n\n  Player.prototype.play_ = function play_() {\n    var _this8 = this;\n\n    var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : silencePromise;\n\n    // If this is called while we have a play queued up on a loadstart, remove\n    // that listener to avoid getting in a potentially bad state.\n    if (this.playOnLoadstart_) {\n      this.off('loadstart', this.playOnLoadstart_);\n    }\n\n    // If the player/tech is not ready, queue up another call to `play()` for\n    // when it is. This will loop back into this method for another attempt at\n    // playback when the tech is ready.\n    if (!this.isReady_) {\n\n      // Bail out if we're already waiting for `ready`!\n      if (this.playWaitingForReady_) {\n        return;\n      }\n\n      this.playWaitingForReady_ = true;\n      this.ready(function () {\n        _this8.playWaitingForReady_ = false;\n        callback(_this8.play());\n      });\n\n      // If the player/tech is ready and we have a source, we can attempt playback.\n    } else if (!this.changingSrc_ && (this.src() || this.currentSrc())) {\n      callback(this.techGet_('play'));\n      return;\n\n      // If the tech is ready, but we do not have a source, we'll need to wait\n      // for both the `ready` and a `loadstart` when the source is finally\n      // resolved by middleware and set on the player.\n      //\n      // This can happen if `play()` is called while changing sources or before\n      // one has been set on the player.\n    } else {\n\n      this.playOnLoadstart_ = function () {\n        _this8.playOnLoadstart_ = null;\n        callback(_this8.play());\n      };\n\n      this.one('loadstart', this.playOnLoadstart_);\n    }\n  };\n\n  /**\n   * Pause the video playback\n   *\n   * @return {Player}\n   *         A reference to the player object this function was called on\n   */\n\n\n  Player.prototype.pause = function pause() {\n    this.techCall_('pause');\n  };\n\n  /**\n   * Check if the player is paused or has yet to play\n   *\n   * @return {boolean}\n   *         - false: if the media is currently playing\n   *         - true: if media is not currently playing\n   */\n\n\n  Player.prototype.paused = function paused() {\n    // The initial state of paused should be true (in Safari it's actually false)\n    return this.techGet_('paused') === false ? false : true;\n  };\n\n  /**\n   * Get a TimeRange object representing the current ranges of time that the user\n   * has played.\n   *\n   * @return {TimeRange}\n   *         A time range object that represents all the increments of time that have\n   *         been played.\n   */\n\n\n  Player.prototype.played = function played() {\n    return this.techGet_('played') || createTimeRanges(0, 0);\n  };\n\n  /**\n   * Returns whether or not the user is \"scrubbing\". Scrubbing is\n   * when the user has clicked the progress bar handle and is\n   * dragging it along the progress bar.\n   *\n   * @param {boolean} [isScrubbing]\n   *        whether the user is or is not scrubbing\n   *\n   * @return {boolean}\n   *         The value of scrubbing when getting\n   */\n\n\n  Player.prototype.scrubbing = function scrubbing(isScrubbing) {\n    if (typeof isScrubbing === 'undefined') {\n      return this.scrubbing_;\n    }\n    this.scrubbing_ = !!isScrubbing;\n\n    if (isScrubbing) {\n      this.addClass('vjs-scrubbing');\n    } else {\n      this.removeClass('vjs-scrubbing');\n    }\n  };\n\n  /**\n   * Get or set the current time (in seconds)\n   *\n   * @param {number|string} [seconds]\n   *        The time to seek to in seconds\n   *\n   * @return {number}\n   *         - the current time in seconds when getting\n   */\n\n\n  Player.prototype.currentTime = function currentTime(seconds) {\n    if (typeof seconds !== 'undefined') {\n      if (seconds < 0) {\n        seconds = 0;\n      }\n      this.techCall_('setCurrentTime', seconds);\n      return;\n    }\n\n    // cache last currentTime and return. default to 0 seconds\n    //\n    // Caching the currentTime is meant to prevent a massive amount of reads on the tech's\n    // currentTime when scrubbing, but may not provide much performance benefit afterall.\n    // Should be tested. Also something has to read the actual current time or the cache will\n    // never get updated.\n    this.cache_.currentTime = this.techGet_('currentTime') || 0;\n    return this.cache_.currentTime;\n  };\n\n  /**\n   * Normally gets the length in time of the video in seconds;\n   * in all but the rarest use cases an argument will NOT be passed to the method\n   *\n   * > **NOTE**: The video must have started loading before the duration can be\n   * known, and in the case of Flash, may not be known until the video starts\n   * playing.\n   *\n   * @fires Player#durationchange\n   *\n   * @param {number} [seconds]\n   *        The duration of the video to set in seconds\n   *\n   * @return {number}\n   *         - The duration of the video in seconds when getting\n   */\n\n\n  Player.prototype.duration = function duration(seconds) {\n    if (seconds === undefined) {\n      // return NaN if the duration is not known\n      return this.cache_.duration !== undefined ? this.cache_.duration : NaN;\n    }\n\n    seconds = parseFloat(seconds);\n\n    // Standardize on Infinity for signaling video is live\n    if (seconds < 0) {\n      seconds = Infinity;\n    }\n\n    if (seconds !== this.cache_.duration) {\n      // Cache the last set value for optimized scrubbing (esp. Flash)\n      this.cache_.duration = seconds;\n\n      if (seconds === Infinity) {\n        this.addClass('vjs-live');\n      } else {\n        this.removeClass('vjs-live');\n      }\n      /**\n       * @event Player#durationchange\n       * @type {EventTarget~Event}\n       */\n      this.trigger('durationchange');\n    }\n  };\n\n  /**\n   * Calculates how much time is left in the video. Not part\n   * of the native video API.\n   *\n   * @return {number}\n   *         The time remaining in seconds\n   */\n\n\n  Player.prototype.remainingTime = function remainingTime() {\n    return this.duration() - this.currentTime();\n  };\n\n  /**\n   * A remaining time function that is intented to be used when\n   * the time is to be displayed directly to the user.\n   *\n   * @return {number}\n   *         The rounded time remaining in seconds\n   */\n\n\n  Player.prototype.remainingTimeDisplay = function remainingTimeDisplay() {\n    return Math.floor(this.duration()) - Math.floor(this.currentTime());\n  };\n\n  //\n  // Kind of like an array of portions of the video that have been downloaded.\n\n  /**\n   * Get a TimeRange object with an array of the times of the video\n   * that have been downloaded. If you just want the percent of the\n   * video that's been downloaded, use bufferedPercent.\n   *\n   * @see [Buffered Spec]{@link http://dev.w3.org/html5/spec/video.html#dom-media-buffered}\n   *\n   * @return {TimeRange}\n   *         A mock TimeRange object (following HTML spec)\n   */\n\n\n  Player.prototype.buffered = function buffered() {\n    var buffered = this.techGet_('buffered');\n\n    if (!buffered || !buffered.length) {\n      buffered = createTimeRanges(0, 0);\n    }\n\n    return buffered;\n  };\n\n  /**\n   * Get the percent (as a decimal) of the video that's been downloaded.\n   * This method is not a part of the native HTML video API.\n   *\n   * @return {number}\n   *         A decimal between 0 and 1 representing the percent\n   *         that is buffered 0 being 0% and 1 being 100%\n   */\n\n\n  Player.prototype.bufferedPercent = function bufferedPercent$$1() {\n    return bufferedPercent(this.buffered(), this.duration());\n  };\n\n  /**\n   * Get the ending time of the last buffered time range\n   * This is used in the progress bar to encapsulate all time ranges.\n   *\n   * @return {number}\n   *         The end of the last buffered time range\n   */\n\n\n  Player.prototype.bufferedEnd = function bufferedEnd() {\n    var buffered = this.buffered();\n    var duration = this.duration();\n    var end = buffered.end(buffered.length - 1);\n\n    if (end > duration) {\n      end = duration;\n    }\n\n    return end;\n  };\n\n  /**\n   * Get or set the current volume of the media\n   *\n   * @param  {number} [percentAsDecimal]\n   *         The new volume as a decimal percent:\n   *         - 0 is muted/0%/off\n   *         - 1.0 is 100%/full\n   *         - 0.5 is half volume or 50%\n   *\n   * @return {number}\n   *         The current volume as a percent when getting\n   */\n\n\n  Player.prototype.volume = function volume(percentAsDecimal) {\n    var vol = void 0;\n\n    if (percentAsDecimal !== undefined) {\n      // Force value to between 0 and 1\n      vol = Math.max(0, Math.min(1, parseFloat(percentAsDecimal)));\n      this.cache_.volume = vol;\n      this.techCall_('setVolume', vol);\n\n      if (vol > 0) {\n        this.lastVolume_(vol);\n      }\n\n      return;\n    }\n\n    // Default to 1 when returning current volume.\n    vol = parseFloat(this.techGet_('volume'));\n    return isNaN(vol) ? 1 : vol;\n  };\n\n  /**\n   * Get the current muted state, or turn mute on or off\n   *\n   * @param {boolean} [muted]\n   *        - true to mute\n   *        - false to unmute\n   *\n   * @return {boolean}\n   *         - true if mute is on and getting\n   *         - false if mute is off and getting\n   */\n\n\n  Player.prototype.muted = function muted(_muted) {\n    if (_muted !== undefined) {\n      this.techCall_('setMuted', _muted);\n      return;\n    }\n    return this.techGet_('muted') || false;\n  };\n\n  /**\n   * Get the current defaultMuted state, or turn defaultMuted on or off. defaultMuted\n   * indicates the state of muted on initial playback.\n   *\n   * ```js\n   *   var myPlayer = videojs('some-player-id');\n   *\n   *   myPlayer.src(\"http://www.example.com/path/to/video.mp4\");\n   *\n   *   // get, should be false\n   *   console.log(myPlayer.defaultMuted());\n   *   // set to true\n   *   myPlayer.defaultMuted(true);\n   *   // get should be true\n   *   console.log(myPlayer.defaultMuted());\n   * ```\n   *\n   * @param {boolean} [defaultMuted]\n   *        - true to mute\n   *        - false to unmute\n   *\n   * @return {boolean|Player}\n   *         - true if defaultMuted is on and getting\n   *         - false if defaultMuted is off and getting\n   *         - A reference to the current player when setting\n   */\n\n\n  Player.prototype.defaultMuted = function defaultMuted(_defaultMuted) {\n    if (_defaultMuted !== undefined) {\n      return this.techCall_('setDefaultMuted', _defaultMuted);\n    }\n    return this.techGet_('defaultMuted') || false;\n  };\n\n  /**\n   * Get the last volume, or set it\n   *\n   * @param  {number} [percentAsDecimal]\n   *         The new last volume as a decimal percent:\n   *         - 0 is muted/0%/off\n   *         - 1.0 is 100%/full\n   *         - 0.5 is half volume or 50%\n   *\n   * @return {number}\n   *         the current value of lastVolume as a percent when getting\n   *\n   * @private\n   */\n\n\n  Player.prototype.lastVolume_ = function lastVolume_(percentAsDecimal) {\n    if (percentAsDecimal !== undefined && percentAsDecimal !== 0) {\n      this.cache_.lastVolume = percentAsDecimal;\n      return;\n    }\n    return this.cache_.lastVolume;\n  };\n\n  /**\n   * Check if current tech can support native fullscreen\n   * (e.g. with built in controls like iOS, so not our flash swf)\n   *\n   * @return {boolean}\n   *         if native fullscreen is supported\n   */\n\n\n  Player.prototype.supportsFullScreen = function supportsFullScreen() {\n    return this.techGet_('supportsFullScreen') || false;\n  };\n\n  /**\n   * Check if the player is in fullscreen mode or tell the player that it\n   * is or is not in fullscreen mode.\n   *\n   * > NOTE: As of the latest HTML5 spec, isFullscreen is no longer an official\n   * property and instead document.fullscreenElement is used. But isFullscreen is\n   * still a valuable property for internal player workings.\n   *\n   * @param  {boolean} [isFS]\n   *         Set the players current fullscreen state\n   *\n   * @return {boolean}\n   *         - true if fullscreen is on and getting\n   *         - false if fullscreen is off and getting\n   */\n\n\n  Player.prototype.isFullscreen = function isFullscreen(isFS) {\n    if (isFS !== undefined) {\n      this.isFullscreen_ = !!isFS;\n      return;\n    }\n    return !!this.isFullscreen_;\n  };\n\n  /**\n   * Increase the size of the video to full screen\n   * In some browsers, full screen is not supported natively, so it enters\n   * \"full window mode\", where the video fills the browser window.\n   * In browsers and devices that support native full screen, sometimes the\n   * browser's default controls will be shown, and not the Video.js custom skin.\n   * This includes most mobile devices (iOS, Android) and older versions of\n   * Safari.\n   *\n   * @fires Player#fullscreenchange\n   */\n\n\n  Player.prototype.requestFullscreen = function requestFullscreen() {\n    var fsApi = FullscreenApi;\n\n    this.isFullscreen(true);\n\n    if (fsApi.requestFullscreen) {\n      // the browser supports going fullscreen at the element level so we can\n      // take the controls fullscreen as well as the video\n\n      // Trigger fullscreenchange event after change\n      // We have to specifically add this each time, and remove\n      // when canceling fullscreen. Otherwise if there's multiple\n      // players on a page, they would all be reacting to the same fullscreen\n      // events\n      on(document, fsApi.fullscreenchange, bind(this, function documentFullscreenChange(e) {\n        this.isFullscreen(document[fsApi.fullscreenElement]);\n\n        // If cancelling fullscreen, remove event listener.\n        if (this.isFullscreen() === false) {\n          off(document, fsApi.fullscreenchange, documentFullscreenChange);\n        }\n        /**\n         * @event Player#fullscreenchange\n         * @type {EventTarget~Event}\n         */\n        this.trigger('fullscreenchange');\n      }));\n\n      this.el_[fsApi.requestFullscreen]();\n    } else if (this.tech_.supportsFullScreen()) {\n      // we can't take the video.js controls fullscreen but we can go fullscreen\n      // with native controls\n      this.techCall_('enterFullScreen');\n    } else {\n      // fullscreen isn't supported so we'll just stretch the video element to\n      // fill the viewport\n      this.enterFullWindow();\n      /**\n       * @event Player#fullscreenchange\n       * @type {EventTarget~Event}\n       */\n      this.trigger('fullscreenchange');\n    }\n  };\n\n  /**\n   * Return the video to its normal size after having been in full screen mode\n   *\n   * @fires Player#fullscreenchange\n   */\n\n\n  Player.prototype.exitFullscreen = function exitFullscreen() {\n    var fsApi = FullscreenApi;\n\n    this.isFullscreen(false);\n\n    // Check for browser element fullscreen support\n    if (fsApi.requestFullscreen) {\n      document[fsApi.exitFullscreen]();\n    } else if (this.tech_.supportsFullScreen()) {\n      this.techCall_('exitFullScreen');\n    } else {\n      this.exitFullWindow();\n      /**\n       * @event Player#fullscreenchange\n       * @type {EventTarget~Event}\n       */\n      this.trigger('fullscreenchange');\n    }\n  };\n\n  /**\n   * When fullscreen isn't supported we can stretch the\n   * video container to as wide as the browser will let us.\n   *\n   * @fires Player#enterFullWindow\n   */\n\n\n  Player.prototype.enterFullWindow = function enterFullWindow() {\n    this.isFullWindow = true;\n\n    // Storing original doc overflow value to return to when fullscreen is off\n    this.docOrigOverflow = document.documentElement.style.overflow;\n\n    // Add listener for esc key to exit fullscreen\n    on(document, 'keydown', bind(this, this.fullWindowOnEscKey));\n\n    // Hide any scroll bars\n    document.documentElement.style.overflow = 'hidden';\n\n    // Apply fullscreen styles\n    addClass(document.body, 'vjs-full-window');\n\n    /**\n     * @event Player#enterFullWindow\n     * @type {EventTarget~Event}\n     */\n    this.trigger('enterFullWindow');\n  };\n\n  /**\n   * Check for call to either exit full window or\n   * full screen on ESC key\n   *\n   * @param {string} event\n   *        Event to check for key press\n   */\n\n\n  Player.prototype.fullWindowOnEscKey = function fullWindowOnEscKey(event) {\n    if (event.keyCode === 27) {\n      if (this.isFullscreen() === true) {\n        this.exitFullscreen();\n      } else {\n        this.exitFullWindow();\n      }\n    }\n  };\n\n  /**\n   * Exit full window\n   *\n   * @fires Player#exitFullWindow\n   */\n\n\n  Player.prototype.exitFullWindow = function exitFullWindow() {\n    this.isFullWindow = false;\n    off(document, 'keydown', this.fullWindowOnEscKey);\n\n    // Unhide scroll bars.\n    document.documentElement.style.overflow = this.docOrigOverflow;\n\n    // Remove fullscreen styles\n    removeClass(document.body, 'vjs-full-window');\n\n    // Resize the box, controller, and poster to original sizes\n    // this.positionAll();\n    /**\n     * @event Player#exitFullWindow\n     * @type {EventTarget~Event}\n     */\n    this.trigger('exitFullWindow');\n  };\n\n  /**\n   * Check whether the player can play a given mimetype\n   *\n   * @see https://www.w3.org/TR/2011/WD-html5-20110113/video.html#dom-navigator-canplaytype\n   *\n   * @param {string} type\n   *        The mimetype to check\n   *\n   * @return {string}\n   *         'probably', 'maybe', or '' (empty string)\n   */\n\n\n  Player.prototype.canPlayType = function canPlayType(type) {\n    var can = void 0;\n\n    // Loop through each playback technology in the options order\n    for (var i = 0, j = this.options_.techOrder; i < j.length; i++) {\n      var techName = j[i];\n      var tech = Tech.getTech(techName);\n\n      // Support old behavior of techs being registered as components.\n      // Remove once that deprecated behavior is removed.\n      if (!tech) {\n        tech = Component.getComponent(techName);\n      }\n\n      // Check if the current tech is defined before continuing\n      if (!tech) {\n        log$1.error('The \"' + techName + '\" tech is undefined. Skipped browser support check for that tech.');\n        continue;\n      }\n\n      // Check if the browser supports this technology\n      if (tech.isSupported()) {\n        can = tech.canPlayType(type);\n\n        if (can) {\n          return can;\n        }\n      }\n    }\n\n    return '';\n  };\n\n  /**\n   * Select source based on tech-order or source-order\n   * Uses source-order selection if `options.sourceOrder` is truthy. Otherwise,\n   * defaults to tech-order selection\n   *\n   * @param {Array} sources\n   *        The sources for a media asset\n   *\n   * @return {Object|boolean}\n   *         Object of source and tech order or false\n   */\n\n\n  Player.prototype.selectSource = function selectSource(sources) {\n    var _this9 = this;\n\n    // Get only the techs specified in `techOrder` that exist and are supported by the\n    // current platform\n    var techs = this.options_.techOrder.map(function (techName) {\n      return [techName, Tech.getTech(techName)];\n    }).filter(function (_ref) {\n      var techName = _ref[0],\n          tech = _ref[1];\n\n      // Check if the current tech is defined before continuing\n      if (tech) {\n        // Check if the browser supports this technology\n        return tech.isSupported();\n      }\n\n      log$1.error('The \"' + techName + '\" tech is undefined. Skipped browser support check for that tech.');\n      return false;\n    });\n\n    // Iterate over each `innerArray` element once per `outerArray` element and execute\n    // `tester` with both. If `tester` returns a non-falsy value, exit early and return\n    // that value.\n    var findFirstPassingTechSourcePair = function findFirstPassingTechSourcePair(outerArray, innerArray, tester) {\n      var found = void 0;\n\n      outerArray.some(function (outerChoice) {\n        return innerArray.some(function (innerChoice) {\n          found = tester(outerChoice, innerChoice);\n\n          if (found) {\n            return true;\n          }\n        });\n      });\n\n      return found;\n    };\n\n    var foundSourceAndTech = void 0;\n    var flip = function flip(fn) {\n      return function (a, b) {\n        return fn(b, a);\n      };\n    };\n    var finder = function finder(_ref2, source) {\n      var techName = _ref2[0],\n          tech = _ref2[1];\n\n      if (tech.canPlaySource(source, _this9.options_[techName.toLowerCase()])) {\n        return { source: source, tech: techName };\n      }\n    };\n\n    // Depending on the truthiness of `options.sourceOrder`, we swap the order of techs and sources\n    // to select from them based on their priority.\n    if (this.options_.sourceOrder) {\n      // Source-first ordering\n      foundSourceAndTech = findFirstPassingTechSourcePair(sources, techs, flip(finder));\n    } else {\n      // Tech-first ordering\n      foundSourceAndTech = findFirstPassingTechSourcePair(techs, sources, finder);\n    }\n\n    return foundSourceAndTech || false;\n  };\n\n  /**\n   * Get or set the video source.\n   *\n   * @param {Tech~SourceObject|Tech~SourceObject[]|string} [source]\n   *        A SourceObject, an array of SourceObjects, or a string referencing\n   *        a URL to a media source. It is _highly recommended_ that an object\n   *        or array of objects is used here, so that source selection\n   *        algorithms can take the `type` into account.\n   *\n   *        If not provided, this method acts as a getter.\n   *\n   * @return {string|undefined}\n   *         If the `source` argument is missing, returns the current source\n   *         URL. Otherwise, returns nothing/undefined.\n   */\n\n\n  Player.prototype.src = function src(source) {\n    var _this10 = this;\n\n    // getter usage\n    if (typeof source === 'undefined') {\n      return this.cache_.src || '';\n    }\n    // filter out invalid sources and turn our source into\n    // an array of source objects\n    var sources = filterSource(source);\n\n    // if a source was passed in then it is invalid because\n    // it was filtered to a zero length Array. So we have to\n    // show an error\n    if (!sources.length) {\n      this.setTimeout(function () {\n        this.error({ code: 4, message: this.localize(this.options_.notSupportedMessage) });\n      }, 0);\n      return;\n    }\n\n    // intial sources\n    this.changingSrc_ = true;\n\n    this.cache_.sources = sources;\n    this.updateSourceCaches_(sources[0]);\n\n    // middlewareSource is the source after it has been changed by middleware\n    setSource(this, sources[0], function (middlewareSource, mws) {\n      _this10.middleware_ = mws;\n\n      // since sourceSet is async we have to update the cache again after we select a source since\n      // the source that is selected could be out of order from the cache update above this callback.\n      _this10.cache_.sources = sources;\n      _this10.updateSourceCaches_(middlewareSource);\n\n      var err = _this10.src_(middlewareSource);\n\n      if (err) {\n        if (sources.length > 1) {\n          return _this10.src(sources.slice(1));\n        }\n\n        _this10.changingSrc_ = false;\n\n        // We need to wrap this in a timeout to give folks a chance to add error event handlers\n        _this10.setTimeout(function () {\n          this.error({ code: 4, message: this.localize(this.options_.notSupportedMessage) });\n        }, 0);\n\n        // we could not find an appropriate tech, but let's still notify the delegate that this is it\n        // this needs a better comment about why this is needed\n        _this10.triggerReady();\n\n        return;\n      }\n\n      setTech(mws, _this10.tech_);\n    });\n  };\n\n  /**\n   * Set the source object on the tech, returns a boolean that indicates whether\n   * there is a tech that can play the source or not\n   *\n   * @param {Tech~SourceObject} source\n   *        The source object to set on the Tech\n   *\n   * @return {Boolean}\n   *         - True if there is no Tech to playback this source\n   *         - False otherwise\n   *\n   * @private\n   */\n\n\n  Player.prototype.src_ = function src_(source) {\n    var _this11 = this;\n\n    var sourceTech = this.selectSource([source]);\n\n    if (!sourceTech) {\n      return true;\n    }\n\n    if (!titleCaseEquals(sourceTech.tech, this.techName_)) {\n      this.changingSrc_ = true;\n      // load this technology with the chosen source\n      this.loadTech_(sourceTech.tech, sourceTech.source);\n      this.tech_.ready(function () {\n        _this11.changingSrc_ = false;\n      });\n      return false;\n    }\n\n    // wait until the tech is ready to set the source\n    // and set it synchronously if possible (#2326)\n    this.ready(function () {\n\n      // The setSource tech method was added with source handlers\n      // so older techs won't support it\n      // We need to check the direct prototype for the case where subclasses\n      // of the tech do not support source handlers\n      if (this.tech_.constructor.prototype.hasOwnProperty('setSource')) {\n        this.techCall_('setSource', source);\n      } else {\n        this.techCall_('src', source.src);\n      }\n\n      this.changingSrc_ = false;\n    }, true);\n\n    return false;\n  };\n\n  /**\n   * Begin loading the src data.\n   */\n\n\n  Player.prototype.load = function load() {\n    this.techCall_('load');\n  };\n\n  /**\n   * Reset the player. Loads the first tech in the techOrder,\n   * and calls `reset` on the tech`.\n   */\n\n\n  Player.prototype.reset = function reset() {\n    if (this.tech_) {\n      this.tech_.clearTracks('text');\n    }\n    this.loadTech_(this.options_.techOrder[0], null);\n    this.techCall_('reset');\n  };\n\n  /**\n   * Returns all of the current source objects.\n   *\n   * @return {Tech~SourceObject[]}\n   *         The current source objects\n   */\n\n\n  Player.prototype.currentSources = function currentSources() {\n    var source = this.currentSource();\n    var sources = [];\n\n    // assume `{}` or `{ src }`\n    if (Object.keys(source).length !== 0) {\n      sources.push(source);\n    }\n\n    return this.cache_.sources || sources;\n  };\n\n  /**\n   * Returns the current source object.\n   *\n   * @return {Tech~SourceObject}\n   *         The current source object\n   */\n\n\n  Player.prototype.currentSource = function currentSource() {\n    return this.cache_.source || {};\n  };\n\n  /**\n   * Returns the fully qualified URL of the current source value e.g. http://mysite.com/video.mp4\n   * Can be used in conjunction with `currentType` to assist in rebuilding the current source object.\n   *\n   * @return {string}\n   *         The current source\n   */\n\n\n  Player.prototype.currentSrc = function currentSrc() {\n    return this.currentSource() && this.currentSource().src || '';\n  };\n\n  /**\n   * Get the current source type e.g. video/mp4\n   * This can allow you rebuild the current source object so that you could load the same\n   * source and tech later\n   *\n   * @return {string}\n   *         The source MIME type\n   */\n\n\n  Player.prototype.currentType = function currentType() {\n    return this.currentSource() && this.currentSource().type || '';\n  };\n\n  /**\n   * Get or set the preload attribute\n   *\n   * @param {boolean} [value]\n   *        - true means that we should preload\n   *        - false means that we should not preload\n   *\n   * @return {string}\n   *         The preload attribute value when getting\n   */\n\n\n  Player.prototype.preload = function preload(value) {\n    if (value !== undefined) {\n      this.techCall_('setPreload', value);\n      this.options_.preload = value;\n      return;\n    }\n    return this.techGet_('preload');\n  };\n\n  /**\n   * Get or set the autoplay option. When this is a boolean it will\n   * modify the attribute on the tech. When this is a string the attribute on\n   * the tech will be removed and `Player` will handle autoplay on loadstarts.\n   *\n   * @param {boolean|string} [value]\n   *        - true: autoplay using the browser behavior\n   *        - false: do not autoplay\n   *        - 'play': call play() on every loadstart\n   *        - 'muted': call muted() then play() on every loadstart\n   *        - 'any': call play() on every loadstart. if that fails call muted() then play().\n   *        - *: values other than those listed here will be set `autoplay` to true\n   *\n   * @return {boolean|string}\n   *         The current value of autoplay when getting\n   */\n\n\n  Player.prototype.autoplay = function autoplay(value) {\n    // getter usage\n    if (value === undefined) {\n      return this.options_.autoplay || false;\n    }\n\n    var techAutoplay = void 0;\n\n    // if the value is a valid string set it to that\n    if (typeof value === 'string' && /(any|play|muted)/.test(value)) {\n      this.options_.autoplay = value;\n      this.manualAutoplay_(value);\n      techAutoplay = false;\n\n      // any falsy value sets autoplay to false in the browser,\n      // lets do the same\n    } else if (!value) {\n      this.options_.autoplay = false;\n\n      // any other value (ie truthy) sets autoplay to true\n    } else {\n      this.options_.autoplay = true;\n    }\n\n    techAutoplay = techAutoplay || this.options_.autoplay;\n\n    // if we don't have a tech then we do not queue up\n    // a setAutoplay call on tech ready. We do this because the\n    // autoplay option will be passed in the constructor and we\n    // do not need to set it twice\n    if (this.tech_) {\n      this.techCall_('setAutoplay', techAutoplay);\n    }\n  };\n\n  /**\n   * Set or unset the playsinline attribute.\n   * Playsinline tells the browser that non-fullscreen playback is preferred.\n   *\n   * @param {boolean} [value]\n   *        - true means that we should try to play inline by default\n   *        - false means that we should use the browser's default playback mode,\n   *          which in most cases is inline. iOS Safari is a notable exception\n   *          and plays fullscreen by default.\n   *\n   * @return {string|Player}\n   *         - the current value of playsinline\n   *         - the player when setting\n   *\n   * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}\n   */\n\n\n  Player.prototype.playsinline = function playsinline(value) {\n    if (value !== undefined) {\n      this.techCall_('setPlaysinline', value);\n      this.options_.playsinline = value;\n      return this;\n    }\n    return this.techGet_('playsinline');\n  };\n\n  /**\n   * Get or set the loop attribute on the video element.\n   *\n   * @param {boolean} [value]\n   *        - true means that we should loop the video\n   *        - false means that we should not loop the video\n   *\n   * @return {string}\n   *         The current value of loop when getting\n   */\n\n\n  Player.prototype.loop = function loop(value) {\n    if (value !== undefined) {\n      this.techCall_('setLoop', value);\n      this.options_.loop = value;\n      return;\n    }\n    return this.techGet_('loop');\n  };\n\n  /**\n   * Get or set the poster image source url\n   *\n   * @fires Player#posterchange\n   *\n   * @param {string} [src]\n   *        Poster image source URL\n   *\n   * @return {string}\n   *         The current value of poster when getting\n   */\n\n\n  Player.prototype.poster = function poster(src) {\n    if (src === undefined) {\n      return this.poster_;\n    }\n\n    // The correct way to remove a poster is to set as an empty string\n    // other falsey values will throw errors\n    if (!src) {\n      src = '';\n    }\n\n    if (src === this.poster_) {\n      return;\n    }\n\n    // update the internal poster variable\n    this.poster_ = src;\n\n    // update the tech's poster\n    this.techCall_('setPoster', src);\n\n    this.isPosterFromTech_ = false;\n\n    // alert components that the poster has been set\n    /**\n     * This event fires when the poster image is changed on the player.\n     *\n     * @event Player#posterchange\n     * @type {EventTarget~Event}\n     */\n    this.trigger('posterchange');\n  };\n\n  /**\n   * Some techs (e.g. YouTube) can provide a poster source in an\n   * asynchronous way. We want the poster component to use this\n   * poster source so that it covers up the tech's controls.\n   * (YouTube's play button). However we only want to use this\n   * source if the player user hasn't set a poster through\n   * the normal APIs.\n   *\n   * @fires Player#posterchange\n   * @listens Tech#posterchange\n   * @private\n   */\n\n\n  Player.prototype.handleTechPosterChange_ = function handleTechPosterChange_() {\n    if ((!this.poster_ || this.options_.techCanOverridePoster) && this.tech_ && this.tech_.poster) {\n      var newPoster = this.tech_.poster() || '';\n\n      if (newPoster !== this.poster_) {\n        this.poster_ = newPoster;\n        this.isPosterFromTech_ = true;\n\n        // Let components know the poster has changed\n        this.trigger('posterchange');\n      }\n    }\n  };\n\n  /**\n   * Get or set whether or not the controls are showing.\n   *\n   * @fires Player#controlsenabled\n   *\n   * @param {boolean} [bool]\n   *        - true to turn controls on\n   *        - false to turn controls off\n   *\n   * @return {boolean}\n   *         The current value of controls when getting\n   */\n\n\n  Player.prototype.controls = function controls(bool) {\n    if (bool === undefined) {\n      return !!this.controls_;\n    }\n\n    bool = !!bool;\n\n    // Don't trigger a change event unless it actually changed\n    if (this.controls_ === bool) {\n      return;\n    }\n\n    this.controls_ = bool;\n\n    if (this.usingNativeControls()) {\n      this.techCall_('setControls', bool);\n    }\n\n    if (this.controls_) {\n      this.removeClass('vjs-controls-disabled');\n      this.addClass('vjs-controls-enabled');\n      /**\n       * @event Player#controlsenabled\n       * @type {EventTarget~Event}\n       */\n      this.trigger('controlsenabled');\n      if (!this.usingNativeControls()) {\n        this.addTechControlsListeners_();\n      }\n    } else {\n      this.removeClass('vjs-controls-enabled');\n      this.addClass('vjs-controls-disabled');\n      /**\n       * @event Player#controlsdisabled\n       * @type {EventTarget~Event}\n       */\n      this.trigger('controlsdisabled');\n      if (!this.usingNativeControls()) {\n        this.removeTechControlsListeners_();\n      }\n    }\n  };\n\n  /**\n   * Toggle native controls on/off. Native controls are the controls built into\n   * devices (e.g. default iPhone controls), Flash, or other techs\n   * (e.g. Vimeo Controls)\n   * **This should only be set by the current tech, because only the tech knows\n   * if it can support native controls**\n   *\n   * @fires Player#usingnativecontrols\n   * @fires Player#usingcustomcontrols\n   *\n   * @param {boolean} [bool]\n   *        - true to turn native controls on\n   *        - false to turn native controls off\n   *\n   * @return {boolean}\n   *         The current value of native controls when getting\n   */\n\n\n  Player.prototype.usingNativeControls = function usingNativeControls(bool) {\n    if (bool === undefined) {\n      return !!this.usingNativeControls_;\n    }\n\n    bool = !!bool;\n\n    // Don't trigger a change event unless it actually changed\n    if (this.usingNativeControls_ === bool) {\n      return;\n    }\n\n    this.usingNativeControls_ = bool;\n\n    if (this.usingNativeControls_) {\n      this.addClass('vjs-using-native-controls');\n\n      /**\n       * player is using the native device controls\n       *\n       * @event Player#usingnativecontrols\n       * @type {EventTarget~Event}\n       */\n      this.trigger('usingnativecontrols');\n    } else {\n      this.removeClass('vjs-using-native-controls');\n\n      /**\n       * player is using the custom HTML controls\n       *\n       * @event Player#usingcustomcontrols\n       * @type {EventTarget~Event}\n       */\n      this.trigger('usingcustomcontrols');\n    }\n  };\n\n  /**\n   * Set or get the current MediaError\n   *\n   * @fires Player#error\n   *\n   * @param  {MediaError|string|number} [err]\n   *         A MediaError or a string/number to be turned\n   *         into a MediaError\n   *\n   * @return {MediaError|null}\n   *         The current MediaError when getting (or null)\n   */\n\n\n  Player.prototype.error = function error(err) {\n    if (err === undefined) {\n      return this.error_ || null;\n    }\n\n    // restoring to default\n    if (err === null) {\n      this.error_ = err;\n      this.removeClass('vjs-error');\n      if (this.errorDisplay) {\n        this.errorDisplay.close();\n      }\n      return;\n    }\n\n    this.error_ = new MediaError(err);\n\n    // add the vjs-error classname to the player\n    this.addClass('vjs-error');\n\n    // log the name of the error type and any message\n    // IE11 logs \"[object object]\" and required you to expand message to see error object\n    log$1.error('(CODE:' + this.error_.code + ' ' + MediaError.errorTypes[this.error_.code] + ')', this.error_.message, this.error_);\n\n    /**\n     * @event Player#error\n     * @type {EventTarget~Event}\n     */\n    this.trigger('error');\n\n    return;\n  };\n\n  /**\n   * Report user activity\n   *\n   * @param {Object} event\n   *        Event object\n   */\n\n\n  Player.prototype.reportUserActivity = function reportUserActivity(event) {\n    this.userActivity_ = true;\n  };\n\n  /**\n   * Get/set if user is active\n   *\n   * @fires Player#useractive\n   * @fires Player#userinactive\n   *\n   * @param {boolean} [bool]\n   *        - true if the user is active\n   *        - false if the user is inactive\n   *\n   * @return {boolean}\n   *         The current value of userActive when getting\n   */\n\n\n  Player.prototype.userActive = function userActive(bool) {\n    if (bool === undefined) {\n      return this.userActive_;\n    }\n\n    bool = !!bool;\n\n    if (bool === this.userActive_) {\n      return;\n    }\n\n    this.userActive_ = bool;\n\n    if (this.userActive_) {\n      this.userActivity_ = true;\n      this.removeClass('vjs-user-inactive');\n      this.addClass('vjs-user-active');\n      /**\n       * @event Player#useractive\n       * @type {EventTarget~Event}\n       */\n      this.trigger('useractive');\n      return;\n    }\n\n    // Chrome/Safari/IE have bugs where when you change the cursor it can\n    // trigger a mousemove event. This causes an issue when you're hiding\n    // the cursor when the user is inactive, and a mousemove signals user\n    // activity. Making it impossible to go into inactive mode. Specifically\n    // this happens in fullscreen when we really need to hide the cursor.\n    //\n    // When this gets resolved in ALL browsers it can be removed\n    // https://code.google.com/p/chromium/issues/detail?id=103041\n    if (this.tech_) {\n      this.tech_.one('mousemove', function (e) {\n        e.stopPropagation();\n        e.preventDefault();\n      });\n    }\n\n    this.userActivity_ = false;\n    this.removeClass('vjs-user-active');\n    this.addClass('vjs-user-inactive');\n    /**\n     * @event Player#userinactive\n     * @type {EventTarget~Event}\n     */\n    this.trigger('userinactive');\n  };\n\n  /**\n   * Listen for user activity based on timeout value\n   *\n   * @private\n   */\n\n\n  Player.prototype.listenForUserActivity_ = function listenForUserActivity_() {\n    var mouseInProgress = void 0;\n    var lastMoveX = void 0;\n    var lastMoveY = void 0;\n    var handleActivity = bind(this, this.reportUserActivity);\n\n    var handleMouseMove = function handleMouseMove(e) {\n      // #1068 - Prevent mousemove spamming\n      // Chrome Bug: https://code.google.com/p/chromium/issues/detail?id=366970\n      if (e.screenX !== lastMoveX || e.screenY !== lastMoveY) {\n        lastMoveX = e.screenX;\n        lastMoveY = e.screenY;\n        handleActivity();\n      }\n    };\n\n    var handleMouseDown = function handleMouseDown() {\n      handleActivity();\n      // For as long as the they are touching the device or have their mouse down,\n      // we consider them active even if they're not moving their finger or mouse.\n      // So we want to continue to update that they are active\n      this.clearInterval(mouseInProgress);\n      // Setting userActivity=true now and setting the interval to the same time\n      // as the activityCheck interval (250) should ensure we never miss the\n      // next activityCheck\n      mouseInProgress = this.setInterval(handleActivity, 250);\n    };\n\n    var handleMouseUp = function handleMouseUp(event) {\n      handleActivity();\n      // Stop the interval that maintains activity if the mouse/touch is down\n      this.clearInterval(mouseInProgress);\n    };\n\n    // Any mouse movement will be considered user activity\n    this.on('mousedown', handleMouseDown);\n    this.on('mousemove', handleMouseMove);\n    this.on('mouseup', handleMouseUp);\n\n    // Listen for keyboard navigation\n    // Shouldn't need to use inProgress interval because of key repeat\n    this.on('keydown', handleActivity);\n    this.on('keyup', handleActivity);\n\n    // Run an interval every 250 milliseconds instead of stuffing everything into\n    // the mousemove/touchmove function itself, to prevent performance degradation.\n    // `this.reportUserActivity` simply sets this.userActivity_ to true, which\n    // then gets picked up by this loop\n    // http://ejohn.org/blog/learning-from-twitter/\n    var inactivityTimeout = void 0;\n\n    this.setInterval(function () {\n      // Check to see if mouse/touch activity has happened\n      if (!this.userActivity_) {\n        return;\n      }\n\n      // Reset the activity tracker\n      this.userActivity_ = false;\n\n      // If the user state was inactive, set the state to active\n      this.userActive(true);\n\n      // Clear any existing inactivity timeout to start the timer over\n      this.clearTimeout(inactivityTimeout);\n\n      var timeout = this.options_.inactivityTimeout;\n\n      if (timeout <= 0) {\n        return;\n      }\n\n      // In <timeout> milliseconds, if no more activity has occurred the\n      // user will be considered inactive\n      inactivityTimeout = this.setTimeout(function () {\n        // Protect against the case where the inactivityTimeout can trigger just\n        // before the next user activity is picked up by the activity check loop\n        // causing a flicker\n        if (!this.userActivity_) {\n          this.userActive(false);\n        }\n      }, timeout);\n    }, 250);\n  };\n\n  /**\n   * Gets or sets the current playback rate. A playback rate of\n   * 1.0 represents normal speed and 0.5 would indicate half-speed\n   * playback, for instance.\n   *\n   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-playbackrate\n   *\n   * @param {number} [rate]\n   *       New playback rate to set.\n   *\n   * @return {number}\n   *         The current playback rate when getting or 1.0\n   */\n\n\n  Player.prototype.playbackRate = function playbackRate(rate) {\n    if (rate !== undefined) {\n      // NOTE: this.cache_.lastPlaybackRate is set from the tech handler\n      // that is registered above\n      this.techCall_('setPlaybackRate', rate);\n      return;\n    }\n\n    if (this.tech_ && this.tech_.featuresPlaybackRate) {\n      return this.cache_.lastPlaybackRate || this.techGet_('playbackRate');\n    }\n    return 1.0;\n  };\n\n  /**\n   * Gets or sets the current default playback rate. A default playback rate of\n   * 1.0 represents normal speed and 0.5 would indicate half-speed playback, for instance.\n   * defaultPlaybackRate will only represent what the initial playbackRate of a video was, not\n   * not the current playbackRate.\n   *\n   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-defaultplaybackrate\n   *\n   * @param {number} [rate]\n   *       New default playback rate to set.\n   *\n   * @return {number|Player}\n   *         - The default playback rate when getting or 1.0\n   *         - the player when setting\n   */\n\n\n  Player.prototype.defaultPlaybackRate = function defaultPlaybackRate(rate) {\n    if (rate !== undefined) {\n      return this.techCall_('setDefaultPlaybackRate', rate);\n    }\n\n    if (this.tech_ && this.tech_.featuresPlaybackRate) {\n      return this.techGet_('defaultPlaybackRate');\n    }\n    return 1.0;\n  };\n\n  /**\n   * Gets or sets the audio flag\n   *\n   * @param {boolean} bool\n   *        - true signals that this is an audio player\n   *        - false signals that this is not an audio player\n   *\n   * @return {boolean}\n   *         The current value of isAudio when getting\n   */\n\n\n  Player.prototype.isAudio = function isAudio(bool) {\n    if (bool !== undefined) {\n      this.isAudio_ = !!bool;\n      return;\n    }\n\n    return !!this.isAudio_;\n  };\n\n  /**\n   * A helper method for adding a {@link TextTrack} to our\n   * {@link TextTrackList}.\n   *\n   * In addition to the W3C settings we allow adding additional info through options.\n   *\n   * @see http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-addtexttrack\n   *\n   * @param {string} [kind]\n   *        the kind of TextTrack you are adding\n   *\n   * @param {string} [label]\n   *        the label to give the TextTrack label\n   *\n   * @param {string} [language]\n   *        the language to set on the TextTrack\n   *\n   * @return {TextTrack|undefined}\n   *         the TextTrack that was added or undefined\n   *         if there is no tech\n   */\n\n\n  Player.prototype.addTextTrack = function addTextTrack(kind, label, language) {\n    if (this.tech_) {\n      return this.tech_.addTextTrack(kind, label, language);\n    }\n  };\n\n  /**\n   * Create a remote {@link TextTrack} and an {@link HTMLTrackElement}. It will\n   * automatically removed from the video element whenever the source changes, unless\n   * manualCleanup is set to false.\n   *\n   * @param {Object} options\n   *        Options to pass to {@link HTMLTrackElement} during creation. See\n   *        {@link HTMLTrackElement} for object properties that you should use.\n   *\n   * @param {boolean} [manualCleanup=true] if set to false, the TextTrack will be\n   *\n   * @return {HtmlTrackElement}\n   *         the HTMLTrackElement that was created and added\n   *         to the HtmlTrackElementList and the remote\n   *         TextTrackList\n   *\n   * @deprecated The default value of the \"manualCleanup\" parameter will default\n   *             to \"false\" in upcoming versions of Video.js\n   */\n\n\n  Player.prototype.addRemoteTextTrack = function addRemoteTextTrack(options, manualCleanup) {\n    if (this.tech_) {\n      return this.tech_.addRemoteTextTrack(options, manualCleanup);\n    }\n  };\n\n  /**\n   * Remove a remote {@link TextTrack} from the respective\n   * {@link TextTrackList} and {@link HtmlTrackElementList}.\n   *\n   * @param {Object} track\n   *        Remote {@link TextTrack} to remove\n   *\n   * @return {undefined}\n   *         does not return anything\n   */\n\n\n  Player.prototype.removeRemoteTextTrack = function removeRemoteTextTrack() {\n    var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref3$track = _ref3.track,\n        track = _ref3$track === undefined ? arguments[0] : _ref3$track;\n\n    // destructure the input into an object with a track argument, defaulting to arguments[0]\n    // default the whole argument to an empty object if nothing was passed in\n\n    if (this.tech_) {\n      return this.tech_.removeRemoteTextTrack(track);\n    }\n  };\n\n  /**\n   * Gets available media playback quality metrics as specified by the W3C's Media\n   * Playback Quality API.\n   *\n   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}\n   *\n   * @return {Object|undefined}\n   *         An object with supported media playback quality metrics or undefined if there\n   *         is no tech or the tech does not support it.\n   */\n\n\n  Player.prototype.getVideoPlaybackQuality = function getVideoPlaybackQuality() {\n    return this.techGet_('getVideoPlaybackQuality');\n  };\n\n  /**\n   * Get video width\n   *\n   * @return {number}\n   *         current video width\n   */\n\n\n  Player.prototype.videoWidth = function videoWidth() {\n    return this.tech_ && this.tech_.videoWidth && this.tech_.videoWidth() || 0;\n  };\n\n  /**\n   * Get video height\n   *\n   * @return {number}\n   *         current video height\n   */\n\n\n  Player.prototype.videoHeight = function videoHeight() {\n    return this.tech_ && this.tech_.videoHeight && this.tech_.videoHeight() || 0;\n  };\n\n  /**\n   * The player's language code\n   * NOTE: The language should be set in the player options if you want the\n   * the controls to be built with a specific language. Changing the language\n   * later will not update controls text.\n   *\n   * @param {string} [code]\n   *        the language code to set the player to\n   *\n   * @return {string}\n   *         The current language code when getting\n   */\n\n\n  Player.prototype.language = function language(code) {\n    if (code === undefined) {\n      return this.language_;\n    }\n\n    this.language_ = String(code).toLowerCase();\n  };\n\n  /**\n   * Get the player's language dictionary\n   * Merge every time, because a newly added plugin might call videojs.addLanguage() at any time\n   * Languages specified directly in the player options have precedence\n   *\n   * @return {Array}\n   *         An array of of supported languages\n   */\n\n\n  Player.prototype.languages = function languages() {\n    return mergeOptions(Player.prototype.options_.languages, this.languages_);\n  };\n\n  /**\n   * returns a JavaScript object reperesenting the current track\n   * information. **DOES not return it as JSON**\n   *\n   * @return {Object}\n   *         Object representing the current of track info\n   */\n\n\n  Player.prototype.toJSON = function toJSON() {\n    var options = mergeOptions(this.options_);\n    var tracks = options.tracks;\n\n    options.tracks = [];\n\n    for (var i = 0; i < tracks.length; i++) {\n      var track = tracks[i];\n\n      // deep merge tracks and null out player so no circular references\n      track = mergeOptions(track);\n      track.player = undefined;\n      options.tracks[i] = track;\n    }\n\n    return options;\n  };\n\n  /**\n   * Creates a simple modal dialog (an instance of the {@link ModalDialog}\n   * component) that immediately overlays the player with arbitrary\n   * content and removes itself when closed.\n   *\n   * @param {string|Function|Element|Array|null} content\n   *        Same as {@link ModalDialog#content}'s param of the same name.\n   *        The most straight-forward usage is to provide a string or DOM\n   *        element.\n   *\n   * @param {Object} [options]\n   *        Extra options which will be passed on to the {@link ModalDialog}.\n   *\n   * @return {ModalDialog}\n   *         the {@link ModalDialog} that was created\n   */\n\n\n  Player.prototype.createModal = function createModal(content, options) {\n    var _this12 = this;\n\n    options = options || {};\n    options.content = content || '';\n\n    var modal = new ModalDialog(this, options);\n\n    this.addChild(modal);\n    modal.on('dispose', function () {\n      _this12.removeChild(modal);\n    });\n\n    modal.open();\n    return modal;\n  };\n\n  /**\n   * Gets tag settings\n   *\n   * @param {Element} tag\n   *        The player tag\n   *\n   * @return {Object}\n   *         An object containing all of the settings\n   *         for a player tag\n   */\n\n\n  Player.getTagSettings = function getTagSettings(tag) {\n    var baseOptions = {\n      sources: [],\n      tracks: []\n    };\n\n    var tagOptions = getAttributes(tag);\n    var dataSetup = tagOptions['data-setup'];\n\n    if (hasClass(tag, 'vjs-fluid')) {\n      tagOptions.fluid = true;\n    }\n\n    // Check if data-setup attr exists.\n    if (dataSetup !== null) {\n      // Parse options JSON\n      // If empty string, make it a parsable json object.\n      var _safeParseTuple = safeParseTuple(dataSetup || '{}'),\n          err = _safeParseTuple[0],\n          data = _safeParseTuple[1];\n\n      if (err) {\n        log$1.error(err);\n      }\n      assign(tagOptions, data);\n    }\n\n    assign(baseOptions, tagOptions);\n\n    // Get tag children settings\n    if (tag.hasChildNodes()) {\n      var children = tag.childNodes;\n\n      for (var i = 0, j = children.length; i < j; i++) {\n        var child = children[i];\n        // Change case needed: http://ejohn.org/blog/nodename-case-sensitivity/\n        var childName = child.nodeName.toLowerCase();\n\n        if (childName === 'source') {\n          baseOptions.sources.push(getAttributes(child));\n        } else if (childName === 'track') {\n          baseOptions.tracks.push(getAttributes(child));\n        }\n      }\n    }\n\n    return baseOptions;\n  };\n\n  /**\n   * Determine whether or not flexbox is supported\n   *\n   * @return {boolean}\n   *         - true if flexbox is supported\n   *         - false if flexbox is not supported\n   */\n\n\n  Player.prototype.flexNotSupported_ = function flexNotSupported_() {\n    var elem = document.createElement('i');\n\n    // Note: We don't actually use flexBasis (or flexOrder), but it's one of the more\n    // common flex features that we can rely on when checking for flex support.\n    return !('flexBasis' in elem.style || 'webkitFlexBasis' in elem.style || 'mozFlexBasis' in elem.style || 'msFlexBasis' in elem.style ||\n    // IE10-specific (2012 flex spec), available for completeness\n    'msFlexOrder' in elem.style);\n  };\n\n  return Player;\n}(Component);\n\n/**\n * Get the {@link VideoTrackList}\n * @link https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist\n *\n * @return {VideoTrackList}\n *         the current video track list\n *\n * @method Player.prototype.videoTracks\n */\n\n/**\n * Get the {@link AudioTrackList}\n * @link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist\n *\n * @return {AudioTrackList}\n *         the current audio track list\n *\n * @method Player.prototype.audioTracks\n */\n\n/**\n * Get the {@link TextTrackList}\n *\n * @link http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-texttracks\n *\n * @return {TextTrackList}\n *         the current text track list\n *\n * @method Player.prototype.textTracks\n */\n\n/**\n * Get the remote {@link TextTrackList}\n *\n * @return {TextTrackList}\n *         The current remote text track list\n *\n * @method Player.prototype.remoteTextTracks\n */\n\n/**\n * Get the remote {@link HtmlTrackElementList} tracks.\n *\n * @return {HtmlTrackElementList}\n *         The current remote text track element list\n *\n * @method Player.prototype.remoteTextTrackEls\n */\n\nALL.names.forEach(function (name$$1) {\n  var props = ALL[name$$1];\n\n  Player.prototype[props.getterName] = function () {\n    if (this.tech_) {\n      return this.tech_[props.getterName]();\n    }\n\n    // if we have not yet loadTech_, we create {video,audio,text}Tracks_\n    // these will be passed to the tech during loading\n    this[props.privateName] = this[props.privateName] || new props.ListClass();\n    return this[props.privateName];\n  };\n});\n\n/**\n * Global player list\n *\n * @type {Object}\n */\nPlayer.players = {};\n\nvar navigator = window$1.navigator;\n\n/*\n * Player instance options, surfaced using options\n * options = Player.prototype.options_\n * Make changes in options, not here.\n *\n * @type {Object}\n * @private\n */\nPlayer.prototype.options_ = {\n  // Default order of fallback technology\n  techOrder: Tech.defaultTechOrder_,\n\n  html5: {},\n  flash: {},\n\n  // default inactivity timeout\n  inactivityTimeout: 2000,\n\n  // default playback rates\n  playbackRates: [],\n  // Add playback rate selection by adding rates\n  // 'playbackRates': [0.5, 1, 1.5, 2],\n\n  // Included control sets\n  children: ['mediaLoader', 'posterImage', 'textTrackDisplay', 'loadingSpinner', 'bigPlayButton', 'controlBar', 'errorDisplay', 'textTrackSettings', 'resizeManager'],\n\n  language: navigator && (navigator.languages && navigator.languages[0] || navigator.userLanguage || navigator.language) || 'en',\n\n  // locales and their language translations\n  languages: {},\n\n  // Default message to show when a video cannot be played.\n  notSupportedMessage: 'No compatible source was found for this media.'\n};\n\n[\n/**\n * Returns whether or not the player is in the \"ended\" state.\n *\n * @return {Boolean} True if the player is in the ended state, false if not.\n * @method Player#ended\n */\n'ended',\n/**\n * Returns whether or not the player is in the \"seeking\" state.\n *\n * @return {Boolean} True if the player is in the seeking state, false if not.\n * @method Player#seeking\n */\n'seeking',\n/**\n * Returns the TimeRanges of the media that are currently available\n * for seeking to.\n *\n * @return {TimeRanges} the seekable intervals of the media timeline\n * @method Player#seekable\n */\n'seekable',\n/**\n * Returns the current state of network activity for the element, from\n * the codes in the list below.\n * - NETWORK_EMPTY (numeric value 0)\n *   The element has not yet been initialised. All attributes are in\n *   their initial states.\n * - NETWORK_IDLE (numeric value 1)\n *   The element's resource selection algorithm is active and has\n *   selected a resource, but it is not actually using the network at\n *   this time.\n * - NETWORK_LOADING (numeric value 2)\n *   The user agent is actively trying to download data.\n * - NETWORK_NO_SOURCE (numeric value 3)\n *   The element's resource selection algorithm is active, but it has\n *   not yet found a resource to use.\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#network-states\n * @return {number} the current network activity state\n * @method Player#networkState\n */\n'networkState',\n/**\n * Returns a value that expresses the current state of the element\n * with respect to rendering the current playback position, from the\n * codes in the list below.\n * - HAVE_NOTHING (numeric value 0)\n *   No information regarding the media resource is available.\n * - HAVE_METADATA (numeric value 1)\n *   Enough of the resource has been obtained that the duration of the\n *   resource is available.\n * - HAVE_CURRENT_DATA (numeric value 2)\n *   Data for the immediate current playback position is available.\n * - HAVE_FUTURE_DATA (numeric value 3)\n *   Data for the immediate current playback position is available, as\n *   well as enough data for the user agent to advance the current\n *   playback position in the direction of playback.\n * - HAVE_ENOUGH_DATA (numeric value 4)\n *   The user agent estimates that enough data is available for\n *   playback to proceed uninterrupted.\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-readystate\n * @return {number} the current playback rendering state\n * @method Player#readyState\n */\n'readyState'].forEach(function (fn) {\n  Player.prototype[fn] = function () {\n    return this.techGet_(fn);\n  };\n});\n\nTECH_EVENTS_RETRIGGER.forEach(function (event) {\n  Player.prototype['handleTech' + toTitleCase(event) + '_'] = function () {\n    return this.trigger(event);\n  };\n});\n\n/**\n * Fired when the player has initial duration and dimension information\n *\n * @event Player#loadedmetadata\n * @type {EventTarget~Event}\n */\n\n/**\n * Fired when the player has downloaded data at the current playback position\n *\n * @event Player#loadeddata\n * @type {EventTarget~Event}\n */\n\n/**\n * Fired when the current playback position has changed *\n * During playback this is fired every 15-250 milliseconds, depending on the\n * playback technology in use.\n *\n * @event Player#timeupdate\n * @type {EventTarget~Event}\n */\n\n/**\n * Fired when the volume changes\n *\n * @event Player#volumechange\n * @type {EventTarget~Event}\n */\n\n/**\n * Reports whether or not a player has a plugin available.\n *\n * This does not report whether or not the plugin has ever been initialized\n * on this player. For that, [usingPlugin]{@link Player#usingPlugin}.\n *\n * @method Player#hasPlugin\n * @param  {string}  name\n *         The name of a plugin.\n *\n * @return {boolean}\n *         Whether or not this player has the requested plugin available.\n */\n\n/**\n * Reports whether or not a player is using a plugin by name.\n *\n * For basic plugins, this only reports whether the plugin has _ever_ been\n * initialized on this player.\n *\n * @method Player#usingPlugin\n * @param  {string} name\n *         The name of a plugin.\n *\n * @return {boolean}\n *         Whether or not this player is using the requested plugin.\n */\n\nComponent.registerComponent('Player', Player);\n\n/**\n * @file plugin.js\n */\n\n/**\n * The base plugin name.\n *\n * @private\n * @constant\n * @type {string}\n */\nvar BASE_PLUGIN_NAME = 'plugin';\n\n/**\n * The key on which a player's active plugins cache is stored.\n *\n * @private\n * @constant\n * @type     {string}\n */\nvar PLUGIN_CACHE_KEY = 'activePlugins_';\n\n/**\n * Stores registered plugins in a private space.\n *\n * @private\n * @type    {Object}\n */\nvar pluginStorage = {};\n\n/**\n * Reports whether or not a plugin has been registered.\n *\n * @private\n * @param   {string} name\n *          The name of a plugin.\n *\n * @returns {boolean}\n *          Whether or not the plugin has been registered.\n */\nvar pluginExists = function pluginExists(name) {\n  return pluginStorage.hasOwnProperty(name);\n};\n\n/**\n * Get a single registered plugin by name.\n *\n * @private\n * @param   {string} name\n *          The name of a plugin.\n *\n * @returns {Function|undefined}\n *          The plugin (or undefined).\n */\nvar getPlugin = function getPlugin(name) {\n  return pluginExists(name) ? pluginStorage[name] : undefined;\n};\n\n/**\n * Marks a plugin as \"active\" on a player.\n *\n * Also, ensures that the player has an object for tracking active plugins.\n *\n * @private\n * @param   {Player} player\n *          A Video.js player instance.\n *\n * @param   {string} name\n *          The name of a plugin.\n */\nvar markPluginAsActive = function markPluginAsActive(player, name) {\n  player[PLUGIN_CACHE_KEY] = player[PLUGIN_CACHE_KEY] || {};\n  player[PLUGIN_CACHE_KEY][name] = true;\n};\n\n/**\n * Triggers a pair of plugin setup events.\n *\n * @private\n * @param  {Player} player\n *         A Video.js player instance.\n *\n * @param  {Plugin~PluginEventHash} hash\n *         A plugin event hash.\n *\n * @param  {Boolean} [before]\n *         If true, prefixes the event name with \"before\". In other words,\n *         use this to trigger \"beforepluginsetup\" instead of \"pluginsetup\".\n */\nvar triggerSetupEvent = function triggerSetupEvent(player, hash, before) {\n  var eventName = (before ? 'before' : '') + 'pluginsetup';\n\n  player.trigger(eventName, hash);\n  player.trigger(eventName + ':' + hash.name, hash);\n};\n\n/**\n * Takes a basic plugin function and returns a wrapper function which marks\n * on the player that the plugin has been activated.\n *\n * @private\n * @param   {string} name\n *          The name of the plugin.\n *\n * @param   {Function} plugin\n *          The basic plugin.\n *\n * @returns {Function}\n *          A wrapper function for the given plugin.\n */\nvar createBasicPlugin = function createBasicPlugin(name, plugin) {\n  var basicPluginWrapper = function basicPluginWrapper() {\n\n    // We trigger the \"beforepluginsetup\" and \"pluginsetup\" events on the player\n    // regardless, but we want the hash to be consistent with the hash provided\n    // for advanced plugins.\n    //\n    // The only potentially counter-intuitive thing here is the `instance` in\n    // the \"pluginsetup\" event is the value returned by the `plugin` function.\n    triggerSetupEvent(this, { name: name, plugin: plugin, instance: null }, true);\n\n    var instance = plugin.apply(this, arguments);\n\n    markPluginAsActive(this, name);\n    triggerSetupEvent(this, { name: name, plugin: plugin, instance: instance });\n\n    return instance;\n  };\n\n  Object.keys(plugin).forEach(function (prop) {\n    basicPluginWrapper[prop] = plugin[prop];\n  });\n\n  return basicPluginWrapper;\n};\n\n/**\n * Takes a plugin sub-class and returns a factory function for generating\n * instances of it.\n *\n * This factory function will replace itself with an instance of the requested\n * sub-class of Plugin.\n *\n * @private\n * @param   {string} name\n *          The name of the plugin.\n *\n * @param   {Plugin} PluginSubClass\n *          The advanced plugin.\n *\n * @returns {Function}\n */\nvar createPluginFactory = function createPluginFactory(name, PluginSubClass) {\n\n  // Add a `name` property to the plugin prototype so that each plugin can\n  // refer to itself by name.\n  PluginSubClass.prototype.name = name;\n\n  return function () {\n    triggerSetupEvent(this, { name: name, plugin: PluginSubClass, instance: null }, true);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var instance = new (Function.prototype.bind.apply(PluginSubClass, [null].concat([this].concat(args))))();\n\n    // The plugin is replaced by a function that returns the current instance.\n    this[name] = function () {\n      return instance;\n    };\n\n    triggerSetupEvent(this, instance.getEventHash());\n\n    return instance;\n  };\n};\n\n/**\n * Parent class for all advanced plugins.\n *\n * @mixes   module:evented~EventedMixin\n * @mixes   module:stateful~StatefulMixin\n * @fires   Player#beforepluginsetup\n * @fires   Player#beforepluginsetup:$name\n * @fires   Player#pluginsetup\n * @fires   Player#pluginsetup:$name\n * @listens Player#dispose\n * @throws  {Error}\n *          If attempting to instantiate the base {@link Plugin} class\n *          directly instead of via a sub-class.\n */\n\nvar Plugin = function () {\n\n  /**\n   * Creates an instance of this class.\n   *\n   * Sub-classes should call `super` to ensure plugins are properly initialized.\n   *\n   * @param {Player} player\n   *        A Video.js player instance.\n   */\n  function Plugin(player) {\n    classCallCheck(this, Plugin);\n\n    if (this.constructor === Plugin) {\n      throw new Error('Plugin must be sub-classed; not directly instantiated.');\n    }\n\n    this.player = player;\n\n    // Make this object evented, but remove the added `trigger` method so we\n    // use the prototype version instead.\n    evented(this);\n    delete this.trigger;\n\n    stateful(this, this.constructor.defaultState);\n    markPluginAsActive(player, this.name);\n\n    // Auto-bind the dispose method so we can use it as a listener and unbind\n    // it later easily.\n    this.dispose = bind(this, this.dispose);\n\n    // If the player is disposed, dispose the plugin.\n    player.on('dispose', this.dispose);\n  }\n\n  /**\n   * Get the version of the plugin that was set on <pluginName>.VERSION\n   */\n\n\n  Plugin.prototype.version = function version() {\n    return this.constructor.VERSION;\n  };\n\n  /**\n   * Each event triggered by plugins includes a hash of additional data with\n   * conventional properties.\n   *\n   * This returns that object or mutates an existing hash.\n   *\n   * @param   {Object} [hash={}]\n   *          An object to be used as event an event hash.\n   *\n   * @returns {Plugin~PluginEventHash}\n   *          An event hash object with provided properties mixed-in.\n   */\n\n\n  Plugin.prototype.getEventHash = function getEventHash() {\n    var hash = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    hash.name = this.name;\n    hash.plugin = this.constructor;\n    hash.instance = this;\n    return hash;\n  };\n\n  /**\n   * Triggers an event on the plugin object and overrides\n   * {@link module:evented~EventedMixin.trigger|EventedMixin.trigger}.\n   *\n   * @param   {string|Object} event\n   *          An event type or an object with a type property.\n   *\n   * @param   {Object} [hash={}]\n   *          Additional data hash to merge with a\n   *          {@link Plugin~PluginEventHash|PluginEventHash}.\n   *\n   * @returns {boolean}\n   *          Whether or not default was prevented.\n   */\n\n\n  Plugin.prototype.trigger = function trigger$$1(event) {\n    var hash = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    return trigger(this.eventBusEl_, event, this.getEventHash(hash));\n  };\n\n  /**\n   * Handles \"statechanged\" events on the plugin. No-op by default, override by\n   * subclassing.\n   *\n   * @abstract\n   * @param    {Event} e\n   *           An event object provided by a \"statechanged\" event.\n   *\n   * @param    {Object} e.changes\n   *           An object describing changes that occurred with the \"statechanged\"\n   *           event.\n   */\n\n\n  Plugin.prototype.handleStateChanged = function handleStateChanged(e) {};\n\n  /**\n   * Disposes a plugin.\n   *\n   * Subclasses can override this if they want, but for the sake of safety,\n   * it's probably best to subscribe the \"dispose\" event.\n   *\n   * @fires Plugin#dispose\n   */\n\n\n  Plugin.prototype.dispose = function dispose() {\n    var name = this.name,\n        player = this.player;\n\n    /**\n     * Signals that a advanced plugin is about to be disposed.\n     *\n     * @event Plugin#dispose\n     * @type  {EventTarget~Event}\n     */\n\n    this.trigger('dispose');\n    this.off();\n    player.off('dispose', this.dispose);\n\n    // Eliminate any possible sources of leaking memory by clearing up\n    // references between the player and the plugin instance and nulling out\n    // the plugin's state and replacing methods with a function that throws.\n    player[PLUGIN_CACHE_KEY][name] = false;\n    this.player = this.state = null;\n\n    // Finally, replace the plugin name on the player with a new factory\n    // function, so that the plugin is ready to be set up again.\n    player[name] = createPluginFactory(name, pluginStorage[name]);\n  };\n\n  /**\n   * Determines if a plugin is a basic plugin (i.e. not a sub-class of `Plugin`).\n   *\n   * @param   {string|Function} plugin\n   *          If a string, matches the name of a plugin. If a function, will be\n   *          tested directly.\n   *\n   * @returns {boolean}\n   *          Whether or not a plugin is a basic plugin.\n   */\n\n\n  Plugin.isBasic = function isBasic(plugin) {\n    var p = typeof plugin === 'string' ? getPlugin(plugin) : plugin;\n\n    return typeof p === 'function' && !Plugin.prototype.isPrototypeOf(p.prototype);\n  };\n\n  /**\n   * Register a Video.js plugin.\n   *\n   * @param   {string} name\n   *          The name of the plugin to be registered. Must be a string and\n   *          must not match an existing plugin or a method on the `Player`\n   *          prototype.\n   *\n   * @param   {Function} plugin\n   *          A sub-class of `Plugin` or a function for basic plugins.\n   *\n   * @returns {Function}\n   *          For advanced plugins, a factory function for that plugin. For\n   *          basic plugins, a wrapper function that initializes the plugin.\n   */\n\n\n  Plugin.registerPlugin = function registerPlugin(name, plugin) {\n    if (typeof name !== 'string') {\n      throw new Error('Illegal plugin name, \"' + name + '\", must be a string, was ' + (typeof name === 'undefined' ? 'undefined' : _typeof(name)) + '.');\n    }\n\n    if (pluginExists(name)) {\n      log$1.warn('A plugin named \"' + name + '\" already exists. You may want to avoid re-registering plugins!');\n    } else if (Player.prototype.hasOwnProperty(name)) {\n      throw new Error('Illegal plugin name, \"' + name + '\", cannot share a name with an existing player method!');\n    }\n\n    if (typeof plugin !== 'function') {\n      throw new Error('Illegal plugin for \"' + name + '\", must be a function, was ' + (typeof plugin === 'undefined' ? 'undefined' : _typeof(plugin)) + '.');\n    }\n\n    pluginStorage[name] = plugin;\n\n    // Add a player prototype method for all sub-classed plugins (but not for\n    // the base Plugin class).\n    if (name !== BASE_PLUGIN_NAME) {\n      if (Plugin.isBasic(plugin)) {\n        Player.prototype[name] = createBasicPlugin(name, plugin);\n      } else {\n        Player.prototype[name] = createPluginFactory(name, plugin);\n      }\n    }\n\n    return plugin;\n  };\n\n  /**\n   * De-register a Video.js plugin.\n   *\n   * @param {string} name\n   *        The name of the plugin to be deregistered.\n   */\n\n\n  Plugin.deregisterPlugin = function deregisterPlugin(name) {\n    if (name === BASE_PLUGIN_NAME) {\n      throw new Error('Cannot de-register base plugin.');\n    }\n    if (pluginExists(name)) {\n      delete pluginStorage[name];\n      delete Player.prototype[name];\n    }\n  };\n\n  /**\n   * Gets an object containing multiple Video.js plugins.\n   *\n   * @param   {Array} [names]\n   *          If provided, should be an array of plugin names. Defaults to _all_\n   *          plugin names.\n   *\n   * @returns {Object|undefined}\n   *          An object containing plugin(s) associated with their name(s) or\n   *          `undefined` if no matching plugins exist).\n   */\n\n\n  Plugin.getPlugins = function getPlugins() {\n    var names = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Object.keys(pluginStorage);\n\n    var result = void 0;\n\n    names.forEach(function (name) {\n      var plugin = getPlugin(name);\n\n      if (plugin) {\n        result = result || {};\n        result[name] = plugin;\n      }\n    });\n\n    return result;\n  };\n\n  /**\n   * Gets a plugin's version, if available\n   *\n   * @param   {string} name\n   *          The name of a plugin.\n   *\n   * @returns {string}\n   *          The plugin's version or an empty string.\n   */\n\n\n  Plugin.getPluginVersion = function getPluginVersion(name) {\n    var plugin = getPlugin(name);\n\n    return plugin && plugin.VERSION || '';\n  };\n\n  return Plugin;\n}();\n\n/**\n * Gets a plugin by name if it exists.\n *\n * @static\n * @method   getPlugin\n * @memberOf Plugin\n * @param    {string} name\n *           The name of a plugin.\n *\n * @returns  {Function|undefined}\n *           The plugin (or `undefined`).\n */\n\n\nPlugin.getPlugin = getPlugin;\n\n/**\n * The name of the base plugin class as it is registered.\n *\n * @type {string}\n */\nPlugin.BASE_PLUGIN_NAME = BASE_PLUGIN_NAME;\n\nPlugin.registerPlugin(BASE_PLUGIN_NAME, Plugin);\n\n/**\n * Documented in player.js\n *\n * @ignore\n */\nPlayer.prototype.usingPlugin = function (name) {\n  return !!this[PLUGIN_CACHE_KEY] && this[PLUGIN_CACHE_KEY][name] === true;\n};\n\n/**\n * Documented in player.js\n *\n * @ignore\n */\nPlayer.prototype.hasPlugin = function (name) {\n  return !!pluginExists(name);\n};\n\n/**\n * @file extend.js\n * @module extend\n */\n\n/**\n * A combination of node inherits and babel's inherits (after transpile).\n * Both work the same but node adds `super_` to the subClass\n * and Bable adds the superClass as __proto__. Both seem useful.\n *\n * @param {Object} subClass\n *        The class to inherit to\n *\n * @param {Object} superClass\n *        The class to inherit from\n *\n * @private\n */\nvar _inherits = function _inherits(subClass, superClass) {\n  if (typeof superClass !== 'function' && superClass !== null) {\n    throw new TypeError('Super expression must either be null or a function, not ' + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (superClass) {\n    // node\n    subClass.super_ = superClass;\n  }\n};\n\n/**\n * Function for subclassing using the same inheritance that\n * videojs uses internally\n *\n * @static\n * @const\n *\n * @param {Object} superClass\n *        The class to inherit from\n *\n * @param {Object} [subClassMethods={}]\n *        The class to inherit to\n *\n * @return {Object}\n *         The new object with subClassMethods that inherited superClass.\n */\nvar extendFn = function extendFn(superClass) {\n  var subClassMethods = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var subClass = function subClass() {\n    superClass.apply(this, arguments);\n  };\n\n  var methods = {};\n\n  if ((typeof subClassMethods === 'undefined' ? 'undefined' : _typeof(subClassMethods)) === 'object') {\n    if (subClassMethods.constructor !== Object.prototype.constructor) {\n      subClass = subClassMethods.constructor;\n    }\n    methods = subClassMethods;\n  } else if (typeof subClassMethods === 'function') {\n    subClass = subClassMethods;\n  }\n\n  _inherits(subClass, superClass);\n\n  // Extend subObj's prototype with functions and other properties from props\n  for (var name in methods) {\n    if (methods.hasOwnProperty(name)) {\n      subClass.prototype[name] = methods[name];\n    }\n  }\n\n  return subClass;\n};\n\n/**\n * @file video.js\n * @module videojs\n */\n\n/**\n * Normalize an `id` value by trimming off a leading `#`\n *\n * @param   {string} id\n *          A string, maybe with a leading `#`.\n *\n * @returns {string}\n *          The string, without any leading `#`.\n */\nvar normalizeId = function normalizeId(id) {\n  return id.indexOf('#') === 0 ? id.slice(1) : id;\n};\n\n/**\n * Doubles as the main function for users to create a player instance and also\n * the main library object.\n * The `videojs` function can be used to initialize or retrieve a player.\n  *\n * @param {string|Element} id\n *        Video element or video element ID\n *\n * @param {Object} [options]\n *        Optional options object for config/settings\n *\n * @param {Component~ReadyCallback} [ready]\n *        Optional ready callback\n *\n * @return {Player}\n *         A player instance\n */\nfunction videojs$1(id, options, ready) {\n  var player = videojs$1.getPlayer(id);\n\n  if (player) {\n    if (options) {\n      log$1.warn('Player \"' + id + '\" is already initialised. Options will not be applied.');\n    }\n    if (ready) {\n      player.ready(ready);\n    }\n    return player;\n  }\n\n  var el = typeof id === 'string' ? $('#' + normalizeId(id)) : id;\n\n  if (!isEl(el)) {\n    throw new TypeError('The element or ID supplied is not valid. (videojs)');\n  }\n\n  if (!document.body.contains(el)) {\n    log$1.warn('The element supplied is not included in the DOM');\n  }\n\n  options = options || {};\n\n  videojs$1.hooks('beforesetup').forEach(function (hookFunction) {\n    var opts = hookFunction(el, mergeOptions(options));\n\n    if (!isObject(opts) || Array.isArray(opts)) {\n      log$1.error('please return an object in beforesetup hooks');\n      return;\n    }\n\n    options = mergeOptions(options, opts);\n  });\n\n  // We get the current \"Player\" component here in case an integration has\n  // replaced it with a custom player.\n  var PlayerComponent = Component.getComponent('Player');\n\n  player = new PlayerComponent(el, options, ready);\n\n  videojs$1.hooks('setup').forEach(function (hookFunction) {\n    return hookFunction(player);\n  });\n\n  return player;\n}\n\n/**\n * An Object that contains lifecycle hooks as keys which point to an array\n * of functions that are run when a lifecycle is triggered\n */\nvideojs$1.hooks_ = {};\n\n/**\n * Get a list of hooks for a specific lifecycle\n * @function videojs.hooks\n *\n * @param {string} type\n *        the lifecyle to get hooks from\n *\n * @param {Function|Function[]} [fn]\n *        Optionally add a hook (or hooks) to the lifecycle that your are getting.\n *\n * @return {Array}\n *         an array of hooks, or an empty array if there are none.\n */\nvideojs$1.hooks = function (type, fn) {\n  videojs$1.hooks_[type] = videojs$1.hooks_[type] || [];\n  if (fn) {\n    videojs$1.hooks_[type] = videojs$1.hooks_[type].concat(fn);\n  }\n  return videojs$1.hooks_[type];\n};\n\n/**\n * Add a function hook to a specific videojs lifecycle.\n *\n * @param {string} type\n *        the lifecycle to hook the function to.\n *\n * @param {Function|Function[]}\n *        The function or array of functions to attach.\n */\nvideojs$1.hook = function (type, fn) {\n  videojs$1.hooks(type, fn);\n};\n\n/**\n * Add a function hook that will only run once to a specific videojs lifecycle.\n *\n * @param {string} type\n *        the lifecycle to hook the function to.\n *\n * @param {Function|Function[]}\n *        The function or array of functions to attach.\n */\nvideojs$1.hookOnce = function (type, fn) {\n  videojs$1.hooks(type, [].concat(fn).map(function (original) {\n    var wrapper = function wrapper() {\n      videojs$1.removeHook(type, wrapper);\n      return original.apply(undefined, arguments);\n    };\n\n    return wrapper;\n  }));\n};\n\n/**\n * Remove a hook from a specific videojs lifecycle.\n *\n * @param {string} type\n *        the lifecycle that the function hooked to\n *\n * @param {Function} fn\n *        The hooked function to remove\n *\n * @return {boolean}\n *         The function that was removed or undef\n */\nvideojs$1.removeHook = function (type, fn) {\n  var index = videojs$1.hooks(type).indexOf(fn);\n\n  if (index <= -1) {\n    return false;\n  }\n\n  videojs$1.hooks_[type] = videojs$1.hooks_[type].slice();\n  videojs$1.hooks_[type].splice(index, 1);\n\n  return true;\n};\n\n// Add default styles\nif (window$1.VIDEOJS_NO_DYNAMIC_STYLE !== true && isReal()) {\n  var style$1 = $('.vjs-styles-defaults');\n\n  if (!style$1) {\n    style$1 = createStyleElement('vjs-styles-defaults');\n    var head = $('head');\n\n    if (head) {\n      head.insertBefore(style$1, head.firstChild);\n    }\n    setTextContent(style$1, '\\n      .video-js {\\n        width: 300px;\\n        height: 150px;\\n      }\\n\\n      .vjs-fluid {\\n        padding-top: 56.25%\\n      }\\n    ');\n  }\n}\n\n// Run Auto-load players\n// You have to wait at least once in case this script is loaded after your\n// video in the DOM (weird behavior only with minified version)\nautoSetupTimeout(1, videojs$1);\n\n/**\n * Current software version. Follows semver.\n *\n * @type {string}\n */\nvideojs$1.VERSION = version;\n\n/**\n * The global options object. These are the settings that take effect\n * if no overrides are specified when the player is created.\n *\n * @type {Object}\n */\nvideojs$1.options = Player.prototype.options_;\n\n/**\n * Get an object with the currently created players, keyed by player ID\n *\n * @return {Object}\n *         The created players\n */\nvideojs$1.getPlayers = function () {\n  return Player.players;\n};\n\n/**\n * Get a single player based on an ID or DOM element.\n *\n * This is useful if you want to check if an element or ID has an associated\n * Video.js player, but not create one if it doesn't.\n *\n * @param   {string|Element} id\n *          An HTML element - `<video>`, `<audio>`, or `<video-js>` -\n *          or a string matching the `id` of such an element.\n *\n * @returns {Player|undefined}\n *          A player instance or `undefined` if there is no player instance\n *          matching the argument.\n */\nvideojs$1.getPlayer = function (id) {\n  var players = Player.players;\n  var tag = void 0;\n\n  if (typeof id === 'string') {\n    var nId = normalizeId(id);\n    var player = players[nId];\n\n    if (player) {\n      return player;\n    }\n\n    tag = $('#' + nId);\n  } else {\n    tag = id;\n  }\n\n  if (isEl(tag)) {\n    var _tag = tag,\n        _player = _tag.player,\n        playerId = _tag.playerId;\n\n    // Element may have a `player` property referring to an already created\n    // player instance. If so, return that.\n\n    if (_player || players[playerId]) {\n      return _player || players[playerId];\n    }\n  }\n};\n\n/**\n * Returns an array of all current players.\n *\n * @return {Array}\n *         An array of all players. The array will be in the order that\n *         `Object.keys` provides, which could potentially vary between\n *         JavaScript engines.\n *\n */\nvideojs$1.getAllPlayers = function () {\n  return (\n\n    // Disposed players leave a key with a `null` value, so we need to make sure\n    // we filter those out.\n    Object.keys(Player.players).map(function (k) {\n      return Player.players[k];\n    }).filter(Boolean)\n  );\n};\n\n/**\n * Expose players object.\n *\n * @memberOf videojs\n * @property {Object} players\n */\nvideojs$1.players = Player.players;\n\n/**\n * Get a component class object by name\n *\n * @borrows Component.getComponent as videojs.getComponent\n */\nvideojs$1.getComponent = Component.getComponent;\n\n/**\n * Register a component so it can referred to by name. Used when adding to other\n * components, either through addChild `component.addChild('myComponent')` or through\n * default children options  `{ children: ['myComponent'] }`.\n *\n * > NOTE: You could also just initialize the component before adding.\n * `component.addChild(new MyComponent());`\n *\n * @param {string} name\n *        The class name of the component\n *\n * @param {Component} comp\n *        The component class\n *\n * @return {Component}\n *         The newly registered component\n */\nvideojs$1.registerComponent = function (name$$1, comp) {\n  if (Tech.isTech(comp)) {\n    log$1.warn('The ' + name$$1 + ' tech was registered as a component. It should instead be registered using videojs.registerTech(name, tech)');\n  }\n\n  Component.registerComponent.call(Component, name$$1, comp);\n};\n\n/**\n * Get a Tech class object by name\n *\n * @borrows Tech.getTech as videojs.getTech\n */\nvideojs$1.getTech = Tech.getTech;\n\n/**\n * Register a Tech so it can referred to by name.\n * This is used in the tech order for the player.\n *\n * @borrows Tech.registerTech as videojs.registerTech\n */\nvideojs$1.registerTech = Tech.registerTech;\n\n/**\n * Register a middleware to a source type.\n *\n * @param {String} type A string representing a MIME type.\n * @param {function(player):object} middleware A middleware factory that takes a player.\n */\nvideojs$1.use = use;\n\n/**\n * An object that can be returned by a middleware to signify\n * that the middleware is being terminated.\n *\n * @type {object}\n * @memberOf {videojs}\n * @property {object} middleware.TERMINATOR\n */\nObject.defineProperty(videojs$1, 'middleware', {\n  value: {},\n  writeable: false,\n  enumerable: true\n});\n\nObject.defineProperty(videojs$1.middleware, 'TERMINATOR', {\n  value: TERMINATOR,\n  writeable: false,\n  enumerable: true\n});\n\n/**\n * A suite of browser and device tests from {@link browser}.\n *\n * @type {Object}\n * @private\n */\nvideojs$1.browser = browser;\n\n/**\n * Whether or not the browser supports touch events. Included for backward\n * compatibility with 4.x, but deprecated. Use `videojs.browser.TOUCH_ENABLED`\n * instead going forward.\n *\n * @deprecated since version 5.0\n * @type {boolean}\n */\nvideojs$1.TOUCH_ENABLED = TOUCH_ENABLED;\n\n/**\n * Subclass an existing class\n * Mimics ES6 subclassing with the `extend` keyword\n *\n * @borrows extend:extendFn as videojs.extend\n */\nvideojs$1.extend = extendFn;\n\n/**\n * Merge two options objects recursively\n * Performs a deep merge like lodash.merge but **only merges plain objects**\n * (not arrays, elements, anything else)\n * Other values will be copied directly from the second object.\n *\n * @borrows merge-options:mergeOptions as videojs.mergeOptions\n */\nvideojs$1.mergeOptions = mergeOptions;\n\n/**\n * Change the context (this) of a function\n *\n * > NOTE: as of v5.0 we require an ES5 shim, so you should use the native\n * `function() {}.bind(newContext);` instead of this.\n *\n * @borrows fn:bind as videojs.bind\n */\nvideojs$1.bind = bind;\n\n/**\n * Register a Video.js plugin.\n *\n * @borrows plugin:registerPlugin as videojs.registerPlugin\n * @method registerPlugin\n *\n * @param  {string} name\n *         The name of the plugin to be registered. Must be a string and\n *         must not match an existing plugin or a method on the `Player`\n *         prototype.\n *\n * @param  {Function} plugin\n *         A sub-class of `Plugin` or a function for basic plugins.\n *\n * @return {Function}\n *         For advanced plugins, a factory function for that plugin. For\n *         basic plugins, a wrapper function that initializes the plugin.\n */\nvideojs$1.registerPlugin = Plugin.registerPlugin;\n\n/**\n * Deregister a Video.js plugin.\n *\n * @borrows plugin:deregisterPlugin as videojs.deregisterPlugin\n * @method deregisterPlugin\n *\n * @param  {string} name\n *         The name of the plugin to be deregistered. Must be a string and\n *         must match an existing plugin or a method on the `Player`\n *         prototype.\n *\n */\nvideojs$1.deregisterPlugin = Plugin.deregisterPlugin;\n\n/**\n * Deprecated method to register a plugin with Video.js\n *\n * @deprecated\n *        videojs.plugin() is deprecated; use videojs.registerPlugin() instead\n *\n * @param {string} name\n *        The plugin name\n *\n * @param {Plugin|Function} plugin\n *         The plugin sub-class or function\n */\nvideojs$1.plugin = function (name$$1, plugin) {\n  log$1.warn('videojs.plugin() is deprecated; use videojs.registerPlugin() instead');\n  return Plugin.registerPlugin(name$$1, plugin);\n};\n\n/**\n * Gets an object containing multiple Video.js plugins.\n *\n * @param  {Array} [names]\n *         If provided, should be an array of plugin names. Defaults to _all_\n *         plugin names.\n *\n * @return {Object|undefined}\n *         An object containing plugin(s) associated with their name(s) or\n *         `undefined` if no matching plugins exist).\n */\nvideojs$1.getPlugins = Plugin.getPlugins;\n\n/**\n * Gets a plugin by name if it exists.\n *\n * @param  {string} name\n *         The name of a plugin.\n *\n * @return {Function|undefined}\n *         The plugin (or `undefined`).\n */\nvideojs$1.getPlugin = Plugin.getPlugin;\n\n/**\n * Gets a plugin's version, if available\n *\n * @param  {string} name\n *         The name of a plugin.\n *\n * @return {string}\n *         The plugin's version or an empty string.\n */\nvideojs$1.getPluginVersion = Plugin.getPluginVersion;\n\n/**\n * Adding languages so that they're available to all players.\n * Example: `videojs.addLanguage('es', { 'Hello': 'Hola' });`\n *\n * @param {string} code\n *        The language code or dictionary property\n *\n * @param {Object} data\n *        The data values to be translated\n *\n * @return {Object}\n *         The resulting language dictionary object\n */\nvideojs$1.addLanguage = function (code, data) {\n  var _mergeOptions;\n\n  code = ('' + code).toLowerCase();\n\n  videojs$1.options.languages = mergeOptions(videojs$1.options.languages, (_mergeOptions = {}, _mergeOptions[code] = data, _mergeOptions));\n\n  return videojs$1.options.languages[code];\n};\n\n/**\n * Log messages\n *\n * @borrows log:log as videojs.log\n */\nvideojs$1.log = log$1;\n\n/**\n * Creates an emulated TimeRange object.\n *\n * @borrows time-ranges:createTimeRanges as videojs.createTimeRange\n */\n/**\n * @borrows time-ranges:createTimeRanges as videojs.createTimeRanges\n */\nvideojs$1.createTimeRange = videojs$1.createTimeRanges = createTimeRanges;\n\n/**\n * Format seconds as a time string, H:MM:SS or M:SS\n * Supplying a guide (in seconds) will force a number of leading zeros\n * to cover the length of the guide\n *\n * @borrows format-time:formatTime as videojs.formatTime\n */\nvideojs$1.formatTime = formatTime;\n\n/**\n * Replaces format-time with a custom implementation, to be used in place of the default.\n *\n * @borrows format-time:setFormatTime as videojs.setFormatTime\n *\n * @method setFormatTime\n *\n * @param {Function} customFn\n *        A custom format-time function which will be called with the current time and guide (in seconds) as arguments.\n *        Passed fn should return a string.\n */\nvideojs$1.setFormatTime = setFormatTime;\n\n/**\n * Resets format-time to the default implementation.\n *\n * @borrows format-time:resetFormatTime as videojs.resetFormatTime\n *\n * @method resetFormatTime\n */\nvideojs$1.resetFormatTime = resetFormatTime;\n\n/**\n * Resolve and parse the elements of a URL\n *\n * @borrows url:parseUrl as videojs.parseUrl\n *\n */\nvideojs$1.parseUrl = parseUrl;\n\n/**\n * Returns whether the url passed is a cross domain request or not.\n *\n * @borrows url:isCrossOrigin as videojs.isCrossOrigin\n */\nvideojs$1.isCrossOrigin = isCrossOrigin;\n\n/**\n * Event target class.\n *\n * @borrows EventTarget as videojs.EventTarget\n */\nvideojs$1.EventTarget = EventTarget;\n\n/**\n * Add an event listener to element\n * It stores the handler function in a separate cache object\n * and adds a generic handler to the element's event,\n * along with a unique id (guid) to the element.\n *\n * @borrows events:on as videojs.on\n */\nvideojs$1.on = on;\n\n/**\n * Trigger a listener only once for an event\n *\n * @borrows events:one as videojs.one\n */\nvideojs$1.one = one;\n\n/**\n * Removes event listeners from an element\n *\n * @borrows events:off as videojs.off\n */\nvideojs$1.off = off;\n\n/**\n * Trigger an event for an element\n *\n * @borrows events:trigger as videojs.trigger\n */\nvideojs$1.trigger = trigger;\n\n/**\n * A cross-browser XMLHttpRequest wrapper. Here's a simple example:\n *\n * @param {Object} options\n *        settings for the request.\n *\n * @return {XMLHttpRequest|XDomainRequest}\n *         The request object.\n *\n * @see https://github.com/Raynos/xhr\n */\nvideojs$1.xhr = xhr;\n\n/**\n * TextTrack class\n *\n * @borrows TextTrack as videojs.TextTrack\n */\nvideojs$1.TextTrack = TextTrack;\n\n/**\n * export the AudioTrack class so that source handlers can create\n * AudioTracks and then add them to the players AudioTrackList\n *\n * @borrows AudioTrack as videojs.AudioTrack\n */\nvideojs$1.AudioTrack = AudioTrack;\n\n/**\n * export the VideoTrack class so that source handlers can create\n * VideoTracks and then add them to the players VideoTrackList\n *\n * @borrows VideoTrack as videojs.VideoTrack\n */\nvideojs$1.VideoTrack = VideoTrack;\n\n/**\n * Determines, via duck typing, whether or not a value is a DOM element.\n *\n * @borrows dom:isEl as videojs.isEl\n * @deprecated Use videojs.dom.isEl() instead\n */\n\n/**\n * Determines, via duck typing, whether or not a value is a text node.\n *\n * @borrows dom:isTextNode as videojs.isTextNode\n * @deprecated Use videojs.dom.isTextNode() instead\n */\n\n/**\n * Creates an element and applies properties.\n *\n * @borrows dom:createEl as videojs.createEl\n * @deprecated Use videojs.dom.createEl() instead\n */\n\n/**\n * Check if an element has a CSS class\n *\n * @borrows dom:hasElClass as videojs.hasClass\n * @deprecated Use videojs.dom.hasClass() instead\n */\n\n/**\n * Add a CSS class name to an element\n *\n * @borrows dom:addElClass as videojs.addClass\n * @deprecated Use videojs.dom.addClass() instead\n */\n\n/**\n * Remove a CSS class name from an element\n *\n * @borrows dom:removeElClass as videojs.removeClass\n * @deprecated Use videojs.dom.removeClass() instead\n */\n\n/**\n * Adds or removes a CSS class name on an element depending on an optional\n * condition or the presence/absence of the class name.\n *\n * @borrows dom:toggleElClass as videojs.toggleClass\n * @deprecated Use videojs.dom.toggleClass() instead\n */\n\n/**\n * Apply attributes to an HTML element.\n *\n * @borrows dom:setElAttributes as videojs.setAttribute\n * @deprecated Use videojs.dom.setAttributes() instead\n */\n\n/**\n * Get an element's attribute values, as defined on the HTML tag\n * Attributes are not the same as properties. They're defined on the tag\n * or with setAttribute (which shouldn't be used with HTML)\n * This will return true or false for boolean attributes.\n *\n * @borrows dom:getElAttributes as videojs.getAttributes\n * @deprecated Use videojs.dom.getAttributes() instead\n */\n\n/**\n * Empties the contents of an element.\n *\n * @borrows dom:emptyEl as videojs.emptyEl\n * @deprecated Use videojs.dom.emptyEl() instead\n */\n\n/**\n * Normalizes and appends content to an element.\n *\n * The content for an element can be passed in multiple types and\n * combinations, whose behavior is as follows:\n *\n * - String\n *   Normalized into a text node.\n *\n * - Element, TextNode\n *   Passed through.\n *\n * - Array\n *   A one-dimensional array of strings, elements, nodes, or functions (which\n *   return single strings, elements, or nodes).\n *\n * - Function\n *   If the sole argument, is expected to produce a string, element,\n *   node, or array.\n *\n * @borrows dom:appendContents as videojs.appendContet\n * @deprecated Use videojs.dom.appendContent() instead\n */\n\n/**\n * Normalizes and inserts content into an element; this is identical to\n * `appendContent()`, except it empties the element first.\n *\n * The content for an element can be passed in multiple types and\n * combinations, whose behavior is as follows:\n *\n * - String\n *   Normalized into a text node.\n *\n * - Element, TextNode\n *   Passed through.\n *\n * - Array\n *   A one-dimensional array of strings, elements, nodes, or functions (which\n *   return single strings, elements, or nodes).\n *\n * - Function\n *   If the sole argument, is expected to produce a string, element,\n *   node, or array.\n *\n * @borrows dom:insertContent as videojs.insertContent\n * @deprecated Use videojs.dom.insertContent() instead\n */\n['isEl', 'isTextNode', 'createEl', 'hasClass', 'addClass', 'removeClass', 'toggleClass', 'setAttributes', 'getAttributes', 'emptyEl', 'appendContent', 'insertContent'].forEach(function (k) {\n  videojs$1[k] = function () {\n    log$1.warn('videojs.' + k + '() is deprecated; use videojs.dom.' + k + '() instead');\n    return Dom[k].apply(null, arguments);\n  };\n});\n\n/**\n * A safe getComputedStyle.\n *\n * This is because in Firefox, if the player is loaded in an iframe with `display:none`,\n * then `getComputedStyle` returns `null`, so, we do a null-check to make sure\n * that the player doesn't break in these cases.\n * See https://bugzilla.mozilla.org/show_bug.cgi?id=548397 for more details.\n *\n * @borrows computed-style:computedStyle as videojs.computedStyle\n */\nvideojs$1.computedStyle = computedStyle;\n\n/**\n * Export the Dom utilities for use in external plugins\n * and Tech's\n */\nvideojs$1.dom = Dom;\n\n/**\n * Export the Url utilities for use in external plugins\n * and Tech's\n */\nvideojs$1.url = Url;\n\n/**\n * @videojs/http-streaming\n * @version 1.2.5\n * @copyright 2018 Brightcove, Inc\n * @license Apache-2.0\n */\n\n/**\n * @file resolve-url.js\n */\n\nvar resolveUrl = function resolveUrl(baseURL, relativeURL) {\n  // return early if we don't need to resolve\n  if (/^[a-z]+:/i.test(relativeURL)) {\n    return relativeURL;\n  }\n\n  // if the base URL is relative then combine with the current location\n  if (!/\\/\\//i.test(baseURL)) {\n    baseURL = URLToolkit.buildAbsoluteURL(window$1.location.href, baseURL);\n  }\n\n  return URLToolkit.buildAbsoluteURL(baseURL, relativeURL);\n};\n\nvar classCallCheck$1 = function classCallCheck$$1(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass$1 = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar get$2 = function get$$1(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get$$1(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nvar inherits$1 = function inherits$$1(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar possibleConstructorReturn$1 = function possibleConstructorReturn$$1(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar slicedToArray$1 = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\n/**\n * @file playlist-loader.js\n *\n * A state machine that manages the loading, caching, and updating of\n * M3U8 playlists.\n *\n */\n\nvar mergeOptions$1 = videojs$1.mergeOptions,\n    EventTarget$1 = videojs$1.EventTarget,\n    log$2 = videojs$1.log;\n\n/**\n * Loops through all supported media groups in master and calls the provided\n * callback for each group\n *\n * @param {Object} master\n *        The parsed master manifest object\n * @param {Function} callback\n *        Callback to call for each media group\n */\n\nvar forEachMediaGroup = function forEachMediaGroup(master, callback) {\n  ['AUDIO', 'SUBTITLES'].forEach(function (mediaType) {\n    for (var groupKey in master.mediaGroups[mediaType]) {\n      for (var labelKey in master.mediaGroups[mediaType][groupKey]) {\n        var mediaProperties = master.mediaGroups[mediaType][groupKey][labelKey];\n\n        callback(mediaProperties, mediaType, groupKey, labelKey);\n      }\n    }\n  });\n};\n\n/**\n  * Returns a new array of segments that is the result of merging\n  * properties from an older list of segments onto an updated\n  * list. No properties on the updated playlist will be overridden.\n  *\n  * @param {Array} original the outdated list of segments\n  * @param {Array} update the updated list of segments\n  * @param {Number=} offset the index of the first update\n  * segment in the original segment list. For non-live playlists,\n  * this should always be zero and does not need to be\n  * specified. For live playlists, it should be the difference\n  * between the media sequence numbers in the original and updated\n  * playlists.\n  * @return a list of merged segment objects\n  */\nvar updateSegments = function updateSegments(original, update, offset) {\n  var result = update.slice();\n\n  offset = offset || 0;\n  var length = Math.min(original.length, update.length + offset);\n\n  for (var i = offset; i < length; i++) {\n    result[i - offset] = mergeOptions$1(original[i], result[i - offset]);\n  }\n  return result;\n};\n\nvar resolveSegmentUris = function resolveSegmentUris(segment, baseUri) {\n  if (!segment.resolvedUri) {\n    segment.resolvedUri = resolveUrl(baseUri, segment.uri);\n  }\n  if (segment.key && !segment.key.resolvedUri) {\n    segment.key.resolvedUri = resolveUrl(baseUri, segment.key.uri);\n  }\n  if (segment.map && !segment.map.resolvedUri) {\n    segment.map.resolvedUri = resolveUrl(baseUri, segment.map.uri);\n  }\n};\n\n/**\n  * Returns a new master playlist that is the result of merging an\n  * updated media playlist into the original version. If the\n  * updated media playlist does not match any of the playlist\n  * entries in the original master playlist, null is returned.\n  *\n  * @param {Object} master a parsed master M3U8 object\n  * @param {Object} media a parsed media M3U8 object\n  * @return {Object} a new object that represents the original\n  * master playlist with the updated media playlist merged in, or\n  * null if the merge produced no change.\n  */\nvar updateMaster = function updateMaster(master, media) {\n  var result = mergeOptions$1(master, {});\n  var playlist = result.playlists[media.uri];\n\n  if (!playlist) {\n    return null;\n  }\n\n  // consider the playlist unchanged if the number of segments is equal and the media\n  // sequence number is unchanged\n  if (playlist.segments && media.segments && playlist.segments.length === media.segments.length && playlist.mediaSequence === media.mediaSequence) {\n    return null;\n  }\n\n  var mergedPlaylist = mergeOptions$1(playlist, media);\n\n  // if the update could overlap existing segment information, merge the two segment lists\n  if (playlist.segments) {\n    mergedPlaylist.segments = updateSegments(playlist.segments, media.segments, media.mediaSequence - playlist.mediaSequence);\n  }\n\n  // resolve any segment URIs to prevent us from having to do it later\n  mergedPlaylist.segments.forEach(function (segment) {\n    resolveSegmentUris(segment, mergedPlaylist.resolvedUri);\n  });\n\n  // TODO Right now in the playlists array there are two references to each playlist, one\n  // that is referenced by index, and one by URI. The index reference may no longer be\n  // necessary.\n  for (var i = 0; i < result.playlists.length; i++) {\n    if (result.playlists[i].uri === media.uri) {\n      result.playlists[i] = mergedPlaylist;\n    }\n  }\n  result.playlists[media.uri] = mergedPlaylist;\n\n  return result;\n};\n\nvar setupMediaPlaylists = function setupMediaPlaylists(master) {\n  // setup by-URI lookups and resolve media playlist URIs\n  var i = master.playlists.length;\n\n  while (i--) {\n    var playlist = master.playlists[i];\n\n    master.playlists[playlist.uri] = playlist;\n    playlist.resolvedUri = resolveUrl(master.uri, playlist.uri);\n    playlist.id = i;\n\n    if (!playlist.attributes) {\n      // Although the spec states an #EXT-X-STREAM-INF tag MUST have a\n      // BANDWIDTH attribute, we can play the stream without it. This means a poorly\n      // formatted master playlist may not have an attribute list. An attributes\n      // property is added here to prevent undefined references when we encounter\n      // this scenario.\n      playlist.attributes = {};\n\n      log$2.warn('Invalid playlist STREAM-INF detected. Missing BANDWIDTH attribute.');\n    }\n  }\n};\n\nvar resolveMediaGroupUris = function resolveMediaGroupUris(master) {\n  forEachMediaGroup(master, function (properties) {\n    if (properties.uri) {\n      properties.resolvedUri = resolveUrl(master.uri, properties.uri);\n    }\n  });\n};\n\n/**\n * Calculates the time to wait before refreshing a live playlist\n *\n * @param {Object} media\n *        The current media\n * @param {Boolean} update\n *        True if there were any updates from the last refresh, false otherwise\n * @return {Number}\n *         The time in ms to wait before refreshing the live playlist\n */\nvar refreshDelay = function refreshDelay(media, update) {\n  var lastSegment = media.segments[media.segments.length - 1];\n  var delay = void 0;\n\n  if (update && lastSegment && lastSegment.duration) {\n    delay = lastSegment.duration * 1000;\n  } else {\n    // if the playlist is unchanged since the last reload or last segment duration\n    // cannot be determined, try again after half the target duration\n    delay = (media.targetDuration || 10) * 500;\n  }\n  return delay;\n};\n\n/**\n * Load a playlist from a remote location\n *\n * @class PlaylistLoader\n * @extends Stream\n * @param {String} srcUrl the url to start with\n * @param {Boolean} withCredentials the withCredentials xhr option\n * @constructor\n */\n\nvar PlaylistLoader = function (_EventTarget) {\n  inherits$1(PlaylistLoader, _EventTarget);\n\n  function PlaylistLoader(srcUrl, hls, withCredentials) {\n    classCallCheck$1(this, PlaylistLoader);\n\n    var _this = possibleConstructorReturn$1(this, (PlaylistLoader.__proto__ || Object.getPrototypeOf(PlaylistLoader)).call(this));\n\n    _this.srcUrl = srcUrl;\n    _this.hls_ = hls;\n    _this.withCredentials = withCredentials;\n\n    if (!_this.srcUrl) {\n      throw new Error('A non-empty playlist URL is required');\n    }\n\n    // initialize the loader state\n    _this.state = 'HAVE_NOTHING';\n\n    // live playlist staleness timeout\n    _this.on('mediaupdatetimeout', function () {\n      if (_this.state !== 'HAVE_METADATA') {\n        // only refresh the media playlist if no other activity is going on\n        return;\n      }\n\n      _this.state = 'HAVE_CURRENT_METADATA';\n\n      _this.request = _this.hls_.xhr({\n        uri: resolveUrl(_this.master.uri, _this.media().uri),\n        withCredentials: _this.withCredentials\n      }, function (error, req) {\n        // disposed\n        if (!_this.request) {\n          return;\n        }\n\n        if (error) {\n          return _this.playlistRequestError(_this.request, _this.media().uri, 'HAVE_METADATA');\n        }\n\n        _this.haveMetadata(_this.request, _this.media().uri);\n      });\n    });\n    return _this;\n  }\n\n  createClass$1(PlaylistLoader, [{\n    key: 'playlistRequestError',\n    value: function playlistRequestError(xhr$$1, url, startingState) {\n      // any in-flight request is now finished\n      this.request = null;\n\n      if (startingState) {\n        this.state = startingState;\n      }\n\n      this.error = {\n        playlist: this.master.playlists[url],\n        status: xhr$$1.status,\n        message: 'HLS playlist request error at URL: ' + url,\n        responseText: xhr$$1.responseText,\n        code: xhr$$1.status >= 500 ? 4 : 2\n      };\n\n      this.trigger('error');\n    }\n\n    // update the playlist loader's state in response to a new or\n    // updated playlist.\n\n  }, {\n    key: 'haveMetadata',\n    value: function haveMetadata(xhr$$1, url) {\n      var _this2 = this;\n\n      // any in-flight request is now finished\n      this.request = null;\n      this.state = 'HAVE_METADATA';\n\n      var parser = new Parser();\n\n      parser.push(xhr$$1.responseText);\n      parser.end();\n      parser.manifest.uri = url;\n      // m3u8-parser does not attach an attributes property to media playlists so make\n      // sure that the property is attached to avoid undefined reference errors\n      parser.manifest.attributes = parser.manifest.attributes || {};\n\n      // merge this playlist into the master\n      var update = updateMaster(this.master, parser.manifest);\n\n      this.targetDuration = parser.manifest.targetDuration;\n\n      if (update) {\n        this.master = update;\n        this.media_ = this.master.playlists[parser.manifest.uri];\n      } else {\n        this.trigger('playlistunchanged');\n      }\n\n      // refresh live playlists after a target duration passes\n      if (!this.media().endList) {\n        window$1.clearTimeout(this.mediaUpdateTimeout);\n        this.mediaUpdateTimeout = window$1.setTimeout(function () {\n          _this2.trigger('mediaupdatetimeout');\n        }, refreshDelay(this.media(), !!update));\n      }\n\n      this.trigger('loadedplaylist');\n    }\n\n    /**\n     * Abort any outstanding work and clean up.\n     */\n\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.stopRequest();\n      window$1.clearTimeout(this.mediaUpdateTimeout);\n    }\n  }, {\n    key: 'stopRequest',\n    value: function stopRequest() {\n      if (this.request) {\n        var oldRequest = this.request;\n\n        this.request = null;\n        oldRequest.onreadystatechange = null;\n        oldRequest.abort();\n      }\n    }\n\n    /**\n     * When called without any arguments, returns the currently\n     * active media playlist. When called with a single argument,\n     * triggers the playlist loader to asynchronously switch to the\n     * specified media playlist. Calling this method while the\n     * loader is in the HAVE_NOTHING causes an error to be emitted\n     * but otherwise has no effect.\n     *\n     * @param {Object=} playlist the parsed media playlist\n     * object to switch to\n     * @return {Playlist} the current loaded media\n     */\n\n  }, {\n    key: 'media',\n    value: function media(playlist) {\n      var _this3 = this;\n\n      // getter\n      if (!playlist) {\n        return this.media_;\n      }\n\n      // setter\n      if (this.state === 'HAVE_NOTHING') {\n        throw new Error('Cannot switch media playlist from ' + this.state);\n      }\n\n      var startingState = this.state;\n\n      // find the playlist object if the target playlist has been\n      // specified by URI\n      if (typeof playlist === 'string') {\n        if (!this.master.playlists[playlist]) {\n          throw new Error('Unknown playlist URI: ' + playlist);\n        }\n        playlist = this.master.playlists[playlist];\n      }\n\n      var mediaChange = !this.media_ || playlist.uri !== this.media_.uri;\n\n      // switch to fully loaded playlists immediately\n      if (this.master.playlists[playlist.uri].endList) {\n        // abort outstanding playlist requests\n        if (this.request) {\n          this.request.onreadystatechange = null;\n          this.request.abort();\n          this.request = null;\n        }\n        this.state = 'HAVE_METADATA';\n        this.media_ = playlist;\n\n        // trigger media change if the active media has been updated\n        if (mediaChange) {\n          this.trigger('mediachanging');\n          this.trigger('mediachange');\n        }\n        return;\n      }\n\n      // switching to the active playlist is a no-op\n      if (!mediaChange) {\n        return;\n      }\n\n      this.state = 'SWITCHING_MEDIA';\n\n      // there is already an outstanding playlist request\n      if (this.request) {\n        if (resolveUrl(this.master.uri, playlist.uri) === this.request.url) {\n          // requesting to switch to the same playlist multiple times\n          // has no effect after the first\n          return;\n        }\n        this.request.onreadystatechange = null;\n        this.request.abort();\n        this.request = null;\n      }\n\n      // request the new playlist\n      if (this.media_) {\n        this.trigger('mediachanging');\n      }\n\n      this.request = this.hls_.xhr({\n        uri: resolveUrl(this.master.uri, playlist.uri),\n        withCredentials: this.withCredentials\n      }, function (error, req) {\n        // disposed\n        if (!_this3.request) {\n          return;\n        }\n\n        if (error) {\n          return _this3.playlistRequestError(_this3.request, playlist.uri, startingState);\n        }\n\n        _this3.haveMetadata(req, playlist.uri);\n\n        // fire loadedmetadata the first time a media playlist is loaded\n        if (startingState === 'HAVE_MASTER') {\n          _this3.trigger('loadedmetadata');\n        } else {\n          _this3.trigger('mediachange');\n        }\n      });\n    }\n\n    /**\n     * pause loading of the playlist\n     */\n\n  }, {\n    key: 'pause',\n    value: function pause() {\n      this.stopRequest();\n      window$1.clearTimeout(this.mediaUpdateTimeout);\n      if (this.state === 'HAVE_NOTHING') {\n        // If we pause the loader before any data has been retrieved, its as if we never\n        // started, so reset to an unstarted state.\n        this.started = false;\n      }\n      // Need to restore state now that no activity is happening\n      if (this.state === 'SWITCHING_MEDIA') {\n        // if the loader was in the process of switching media, it should either return to\n        // HAVE_MASTER or HAVE_METADATA depending on if the loader has loaded a media\n        // playlist yet. This is determined by the existence of loader.media_\n        if (this.media_) {\n          this.state = 'HAVE_METADATA';\n        } else {\n          this.state = 'HAVE_MASTER';\n        }\n      } else if (this.state === 'HAVE_CURRENT_METADATA') {\n        this.state = 'HAVE_METADATA';\n      }\n    }\n\n    /**\n     * start loading of the playlist\n     */\n\n  }, {\n    key: 'load',\n    value: function load(isFinalRendition) {\n      var _this4 = this;\n\n      window$1.clearTimeout(this.mediaUpdateTimeout);\n\n      var media = this.media();\n\n      if (isFinalRendition) {\n        var delay = media ? media.targetDuration / 2 * 1000 : 5 * 1000;\n\n        this.mediaUpdateTimeout = window$1.setTimeout(function () {\n          return _this4.load();\n        }, delay);\n        return;\n      }\n\n      if (!this.started) {\n        this.start();\n        return;\n      }\n\n      if (media && !media.endList) {\n        this.trigger('mediaupdatetimeout');\n      } else {\n        this.trigger('loadedplaylist');\n      }\n    }\n\n    /**\n     * start loading of the playlist\n     */\n\n  }, {\n    key: 'start',\n    value: function start() {\n      var _this5 = this;\n\n      this.started = true;\n\n      // request the specified URL\n      this.request = this.hls_.xhr({\n        uri: this.srcUrl,\n        withCredentials: this.withCredentials\n      }, function (error, req) {\n        // disposed\n        if (!_this5.request) {\n          return;\n        }\n\n        // clear the loader's request reference\n        _this5.request = null;\n\n        if (error) {\n          _this5.error = {\n            status: req.status,\n            message: 'HLS playlist request error at URL: ' + _this5.srcUrl,\n            responseText: req.responseText,\n            // MEDIA_ERR_NETWORK\n            code: 2\n          };\n          if (_this5.state === 'HAVE_NOTHING') {\n            _this5.started = false;\n          }\n          return _this5.trigger('error');\n        }\n\n        var parser = new Parser();\n\n        parser.push(req.responseText);\n        parser.end();\n\n        _this5.state = 'HAVE_MASTER';\n\n        parser.manifest.uri = _this5.srcUrl;\n\n        // loaded a master playlist\n        if (parser.manifest.playlists) {\n          _this5.master = parser.manifest;\n\n          setupMediaPlaylists(_this5.master);\n          resolveMediaGroupUris(_this5.master);\n\n          _this5.trigger('loadedplaylist');\n          if (!_this5.request) {\n            // no media playlist was specifically selected so start\n            // from the first listed one\n            _this5.media(parser.manifest.playlists[0]);\n          }\n          return;\n        }\n\n        // loaded a media playlist\n        // infer a master playlist if none was previously requested\n        _this5.master = {\n          mediaGroups: {\n            'AUDIO': {},\n            'VIDEO': {},\n            'CLOSED-CAPTIONS': {},\n            'SUBTITLES': {}\n          },\n          uri: window$1.location.href,\n          playlists: [{\n            uri: _this5.srcUrl,\n            id: 0\n          }]\n        };\n        _this5.master.playlists[_this5.srcUrl] = _this5.master.playlists[0];\n        _this5.master.playlists[0].resolvedUri = _this5.srcUrl;\n        // m3u8-parser does not attach an attributes property to media playlists so make\n        // sure that the property is attached to avoid undefined reference errors\n        _this5.master.playlists[0].attributes = _this5.master.playlists[0].attributes || {};\n        _this5.haveMetadata(req, _this5.srcUrl);\n        return _this5.trigger('loadedmetadata');\n      });\n    }\n  }]);\n  return PlaylistLoader;\n}(EventTarget$1);\n\n/**\n * @file playlist.js\n *\n * Playlist related utilities.\n */\n\nvar createTimeRange = videojs$1.createTimeRange;\n\n/**\n * walk backward until we find a duration we can use\n * or return a failure\n *\n * @param {Playlist} playlist the playlist to walk through\n * @param {Number} endSequence the mediaSequence to stop walking on\n */\n\nvar backwardDuration = function backwardDuration(playlist, endSequence) {\n  var result = 0;\n  var i = endSequence - playlist.mediaSequence;\n  // if a start time is available for segment immediately following\n  // the interval, use it\n  var segment = playlist.segments[i];\n\n  // Walk backward until we find the latest segment with timeline\n  // information that is earlier than endSequence\n  if (segment) {\n    if (typeof segment.start !== 'undefined') {\n      return { result: segment.start, precise: true };\n    }\n    if (typeof segment.end !== 'undefined') {\n      return {\n        result: segment.end - segment.duration,\n        precise: true\n      };\n    }\n  }\n  while (i--) {\n    segment = playlist.segments[i];\n    if (typeof segment.end !== 'undefined') {\n      return { result: result + segment.end, precise: true };\n    }\n\n    result += segment.duration;\n\n    if (typeof segment.start !== 'undefined') {\n      return { result: result + segment.start, precise: true };\n    }\n  }\n  return { result: result, precise: false };\n};\n\n/**\n * walk forward until we find a duration we can use\n * or return a failure\n *\n * @param {Playlist} playlist the playlist to walk through\n * @param {Number} endSequence the mediaSequence to stop walking on\n */\nvar forwardDuration = function forwardDuration(playlist, endSequence) {\n  var result = 0;\n  var segment = void 0;\n  var i = endSequence - playlist.mediaSequence;\n  // Walk forward until we find the earliest segment with timeline\n  // information\n\n  for (; i < playlist.segments.length; i++) {\n    segment = playlist.segments[i];\n    if (typeof segment.start !== 'undefined') {\n      return {\n        result: segment.start - result,\n        precise: true\n      };\n    }\n\n    result += segment.duration;\n\n    if (typeof segment.end !== 'undefined') {\n      return {\n        result: segment.end - result,\n        precise: true\n      };\n    }\n  }\n  // indicate we didn't find a useful duration estimate\n  return { result: -1, precise: false };\n};\n\n/**\n  * Calculate the media duration from the segments associated with a\n  * playlist. The duration of a subinterval of the available segments\n  * may be calculated by specifying an end index.\n  *\n  * @param {Object} playlist a media playlist object\n  * @param {Number=} endSequence an exclusive upper boundary\n  * for the playlist.  Defaults to playlist length.\n  * @param {Number} expired the amount of time that has dropped\n  * off the front of the playlist in a live scenario\n  * @return {Number} the duration between the first available segment\n  * and end index.\n  */\nvar intervalDuration = function intervalDuration(playlist, endSequence, expired) {\n  var backward = void 0;\n  var forward = void 0;\n\n  if (typeof endSequence === 'undefined') {\n    endSequence = playlist.mediaSequence + playlist.segments.length;\n  }\n\n  if (endSequence < playlist.mediaSequence) {\n    return 0;\n  }\n\n  // do a backward walk to estimate the duration\n  backward = backwardDuration(playlist, endSequence);\n  if (backward.precise) {\n    // if we were able to base our duration estimate on timing\n    // information provided directly from the Media Source, return\n    // it\n    return backward.result;\n  }\n\n  // walk forward to see if a precise duration estimate can be made\n  // that way\n  forward = forwardDuration(playlist, endSequence);\n  if (forward.precise) {\n    // we found a segment that has been buffered and so it's\n    // position is known precisely\n    return forward.result;\n  }\n\n  // return the less-precise, playlist-based duration estimate\n  return backward.result + expired;\n};\n\n/**\n  * Calculates the duration of a playlist. If a start and end index\n  * are specified, the duration will be for the subset of the media\n  * timeline between those two indices. The total duration for live\n  * playlists is always Infinity.\n  *\n  * @param {Object} playlist a media playlist object\n  * @param {Number=} endSequence an exclusive upper\n  * boundary for the playlist. Defaults to the playlist media\n  * sequence number plus its length.\n  * @param {Number=} expired the amount of time that has\n  * dropped off the front of the playlist in a live scenario\n  * @return {Number} the duration between the start index and end\n  * index.\n  */\nvar duration = function duration(playlist, endSequence, expired) {\n  if (!playlist) {\n    return 0;\n  }\n\n  if (typeof expired !== 'number') {\n    expired = 0;\n  }\n\n  // if a slice of the total duration is not requested, use\n  // playlist-level duration indicators when they're present\n  if (typeof endSequence === 'undefined') {\n    // if present, use the duration specified in the playlist\n    if (playlist.totalDuration) {\n      return playlist.totalDuration;\n    }\n\n    // duration should be Infinity for live playlists\n    if (!playlist.endList) {\n      return window$1.Infinity;\n    }\n  }\n\n  // calculate the total duration based on the segment durations\n  return intervalDuration(playlist, endSequence, expired);\n};\n\n/**\n  * Calculate the time between two indexes in the current playlist\n  * neight the start- nor the end-index need to be within the current\n  * playlist in which case, the targetDuration of the playlist is used\n  * to approximate the durations of the segments\n  *\n  * @param {Object} playlist a media playlist object\n  * @param {Number} startIndex\n  * @param {Number} endIndex\n  * @return {Number} the number of seconds between startIndex and endIndex\n  */\nvar sumDurations = function sumDurations(playlist, startIndex, endIndex) {\n  var durations = 0;\n\n  if (startIndex > endIndex) {\n    var _ref = [endIndex, startIndex];\n    startIndex = _ref[0];\n    endIndex = _ref[1];\n  }\n\n  if (startIndex < 0) {\n    for (var i = startIndex; i < Math.min(0, endIndex); i++) {\n      durations += playlist.targetDuration;\n    }\n    startIndex = 0;\n  }\n\n  for (var _i = startIndex; _i < endIndex; _i++) {\n    durations += playlist.segments[_i].duration;\n  }\n\n  return durations;\n};\n\n/**\n * Determines the media index of the segment corresponding to the safe edge of the live\n * window which is the duration of the last segment plus 2 target durations from the end\n * of the playlist.\n *\n * @param {Object} playlist\n *        a media playlist object\n * @return {Number}\n *         The media index of the segment at the safe live point. 0 if there is no \"safe\"\n *         point.\n * @function safeLiveIndex\n */\nvar safeLiveIndex = function safeLiveIndex(playlist) {\n  if (!playlist.segments.length) {\n    return 0;\n  }\n\n  var i = playlist.segments.length - 1;\n  var distanceFromEnd = playlist.segments[i].duration || playlist.targetDuration;\n  var safeDistance = distanceFromEnd + playlist.targetDuration * 2;\n\n  while (i--) {\n    distanceFromEnd += playlist.segments[i].duration;\n\n    if (distanceFromEnd >= safeDistance) {\n      break;\n    }\n  }\n\n  return Math.max(0, i);\n};\n\n/**\n * Calculates the playlist end time\n *\n * @param {Object} playlist a media playlist object\n * @param {Number=} expired the amount of time that has\n *                  dropped off the front of the playlist in a live scenario\n * @param {Boolean|false} useSafeLiveEnd a boolean value indicating whether or not the\n *                        playlist end calculation should consider the safe live end\n *                        (truncate the playlist end by three segments). This is normally\n *                        used for calculating the end of the playlist's seekable range.\n * @returns {Number} the end time of playlist\n * @function playlistEnd\n */\nvar playlistEnd = function playlistEnd(playlist, expired, useSafeLiveEnd) {\n  if (!playlist || !playlist.segments) {\n    return null;\n  }\n  if (playlist.endList) {\n    return duration(playlist);\n  }\n\n  if (expired === null) {\n    return null;\n  }\n\n  expired = expired || 0;\n\n  var endSequence = useSafeLiveEnd ? safeLiveIndex(playlist) : playlist.segments.length;\n\n  return intervalDuration(playlist, playlist.mediaSequence + endSequence, expired);\n};\n\n/**\n  * Calculates the interval of time that is currently seekable in a\n  * playlist. The returned time ranges are relative to the earliest\n  * moment in the specified playlist that is still available. A full\n  * seekable implementation for live streams would need to offset\n  * these values by the duration of content that has expired from the\n  * stream.\n  *\n  * @param {Object} playlist a media playlist object\n  * dropped off the front of the playlist in a live scenario\n  * @param {Number=} expired the amount of time that has\n  * dropped off the front of the playlist in a live scenario\n  * @return {TimeRanges} the periods of time that are valid targets\n  * for seeking\n  */\nvar seekable = function seekable(playlist, expired) {\n  var useSafeLiveEnd = true;\n  var seekableStart = expired || 0;\n  var seekableEnd = playlistEnd(playlist, expired, useSafeLiveEnd);\n\n  if (seekableEnd === null) {\n    return createTimeRange();\n  }\n  return createTimeRange(seekableStart, seekableEnd);\n};\n\nvar isWholeNumber = function isWholeNumber(num) {\n  return num - Math.floor(num) === 0;\n};\n\nvar roundSignificantDigit = function roundSignificantDigit(increment, num) {\n  // If we have a whole number, just add 1 to it\n  if (isWholeNumber(num)) {\n    return num + increment * 0.1;\n  }\n\n  var numDecimalDigits = num.toString().split('.')[1].length;\n\n  for (var i = 1; i <= numDecimalDigits; i++) {\n    var scale = Math.pow(10, i);\n    var temp = num * scale;\n\n    if (isWholeNumber(temp) || i === numDecimalDigits) {\n      return (temp + increment) / scale;\n    }\n  }\n};\n\nvar ceilLeastSignificantDigit = roundSignificantDigit.bind(null, 1);\nvar floorLeastSignificantDigit = roundSignificantDigit.bind(null, -1);\n\n/**\n * Determine the index and estimated starting time of the segment that\n * contains a specified playback position in a media playlist.\n *\n * @param {Object} playlist the media playlist to query\n * @param {Number} currentTime The number of seconds since the earliest\n * possible position to determine the containing segment for\n * @param {Number} startIndex\n * @param {Number} startTime\n * @return {Object}\n */\nvar getMediaInfoForTime = function getMediaInfoForTime(playlist, currentTime, startIndex, startTime) {\n  var i = void 0;\n  var segment = void 0;\n  var numSegments = playlist.segments.length;\n\n  var time = currentTime - startTime;\n\n  if (time < 0) {\n    // Walk backward from startIndex in the playlist, adding durations\n    // until we find a segment that contains `time` and return it\n    if (startIndex > 0) {\n      for (i = startIndex - 1; i >= 0; i--) {\n        segment = playlist.segments[i];\n        time += floorLeastSignificantDigit(segment.duration);\n        if (time > 0) {\n          return {\n            mediaIndex: i,\n            startTime: startTime - sumDurations(playlist, startIndex, i)\n          };\n        }\n      }\n    }\n    // We were unable to find a good segment within the playlist\n    // so select the first segment\n    return {\n      mediaIndex: 0,\n      startTime: currentTime\n    };\n  }\n\n  // When startIndex is negative, we first walk forward to first segment\n  // adding target durations. If we \"run out of time\" before getting to\n  // the first segment, return the first segment\n  if (startIndex < 0) {\n    for (i = startIndex; i < 0; i++) {\n      time -= playlist.targetDuration;\n      if (time < 0) {\n        return {\n          mediaIndex: 0,\n          startTime: currentTime\n        };\n      }\n    }\n    startIndex = 0;\n  }\n\n  // Walk forward from startIndex in the playlist, subtracting durations\n  // until we find a segment that contains `time` and return it\n  for (i = startIndex; i < numSegments; i++) {\n    segment = playlist.segments[i];\n    time -= ceilLeastSignificantDigit(segment.duration);\n    if (time < 0) {\n      return {\n        mediaIndex: i,\n        startTime: startTime + sumDurations(playlist, startIndex, i)\n      };\n    }\n  }\n\n  // We are out of possible candidates so load the last one...\n  return {\n    mediaIndex: numSegments - 1,\n    startTime: currentTime\n  };\n};\n\n/**\n * Check whether the playlist is blacklisted or not.\n *\n * @param {Object} playlist the media playlist object\n * @return {boolean} whether the playlist is blacklisted or not\n * @function isBlacklisted\n */\nvar isBlacklisted = function isBlacklisted(playlist) {\n  return playlist.excludeUntil && playlist.excludeUntil > Date.now();\n};\n\n/**\n * Check whether the playlist is compatible with current playback configuration or has\n * been blacklisted permanently for being incompatible.\n *\n * @param {Object} playlist the media playlist object\n * @return {boolean} whether the playlist is incompatible or not\n * @function isIncompatible\n */\nvar isIncompatible = function isIncompatible(playlist) {\n  return playlist.excludeUntil && playlist.excludeUntil === Infinity;\n};\n\n/**\n * Check whether the playlist is enabled or not.\n *\n * @param {Object} playlist the media playlist object\n * @return {boolean} whether the playlist is enabled or not\n * @function isEnabled\n */\nvar isEnabled = function isEnabled(playlist) {\n  var blacklisted = isBlacklisted(playlist);\n\n  return !playlist.disabled && !blacklisted;\n};\n\n/**\n * Check whether the playlist has been manually disabled through the representations api.\n *\n * @param {Object} playlist the media playlist object\n * @return {boolean} whether the playlist is disabled manually or not\n * @function isDisabled\n */\nvar isDisabled = function isDisabled(playlist) {\n  return playlist.disabled;\n};\n\n/**\n * Returns whether the current playlist is an AES encrypted HLS stream\n *\n * @return {Boolean} true if it's an AES encrypted HLS stream\n */\nvar isAes = function isAes(media) {\n  for (var i = 0; i < media.segments.length; i++) {\n    if (media.segments[i].key) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Returns whether the current playlist contains fMP4\n *\n * @return {Boolean} true if the playlist contains fMP4\n */\nvar isFmp4 = function isFmp4(media) {\n  for (var i = 0; i < media.segments.length; i++) {\n    if (media.segments[i].map) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Checks if the playlist has a value for the specified attribute\n *\n * @param {String} attr\n *        Attribute to check for\n * @param {Object} playlist\n *        The media playlist object\n * @return {Boolean}\n *         Whether the playlist contains a value for the attribute or not\n * @function hasAttribute\n */\nvar hasAttribute = function hasAttribute(attr, playlist) {\n  return playlist.attributes && playlist.attributes[attr];\n};\n\n/**\n * Estimates the time required to complete a segment download from the specified playlist\n *\n * @param {Number} segmentDuration\n *        Duration of requested segment\n * @param {Number} bandwidth\n *        Current measured bandwidth of the player\n * @param {Object} playlist\n *        The media playlist object\n * @param {Number=} bytesReceived\n *        Number of bytes already received for the request. Defaults to 0\n * @return {Number|NaN}\n *         The estimated time to request the segment. NaN if bandwidth information for\n *         the given playlist is unavailable\n * @function estimateSegmentRequestTime\n */\nvar estimateSegmentRequestTime = function estimateSegmentRequestTime(segmentDuration, bandwidth, playlist) {\n  var bytesReceived = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n  if (!hasAttribute('BANDWIDTH', playlist)) {\n    return NaN;\n  }\n\n  var size = segmentDuration * playlist.attributes.BANDWIDTH;\n\n  return (size - bytesReceived * 8) / bandwidth;\n};\n\n/*\n * Returns whether the current playlist is the lowest rendition\n *\n * @return {Boolean} true if on lowest rendition\n */\nvar isLowestEnabledRendition = function isLowestEnabledRendition(master, media) {\n  if (master.playlists.length === 1) {\n    return true;\n  }\n\n  var currentBandwidth = media.attributes.BANDWIDTH || Number.MAX_VALUE;\n\n  return master.playlists.filter(function (playlist) {\n    if (!isEnabled(playlist)) {\n      return false;\n    }\n\n    return (playlist.attributes.BANDWIDTH || 0) < currentBandwidth;\n  }).length === 0;\n};\n\n// exports\nvar Playlist = {\n  duration: duration,\n  seekable: seekable,\n  safeLiveIndex: safeLiveIndex,\n  getMediaInfoForTime: getMediaInfoForTime,\n  isEnabled: isEnabled,\n  isDisabled: isDisabled,\n  isBlacklisted: isBlacklisted,\n  isIncompatible: isIncompatible,\n  playlistEnd: playlistEnd,\n  isAes: isAes,\n  isFmp4: isFmp4,\n  hasAttribute: hasAttribute,\n  estimateSegmentRequestTime: estimateSegmentRequestTime,\n  isLowestEnabledRendition: isLowestEnabledRendition\n};\n\n/**\n * @file xhr.js\n */\n\nvar videojsXHR = videojs$1.xhr,\n    mergeOptions$1$1 = videojs$1.mergeOptions;\n\nvar xhrFactory = function xhrFactory() {\n  var xhr$$1 = function XhrFunction(options, callback) {\n    // Add a default timeout for all hls requests\n    options = mergeOptions$1$1({\n      timeout: 45e3\n    }, options);\n\n    // Allow an optional user-specified function to modify the option\n    // object before we construct the xhr request\n    var beforeRequest = XhrFunction.beforeRequest || videojs$1.Hls.xhr.beforeRequest;\n\n    if (beforeRequest && typeof beforeRequest === 'function') {\n      var newOptions = beforeRequest(options);\n\n      if (newOptions) {\n        options = newOptions;\n      }\n    }\n\n    var request = videojsXHR(options, function (error, response) {\n      var reqResponse = request.response;\n\n      if (!error && reqResponse) {\n        request.responseTime = Date.now();\n        request.roundTripTime = request.responseTime - request.requestTime;\n        request.bytesReceived = reqResponse.byteLength || reqResponse.length;\n        if (!request.bandwidth) {\n          request.bandwidth = Math.floor(request.bytesReceived / request.roundTripTime * 8 * 1000);\n        }\n      }\n\n      if (response.headers) {\n        request.responseHeaders = response.headers;\n      }\n\n      // videojs.xhr now uses a specific code on the error\n      // object to signal that a request has timed out instead\n      // of setting a boolean on the request object\n      if (error && error.code === 'ETIMEDOUT') {\n        request.timedout = true;\n      }\n\n      // videojs.xhr no longer considers status codes outside of 200 and 0\n      // (for file uris) to be errors, but the old XHR did, so emulate that\n      // behavior. Status 206 may be used in response to byterange requests.\n      if (!error && !request.aborted && response.statusCode !== 200 && response.statusCode !== 206 && response.statusCode !== 0) {\n        error = new Error('XHR Failed with a response of: ' + (request && (reqResponse || request.responseText)));\n      }\n\n      callback(error, request);\n    });\n    var originalAbort = request.abort;\n\n    request.abort = function () {\n      request.aborted = true;\n      return originalAbort.apply(request, arguments);\n    };\n    request.uri = options.uri;\n    request.requestTime = Date.now();\n    return request;\n  };\n\n  return xhr$$1;\n};\n\n/**\n * @file bin-utils.js\n */\n\n/**\n * convert a TimeRange to text\n *\n * @param {TimeRange} range the timerange to use for conversion\n * @param {Number} i the iterator on the range to convert\n */\nvar textRange = function textRange(range, i) {\n  return range.start(i) + '-' + range.end(i);\n};\n\n/**\n * format a number as hex string\n *\n * @param {Number} e The number\n * @param {Number} i the iterator\n */\nvar formatHexString = function formatHexString(e, i) {\n  var value = e.toString(16);\n\n  return '00'.substring(0, 2 - value.length) + value + (i % 2 ? ' ' : '');\n};\nvar formatAsciiString = function formatAsciiString(e) {\n  if (e >= 0x20 && e < 0x7e) {\n    return String.fromCharCode(e);\n  }\n  return '.';\n};\n\n/**\n * Creates an object for sending to a web worker modifying properties that are TypedArrays\n * into a new object with seperated properties for the buffer, byteOffset, and byteLength.\n *\n * @param {Object} message\n *        Object of properties and values to send to the web worker\n * @return {Object}\n *         Modified message with TypedArray values expanded\n * @function createTransferableMessage\n */\nvar createTransferableMessage = function createTransferableMessage(message) {\n  var transferable = {};\n\n  Object.keys(message).forEach(function (key) {\n    var value = message[key];\n\n    if (ArrayBuffer.isView(value)) {\n      transferable[key] = {\n        bytes: value.buffer,\n        byteOffset: value.byteOffset,\n        byteLength: value.byteLength\n      };\n    } else {\n      transferable[key] = value;\n    }\n  });\n\n  return transferable;\n};\n\n/**\n * Returns a unique string identifier for a media initialization\n * segment.\n */\nvar initSegmentId = function initSegmentId(initSegment) {\n  var byterange = initSegment.byterange || {\n    length: Infinity,\n    offset: 0\n  };\n\n  return [byterange.length, byterange.offset, initSegment.resolvedUri].join(',');\n};\n\n/**\n * utils to help dump binary data to the console\n */\nvar hexDump = function hexDump(data) {\n  var bytes = Array.prototype.slice.call(data);\n  var step = 16;\n  var result = '';\n  var hex = void 0;\n  var ascii = void 0;\n\n  for (var j = 0; j < bytes.length / step; j++) {\n    hex = bytes.slice(j * step, j * step + step).map(formatHexString).join('');\n    ascii = bytes.slice(j * step, j * step + step).map(formatAsciiString).join('');\n    result += hex + ' ' + ascii + '\\n';\n  }\n\n  return result;\n};\n\nvar tagDump = function tagDump(_ref) {\n  var bytes = _ref.bytes;\n  return hexDump(bytes);\n};\n\nvar textRanges = function textRanges(ranges) {\n  var result = '';\n  var i = void 0;\n\n  for (i = 0; i < ranges.length; i++) {\n    result += textRange(ranges, i) + ' ';\n  }\n  return result;\n};\n\nvar utils = /*#__PURE__*/Object.freeze({\n  createTransferableMessage: createTransferableMessage,\n  initSegmentId: initSegmentId,\n  hexDump: hexDump,\n  tagDump: tagDump,\n  textRanges: textRanges\n});\n\n/**\n * ranges\n *\n * Utilities for working with TimeRanges.\n *\n */\n\n// Fudge factor to account for TimeRanges rounding\nvar TIME_FUDGE_FACTOR = 1 / 30;\n// Comparisons between time values such as current time and the end of the buffered range\n// can be misleading because of precision differences or when the current media has poorly\n// aligned audio and video, which can cause values to be slightly off from what you would\n// expect. This value is what we consider to be safe to use in such comparisons to account\n// for these scenarios.\nvar SAFE_TIME_DELTA = TIME_FUDGE_FACTOR * 3;\nvar filterRanges = function filterRanges(timeRanges, predicate) {\n  var results = [];\n  var i = void 0;\n\n  if (timeRanges && timeRanges.length) {\n    // Search for ranges that match the predicate\n    for (i = 0; i < timeRanges.length; i++) {\n      if (predicate(timeRanges.start(i), timeRanges.end(i))) {\n        results.push([timeRanges.start(i), timeRanges.end(i)]);\n      }\n    }\n  }\n\n  return videojs$1.createTimeRanges(results);\n};\n\n/**\n * Attempts to find the buffered TimeRange that contains the specified\n * time.\n * @param {TimeRanges} buffered - the TimeRanges object to query\n * @param {number} time  - the time to filter on.\n * @returns {TimeRanges} a new TimeRanges object\n */\nvar findRange = function findRange(buffered, time) {\n  return filterRanges(buffered, function (start, end) {\n    return start - TIME_FUDGE_FACTOR <= time && end + TIME_FUDGE_FACTOR >= time;\n  });\n};\n\n/**\n * Returns the TimeRanges that begin later than the specified time.\n * @param {TimeRanges} timeRanges - the TimeRanges object to query\n * @param {number} time - the time to filter on.\n * @returns {TimeRanges} a new TimeRanges object.\n */\nvar findNextRange = function findNextRange(timeRanges, time) {\n  return filterRanges(timeRanges, function (start) {\n    return start - TIME_FUDGE_FACTOR >= time;\n  });\n};\n\n/**\n * Returns gaps within a list of TimeRanges\n * @param {TimeRanges} buffered - the TimeRanges object\n * @return {TimeRanges} a TimeRanges object of gaps\n */\nvar findGaps = function findGaps(buffered) {\n  if (buffered.length < 2) {\n    return videojs$1.createTimeRanges();\n  }\n\n  var ranges = [];\n\n  for (var i = 1; i < buffered.length; i++) {\n    var start = buffered.end(i - 1);\n    var end = buffered.start(i);\n\n    ranges.push([start, end]);\n  }\n\n  return videojs$1.createTimeRanges(ranges);\n};\n\n/**\n * Gets a human readable string for a TimeRange\n *\n * @param {TimeRange} range\n * @returns {String} a human readable string\n */\nvar printableRange = function printableRange(range) {\n  var strArr = [];\n\n  if (!range || !range.length) {\n    return '';\n  }\n\n  for (var i = 0; i < range.length; i++) {\n    strArr.push(range.start(i) + ' => ' + range.end(i));\n  }\n\n  return strArr.join(', ');\n};\n\n/**\n * Calculates the amount of time left in seconds until the player hits the end of the\n * buffer and causes a rebuffer\n *\n * @param {TimeRange} buffered\n *        The state of the buffer\n * @param {Numnber} currentTime\n *        The current time of the player\n * @param {Number} playbackRate\n *        The current playback rate of the player. Defaults to 1.\n * @return {Number}\n *         Time until the player has to start rebuffering in seconds.\n * @function timeUntilRebuffer\n */\nvar timeUntilRebuffer = function timeUntilRebuffer(buffered, currentTime) {\n  var playbackRate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n  var bufferedEnd = buffered.length ? buffered.end(buffered.length - 1) : 0;\n\n  return (bufferedEnd - currentTime) / playbackRate;\n};\n\n/**\n * Converts a TimeRanges object into an array representation\n * @param {TimeRanges} timeRanges\n * @returns {Array}\n */\nvar timeRangesToArray = function timeRangesToArray(timeRanges) {\n  var timeRangesList = [];\n\n  for (var i = 0; i < timeRanges.length; i++) {\n    timeRangesList.push({\n      start: timeRanges.start(i),\n      end: timeRanges.end(i)\n    });\n  }\n\n  return timeRangesList;\n};\n\n/**\n * @file create-text-tracks-if-necessary.js\n */\n\n/**\n * Create text tracks on video.js if they exist on a segment.\n *\n * @param {Object} sourceBuffer the VSB or FSB\n * @param {Object} mediaSource the HTML media source\n * @param {Object} segment the segment that may contain the text track\n * @private\n */\nvar createTextTracksIfNecessary = function createTextTracksIfNecessary(sourceBuffer, mediaSource, segment) {\n  var player = mediaSource.player_;\n\n  // create an in-band caption track if one is present in the segment\n  if (segment.captions && segment.captions.length) {\n    if (!sourceBuffer.inbandTextTracks_) {\n      sourceBuffer.inbandTextTracks_ = {};\n    }\n\n    for (var trackId in segment.captionStreams) {\n      if (!sourceBuffer.inbandTextTracks_[trackId]) {\n        player.tech_.trigger({ type: 'usage', name: 'hls-608' });\n        var track = player.textTracks().getTrackById(trackId);\n\n        if (track) {\n          // Resuse an existing track with a CC# id because this was\n          // very likely created by videojs-contrib-hls from information\n          // in the m3u8 for us to use\n          sourceBuffer.inbandTextTracks_[trackId] = track;\n        } else {\n          // Otherwise, create a track with the default `CC#` label and\n          // without a language\n          sourceBuffer.inbandTextTracks_[trackId] = player.addRemoteTextTrack({\n            kind: 'captions',\n            id: trackId,\n            label: trackId\n          }, false).track;\n        }\n      }\n    }\n  }\n\n  if (segment.metadata && segment.metadata.length && !sourceBuffer.metadataTrack_) {\n    sourceBuffer.metadataTrack_ = player.addRemoteTextTrack({\n      kind: 'metadata',\n      label: 'Timed Metadata'\n    }, false).track;\n    sourceBuffer.metadataTrack_.inBandMetadataTrackDispatchType = segment.metadata.dispatchType;\n  }\n};\n\n/**\n * @file remove-cues-from-track.js\n */\n\n/**\n * Remove cues from a track on video.js.\n *\n * @param {Double} start start of where we should remove the cue\n * @param {Double} end end of where the we should remove the cue\n * @param {Object} track the text track to remove the cues from\n * @private\n */\nvar removeCuesFromTrack = function removeCuesFromTrack(start, end, track) {\n  var i = void 0;\n  var cue = void 0;\n\n  if (!track) {\n    return;\n  }\n\n  if (!track.cues) {\n    return;\n  }\n\n  i = track.cues.length;\n\n  while (i--) {\n    cue = track.cues[i];\n\n    // Remove any overlapping cue\n    if (cue.startTime <= end && cue.endTime >= start) {\n      track.removeCue(cue);\n    }\n  }\n};\n\n/**\n * @file add-text-track-data.js\n */\n/**\n * Define properties on a cue for backwards compatability,\n * but warn the user that the way that they are using it\n * is depricated and will be removed at a later date.\n *\n * @param {Cue} cue the cue to add the properties on\n * @private\n */\nvar deprecateOldCue = function deprecateOldCue(cue) {\n  Object.defineProperties(cue.frame, {\n    id: {\n      get: function get$$1() {\n        videojs$1.log.warn('cue.frame.id is deprecated. Use cue.value.key instead.');\n        return cue.value.key;\n      }\n    },\n    value: {\n      get: function get$$1() {\n        videojs$1.log.warn('cue.frame.value is deprecated. Use cue.value.data instead.');\n        return cue.value.data;\n      }\n    },\n    privateData: {\n      get: function get$$1() {\n        videojs$1.log.warn('cue.frame.privateData is deprecated. Use cue.value.data instead.');\n        return cue.value.data;\n      }\n    }\n  });\n};\n\nvar durationOfVideo = function durationOfVideo(duration) {\n  var dur = void 0;\n\n  if (isNaN(duration) || Math.abs(duration) === Infinity) {\n    dur = Number.MAX_VALUE;\n  } else {\n    dur = duration;\n  }\n  return dur;\n};\n/**\n * Add text track data to a source handler given the captions and\n * metadata from the buffer.\n *\n * @param {Object} sourceHandler the virtual source buffer\n * @param {Array} captionArray an array of caption data\n * @param {Array} metadataArray an array of meta data\n * @private\n */\nvar addTextTrackData = function addTextTrackData(sourceHandler, captionArray, metadataArray) {\n  var Cue = window$1.WebKitDataCue || window$1.VTTCue;\n\n  if (captionArray) {\n    captionArray.forEach(function (caption) {\n      var track = caption.stream;\n\n      this.inbandTextTracks_[track].addCue(new Cue(caption.startTime + this.timestampOffset, caption.endTime + this.timestampOffset, caption.text));\n    }, sourceHandler);\n  }\n\n  if (metadataArray) {\n    var videoDuration = durationOfVideo(sourceHandler.mediaSource_.duration);\n\n    metadataArray.forEach(function (metadata) {\n      var time = metadata.cueTime + this.timestampOffset;\n\n      metadata.frames.forEach(function (frame) {\n        var cue = new Cue(time, time, frame.value || frame.url || frame.data || '');\n\n        cue.frame = frame;\n        cue.value = frame;\n        deprecateOldCue(cue);\n\n        this.metadataTrack_.addCue(cue);\n      }, this);\n    }, sourceHandler);\n\n    // Updating the metadeta cues so that\n    // the endTime of each cue is the startTime of the next cue\n    // the endTime of last cue is the duration of the video\n    if (sourceHandler.metadataTrack_ && sourceHandler.metadataTrack_.cues && sourceHandler.metadataTrack_.cues.length) {\n      var cues = sourceHandler.metadataTrack_.cues;\n      var cuesArray = [];\n\n      // Create a copy of the TextTrackCueList...\n      // ...disregarding cues with a falsey value\n      for (var i = 0; i < cues.length; i++) {\n        if (cues[i]) {\n          cuesArray.push(cues[i]);\n        }\n      }\n\n      // Group cues by their startTime value\n      var cuesGroupedByStartTime = cuesArray.reduce(function (obj, cue) {\n        var timeSlot = obj[cue.startTime] || [];\n\n        timeSlot.push(cue);\n        obj[cue.startTime] = timeSlot;\n\n        return obj;\n      }, {});\n\n      // Sort startTimes by ascending order\n      var sortedStartTimes = Object.keys(cuesGroupedByStartTime).sort(function (a, b) {\n        return Number(a) - Number(b);\n      });\n\n      // Map each cue group's endTime to the next group's startTime\n      sortedStartTimes.forEach(function (startTime, idx) {\n        var cueGroup = cuesGroupedByStartTime[startTime];\n        var nextTime = Number(sortedStartTimes[idx + 1]) || videoDuration;\n\n        // Map each cue's endTime the next group's startTime\n        cueGroup.forEach(function (cue) {\n          cue.endTime = nextTime;\n        });\n      });\n    }\n  }\n};\n\nvar win = typeof window !== 'undefined' ? window : {},\n    TARGET = typeof Symbol === 'undefined' ? '__target' : Symbol(),\n    SCRIPT_TYPE = 'application/javascript',\n    BlobBuilder = win.BlobBuilder || win.WebKitBlobBuilder || win.MozBlobBuilder || win.MSBlobBuilder,\n    URL = win.URL || win.webkitURL || URL && URL.msURL,\n    Worker = win.Worker;\n\n/**\n * Returns a wrapper around Web Worker code that is constructible.\n *\n * @function shimWorker\n *\n * @param { String }    filename    The name of the file\n * @param { Function }  fn          Function wrapping the code of the worker\n */\nfunction shimWorker(filename, fn) {\n  return function ShimWorker(forceFallback) {\n    var o = this;\n\n    if (!fn) {\n      return new Worker(filename);\n    } else if (Worker && !forceFallback) {\n      // Convert the function's inner code to a string to construct the worker\n      var source = fn.toString().replace(/^function.+?{/, '').slice(0, -1),\n          objURL = createSourceObject(source);\n\n      this[TARGET] = new Worker(objURL);\n      wrapTerminate(this[TARGET], objURL);\n      return this[TARGET];\n    } else {\n      var selfShim = {\n        postMessage: function postMessage(m) {\n          if (o.onmessage) {\n            setTimeout(function () {\n              o.onmessage({ data: m, target: selfShim });\n            });\n          }\n        }\n      };\n\n      fn.call(selfShim);\n      this.postMessage = function (m) {\n        setTimeout(function () {\n          selfShim.onmessage({ data: m, target: o });\n        });\n      };\n      this.isThisThread = true;\n    }\n  };\n}\n// Test Worker capabilities\nif (Worker) {\n  var testWorker,\n      objURL = createSourceObject('self.onmessage = function () {}'),\n      testArray = new Uint8Array(1);\n\n  try {\n    testWorker = new Worker(objURL);\n\n    // Native browser on some Samsung devices throws for transferables, let's detect it\n    testWorker.postMessage(testArray, [testArray.buffer]);\n  } catch (e) {\n    Worker = null;\n  } finally {\n    URL.revokeObjectURL(objURL);\n    if (testWorker) {\n      testWorker.terminate();\n    }\n  }\n}\n\nfunction createSourceObject(str) {\n  try {\n    return URL.createObjectURL(new Blob([str], { type: SCRIPT_TYPE }));\n  } catch (e) {\n    var blob = new BlobBuilder();\n    blob.append(str);\n    return URL.createObjectURL(blob.getBlob(type));\n  }\n}\n\nfunction wrapTerminate(worker, objURL) {\n  if (!worker || !objURL) return;\n  var term = worker.terminate;\n  worker.objURL = objURL;\n  worker.terminate = function () {\n    if (worker.objURL) URL.revokeObjectURL(worker.objURL);\n    term.call(worker);\n  };\n}\n\nvar TransmuxWorker = new shimWorker(\"./transmuxer-worker.worker.js\", function (window, document$$1) {\n  var self = this;\n  var transmuxerWorker = function () {\n\n    /**\n     * mux.js\n     *\n     * Copyright (c) 2015 Brightcove\n     * All rights reserved.\n     *\n     * Functions that generate fragmented MP4s suitable for use with Media\n     * Source Extensions.\n     */\n\n    var UINT32_MAX = Math.pow(2, 32) - 1;\n\n    var box, dinf, esds, ftyp, mdat, mfhd, minf, moof, moov, mvex, mvhd, trak, tkhd, mdia, mdhd, hdlr, sdtp, stbl, stsd, traf, trex, trun, types, MAJOR_BRAND, MINOR_VERSION, AVC1_BRAND, VIDEO_HDLR, AUDIO_HDLR, HDLR_TYPES, VMHD, SMHD, DREF, STCO, STSC, STSZ, STTS;\n\n    // pre-calculate constants\n    (function () {\n      var i;\n      types = {\n        avc1: [], // codingname\n        avcC: [],\n        btrt: [],\n        dinf: [],\n        dref: [],\n        esds: [],\n        ftyp: [],\n        hdlr: [],\n        mdat: [],\n        mdhd: [],\n        mdia: [],\n        mfhd: [],\n        minf: [],\n        moof: [],\n        moov: [],\n        mp4a: [], // codingname\n        mvex: [],\n        mvhd: [],\n        sdtp: [],\n        smhd: [],\n        stbl: [],\n        stco: [],\n        stsc: [],\n        stsd: [],\n        stsz: [],\n        stts: [],\n        styp: [],\n        tfdt: [],\n        tfhd: [],\n        traf: [],\n        trak: [],\n        trun: [],\n        trex: [],\n        tkhd: [],\n        vmhd: []\n      };\n\n      // In environments where Uint8Array is undefined (e.g., IE8), skip set up so that we\n      // don't throw an error\n      if (typeof Uint8Array === 'undefined') {\n        return;\n      }\n\n      for (i in types) {\n        if (types.hasOwnProperty(i)) {\n          types[i] = [i.charCodeAt(0), i.charCodeAt(1), i.charCodeAt(2), i.charCodeAt(3)];\n        }\n      }\n\n      MAJOR_BRAND = new Uint8Array(['i'.charCodeAt(0), 's'.charCodeAt(0), 'o'.charCodeAt(0), 'm'.charCodeAt(0)]);\n      AVC1_BRAND = new Uint8Array(['a'.charCodeAt(0), 'v'.charCodeAt(0), 'c'.charCodeAt(0), '1'.charCodeAt(0)]);\n      MINOR_VERSION = new Uint8Array([0, 0, 0, 1]);\n      VIDEO_HDLR = new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x00, // pre_defined\n      0x76, 0x69, 0x64, 0x65, // handler_type: 'vide'\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x56, 0x69, 0x64, 0x65, 0x6f, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'VideoHandler'\n      ]);\n      AUDIO_HDLR = new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x00, // pre_defined\n      0x73, 0x6f, 0x75, 0x6e, // handler_type: 'soun'\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x53, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'SoundHandler'\n      ]);\n      HDLR_TYPES = {\n        video: VIDEO_HDLR,\n        audio: AUDIO_HDLR\n      };\n      DREF = new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x01, // entry_count\n      0x00, 0x00, 0x00, 0x0c, // entry_size\n      0x75, 0x72, 0x6c, 0x20, // 'url' type\n      0x00, // version 0\n      0x00, 0x00, 0x01 // entry_flags\n      ]);\n      SMHD = new Uint8Array([0x00, // version\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, // balance, 0 means centered\n      0x00, 0x00 // reserved\n      ]);\n      STCO = new Uint8Array([0x00, // version\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x00 // entry_count\n      ]);\n      STSC = STCO;\n      STSZ = new Uint8Array([0x00, // version\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x00, // sample_size\n      0x00, 0x00, 0x00, 0x00 // sample_count\n      ]);\n      STTS = STCO;\n      VMHD = new Uint8Array([0x00, // version\n      0x00, 0x00, 0x01, // flags\n      0x00, 0x00, // graphicsmode\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // opcolor\n      ]);\n    })();\n\n    box = function box(type) {\n      var payload = [],\n          size = 0,\n          i,\n          result,\n          view;\n\n      for (i = 1; i < arguments.length; i++) {\n        payload.push(arguments[i]);\n      }\n\n      i = payload.length;\n\n      // calculate the total size we need to allocate\n      while (i--) {\n        size += payload[i].byteLength;\n      }\n      result = new Uint8Array(size + 8);\n      view = new DataView(result.buffer, result.byteOffset, result.byteLength);\n      view.setUint32(0, result.byteLength);\n      result.set(type, 4);\n\n      // copy the payload into the result\n      for (i = 0, size = 8; i < payload.length; i++) {\n        result.set(payload[i], size);\n        size += payload[i].byteLength;\n      }\n      return result;\n    };\n\n    dinf = function dinf() {\n      return box(types.dinf, box(types.dref, DREF));\n    };\n\n    esds = function esds(track) {\n      return box(types.esds, new Uint8Array([0x00, // version\n      0x00, 0x00, 0x00, // flags\n\n      // ES_Descriptor\n      0x03, // tag, ES_DescrTag\n      0x19, // length\n      0x00, 0x00, // ES_ID\n      0x00, // streamDependenceFlag, URL_flag, reserved, streamPriority\n\n      // DecoderConfigDescriptor\n      0x04, // tag, DecoderConfigDescrTag\n      0x11, // length\n      0x40, // object type\n      0x15, // streamType\n      0x00, 0x06, 0x00, // bufferSizeDB\n      0x00, 0x00, 0xda, 0xc0, // maxBitrate\n      0x00, 0x00, 0xda, 0xc0, // avgBitrate\n\n      // DecoderSpecificInfo\n      0x05, // tag, DecoderSpecificInfoTag\n      0x02, // length\n      // ISO/IEC 14496-3, AudioSpecificConfig\n      // for samplingFrequencyIndex see ISO/IEC 13818-7:2006, 8.1.3.2.2, Table 35\n      track.audioobjecttype << 3 | track.samplingfrequencyindex >>> 1, track.samplingfrequencyindex << 7 | track.channelcount << 3, 0x06, 0x01, 0x02 // GASpecificConfig\n      ]));\n    };\n\n    ftyp = function ftyp() {\n      return box(types.ftyp, MAJOR_BRAND, MINOR_VERSION, MAJOR_BRAND, AVC1_BRAND);\n    };\n\n    hdlr = function hdlr(type) {\n      return box(types.hdlr, HDLR_TYPES[type]);\n    };\n    mdat = function mdat(data) {\n      return box(types.mdat, data);\n    };\n    mdhd = function mdhd(track) {\n      var result = new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x02, // creation_time\n      0x00, 0x00, 0x00, 0x03, // modification_time\n      0x00, 0x01, 0x5f, 0x90, // timescale, 90,000 \"ticks\" per second\n\n      track.duration >>> 24 & 0xFF, track.duration >>> 16 & 0xFF, track.duration >>> 8 & 0xFF, track.duration & 0xFF, // duration\n      0x55, 0xc4, // 'und' language (undetermined)\n      0x00, 0x00]);\n\n      // Use the sample rate from the track metadata, when it is\n      // defined. The sample rate can be parsed out of an ADTS header, for\n      // instance.\n      if (track.samplerate) {\n        result[12] = track.samplerate >>> 24 & 0xFF;\n        result[13] = track.samplerate >>> 16 & 0xFF;\n        result[14] = track.samplerate >>> 8 & 0xFF;\n        result[15] = track.samplerate & 0xFF;\n      }\n\n      return box(types.mdhd, result);\n    };\n    mdia = function mdia(track) {\n      return box(types.mdia, mdhd(track), hdlr(track.type), minf(track));\n    };\n    mfhd = function mfhd(sequenceNumber) {\n      return box(types.mfhd, new Uint8Array([0x00, 0x00, 0x00, 0x00, // flags\n      (sequenceNumber & 0xFF000000) >> 24, (sequenceNumber & 0xFF0000) >> 16, (sequenceNumber & 0xFF00) >> 8, sequenceNumber & 0xFF // sequence_number\n      ]));\n    };\n    minf = function minf(track) {\n      return box(types.minf, track.type === 'video' ? box(types.vmhd, VMHD) : box(types.smhd, SMHD), dinf(), stbl(track));\n    };\n    moof = function moof(sequenceNumber, tracks) {\n      var trackFragments = [],\n          i = tracks.length;\n      // build traf boxes for each track fragment\n      while (i--) {\n        trackFragments[i] = traf(tracks[i]);\n      }\n      return box.apply(null, [types.moof, mfhd(sequenceNumber)].concat(trackFragments));\n    };\n    /**\n     * Returns a movie box.\n     * @param tracks {array} the tracks associated with this movie\n     * @see ISO/IEC 14496-12:2012(E), section 8.2.1\n     */\n    moov = function moov(tracks) {\n      var i = tracks.length,\n          boxes = [];\n\n      while (i--) {\n        boxes[i] = trak(tracks[i]);\n      }\n\n      return box.apply(null, [types.moov, mvhd(0xffffffff)].concat(boxes).concat(mvex(tracks)));\n    };\n    mvex = function mvex(tracks) {\n      var i = tracks.length,\n          boxes = [];\n\n      while (i--) {\n        boxes[i] = trex(tracks[i]);\n      }\n      return box.apply(null, [types.mvex].concat(boxes));\n    };\n    mvhd = function mvhd(duration) {\n      var bytes = new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x01, // creation_time\n      0x00, 0x00, 0x00, 0x02, // modification_time\n      0x00, 0x01, 0x5f, 0x90, // timescale, 90,000 \"ticks\" per second\n      (duration & 0xFF000000) >> 24, (duration & 0xFF0000) >> 16, (duration & 0xFF00) >> 8, duration & 0xFF, // duration\n      0x00, 0x01, 0x00, 0x00, // 1.0 rate\n      0x01, 0x00, // 1.0 volume\n      0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // pre_defined\n      0xff, 0xff, 0xff, 0xff // next_track_ID\n      ]);\n      return box(types.mvhd, bytes);\n    };\n\n    sdtp = function sdtp(track) {\n      var samples = track.samples || [],\n          bytes = new Uint8Array(4 + samples.length),\n          flags,\n          i;\n\n      // leave the full box header (4 bytes) all zero\n\n      // write the sample table\n      for (i = 0; i < samples.length; i++) {\n        flags = samples[i].flags;\n\n        bytes[i + 4] = flags.dependsOn << 4 | flags.isDependedOn << 2 | flags.hasRedundancy;\n      }\n\n      return box(types.sdtp, bytes);\n    };\n\n    stbl = function stbl(track) {\n      return box(types.stbl, stsd(track), box(types.stts, STTS), box(types.stsc, STSC), box(types.stsz, STSZ), box(types.stco, STCO));\n    };\n\n    (function () {\n      var videoSample, audioSample;\n\n      stsd = function stsd(track) {\n\n        return box(types.stsd, new Uint8Array([0x00, // version 0\n        0x00, 0x00, 0x00, // flags\n        0x00, 0x00, 0x00, 0x01]), track.type === 'video' ? videoSample(track) : audioSample(track));\n      };\n\n      videoSample = function videoSample(track) {\n        var sps = track.sps || [],\n            pps = track.pps || [],\n            sequenceParameterSets = [],\n            pictureParameterSets = [],\n            i;\n\n        // assemble the SPSs\n        for (i = 0; i < sps.length; i++) {\n          sequenceParameterSets.push((sps[i].byteLength & 0xFF00) >>> 8);\n          sequenceParameterSets.push(sps[i].byteLength & 0xFF); // sequenceParameterSetLength\n          sequenceParameterSets = sequenceParameterSets.concat(Array.prototype.slice.call(sps[i])); // SPS\n        }\n\n        // assemble the PPSs\n        for (i = 0; i < pps.length; i++) {\n          pictureParameterSets.push((pps[i].byteLength & 0xFF00) >>> 8);\n          pictureParameterSets.push(pps[i].byteLength & 0xFF);\n          pictureParameterSets = pictureParameterSets.concat(Array.prototype.slice.call(pps[i]));\n        }\n\n        return box(types.avc1, new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved\n        0x00, 0x01, // data_reference_index\n        0x00, 0x00, // pre_defined\n        0x00, 0x00, // reserved\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // pre_defined\n        (track.width & 0xff00) >> 8, track.width & 0xff, // width\n        (track.height & 0xff00) >> 8, track.height & 0xff, // height\n        0x00, 0x48, 0x00, 0x00, // horizresolution\n        0x00, 0x48, 0x00, 0x00, // vertresolution\n        0x00, 0x00, 0x00, 0x00, // reserved\n        0x00, 0x01, // frame_count\n        0x13, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x6a, 0x73, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x2d, 0x68, 0x6c, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // compressorname\n        0x00, 0x18, // depth = 24\n        0x11, 0x11 // pre_defined = -1\n        ]), box(types.avcC, new Uint8Array([0x01, // configurationVersion\n        track.profileIdc, // AVCProfileIndication\n        track.profileCompatibility, // profile_compatibility\n        track.levelIdc, // AVCLevelIndication\n        0xff // lengthSizeMinusOne, hard-coded to 4 bytes\n        ].concat([sps.length // numOfSequenceParameterSets\n        ]).concat(sequenceParameterSets).concat([pps.length // numOfPictureParameterSets\n        ]).concat(pictureParameterSets))), // \"PPS\"\n        box(types.btrt, new Uint8Array([0x00, 0x1c, 0x9c, 0x80, // bufferSizeDB\n        0x00, 0x2d, 0xc6, 0xc0, // maxBitrate\n        0x00, 0x2d, 0xc6, 0xc0])) // avgBitrate\n        );\n      };\n\n      audioSample = function audioSample(track) {\n        return box(types.mp4a, new Uint8Array([\n\n        // SampleEntry, ISO/IEC 14496-12\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved\n        0x00, 0x01, // data_reference_index\n\n        // AudioSampleEntry, ISO/IEC 14496-12\n        0x00, 0x00, 0x00, 0x00, // reserved\n        0x00, 0x00, 0x00, 0x00, // reserved\n        (track.channelcount & 0xff00) >> 8, track.channelcount & 0xff, // channelcount\n\n        (track.samplesize & 0xff00) >> 8, track.samplesize & 0xff, // samplesize\n        0x00, 0x00, // pre_defined\n        0x00, 0x00, // reserved\n\n        (track.samplerate & 0xff00) >> 8, track.samplerate & 0xff, 0x00, 0x00 // samplerate, 16.16\n\n        // MP4AudioSampleEntry, ISO/IEC 14496-14\n        ]), esds(track));\n      };\n    })();\n\n    tkhd = function tkhd(track) {\n      var result = new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x07, // flags\n      0x00, 0x00, 0x00, 0x00, // creation_time\n      0x00, 0x00, 0x00, 0x00, // modification_time\n      (track.id & 0xFF000000) >> 24, (track.id & 0xFF0000) >> 16, (track.id & 0xFF00) >> 8, track.id & 0xFF, // track_ID\n      0x00, 0x00, 0x00, 0x00, // reserved\n      (track.duration & 0xFF000000) >> 24, (track.duration & 0xFF0000) >> 16, (track.duration & 0xFF00) >> 8, track.duration & 0xFF, // duration\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, // layer\n      0x00, 0x00, // alternate_group\n      0x01, 0x00, // non-audio track volume\n      0x00, 0x00, // reserved\n      0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\n      (track.width & 0xFF00) >> 8, track.width & 0xFF, 0x00, 0x00, // width\n      (track.height & 0xFF00) >> 8, track.height & 0xFF, 0x00, 0x00 // height\n      ]);\n\n      return box(types.tkhd, result);\n    };\n\n    /**\n     * Generate a track fragment (traf) box. A traf box collects metadata\n     * about tracks in a movie fragment (moof) box.\n     */\n    traf = function traf(track) {\n      var trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun, sampleDependencyTable, dataOffset, upperWordBaseMediaDecodeTime, lowerWordBaseMediaDecodeTime;\n\n      trackFragmentHeader = box(types.tfhd, new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x3a, // flags\n      (track.id & 0xFF000000) >> 24, (track.id & 0xFF0000) >> 16, (track.id & 0xFF00) >> 8, track.id & 0xFF, // track_ID\n      0x00, 0x00, 0x00, 0x01, // sample_description_index\n      0x00, 0x00, 0x00, 0x00, // default_sample_duration\n      0x00, 0x00, 0x00, 0x00, // default_sample_size\n      0x00, 0x00, 0x00, 0x00 // default_sample_flags\n      ]));\n\n      upperWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime / (UINT32_MAX + 1));\n      lowerWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime % (UINT32_MAX + 1));\n\n      trackFragmentDecodeTime = box(types.tfdt, new Uint8Array([0x01, // version 1\n      0x00, 0x00, 0x00, // flags\n      // baseMediaDecodeTime\n      upperWordBaseMediaDecodeTime >>> 24 & 0xFF, upperWordBaseMediaDecodeTime >>> 16 & 0xFF, upperWordBaseMediaDecodeTime >>> 8 & 0xFF, upperWordBaseMediaDecodeTime & 0xFF, lowerWordBaseMediaDecodeTime >>> 24 & 0xFF, lowerWordBaseMediaDecodeTime >>> 16 & 0xFF, lowerWordBaseMediaDecodeTime >>> 8 & 0xFF, lowerWordBaseMediaDecodeTime & 0xFF]));\n\n      // the data offset specifies the number of bytes from the start of\n      // the containing moof to the first payload byte of the associated\n      // mdat\n      dataOffset = 32 + // tfhd\n      20 + // tfdt\n      8 + // traf header\n      16 + // mfhd\n      8 + // moof header\n      8; // mdat header\n\n      // audio tracks require less metadata\n      if (track.type === 'audio') {\n        trackFragmentRun = trun(track, dataOffset);\n        return box(types.traf, trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun);\n      }\n\n      // video tracks should contain an independent and disposable samples\n      // box (sdtp)\n      // generate one and adjust offsets to match\n      sampleDependencyTable = sdtp(track);\n      trackFragmentRun = trun(track, sampleDependencyTable.length + dataOffset);\n      return box(types.traf, trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun, sampleDependencyTable);\n    };\n\n    /**\n     * Generate a track box.\n     * @param track {object} a track definition\n     * @return {Uint8Array} the track box\n     */\n    trak = function trak(track) {\n      track.duration = track.duration || 0xffffffff;\n      return box(types.trak, tkhd(track), mdia(track));\n    };\n\n    trex = function trex(track) {\n      var result = new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      (track.id & 0xFF000000) >> 24, (track.id & 0xFF0000) >> 16, (track.id & 0xFF00) >> 8, track.id & 0xFF, // track_ID\n      0x00, 0x00, 0x00, 0x01, // default_sample_description_index\n      0x00, 0x00, 0x00, 0x00, // default_sample_duration\n      0x00, 0x00, 0x00, 0x00, // default_sample_size\n      0x00, 0x01, 0x00, 0x01 // default_sample_flags\n      ]);\n      // the last two bytes of default_sample_flags is the sample\n      // degradation priority, a hint about the importance of this sample\n      // relative to others. Lower the degradation priority for all sample\n      // types other than video.\n      if (track.type !== 'video') {\n        result[result.length - 1] = 0x00;\n      }\n\n      return box(types.trex, result);\n    };\n\n    (function () {\n      var audioTrun, videoTrun, trunHeader;\n\n      // This method assumes all samples are uniform. That is, if a\n      // duration is present for the first sample, it will be present for\n      // all subsequent samples.\n      // see ISO/IEC 14496-12:2012, Section 8.8.8.1\n      trunHeader = function trunHeader(samples, offset) {\n        var durationPresent = 0,\n            sizePresent = 0,\n            flagsPresent = 0,\n            compositionTimeOffset = 0;\n\n        // trun flag constants\n        if (samples.length) {\n          if (samples[0].duration !== undefined) {\n            durationPresent = 0x1;\n          }\n          if (samples[0].size !== undefined) {\n            sizePresent = 0x2;\n          }\n          if (samples[0].flags !== undefined) {\n            flagsPresent = 0x4;\n          }\n          if (samples[0].compositionTimeOffset !== undefined) {\n            compositionTimeOffset = 0x8;\n          }\n        }\n\n        return [0x00, // version 0\n        0x00, durationPresent | sizePresent | flagsPresent | compositionTimeOffset, 0x01, // flags\n        (samples.length & 0xFF000000) >>> 24, (samples.length & 0xFF0000) >>> 16, (samples.length & 0xFF00) >>> 8, samples.length & 0xFF, // sample_count\n        (offset & 0xFF000000) >>> 24, (offset & 0xFF0000) >>> 16, (offset & 0xFF00) >>> 8, offset & 0xFF // data_offset\n        ];\n      };\n\n      videoTrun = function videoTrun(track, offset) {\n        var bytes, samples, sample, i;\n\n        samples = track.samples || [];\n        offset += 8 + 12 + 16 * samples.length;\n\n        bytes = trunHeader(samples, offset);\n\n        for (i = 0; i < samples.length; i++) {\n          sample = samples[i];\n          bytes = bytes.concat([(sample.duration & 0xFF000000) >>> 24, (sample.duration & 0xFF0000) >>> 16, (sample.duration & 0xFF00) >>> 8, sample.duration & 0xFF, // sample_duration\n          (sample.size & 0xFF000000) >>> 24, (sample.size & 0xFF0000) >>> 16, (sample.size & 0xFF00) >>> 8, sample.size & 0xFF, // sample_size\n          sample.flags.isLeading << 2 | sample.flags.dependsOn, sample.flags.isDependedOn << 6 | sample.flags.hasRedundancy << 4 | sample.flags.paddingValue << 1 | sample.flags.isNonSyncSample, sample.flags.degradationPriority & 0xF0 << 8, sample.flags.degradationPriority & 0x0F, // sample_flags\n          (sample.compositionTimeOffset & 0xFF000000) >>> 24, (sample.compositionTimeOffset & 0xFF0000) >>> 16, (sample.compositionTimeOffset & 0xFF00) >>> 8, sample.compositionTimeOffset & 0xFF // sample_composition_time_offset\n          ]);\n        }\n        return box(types.trun, new Uint8Array(bytes));\n      };\n\n      audioTrun = function audioTrun(track, offset) {\n        var bytes, samples, sample, i;\n\n        samples = track.samples || [];\n        offset += 8 + 12 + 8 * samples.length;\n\n        bytes = trunHeader(samples, offset);\n\n        for (i = 0; i < samples.length; i++) {\n          sample = samples[i];\n          bytes = bytes.concat([(sample.duration & 0xFF000000) >>> 24, (sample.duration & 0xFF0000) >>> 16, (sample.duration & 0xFF00) >>> 8, sample.duration & 0xFF, // sample_duration\n          (sample.size & 0xFF000000) >>> 24, (sample.size & 0xFF0000) >>> 16, (sample.size & 0xFF00) >>> 8, sample.size & 0xFF]); // sample_size\n        }\n\n        return box(types.trun, new Uint8Array(bytes));\n      };\n\n      trun = function trun(track, offset) {\n        if (track.type === 'audio') {\n          return audioTrun(track, offset);\n        }\n\n        return videoTrun(track, offset);\n      };\n    })();\n\n    var mp4Generator = {\n      ftyp: ftyp,\n      mdat: mdat,\n      moof: moof,\n      moov: moov,\n      initSegment: function initSegment(tracks) {\n        var fileType = ftyp(),\n            movie = moov(tracks),\n            result;\n\n        result = new Uint8Array(fileType.byteLength + movie.byteLength);\n        result.set(fileType);\n        result.set(movie, fileType.byteLength);\n        return result;\n      }\n    };\n\n    var toUnsigned = function toUnsigned(value) {\n      return value >>> 0;\n    };\n\n    var bin = {\n      toUnsigned: toUnsigned\n    };\n\n    var toUnsigned$1 = bin.toUnsigned;\n    var _findBox, parseType, timescale, startTime, getVideoTrackIds;\n\n    // Find the data for a box specified by its path\n    _findBox = function findBox(data, path) {\n      var results = [],\n          i,\n          size,\n          type,\n          end,\n          subresults;\n\n      if (!path.length) {\n        // short-circuit the search for empty paths\n        return null;\n      }\n\n      for (i = 0; i < data.byteLength;) {\n        size = toUnsigned$1(data[i] << 24 | data[i + 1] << 16 | data[i + 2] << 8 | data[i + 3]);\n\n        type = parseType(data.subarray(i + 4, i + 8));\n\n        end = size > 1 ? i + size : data.byteLength;\n\n        if (type === path[0]) {\n          if (path.length === 1) {\n            // this is the end of the path and we've found the box we were\n            // looking for\n            results.push(data.subarray(i + 8, end));\n          } else {\n            // recursively search for the next box along the path\n            subresults = _findBox(data.subarray(i + 8, end), path.slice(1));\n            if (subresults.length) {\n              results = results.concat(subresults);\n            }\n          }\n        }\n        i = end;\n      }\n\n      // we've finished searching all of data\n      return results;\n    };\n\n    /**\n     * Returns the string representation of an ASCII encoded four byte buffer.\n     * @param buffer {Uint8Array} a four-byte buffer to translate\n     * @return {string} the corresponding string\n     */\n    parseType = function parseType(buffer) {\n      var result = '';\n      result += String.fromCharCode(buffer[0]);\n      result += String.fromCharCode(buffer[1]);\n      result += String.fromCharCode(buffer[2]);\n      result += String.fromCharCode(buffer[3]);\n      return result;\n    };\n\n    /**\n     * Parses an MP4 initialization segment and extracts the timescale\n     * values for any declared tracks. Timescale values indicate the\n     * number of clock ticks per second to assume for time-based values\n     * elsewhere in the MP4.\n     *\n     * To determine the start time of an MP4, you need two pieces of\n     * information: the timescale unit and the earliest base media decode\n     * time. Multiple timescales can be specified within an MP4 but the\n     * base media decode time is always expressed in the timescale from\n     * the media header box for the track:\n     * ```\n     * moov > trak > mdia > mdhd.timescale\n     * ```\n     * @param init {Uint8Array} the bytes of the init segment\n     * @return {object} a hash of track ids to timescale values or null if\n     * the init segment is malformed.\n     */\n    timescale = function timescale(init) {\n      var result = {},\n          traks = _findBox(init, ['moov', 'trak']);\n\n      // mdhd timescale\n      return traks.reduce(function (result, trak) {\n        var tkhd, version, index, id, mdhd;\n\n        tkhd = _findBox(trak, ['tkhd'])[0];\n        if (!tkhd) {\n          return null;\n        }\n        version = tkhd[0];\n        index = version === 0 ? 12 : 20;\n        id = toUnsigned$1(tkhd[index] << 24 | tkhd[index + 1] << 16 | tkhd[index + 2] << 8 | tkhd[index + 3]);\n\n        mdhd = _findBox(trak, ['mdia', 'mdhd'])[0];\n        if (!mdhd) {\n          return null;\n        }\n        version = mdhd[0];\n        index = version === 0 ? 12 : 20;\n        result[id] = toUnsigned$1(mdhd[index] << 24 | mdhd[index + 1] << 16 | mdhd[index + 2] << 8 | mdhd[index + 3]);\n        return result;\n      }, result);\n    };\n\n    /**\n     * Determine the base media decode start time, in seconds, for an MP4\n     * fragment. If multiple fragments are specified, the earliest time is\n     * returned.\n     *\n     * The base media decode time can be parsed from track fragment\n     * metadata:\n     * ```\n     * moof > traf > tfdt.baseMediaDecodeTime\n     * ```\n     * It requires the timescale value from the mdhd to interpret.\n     *\n     * @param timescale {object} a hash of track ids to timescale values.\n     * @return {number} the earliest base media decode start time for the\n     * fragment, in seconds\n     */\n    startTime = function startTime(timescale, fragment) {\n      var trafs, baseTimes, result;\n\n      // we need info from two childrend of each track fragment box\n      trafs = _findBox(fragment, ['moof', 'traf']);\n\n      // determine the start times for each track\n      baseTimes = [].concat.apply([], trafs.map(function (traf) {\n        return _findBox(traf, ['tfhd']).map(function (tfhd) {\n          var id, scale, baseTime;\n\n          // get the track id from the tfhd\n          id = toUnsigned$1(tfhd[4] << 24 | tfhd[5] << 16 | tfhd[6] << 8 | tfhd[7]);\n          // assume a 90kHz clock if no timescale was specified\n          scale = timescale[id] || 90e3;\n\n          // get the base media decode time from the tfdt\n          baseTime = _findBox(traf, ['tfdt']).map(function (tfdt) {\n            var version, result;\n\n            version = tfdt[0];\n            result = toUnsigned$1(tfdt[4] << 24 | tfdt[5] << 16 | tfdt[6] << 8 | tfdt[7]);\n            if (version === 1) {\n              result *= Math.pow(2, 32);\n              result += toUnsigned$1(tfdt[8] << 24 | tfdt[9] << 16 | tfdt[10] << 8 | tfdt[11]);\n            }\n            return result;\n          })[0];\n          baseTime = baseTime || Infinity;\n\n          // convert base time to seconds\n          return baseTime / scale;\n        });\n      }));\n\n      // return the minimum\n      result = Math.min.apply(null, baseTimes);\n      return isFinite(result) ? result : 0;\n    };\n\n    /**\n      * Find the trackIds of the video tracks in this source.\n      * Found by parsing the Handler Reference and Track Header Boxes:\n      *   moov > trak > mdia > hdlr\n      *   moov > trak > tkhd\n      *\n      * @param {Uint8Array} init - The bytes of the init segment for this source\n      * @return {Number[]} A list of trackIds\n      *\n      * @see ISO-BMFF-12/2015, Section 8.4.3\n     **/\n    getVideoTrackIds = function getVideoTrackIds(init) {\n      var traks = _findBox(init, ['moov', 'trak']);\n      var videoTrackIds = [];\n\n      traks.forEach(function (trak) {\n        var hdlrs = _findBox(trak, ['mdia', 'hdlr']);\n        var tkhds = _findBox(trak, ['tkhd']);\n\n        hdlrs.forEach(function (hdlr, index) {\n          var handlerType = parseType(hdlr.subarray(8, 12));\n          var tkhd = tkhds[index];\n          var view;\n          var version;\n          var trackId;\n\n          if (handlerType === 'vide') {\n            view = new DataView(tkhd.buffer, tkhd.byteOffset, tkhd.byteLength);\n            version = view.getUint8(0);\n            trackId = version === 0 ? view.getUint32(12) : view.getUint32(20);\n\n            videoTrackIds.push(trackId);\n          }\n        });\n      });\n\n      return videoTrackIds;\n    };\n\n    var probe = {\n      findBox: _findBox,\n      parseType: parseType,\n      timescale: timescale,\n      startTime: startTime,\n      videoTrackIds: getVideoTrackIds\n    };\n\n    /**\n     * mux.js\n     *\n     * Copyright (c) 2014 Brightcove\n     * All rights reserved.\n     *\n     * A lightweight readable stream implemention that handles event dispatching.\n     * Objects that inherit from streams should call init in their constructors.\n     */\n\n    var Stream = function Stream() {\n      this.init = function () {\n        var listeners = {};\n        /**\n         * Add a listener for a specified event type.\n         * @param type {string} the event name\n         * @param listener {function} the callback to be invoked when an event of\n         * the specified type occurs\n         */\n        this.on = function (type, listener) {\n          if (!listeners[type]) {\n            listeners[type] = [];\n          }\n          listeners[type] = listeners[type].concat(listener);\n        };\n        /**\n         * Remove a listener for a specified event type.\n         * @param type {string} the event name\n         * @param listener {function} a function previously registered for this\n         * type of event through `on`\n         */\n        this.off = function (type, listener) {\n          var index;\n          if (!listeners[type]) {\n            return false;\n          }\n          index = listeners[type].indexOf(listener);\n          listeners[type] = listeners[type].slice();\n          listeners[type].splice(index, 1);\n          return index > -1;\n        };\n        /**\n         * Trigger an event of the specified type on this stream. Any additional\n         * arguments to this function are passed as parameters to event listeners.\n         * @param type {string} the event name\n         */\n        this.trigger = function (type) {\n          var callbacks, i, length, args;\n          callbacks = listeners[type];\n          if (!callbacks) {\n            return;\n          }\n          // Slicing the arguments on every invocation of this method\n          // can add a significant amount of overhead. Avoid the\n          // intermediate object creation for the common case of a\n          // single callback argument\n          if (arguments.length === 2) {\n            length = callbacks.length;\n            for (i = 0; i < length; ++i) {\n              callbacks[i].call(this, arguments[1]);\n            }\n          } else {\n            args = [];\n            i = arguments.length;\n            for (i = 1; i < arguments.length; ++i) {\n              args.push(arguments[i]);\n            }\n            length = callbacks.length;\n            for (i = 0; i < length; ++i) {\n              callbacks[i].apply(this, args);\n            }\n          }\n        };\n        /**\n         * Destroys the stream and cleans up.\n         */\n        this.dispose = function () {\n          listeners = {};\n        };\n      };\n    };\n\n    /**\n     * Forwards all `data` events on this stream to the destination stream. The\n     * destination stream should provide a method `push` to receive the data\n     * events as they arrive.\n     * @param destination {stream} the stream that will receive all `data` events\n     * @param autoFlush {boolean} if false, we will not call `flush` on the destination\n     *                            when the current stream emits a 'done' event\n     * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n     */\n    Stream.prototype.pipe = function (destination) {\n      this.on('data', function (data) {\n        destination.push(data);\n      });\n\n      this.on('done', function (flushSource) {\n        destination.flush(flushSource);\n      });\n\n      return destination;\n    };\n\n    // Default stream functions that are expected to be overridden to perform\n    // actual work. These are provided by the prototype as a sort of no-op\n    // implementation so that we don't have to check for their existence in the\n    // `pipe` function above.\n    Stream.prototype.push = function (data) {\n      this.trigger('data', data);\n    };\n\n    Stream.prototype.flush = function (flushSource) {\n      this.trigger('done', flushSource);\n    };\n\n    var stream = Stream;\n\n    // Convert an array of nal units into an array of frames with each frame being\n    // composed of the nal units that make up that frame\n    // Also keep track of cummulative data about the frame from the nal units such\n    // as the frame duration, starting pts, etc.\n    var groupNalsIntoFrames = function groupNalsIntoFrames(nalUnits) {\n      var i,\n          currentNal,\n          currentFrame = [],\n          frames = [];\n\n      currentFrame.byteLength = 0;\n\n      for (i = 0; i < nalUnits.length; i++) {\n        currentNal = nalUnits[i];\n\n        // Split on 'aud'-type nal units\n        if (currentNal.nalUnitType === 'access_unit_delimiter_rbsp') {\n          // Since the very first nal unit is expected to be an AUD\n          // only push to the frames array when currentFrame is not empty\n          if (currentFrame.length) {\n            currentFrame.duration = currentNal.dts - currentFrame.dts;\n            frames.push(currentFrame);\n          }\n          currentFrame = [currentNal];\n          currentFrame.byteLength = currentNal.data.byteLength;\n          currentFrame.pts = currentNal.pts;\n          currentFrame.dts = currentNal.dts;\n        } else {\n          // Specifically flag key frames for ease of use later\n          if (currentNal.nalUnitType === 'slice_layer_without_partitioning_rbsp_idr') {\n            currentFrame.keyFrame = true;\n          }\n          currentFrame.duration = currentNal.dts - currentFrame.dts;\n          currentFrame.byteLength += currentNal.data.byteLength;\n          currentFrame.push(currentNal);\n        }\n      }\n\n      // For the last frame, use the duration of the previous frame if we\n      // have nothing better to go on\n      if (frames.length && (!currentFrame.duration || currentFrame.duration <= 0)) {\n        currentFrame.duration = frames[frames.length - 1].duration;\n      }\n\n      // Push the final frame\n      frames.push(currentFrame);\n      return frames;\n    };\n\n    // Convert an array of frames into an array of Gop with each Gop being composed\n    // of the frames that make up that Gop\n    // Also keep track of cummulative data about the Gop from the frames such as the\n    // Gop duration, starting pts, etc.\n    var groupFramesIntoGops = function groupFramesIntoGops(frames) {\n      var i,\n          currentFrame,\n          currentGop = [],\n          gops = [];\n\n      // We must pre-set some of the values on the Gop since we\n      // keep running totals of these values\n      currentGop.byteLength = 0;\n      currentGop.nalCount = 0;\n      currentGop.duration = 0;\n      currentGop.pts = frames[0].pts;\n      currentGop.dts = frames[0].dts;\n\n      // store some metadata about all the Gops\n      gops.byteLength = 0;\n      gops.nalCount = 0;\n      gops.duration = 0;\n      gops.pts = frames[0].pts;\n      gops.dts = frames[0].dts;\n\n      for (i = 0; i < frames.length; i++) {\n        currentFrame = frames[i];\n\n        if (currentFrame.keyFrame) {\n          // Since the very first frame is expected to be an keyframe\n          // only push to the gops array when currentGop is not empty\n          if (currentGop.length) {\n            gops.push(currentGop);\n            gops.byteLength += currentGop.byteLength;\n            gops.nalCount += currentGop.nalCount;\n            gops.duration += currentGop.duration;\n          }\n\n          currentGop = [currentFrame];\n          currentGop.nalCount = currentFrame.length;\n          currentGop.byteLength = currentFrame.byteLength;\n          currentGop.pts = currentFrame.pts;\n          currentGop.dts = currentFrame.dts;\n          currentGop.duration = currentFrame.duration;\n        } else {\n          currentGop.duration += currentFrame.duration;\n          currentGop.nalCount += currentFrame.length;\n          currentGop.byteLength += currentFrame.byteLength;\n          currentGop.push(currentFrame);\n        }\n      }\n\n      if (gops.length && currentGop.duration <= 0) {\n        currentGop.duration = gops[gops.length - 1].duration;\n      }\n      gops.byteLength += currentGop.byteLength;\n      gops.nalCount += currentGop.nalCount;\n      gops.duration += currentGop.duration;\n\n      // push the final Gop\n      gops.push(currentGop);\n      return gops;\n    };\n\n    /*\n     * Search for the first keyframe in the GOPs and throw away all frames\n     * until that keyframe. Then extend the duration of the pulled keyframe\n     * and pull the PTS and DTS of the keyframe so that it covers the time\n     * range of the frames that were disposed.\n     *\n     * @param {Array} gops video GOPs\n     * @returns {Array} modified video GOPs\n     */\n    var extendFirstKeyFrame = function extendFirstKeyFrame(gops) {\n      var currentGop;\n\n      if (!gops[0][0].keyFrame && gops.length > 1) {\n        // Remove the first GOP\n        currentGop = gops.shift();\n\n        gops.byteLength -= currentGop.byteLength;\n        gops.nalCount -= currentGop.nalCount;\n\n        // Extend the first frame of what is now the\n        // first gop to cover the time period of the\n        // frames we just removed\n        gops[0][0].dts = currentGop.dts;\n        gops[0][0].pts = currentGop.pts;\n        gops[0][0].duration += currentGop.duration;\n      }\n\n      return gops;\n    };\n\n    /**\n     * Default sample object\n     * see ISO/IEC 14496-12:2012, section 8.6.4.3\n     */\n    var createDefaultSample = function createDefaultSample() {\n      return {\n        size: 0,\n        flags: {\n          isLeading: 0,\n          dependsOn: 1,\n          isDependedOn: 0,\n          hasRedundancy: 0,\n          degradationPriority: 0,\n          isNonSyncSample: 1\n        }\n      };\n    };\n\n    /*\n     * Collates information from a video frame into an object for eventual\n     * entry into an MP4 sample table.\n     *\n     * @param {Object} frame the video frame\n     * @param {Number} dataOffset the byte offset to position the sample\n     * @return {Object} object containing sample table info for a frame\n     */\n    var sampleForFrame = function sampleForFrame(frame, dataOffset) {\n      var sample = createDefaultSample();\n\n      sample.dataOffset = dataOffset;\n      sample.compositionTimeOffset = frame.pts - frame.dts;\n      sample.duration = frame.duration;\n      sample.size = 4 * frame.length; // Space for nal unit size\n      sample.size += frame.byteLength;\n\n      if (frame.keyFrame) {\n        sample.flags.dependsOn = 2;\n        sample.flags.isNonSyncSample = 0;\n      }\n\n      return sample;\n    };\n\n    // generate the track's sample table from an array of gops\n    var generateSampleTable = function generateSampleTable(gops, baseDataOffset) {\n      var h,\n          i,\n          sample,\n          currentGop,\n          currentFrame,\n          dataOffset = baseDataOffset || 0,\n          samples = [];\n\n      for (h = 0; h < gops.length; h++) {\n        currentGop = gops[h];\n\n        for (i = 0; i < currentGop.length; i++) {\n          currentFrame = currentGop[i];\n\n          sample = sampleForFrame(currentFrame, dataOffset);\n\n          dataOffset += sample.size;\n\n          samples.push(sample);\n        }\n      }\n      return samples;\n    };\n\n    // generate the track's raw mdat data from an array of gops\n    var concatenateNalData = function concatenateNalData(gops) {\n      var h,\n          i,\n          j,\n          currentGop,\n          currentFrame,\n          currentNal,\n          dataOffset = 0,\n          nalsByteLength = gops.byteLength,\n          numberOfNals = gops.nalCount,\n          totalByteLength = nalsByteLength + 4 * numberOfNals,\n          data = new Uint8Array(totalByteLength),\n          view = new DataView(data.buffer);\n\n      // For each Gop..\n      for (h = 0; h < gops.length; h++) {\n        currentGop = gops[h];\n\n        // For each Frame..\n        for (i = 0; i < currentGop.length; i++) {\n          currentFrame = currentGop[i];\n\n          // For each NAL..\n          for (j = 0; j < currentFrame.length; j++) {\n            currentNal = currentFrame[j];\n\n            view.setUint32(dataOffset, currentNal.data.byteLength);\n            dataOffset += 4;\n            data.set(currentNal.data, dataOffset);\n            dataOffset += currentNal.data.byteLength;\n          }\n        }\n      }\n      return data;\n    };\n\n    var frameUtils = {\n      groupNalsIntoFrames: groupNalsIntoFrames,\n      groupFramesIntoGops: groupFramesIntoGops,\n      extendFirstKeyFrame: extendFirstKeyFrame,\n      generateSampleTable: generateSampleTable,\n      concatenateNalData: concatenateNalData\n    };\n\n    var ONE_SECOND_IN_TS = 90000; // 90kHz clock\n\n    /**\n     * Store information about the start and end of the track and the\n     * duration for each frame/sample we process in order to calculate\n     * the baseMediaDecodeTime\n     */\n    var collectDtsInfo = function collectDtsInfo(track, data) {\n      if (typeof data.pts === 'number') {\n        if (track.timelineStartInfo.pts === undefined) {\n          track.timelineStartInfo.pts = data.pts;\n        }\n\n        if (track.minSegmentPts === undefined) {\n          track.minSegmentPts = data.pts;\n        } else {\n          track.minSegmentPts = Math.min(track.minSegmentPts, data.pts);\n        }\n\n        if (track.maxSegmentPts === undefined) {\n          track.maxSegmentPts = data.pts;\n        } else {\n          track.maxSegmentPts = Math.max(track.maxSegmentPts, data.pts);\n        }\n      }\n\n      if (typeof data.dts === 'number') {\n        if (track.timelineStartInfo.dts === undefined) {\n          track.timelineStartInfo.dts = data.dts;\n        }\n\n        if (track.minSegmentDts === undefined) {\n          track.minSegmentDts = data.dts;\n        } else {\n          track.minSegmentDts = Math.min(track.minSegmentDts, data.dts);\n        }\n\n        if (track.maxSegmentDts === undefined) {\n          track.maxSegmentDts = data.dts;\n        } else {\n          track.maxSegmentDts = Math.max(track.maxSegmentDts, data.dts);\n        }\n      }\n    };\n\n    /**\n     * Clear values used to calculate the baseMediaDecodeTime between\n     * tracks\n     */\n    var clearDtsInfo = function clearDtsInfo(track) {\n      delete track.minSegmentDts;\n      delete track.maxSegmentDts;\n      delete track.minSegmentPts;\n      delete track.maxSegmentPts;\n    };\n\n    /**\n     * Calculate the track's baseMediaDecodeTime based on the earliest\n     * DTS the transmuxer has ever seen and the minimum DTS for the\n     * current track\n     * @param track {object} track metadata configuration\n     * @param keepOriginalTimestamps {boolean} If true, keep the timestamps\n     *        in the source; false to adjust the first segment to start at 0.\n     */\n    var calculateTrackBaseMediaDecodeTime = function calculateTrackBaseMediaDecodeTime(track, keepOriginalTimestamps) {\n      var baseMediaDecodeTime,\n          scale,\n          minSegmentDts = track.minSegmentDts;\n\n      // Optionally adjust the time so the first segment starts at zero.\n      if (!keepOriginalTimestamps) {\n        minSegmentDts -= track.timelineStartInfo.dts;\n      }\n\n      // track.timelineStartInfo.baseMediaDecodeTime is the location, in time, where\n      // we want the start of the first segment to be placed\n      baseMediaDecodeTime = track.timelineStartInfo.baseMediaDecodeTime;\n\n      // Add to that the distance this segment is from the very first\n      baseMediaDecodeTime += minSegmentDts;\n\n      // baseMediaDecodeTime must not become negative\n      baseMediaDecodeTime = Math.max(0, baseMediaDecodeTime);\n\n      if (track.type === 'audio') {\n        // Audio has a different clock equal to the sampling_rate so we need to\n        // scale the PTS values into the clock rate of the track\n        scale = track.samplerate / ONE_SECOND_IN_TS;\n        baseMediaDecodeTime *= scale;\n        baseMediaDecodeTime = Math.floor(baseMediaDecodeTime);\n      }\n\n      return baseMediaDecodeTime;\n    };\n\n    var trackDecodeInfo = {\n      clearDtsInfo: clearDtsInfo,\n      calculateTrackBaseMediaDecodeTime: calculateTrackBaseMediaDecodeTime,\n      collectDtsInfo: collectDtsInfo\n    };\n\n    /**\n     * mux.js\n     *\n     * Copyright (c) 2015 Brightcove\n     * All rights reserved.\n     *\n     * Reads in-band caption information from a video elementary\n     * stream. Captions must follow the CEA-708 standard for injection\n     * into an MPEG-2 transport streams.\n     * @see https://en.wikipedia.org/wiki/CEA-708\n     * @see https://www.gpo.gov/fdsys/pkg/CFR-2007-title47-vol1/pdf/CFR-2007-title47-vol1-sec15-119.pdf\n     */\n\n    // Supplemental enhancement information (SEI) NAL units have a\n    // payload type field to indicate how they are to be\n    // interpreted. CEAS-708 caption content is always transmitted with\n    // payload type 0x04.\n\n    var USER_DATA_REGISTERED_ITU_T_T35 = 4,\n        RBSP_TRAILING_BITS = 128;\n\n    /**\n      * Parse a supplemental enhancement information (SEI) NAL unit.\n      * Stops parsing once a message of type ITU T T35 has been found.\n      *\n      * @param bytes {Uint8Array} the bytes of a SEI NAL unit\n      * @return {object} the parsed SEI payload\n      * @see Rec. ITU-T H.264, 7.3.2.3.1\n      */\n    var parseSei = function parseSei(bytes) {\n      var i = 0,\n          result = {\n        payloadType: -1,\n        payloadSize: 0\n      },\n          payloadType = 0,\n          payloadSize = 0;\n\n      // go through the sei_rbsp parsing each each individual sei_message\n      while (i < bytes.byteLength) {\n        // stop once we have hit the end of the sei_rbsp\n        if (bytes[i] === RBSP_TRAILING_BITS) {\n          break;\n        }\n\n        // Parse payload type\n        while (bytes[i] === 0xFF) {\n          payloadType += 255;\n          i++;\n        }\n        payloadType += bytes[i++];\n\n        // Parse payload size\n        while (bytes[i] === 0xFF) {\n          payloadSize += 255;\n          i++;\n        }\n        payloadSize += bytes[i++];\n\n        // this sei_message is a 608/708 caption so save it and break\n        // there can only ever be one caption message in a frame's sei\n        if (!result.payload && payloadType === USER_DATA_REGISTERED_ITU_T_T35) {\n          result.payloadType = payloadType;\n          result.payloadSize = payloadSize;\n          result.payload = bytes.subarray(i, i + payloadSize);\n          break;\n        }\n\n        // skip the payload and parse the next message\n        i += payloadSize;\n        payloadType = 0;\n        payloadSize = 0;\n      }\n\n      return result;\n    };\n\n    // see ANSI/SCTE 128-1 (2013), section 8.1\n    var parseUserData = function parseUserData(sei) {\n      // itu_t_t35_contry_code must be 181 (United States) for\n      // captions\n      if (sei.payload[0] !== 181) {\n        return null;\n      }\n\n      // itu_t_t35_provider_code should be 49 (ATSC) for captions\n      if ((sei.payload[1] << 8 | sei.payload[2]) !== 49) {\n        return null;\n      }\n\n      // the user_identifier should be \"GA94\" to indicate ATSC1 data\n      if (String.fromCharCode(sei.payload[3], sei.payload[4], sei.payload[5], sei.payload[6]) !== 'GA94') {\n        return null;\n      }\n\n      // finally, user_data_type_code should be 0x03 for caption data\n      if (sei.payload[7] !== 0x03) {\n        return null;\n      }\n\n      // return the user_data_type_structure and strip the trailing\n      // marker bits\n      return sei.payload.subarray(8, sei.payload.length - 1);\n    };\n\n    // see CEA-708-D, section 4.4\n    var parseCaptionPackets = function parseCaptionPackets(pts, userData) {\n      var results = [],\n          i,\n          count,\n          offset,\n          data;\n\n      // if this is just filler, return immediately\n      if (!(userData[0] & 0x40)) {\n        return results;\n      }\n\n      // parse out the cc_data_1 and cc_data_2 fields\n      count = userData[0] & 0x1f;\n      for (i = 0; i < count; i++) {\n        offset = i * 3;\n        data = {\n          type: userData[offset + 2] & 0x03,\n          pts: pts\n        };\n\n        // capture cc data when cc_valid is 1\n        if (userData[offset + 2] & 0x04) {\n          data.ccData = userData[offset + 3] << 8 | userData[offset + 4];\n          results.push(data);\n        }\n      }\n      return results;\n    };\n\n    var discardEmulationPreventionBytes = function discardEmulationPreventionBytes(data) {\n      var length = data.byteLength,\n          emulationPreventionBytesPositions = [],\n          i = 1,\n          newLength,\n          newData;\n\n      // Find all `Emulation Prevention Bytes`\n      while (i < length - 2) {\n        if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {\n          emulationPreventionBytesPositions.push(i + 2);\n          i += 2;\n        } else {\n          i++;\n        }\n      }\n\n      // If no Emulation Prevention Bytes were found just return the original\n      // array\n      if (emulationPreventionBytesPositions.length === 0) {\n        return data;\n      }\n\n      // Create a new array to hold the NAL unit data\n      newLength = length - emulationPreventionBytesPositions.length;\n      newData = new Uint8Array(newLength);\n      var sourceIndex = 0;\n\n      for (i = 0; i < newLength; sourceIndex++, i++) {\n        if (sourceIndex === emulationPreventionBytesPositions[0]) {\n          // Skip this byte\n          sourceIndex++;\n          // Remove this position index\n          emulationPreventionBytesPositions.shift();\n        }\n        newData[i] = data[sourceIndex];\n      }\n\n      return newData;\n    };\n\n    // exports\n    var captionPacketParser = {\n      parseSei: parseSei,\n      parseUserData: parseUserData,\n      parseCaptionPackets: parseCaptionPackets,\n      discardEmulationPreventionBytes: discardEmulationPreventionBytes,\n      USER_DATA_REGISTERED_ITU_T_T35: USER_DATA_REGISTERED_ITU_T_T35\n    };\n\n    // -----------------\n    // Link To Transport\n    // -----------------\n\n\n    var CaptionStream = function CaptionStream() {\n\n      CaptionStream.prototype.init.call(this);\n\n      this.captionPackets_ = [];\n\n      this.ccStreams_ = [new Cea608Stream(0, 0), // eslint-disable-line no-use-before-define\n      new Cea608Stream(0, 1), // eslint-disable-line no-use-before-define\n      new Cea608Stream(1, 0), // eslint-disable-line no-use-before-define\n      new Cea608Stream(1, 1) // eslint-disable-line no-use-before-define\n      ];\n\n      this.reset();\n\n      // forward data and done events from CCs to this CaptionStream\n      this.ccStreams_.forEach(function (cc) {\n        cc.on('data', this.trigger.bind(this, 'data'));\n        cc.on('done', this.trigger.bind(this, 'done'));\n      }, this);\n    };\n\n    CaptionStream.prototype = new stream();\n    CaptionStream.prototype.push = function (event) {\n      var sei, userData, newCaptionPackets;\n\n      // only examine SEI NALs\n      if (event.nalUnitType !== 'sei_rbsp') {\n        return;\n      }\n\n      // parse the sei\n      sei = captionPacketParser.parseSei(event.escapedRBSP);\n\n      // ignore everything but user_data_registered_itu_t_t35\n      if (sei.payloadType !== captionPacketParser.USER_DATA_REGISTERED_ITU_T_T35) {\n        return;\n      }\n\n      // parse out the user data payload\n      userData = captionPacketParser.parseUserData(sei);\n\n      // ignore unrecognized userData\n      if (!userData) {\n        return;\n      }\n\n      // Sometimes, the same segment # will be downloaded twice. To stop the\n      // caption data from being processed twice, we track the latest dts we've\n      // received and ignore everything with a dts before that. However, since\n      // data for a specific dts can be split across packets on either side of\n      // a segment boundary, we need to make sure we *don't* ignore the packets\n      // from the *next* segment that have dts === this.latestDts_. By constantly\n      // tracking the number of packets received with dts === this.latestDts_, we\n      // know how many should be ignored once we start receiving duplicates.\n      if (event.dts < this.latestDts_) {\n        // We've started getting older data, so set the flag.\n        this.ignoreNextEqualDts_ = true;\n        return;\n      } else if (event.dts === this.latestDts_ && this.ignoreNextEqualDts_) {\n        this.numSameDts_--;\n        if (!this.numSameDts_) {\n          // We've received the last duplicate packet, time to start processing again\n          this.ignoreNextEqualDts_ = false;\n        }\n        return;\n      }\n\n      // parse out CC data packets and save them for later\n      newCaptionPackets = captionPacketParser.parseCaptionPackets(event.pts, userData);\n      this.captionPackets_ = this.captionPackets_.concat(newCaptionPackets);\n      if (this.latestDts_ !== event.dts) {\n        this.numSameDts_ = 0;\n      }\n      this.numSameDts_++;\n      this.latestDts_ = event.dts;\n    };\n\n    CaptionStream.prototype.flush = function () {\n      // make sure we actually parsed captions before proceeding\n      if (!this.captionPackets_.length) {\n        this.ccStreams_.forEach(function (cc) {\n          cc.flush();\n        }, this);\n        return;\n      }\n\n      // In Chrome, the Array#sort function is not stable so add a\n      // presortIndex that we can use to ensure we get a stable-sort\n      this.captionPackets_.forEach(function (elem, idx) {\n        elem.presortIndex = idx;\n      });\n\n      // sort caption byte-pairs based on their PTS values\n      this.captionPackets_.sort(function (a, b) {\n        if (a.pts === b.pts) {\n          return a.presortIndex - b.presortIndex;\n        }\n        return a.pts - b.pts;\n      });\n\n      this.captionPackets_.forEach(function (packet) {\n        if (packet.type < 2) {\n          // Dispatch packet to the right Cea608Stream\n          this.dispatchCea608Packet(packet);\n        }\n        // this is where an 'else' would go for a dispatching packets\n        // to a theoretical Cea708Stream that handles SERVICEn data\n      }, this);\n\n      this.captionPackets_.length = 0;\n      this.ccStreams_.forEach(function (cc) {\n        cc.flush();\n      }, this);\n      return;\n    };\n\n    CaptionStream.prototype.reset = function () {\n      this.latestDts_ = null;\n      this.ignoreNextEqualDts_ = false;\n      this.numSameDts_ = 0;\n      this.activeCea608Channel_ = [null, null];\n      this.ccStreams_.forEach(function (ccStream) {\n        ccStream.reset();\n      });\n    };\n\n    CaptionStream.prototype.dispatchCea608Packet = function (packet) {\n      // NOTE: packet.type is the CEA608 field\n      if (this.setsChannel1Active(packet)) {\n        this.activeCea608Channel_[packet.type] = 0;\n      } else if (this.setsChannel2Active(packet)) {\n        this.activeCea608Channel_[packet.type] = 1;\n      }\n      if (this.activeCea608Channel_[packet.type] === null) {\n        // If we haven't received anything to set the active channel, discard the\n        // data; we don't want jumbled captions\n        return;\n      }\n      this.ccStreams_[(packet.type << 1) + this.activeCea608Channel_[packet.type]].push(packet);\n    };\n\n    CaptionStream.prototype.setsChannel1Active = function (packet) {\n      return (packet.ccData & 0x7800) === 0x1000;\n    };\n    CaptionStream.prototype.setsChannel2Active = function (packet) {\n      return (packet.ccData & 0x7800) === 0x1800;\n    };\n\n    // ----------------------\n    // Session to Application\n    // ----------------------\n\n    // This hash maps non-ASCII, special, and extended character codes to their\n    // proper Unicode equivalent. The first keys that are only a single byte\n    // are the non-standard ASCII characters, which simply map the CEA608 byte\n    // to the standard ASCII/Unicode. The two-byte keys that follow are the CEA608\n    // character codes, but have their MSB bitmasked with 0x03 so that a lookup\n    // can be performed regardless of the field and data channel on which the\n    // character code was received.\n    var CHARACTER_TRANSLATION = {\n      0x2a: 0xe1, // á\n      0x5c: 0xe9, // é\n      0x5e: 0xed, // í\n      0x5f: 0xf3, // ó\n      0x60: 0xfa, // ú\n      0x7b: 0xe7, // ç\n      0x7c: 0xf7, // ÷\n      0x7d: 0xd1, // Ñ\n      0x7e: 0xf1, // ñ\n      0x7f: 0x2588, // █\n      0x0130: 0xae, // ®\n      0x0131: 0xb0, // °\n      0x0132: 0xbd, // ½\n      0x0133: 0xbf, // ¿\n      0x0134: 0x2122, // ™\n      0x0135: 0xa2, // ¢\n      0x0136: 0xa3, // £\n      0x0137: 0x266a, // ♪\n      0x0138: 0xe0, // à\n      0x0139: 0xa0, //\n      0x013a: 0xe8, // è\n      0x013b: 0xe2, // â\n      0x013c: 0xea, // ê\n      0x013d: 0xee, // î\n      0x013e: 0xf4, // ô\n      0x013f: 0xfb, // û\n      0x0220: 0xc1, // Á\n      0x0221: 0xc9, // É\n      0x0222: 0xd3, // Ó\n      0x0223: 0xda, // Ú\n      0x0224: 0xdc, // Ü\n      0x0225: 0xfc, // ü\n      0x0226: 0x2018, // ‘\n      0x0227: 0xa1, // ¡\n      0x0228: 0x2a, // *\n      0x0229: 0x27, // '\n      0x022a: 0x2014, // —\n      0x022b: 0xa9, // ©\n      0x022c: 0x2120, // ℠\n      0x022d: 0x2022, // •\n      0x022e: 0x201c, // “\n      0x022f: 0x201d, // ”\n      0x0230: 0xc0, // À\n      0x0231: 0xc2, // Â\n      0x0232: 0xc7, // Ç\n      0x0233: 0xc8, // È\n      0x0234: 0xca, // Ê\n      0x0235: 0xcb, // Ë\n      0x0236: 0xeb, // ë\n      0x0237: 0xce, // Î\n      0x0238: 0xcf, // Ï\n      0x0239: 0xef, // ï\n      0x023a: 0xd4, // Ô\n      0x023b: 0xd9, // Ù\n      0x023c: 0xf9, // ù\n      0x023d: 0xdb, // Û\n      0x023e: 0xab, // «\n      0x023f: 0xbb, // »\n      0x0320: 0xc3, // Ã\n      0x0321: 0xe3, // ã\n      0x0322: 0xcd, // Í\n      0x0323: 0xcc, // Ì\n      0x0324: 0xec, // ì\n      0x0325: 0xd2, // Ò\n      0x0326: 0xf2, // ò\n      0x0327: 0xd5, // Õ\n      0x0328: 0xf5, // õ\n      0x0329: 0x7b, // {\n      0x032a: 0x7d, // }\n      0x032b: 0x5c, // \\\n      0x032c: 0x5e, // ^\n      0x032d: 0x5f, // _\n      0x032e: 0x7c, // |\n      0x032f: 0x7e, // ~\n      0x0330: 0xc4, // Ä\n      0x0331: 0xe4, // ä\n      0x0332: 0xd6, // Ö\n      0x0333: 0xf6, // ö\n      0x0334: 0xdf, // ß\n      0x0335: 0xa5, // ¥\n      0x0336: 0xa4, // ¤\n      0x0337: 0x2502, // │\n      0x0338: 0xc5, // Å\n      0x0339: 0xe5, // å\n      0x033a: 0xd8, // Ø\n      0x033b: 0xf8, // ø\n      0x033c: 0x250c, // ┌\n      0x033d: 0x2510, // ┐\n      0x033e: 0x2514, // └\n      0x033f: 0x2518 // ┘\n    };\n\n    var getCharFromCode = function getCharFromCode(code) {\n      if (code === null) {\n        return '';\n      }\n      code = CHARACTER_TRANSLATION[code] || code;\n      return String.fromCharCode(code);\n    };\n\n    // the index of the last row in a CEA-608 display buffer\n    var BOTTOM_ROW = 14;\n\n    // This array is used for mapping PACs -> row #, since there's no way of\n    // getting it through bit logic.\n    var ROWS = [0x1100, 0x1120, 0x1200, 0x1220, 0x1500, 0x1520, 0x1600, 0x1620, 0x1700, 0x1720, 0x1000, 0x1300, 0x1320, 0x1400, 0x1420];\n\n    // CEA-608 captions are rendered onto a 34x15 matrix of character\n    // cells. The \"bottom\" row is the last element in the outer array.\n    var createDisplayBuffer = function createDisplayBuffer() {\n      var result = [],\n          i = BOTTOM_ROW + 1;\n      while (i--) {\n        result.push('');\n      }\n      return result;\n    };\n\n    var Cea608Stream = function Cea608Stream(field, dataChannel) {\n      Cea608Stream.prototype.init.call(this);\n\n      this.field_ = field || 0;\n      this.dataChannel_ = dataChannel || 0;\n\n      this.name_ = 'CC' + ((this.field_ << 1 | this.dataChannel_) + 1);\n\n      this.setConstants();\n      this.reset();\n\n      this.push = function (packet) {\n        var data, swap, char0, char1, text;\n        // remove the parity bits\n        data = packet.ccData & 0x7f7f;\n\n        // ignore duplicate control codes; the spec demands they're sent twice\n        if (data === this.lastControlCode_) {\n          this.lastControlCode_ = null;\n          return;\n        }\n\n        // Store control codes\n        if ((data & 0xf000) === 0x1000) {\n          this.lastControlCode_ = data;\n        } else if (data !== this.PADDING_) {\n          this.lastControlCode_ = null;\n        }\n\n        char0 = data >>> 8;\n        char1 = data & 0xff;\n\n        if (data === this.PADDING_) {\n          return;\n        } else if (data === this.RESUME_CAPTION_LOADING_) {\n          this.mode_ = 'popOn';\n        } else if (data === this.END_OF_CAPTION_) {\n          // If an EOC is received while in paint-on mode, the displayed caption\n          // text should be swapped to non-displayed memory as if it was a pop-on\n          // caption. Because of that, we should explicitly switch back to pop-on\n          // mode\n          this.mode_ = 'popOn';\n          this.clearFormatting(packet.pts);\n          // if a caption was being displayed, it's gone now\n          this.flushDisplayed(packet.pts);\n\n          // flip memory\n          swap = this.displayed_;\n          this.displayed_ = this.nonDisplayed_;\n          this.nonDisplayed_ = swap;\n\n          // start measuring the time to display the caption\n          this.startPts_ = packet.pts;\n        } else if (data === this.ROLL_UP_2_ROWS_) {\n          this.rollUpRows_ = 2;\n          this.setRollUp(packet.pts);\n        } else if (data === this.ROLL_UP_3_ROWS_) {\n          this.rollUpRows_ = 3;\n          this.setRollUp(packet.pts);\n        } else if (data === this.ROLL_UP_4_ROWS_) {\n          this.rollUpRows_ = 4;\n          this.setRollUp(packet.pts);\n        } else if (data === this.CARRIAGE_RETURN_) {\n          this.clearFormatting(packet.pts);\n          this.flushDisplayed(packet.pts);\n          this.shiftRowsUp_();\n          this.startPts_ = packet.pts;\n        } else if (data === this.BACKSPACE_) {\n          if (this.mode_ === 'popOn') {\n            this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);\n          } else {\n            this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1);\n          }\n        } else if (data === this.ERASE_DISPLAYED_MEMORY_) {\n          this.flushDisplayed(packet.pts);\n          this.displayed_ = createDisplayBuffer();\n        } else if (data === this.ERASE_NON_DISPLAYED_MEMORY_) {\n          this.nonDisplayed_ = createDisplayBuffer();\n        } else if (data === this.RESUME_DIRECT_CAPTIONING_) {\n          if (this.mode_ !== 'paintOn') {\n            // NOTE: This should be removed when proper caption positioning is\n            // implemented\n            this.flushDisplayed(packet.pts);\n            this.displayed_ = createDisplayBuffer();\n          }\n          this.mode_ = 'paintOn';\n          this.startPts_ = packet.pts;\n\n          // Append special characters to caption text\n        } else if (this.isSpecialCharacter(char0, char1)) {\n          // Bitmask char0 so that we can apply character transformations\n          // regardless of field and data channel.\n          // Then byte-shift to the left and OR with char1 so we can pass the\n          // entire character code to `getCharFromCode`.\n          char0 = (char0 & 0x03) << 8;\n          text = getCharFromCode(char0 | char1);\n          this[this.mode_](packet.pts, text);\n          this.column_++;\n\n          // Append extended characters to caption text\n        } else if (this.isExtCharacter(char0, char1)) {\n          // Extended characters always follow their \"non-extended\" equivalents.\n          // IE if a \"è\" is desired, you'll always receive \"eè\"; non-compliant\n          // decoders are supposed to drop the \"è\", while compliant decoders\n          // backspace the \"e\" and insert \"è\".\n\n          // Delete the previous character\n          if (this.mode_ === 'popOn') {\n            this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);\n          } else {\n            this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1);\n          }\n\n          // Bitmask char0 so that we can apply character transformations\n          // regardless of field and data channel.\n          // Then byte-shift to the left and OR with char1 so we can pass the\n          // entire character code to `getCharFromCode`.\n          char0 = (char0 & 0x03) << 8;\n          text = getCharFromCode(char0 | char1);\n          this[this.mode_](packet.pts, text);\n          this.column_++;\n\n          // Process mid-row codes\n        } else if (this.isMidRowCode(char0, char1)) {\n          // Attributes are not additive, so clear all formatting\n          this.clearFormatting(packet.pts);\n\n          // According to the standard, mid-row codes\n          // should be replaced with spaces, so add one now\n          this[this.mode_](packet.pts, ' ');\n          this.column_++;\n\n          if ((char1 & 0xe) === 0xe) {\n            this.addFormatting(packet.pts, ['i']);\n          }\n\n          if ((char1 & 0x1) === 0x1) {\n            this.addFormatting(packet.pts, ['u']);\n          }\n\n          // Detect offset control codes and adjust cursor\n        } else if (this.isOffsetControlCode(char0, char1)) {\n          // Cursor position is set by indent PAC (see below) in 4-column\n          // increments, with an additional offset code of 1-3 to reach any\n          // of the 32 columns specified by CEA-608. So all we need to do\n          // here is increment the column cursor by the given offset.\n          this.column_ += char1 & 0x03;\n\n          // Detect PACs (Preamble Address Codes)\n        } else if (this.isPAC(char0, char1)) {\n\n          // There's no logic for PAC -> row mapping, so we have to just\n          // find the row code in an array and use its index :(\n          var row = ROWS.indexOf(data & 0x1f20);\n\n          // Configure the caption window if we're in roll-up mode\n          if (this.mode_ === 'rollUp') {\n            this.setRollUp(packet.pts, row);\n          }\n\n          if (row !== this.row_) {\n            // formatting is only persistent for current row\n            this.clearFormatting(packet.pts);\n            this.row_ = row;\n          }\n          // All PACs can apply underline, so detect and apply\n          // (All odd-numbered second bytes set underline)\n          if (char1 & 0x1 && this.formatting_.indexOf('u') === -1) {\n            this.addFormatting(packet.pts, ['u']);\n          }\n\n          if ((data & 0x10) === 0x10) {\n            // We've got an indent level code. Each successive even number\n            // increments the column cursor by 4, so we can get the desired\n            // column position by bit-shifting to the right (to get n/2)\n            // and multiplying by 4.\n            this.column_ = ((data & 0xe) >> 1) * 4;\n          }\n\n          if (this.isColorPAC(char1)) {\n            // it's a color code, though we only support white, which\n            // can be either normal or italicized. white italics can be\n            // either 0x4e or 0x6e depending on the row, so we just\n            // bitwise-and with 0xe to see if italics should be turned on\n            if ((char1 & 0xe) === 0xe) {\n              this.addFormatting(packet.pts, ['i']);\n            }\n          }\n\n          // We have a normal character in char0, and possibly one in char1\n        } else if (this.isNormalChar(char0)) {\n          if (char1 === 0x00) {\n            char1 = null;\n          }\n          text = getCharFromCode(char0);\n          text += getCharFromCode(char1);\n          this[this.mode_](packet.pts, text);\n          this.column_ += text.length;\n        } // finish data processing\n      };\n    };\n    Cea608Stream.prototype = new stream();\n    // Trigger a cue point that captures the current state of the\n    // display buffer\n    Cea608Stream.prototype.flushDisplayed = function (pts) {\n      var content = this.displayed_\n      // remove spaces from the start and end of the string\n      .map(function (row) {\n        return row.trim();\n      })\n      // combine all text rows to display in one cue\n      .join('\\n')\n      // and remove blank rows from the start and end, but not the middle\n      .replace(/^\\n+|\\n+$/g, '');\n\n      if (content.length) {\n        this.trigger('data', {\n          startPts: this.startPts_,\n          endPts: pts,\n          text: content,\n          stream: this.name_\n        });\n      }\n    };\n\n    /**\n     * Zero out the data, used for startup and on seek\n     */\n    Cea608Stream.prototype.reset = function () {\n      this.mode_ = 'popOn';\n      // When in roll-up mode, the index of the last row that will\n      // actually display captions. If a caption is shifted to a row\n      // with a lower index than this, it is cleared from the display\n      // buffer\n      this.topRow_ = 0;\n      this.startPts_ = 0;\n      this.displayed_ = createDisplayBuffer();\n      this.nonDisplayed_ = createDisplayBuffer();\n      this.lastControlCode_ = null;\n\n      // Track row and column for proper line-breaking and spacing\n      this.column_ = 0;\n      this.row_ = BOTTOM_ROW;\n      this.rollUpRows_ = 2;\n\n      // This variable holds currently-applied formatting\n      this.formatting_ = [];\n    };\n\n    /**\n     * Sets up control code and related constants for this instance\n     */\n    Cea608Stream.prototype.setConstants = function () {\n      // The following attributes have these uses:\n      // ext_ :    char0 for mid-row codes, and the base for extended\n      //           chars (ext_+0, ext_+1, and ext_+2 are char0s for\n      //           extended codes)\n      // control_: char0 for control codes, except byte-shifted to the\n      //           left so that we can do this.control_ | CONTROL_CODE\n      // offset_:  char0 for tab offset codes\n      //\n      // It's also worth noting that control codes, and _only_ control codes,\n      // differ between field 1 and field2. Field 2 control codes are always\n      // their field 1 value plus 1. That's why there's the \"| field\" on the\n      // control value.\n      if (this.dataChannel_ === 0) {\n        this.BASE_ = 0x10;\n        this.EXT_ = 0x11;\n        this.CONTROL_ = (0x14 | this.field_) << 8;\n        this.OFFSET_ = 0x17;\n      } else if (this.dataChannel_ === 1) {\n        this.BASE_ = 0x18;\n        this.EXT_ = 0x19;\n        this.CONTROL_ = (0x1c | this.field_) << 8;\n        this.OFFSET_ = 0x1f;\n      }\n\n      // Constants for the LSByte command codes recognized by Cea608Stream. This\n      // list is not exhaustive. For a more comprehensive listing and semantics see\n      // http://www.gpo.gov/fdsys/pkg/CFR-2010-title47-vol1/pdf/CFR-2010-title47-vol1-sec15-119.pdf\n      // Padding\n      this.PADDING_ = 0x0000;\n      // Pop-on Mode\n      this.RESUME_CAPTION_LOADING_ = this.CONTROL_ | 0x20;\n      this.END_OF_CAPTION_ = this.CONTROL_ | 0x2f;\n      // Roll-up Mode\n      this.ROLL_UP_2_ROWS_ = this.CONTROL_ | 0x25;\n      this.ROLL_UP_3_ROWS_ = this.CONTROL_ | 0x26;\n      this.ROLL_UP_4_ROWS_ = this.CONTROL_ | 0x27;\n      this.CARRIAGE_RETURN_ = this.CONTROL_ | 0x2d;\n      // paint-on mode\n      this.RESUME_DIRECT_CAPTIONING_ = this.CONTROL_ | 0x29;\n      // Erasure\n      this.BACKSPACE_ = this.CONTROL_ | 0x21;\n      this.ERASE_DISPLAYED_MEMORY_ = this.CONTROL_ | 0x2c;\n      this.ERASE_NON_DISPLAYED_MEMORY_ = this.CONTROL_ | 0x2e;\n    };\n\n    /**\n     * Detects if the 2-byte packet data is a special character\n     *\n     * Special characters have a second byte in the range 0x30 to 0x3f,\n     * with the first byte being 0x11 (for data channel 1) or 0x19 (for\n     * data channel 2).\n     *\n     * @param  {Integer} char0 The first byte\n     * @param  {Integer} char1 The second byte\n     * @return {Boolean}       Whether the 2 bytes are an special character\n     */\n    Cea608Stream.prototype.isSpecialCharacter = function (char0, char1) {\n      return char0 === this.EXT_ && char1 >= 0x30 && char1 <= 0x3f;\n    };\n\n    /**\n     * Detects if the 2-byte packet data is an extended character\n     *\n     * Extended characters have a second byte in the range 0x20 to 0x3f,\n     * with the first byte being 0x12 or 0x13 (for data channel 1) or\n     * 0x1a or 0x1b (for data channel 2).\n     *\n     * @param  {Integer} char0 The first byte\n     * @param  {Integer} char1 The second byte\n     * @return {Boolean}       Whether the 2 bytes are an extended character\n     */\n    Cea608Stream.prototype.isExtCharacter = function (char0, char1) {\n      return (char0 === this.EXT_ + 1 || char0 === this.EXT_ + 2) && char1 >= 0x20 && char1 <= 0x3f;\n    };\n\n    /**\n     * Detects if the 2-byte packet is a mid-row code\n     *\n     * Mid-row codes have a second byte in the range 0x20 to 0x2f, with\n     * the first byte being 0x11 (for data channel 1) or 0x19 (for data\n     * channel 2).\n     *\n     * @param  {Integer} char0 The first byte\n     * @param  {Integer} char1 The second byte\n     * @return {Boolean}       Whether the 2 bytes are a mid-row code\n     */\n    Cea608Stream.prototype.isMidRowCode = function (char0, char1) {\n      return char0 === this.EXT_ && char1 >= 0x20 && char1 <= 0x2f;\n    };\n\n    /**\n     * Detects if the 2-byte packet is an offset control code\n     *\n     * Offset control codes have a second byte in the range 0x21 to 0x23,\n     * with the first byte being 0x17 (for data channel 1) or 0x1f (for\n     * data channel 2).\n     *\n     * @param  {Integer} char0 The first byte\n     * @param  {Integer} char1 The second byte\n     * @return {Boolean}       Whether the 2 bytes are an offset control code\n     */\n    Cea608Stream.prototype.isOffsetControlCode = function (char0, char1) {\n      return char0 === this.OFFSET_ && char1 >= 0x21 && char1 <= 0x23;\n    };\n\n    /**\n     * Detects if the 2-byte packet is a Preamble Address Code\n     *\n     * PACs have a first byte in the range 0x10 to 0x17 (for data channel 1)\n     * or 0x18 to 0x1f (for data channel 2), with the second byte in the\n     * range 0x40 to 0x7f.\n     *\n     * @param  {Integer} char0 The first byte\n     * @param  {Integer} char1 The second byte\n     * @return {Boolean}       Whether the 2 bytes are a PAC\n     */\n    Cea608Stream.prototype.isPAC = function (char0, char1) {\n      return char0 >= this.BASE_ && char0 < this.BASE_ + 8 && char1 >= 0x40 && char1 <= 0x7f;\n    };\n\n    /**\n     * Detects if a packet's second byte is in the range of a PAC color code\n     *\n     * PAC color codes have the second byte be in the range 0x40 to 0x4f, or\n     * 0x60 to 0x6f.\n     *\n     * @param  {Integer} char1 The second byte\n     * @return {Boolean}       Whether the byte is a color PAC\n     */\n    Cea608Stream.prototype.isColorPAC = function (char1) {\n      return char1 >= 0x40 && char1 <= 0x4f || char1 >= 0x60 && char1 <= 0x7f;\n    };\n\n    /**\n     * Detects if a single byte is in the range of a normal character\n     *\n     * Normal text bytes are in the range 0x20 to 0x7f.\n     *\n     * @param  {Integer} char  The byte\n     * @return {Boolean}       Whether the byte is a normal character\n     */\n    Cea608Stream.prototype.isNormalChar = function (char) {\n      return char >= 0x20 && char <= 0x7f;\n    };\n\n    /**\n     * Configures roll-up\n     *\n     * @param  {Integer} pts         Current PTS\n     * @param  {Integer} newBaseRow  Used by PACs to slide the current window to\n     *                               a new position\n     */\n    Cea608Stream.prototype.setRollUp = function (pts, newBaseRow) {\n      // Reset the base row to the bottom row when switching modes\n      if (this.mode_ !== 'rollUp') {\n        this.row_ = BOTTOM_ROW;\n        this.mode_ = 'rollUp';\n        // Spec says to wipe memories when switching to roll-up\n        this.flushDisplayed(pts);\n        this.nonDisplayed_ = createDisplayBuffer();\n        this.displayed_ = createDisplayBuffer();\n      }\n\n      if (newBaseRow !== undefined && newBaseRow !== this.row_) {\n        // move currently displayed captions (up or down) to the new base row\n        for (var i = 0; i < this.rollUpRows_; i++) {\n          this.displayed_[newBaseRow - i] = this.displayed_[this.row_ - i];\n          this.displayed_[this.row_ - i] = '';\n        }\n      }\n\n      if (newBaseRow === undefined) {\n        newBaseRow = this.row_;\n      }\n      this.topRow_ = newBaseRow - this.rollUpRows_ + 1;\n    };\n\n    // Adds the opening HTML tag for the passed character to the caption text,\n    // and keeps track of it for later closing\n    Cea608Stream.prototype.addFormatting = function (pts, format) {\n      this.formatting_ = this.formatting_.concat(format);\n      var text = format.reduce(function (text, format) {\n        return text + '<' + format + '>';\n      }, '');\n      this[this.mode_](pts, text);\n    };\n\n    // Adds HTML closing tags for current formatting to caption text and\n    // clears remembered formatting\n    Cea608Stream.prototype.clearFormatting = function (pts) {\n      if (!this.formatting_.length) {\n        return;\n      }\n      var text = this.formatting_.reverse().reduce(function (text, format) {\n        return text + '</' + format + '>';\n      }, '');\n      this.formatting_ = [];\n      this[this.mode_](pts, text);\n    };\n\n    // Mode Implementations\n    Cea608Stream.prototype.popOn = function (pts, text) {\n      var baseRow = this.nonDisplayed_[this.row_];\n\n      // buffer characters\n      baseRow += text;\n      this.nonDisplayed_[this.row_] = baseRow;\n    };\n\n    Cea608Stream.prototype.rollUp = function (pts, text) {\n      var baseRow = this.displayed_[this.row_];\n\n      baseRow += text;\n      this.displayed_[this.row_] = baseRow;\n    };\n\n    Cea608Stream.prototype.shiftRowsUp_ = function () {\n      var i;\n      // clear out inactive rows\n      for (i = 0; i < this.topRow_; i++) {\n        this.displayed_[i] = '';\n      }\n      for (i = this.row_ + 1; i < BOTTOM_ROW + 1; i++) {\n        this.displayed_[i] = '';\n      }\n      // shift displayed rows up\n      for (i = this.topRow_; i < this.row_; i++) {\n        this.displayed_[i] = this.displayed_[i + 1];\n      }\n      // clear out the bottom row\n      this.displayed_[this.row_] = '';\n    };\n\n    Cea608Stream.prototype.paintOn = function (pts, text) {\n      var baseRow = this.displayed_[this.row_];\n\n      baseRow += text;\n      this.displayed_[this.row_] = baseRow;\n    };\n\n    // exports\n    var captionStream = {\n      CaptionStream: CaptionStream,\n      Cea608Stream: Cea608Stream\n    };\n\n    var streamTypes = {\n      H264_STREAM_TYPE: 0x1B,\n      ADTS_STREAM_TYPE: 0x0F,\n      METADATA_STREAM_TYPE: 0x15\n    };\n\n    var MAX_TS = 8589934592;\n\n    var RO_THRESH = 4294967296;\n\n    var handleRollover = function handleRollover(value, reference) {\n      var direction = 1;\n\n      if (value > reference) {\n        // If the current timestamp value is greater than our reference timestamp and we detect a\n        // timestamp rollover, this means the roll over is happening in the opposite direction.\n        // Example scenario: Enter a long stream/video just after a rollover occurred. The reference\n        // point will be set to a small number, e.g. 1. The user then seeks backwards over the\n        // rollover point. In loading this segment, the timestamp values will be very large,\n        // e.g. 2^33 - 1. Since this comes before the data we loaded previously, we want to adjust\n        // the time stamp to be `value - 2^33`.\n        direction = -1;\n      }\n\n      // Note: A seek forwards or back that is greater than the RO_THRESH (2^32, ~13 hours) will\n      // cause an incorrect adjustment.\n      while (Math.abs(reference - value) > RO_THRESH) {\n        value += direction * MAX_TS;\n      }\n\n      return value;\n    };\n\n    var TimestampRolloverStream = function TimestampRolloverStream(type) {\n      var lastDTS, referenceDTS;\n\n      TimestampRolloverStream.prototype.init.call(this);\n\n      this.type_ = type;\n\n      this.push = function (data) {\n        if (data.type !== this.type_) {\n          return;\n        }\n\n        if (referenceDTS === undefined) {\n          referenceDTS = data.dts;\n        }\n\n        data.dts = handleRollover(data.dts, referenceDTS);\n        data.pts = handleRollover(data.pts, referenceDTS);\n\n        lastDTS = data.dts;\n\n        this.trigger('data', data);\n      };\n\n      this.flush = function () {\n        referenceDTS = lastDTS;\n        this.trigger('done');\n      };\n\n      this.discontinuity = function () {\n        referenceDTS = void 0;\n        lastDTS = void 0;\n      };\n    };\n\n    TimestampRolloverStream.prototype = new stream();\n\n    var timestampRolloverStream = {\n      TimestampRolloverStream: TimestampRolloverStream,\n      handleRollover: handleRollover\n    };\n\n    var percentEncode = function percentEncode(bytes, start, end) {\n      var i,\n          result = '';\n      for (i = start; i < end; i++) {\n        result += '%' + ('00' + bytes[i].toString(16)).slice(-2);\n      }\n      return result;\n    },\n\n\n    // return the string representation of the specified byte range,\n    // interpreted as UTf-8.\n    parseUtf8 = function parseUtf8(bytes, start, end) {\n      return decodeURIComponent(percentEncode(bytes, start, end));\n    },\n\n\n    // return the string representation of the specified byte range,\n    // interpreted as ISO-8859-1.\n    parseIso88591 = function parseIso88591(bytes, start, end) {\n      return unescape(percentEncode(bytes, start, end)); // jshint ignore:line\n    },\n        parseSyncSafeInteger = function parseSyncSafeInteger(data) {\n      return data[0] << 21 | data[1] << 14 | data[2] << 7 | data[3];\n    },\n        tagParsers = {\n      TXXX: function TXXX(tag) {\n        var i;\n        if (tag.data[0] !== 3) {\n          // ignore frames with unrecognized character encodings\n          return;\n        }\n\n        for (i = 1; i < tag.data.length; i++) {\n          if (tag.data[i] === 0) {\n            // parse the text fields\n            tag.description = parseUtf8(tag.data, 1, i);\n            // do not include the null terminator in the tag value\n            tag.value = parseUtf8(tag.data, i + 1, tag.data.length).replace(/\\0*$/, '');\n            break;\n          }\n        }\n        tag.data = tag.value;\n      },\n      WXXX: function WXXX(tag) {\n        var i;\n        if (tag.data[0] !== 3) {\n          // ignore frames with unrecognized character encodings\n          return;\n        }\n\n        for (i = 1; i < tag.data.length; i++) {\n          if (tag.data[i] === 0) {\n            // parse the description and URL fields\n            tag.description = parseUtf8(tag.data, 1, i);\n            tag.url = parseUtf8(tag.data, i + 1, tag.data.length);\n            break;\n          }\n        }\n      },\n      PRIV: function PRIV(tag) {\n        var i;\n\n        for (i = 0; i < tag.data.length; i++) {\n          if (tag.data[i] === 0) {\n            // parse the description and URL fields\n            tag.owner = parseIso88591(tag.data, 0, i);\n            break;\n          }\n        }\n        tag.privateData = tag.data.subarray(i + 1);\n        tag.data = tag.privateData;\n      }\n    },\n        _MetadataStream;\n\n    _MetadataStream = function MetadataStream(options) {\n      var settings = {\n        debug: !!(options && options.debug),\n\n        // the bytes of the program-level descriptor field in MP2T\n        // see ISO/IEC 13818-1:2013 (E), section 2.6 \"Program and\n        // program element descriptors\"\n        descriptor: options && options.descriptor\n      },\n\n\n      // the total size in bytes of the ID3 tag being parsed\n      tagSize = 0,\n\n\n      // tag data that is not complete enough to be parsed\n      buffer = [],\n\n\n      // the total number of bytes currently in the buffer\n      bufferSize = 0,\n          i;\n\n      _MetadataStream.prototype.init.call(this);\n\n      // calculate the text track in-band metadata track dispatch type\n      // https://html.spec.whatwg.org/multipage/embedded-content.html#steps-to-expose-a-media-resource-specific-text-track\n      this.dispatchType = streamTypes.METADATA_STREAM_TYPE.toString(16);\n      if (settings.descriptor) {\n        for (i = 0; i < settings.descriptor.length; i++) {\n          this.dispatchType += ('00' + settings.descriptor[i].toString(16)).slice(-2);\n        }\n      }\n\n      this.push = function (chunk) {\n        var tag, frameStart, frameSize, frame, i, frameHeader;\n        if (chunk.type !== 'timed-metadata') {\n          return;\n        }\n\n        // if data_alignment_indicator is set in the PES header,\n        // we must have the start of a new ID3 tag. Assume anything\n        // remaining in the buffer was malformed and throw it out\n        if (chunk.dataAlignmentIndicator) {\n          bufferSize = 0;\n          buffer.length = 0;\n        }\n\n        // ignore events that don't look like ID3 data\n        if (buffer.length === 0 && (chunk.data.length < 10 || chunk.data[0] !== 'I'.charCodeAt(0) || chunk.data[1] !== 'D'.charCodeAt(0) || chunk.data[2] !== '3'.charCodeAt(0))) {\n          if (settings.debug) {\n            // eslint-disable-next-line no-console\n            console.log('Skipping unrecognized metadata packet');\n          }\n          return;\n        }\n\n        // add this chunk to the data we've collected so far\n\n        buffer.push(chunk);\n        bufferSize += chunk.data.byteLength;\n\n        // grab the size of the entire frame from the ID3 header\n        if (buffer.length === 1) {\n          // the frame size is transmitted as a 28-bit integer in the\n          // last four bytes of the ID3 header.\n          // The most significant bit of each byte is dropped and the\n          // results concatenated to recover the actual value.\n          tagSize = parseSyncSafeInteger(chunk.data.subarray(6, 10));\n\n          // ID3 reports the tag size excluding the header but it's more\n          // convenient for our comparisons to include it\n          tagSize += 10;\n        }\n\n        // if the entire frame has not arrived, wait for more data\n        if (bufferSize < tagSize) {\n          return;\n        }\n\n        // collect the entire frame so it can be parsed\n        tag = {\n          data: new Uint8Array(tagSize),\n          frames: [],\n          pts: buffer[0].pts,\n          dts: buffer[0].dts\n        };\n        for (i = 0; i < tagSize;) {\n          tag.data.set(buffer[0].data.subarray(0, tagSize - i), i);\n          i += buffer[0].data.byteLength;\n          bufferSize -= buffer[0].data.byteLength;\n          buffer.shift();\n        }\n\n        // find the start of the first frame and the end of the tag\n        frameStart = 10;\n        if (tag.data[5] & 0x40) {\n          // advance the frame start past the extended header\n          frameStart += 4; // header size field\n          frameStart += parseSyncSafeInteger(tag.data.subarray(10, 14));\n\n          // clip any padding off the end\n          tagSize -= parseSyncSafeInteger(tag.data.subarray(16, 20));\n        }\n\n        // parse one or more ID3 frames\n        // http://id3.org/id3v2.3.0#ID3v2_frame_overview\n        do {\n          // determine the number of bytes in this frame\n          frameSize = parseSyncSafeInteger(tag.data.subarray(frameStart + 4, frameStart + 8));\n          if (frameSize < 1) {\n            // eslint-disable-next-line no-console\n            return console.log('Malformed ID3 frame encountered. Skipping metadata parsing.');\n          }\n          frameHeader = String.fromCharCode(tag.data[frameStart], tag.data[frameStart + 1], tag.data[frameStart + 2], tag.data[frameStart + 3]);\n\n          frame = {\n            id: frameHeader,\n            data: tag.data.subarray(frameStart + 10, frameStart + frameSize + 10)\n          };\n          frame.key = frame.id;\n          if (tagParsers[frame.id]) {\n            tagParsers[frame.id](frame);\n\n            // handle the special PRIV frame used to indicate the start\n            // time for raw AAC data\n            if (frame.owner === 'com.apple.streaming.transportStreamTimestamp') {\n              var d = frame.data,\n                  size = (d[3] & 0x01) << 30 | d[4] << 22 | d[5] << 14 | d[6] << 6 | d[7] >>> 2;\n\n              size *= 4;\n              size += d[7] & 0x03;\n              frame.timeStamp = size;\n              // in raw AAC, all subsequent data will be timestamped based\n              // on the value of this frame\n              // we couldn't have known the appropriate pts and dts before\n              // parsing this ID3 tag so set those values now\n              if (tag.pts === undefined && tag.dts === undefined) {\n                tag.pts = frame.timeStamp;\n                tag.dts = frame.timeStamp;\n              }\n              this.trigger('timestamp', frame);\n            }\n          }\n          tag.frames.push(frame);\n\n          frameStart += 10; // advance past the frame header\n          frameStart += frameSize; // advance past the frame body\n        } while (frameStart < tagSize);\n        this.trigger('data', tag);\n      };\n    };\n    _MetadataStream.prototype = new stream();\n\n    var metadataStream = _MetadataStream;\n\n    var TimestampRolloverStream$1 = timestampRolloverStream.TimestampRolloverStream;\n\n    // object types\n    var _TransportPacketStream, _TransportParseStream, _ElementaryStream;\n\n    // constants\n    var MP2T_PACKET_LENGTH = 188,\n\n\n    // bytes\n    SYNC_BYTE = 0x47;\n\n    /**\n     * Splits an incoming stream of binary data into MPEG-2 Transport\n     * Stream packets.\n     */\n    _TransportPacketStream = function TransportPacketStream() {\n      var buffer = new Uint8Array(MP2T_PACKET_LENGTH),\n          bytesInBuffer = 0;\n\n      _TransportPacketStream.prototype.init.call(this);\n\n      // Deliver new bytes to the stream.\n\n      /**\n       * Split a stream of data into M2TS packets\n      **/\n      this.push = function (bytes) {\n        var startIndex = 0,\n            endIndex = MP2T_PACKET_LENGTH,\n            everything;\n\n        // If there are bytes remaining from the last segment, prepend them to the\n        // bytes that were pushed in\n        if (bytesInBuffer) {\n          everything = new Uint8Array(bytes.byteLength + bytesInBuffer);\n          everything.set(buffer.subarray(0, bytesInBuffer));\n          everything.set(bytes, bytesInBuffer);\n          bytesInBuffer = 0;\n        } else {\n          everything = bytes;\n        }\n\n        // While we have enough data for a packet\n        while (endIndex < everything.byteLength) {\n          // Look for a pair of start and end sync bytes in the data..\n          if (everything[startIndex] === SYNC_BYTE && everything[endIndex] === SYNC_BYTE) {\n            // We found a packet so emit it and jump one whole packet forward in\n            // the stream\n            this.trigger('data', everything.subarray(startIndex, endIndex));\n            startIndex += MP2T_PACKET_LENGTH;\n            endIndex += MP2T_PACKET_LENGTH;\n            continue;\n          }\n          // If we get here, we have somehow become de-synchronized and we need to step\n          // forward one byte at a time until we find a pair of sync bytes that denote\n          // a packet\n          startIndex++;\n          endIndex++;\n        }\n\n        // If there was some data left over at the end of the segment that couldn't\n        // possibly be a whole packet, keep it because it might be the start of a packet\n        // that continues in the next segment\n        if (startIndex < everything.byteLength) {\n          buffer.set(everything.subarray(startIndex), 0);\n          bytesInBuffer = everything.byteLength - startIndex;\n        }\n      };\n\n      /**\n       * Passes identified M2TS packets to the TransportParseStream to be parsed\n      **/\n      this.flush = function () {\n        // If the buffer contains a whole packet when we are being flushed, emit it\n        // and empty the buffer. Otherwise hold onto the data because it may be\n        // important for decoding the next segment\n        if (bytesInBuffer === MP2T_PACKET_LENGTH && buffer[0] === SYNC_BYTE) {\n          this.trigger('data', buffer);\n          bytesInBuffer = 0;\n        }\n        this.trigger('done');\n      };\n    };\n    _TransportPacketStream.prototype = new stream();\n\n    /**\n     * Accepts an MP2T TransportPacketStream and emits data events with parsed\n     * forms of the individual transport stream packets.\n     */\n    _TransportParseStream = function TransportParseStream() {\n      var parsePsi, parsePat, parsePmt, self;\n      _TransportParseStream.prototype.init.call(this);\n      self = this;\n\n      this.packetsWaitingForPmt = [];\n      this.programMapTable = undefined;\n\n      parsePsi = function parsePsi(payload, psi) {\n        var offset = 0;\n\n        // PSI packets may be split into multiple sections and those\n        // sections may be split into multiple packets. If a PSI\n        // section starts in this packet, the payload_unit_start_indicator\n        // will be true and the first byte of the payload will indicate\n        // the offset from the current position to the start of the\n        // section.\n        if (psi.payloadUnitStartIndicator) {\n          offset += payload[offset] + 1;\n        }\n\n        if (psi.type === 'pat') {\n          parsePat(payload.subarray(offset), psi);\n        } else {\n          parsePmt(payload.subarray(offset), psi);\n        }\n      };\n\n      parsePat = function parsePat(payload, pat) {\n        pat.section_number = payload[7]; // eslint-disable-line camelcase\n        pat.last_section_number = payload[8]; // eslint-disable-line camelcase\n\n        // skip the PSI header and parse the first PMT entry\n        self.pmtPid = (payload[10] & 0x1F) << 8 | payload[11];\n        pat.pmtPid = self.pmtPid;\n      };\n\n      /**\n       * Parse out the relevant fields of a Program Map Table (PMT).\n       * @param payload {Uint8Array} the PMT-specific portion of an MP2T\n       * packet. The first byte in this array should be the table_id\n       * field.\n       * @param pmt {object} the object that should be decorated with\n       * fields parsed from the PMT.\n       */\n      parsePmt = function parsePmt(payload, pmt) {\n        var sectionLength, tableEnd, programInfoLength, offset;\n\n        // PMTs can be sent ahead of the time when they should actually\n        // take effect. We don't believe this should ever be the case\n        // for HLS but we'll ignore \"forward\" PMT declarations if we see\n        // them. Future PMT declarations have the current_next_indicator\n        // set to zero.\n        if (!(payload[5] & 0x01)) {\n          return;\n        }\n\n        // overwrite any existing program map table\n        self.programMapTable = {\n          video: null,\n          audio: null,\n          'timed-metadata': {}\n        };\n\n        // the mapping table ends at the end of the current section\n        sectionLength = (payload[1] & 0x0f) << 8 | payload[2];\n        tableEnd = 3 + sectionLength - 4;\n\n        // to determine where the table is, we have to figure out how\n        // long the program info descriptors are\n        programInfoLength = (payload[10] & 0x0f) << 8 | payload[11];\n\n        // advance the offset to the first entry in the mapping table\n        offset = 12 + programInfoLength;\n        while (offset < tableEnd) {\n          var streamType = payload[offset];\n          var pid = (payload[offset + 1] & 0x1F) << 8 | payload[offset + 2];\n\n          // only map a single elementary_pid for audio and video stream types\n          // TODO: should this be done for metadata too? for now maintain behavior of\n          //       multiple metadata streams\n          if (streamType === streamTypes.H264_STREAM_TYPE && self.programMapTable.video === null) {\n            self.programMapTable.video = pid;\n          } else if (streamType === streamTypes.ADTS_STREAM_TYPE && self.programMapTable.audio === null) {\n            self.programMapTable.audio = pid;\n          } else if (streamType === streamTypes.METADATA_STREAM_TYPE) {\n            // map pid to stream type for metadata streams\n            self.programMapTable['timed-metadata'][pid] = streamType;\n          }\n\n          // move to the next table entry\n          // skip past the elementary stream descriptors, if present\n          offset += ((payload[offset + 3] & 0x0F) << 8 | payload[offset + 4]) + 5;\n        }\n\n        // record the map on the packet as well\n        pmt.programMapTable = self.programMapTable;\n      };\n\n      /**\n       * Deliver a new MP2T packet to the next stream in the pipeline.\n       */\n      this.push = function (packet) {\n        var result = {},\n            offset = 4;\n\n        result.payloadUnitStartIndicator = !!(packet[1] & 0x40);\n\n        // pid is a 13-bit field starting at the last bit of packet[1]\n        result.pid = packet[1] & 0x1f;\n        result.pid <<= 8;\n        result.pid |= packet[2];\n\n        // if an adaption field is present, its length is specified by the\n        // fifth byte of the TS packet header. The adaptation field is\n        // used to add stuffing to PES packets that don't fill a complete\n        // TS packet, and to specify some forms of timing and control data\n        // that we do not currently use.\n        if ((packet[3] & 0x30) >>> 4 > 0x01) {\n          offset += packet[offset] + 1;\n        }\n\n        // parse the rest of the packet based on the type\n        if (result.pid === 0) {\n          result.type = 'pat';\n          parsePsi(packet.subarray(offset), result);\n          this.trigger('data', result);\n        } else if (result.pid === this.pmtPid) {\n          result.type = 'pmt';\n          parsePsi(packet.subarray(offset), result);\n          this.trigger('data', result);\n\n          // if there are any packets waiting for a PMT to be found, process them now\n          while (this.packetsWaitingForPmt.length) {\n            this.processPes_.apply(this, this.packetsWaitingForPmt.shift());\n          }\n        } else if (this.programMapTable === undefined) {\n          // When we have not seen a PMT yet, defer further processing of\n          // PES packets until one has been parsed\n          this.packetsWaitingForPmt.push([packet, offset, result]);\n        } else {\n          this.processPes_(packet, offset, result);\n        }\n      };\n\n      this.processPes_ = function (packet, offset, result) {\n        // set the appropriate stream type\n        if (result.pid === this.programMapTable.video) {\n          result.streamType = streamTypes.H264_STREAM_TYPE;\n        } else if (result.pid === this.programMapTable.audio) {\n          result.streamType = streamTypes.ADTS_STREAM_TYPE;\n        } else {\n          // if not video or audio, it is timed-metadata or unknown\n          // if unknown, streamType will be undefined\n          result.streamType = this.programMapTable['timed-metadata'][result.pid];\n        }\n\n        result.type = 'pes';\n        result.data = packet.subarray(offset);\n\n        this.trigger('data', result);\n      };\n    };\n    _TransportParseStream.prototype = new stream();\n    _TransportParseStream.STREAM_TYPES = {\n      h264: 0x1b,\n      adts: 0x0f\n    };\n\n    /**\n     * Reconsistutes program elementary stream (PES) packets from parsed\n     * transport stream packets. That is, if you pipe an\n     * mp2t.TransportParseStream into a mp2t.ElementaryStream, the output\n     * events will be events which capture the bytes for individual PES\n     * packets plus relevant metadata that has been extracted from the\n     * container.\n     */\n    _ElementaryStream = function ElementaryStream() {\n      var self = this,\n\n\n      // PES packet fragments\n      video = {\n        data: [],\n        size: 0\n      },\n          audio = {\n        data: [],\n        size: 0\n      },\n          timedMetadata = {\n        data: [],\n        size: 0\n      },\n          parsePes = function parsePes(payload, pes) {\n        var ptsDtsFlags;\n\n        // get the packet length, this will be 0 for video\n        pes.packetLength = 6 + (payload[4] << 8 | payload[5]);\n\n        // find out if this packets starts a new keyframe\n        pes.dataAlignmentIndicator = (payload[6] & 0x04) !== 0;\n        // PES packets may be annotated with a PTS value, or a PTS value\n        // and a DTS value. Determine what combination of values is\n        // available to work with.\n        ptsDtsFlags = payload[7];\n\n        // PTS and DTS are normally stored as a 33-bit number.  Javascript\n        // performs all bitwise operations on 32-bit integers but javascript\n        // supports a much greater range (52-bits) of integer using standard\n        // mathematical operations.\n        // We construct a 31-bit value using bitwise operators over the 31\n        // most significant bits and then multiply by 4 (equal to a left-shift\n        // of 2) before we add the final 2 least significant bits of the\n        // timestamp (equal to an OR.)\n        if (ptsDtsFlags & 0xC0) {\n          // the PTS and DTS are not written out directly. For information\n          // on how they are encoded, see\n          // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n          pes.pts = (payload[9] & 0x0E) << 27 | (payload[10] & 0xFF) << 20 | (payload[11] & 0xFE) << 12 | (payload[12] & 0xFF) << 5 | (payload[13] & 0xFE) >>> 3;\n          pes.pts *= 4; // Left shift by 2\n          pes.pts += (payload[13] & 0x06) >>> 1; // OR by the two LSBs\n          pes.dts = pes.pts;\n          if (ptsDtsFlags & 0x40) {\n            pes.dts = (payload[14] & 0x0E) << 27 | (payload[15] & 0xFF) << 20 | (payload[16] & 0xFE) << 12 | (payload[17] & 0xFF) << 5 | (payload[18] & 0xFE) >>> 3;\n            pes.dts *= 4; // Left shift by 2\n            pes.dts += (payload[18] & 0x06) >>> 1; // OR by the two LSBs\n          }\n        }\n        // the data section starts immediately after the PES header.\n        // pes_header_data_length specifies the number of header bytes\n        // that follow the last byte of the field.\n        pes.data = payload.subarray(9 + payload[8]);\n      },\n\n\n      /**\n        * Pass completely parsed PES packets to the next stream in the pipeline\n       **/\n      flushStream = function flushStream(stream$$1, type, forceFlush) {\n        var packetData = new Uint8Array(stream$$1.size),\n            event = {\n          type: type\n        },\n            i = 0,\n            offset = 0,\n            packetFlushable = false,\n            fragment;\n\n        // do nothing if there is not enough buffered data for a complete\n        // PES header\n        if (!stream$$1.data.length || stream$$1.size < 9) {\n          return;\n        }\n        event.trackId = stream$$1.data[0].pid;\n\n        // reassemble the packet\n        for (i = 0; i < stream$$1.data.length; i++) {\n          fragment = stream$$1.data[i];\n\n          packetData.set(fragment.data, offset);\n          offset += fragment.data.byteLength;\n        }\n\n        // parse assembled packet's PES header\n        parsePes(packetData, event);\n\n        // non-video PES packets MUST have a non-zero PES_packet_length\n        // check that there is enough stream data to fill the packet\n        packetFlushable = type === 'video' || event.packetLength <= stream$$1.size;\n\n        // flush pending packets if the conditions are right\n        if (forceFlush || packetFlushable) {\n          stream$$1.size = 0;\n          stream$$1.data.length = 0;\n        }\n\n        // only emit packets that are complete. this is to avoid assembling\n        // incomplete PES packets due to poor segmentation\n        if (packetFlushable) {\n          self.trigger('data', event);\n        }\n      };\n\n      _ElementaryStream.prototype.init.call(this);\n\n      /**\n       * Identifies M2TS packet types and parses PES packets using metadata\n       * parsed from the PMT\n       **/\n      this.push = function (data) {\n        ({\n          pat: function pat() {\n            // we have to wait for the PMT to arrive as well before we\n            // have any meaningful metadata\n          },\n          pes: function pes() {\n            var stream$$1, streamType;\n\n            switch (data.streamType) {\n              case streamTypes.H264_STREAM_TYPE:\n              case streamTypes.H264_STREAM_TYPE:\n                stream$$1 = video;\n                streamType = 'video';\n                break;\n              case streamTypes.ADTS_STREAM_TYPE:\n                stream$$1 = audio;\n                streamType = 'audio';\n                break;\n              case streamTypes.METADATA_STREAM_TYPE:\n                stream$$1 = timedMetadata;\n                streamType = 'timed-metadata';\n                break;\n              default:\n                // ignore unknown stream types\n                return;\n            }\n\n            // if a new packet is starting, we can flush the completed\n            // packet\n            if (data.payloadUnitStartIndicator) {\n              flushStream(stream$$1, streamType, true);\n            }\n\n            // buffer this fragment until we are sure we've received the\n            // complete payload\n            stream$$1.data.push(data);\n            stream$$1.size += data.data.byteLength;\n          },\n          pmt: function pmt() {\n            var event = {\n              type: 'metadata',\n              tracks: []\n            },\n                programMapTable = data.programMapTable;\n\n            // translate audio and video streams to tracks\n            if (programMapTable.video !== null) {\n              event.tracks.push({\n                timelineStartInfo: {\n                  baseMediaDecodeTime: 0\n                },\n                id: +programMapTable.video,\n                codec: 'avc',\n                type: 'video'\n              });\n            }\n            if (programMapTable.audio !== null) {\n              event.tracks.push({\n                timelineStartInfo: {\n                  baseMediaDecodeTime: 0\n                },\n                id: +programMapTable.audio,\n                codec: 'adts',\n                type: 'audio'\n              });\n            }\n\n            self.trigger('data', event);\n          }\n        })[data.type]();\n      };\n\n      /**\n       * Flush any remaining input. Video PES packets may be of variable\n       * length. Normally, the start of a new video packet can trigger the\n       * finalization of the previous packet. That is not possible if no\n       * more video is forthcoming, however. In that case, some other\n       * mechanism (like the end of the file) has to be employed. When it is\n       * clear that no additional data is forthcoming, calling this method\n       * will flush the buffered packets.\n       */\n      this.flush = function () {\n        // !!THIS ORDER IS IMPORTANT!!\n        // video first then audio\n        flushStream(video, 'video');\n        flushStream(audio, 'audio');\n        flushStream(timedMetadata, 'timed-metadata');\n        this.trigger('done');\n      };\n    };\n    _ElementaryStream.prototype = new stream();\n\n    var m2ts = {\n      PAT_PID: 0x0000,\n      MP2T_PACKET_LENGTH: MP2T_PACKET_LENGTH,\n      TransportPacketStream: _TransportPacketStream,\n      TransportParseStream: _TransportParseStream,\n      ElementaryStream: _ElementaryStream,\n      TimestampRolloverStream: TimestampRolloverStream$1,\n      CaptionStream: captionStream.CaptionStream,\n      Cea608Stream: captionStream.Cea608Stream,\n      MetadataStream: metadataStream\n    };\n\n    for (var type in streamTypes) {\n      if (streamTypes.hasOwnProperty(type)) {\n        m2ts[type] = streamTypes[type];\n      }\n    }\n\n    var m2ts_1 = m2ts;\n\n    var _AdtsStream;\n\n    var ADTS_SAMPLING_FREQUENCIES = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350];\n\n    /*\n     * Accepts a ElementaryStream and emits data events with parsed\n     * AAC Audio Frames of the individual packets. Input audio in ADTS\n     * format is unpacked and re-emitted as AAC frames.\n     *\n     * @see http://wiki.multimedia.cx/index.php?title=ADTS\n     * @see http://wiki.multimedia.cx/?title=Understanding_AAC\n     */\n    _AdtsStream = function AdtsStream() {\n      var buffer;\n\n      _AdtsStream.prototype.init.call(this);\n\n      this.push = function (packet) {\n        var i = 0,\n            frameNum = 0,\n            frameLength,\n            protectionSkipBytes,\n            frameEnd,\n            oldBuffer,\n            sampleCount,\n            adtsFrameDuration;\n\n        if (packet.type !== 'audio') {\n          // ignore non-audio data\n          return;\n        }\n\n        // Prepend any data in the buffer to the input data so that we can parse\n        // aac frames the cross a PES packet boundary\n        if (buffer) {\n          oldBuffer = buffer;\n          buffer = new Uint8Array(oldBuffer.byteLength + packet.data.byteLength);\n          buffer.set(oldBuffer);\n          buffer.set(packet.data, oldBuffer.byteLength);\n        } else {\n          buffer = packet.data;\n        }\n\n        // unpack any ADTS frames which have been fully received\n        // for details on the ADTS header, see http://wiki.multimedia.cx/index.php?title=ADTS\n        while (i + 5 < buffer.length) {\n\n          // Loook for the start of an ADTS header..\n          if (buffer[i] !== 0xFF || (buffer[i + 1] & 0xF6) !== 0xF0) {\n            // If a valid header was not found,  jump one forward and attempt to\n            // find a valid ADTS header starting at the next byte\n            i++;\n            continue;\n          }\n\n          // The protection skip bit tells us if we have 2 bytes of CRC data at the\n          // end of the ADTS header\n          protectionSkipBytes = (~buffer[i + 1] & 0x01) * 2;\n\n          // Frame length is a 13 bit integer starting 16 bits from the\n          // end of the sync sequence\n          frameLength = (buffer[i + 3] & 0x03) << 11 | buffer[i + 4] << 3 | (buffer[i + 5] & 0xe0) >> 5;\n\n          sampleCount = ((buffer[i + 6] & 0x03) + 1) * 1024;\n          adtsFrameDuration = sampleCount * 90000 / ADTS_SAMPLING_FREQUENCIES[(buffer[i + 2] & 0x3c) >>> 2];\n\n          frameEnd = i + frameLength;\n\n          // If we don't have enough data to actually finish this ADTS frame, return\n          // and wait for more data\n          if (buffer.byteLength < frameEnd) {\n            return;\n          }\n\n          // Otherwise, deliver the complete AAC frame\n          this.trigger('data', {\n            pts: packet.pts + frameNum * adtsFrameDuration,\n            dts: packet.dts + frameNum * adtsFrameDuration,\n            sampleCount: sampleCount,\n            audioobjecttype: (buffer[i + 2] >>> 6 & 0x03) + 1,\n            channelcount: (buffer[i + 2] & 1) << 2 | (buffer[i + 3] & 0xc0) >>> 6,\n            samplerate: ADTS_SAMPLING_FREQUENCIES[(buffer[i + 2] & 0x3c) >>> 2],\n            samplingfrequencyindex: (buffer[i + 2] & 0x3c) >>> 2,\n            // assume ISO/IEC 14496-12 AudioSampleEntry default of 16\n            samplesize: 16,\n            data: buffer.subarray(i + 7 + protectionSkipBytes, frameEnd)\n          });\n\n          // If the buffer is empty, clear it and return\n          if (buffer.byteLength === frameEnd) {\n            buffer = undefined;\n            return;\n          }\n\n          frameNum++;\n\n          // Remove the finished frame from the buffer and start the process again\n          buffer = buffer.subarray(frameEnd);\n        }\n      };\n      this.flush = function () {\n        this.trigger('done');\n      };\n    };\n\n    _AdtsStream.prototype = new stream();\n\n    var adts = _AdtsStream;\n\n    var ExpGolomb;\n\n    /**\n     * Parser for exponential Golomb codes, a variable-bitwidth number encoding\n     * scheme used by h264.\n     */\n    ExpGolomb = function ExpGolomb(workingData) {\n      var\n      // the number of bytes left to examine in workingData\n      workingBytesAvailable = workingData.byteLength,\n\n\n      // the current word being examined\n      workingWord = 0,\n\n\n      // :uint\n\n      // the number of bits left to examine in the current word\n      workingBitsAvailable = 0; // :uint;\n\n      // ():uint\n      this.length = function () {\n        return 8 * workingBytesAvailable;\n      };\n\n      // ():uint\n      this.bitsAvailable = function () {\n        return 8 * workingBytesAvailable + workingBitsAvailable;\n      };\n\n      // ():void\n      this.loadWord = function () {\n        var position = workingData.byteLength - workingBytesAvailable,\n            workingBytes = new Uint8Array(4),\n            availableBytes = Math.min(4, workingBytesAvailable);\n\n        if (availableBytes === 0) {\n          throw new Error('no bytes available');\n        }\n\n        workingBytes.set(workingData.subarray(position, position + availableBytes));\n        workingWord = new DataView(workingBytes.buffer).getUint32(0);\n\n        // track the amount of workingData that has been processed\n        workingBitsAvailable = availableBytes * 8;\n        workingBytesAvailable -= availableBytes;\n      };\n\n      // (count:int):void\n      this.skipBits = function (count) {\n        var skipBytes; // :int\n        if (workingBitsAvailable > count) {\n          workingWord <<= count;\n          workingBitsAvailable -= count;\n        } else {\n          count -= workingBitsAvailable;\n          skipBytes = Math.floor(count / 8);\n\n          count -= skipBytes * 8;\n          workingBytesAvailable -= skipBytes;\n\n          this.loadWord();\n\n          workingWord <<= count;\n          workingBitsAvailable -= count;\n        }\n      };\n\n      // (size:int):uint\n      this.readBits = function (size) {\n        var bits = Math.min(workingBitsAvailable, size),\n\n\n        // :uint\n        valu = workingWord >>> 32 - bits; // :uint\n        // if size > 31, handle error\n        workingBitsAvailable -= bits;\n        if (workingBitsAvailable > 0) {\n          workingWord <<= bits;\n        } else if (workingBytesAvailable > 0) {\n          this.loadWord();\n        }\n\n        bits = size - bits;\n        if (bits > 0) {\n          return valu << bits | this.readBits(bits);\n        }\n        return valu;\n      };\n\n      // ():uint\n      this.skipLeadingZeros = function () {\n        var leadingZeroCount; // :uint\n        for (leadingZeroCount = 0; leadingZeroCount < workingBitsAvailable; ++leadingZeroCount) {\n          if ((workingWord & 0x80000000 >>> leadingZeroCount) !== 0) {\n            // the first bit of working word is 1\n            workingWord <<= leadingZeroCount;\n            workingBitsAvailable -= leadingZeroCount;\n            return leadingZeroCount;\n          }\n        }\n\n        // we exhausted workingWord and still have not found a 1\n        this.loadWord();\n        return leadingZeroCount + this.skipLeadingZeros();\n      };\n\n      // ():void\n      this.skipUnsignedExpGolomb = function () {\n        this.skipBits(1 + this.skipLeadingZeros());\n      };\n\n      // ():void\n      this.skipExpGolomb = function () {\n        this.skipBits(1 + this.skipLeadingZeros());\n      };\n\n      // ():uint\n      this.readUnsignedExpGolomb = function () {\n        var clz = this.skipLeadingZeros(); // :uint\n        return this.readBits(clz + 1) - 1;\n      };\n\n      // ():int\n      this.readExpGolomb = function () {\n        var valu = this.readUnsignedExpGolomb(); // :int\n        if (0x01 & valu) {\n          // the number is odd if the low order bit is set\n          return 1 + valu >>> 1; // add 1 to make it even, and divide by 2\n        }\n        return -1 * (valu >>> 1); // divide by two then make it negative\n      };\n\n      // Some convenience functions\n      // :Boolean\n      this.readBoolean = function () {\n        return this.readBits(1) === 1;\n      };\n\n      // ():int\n      this.readUnsignedByte = function () {\n        return this.readBits(8);\n      };\n\n      this.loadWord();\n    };\n\n    var expGolomb = ExpGolomb;\n\n    var _H264Stream, _NalByteStream;\n    var PROFILES_WITH_OPTIONAL_SPS_DATA;\n\n    /**\n     * Accepts a NAL unit byte stream and unpacks the embedded NAL units.\n     */\n    _NalByteStream = function NalByteStream() {\n      var syncPoint = 0,\n          i,\n          buffer;\n      _NalByteStream.prototype.init.call(this);\n\n      /*\n       * Scans a byte stream and triggers a data event with the NAL units found.\n       * @param {Object} data Event received from H264Stream\n       * @param {Uint8Array} data.data The h264 byte stream to be scanned\n       *\n       * @see H264Stream.push\n       */\n      this.push = function (data) {\n        var swapBuffer;\n\n        if (!buffer) {\n          buffer = data.data;\n        } else {\n          swapBuffer = new Uint8Array(buffer.byteLength + data.data.byteLength);\n          swapBuffer.set(buffer);\n          swapBuffer.set(data.data, buffer.byteLength);\n          buffer = swapBuffer;\n        }\n\n        // Rec. ITU-T H.264, Annex B\n        // scan for NAL unit boundaries\n\n        // a match looks like this:\n        // 0 0 1 .. NAL .. 0 0 1\n        // ^ sync point        ^ i\n        // or this:\n        // 0 0 1 .. NAL .. 0 0 0\n        // ^ sync point        ^ i\n\n        // advance the sync point to a NAL start, if necessary\n        for (; syncPoint < buffer.byteLength - 3; syncPoint++) {\n          if (buffer[syncPoint + 2] === 1) {\n            // the sync point is properly aligned\n            i = syncPoint + 5;\n            break;\n          }\n        }\n\n        while (i < buffer.byteLength) {\n          // look at the current byte to determine if we've hit the end of\n          // a NAL unit boundary\n          switch (buffer[i]) {\n            case 0:\n              // skip past non-sync sequences\n              if (buffer[i - 1] !== 0) {\n                i += 2;\n                break;\n              } else if (buffer[i - 2] !== 0) {\n                i++;\n                break;\n              }\n\n              // deliver the NAL unit if it isn't empty\n              if (syncPoint + 3 !== i - 2) {\n                this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));\n              }\n\n              // drop trailing zeroes\n              do {\n                i++;\n              } while (buffer[i] !== 1 && i < buffer.length);\n              syncPoint = i - 2;\n              i += 3;\n              break;\n            case 1:\n              // skip past non-sync sequences\n              if (buffer[i - 1] !== 0 || buffer[i - 2] !== 0) {\n                i += 3;\n                break;\n              }\n\n              // deliver the NAL unit\n              this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));\n              syncPoint = i - 2;\n              i += 3;\n              break;\n            default:\n              // the current byte isn't a one or zero, so it cannot be part\n              // of a sync sequence\n              i += 3;\n              break;\n          }\n        }\n        // filter out the NAL units that were delivered\n        buffer = buffer.subarray(syncPoint);\n        i -= syncPoint;\n        syncPoint = 0;\n      };\n\n      this.flush = function () {\n        // deliver the last buffered NAL unit\n        if (buffer && buffer.byteLength > 3) {\n          this.trigger('data', buffer.subarray(syncPoint + 3));\n        }\n        // reset the stream state\n        buffer = null;\n        syncPoint = 0;\n        this.trigger('done');\n      };\n    };\n    _NalByteStream.prototype = new stream();\n\n    // values of profile_idc that indicate additional fields are included in the SPS\n    // see Recommendation ITU-T H.264 (4/2013),\n    // 7.3.2.1.1 Sequence parameter set data syntax\n    PROFILES_WITH_OPTIONAL_SPS_DATA = {\n      100: true,\n      110: true,\n      122: true,\n      244: true,\n      44: true,\n      83: true,\n      86: true,\n      118: true,\n      128: true,\n      138: true,\n      139: true,\n      134: true\n    };\n\n    /**\n     * Accepts input from a ElementaryStream and produces H.264 NAL unit data\n     * events.\n     */\n    _H264Stream = function H264Stream() {\n      var nalByteStream = new _NalByteStream(),\n          self,\n          trackId,\n          currentPts,\n          currentDts,\n          discardEmulationPreventionBytes,\n          readSequenceParameterSet,\n          skipScalingList;\n\n      _H264Stream.prototype.init.call(this);\n      self = this;\n\n      /*\n       * Pushes a packet from a stream onto the NalByteStream\n       *\n       * @param {Object} packet - A packet received from a stream\n       * @param {Uint8Array} packet.data - The raw bytes of the packet\n       * @param {Number} packet.dts - Decode timestamp of the packet\n       * @param {Number} packet.pts - Presentation timestamp of the packet\n       * @param {Number} packet.trackId - The id of the h264 track this packet came from\n       * @param {('video'|'audio')} packet.type - The type of packet\n       *\n       */\n      this.push = function (packet) {\n        if (packet.type !== 'video') {\n          return;\n        }\n        trackId = packet.trackId;\n        currentPts = packet.pts;\n        currentDts = packet.dts;\n\n        nalByteStream.push(packet);\n      };\n\n      /*\n       * Identify NAL unit types and pass on the NALU, trackId, presentation and decode timestamps\n       * for the NALUs to the next stream component.\n       * Also, preprocess caption and sequence parameter NALUs.\n       *\n       * @param {Uint8Array} data - A NAL unit identified by `NalByteStream.push`\n       * @see NalByteStream.push\n       */\n      nalByteStream.on('data', function (data) {\n        var event = {\n          trackId: trackId,\n          pts: currentPts,\n          dts: currentDts,\n          data: data\n        };\n\n        switch (data[0] & 0x1f) {\n          case 0x05:\n            event.nalUnitType = 'slice_layer_without_partitioning_rbsp_idr';\n            break;\n          case 0x06:\n            event.nalUnitType = 'sei_rbsp';\n            event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));\n            break;\n          case 0x07:\n            event.nalUnitType = 'seq_parameter_set_rbsp';\n            event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));\n            event.config = readSequenceParameterSet(event.escapedRBSP);\n            break;\n          case 0x08:\n            event.nalUnitType = 'pic_parameter_set_rbsp';\n            break;\n          case 0x09:\n            event.nalUnitType = 'access_unit_delimiter_rbsp';\n            break;\n\n          default:\n            break;\n        }\n        // This triggers data on the H264Stream\n        self.trigger('data', event);\n      });\n      nalByteStream.on('done', function () {\n        self.trigger('done');\n      });\n\n      this.flush = function () {\n        nalByteStream.flush();\n      };\n\n      /**\n       * Advance the ExpGolomb decoder past a scaling list. The scaling\n       * list is optionally transmitted as part of a sequence parameter\n       * set and is not relevant to transmuxing.\n       * @param count {number} the number of entries in this scaling list\n       * @param expGolombDecoder {object} an ExpGolomb pointed to the\n       * start of a scaling list\n       * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1\n       */\n      skipScalingList = function skipScalingList(count, expGolombDecoder) {\n        var lastScale = 8,\n            nextScale = 8,\n            j,\n            deltaScale;\n\n        for (j = 0; j < count; j++) {\n          if (nextScale !== 0) {\n            deltaScale = expGolombDecoder.readExpGolomb();\n            nextScale = (lastScale + deltaScale + 256) % 256;\n          }\n\n          lastScale = nextScale === 0 ? lastScale : nextScale;\n        }\n      };\n\n      /**\n       * Expunge any \"Emulation Prevention\" bytes from a \"Raw Byte\n       * Sequence Payload\"\n       * @param data {Uint8Array} the bytes of a RBSP from a NAL\n       * unit\n       * @return {Uint8Array} the RBSP without any Emulation\n       * Prevention Bytes\n       */\n      discardEmulationPreventionBytes = function discardEmulationPreventionBytes(data) {\n        var length = data.byteLength,\n            emulationPreventionBytesPositions = [],\n            i = 1,\n            newLength,\n            newData;\n\n        // Find all `Emulation Prevention Bytes`\n        while (i < length - 2) {\n          if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {\n            emulationPreventionBytesPositions.push(i + 2);\n            i += 2;\n          } else {\n            i++;\n          }\n        }\n\n        // If no Emulation Prevention Bytes were found just return the original\n        // array\n        if (emulationPreventionBytesPositions.length === 0) {\n          return data;\n        }\n\n        // Create a new array to hold the NAL unit data\n        newLength = length - emulationPreventionBytesPositions.length;\n        newData = new Uint8Array(newLength);\n        var sourceIndex = 0;\n\n        for (i = 0; i < newLength; sourceIndex++, i++) {\n          if (sourceIndex === emulationPreventionBytesPositions[0]) {\n            // Skip this byte\n            sourceIndex++;\n            // Remove this position index\n            emulationPreventionBytesPositions.shift();\n          }\n          newData[i] = data[sourceIndex];\n        }\n\n        return newData;\n      };\n\n      /**\n       * Read a sequence parameter set and return some interesting video\n       * properties. A sequence parameter set is the H264 metadata that\n       * describes the properties of upcoming video frames.\n       * @param data {Uint8Array} the bytes of a sequence parameter set\n       * @return {object} an object with configuration parsed from the\n       * sequence parameter set, including the dimensions of the\n       * associated video frames.\n       */\n      readSequenceParameterSet = function readSequenceParameterSet(data) {\n        var frameCropLeftOffset = 0,\n            frameCropRightOffset = 0,\n            frameCropTopOffset = 0,\n            frameCropBottomOffset = 0,\n            sarScale = 1,\n            expGolombDecoder,\n            profileIdc,\n            levelIdc,\n            profileCompatibility,\n            chromaFormatIdc,\n            picOrderCntType,\n            numRefFramesInPicOrderCntCycle,\n            picWidthInMbsMinus1,\n            picHeightInMapUnitsMinus1,\n            frameMbsOnlyFlag,\n            scalingListCount,\n            sarRatio,\n            aspectRatioIdc,\n            i;\n\n        expGolombDecoder = new expGolomb(data);\n        profileIdc = expGolombDecoder.readUnsignedByte(); // profile_idc\n        profileCompatibility = expGolombDecoder.readUnsignedByte(); // constraint_set[0-5]_flag\n        levelIdc = expGolombDecoder.readUnsignedByte(); // level_idc u(8)\n        expGolombDecoder.skipUnsignedExpGolomb(); // seq_parameter_set_id\n\n        // some profiles have more optional data we don't need\n        if (PROFILES_WITH_OPTIONAL_SPS_DATA[profileIdc]) {\n          chromaFormatIdc = expGolombDecoder.readUnsignedExpGolomb();\n          if (chromaFormatIdc === 3) {\n            expGolombDecoder.skipBits(1); // separate_colour_plane_flag\n          }\n          expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_luma_minus8\n          expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_chroma_minus8\n          expGolombDecoder.skipBits(1); // qpprime_y_zero_transform_bypass_flag\n          if (expGolombDecoder.readBoolean()) {\n            // seq_scaling_matrix_present_flag\n            scalingListCount = chromaFormatIdc !== 3 ? 8 : 12;\n            for (i = 0; i < scalingListCount; i++) {\n              if (expGolombDecoder.readBoolean()) {\n                // seq_scaling_list_present_flag[ i ]\n                if (i < 6) {\n                  skipScalingList(16, expGolombDecoder);\n                } else {\n                  skipScalingList(64, expGolombDecoder);\n                }\n              }\n            }\n          }\n        }\n\n        expGolombDecoder.skipUnsignedExpGolomb(); // log2_max_frame_num_minus4\n        picOrderCntType = expGolombDecoder.readUnsignedExpGolomb();\n\n        if (picOrderCntType === 0) {\n          expGolombDecoder.readUnsignedExpGolomb(); // log2_max_pic_order_cnt_lsb_minus4\n        } else if (picOrderCntType === 1) {\n          expGolombDecoder.skipBits(1); // delta_pic_order_always_zero_flag\n          expGolombDecoder.skipExpGolomb(); // offset_for_non_ref_pic\n          expGolombDecoder.skipExpGolomb(); // offset_for_top_to_bottom_field\n          numRefFramesInPicOrderCntCycle = expGolombDecoder.readUnsignedExpGolomb();\n          for (i = 0; i < numRefFramesInPicOrderCntCycle; i++) {\n            expGolombDecoder.skipExpGolomb(); // offset_for_ref_frame[ i ]\n          }\n        }\n\n        expGolombDecoder.skipUnsignedExpGolomb(); // max_num_ref_frames\n        expGolombDecoder.skipBits(1); // gaps_in_frame_num_value_allowed_flag\n\n        picWidthInMbsMinus1 = expGolombDecoder.readUnsignedExpGolomb();\n        picHeightInMapUnitsMinus1 = expGolombDecoder.readUnsignedExpGolomb();\n\n        frameMbsOnlyFlag = expGolombDecoder.readBits(1);\n        if (frameMbsOnlyFlag === 0) {\n          expGolombDecoder.skipBits(1); // mb_adaptive_frame_field_flag\n        }\n\n        expGolombDecoder.skipBits(1); // direct_8x8_inference_flag\n        if (expGolombDecoder.readBoolean()) {\n          // frame_cropping_flag\n          frameCropLeftOffset = expGolombDecoder.readUnsignedExpGolomb();\n          frameCropRightOffset = expGolombDecoder.readUnsignedExpGolomb();\n          frameCropTopOffset = expGolombDecoder.readUnsignedExpGolomb();\n          frameCropBottomOffset = expGolombDecoder.readUnsignedExpGolomb();\n        }\n        if (expGolombDecoder.readBoolean()) {\n          // vui_parameters_present_flag\n          if (expGolombDecoder.readBoolean()) {\n            // aspect_ratio_info_present_flag\n            aspectRatioIdc = expGolombDecoder.readUnsignedByte();\n            switch (aspectRatioIdc) {\n              case 1:\n                sarRatio = [1, 1];break;\n              case 2:\n                sarRatio = [12, 11];break;\n              case 3:\n                sarRatio = [10, 11];break;\n              case 4:\n                sarRatio = [16, 11];break;\n              case 5:\n                sarRatio = [40, 33];break;\n              case 6:\n                sarRatio = [24, 11];break;\n              case 7:\n                sarRatio = [20, 11];break;\n              case 8:\n                sarRatio = [32, 11];break;\n              case 9:\n                sarRatio = [80, 33];break;\n              case 10:\n                sarRatio = [18, 11];break;\n              case 11:\n                sarRatio = [15, 11];break;\n              case 12:\n                sarRatio = [64, 33];break;\n              case 13:\n                sarRatio = [160, 99];break;\n              case 14:\n                sarRatio = [4, 3];break;\n              case 15:\n                sarRatio = [3, 2];break;\n              case 16:\n                sarRatio = [2, 1];break;\n              case 255:\n                {\n                  sarRatio = [expGolombDecoder.readUnsignedByte() << 8 | expGolombDecoder.readUnsignedByte(), expGolombDecoder.readUnsignedByte() << 8 | expGolombDecoder.readUnsignedByte()];\n                  break;\n                }\n            }\n            if (sarRatio) {\n              sarScale = sarRatio[0] / sarRatio[1];\n            }\n          }\n        }\n        return {\n          profileIdc: profileIdc,\n          levelIdc: levelIdc,\n          profileCompatibility: profileCompatibility,\n          width: Math.ceil(((picWidthInMbsMinus1 + 1) * 16 - frameCropLeftOffset * 2 - frameCropRightOffset * 2) * sarScale),\n          height: (2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16 - frameCropTopOffset * 2 - frameCropBottomOffset * 2\n        };\n      };\n    };\n    _H264Stream.prototype = new stream();\n\n    var h264 = {\n      H264Stream: _H264Stream,\n      NalByteStream: _NalByteStream\n    };\n\n    // Constants\n    var _AacStream;\n\n    /**\n     * Splits an incoming stream of binary data into ADTS and ID3 Frames.\n     */\n\n    _AacStream = function AacStream() {\n      var everything = new Uint8Array(),\n          timeStamp = 0;\n\n      _AacStream.prototype.init.call(this);\n\n      this.setTimestamp = function (timestamp) {\n        timeStamp = timestamp;\n      };\n\n      this.parseId3TagSize = function (header, byteIndex) {\n        var returnSize = header[byteIndex + 6] << 21 | header[byteIndex + 7] << 14 | header[byteIndex + 8] << 7 | header[byteIndex + 9],\n            flags = header[byteIndex + 5],\n            footerPresent = (flags & 16) >> 4;\n\n        if (footerPresent) {\n          return returnSize + 20;\n        }\n        return returnSize + 10;\n      };\n\n      this.parseAdtsSize = function (header, byteIndex) {\n        var lowThree = (header[byteIndex + 5] & 0xE0) >> 5,\n            middle = header[byteIndex + 4] << 3,\n            highTwo = header[byteIndex + 3] & 0x3 << 11;\n\n        return highTwo | middle | lowThree;\n      };\n\n      this.push = function (bytes) {\n        var frameSize = 0,\n            byteIndex = 0,\n            bytesLeft,\n            chunk,\n            packet,\n            tempLength;\n\n        // If there are bytes remaining from the last segment, prepend them to the\n        // bytes that were pushed in\n        if (everything.length) {\n          tempLength = everything.length;\n          everything = new Uint8Array(bytes.byteLength + tempLength);\n          everything.set(everything.subarray(0, tempLength));\n          everything.set(bytes, tempLength);\n        } else {\n          everything = bytes;\n        }\n\n        while (everything.length - byteIndex >= 3) {\n          if (everything[byteIndex] === 'I'.charCodeAt(0) && everything[byteIndex + 1] === 'D'.charCodeAt(0) && everything[byteIndex + 2] === '3'.charCodeAt(0)) {\n\n            // Exit early because we don't have enough to parse\n            // the ID3 tag header\n            if (everything.length - byteIndex < 10) {\n              break;\n            }\n\n            // check framesize\n            frameSize = this.parseId3TagSize(everything, byteIndex);\n\n            // Exit early if we don't have enough in the buffer\n            // to emit a full packet\n            if (frameSize > everything.length) {\n              break;\n            }\n            chunk = {\n              type: 'timed-metadata',\n              data: everything.subarray(byteIndex, byteIndex + frameSize)\n            };\n            this.trigger('data', chunk);\n            byteIndex += frameSize;\n            continue;\n          } else if (everything[byteIndex] & 0xff === 0xff && (everything[byteIndex + 1] & 0xf0) === 0xf0) {\n\n            // Exit early because we don't have enough to parse\n            // the ADTS frame header\n            if (everything.length - byteIndex < 7) {\n              break;\n            }\n\n            frameSize = this.parseAdtsSize(everything, byteIndex);\n\n            // Exit early if we don't have enough in the buffer\n            // to emit a full packet\n            if (frameSize > everything.length) {\n              break;\n            }\n\n            packet = {\n              type: 'audio',\n              data: everything.subarray(byteIndex, byteIndex + frameSize),\n              pts: timeStamp,\n              dts: timeStamp\n            };\n            this.trigger('data', packet);\n            byteIndex += frameSize;\n            continue;\n          }\n          byteIndex++;\n        }\n        bytesLeft = everything.length - byteIndex;\n\n        if (bytesLeft > 0) {\n          everything = everything.subarray(byteIndex);\n        } else {\n          everything = new Uint8Array();\n        }\n      };\n    };\n\n    _AacStream.prototype = new stream();\n\n    var aac = _AacStream;\n\n    var highPrefix = [33, 16, 5, 32, 164, 27];\n    var lowPrefix = [33, 65, 108, 84, 1, 2, 4, 8, 168, 2, 4, 8, 17, 191, 252];\n    var zeroFill = function zeroFill(count) {\n      var a = [];\n      while (count--) {\n        a.push(0);\n      }\n      return a;\n    };\n\n    var makeTable = function makeTable(metaTable) {\n      return Object.keys(metaTable).reduce(function (obj, key) {\n        obj[key] = new Uint8Array(metaTable[key].reduce(function (arr, part) {\n          return arr.concat(part);\n        }, []));\n        return obj;\n      }, {});\n    };\n\n    // Frames-of-silence to use for filling in missing AAC frames\n    var coneOfSilence = {\n      96000: [highPrefix, [227, 64], zeroFill(154), [56]],\n      88200: [highPrefix, [231], zeroFill(170), [56]],\n      64000: [highPrefix, [248, 192], zeroFill(240), [56]],\n      48000: [highPrefix, [255, 192], zeroFill(268), [55, 148, 128], zeroFill(54), [112]],\n      44100: [highPrefix, [255, 192], zeroFill(268), [55, 163, 128], zeroFill(84), [112]],\n      32000: [highPrefix, [255, 192], zeroFill(268), [55, 234], zeroFill(226), [112]],\n      24000: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 112], zeroFill(126), [224]],\n      16000: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 255], zeroFill(269), [223, 108], zeroFill(195), [1, 192]],\n      12000: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 253, 128], zeroFill(259), [56]],\n      11025: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 255, 192], zeroFill(268), [55, 175, 128], zeroFill(108), [112]],\n      8000: [lowPrefix, zeroFill(268), [3, 121, 16], zeroFill(47), [7]]\n    };\n\n    var silence = makeTable(coneOfSilence);\n\n    var ONE_SECOND_IN_TS$1 = 90000,\n\n\n    // 90kHz clock\n    secondsToVideoTs,\n        secondsToAudioTs,\n        videoTsToSeconds,\n        audioTsToSeconds,\n        audioTsToVideoTs,\n        videoTsToAudioTs;\n\n    secondsToVideoTs = function secondsToVideoTs(seconds) {\n      return seconds * ONE_SECOND_IN_TS$1;\n    };\n\n    secondsToAudioTs = function secondsToAudioTs(seconds, sampleRate) {\n      return seconds * sampleRate;\n    };\n\n    videoTsToSeconds = function videoTsToSeconds(timestamp) {\n      return timestamp / ONE_SECOND_IN_TS$1;\n    };\n\n    audioTsToSeconds = function audioTsToSeconds(timestamp, sampleRate) {\n      return timestamp / sampleRate;\n    };\n\n    audioTsToVideoTs = function audioTsToVideoTs(timestamp, sampleRate) {\n      return secondsToVideoTs(audioTsToSeconds(timestamp, sampleRate));\n    };\n\n    videoTsToAudioTs = function videoTsToAudioTs(timestamp, sampleRate) {\n      return secondsToAudioTs(videoTsToSeconds(timestamp), sampleRate);\n    };\n\n    var clock = {\n      secondsToVideoTs: secondsToVideoTs,\n      secondsToAudioTs: secondsToAudioTs,\n      videoTsToSeconds: videoTsToSeconds,\n      audioTsToSeconds: audioTsToSeconds,\n      audioTsToVideoTs: audioTsToVideoTs,\n      videoTsToAudioTs: videoTsToAudioTs\n    };\n\n    var H264Stream = h264.H264Stream;\n\n    // constants\n    var AUDIO_PROPERTIES = ['audioobjecttype', 'channelcount', 'samplerate', 'samplingfrequencyindex', 'samplesize'];\n\n    var VIDEO_PROPERTIES = ['width', 'height', 'profileIdc', 'levelIdc', 'profileCompatibility'];\n\n    var ONE_SECOND_IN_TS$2 = 90000; // 90kHz clock\n\n    // object types\n    var _VideoSegmentStream, _AudioSegmentStream, _Transmuxer, _CoalesceStream;\n\n    // Helper functions\n    var isLikelyAacData, arrayEquals, sumFrameByteLengths;\n\n    isLikelyAacData = function isLikelyAacData(data) {\n      if (data[0] === 'I'.charCodeAt(0) && data[1] === 'D'.charCodeAt(0) && data[2] === '3'.charCodeAt(0)) {\n        return true;\n      }\n      return false;\n    };\n\n    /**\n     * Compare two arrays (even typed) for same-ness\n     */\n    arrayEquals = function arrayEquals(a, b) {\n      var i;\n\n      if (a.length !== b.length) {\n        return false;\n      }\n\n      // compare the value of each element in the array\n      for (i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    /**\n     * Sum the `byteLength` properties of the data in each AAC frame\n     */\n    sumFrameByteLengths = function sumFrameByteLengths(array) {\n      var i,\n          currentObj,\n          sum = 0;\n\n      // sum the byteLength's all each nal unit in the frame\n      for (i = 0; i < array.length; i++) {\n        currentObj = array[i];\n        sum += currentObj.data.byteLength;\n      }\n\n      return sum;\n    };\n\n    /**\n     * Constructs a single-track, ISO BMFF media segment from AAC data\n     * events. The output of this stream can be fed to a SourceBuffer\n     * configured with a suitable initialization segment.\n     * @param track {object} track metadata configuration\n     * @param options {object} transmuxer options object\n     * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps\n     *        in the source; false to adjust the first segment to start at 0.\n     */\n    _AudioSegmentStream = function AudioSegmentStream(track, options) {\n      var adtsFrames = [],\n          sequenceNumber = 0,\n          earliestAllowedDts = 0,\n          audioAppendStartTs = 0,\n          videoBaseMediaDecodeTime = Infinity;\n\n      options = options || {};\n\n      _AudioSegmentStream.prototype.init.call(this);\n\n      this.push = function (data) {\n        trackDecodeInfo.collectDtsInfo(track, data);\n\n        if (track) {\n          AUDIO_PROPERTIES.forEach(function (prop) {\n            track[prop] = data[prop];\n          });\n        }\n\n        // buffer audio data until end() is called\n        adtsFrames.push(data);\n      };\n\n      this.setEarliestDts = function (earliestDts) {\n        earliestAllowedDts = earliestDts - track.timelineStartInfo.baseMediaDecodeTime;\n      };\n\n      this.setVideoBaseMediaDecodeTime = function (baseMediaDecodeTime) {\n        videoBaseMediaDecodeTime = baseMediaDecodeTime;\n      };\n\n      this.setAudioAppendStart = function (timestamp) {\n        audioAppendStartTs = timestamp;\n      };\n\n      this.flush = function () {\n        var frames, moof, mdat, boxes;\n\n        // return early if no audio data has been observed\n        if (adtsFrames.length === 0) {\n          this.trigger('done', 'AudioSegmentStream');\n          return;\n        }\n\n        frames = this.trimAdtsFramesByEarliestDts_(adtsFrames);\n        track.baseMediaDecodeTime = trackDecodeInfo.calculateTrackBaseMediaDecodeTime(track, options.keepOriginalTimestamps);\n\n        this.prefixWithSilence_(track, frames);\n\n        // we have to build the index from byte locations to\n        // samples (that is, adts frames) in the audio data\n        track.samples = this.generateSampleTable_(frames);\n\n        // concatenate the audio data to constuct the mdat\n        mdat = mp4Generator.mdat(this.concatenateFrameData_(frames));\n\n        adtsFrames = [];\n\n        moof = mp4Generator.moof(sequenceNumber, [track]);\n        boxes = new Uint8Array(moof.byteLength + mdat.byteLength);\n\n        // bump the sequence number for next time\n        sequenceNumber++;\n\n        boxes.set(moof);\n        boxes.set(mdat, moof.byteLength);\n\n        trackDecodeInfo.clearDtsInfo(track);\n\n        this.trigger('data', { track: track, boxes: boxes });\n        this.trigger('done', 'AudioSegmentStream');\n      };\n\n      // Possibly pad (prefix) the audio track with silence if appending this track\n      // would lead to the introduction of a gap in the audio buffer\n      this.prefixWithSilence_ = function (track, frames) {\n        var baseMediaDecodeTimeTs,\n            frameDuration = 0,\n            audioGapDuration = 0,\n            audioFillFrameCount = 0,\n            audioFillDuration = 0,\n            silentFrame,\n            i;\n\n        if (!frames.length) {\n          return;\n        }\n\n        baseMediaDecodeTimeTs = clock.audioTsToVideoTs(track.baseMediaDecodeTime, track.samplerate);\n        // determine frame clock duration based on sample rate, round up to avoid overfills\n        frameDuration = Math.ceil(ONE_SECOND_IN_TS$2 / (track.samplerate / 1024));\n\n        if (audioAppendStartTs && videoBaseMediaDecodeTime) {\n          // insert the shortest possible amount (audio gap or audio to video gap)\n          audioGapDuration = baseMediaDecodeTimeTs - Math.max(audioAppendStartTs, videoBaseMediaDecodeTime);\n          // number of full frames in the audio gap\n          audioFillFrameCount = Math.floor(audioGapDuration / frameDuration);\n          audioFillDuration = audioFillFrameCount * frameDuration;\n        }\n\n        // don't attempt to fill gaps smaller than a single frame or larger\n        // than a half second\n        if (audioFillFrameCount < 1 || audioFillDuration > ONE_SECOND_IN_TS$2 / 2) {\n          return;\n        }\n\n        silentFrame = silence[track.samplerate];\n\n        if (!silentFrame) {\n          // we don't have a silent frame pregenerated for the sample rate, so use a frame\n          // from the content instead\n          silentFrame = frames[0].data;\n        }\n\n        for (i = 0; i < audioFillFrameCount; i++) {\n          frames.splice(i, 0, {\n            data: silentFrame\n          });\n        }\n\n        track.baseMediaDecodeTime -= Math.floor(clock.videoTsToAudioTs(audioFillDuration, track.samplerate));\n      };\n\n      // If the audio segment extends before the earliest allowed dts\n      // value, remove AAC frames until starts at or after the earliest\n      // allowed DTS so that we don't end up with a negative baseMedia-\n      // DecodeTime for the audio track\n      this.trimAdtsFramesByEarliestDts_ = function (adtsFrames) {\n        if (track.minSegmentDts >= earliestAllowedDts) {\n          return adtsFrames;\n        }\n\n        // We will need to recalculate the earliest segment Dts\n        track.minSegmentDts = Infinity;\n\n        return adtsFrames.filter(function (currentFrame) {\n          // If this is an allowed frame, keep it and record it's Dts\n          if (currentFrame.dts >= earliestAllowedDts) {\n            track.minSegmentDts = Math.min(track.minSegmentDts, currentFrame.dts);\n            track.minSegmentPts = track.minSegmentDts;\n            return true;\n          }\n          // Otherwise, discard it\n          return false;\n        });\n      };\n\n      // generate the track's raw mdat data from an array of frames\n      this.generateSampleTable_ = function (frames) {\n        var i,\n            currentFrame,\n            samples = [];\n\n        for (i = 0; i < frames.length; i++) {\n          currentFrame = frames[i];\n          samples.push({\n            size: currentFrame.data.byteLength,\n            duration: 1024 // For AAC audio, all samples contain 1024 samples\n          });\n        }\n        return samples;\n      };\n\n      // generate the track's sample table from an array of frames\n      this.concatenateFrameData_ = function (frames) {\n        var i,\n            currentFrame,\n            dataOffset = 0,\n            data = new Uint8Array(sumFrameByteLengths(frames));\n\n        for (i = 0; i < frames.length; i++) {\n          currentFrame = frames[i];\n\n          data.set(currentFrame.data, dataOffset);\n          dataOffset += currentFrame.data.byteLength;\n        }\n        return data;\n      };\n    };\n\n    _AudioSegmentStream.prototype = new stream();\n\n    /**\n     * Constructs a single-track, ISO BMFF media segment from H264 data\n     * events. The output of this stream can be fed to a SourceBuffer\n     * configured with a suitable initialization segment.\n     * @param track {object} track metadata configuration\n     * @param options {object} transmuxer options object\n     * @param options.alignGopsAtEnd {boolean} If true, start from the end of the\n     *        gopsToAlignWith list when attempting to align gop pts\n     * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps\n     *        in the source; false to adjust the first segment to start at 0.\n     */\n    _VideoSegmentStream = function VideoSegmentStream(track, options) {\n      var sequenceNumber = 0,\n          nalUnits = [],\n          gopsToAlignWith = [],\n          config,\n          pps;\n\n      options = options || {};\n\n      _VideoSegmentStream.prototype.init.call(this);\n\n      delete track.minPTS;\n\n      this.gopCache_ = [];\n\n      /**\n        * Constructs a ISO BMFF segment given H264 nalUnits\n        * @param {Object} nalUnit A data event representing a nalUnit\n        * @param {String} nalUnit.nalUnitType\n        * @param {Object} nalUnit.config Properties for a mp4 track\n        * @param {Uint8Array} nalUnit.data The nalUnit bytes\n        * @see lib/codecs/h264.js\n       **/\n      this.push = function (nalUnit) {\n        trackDecodeInfo.collectDtsInfo(track, nalUnit);\n\n        // record the track config\n        if (nalUnit.nalUnitType === 'seq_parameter_set_rbsp' && !config) {\n          config = nalUnit.config;\n          track.sps = [nalUnit.data];\n\n          VIDEO_PROPERTIES.forEach(function (prop) {\n            track[prop] = config[prop];\n          }, this);\n        }\n\n        if (nalUnit.nalUnitType === 'pic_parameter_set_rbsp' && !pps) {\n          pps = nalUnit.data;\n          track.pps = [nalUnit.data];\n        }\n\n        // buffer video until flush() is called\n        nalUnits.push(nalUnit);\n      };\n\n      /**\n        * Pass constructed ISO BMFF track and boxes on to the\n        * next stream in the pipeline\n       **/\n      this.flush = function () {\n        var frames, gopForFusion, gops, moof, mdat, boxes;\n\n        // Throw away nalUnits at the start of the byte stream until\n        // we find the first AUD\n        while (nalUnits.length) {\n          if (nalUnits[0].nalUnitType === 'access_unit_delimiter_rbsp') {\n            break;\n          }\n          nalUnits.shift();\n        }\n\n        // Return early if no video data has been observed\n        if (nalUnits.length === 0) {\n          this.resetStream_();\n          this.trigger('done', 'VideoSegmentStream');\n          return;\n        }\n\n        // Organize the raw nal-units into arrays that represent\n        // higher-level constructs such as frames and gops\n        // (group-of-pictures)\n        frames = frameUtils.groupNalsIntoFrames(nalUnits);\n        gops = frameUtils.groupFramesIntoGops(frames);\n\n        // If the first frame of this fragment is not a keyframe we have\n        // a problem since MSE (on Chrome) requires a leading keyframe.\n        //\n        // We have two approaches to repairing this situation:\n        // 1) GOP-FUSION:\n        //    This is where we keep track of the GOPS (group-of-pictures)\n        //    from previous fragments and attempt to find one that we can\n        //    prepend to the current fragment in order to create a valid\n        //    fragment.\n        // 2) KEYFRAME-PULLING:\n        //    Here we search for the first keyframe in the fragment and\n        //    throw away all the frames between the start of the fragment\n        //    and that keyframe. We then extend the duration and pull the\n        //    PTS of the keyframe forward so that it covers the time range\n        //    of the frames that were disposed of.\n        //\n        // #1 is far prefereable over #2 which can cause \"stuttering\" but\n        // requires more things to be just right.\n        if (!gops[0][0].keyFrame) {\n          // Search for a gop for fusion from our gopCache\n          gopForFusion = this.getGopForFusion_(nalUnits[0], track);\n\n          if (gopForFusion) {\n            gops.unshift(gopForFusion);\n            // Adjust Gops' metadata to account for the inclusion of the\n            // new gop at the beginning\n            gops.byteLength += gopForFusion.byteLength;\n            gops.nalCount += gopForFusion.nalCount;\n            gops.pts = gopForFusion.pts;\n            gops.dts = gopForFusion.dts;\n            gops.duration += gopForFusion.duration;\n          } else {\n            // If we didn't find a candidate gop fall back to keyframe-pulling\n            gops = frameUtils.extendFirstKeyFrame(gops);\n          }\n        }\n\n        // Trim gops to align with gopsToAlignWith\n        if (gopsToAlignWith.length) {\n          var alignedGops;\n\n          if (options.alignGopsAtEnd) {\n            alignedGops = this.alignGopsAtEnd_(gops);\n          } else {\n            alignedGops = this.alignGopsAtStart_(gops);\n          }\n\n          if (!alignedGops) {\n            // save all the nals in the last GOP into the gop cache\n            this.gopCache_.unshift({\n              gop: gops.pop(),\n              pps: track.pps,\n              sps: track.sps\n            });\n\n            // Keep a maximum of 6 GOPs in the cache\n            this.gopCache_.length = Math.min(6, this.gopCache_.length);\n\n            // Clear nalUnits\n            nalUnits = [];\n\n            // return early no gops can be aligned with desired gopsToAlignWith\n            this.resetStream_();\n            this.trigger('done', 'VideoSegmentStream');\n            return;\n          }\n\n          // Some gops were trimmed. clear dts info so minSegmentDts and pts are correct\n          // when recalculated before sending off to CoalesceStream\n          trackDecodeInfo.clearDtsInfo(track);\n\n          gops = alignedGops;\n        }\n\n        trackDecodeInfo.collectDtsInfo(track, gops);\n\n        // First, we have to build the index from byte locations to\n        // samples (that is, frames) in the video data\n        track.samples = frameUtils.generateSampleTable(gops);\n\n        // Concatenate the video data and construct the mdat\n        mdat = mp4Generator.mdat(frameUtils.concatenateNalData(gops));\n\n        track.baseMediaDecodeTime = trackDecodeInfo.calculateTrackBaseMediaDecodeTime(track, options.keepOriginalTimestamps);\n\n        this.trigger('processedGopsInfo', gops.map(function (gop) {\n          return {\n            pts: gop.pts,\n            dts: gop.dts,\n            byteLength: gop.byteLength\n          };\n        }));\n\n        // save all the nals in the last GOP into the gop cache\n        this.gopCache_.unshift({\n          gop: gops.pop(),\n          pps: track.pps,\n          sps: track.sps\n        });\n\n        // Keep a maximum of 6 GOPs in the cache\n        this.gopCache_.length = Math.min(6, this.gopCache_.length);\n\n        // Clear nalUnits\n        nalUnits = [];\n\n        this.trigger('baseMediaDecodeTime', track.baseMediaDecodeTime);\n        this.trigger('timelineStartInfo', track.timelineStartInfo);\n\n        moof = mp4Generator.moof(sequenceNumber, [track]);\n\n        // it would be great to allocate this array up front instead of\n        // throwing away hundreds of media segment fragments\n        boxes = new Uint8Array(moof.byteLength + mdat.byteLength);\n\n        // Bump the sequence number for next time\n        sequenceNumber++;\n\n        boxes.set(moof);\n        boxes.set(mdat, moof.byteLength);\n\n        this.trigger('data', { track: track, boxes: boxes });\n\n        this.resetStream_();\n\n        // Continue with the flush process now\n        this.trigger('done', 'VideoSegmentStream');\n      };\n\n      this.resetStream_ = function () {\n        trackDecodeInfo.clearDtsInfo(track);\n\n        // reset config and pps because they may differ across segments\n        // for instance, when we are rendition switching\n        config = undefined;\n        pps = undefined;\n      };\n\n      // Search for a candidate Gop for gop-fusion from the gop cache and\n      // return it or return null if no good candidate was found\n      this.getGopForFusion_ = function (nalUnit) {\n        var halfSecond = 45000,\n\n\n        // Half-a-second in a 90khz clock\n        allowableOverlap = 10000,\n\n\n        // About 3 frames @ 30fps\n        nearestDistance = Infinity,\n            dtsDistance,\n            nearestGopObj,\n            currentGop,\n            currentGopObj,\n            i;\n\n        // Search for the GOP nearest to the beginning of this nal unit\n        for (i = 0; i < this.gopCache_.length; i++) {\n          currentGopObj = this.gopCache_[i];\n          currentGop = currentGopObj.gop;\n\n          // Reject Gops with different SPS or PPS\n          if (!(track.pps && arrayEquals(track.pps[0], currentGopObj.pps[0])) || !(track.sps && arrayEquals(track.sps[0], currentGopObj.sps[0]))) {\n            continue;\n          }\n\n          // Reject Gops that would require a negative baseMediaDecodeTime\n          if (currentGop.dts < track.timelineStartInfo.dts) {\n            continue;\n          }\n\n          // The distance between the end of the gop and the start of the nalUnit\n          dtsDistance = nalUnit.dts - currentGop.dts - currentGop.duration;\n\n          // Only consider GOPS that start before the nal unit and end within\n          // a half-second of the nal unit\n          if (dtsDistance >= -allowableOverlap && dtsDistance <= halfSecond) {\n\n            // Always use the closest GOP we found if there is more than\n            // one candidate\n            if (!nearestGopObj || nearestDistance > dtsDistance) {\n              nearestGopObj = currentGopObj;\n              nearestDistance = dtsDistance;\n            }\n          }\n        }\n\n        if (nearestGopObj) {\n          return nearestGopObj.gop;\n        }\n        return null;\n      };\n\n      // trim gop list to the first gop found that has a matching pts with a gop in the list\n      // of gopsToAlignWith starting from the START of the list\n      this.alignGopsAtStart_ = function (gops) {\n        var alignIndex, gopIndex, align, gop, byteLength, nalCount, duration, alignedGops;\n\n        byteLength = gops.byteLength;\n        nalCount = gops.nalCount;\n        duration = gops.duration;\n        alignIndex = gopIndex = 0;\n\n        while (alignIndex < gopsToAlignWith.length && gopIndex < gops.length) {\n          align = gopsToAlignWith[alignIndex];\n          gop = gops[gopIndex];\n\n          if (align.pts === gop.pts) {\n            break;\n          }\n\n          if (gop.pts > align.pts) {\n            // this current gop starts after the current gop we want to align on, so increment\n            // align index\n            alignIndex++;\n            continue;\n          }\n\n          // current gop starts before the current gop we want to align on. so increment gop\n          // index\n          gopIndex++;\n          byteLength -= gop.byteLength;\n          nalCount -= gop.nalCount;\n          duration -= gop.duration;\n        }\n\n        if (gopIndex === 0) {\n          // no gops to trim\n          return gops;\n        }\n\n        if (gopIndex === gops.length) {\n          // all gops trimmed, skip appending all gops\n          return null;\n        }\n\n        alignedGops = gops.slice(gopIndex);\n        alignedGops.byteLength = byteLength;\n        alignedGops.duration = duration;\n        alignedGops.nalCount = nalCount;\n        alignedGops.pts = alignedGops[0].pts;\n        alignedGops.dts = alignedGops[0].dts;\n\n        return alignedGops;\n      };\n\n      // trim gop list to the first gop found that has a matching pts with a gop in the list\n      // of gopsToAlignWith starting from the END of the list\n      this.alignGopsAtEnd_ = function (gops) {\n        var alignIndex, gopIndex, align, gop, alignEndIndex, matchFound;\n\n        alignIndex = gopsToAlignWith.length - 1;\n        gopIndex = gops.length - 1;\n        alignEndIndex = null;\n        matchFound = false;\n\n        while (alignIndex >= 0 && gopIndex >= 0) {\n          align = gopsToAlignWith[alignIndex];\n          gop = gops[gopIndex];\n\n          if (align.pts === gop.pts) {\n            matchFound = true;\n            break;\n          }\n\n          if (align.pts > gop.pts) {\n            alignIndex--;\n            continue;\n          }\n\n          if (alignIndex === gopsToAlignWith.length - 1) {\n            // gop.pts is greater than the last alignment candidate. If no match is found\n            // by the end of this loop, we still want to append gops that come after this\n            // point\n            alignEndIndex = gopIndex;\n          }\n\n          gopIndex--;\n        }\n\n        if (!matchFound && alignEndIndex === null) {\n          return null;\n        }\n\n        var trimIndex;\n\n        if (matchFound) {\n          trimIndex = gopIndex;\n        } else {\n          trimIndex = alignEndIndex;\n        }\n\n        if (trimIndex === 0) {\n          return gops;\n        }\n\n        var alignedGops = gops.slice(trimIndex);\n        var metadata = alignedGops.reduce(function (total, gop) {\n          total.byteLength += gop.byteLength;\n          total.duration += gop.duration;\n          total.nalCount += gop.nalCount;\n          return total;\n        }, { byteLength: 0, duration: 0, nalCount: 0 });\n\n        alignedGops.byteLength = metadata.byteLength;\n        alignedGops.duration = metadata.duration;\n        alignedGops.nalCount = metadata.nalCount;\n        alignedGops.pts = alignedGops[0].pts;\n        alignedGops.dts = alignedGops[0].dts;\n\n        return alignedGops;\n      };\n\n      this.alignGopsWith = function (newGopsToAlignWith) {\n        gopsToAlignWith = newGopsToAlignWith;\n      };\n    };\n\n    _VideoSegmentStream.prototype = new stream();\n\n    /**\n     * A Stream that can combine multiple streams (ie. audio & video)\n     * into a single output segment for MSE. Also supports audio-only\n     * and video-only streams.\n     */\n    _CoalesceStream = function CoalesceStream(options, metadataStream) {\n      // Number of Tracks per output segment\n      // If greater than 1, we combine multiple\n      // tracks into a single segment\n      this.numberOfTracks = 0;\n      this.metadataStream = metadataStream;\n\n      if (typeof options.remux !== 'undefined') {\n        this.remuxTracks = !!options.remux;\n      } else {\n        this.remuxTracks = true;\n      }\n\n      this.pendingTracks = [];\n      this.videoTrack = null;\n      this.pendingBoxes = [];\n      this.pendingCaptions = [];\n      this.pendingMetadata = [];\n      this.pendingBytes = 0;\n      this.emittedTracks = 0;\n\n      _CoalesceStream.prototype.init.call(this);\n\n      // Take output from multiple\n      this.push = function (output) {\n        // buffer incoming captions until the associated video segment\n        // finishes\n        if (output.text) {\n          return this.pendingCaptions.push(output);\n        }\n        // buffer incoming id3 tags until the final flush\n        if (output.frames) {\n          return this.pendingMetadata.push(output);\n        }\n\n        // Add this track to the list of pending tracks and store\n        // important information required for the construction of\n        // the final segment\n        this.pendingTracks.push(output.track);\n        this.pendingBoxes.push(output.boxes);\n        this.pendingBytes += output.boxes.byteLength;\n\n        if (output.track.type === 'video') {\n          this.videoTrack = output.track;\n        }\n        if (output.track.type === 'audio') {\n          this.audioTrack = output.track;\n        }\n      };\n    };\n\n    _CoalesceStream.prototype = new stream();\n    _CoalesceStream.prototype.flush = function (flushSource) {\n      var offset = 0,\n          event = {\n        captions: [],\n        captionStreams: {},\n        metadata: [],\n        info: {}\n      },\n          caption,\n          id3,\n          initSegment,\n          timelineStartPts = 0,\n          i;\n\n      if (this.pendingTracks.length < this.numberOfTracks) {\n        if (flushSource !== 'VideoSegmentStream' && flushSource !== 'AudioSegmentStream') {\n          // Return because we haven't received a flush from a data-generating\n          // portion of the segment (meaning that we have only recieved meta-data\n          // or captions.)\n          return;\n        } else if (this.remuxTracks) {\n          // Return until we have enough tracks from the pipeline to remux (if we\n          // are remuxing audio and video into a single MP4)\n          return;\n        } else if (this.pendingTracks.length === 0) {\n          // In the case where we receive a flush without any data having been\n          // received we consider it an emitted track for the purposes of coalescing\n          // `done` events.\n          // We do this for the case where there is an audio and video track in the\n          // segment but no audio data. (seen in several playlists with alternate\n          // audio tracks and no audio present in the main TS segments.)\n          this.emittedTracks++;\n\n          if (this.emittedTracks >= this.numberOfTracks) {\n            this.trigger('done');\n            this.emittedTracks = 0;\n          }\n          return;\n        }\n      }\n\n      if (this.videoTrack) {\n        timelineStartPts = this.videoTrack.timelineStartInfo.pts;\n        VIDEO_PROPERTIES.forEach(function (prop) {\n          event.info[prop] = this.videoTrack[prop];\n        }, this);\n      } else if (this.audioTrack) {\n        timelineStartPts = this.audioTrack.timelineStartInfo.pts;\n        AUDIO_PROPERTIES.forEach(function (prop) {\n          event.info[prop] = this.audioTrack[prop];\n        }, this);\n      }\n\n      if (this.pendingTracks.length === 1) {\n        event.type = this.pendingTracks[0].type;\n      } else {\n        event.type = 'combined';\n      }\n\n      this.emittedTracks += this.pendingTracks.length;\n\n      initSegment = mp4Generator.initSegment(this.pendingTracks);\n\n      // Create a new typed array to hold the init segment\n      event.initSegment = new Uint8Array(initSegment.byteLength);\n\n      // Create an init segment containing a moov\n      // and track definitions\n      event.initSegment.set(initSegment);\n\n      // Create a new typed array to hold the moof+mdats\n      event.data = new Uint8Array(this.pendingBytes);\n\n      // Append each moof+mdat (one per track) together\n      for (i = 0; i < this.pendingBoxes.length; i++) {\n        event.data.set(this.pendingBoxes[i], offset);\n        offset += this.pendingBoxes[i].byteLength;\n      }\n\n      // Translate caption PTS times into second offsets into the\n      // video timeline for the segment, and add track info\n      for (i = 0; i < this.pendingCaptions.length; i++) {\n        caption = this.pendingCaptions[i];\n        caption.startTime = caption.startPts - timelineStartPts;\n        caption.startTime /= 90e3;\n        caption.endTime = caption.endPts - timelineStartPts;\n        caption.endTime /= 90e3;\n        event.captionStreams[caption.stream] = true;\n        event.captions.push(caption);\n      }\n\n      // Translate ID3 frame PTS times into second offsets into the\n      // video timeline for the segment\n      for (i = 0; i < this.pendingMetadata.length; i++) {\n        id3 = this.pendingMetadata[i];\n        id3.cueTime = id3.pts - timelineStartPts;\n        id3.cueTime /= 90e3;\n        event.metadata.push(id3);\n      }\n      // We add this to every single emitted segment even though we only need\n      // it for the first\n      event.metadata.dispatchType = this.metadataStream.dispatchType;\n\n      // Reset stream state\n      this.pendingTracks.length = 0;\n      this.videoTrack = null;\n      this.pendingBoxes.length = 0;\n      this.pendingCaptions.length = 0;\n      this.pendingBytes = 0;\n      this.pendingMetadata.length = 0;\n\n      // Emit the built segment\n      this.trigger('data', event);\n\n      // Only emit `done` if all tracks have been flushed and emitted\n      if (this.emittedTracks >= this.numberOfTracks) {\n        this.trigger('done');\n        this.emittedTracks = 0;\n      }\n    };\n    /**\n     * A Stream that expects MP2T binary data as input and produces\n     * corresponding media segments, suitable for use with Media Source\n     * Extension (MSE) implementations that support the ISO BMFF byte\n     * stream format, like Chrome.\n     */\n    _Transmuxer = function Transmuxer(options) {\n      var self = this,\n          hasFlushed = true,\n          videoTrack,\n          audioTrack;\n\n      _Transmuxer.prototype.init.call(this);\n\n      options = options || {};\n      this.baseMediaDecodeTime = options.baseMediaDecodeTime || 0;\n      this.transmuxPipeline_ = {};\n\n      this.setupAacPipeline = function () {\n        var pipeline = {};\n        this.transmuxPipeline_ = pipeline;\n\n        pipeline.type = 'aac';\n        pipeline.metadataStream = new m2ts_1.MetadataStream();\n\n        // set up the parsing pipeline\n        pipeline.aacStream = new aac();\n        pipeline.audioTimestampRolloverStream = new m2ts_1.TimestampRolloverStream('audio');\n        pipeline.timedMetadataTimestampRolloverStream = new m2ts_1.TimestampRolloverStream('timed-metadata');\n        pipeline.adtsStream = new adts();\n        pipeline.coalesceStream = new _CoalesceStream(options, pipeline.metadataStream);\n        pipeline.headOfPipeline = pipeline.aacStream;\n\n        pipeline.aacStream.pipe(pipeline.audioTimestampRolloverStream).pipe(pipeline.adtsStream);\n        pipeline.aacStream.pipe(pipeline.timedMetadataTimestampRolloverStream).pipe(pipeline.metadataStream).pipe(pipeline.coalesceStream);\n\n        pipeline.metadataStream.on('timestamp', function (frame) {\n          pipeline.aacStream.setTimestamp(frame.timeStamp);\n        });\n\n        pipeline.aacStream.on('data', function (data) {\n          if (data.type === 'timed-metadata' && !pipeline.audioSegmentStream) {\n            audioTrack = audioTrack || {\n              timelineStartInfo: {\n                baseMediaDecodeTime: self.baseMediaDecodeTime\n              },\n              codec: 'adts',\n              type: 'audio'\n            };\n            // hook up the audio segment stream to the first track with aac data\n            pipeline.coalesceStream.numberOfTracks++;\n            pipeline.audioSegmentStream = new _AudioSegmentStream(audioTrack, options);\n            // Set up the final part of the audio pipeline\n            pipeline.adtsStream.pipe(pipeline.audioSegmentStream).pipe(pipeline.coalesceStream);\n          }\n        });\n\n        // Re-emit any data coming from the coalesce stream to the outside world\n        pipeline.coalesceStream.on('data', this.trigger.bind(this, 'data'));\n        // Let the consumer know we have finished flushing the entire pipeline\n        pipeline.coalesceStream.on('done', this.trigger.bind(this, 'done'));\n      };\n\n      this.setupTsPipeline = function () {\n        var pipeline = {};\n        this.transmuxPipeline_ = pipeline;\n\n        pipeline.type = 'ts';\n        pipeline.metadataStream = new m2ts_1.MetadataStream();\n\n        // set up the parsing pipeline\n        pipeline.packetStream = new m2ts_1.TransportPacketStream();\n        pipeline.parseStream = new m2ts_1.TransportParseStream();\n        pipeline.elementaryStream = new m2ts_1.ElementaryStream();\n        pipeline.videoTimestampRolloverStream = new m2ts_1.TimestampRolloverStream('video');\n        pipeline.audioTimestampRolloverStream = new m2ts_1.TimestampRolloverStream('audio');\n        pipeline.timedMetadataTimestampRolloverStream = new m2ts_1.TimestampRolloverStream('timed-metadata');\n        pipeline.adtsStream = new adts();\n        pipeline.h264Stream = new H264Stream();\n        pipeline.captionStream = new m2ts_1.CaptionStream();\n        pipeline.coalesceStream = new _CoalesceStream(options, pipeline.metadataStream);\n        pipeline.headOfPipeline = pipeline.packetStream;\n\n        // disassemble MPEG2-TS packets into elementary streams\n        pipeline.packetStream.pipe(pipeline.parseStream).pipe(pipeline.elementaryStream);\n\n        // !!THIS ORDER IS IMPORTANT!!\n        // demux the streams\n        pipeline.elementaryStream.pipe(pipeline.videoTimestampRolloverStream).pipe(pipeline.h264Stream);\n        pipeline.elementaryStream.pipe(pipeline.audioTimestampRolloverStream).pipe(pipeline.adtsStream);\n\n        pipeline.elementaryStream.pipe(pipeline.timedMetadataTimestampRolloverStream).pipe(pipeline.metadataStream).pipe(pipeline.coalesceStream);\n\n        // Hook up CEA-608/708 caption stream\n        pipeline.h264Stream.pipe(pipeline.captionStream).pipe(pipeline.coalesceStream);\n\n        pipeline.elementaryStream.on('data', function (data) {\n          var i;\n\n          if (data.type === 'metadata') {\n            i = data.tracks.length;\n\n            // scan the tracks listed in the metadata\n            while (i--) {\n              if (!videoTrack && data.tracks[i].type === 'video') {\n                videoTrack = data.tracks[i];\n                videoTrack.timelineStartInfo.baseMediaDecodeTime = self.baseMediaDecodeTime;\n              } else if (!audioTrack && data.tracks[i].type === 'audio') {\n                audioTrack = data.tracks[i];\n                audioTrack.timelineStartInfo.baseMediaDecodeTime = self.baseMediaDecodeTime;\n              }\n            }\n\n            // hook up the video segment stream to the first track with h264 data\n            if (videoTrack && !pipeline.videoSegmentStream) {\n              pipeline.coalesceStream.numberOfTracks++;\n              pipeline.videoSegmentStream = new _VideoSegmentStream(videoTrack, options);\n\n              pipeline.videoSegmentStream.on('timelineStartInfo', function (timelineStartInfo) {\n                // When video emits timelineStartInfo data after a flush, we forward that\n                // info to the AudioSegmentStream, if it exists, because video timeline\n                // data takes precedence.\n                if (audioTrack) {\n                  audioTrack.timelineStartInfo = timelineStartInfo;\n                  // On the first segment we trim AAC frames that exist before the\n                  // very earliest DTS we have seen in video because Chrome will\n                  // interpret any video track with a baseMediaDecodeTime that is\n                  // non-zero as a gap.\n                  pipeline.audioSegmentStream.setEarliestDts(timelineStartInfo.dts);\n                }\n              });\n\n              pipeline.videoSegmentStream.on('processedGopsInfo', self.trigger.bind(self, 'gopInfo'));\n\n              pipeline.videoSegmentStream.on('baseMediaDecodeTime', function (baseMediaDecodeTime) {\n                if (audioTrack) {\n                  pipeline.audioSegmentStream.setVideoBaseMediaDecodeTime(baseMediaDecodeTime);\n                }\n              });\n\n              // Set up the final part of the video pipeline\n              pipeline.h264Stream.pipe(pipeline.videoSegmentStream).pipe(pipeline.coalesceStream);\n            }\n\n            if (audioTrack && !pipeline.audioSegmentStream) {\n              // hook up the audio segment stream to the first track with aac data\n              pipeline.coalesceStream.numberOfTracks++;\n              pipeline.audioSegmentStream = new _AudioSegmentStream(audioTrack, options);\n\n              // Set up the final part of the audio pipeline\n              pipeline.adtsStream.pipe(pipeline.audioSegmentStream).pipe(pipeline.coalesceStream);\n            }\n          }\n        });\n\n        // Re-emit any data coming from the coalesce stream to the outside world\n        pipeline.coalesceStream.on('data', this.trigger.bind(this, 'data'));\n        // Let the consumer know we have finished flushing the entire pipeline\n        pipeline.coalesceStream.on('done', this.trigger.bind(this, 'done'));\n      };\n\n      // hook up the segment streams once track metadata is delivered\n      this.setBaseMediaDecodeTime = function (baseMediaDecodeTime) {\n        var pipeline = this.transmuxPipeline_;\n\n        this.baseMediaDecodeTime = baseMediaDecodeTime;\n        if (audioTrack) {\n          audioTrack.timelineStartInfo.dts = undefined;\n          audioTrack.timelineStartInfo.pts = undefined;\n          trackDecodeInfo.clearDtsInfo(audioTrack);\n          audioTrack.timelineStartInfo.baseMediaDecodeTime = baseMediaDecodeTime;\n          if (pipeline.audioTimestampRolloverStream) {\n            pipeline.audioTimestampRolloverStream.discontinuity();\n          }\n        }\n        if (videoTrack) {\n          if (pipeline.videoSegmentStream) {\n            pipeline.videoSegmentStream.gopCache_ = [];\n            pipeline.videoTimestampRolloverStream.discontinuity();\n          }\n          videoTrack.timelineStartInfo.dts = undefined;\n          videoTrack.timelineStartInfo.pts = undefined;\n          trackDecodeInfo.clearDtsInfo(videoTrack);\n          pipeline.captionStream.reset();\n          videoTrack.timelineStartInfo.baseMediaDecodeTime = baseMediaDecodeTime;\n        }\n\n        if (pipeline.timedMetadataTimestampRolloverStream) {\n          pipeline.timedMetadataTimestampRolloverStream.discontinuity();\n        }\n      };\n\n      this.setAudioAppendStart = function (timestamp) {\n        if (audioTrack) {\n          this.transmuxPipeline_.audioSegmentStream.setAudioAppendStart(timestamp);\n        }\n      };\n\n      this.alignGopsWith = function (gopsToAlignWith) {\n        if (videoTrack && this.transmuxPipeline_.videoSegmentStream) {\n          this.transmuxPipeline_.videoSegmentStream.alignGopsWith(gopsToAlignWith);\n        }\n      };\n\n      // feed incoming data to the front of the parsing pipeline\n      this.push = function (data) {\n        if (hasFlushed) {\n          var isAac = isLikelyAacData(data);\n\n          if (isAac && this.transmuxPipeline_.type !== 'aac') {\n            this.setupAacPipeline();\n          } else if (!isAac && this.transmuxPipeline_.type !== 'ts') {\n            this.setupTsPipeline();\n          }\n          hasFlushed = false;\n        }\n        this.transmuxPipeline_.headOfPipeline.push(data);\n      };\n\n      // flush any buffered data\n      this.flush = function () {\n        hasFlushed = true;\n        // Start at the top of the pipeline and flush all pending work\n        this.transmuxPipeline_.headOfPipeline.flush();\n      };\n\n      // Caption data has to be reset when seeking outside buffered range\n      this.resetCaptions = function () {\n        if (this.transmuxPipeline_.captionStream) {\n          this.transmuxPipeline_.captionStream.reset();\n        }\n      };\n    };\n    _Transmuxer.prototype = new stream();\n\n    var transmuxer = {\n      Transmuxer: _Transmuxer,\n      VideoSegmentStream: _VideoSegmentStream,\n      AudioSegmentStream: _AudioSegmentStream,\n      AUDIO_PROPERTIES: AUDIO_PROPERTIES,\n      VIDEO_PROPERTIES: VIDEO_PROPERTIES\n    };\n\n    var inspectMp4,\n        _textifyMp,\n        parseType$1 = probe.parseType,\n        parseMp4Date = function parseMp4Date(seconds) {\n      return new Date(seconds * 1000 - 2082844800000);\n    },\n        parseSampleFlags = function parseSampleFlags(flags) {\n      return {\n        isLeading: (flags[0] & 0x0c) >>> 2,\n        dependsOn: flags[0] & 0x03,\n        isDependedOn: (flags[1] & 0xc0) >>> 6,\n        hasRedundancy: (flags[1] & 0x30) >>> 4,\n        paddingValue: (flags[1] & 0x0e) >>> 1,\n        isNonSyncSample: flags[1] & 0x01,\n        degradationPriority: flags[2] << 8 | flags[3]\n      };\n    },\n        nalParse = function nalParse(avcStream) {\n      var avcView = new DataView(avcStream.buffer, avcStream.byteOffset, avcStream.byteLength),\n          result = [],\n          i,\n          length;\n      for (i = 0; i + 4 < avcStream.length; i += length) {\n        length = avcView.getUint32(i);\n        i += 4;\n\n        // bail if this doesn't appear to be an H264 stream\n        if (length <= 0) {\n          result.push('<span style=\\'color:red;\\'>MALFORMED DATA</span>');\n          continue;\n        }\n\n        switch (avcStream[i] & 0x1F) {\n          case 0x01:\n            result.push('slice_layer_without_partitioning_rbsp');\n            break;\n          case 0x05:\n            result.push('slice_layer_without_partitioning_rbsp_idr');\n            break;\n          case 0x06:\n            result.push('sei_rbsp');\n            break;\n          case 0x07:\n            result.push('seq_parameter_set_rbsp');\n            break;\n          case 0x08:\n            result.push('pic_parameter_set_rbsp');\n            break;\n          case 0x09:\n            result.push('access_unit_delimiter_rbsp');\n            break;\n          default:\n            result.push('UNKNOWN NAL - ' + avcStream[i] & 0x1F);\n            break;\n        }\n      }\n      return result;\n    },\n\n\n    // registry of handlers for individual mp4 box types\n    parse$$1 = {\n      // codingname, not a first-class box type. stsd entries share the\n      // same format as real boxes so the parsing infrastructure can be\n      // shared\n      avc1: function avc1(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n        return {\n          dataReferenceIndex: view.getUint16(6),\n          width: view.getUint16(24),\n          height: view.getUint16(26),\n          horizresolution: view.getUint16(28) + view.getUint16(30) / 16,\n          vertresolution: view.getUint16(32) + view.getUint16(34) / 16,\n          frameCount: view.getUint16(40),\n          depth: view.getUint16(74),\n          config: inspectMp4(data.subarray(78, data.byteLength))\n        };\n      },\n      avcC: function avcC(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          configurationVersion: data[0],\n          avcProfileIndication: data[1],\n          profileCompatibility: data[2],\n          avcLevelIndication: data[3],\n          lengthSizeMinusOne: data[4] & 0x03,\n          sps: [],\n          pps: []\n        },\n            numOfSequenceParameterSets = data[5] & 0x1f,\n            numOfPictureParameterSets,\n            nalSize,\n            offset,\n            i;\n\n        // iterate past any SPSs\n        offset = 6;\n        for (i = 0; i < numOfSequenceParameterSets; i++) {\n          nalSize = view.getUint16(offset);\n          offset += 2;\n          result.sps.push(new Uint8Array(data.subarray(offset, offset + nalSize)));\n          offset += nalSize;\n        }\n        // iterate past any PPSs\n        numOfPictureParameterSets = data[offset];\n        offset++;\n        for (i = 0; i < numOfPictureParameterSets; i++) {\n          nalSize = view.getUint16(offset);\n          offset += 2;\n          result.pps.push(new Uint8Array(data.subarray(offset, offset + nalSize)));\n          offset += nalSize;\n        }\n        return result;\n      },\n      btrt: function btrt(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n        return {\n          bufferSizeDB: view.getUint32(0),\n          maxBitrate: view.getUint32(4),\n          avgBitrate: view.getUint32(8)\n        };\n      },\n      esds: function esds(data) {\n        return {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          esId: data[6] << 8 | data[7],\n          streamPriority: data[8] & 0x1f,\n          decoderConfig: {\n            objectProfileIndication: data[11],\n            streamType: data[12] >>> 2 & 0x3f,\n            bufferSize: data[13] << 16 | data[14] << 8 | data[15],\n            maxBitrate: data[16] << 24 | data[17] << 16 | data[18] << 8 | data[19],\n            avgBitrate: data[20] << 24 | data[21] << 16 | data[22] << 8 | data[23],\n            decoderConfigDescriptor: {\n              tag: data[24],\n              length: data[25],\n              audioObjectType: data[26] >>> 3 & 0x1f,\n              samplingFrequencyIndex: (data[26] & 0x07) << 1 | data[27] >>> 7 & 0x01,\n              channelConfiguration: data[27] >>> 3 & 0x0f\n            }\n          }\n        };\n      },\n      ftyp: function ftyp(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          majorBrand: parseType$1(data.subarray(0, 4)),\n          minorVersion: view.getUint32(4),\n          compatibleBrands: []\n        },\n            i = 8;\n        while (i < data.byteLength) {\n          result.compatibleBrands.push(parseType$1(data.subarray(i, i + 4)));\n          i += 4;\n        }\n        return result;\n      },\n      dinf: function dinf(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      dref: function dref(data) {\n        return {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          dataReferences: inspectMp4(data.subarray(8))\n        };\n      },\n      hdlr: function hdlr(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4)),\n          handlerType: parseType$1(data.subarray(8, 12)),\n          name: ''\n        },\n            i = 8;\n\n        // parse out the name field\n        for (i = 24; i < data.byteLength; i++) {\n          if (data[i] === 0x00) {\n            // the name field is null-terminated\n            i++;\n            break;\n          }\n          result.name += String.fromCharCode(data[i]);\n        }\n        // decode UTF-8 to javascript's internal representation\n        // see http://ecmanaut.blogspot.com/2006/07/encoding-decoding-utf8-in-javascript.html\n        result.name = decodeURIComponent(escape(result.name));\n\n        return result;\n      },\n      mdat: function mdat(data) {\n        return {\n          byteLength: data.byteLength,\n          nals: nalParse(data)\n        };\n      },\n      mdhd: function mdhd(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            i = 4,\n            language,\n            result = {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4)),\n          language: ''\n        };\n        if (result.version === 1) {\n          i += 4;\n          result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n          i += 8;\n          result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n          i += 4;\n          result.timescale = view.getUint32(i);\n          i += 8;\n          result.duration = view.getUint32(i); // truncating top 4 bytes\n        } else {\n          result.creationTime = parseMp4Date(view.getUint32(i));\n          i += 4;\n          result.modificationTime = parseMp4Date(view.getUint32(i));\n          i += 4;\n          result.timescale = view.getUint32(i);\n          i += 4;\n          result.duration = view.getUint32(i);\n        }\n        i += 4;\n        // language is stored as an ISO-639-2/T code in an array of three 5-bit fields\n        // each field is the packed difference between its ASCII value and 0x60\n        language = view.getUint16(i);\n        result.language += String.fromCharCode((language >> 10) + 0x60);\n        result.language += String.fromCharCode(((language & 0x03e0) >> 5) + 0x60);\n        result.language += String.fromCharCode((language & 0x1f) + 0x60);\n\n        return result;\n      },\n      mdia: function mdia(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      mfhd: function mfhd(data) {\n        return {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          sequenceNumber: data[4] << 24 | data[5] << 16 | data[6] << 8 | data[7]\n        };\n      },\n      minf: function minf(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      // codingname, not a first-class box type. stsd entries share the\n      // same format as real boxes so the parsing infrastructure can be\n      // shared\n      mp4a: function mp4a(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          // 6 bytes reserved\n          dataReferenceIndex: view.getUint16(6),\n          // 4 + 4 bytes reserved\n          channelcount: view.getUint16(16),\n          samplesize: view.getUint16(18),\n          // 2 bytes pre_defined\n          // 2 bytes reserved\n          samplerate: view.getUint16(24) + view.getUint16(26) / 65536\n        };\n\n        // if there are more bytes to process, assume this is an ISO/IEC\n        // 14496-14 MP4AudioSampleEntry and parse the ESDBox\n        if (data.byteLength > 28) {\n          result.streamDescriptor = inspectMp4(data.subarray(28))[0];\n        }\n        return result;\n      },\n      moof: function moof(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      moov: function moov(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      mvex: function mvex(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      mvhd: function mvhd(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            i = 4,\n            result = {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4))\n        };\n\n        if (result.version === 1) {\n          i += 4;\n          result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n          i += 8;\n          result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n          i += 4;\n          result.timescale = view.getUint32(i);\n          i += 8;\n          result.duration = view.getUint32(i); // truncating top 4 bytes\n        } else {\n          result.creationTime = parseMp4Date(view.getUint32(i));\n          i += 4;\n          result.modificationTime = parseMp4Date(view.getUint32(i));\n          i += 4;\n          result.timescale = view.getUint32(i);\n          i += 4;\n          result.duration = view.getUint32(i);\n        }\n        i += 4;\n\n        // convert fixed-point, base 16 back to a number\n        result.rate = view.getUint16(i) + view.getUint16(i + 2) / 16;\n        i += 4;\n        result.volume = view.getUint8(i) + view.getUint8(i + 1) / 8;\n        i += 2;\n        i += 2;\n        i += 2 * 4;\n        result.matrix = new Uint32Array(data.subarray(i, i + 9 * 4));\n        i += 9 * 4;\n        i += 6 * 4;\n        result.nextTrackId = view.getUint32(i);\n        return result;\n      },\n      pdin: function pdin(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n        return {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4)),\n          rate: view.getUint32(4),\n          initialDelay: view.getUint32(8)\n        };\n      },\n      sdtp: function sdtp(data) {\n        var result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          samples: []\n        },\n            i;\n\n        for (i = 4; i < data.byteLength; i++) {\n          result.samples.push({\n            dependsOn: (data[i] & 0x30) >> 4,\n            isDependedOn: (data[i] & 0x0c) >> 2,\n            hasRedundancy: data[i] & 0x03\n          });\n        }\n        return result;\n      },\n      sidx: function sidx(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          references: [],\n          referenceId: view.getUint32(4),\n          timescale: view.getUint32(8),\n          earliestPresentationTime: view.getUint32(12),\n          firstOffset: view.getUint32(16)\n        },\n            referenceCount = view.getUint16(22),\n            i;\n\n        for (i = 24; referenceCount; i += 12, referenceCount--) {\n          result.references.push({\n            referenceType: (data[i] & 0x80) >>> 7,\n            referencedSize: view.getUint32(i) & 0x7FFFFFFF,\n            subsegmentDuration: view.getUint32(i + 4),\n            startsWithSap: !!(data[i + 8] & 0x80),\n            sapType: (data[i + 8] & 0x70) >>> 4,\n            sapDeltaTime: view.getUint32(i + 8) & 0x0FFFFFFF\n          });\n        }\n\n        return result;\n      },\n      smhd: function smhd(data) {\n        return {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          balance: data[4] + data[5] / 256\n        };\n      },\n      stbl: function stbl(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      stco: function stco(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          chunkOffsets: []\n        },\n            entryCount = view.getUint32(4),\n            i;\n        for (i = 8; entryCount; i += 4, entryCount--) {\n          result.chunkOffsets.push(view.getUint32(i));\n        }\n        return result;\n      },\n      stsc: function stsc(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            entryCount = view.getUint32(4),\n            result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          sampleToChunks: []\n        },\n            i;\n        for (i = 8; entryCount; i += 12, entryCount--) {\n          result.sampleToChunks.push({\n            firstChunk: view.getUint32(i),\n            samplesPerChunk: view.getUint32(i + 4),\n            sampleDescriptionIndex: view.getUint32(i + 8)\n          });\n        }\n        return result;\n      },\n      stsd: function stsd(data) {\n        return {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          sampleDescriptions: inspectMp4(data.subarray(8))\n        };\n      },\n      stsz: function stsz(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          sampleSize: view.getUint32(4),\n          entries: []\n        },\n            i;\n        for (i = 12; i < data.byteLength; i += 4) {\n          result.entries.push(view.getUint32(i));\n        }\n        return result;\n      },\n      stts: function stts(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          timeToSamples: []\n        },\n            entryCount = view.getUint32(4),\n            i;\n\n        for (i = 8; entryCount; i += 8, entryCount--) {\n          result.timeToSamples.push({\n            sampleCount: view.getUint32(i),\n            sampleDelta: view.getUint32(i + 4)\n          });\n        }\n        return result;\n      },\n      styp: function styp(data) {\n        return parse$$1.ftyp(data);\n      },\n      tfdt: function tfdt(data) {\n        var result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          baseMediaDecodeTime: data[4] << 24 | data[5] << 16 | data[6] << 8 | data[7]\n        };\n        if (result.version === 1) {\n          result.baseMediaDecodeTime *= Math.pow(2, 32);\n          result.baseMediaDecodeTime += data[8] << 24 | data[9] << 16 | data[10] << 8 | data[11];\n        }\n        return result;\n      },\n      tfhd: function tfhd(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          trackId: view.getUint32(4)\n        },\n            baseDataOffsetPresent = result.flags[2] & 0x01,\n            sampleDescriptionIndexPresent = result.flags[2] & 0x02,\n            defaultSampleDurationPresent = result.flags[2] & 0x08,\n            defaultSampleSizePresent = result.flags[2] & 0x10,\n            defaultSampleFlagsPresent = result.flags[2] & 0x20,\n            durationIsEmpty = result.flags[0] & 0x010000,\n            defaultBaseIsMoof = result.flags[0] & 0x020000,\n            i;\n\n        i = 8;\n        if (baseDataOffsetPresent) {\n          i += 4; // truncate top 4 bytes\n          // FIXME: should we read the full 64 bits?\n          result.baseDataOffset = view.getUint32(12);\n          i += 4;\n        }\n        if (sampleDescriptionIndexPresent) {\n          result.sampleDescriptionIndex = view.getUint32(i);\n          i += 4;\n        }\n        if (defaultSampleDurationPresent) {\n          result.defaultSampleDuration = view.getUint32(i);\n          i += 4;\n        }\n        if (defaultSampleSizePresent) {\n          result.defaultSampleSize = view.getUint32(i);\n          i += 4;\n        }\n        if (defaultSampleFlagsPresent) {\n          result.defaultSampleFlags = view.getUint32(i);\n        }\n        if (durationIsEmpty) {\n          result.durationIsEmpty = true;\n        }\n        if (!baseDataOffsetPresent && defaultBaseIsMoof) {\n          result.baseDataOffsetIsMoof = true;\n        }\n        return result;\n      },\n      tkhd: function tkhd(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            i = 4,\n            result = {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4))\n        };\n        if (result.version === 1) {\n          i += 4;\n          result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n          i += 8;\n          result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n          i += 4;\n          result.trackId = view.getUint32(i);\n          i += 4;\n          i += 8;\n          result.duration = view.getUint32(i); // truncating top 4 bytes\n        } else {\n          result.creationTime = parseMp4Date(view.getUint32(i));\n          i += 4;\n          result.modificationTime = parseMp4Date(view.getUint32(i));\n          i += 4;\n          result.trackId = view.getUint32(i);\n          i += 4;\n          i += 4;\n          result.duration = view.getUint32(i);\n        }\n        i += 4;\n        i += 2 * 4;\n        result.layer = view.getUint16(i);\n        i += 2;\n        result.alternateGroup = view.getUint16(i);\n        i += 2;\n        // convert fixed-point, base 16 back to a number\n        result.volume = view.getUint8(i) + view.getUint8(i + 1) / 8;\n        i += 2;\n        i += 2;\n        result.matrix = new Uint32Array(data.subarray(i, i + 9 * 4));\n        i += 9 * 4;\n        result.width = view.getUint16(i) + view.getUint16(i + 2) / 16;\n        i += 4;\n        result.height = view.getUint16(i) + view.getUint16(i + 2) / 16;\n        return result;\n      },\n      traf: function traf(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      trak: function trak(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      trex: function trex(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n        return {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          trackId: view.getUint32(4),\n          defaultSampleDescriptionIndex: view.getUint32(8),\n          defaultSampleDuration: view.getUint32(12),\n          defaultSampleSize: view.getUint32(16),\n          sampleDependsOn: data[20] & 0x03,\n          sampleIsDependedOn: (data[21] & 0xc0) >> 6,\n          sampleHasRedundancy: (data[21] & 0x30) >> 4,\n          samplePaddingValue: (data[21] & 0x0e) >> 1,\n          sampleIsDifferenceSample: !!(data[21] & 0x01),\n          sampleDegradationPriority: view.getUint16(22)\n        };\n      },\n      trun: function trun(data) {\n        var result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          samples: []\n        },\n            view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n\n\n        // Flag interpretation\n        dataOffsetPresent = result.flags[2] & 0x01,\n\n\n        // compare with 2nd byte of 0x1\n        firstSampleFlagsPresent = result.flags[2] & 0x04,\n\n\n        // compare with 2nd byte of 0x4\n        sampleDurationPresent = result.flags[1] & 0x01,\n\n\n        // compare with 2nd byte of 0x100\n        sampleSizePresent = result.flags[1] & 0x02,\n\n\n        // compare with 2nd byte of 0x200\n        sampleFlagsPresent = result.flags[1] & 0x04,\n\n\n        // compare with 2nd byte of 0x400\n        sampleCompositionTimeOffsetPresent = result.flags[1] & 0x08,\n\n\n        // compare with 2nd byte of 0x800\n        sampleCount = view.getUint32(4),\n            offset = 8,\n            sample;\n\n        if (dataOffsetPresent) {\n          // 32 bit signed integer\n          result.dataOffset = view.getInt32(offset);\n          offset += 4;\n        }\n\n        // Overrides the flags for the first sample only. The order of\n        // optional values will be: duration, size, compositionTimeOffset\n        if (firstSampleFlagsPresent && sampleCount) {\n          sample = {\n            flags: parseSampleFlags(data.subarray(offset, offset + 4))\n          };\n          offset += 4;\n          if (sampleDurationPresent) {\n            sample.duration = view.getUint32(offset);\n            offset += 4;\n          }\n          if (sampleSizePresent) {\n            sample.size = view.getUint32(offset);\n            offset += 4;\n          }\n          if (sampleCompositionTimeOffsetPresent) {\n            // Note: this should be a signed int if version is 1\n            sample.compositionTimeOffset = view.getUint32(offset);\n            offset += 4;\n          }\n          result.samples.push(sample);\n          sampleCount--;\n        }\n\n        while (sampleCount--) {\n          sample = {};\n          if (sampleDurationPresent) {\n            sample.duration = view.getUint32(offset);\n            offset += 4;\n          }\n          if (sampleSizePresent) {\n            sample.size = view.getUint32(offset);\n            offset += 4;\n          }\n          if (sampleFlagsPresent) {\n            sample.flags = parseSampleFlags(data.subarray(offset, offset + 4));\n            offset += 4;\n          }\n          if (sampleCompositionTimeOffsetPresent) {\n            // Note: this should be a signed int if version is 1\n            sample.compositionTimeOffset = view.getUint32(offset);\n            offset += 4;\n          }\n          result.samples.push(sample);\n        }\n        return result;\n      },\n      'url ': function url(data) {\n        return {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4))\n        };\n      },\n      vmhd: function vmhd(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n        return {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          graphicsmode: view.getUint16(4),\n          opcolor: new Uint16Array([view.getUint16(6), view.getUint16(8), view.getUint16(10)])\n        };\n      }\n    };\n\n    /**\n     * Return a javascript array of box objects parsed from an ISO base\n     * media file.\n     * @param data {Uint8Array} the binary data of the media to be inspected\n     * @return {array} a javascript array of potentially nested box objects\n     */\n    inspectMp4 = function inspectMp4(data) {\n      var i = 0,\n          result = [],\n          view,\n          size,\n          type,\n          end,\n          box;\n\n      // Convert data from Uint8Array to ArrayBuffer, to follow Dataview API\n      var ab = new ArrayBuffer(data.length);\n      var v = new Uint8Array(ab);\n      for (var z = 0; z < data.length; ++z) {\n        v[z] = data[z];\n      }\n      view = new DataView(ab);\n\n      while (i < data.byteLength) {\n        // parse box data\n        size = view.getUint32(i);\n        type = parseType$1(data.subarray(i + 4, i + 8));\n        end = size > 1 ? i + size : data.byteLength;\n\n        // parse type-specific data\n        box = (parse$$1[type] || function (data) {\n          return {\n            data: data\n          };\n        })(data.subarray(i + 8, end));\n        box.size = size;\n        box.type = type;\n\n        // store this box and move to the next\n        result.push(box);\n        i = end;\n      }\n      return result;\n    };\n\n    /**\n     * Returns a textual representation of the javascript represtentation\n     * of an MP4 file. You can use it as an alternative to\n     * JSON.stringify() to compare inspected MP4s.\n     * @param inspectedMp4 {array} the parsed array of boxes in an MP4\n     * file\n     * @param depth {number} (optional) the number of ancestor boxes of\n     * the elements of inspectedMp4. Assumed to be zero if unspecified.\n     * @return {string} a text representation of the parsed MP4\n     */\n    _textifyMp = function textifyMp4(inspectedMp4, depth) {\n      var indent;\n      depth = depth || 0;\n      indent = new Array(depth * 2 + 1).join(' ');\n\n      // iterate over all the boxes\n      return inspectedMp4.map(function (box, index) {\n\n        // list the box type first at the current indentation level\n        return indent + box.type + '\\n' +\n\n        // the type is already included and handle child boxes separately\n        Object.keys(box).filter(function (key) {\n          return key !== 'type' && key !== 'boxes';\n\n          // output all the box properties\n        }).map(function (key) {\n          var prefix = indent + '  ' + key + ': ',\n              value = box[key];\n\n          // print out raw bytes as hexademical\n          if (value instanceof Uint8Array || value instanceof Uint32Array) {\n            var bytes = Array.prototype.slice.call(new Uint8Array(value.buffer, value.byteOffset, value.byteLength)).map(function (byte) {\n              return ' ' + ('00' + byte.toString(16)).slice(-2);\n            }).join('').match(/.{1,24}/g);\n            if (!bytes) {\n              return prefix + '<>';\n            }\n            if (bytes.length === 1) {\n              return prefix + '<' + bytes.join('').slice(1) + '>';\n            }\n            return prefix + '<\\n' + bytes.map(function (line) {\n              return indent + '  ' + line;\n            }).join('\\n') + '\\n' + indent + '  >';\n          }\n\n          // stringify generic objects\n          return prefix + JSON.stringify(value, null, 2).split('\\n').map(function (line, index) {\n            if (index === 0) {\n              return line;\n            }\n            return indent + '  ' + line;\n          }).join('\\n');\n        }).join('\\n') + (\n\n        // recursively textify the child boxes\n        box.boxes ? '\\n' + _textifyMp(box.boxes, depth + 1) : '');\n      }).join('\\n');\n    };\n\n    var mp4Inspector = {\n      inspect: inspectMp4,\n      textify: _textifyMp,\n      parseTfdt: parse$$1.tfdt,\n      parseHdlr: parse$$1.hdlr,\n      parseTfhd: parse$$1.tfhd,\n      parseTrun: parse$$1.trun\n    };\n\n    var discardEmulationPreventionBytes$1 = captionPacketParser.discardEmulationPreventionBytes;\n    var CaptionStream$1 = captionStream.CaptionStream;\n\n    /**\n      * Maps an offset in the mdat to a sample based on the the size of the samples.\n      * Assumes that `parseSamples` has been called first.\n      *\n      * @param {Number} offset - The offset into the mdat\n      * @param {Object[]} samples - An array of samples, parsed using `parseSamples`\n      * @return {?Object} The matching sample, or null if no match was found.\n      *\n      * @see ISO-BMFF-12/2015, Section 8.8.8\n     **/\n    var mapToSample = function mapToSample(offset, samples) {\n      var approximateOffset = offset;\n\n      for (var i = 0; i < samples.length; i++) {\n        var sample = samples[i];\n\n        if (approximateOffset < sample.size) {\n          return sample;\n        }\n\n        approximateOffset -= sample.size;\n      }\n\n      return null;\n    };\n\n    /**\n      * Finds SEI nal units contained in a Media Data Box.\n      * Assumes that `parseSamples` has been called first.\n      *\n      * @param {Uint8Array} avcStream - The bytes of the mdat\n      * @param {Object[]} samples - The samples parsed out by `parseSamples`\n      * @param {Number} trackId - The trackId of this video track\n      * @return {Object[]} seiNals - the parsed SEI NALUs found.\n      *   The contents of the seiNal should match what is expected by\n      *   CaptionStream.push (nalUnitType, size, data, escapedRBSP, pts, dts)\n      *\n      * @see ISO-BMFF-12/2015, Section 8.1.1\n      * @see Rec. ITU-T H.264, 7.3.2.3.1\n     **/\n    var findSeiNals = function findSeiNals(avcStream, samples, trackId) {\n      var avcView = new DataView(avcStream.buffer, avcStream.byteOffset, avcStream.byteLength),\n          result = [],\n          seiNal,\n          i,\n          length,\n          lastMatchedSample;\n\n      for (i = 0; i + 4 < avcStream.length; i += length) {\n        length = avcView.getUint32(i);\n        i += 4;\n\n        // Bail if this doesn't appear to be an H264 stream\n        if (length <= 0) {\n          continue;\n        }\n\n        switch (avcStream[i] & 0x1F) {\n          case 0x06:\n            var data = avcStream.subarray(i + 1, i + 1 + length);\n            var matchingSample = mapToSample(i, samples);\n\n            seiNal = {\n              nalUnitType: 'sei_rbsp',\n              size: length,\n              data: data,\n              escapedRBSP: discardEmulationPreventionBytes$1(data),\n              trackId: trackId\n            };\n\n            if (matchingSample) {\n              seiNal.pts = matchingSample.pts;\n              seiNal.dts = matchingSample.dts;\n              lastMatchedSample = matchingSample;\n            } else {\n              // If a matching sample cannot be found, use the last\n              // sample's values as they should be as close as possible\n              seiNal.pts = lastMatchedSample.pts;\n              seiNal.dts = lastMatchedSample.dts;\n            }\n\n            result.push(seiNal);\n            break;\n          default:\n            break;\n        }\n      }\n\n      return result;\n    };\n\n    /**\n      * Parses sample information out of Track Run Boxes and calculates\n      * the absolute presentation and decode timestamps of each sample.\n      *\n      * @param {Array<Uint8Array>} truns - The Trun Run boxes to be parsed\n      * @param {Number} baseMediaDecodeTime - base media decode time from tfdt\n          @see ISO-BMFF-12/2015, Section 8.8.12\n      * @param {Object} tfhd - The parsed Track Fragment Header\n      *   @see inspect.parseTfhd\n      * @return {Object[]} the parsed samples\n      *\n      * @see ISO-BMFF-12/2015, Section 8.8.8\n     **/\n    var parseSamples = function parseSamples(truns, baseMediaDecodeTime, tfhd) {\n      var currentDts = baseMediaDecodeTime;\n      var defaultSampleDuration = tfhd.defaultSampleDuration || 0;\n      var defaultSampleSize = tfhd.defaultSampleSize || 0;\n      var trackId = tfhd.trackId;\n      var allSamples = [];\n\n      truns.forEach(function (trun) {\n        // Note: We currently do not parse the sample table as well\n        // as the trun. It's possible some sources will require this.\n        // moov > trak > mdia > minf > stbl\n        var trackRun = mp4Inspector.parseTrun(trun);\n        var samples = trackRun.samples;\n\n        samples.forEach(function (sample) {\n          if (sample.duration === undefined) {\n            sample.duration = defaultSampleDuration;\n          }\n          if (sample.size === undefined) {\n            sample.size = defaultSampleSize;\n          }\n          sample.trackId = trackId;\n          sample.dts = currentDts;\n          if (sample.compositionTimeOffset === undefined) {\n            sample.compositionTimeOffset = 0;\n          }\n          sample.pts = currentDts + sample.compositionTimeOffset;\n\n          currentDts += sample.duration;\n        });\n\n        allSamples = allSamples.concat(samples);\n      });\n\n      return allSamples;\n    };\n\n    /**\n      * Parses out caption nals from an FMP4 segment's video tracks.\n      *\n      * @param {Uint8Array} segment - The bytes of a single segment\n      * @param {Number} videoTrackId - The trackId of a video track in the segment\n      * @return {Object.<Number, Object[]>} A mapping of video trackId to\n      *   a list of seiNals found in that track\n     **/\n    var parseCaptionNals = function parseCaptionNals(segment, videoTrackId) {\n      // To get the samples\n      var trafs = probe.findBox(segment, ['moof', 'traf']);\n      // To get SEI NAL units\n      var mdats = probe.findBox(segment, ['mdat']);\n      var captionNals = {};\n      var mdatTrafPairs = [];\n\n      // Pair up each traf with a mdat as moofs and mdats are in pairs\n      mdats.forEach(function (mdat, index) {\n        var matchingTraf = trafs[index];\n        mdatTrafPairs.push({\n          mdat: mdat,\n          traf: matchingTraf\n        });\n      });\n\n      mdatTrafPairs.forEach(function (pair) {\n        var mdat = pair.mdat;\n        var traf = pair.traf;\n        var tfhd = probe.findBox(traf, ['tfhd']);\n        // Exactly 1 tfhd per traf\n        var headerInfo = mp4Inspector.parseTfhd(tfhd[0]);\n        var trackId = headerInfo.trackId;\n        var tfdt = probe.findBox(traf, ['tfdt']);\n        // Either 0 or 1 tfdt per traf\n        var baseMediaDecodeTime = tfdt.length > 0 ? mp4Inspector.parseTfdt(tfdt[0]).baseMediaDecodeTime : 0;\n        var truns = probe.findBox(traf, ['trun']);\n        var samples;\n        var seiNals;\n\n        // Only parse video data for the chosen video track\n        if (videoTrackId === trackId && truns.length > 0) {\n          samples = parseSamples(truns, baseMediaDecodeTime, headerInfo);\n\n          seiNals = findSeiNals(mdat, samples, trackId);\n\n          if (!captionNals[trackId]) {\n            captionNals[trackId] = [];\n          }\n\n          captionNals[trackId] = captionNals[trackId].concat(seiNals);\n        }\n      });\n\n      return captionNals;\n    };\n\n    /**\n      * Parses out inband captions from an MP4 container and returns\n      * caption objects that can be used by WebVTT and the TextTrack API.\n      * @see https://developer.mozilla.org/en-US/docs/Web/API/VTTCue\n      * @see https://developer.mozilla.org/en-US/docs/Web/API/TextTrack\n      * Assumes that `probe.getVideoTrackIds` and `probe.timescale` have been called first\n      *\n      * @param {Uint8Array} segment - The fmp4 segment containing embedded captions\n      * @param {Number} trackId - The id of the video track to parse\n      * @param {Number} timescale - The timescale for the video track from the init segment\n      *\n      * @return {?Object[]} parsedCaptions - A list of captions or null if no video tracks\n      * @return {Number} parsedCaptions[].startTime - The time to show the caption in seconds\n      * @return {Number} parsedCaptions[].endTime - The time to stop showing the caption in seconds\n      * @return {String} parsedCaptions[].text - The visible content of the caption\n     **/\n    var parseEmbeddedCaptions = function parseEmbeddedCaptions(segment, trackId, timescale) {\n      var seiNals;\n\n      if (!trackId) {\n        return null;\n      }\n\n      seiNals = parseCaptionNals(segment, trackId);\n\n      return {\n        seiNals: seiNals[trackId],\n        timescale: timescale\n      };\n    };\n\n    /**\n      * Converts SEI NALUs into captions that can be used by video.js\n     **/\n    var CaptionParser$$1 = function CaptionParser$$1() {\n      var isInitialized = false;\n      var captionStream$$1;\n\n      // Stores segments seen before trackId and timescale are set\n      var segmentCache;\n      // Stores video track ID of the track being parsed\n      var trackId;\n      // Stores the timescale of the track being parsed\n      var timescale;\n      // Stores captions parsed so far\n      var parsedCaptions;\n\n      /**\n        * A method to indicate whether a CaptionParser has been initalized\n        * @returns {Boolean}\n       **/\n      this.isInitialized = function () {\n        return isInitialized;\n      };\n\n      /**\n        * Initializes the underlying CaptionStream, SEI NAL parsing\n        * and management, and caption collection\n       **/\n      this.init = function () {\n        captionStream$$1 = new CaptionStream$1();\n        isInitialized = true;\n\n        // Collect dispatched captions\n        captionStream$$1.on('data', function (event) {\n          // Convert to seconds in the source's timescale\n          event.startTime = event.startPts / timescale;\n          event.endTime = event.endPts / timescale;\n\n          parsedCaptions.captions.push(event);\n          parsedCaptions.captionStreams[event.stream] = true;\n        });\n      };\n\n      /**\n        * Determines if a new video track will be selected\n        * or if the timescale changed\n        * @return {Boolean}\n       **/\n      this.isNewInit = function (videoTrackIds, timescales) {\n        if (videoTrackIds && videoTrackIds.length === 0 || timescales && (typeof timescales === 'undefined' ? 'undefined' : _typeof(timescales)) === 'object' && Object.keys(timescales).length === 0) {\n          return false;\n        }\n\n        return trackId !== videoTrackIds[0] || timescale !== timescales[trackId];\n      };\n\n      /**\n        * Parses out SEI captions and interacts with underlying\n        * CaptionStream to return dispatched captions\n        *\n        * @param {Uint8Array} segment - The fmp4 segment containing embedded captions\n        * @param {Number[]} videoTrackIds - A list of video tracks found in the init segment\n        * @param {Object.<Number, Number>} timescales - The timescales found in the init segment\n        * @see parseEmbeddedCaptions\n        * @see m2ts/caption-stream.js\n       **/\n      this.parse = function (segment, videoTrackIds, timescales) {\n        var parsedData;\n\n        if (!this.isInitialized()) {\n          return null;\n\n          // This is not likely to be a video segment\n        } else if (!videoTrackIds || !timescales) {\n          return null;\n        } else if (this.isNewInit(videoTrackIds, timescales)) {\n          // Use the first video track only as there is no\n          // mechanism to switch to other video tracks\n          trackId = videoTrackIds[0];\n          timescale = timescales[trackId];\n\n          // If an init segment has not been seen yet, hold onto segment\n          // data until we have one\n        } else if (!trackId || !timescale) {\n          segmentCache.push(segment);\n          return null;\n        }\n\n        // Now that a timescale and trackId is set, parse cached segments\n        while (segmentCache.length > 0) {\n          var cachedSegment = segmentCache.shift();\n\n          this.parse(cachedSegment, videoTrackIds, timescales);\n        }\n\n        parsedData = parseEmbeddedCaptions(segment, trackId, timescale);\n\n        if (parsedData === null || !parsedData.seiNals) {\n          return null;\n        }\n\n        this.pushNals(parsedData.seiNals);\n        // Force the parsed captions to be dispatched\n        this.flushStream();\n\n        return parsedCaptions;\n      };\n\n      /**\n        * Pushes SEI NALUs onto CaptionStream\n        * @param {Object[]} nals - A list of SEI nals parsed using `parseCaptionNals`\n        * Assumes that `parseCaptionNals` has been called first\n        * @see m2ts/caption-stream.js\n        **/\n      this.pushNals = function (nals) {\n        if (!this.isInitialized() || !nals || nals.length === 0) {\n          return null;\n        }\n\n        nals.forEach(function (nal) {\n          captionStream$$1.push(nal);\n        });\n      };\n\n      /**\n        * Flushes underlying CaptionStream to dispatch processed, displayable captions\n        * @see m2ts/caption-stream.js\n       **/\n      this.flushStream = function () {\n        if (!this.isInitialized()) {\n          return null;\n        }\n\n        captionStream$$1.flush();\n      };\n\n      /**\n        * Reset caption buckets for new data\n       **/\n      this.clearParsedCaptions = function () {\n        parsedCaptions.captions = [];\n        parsedCaptions.captionStreams = {};\n      };\n\n      /**\n        * Resets underlying CaptionStream\n        * @see m2ts/caption-stream.js\n       **/\n      this.resetCaptionStream = function () {\n        if (!this.isInitialized()) {\n          return null;\n        }\n\n        captionStream$$1.reset();\n      };\n\n      /**\n        * Convenience method to clear all captions flushed from the\n        * CaptionStream and still being parsed\n        * @see m2ts/caption-stream.js\n       **/\n      this.clearAllCaptions = function () {\n        this.clearParsedCaptions();\n        this.resetCaptionStream();\n      };\n\n      /**\n        * Reset caption parser\n       **/\n      this.reset = function () {\n        segmentCache = [];\n        trackId = null;\n        timescale = null;\n\n        if (!parsedCaptions) {\n          parsedCaptions = {\n            captions: [],\n            // CC1, CC2, CC3, CC4\n            captionStreams: {}\n          };\n        } else {\n          this.clearParsedCaptions();\n        }\n\n        this.resetCaptionStream();\n      };\n\n      this.reset();\n    };\n\n    var captionParser = CaptionParser$$1;\n\n    var mp4 = {\n      generator: mp4Generator,\n      probe: probe,\n      Transmuxer: transmuxer.Transmuxer,\n      AudioSegmentStream: transmuxer.AudioSegmentStream,\n      VideoSegmentStream: transmuxer.VideoSegmentStream,\n      CaptionParser: captionParser\n    };\n\n    var classCallCheck$$1 = function classCallCheck$$1(instance, Constructor) {\n      if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n      }\n    };\n\n    var createClass$$1 = function () {\n      function defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n          var descriptor = props[i];\n          descriptor.enumerable = descriptor.enumerable || false;\n          descriptor.configurable = true;\n          if (\"value\" in descriptor) descriptor.writable = true;\n          Object.defineProperty(target, descriptor.key, descriptor);\n        }\n      }\n\n      return function (Constructor, protoProps, staticProps) {\n        if (protoProps) defineProperties(Constructor.prototype, protoProps);\n        if (staticProps) defineProperties(Constructor, staticProps);\n        return Constructor;\n      };\n    }();\n\n    /**\n     * @file transmuxer-worker.js\n     */\n\n    /**\n     * Re-emits transmuxer events by converting them into messages to the\n     * world outside the worker.\n     *\n     * @param {Object} transmuxer the transmuxer to wire events on\n     * @private\n     */\n    var wireTransmuxerEvents = function wireTransmuxerEvents(self, transmuxer) {\n      transmuxer.on('data', function (segment) {\n        // transfer ownership of the underlying ArrayBuffer\n        // instead of doing a copy to save memory\n        // ArrayBuffers are transferable but generic TypedArrays are not\n        // @link https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers#Passing_data_by_transferring_ownership_(transferable_objects)\n        var initArray = segment.initSegment;\n\n        segment.initSegment = {\n          data: initArray.buffer,\n          byteOffset: initArray.byteOffset,\n          byteLength: initArray.byteLength\n        };\n\n        var typedArray = segment.data;\n\n        segment.data = typedArray.buffer;\n        self.postMessage({\n          action: 'data',\n          segment: segment,\n          byteOffset: typedArray.byteOffset,\n          byteLength: typedArray.byteLength\n        }, [segment.data]);\n      });\n\n      if (transmuxer.captionStream) {\n        transmuxer.captionStream.on('data', function (caption) {\n          self.postMessage({\n            action: 'caption',\n            data: caption\n          });\n        });\n      }\n\n      transmuxer.on('done', function (data) {\n        self.postMessage({ action: 'done' });\n      });\n\n      transmuxer.on('gopInfo', function (gopInfo) {\n        self.postMessage({\n          action: 'gopInfo',\n          gopInfo: gopInfo\n        });\n      });\n    };\n\n    /**\n     * All incoming messages route through this hash. If no function exists\n     * to handle an incoming message, then we ignore the message.\n     *\n     * @class MessageHandlers\n     * @param {Object} options the options to initialize with\n     */\n\n    var MessageHandlers = function () {\n      function MessageHandlers(self, options) {\n        classCallCheck$$1(this, MessageHandlers);\n\n        this.options = options || {};\n        this.self = self;\n        this.init();\n      }\n\n      /**\n       * initialize our web worker and wire all the events.\n       */\n\n      createClass$$1(MessageHandlers, [{\n        key: 'init',\n        value: function init() {\n          if (this.transmuxer) {\n            this.transmuxer.dispose();\n          }\n          this.transmuxer = new mp4.Transmuxer(this.options);\n          wireTransmuxerEvents(this.self, this.transmuxer);\n        }\n\n        /**\n         * Adds data (a ts segment) to the start of the transmuxer pipeline for\n         * processing.\n         *\n         * @param {ArrayBuffer} data data to push into the muxer\n         */\n\n      }, {\n        key: 'push',\n        value: function push(data) {\n          // Cast array buffer to correct type for transmuxer\n          var segment = new Uint8Array(data.data, data.byteOffset, data.byteLength);\n\n          this.transmuxer.push(segment);\n        }\n\n        /**\n         * Recreate the transmuxer so that the next segment added via `push`\n         * start with a fresh transmuxer.\n         */\n\n      }, {\n        key: 'reset',\n        value: function reset() {\n          this.init();\n        }\n\n        /**\n         * Set the value that will be used as the `baseMediaDecodeTime` time for the\n         * next segment pushed in. Subsequent segments will have their `baseMediaDecodeTime`\n         * set relative to the first based on the PTS values.\n         *\n         * @param {Object} data used to set the timestamp offset in the muxer\n         */\n\n      }, {\n        key: 'setTimestampOffset',\n        value: function setTimestampOffset(data) {\n          var timestampOffset = data.timestampOffset || 0;\n\n          this.transmuxer.setBaseMediaDecodeTime(Math.round(timestampOffset * 90000));\n        }\n      }, {\n        key: 'setAudioAppendStart',\n        value: function setAudioAppendStart(data) {\n          this.transmuxer.setAudioAppendStart(Math.ceil(data.appendStart * 90000));\n        }\n\n        /**\n         * Forces the pipeline to finish processing the last segment and emit it's\n         * results.\n         *\n         * @param {Object} data event data, not really used\n         */\n\n      }, {\n        key: 'flush',\n        value: function flush(data) {\n          this.transmuxer.flush();\n        }\n      }, {\n        key: 'resetCaptions',\n        value: function resetCaptions() {\n          this.transmuxer.resetCaptions();\n        }\n      }, {\n        key: 'alignGopsWith',\n        value: function alignGopsWith(data) {\n          this.transmuxer.alignGopsWith(data.gopsToAlignWith.slice());\n        }\n      }]);\n      return MessageHandlers;\n    }();\n\n    /**\n     * Our web wroker interface so that things can talk to mux.js\n     * that will be running in a web worker. the scope is passed to this by\n     * webworkify.\n     *\n     * @param {Object} self the scope for the web worker\n     */\n\n    var TransmuxerWorker = function TransmuxerWorker(self) {\n      self.onmessage = function (event) {\n        if (event.data.action === 'init' && event.data.options) {\n          this.messageHandlers = new MessageHandlers(self, event.data.options);\n          return;\n        }\n\n        if (!this.messageHandlers) {\n          this.messageHandlers = new MessageHandlers(self);\n        }\n\n        if (event.data && event.data.action && event.data.action !== 'init') {\n          if (this.messageHandlers[event.data.action]) {\n            this.messageHandlers[event.data.action](event.data);\n          }\n        }\n      };\n    };\n\n    var transmuxerWorker = new TransmuxerWorker(self);\n\n    return transmuxerWorker;\n  }();\n});\n\n/**\n * @file - codecs.js - Handles tasks regarding codec strings such as translating them to\n * codec strings, or translating codec strings into objects that can be examined.\n */\n\n// Default codec parameters if none were provided for video and/or audio\nvar defaultCodecs = {\n  videoCodec: 'avc1',\n  videoObjectTypeIndicator: '.4d400d',\n  // AAC-LC\n  audioProfile: '2'\n};\n\n/**\n * Replace the old apple-style `avc1.<dd>.<dd>` codec string with the standard\n * `avc1.<hhhhhh>`\n *\n * @param {Array} codecs an array of codec strings to fix\n * @return {Array} the translated codec array\n * @private\n */\nvar translateLegacyCodecs = function translateLegacyCodecs(codecs) {\n  return codecs.map(function (codec) {\n    return codec.replace(/avc1\\.(\\d+)\\.(\\d+)/i, function (orig, profile, avcLevel) {\n      var profileHex = ('00' + Number(profile).toString(16)).slice(-2);\n      var avcLevelHex = ('00' + Number(avcLevel).toString(16)).slice(-2);\n\n      return 'avc1.' + profileHex + '00' + avcLevelHex;\n    });\n  });\n};\n\n/**\n * Parses a codec string to retrieve the number of codecs specified,\n * the video codec and object type indicator, and the audio profile.\n */\n\nvar parseCodecs = function parseCodecs() {\n  var codecs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n  var result = {\n    codecCount: 0\n  };\n  var parsed = void 0;\n\n  result.codecCount = codecs.split(',').length;\n  result.codecCount = result.codecCount || 2;\n\n  // parse the video codec\n  parsed = /(^|\\s|,)+(avc[13])([^ ,]*)/i.exec(codecs);\n  if (parsed) {\n    result.videoCodec = parsed[2];\n    result.videoObjectTypeIndicator = parsed[3];\n  }\n\n  // parse the last field of the audio codec\n  result.audioProfile = /(^|\\s|,)+mp4a.[0-9A-Fa-f]+\\.([0-9A-Fa-f]+)/i.exec(codecs);\n  result.audioProfile = result.audioProfile && result.audioProfile[2];\n\n  return result;\n};\n\n/**\n * Replace codecs in the codec string with the old apple-style `avc1.<dd>.<dd>` to the\n * standard `avc1.<hhhhhh>`.\n *\n * @param codecString {String} the codec string\n * @return {String} the codec string with old apple-style codecs replaced\n *\n * @private\n */\nvar mapLegacyAvcCodecs = function mapLegacyAvcCodecs(codecString) {\n  return codecString.replace(/avc1\\.(\\d+)\\.(\\d+)/i, function (match) {\n    return translateLegacyCodecs([match])[0];\n  });\n};\n\n/**\n * Build a media mime-type string from a set of parameters\n * @param {String} type either 'audio' or 'video'\n * @param {String} container either 'mp2t' or 'mp4'\n * @param {Array} codecs an array of codec strings to add\n * @return {String} a valid media mime-type\n */\nvar makeMimeTypeString = function makeMimeTypeString(type, container, codecs) {\n  // The codecs array is filtered so that falsey values are\n  // dropped and don't cause Array#join to create spurious\n  // commas\n  return type + '/' + container + '; codecs=\"' + codecs.filter(function (c) {\n    return !!c;\n  }).join(', ') + '\"';\n};\n\n/**\n * Returns the type container based on information in the playlist\n * @param {Playlist} media the current media playlist\n * @return {String} a valid media container type\n */\nvar getContainerType = function getContainerType(media) {\n  // An initialization segment means the media playlist is an iframe\n  // playlist or is using the mp4 container. We don't currently\n  // support iframe playlists, so assume this is signalling mp4\n  // fragments.\n  if (media.segments && media.segments.length && media.segments[0].map) {\n    return 'mp4';\n  }\n  return 'mp2t';\n};\n\n/**\n * Returns a set of codec strings parsed from the playlist or the default\n * codec strings if no codecs were specified in the playlist\n * @param {Playlist} media the current media playlist\n * @return {Object} an object with the video and audio codecs\n */\nvar getCodecs = function getCodecs(media) {\n  // if the codecs were explicitly specified, use them instead of the\n  // defaults\n  var mediaAttributes = media.attributes || {};\n\n  if (mediaAttributes.CODECS) {\n    return parseCodecs(mediaAttributes.CODECS);\n  }\n  return defaultCodecs;\n};\n\nvar audioProfileFromDefault = function audioProfileFromDefault(master, audioGroupId) {\n  if (!master.mediaGroups.AUDIO || !audioGroupId) {\n    return null;\n  }\n\n  var audioGroup = master.mediaGroups.AUDIO[audioGroupId];\n\n  if (!audioGroup) {\n    return null;\n  }\n\n  for (var name in audioGroup) {\n    var audioType = audioGroup[name];\n\n    if (audioType.default && audioType.playlists) {\n      // codec should be the same for all playlists within the audio type\n      return parseCodecs(audioType.playlists[0].attributes.CODECS).audioProfile;\n    }\n  }\n\n  return null;\n};\n\n/**\n * Calculates the MIME type strings for a working configuration of\n * SourceBuffers to play variant streams in a master playlist. If\n * there is no possible working configuration, an empty array will be\n * returned.\n *\n * @param master {Object} the m3u8 object for the master playlist\n * @param media {Object} the m3u8 object for the variant playlist\n * @return {Array} the MIME type strings. If the array has more than\n * one entry, the first element should be applied to the video\n * SourceBuffer and the second to the audio SourceBuffer.\n *\n * @private\n */\nvar mimeTypesForPlaylist = function mimeTypesForPlaylist(master, media) {\n  var containerType = getContainerType(media);\n  var codecInfo = getCodecs(media);\n  var mediaAttributes = media.attributes || {};\n  // Default condition for a traditional HLS (no demuxed audio/video)\n  var isMuxed = true;\n  var isMaat = false;\n\n  if (!media) {\n    // Not enough information\n    return [];\n  }\n\n  if (master.mediaGroups.AUDIO && mediaAttributes.AUDIO) {\n    var audioGroup = master.mediaGroups.AUDIO[mediaAttributes.AUDIO];\n\n    // Handle the case where we are in a multiple-audio track scenario\n    if (audioGroup) {\n      isMaat = true;\n      // Start with the everything demuxed then...\n      isMuxed = false;\n      // ...check to see if any audio group tracks are muxed (ie. lacking a uri)\n      for (var groupId in audioGroup) {\n        // either a uri is present (if the case of HLS and an external playlist), or\n        // playlists is present (in the case of DASH where we don't have external audio\n        // playlists)\n        if (!audioGroup[groupId].uri && !audioGroup[groupId].playlists) {\n          isMuxed = true;\n          break;\n        }\n      }\n    }\n  }\n\n  // HLS with multiple-audio tracks must always get an audio codec.\n  // Put another way, there is no way to have a video-only multiple-audio HLS!\n  if (isMaat && !codecInfo.audioProfile) {\n    if (!isMuxed) {\n      // It is possible for codecs to be specified on the audio media group playlist but\n      // not on the rendition playlist. This is mostly the case for DASH, where audio and\n      // video are always separate (and separately specified).\n      codecInfo.audioProfile = audioProfileFromDefault(master, mediaAttributes.AUDIO);\n    }\n\n    if (!codecInfo.audioProfile) {\n      videojs$1.log.warn('Multiple audio tracks present but no audio codec string is specified. ' + 'Attempting to use the default audio codec (mp4a.40.2)');\n      codecInfo.audioProfile = defaultCodecs.audioProfile;\n    }\n  }\n\n  // Generate the final codec strings from the codec object generated above\n  var codecStrings = {};\n\n  if (codecInfo.videoCodec) {\n    codecStrings.video = '' + codecInfo.videoCodec + codecInfo.videoObjectTypeIndicator;\n  }\n\n  if (codecInfo.audioProfile) {\n    codecStrings.audio = 'mp4a.40.' + codecInfo.audioProfile;\n  }\n\n  // Finally, make and return an array with proper mime-types depending on\n  // the configuration\n  var justAudio = makeMimeTypeString('audio', containerType, [codecStrings.audio]);\n  var justVideo = makeMimeTypeString('video', containerType, [codecStrings.video]);\n  var bothVideoAudio = makeMimeTypeString('video', containerType, [codecStrings.video, codecStrings.audio]);\n\n  if (isMaat) {\n    if (!isMuxed && codecStrings.video) {\n      return [justVideo, justAudio];\n    }\n\n    if (!isMuxed && !codecStrings.video) {\n      // There is no muxed content and no video codec string, so this is an audio only\n      // stream with alternate audio.\n      return [justAudio, justAudio];\n    }\n\n    // There exists the possiblity that this will return a `video/container`\n    // mime-type for the first entry in the array even when there is only audio.\n    // This doesn't appear to be a problem and simplifies the code.\n    return [bothVideoAudio, justAudio];\n  }\n\n  // If there is no video codec at all, always just return a single\n  // audio/<container> mime-type\n  if (!codecStrings.video) {\n    return [justAudio];\n  }\n\n  // When not using separate audio media groups, audio and video is\n  // *always* muxed\n  return [bothVideoAudio];\n};\n\n/**\n * Parse a content type header into a type and parameters\n * object\n *\n * @param {String} type the content type header\n * @return {Object} the parsed content-type\n * @private\n */\nvar parseContentType = function parseContentType(type) {\n  var object = { type: '', parameters: {} };\n  var parameters = type.trim().split(';');\n\n  // first parameter should always be content-type\n  object.type = parameters.shift().trim();\n  parameters.forEach(function (parameter) {\n    var pair = parameter.trim().split('=');\n\n    if (pair.length > 1) {\n      var name = pair[0].replace(/\"/g, '').trim();\n      var value = pair[1].replace(/\"/g, '').trim();\n\n      object.parameters[name] = value;\n    }\n  });\n\n  return object;\n};\n\n/**\n * Check if a codec string refers to an audio codec.\n *\n * @param {String} codec codec string to check\n * @return {Boolean} if this is an audio codec\n * @private\n */\nvar isAudioCodec = function isAudioCodec(codec) {\n  return (/mp4a\\.\\d+.\\d+/i.test(codec)\n  );\n};\n\n/**\n * Check if a codec string refers to a video codec.\n *\n * @param {String} codec codec string to check\n * @return {Boolean} if this is a video codec\n * @private\n */\nvar isVideoCodec = function isVideoCodec(codec) {\n  return (/avc1\\.[\\da-f]+/i.test(codec)\n  );\n};\n\n/**\n * Returns a list of gops in the buffer that have a pts value of 3 seconds or more in\n * front of current time.\n *\n * @param {Array} buffer\n *        The current buffer of gop information\n * @param {Number} currentTime\n *        The current time\n * @param {Double} mapping\n *        Offset to map display time to stream presentation time\n * @return {Array}\n *         List of gops considered safe to append over\n */\nvar gopsSafeToAlignWith = function gopsSafeToAlignWith(buffer, currentTime, mapping) {\n  if (typeof currentTime === 'undefined' || currentTime === null || !buffer.length) {\n    return [];\n  }\n\n  // pts value for current time + 3 seconds to give a bit more wiggle room\n  var currentTimePts = Math.ceil((currentTime - mapping + 3) * 90000);\n\n  var i = void 0;\n\n  for (i = 0; i < buffer.length; i++) {\n    if (buffer[i].pts > currentTimePts) {\n      break;\n    }\n  }\n\n  return buffer.slice(i);\n};\n\n/**\n * Appends gop information (timing and byteLength) received by the transmuxer for the\n * gops appended in the last call to appendBuffer\n *\n * @param {Array} buffer\n *        The current buffer of gop information\n * @param {Array} gops\n *        List of new gop information\n * @param {boolean} replace\n *        If true, replace the buffer with the new gop information. If false, append the\n *        new gop information to the buffer in the right location of time.\n * @return {Array}\n *         Updated list of gop information\n */\nvar updateGopBuffer = function updateGopBuffer(buffer, gops, replace) {\n  if (!gops.length) {\n    return buffer;\n  }\n\n  if (replace) {\n    // If we are in safe append mode, then completely overwrite the gop buffer\n    // with the most recent appeneded data. This will make sure that when appending\n    // future segments, we only try to align with gops that are both ahead of current\n    // time and in the last segment appended.\n    return gops.slice();\n  }\n\n  var start = gops[0].pts;\n\n  var i = 0;\n\n  for (i; i < buffer.length; i++) {\n    if (buffer[i].pts >= start) {\n      break;\n    }\n  }\n\n  return buffer.slice(0, i).concat(gops);\n};\n\n/**\n * Removes gop information in buffer that overlaps with provided start and end\n *\n * @param {Array} buffer\n *        The current buffer of gop information\n * @param {Double} start\n *        position to start the remove at\n * @param {Double} end\n *        position to end the remove at\n * @param {Double} mapping\n *        Offset to map display time to stream presentation time\n */\nvar removeGopBuffer = function removeGopBuffer(buffer, start, end, mapping) {\n  var startPts = Math.ceil((start - mapping) * 90000);\n  var endPts = Math.ceil((end - mapping) * 90000);\n  var updatedBuffer = buffer.slice();\n\n  var i = buffer.length;\n\n  while (i--) {\n    if (buffer[i].pts <= endPts) {\n      break;\n    }\n  }\n\n  if (i === -1) {\n    // no removal because end of remove range is before start of buffer\n    return updatedBuffer;\n  }\n\n  var j = i + 1;\n\n  while (j--) {\n    if (buffer[j].pts <= startPts) {\n      break;\n    }\n  }\n\n  // clamp remove range start to 0 index\n  j = Math.max(j, 0);\n\n  updatedBuffer.splice(j, i - j + 1);\n\n  return updatedBuffer;\n};\n\nvar buffered = function buffered(videoBuffer, audioBuffer, audioDisabled) {\n  var start = null;\n  var end = null;\n  var arity = 0;\n  var extents = [];\n  var ranges = [];\n\n  // neither buffer has been created yet\n  if (!videoBuffer && !audioBuffer) {\n    return videojs$1.createTimeRange();\n  }\n\n  // only one buffer is configured\n  if (!videoBuffer) {\n    return audioBuffer.buffered;\n  }\n  if (!audioBuffer) {\n    return videoBuffer.buffered;\n  }\n\n  // both buffers are configured\n  if (audioDisabled) {\n    return videoBuffer.buffered;\n  }\n\n  // both buffers are empty\n  if (videoBuffer.buffered.length === 0 && audioBuffer.buffered.length === 0) {\n    return videojs$1.createTimeRange();\n  }\n\n  // Handle the case where we have both buffers and create an\n  // intersection of the two\n  var videoBuffered = videoBuffer.buffered;\n  var audioBuffered = audioBuffer.buffered;\n  var count = videoBuffered.length;\n\n  // A) Gather up all start and end times\n  while (count--) {\n    extents.push({ time: videoBuffered.start(count), type: 'start' });\n    extents.push({ time: videoBuffered.end(count), type: 'end' });\n  }\n  count = audioBuffered.length;\n  while (count--) {\n    extents.push({ time: audioBuffered.start(count), type: 'start' });\n    extents.push({ time: audioBuffered.end(count), type: 'end' });\n  }\n  // B) Sort them by time\n  extents.sort(function (a, b) {\n    return a.time - b.time;\n  });\n\n  // C) Go along one by one incrementing arity for start and decrementing\n  //    arity for ends\n  for (count = 0; count < extents.length; count++) {\n    if (extents[count].type === 'start') {\n      arity++;\n\n      // D) If arity is ever incremented to 2 we are entering an\n      //    overlapping range\n      if (arity === 2) {\n        start = extents[count].time;\n      }\n    } else if (extents[count].type === 'end') {\n      arity--;\n\n      // E) If arity is ever decremented to 1 we leaving an\n      //    overlapping range\n      if (arity === 1) {\n        end = extents[count].time;\n      }\n    }\n\n    // F) Record overlapping ranges\n    if (start !== null && end !== null) {\n      ranges.push([start, end]);\n      start = null;\n      end = null;\n    }\n  }\n\n  return videojs$1.createTimeRanges(ranges);\n};\n\n/**\n * @file virtual-source-buffer.js\n */\n\n// We create a wrapper around the SourceBuffer so that we can manage the\n// state of the `updating` property manually. We have to do this because\n// Firefox changes `updating` to false long before triggering `updateend`\n// events and that was causing strange problems in videojs-contrib-hls\nvar makeWrappedSourceBuffer = function makeWrappedSourceBuffer(mediaSource, mimeType) {\n  var sourceBuffer = mediaSource.addSourceBuffer(mimeType);\n  var wrapper = Object.create(null);\n\n  wrapper.updating = false;\n  wrapper.realBuffer_ = sourceBuffer;\n\n  var _loop = function _loop(key) {\n    if (typeof sourceBuffer[key] === 'function') {\n      wrapper[key] = function () {\n        return sourceBuffer[key].apply(sourceBuffer, arguments);\n      };\n    } else if (typeof wrapper[key] === 'undefined') {\n      Object.defineProperty(wrapper, key, {\n        get: function get$$1() {\n          return sourceBuffer[key];\n        },\n        set: function set$$1(v) {\n          return sourceBuffer[key] = v;\n        }\n      });\n    }\n  };\n\n  for (var key in sourceBuffer) {\n    _loop(key);\n  }\n\n  return wrapper;\n};\n\n/**\n * VirtualSourceBuffers exist so that we can transmux non native formats\n * into a native format, but keep the same api as a native source buffer.\n * It creates a transmuxer, that works in its own thread (a web worker) and\n * that transmuxer muxes the data into a native format. VirtualSourceBuffer will\n * then send all of that data to the naive sourcebuffer so that it is\n * indestinguishable from a natively supported format.\n *\n * @param {HtmlMediaSource} mediaSource the parent mediaSource\n * @param {Array} codecs array of codecs that we will be dealing with\n * @class VirtualSourceBuffer\n * @extends video.js.EventTarget\n */\n\nvar VirtualSourceBuffer = function (_videojs$EventTarget) {\n  inherits$1(VirtualSourceBuffer, _videojs$EventTarget);\n\n  function VirtualSourceBuffer(mediaSource, codecs) {\n    classCallCheck$1(this, VirtualSourceBuffer);\n\n    var _this = possibleConstructorReturn$1(this, (VirtualSourceBuffer.__proto__ || Object.getPrototypeOf(VirtualSourceBuffer)).call(this, videojs$1.EventTarget));\n\n    _this.timestampOffset_ = 0;\n    _this.pendingBuffers_ = [];\n    _this.bufferUpdating_ = false;\n\n    _this.mediaSource_ = mediaSource;\n    _this.codecs_ = codecs;\n    _this.audioCodec_ = null;\n    _this.videoCodec_ = null;\n    _this.audioDisabled_ = false;\n    _this.appendAudioInitSegment_ = true;\n    _this.gopBuffer_ = [];\n    _this.timeMapping_ = 0;\n    _this.safeAppend_ = videojs$1.browser.IE_VERSION >= 11;\n\n    var options = {\n      remux: false,\n      alignGopsAtEnd: _this.safeAppend_\n    };\n\n    _this.codecs_.forEach(function (codec) {\n      if (isAudioCodec(codec)) {\n        _this.audioCodec_ = codec;\n      } else if (isVideoCodec(codec)) {\n        _this.videoCodec_ = codec;\n      }\n    });\n\n    // append muxed segments to their respective native buffers as\n    // soon as they are available\n    _this.transmuxer_ = new TransmuxWorker();\n    _this.transmuxer_.postMessage({ action: 'init', options: options });\n\n    _this.transmuxer_.onmessage = function (event) {\n      if (event.data.action === 'data') {\n        return _this.data_(event);\n      }\n\n      if (event.data.action === 'done') {\n        return _this.done_(event);\n      }\n\n      if (event.data.action === 'gopInfo') {\n        return _this.appendGopInfo_(event);\n      }\n    };\n\n    // this timestampOffset is a property with the side-effect of resetting\n    // baseMediaDecodeTime in the transmuxer on the setter\n    Object.defineProperty(_this, 'timestampOffset', {\n      get: function get$$1() {\n        return this.timestampOffset_;\n      },\n      set: function set$$1(val) {\n        if (typeof val === 'number' && val >= 0) {\n          this.timestampOffset_ = val;\n          this.appendAudioInitSegment_ = true;\n\n          // reset gop buffer on timestampoffset as this signals a change in timeline\n          this.gopBuffer_.length = 0;\n          this.timeMapping_ = 0;\n\n          // We have to tell the transmuxer to set the baseMediaDecodeTime to\n          // the desired timestampOffset for the next segment\n          this.transmuxer_.postMessage({\n            action: 'setTimestampOffset',\n            timestampOffset: val\n          });\n        }\n      }\n    });\n\n    // setting the append window affects both source buffers\n    Object.defineProperty(_this, 'appendWindowStart', {\n      get: function get$$1() {\n        return (this.videoBuffer_ || this.audioBuffer_).appendWindowStart;\n      },\n      set: function set$$1(start) {\n        if (this.videoBuffer_) {\n          this.videoBuffer_.appendWindowStart = start;\n        }\n        if (this.audioBuffer_) {\n          this.audioBuffer_.appendWindowStart = start;\n        }\n      }\n    });\n\n    // this buffer is \"updating\" if either of its native buffers are\n    Object.defineProperty(_this, 'updating', {\n      get: function get$$1() {\n        return !!(this.bufferUpdating_ || !this.audioDisabled_ && this.audioBuffer_ && this.audioBuffer_.updating || this.videoBuffer_ && this.videoBuffer_.updating);\n      }\n    });\n\n    // the buffered property is the intersection of the buffered\n    // ranges of the native source buffers\n    Object.defineProperty(_this, 'buffered', {\n      get: function get$$1() {\n        return buffered(this.videoBuffer_, this.audioBuffer_, this.audioDisabled_);\n      }\n    });\n    return _this;\n  }\n\n  /**\n   * When we get a data event from the transmuxer\n   * we call this function and handle the data that\n   * was sent to us\n   *\n   * @private\n   * @param {Event} event the data event from the transmuxer\n   */\n\n  createClass$1(VirtualSourceBuffer, [{\n    key: 'data_',\n    value: function data_(event) {\n      var segment = event.data.segment;\n\n      // Cast ArrayBuffer to TypedArray\n      segment.data = new Uint8Array(segment.data, event.data.byteOffset, event.data.byteLength);\n\n      segment.initSegment = new Uint8Array(segment.initSegment.data, segment.initSegment.byteOffset, segment.initSegment.byteLength);\n\n      createTextTracksIfNecessary(this, this.mediaSource_, segment);\n\n      // Add the segments to the pendingBuffers array\n      this.pendingBuffers_.push(segment);\n      return;\n    }\n\n    /**\n     * When we get a done event from the transmuxer\n     * we call this function and we process all\n     * of the pending data that we have been saving in the\n     * data_ function\n     *\n     * @private\n     * @param {Event} event the done event from the transmuxer\n     */\n\n  }, {\n    key: 'done_',\n    value: function done_(event) {\n      // Don't process and append data if the mediaSource is closed\n      if (this.mediaSource_.readyState === 'closed') {\n        this.pendingBuffers_.length = 0;\n        return;\n      }\n\n      // All buffers should have been flushed from the muxer\n      // start processing anything we have received\n      this.processPendingSegments_();\n      return;\n    }\n\n    /**\n     * Create our internal native audio/video source buffers and add\n     * event handlers to them with the following conditions:\n     * 1. they do not already exist on the mediaSource\n     * 2. this VSB has a codec for them\n     *\n     * @private\n     */\n\n  }, {\n    key: 'createRealSourceBuffers_',\n    value: function createRealSourceBuffers_() {\n      var _this2 = this;\n\n      var types = ['audio', 'video'];\n\n      types.forEach(function (type) {\n        // Don't create a SourceBuffer of this type if we don't have a\n        // codec for it\n        if (!_this2[type + 'Codec_']) {\n          return;\n        }\n\n        // Do nothing if a SourceBuffer of this type already exists\n        if (_this2[type + 'Buffer_']) {\n          return;\n        }\n\n        var buffer = null;\n\n        // If the mediasource already has a SourceBuffer for the codec\n        // use that\n        if (_this2.mediaSource_[type + 'Buffer_']) {\n          buffer = _this2.mediaSource_[type + 'Buffer_'];\n          // In multiple audio track cases, the audio source buffer is disabled\n          // on the main VirtualSourceBuffer by the HTMLMediaSource much earlier\n          // than createRealSourceBuffers_ is called to create the second\n          // VirtualSourceBuffer because that happens as a side-effect of\n          // videojs-contrib-hls starting the audioSegmentLoader. As a result,\n          // the audioBuffer is essentially \"ownerless\" and no one will toggle\n          // the `updating` state back to false once the `updateend` event is received\n          //\n          // Setting `updating` to false manually will work around this\n          // situation and allow work to continue\n          buffer.updating = false;\n        } else {\n          var codecProperty = type + 'Codec_';\n          var mimeType = type + '/mp4;codecs=\"' + _this2[codecProperty] + '\"';\n\n          buffer = makeWrappedSourceBuffer(_this2.mediaSource_.nativeMediaSource_, mimeType);\n\n          _this2.mediaSource_[type + 'Buffer_'] = buffer;\n        }\n\n        _this2[type + 'Buffer_'] = buffer;\n\n        // Wire up the events to the SourceBuffer\n        ['update', 'updatestart', 'updateend'].forEach(function (event) {\n          buffer.addEventListener(event, function () {\n            // if audio is disabled\n            if (type === 'audio' && _this2.audioDisabled_) {\n              return;\n            }\n\n            if (event === 'updateend') {\n              _this2[type + 'Buffer_'].updating = false;\n            }\n\n            var shouldTrigger = types.every(function (t) {\n              // skip checking audio's updating status if audio\n              // is not enabled\n              if (t === 'audio' && _this2.audioDisabled_) {\n                return true;\n              }\n              // if the other type if updating we don't trigger\n              if (type !== t && _this2[t + 'Buffer_'] && _this2[t + 'Buffer_'].updating) {\n                return false;\n              }\n              return true;\n            });\n\n            if (shouldTrigger) {\n              return _this2.trigger(event);\n            }\n          });\n        });\n      });\n    }\n\n    /**\n     * Emulate the native mediasource function, but our function will\n     * send all of the proposed segments to the transmuxer so that we\n     * can transmux them before we append them to our internal\n     * native source buffers in the correct format.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/appendBuffer\n     * @param {Uint8Array} segment the segment to append to the buffer\n     */\n\n  }, {\n    key: 'appendBuffer',\n    value: function appendBuffer(segment) {\n      // Start the internal \"updating\" state\n      this.bufferUpdating_ = true;\n\n      if (this.audioBuffer_ && this.audioBuffer_.buffered.length) {\n        var audioBuffered = this.audioBuffer_.buffered;\n\n        this.transmuxer_.postMessage({\n          action: 'setAudioAppendStart',\n          appendStart: audioBuffered.end(audioBuffered.length - 1)\n        });\n      }\n\n      if (this.videoBuffer_) {\n        this.transmuxer_.postMessage({\n          action: 'alignGopsWith',\n          gopsToAlignWith: gopsSafeToAlignWith(this.gopBuffer_, this.mediaSource_.player_ ? this.mediaSource_.player_.currentTime() : null, this.timeMapping_)\n        });\n      }\n\n      this.transmuxer_.postMessage({\n        action: 'push',\n        // Send the typed-array of data as an ArrayBuffer so that\n        // it can be sent as a \"Transferable\" and avoid the costly\n        // memory copy\n        data: segment.buffer,\n\n        // To recreate the original typed-array, we need information\n        // about what portion of the ArrayBuffer it was a view into\n        byteOffset: segment.byteOffset,\n        byteLength: segment.byteLength\n      }, [segment.buffer]);\n      this.transmuxer_.postMessage({ action: 'flush' });\n    }\n\n    /**\n     * Appends gop information (timing and byteLength) received by the transmuxer for the\n     * gops appended in the last call to appendBuffer\n     *\n     * @param {Event} event\n     *        The gopInfo event from the transmuxer\n     * @param {Array} event.data.gopInfo\n     *        List of gop info to append\n     */\n\n  }, {\n    key: 'appendGopInfo_',\n    value: function appendGopInfo_(event) {\n      this.gopBuffer_ = updateGopBuffer(this.gopBuffer_, event.data.gopInfo, this.safeAppend_);\n    }\n\n    /**\n     * Emulate the native mediasource function and remove parts\n     * of the buffer from any of our internal buffers that exist\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/remove\n     * @param {Double} start position to start the remove at\n     * @param {Double} end position to end the remove at\n     */\n\n  }, {\n    key: 'remove',\n    value: function remove(start, end) {\n      if (this.videoBuffer_) {\n        this.videoBuffer_.updating = true;\n        this.videoBuffer_.remove(start, end);\n        this.gopBuffer_ = removeGopBuffer(this.gopBuffer_, start, end, this.timeMapping_);\n      }\n      if (!this.audioDisabled_ && this.audioBuffer_) {\n        this.audioBuffer_.updating = true;\n        this.audioBuffer_.remove(start, end);\n      }\n\n      // Remove Metadata Cues (id3)\n      removeCuesFromTrack(start, end, this.metadataTrack_);\n\n      // Remove Any Captions\n      if (this.inbandTextTracks_) {\n        for (var track in this.inbandTextTracks_) {\n          removeCuesFromTrack(start, end, this.inbandTextTracks_[track]);\n        }\n      }\n    }\n\n    /**\n     * Process any segments that the muxer has output\n     * Concatenate segments together based on type and append them into\n     * their respective sourceBuffers\n     *\n     * @private\n     */\n\n  }, {\n    key: 'processPendingSegments_',\n    value: function processPendingSegments_() {\n      var sortedSegments = {\n        video: {\n          segments: [],\n          bytes: 0\n        },\n        audio: {\n          segments: [],\n          bytes: 0\n        },\n        captions: [],\n        metadata: []\n      };\n\n      // Sort segments into separate video/audio arrays and\n      // keep track of their total byte lengths\n      sortedSegments = this.pendingBuffers_.reduce(function (segmentObj, segment) {\n        var type = segment.type;\n        var data = segment.data;\n        var initSegment = segment.initSegment;\n\n        segmentObj[type].segments.push(data);\n        segmentObj[type].bytes += data.byteLength;\n\n        segmentObj[type].initSegment = initSegment;\n\n        // Gather any captions into a single array\n        if (segment.captions) {\n          segmentObj.captions = segmentObj.captions.concat(segment.captions);\n        }\n\n        if (segment.info) {\n          segmentObj[type].info = segment.info;\n        }\n\n        // Gather any metadata into a single array\n        if (segment.metadata) {\n          segmentObj.metadata = segmentObj.metadata.concat(segment.metadata);\n        }\n\n        return segmentObj;\n      }, sortedSegments);\n\n      // Create the real source buffers if they don't exist by now since we\n      // finally are sure what tracks are contained in the source\n      if (!this.videoBuffer_ && !this.audioBuffer_) {\n        // Remove any codecs that may have been specified by default but\n        // are no longer applicable now\n        if (sortedSegments.video.bytes === 0) {\n          this.videoCodec_ = null;\n        }\n        if (sortedSegments.audio.bytes === 0) {\n          this.audioCodec_ = null;\n        }\n\n        this.createRealSourceBuffers_();\n      }\n\n      if (sortedSegments.audio.info) {\n        this.mediaSource_.trigger({ type: 'audioinfo', info: sortedSegments.audio.info });\n      }\n      if (sortedSegments.video.info) {\n        this.mediaSource_.trigger({ type: 'videoinfo', info: sortedSegments.video.info });\n      }\n\n      if (this.appendAudioInitSegment_) {\n        if (!this.audioDisabled_ && this.audioBuffer_) {\n          sortedSegments.audio.segments.unshift(sortedSegments.audio.initSegment);\n          sortedSegments.audio.bytes += sortedSegments.audio.initSegment.byteLength;\n        }\n        this.appendAudioInitSegment_ = false;\n      }\n\n      var triggerUpdateend = false;\n\n      // Merge multiple video and audio segments into one and append\n      if (this.videoBuffer_ && sortedSegments.video.bytes) {\n        sortedSegments.video.segments.unshift(sortedSegments.video.initSegment);\n        sortedSegments.video.bytes += sortedSegments.video.initSegment.byteLength;\n        this.concatAndAppendSegments_(sortedSegments.video, this.videoBuffer_);\n        // TODO: are video tracks the only ones with text tracks?\n        addTextTrackData(this, sortedSegments.captions, sortedSegments.metadata);\n      } else if (this.videoBuffer_ && (this.audioDisabled_ || !this.audioBuffer_)) {\n        // The transmuxer did not return any bytes of video, meaning it was all trimmed\n        // for gop alignment. Since we have a video buffer and audio is disabled, updateend\n        // will never be triggered by this source buffer, which will cause contrib-hls\n        // to be stuck forever waiting for updateend. If audio is not disabled, updateend\n        // will be triggered by the audio buffer, which will be sent upwards since the video\n        // buffer will not be in an updating state.\n        triggerUpdateend = true;\n      }\n\n      if (!this.audioDisabled_ && this.audioBuffer_) {\n        this.concatAndAppendSegments_(sortedSegments.audio, this.audioBuffer_);\n      }\n\n      this.pendingBuffers_.length = 0;\n\n      if (triggerUpdateend) {\n        this.trigger('updateend');\n      }\n\n      // We are no longer in the internal \"updating\" state\n      this.bufferUpdating_ = false;\n    }\n\n    /**\n     * Combine all segments into a single Uint8Array and then append them\n     * to the destination buffer\n     *\n     * @param {Object} segmentObj\n     * @param {SourceBuffer} destinationBuffer native source buffer to append data to\n     * @private\n     */\n\n  }, {\n    key: 'concatAndAppendSegments_',\n    value: function concatAndAppendSegments_(segmentObj, destinationBuffer) {\n      var offset = 0;\n      var tempBuffer = void 0;\n\n      if (segmentObj.bytes) {\n        tempBuffer = new Uint8Array(segmentObj.bytes);\n\n        // Combine the individual segments into one large typed-array\n        segmentObj.segments.forEach(function (segment) {\n          tempBuffer.set(segment, offset);\n          offset += segment.byteLength;\n        });\n\n        try {\n          destinationBuffer.updating = true;\n          destinationBuffer.appendBuffer(tempBuffer);\n        } catch (error) {\n          if (this.mediaSource_.player_) {\n            this.mediaSource_.player_.error({\n              code: -3,\n              type: 'APPEND_BUFFER_ERR',\n              message: error.message,\n              originalError: error\n            });\n          }\n        }\n      }\n    }\n\n    /**\n     * Emulate the native mediasource function. abort any soureBuffer\n     * actions and throw out any un-appended data.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/abort\n     */\n\n  }, {\n    key: 'abort',\n    value: function abort() {\n      if (this.videoBuffer_) {\n        this.videoBuffer_.abort();\n      }\n      if (!this.audioDisabled_ && this.audioBuffer_) {\n        this.audioBuffer_.abort();\n      }\n      if (this.transmuxer_) {\n        this.transmuxer_.postMessage({ action: 'reset' });\n      }\n      this.pendingBuffers_.length = 0;\n      this.bufferUpdating_ = false;\n    }\n  }]);\n  return VirtualSourceBuffer;\n}(videojs$1.EventTarget);\n\n/**\n * @file html-media-source.js\n */\n\n/**\n * Our MediaSource implementation in HTML, mimics native\n * MediaSource where/if possible.\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource\n * @class HtmlMediaSource\n * @extends videojs.EventTarget\n */\n\nvar HtmlMediaSource = function (_videojs$EventTarget) {\n  inherits$1(HtmlMediaSource, _videojs$EventTarget);\n\n  function HtmlMediaSource() {\n    classCallCheck$1(this, HtmlMediaSource);\n\n    var _this = possibleConstructorReturn$1(this, (HtmlMediaSource.__proto__ || Object.getPrototypeOf(HtmlMediaSource)).call(this));\n\n    var property = void 0;\n\n    _this.nativeMediaSource_ = new window$1.MediaSource();\n    // delegate to the native MediaSource's methods by default\n    for (property in _this.nativeMediaSource_) {\n      if (!(property in HtmlMediaSource.prototype) && typeof _this.nativeMediaSource_[property] === 'function') {\n        _this[property] = _this.nativeMediaSource_[property].bind(_this.nativeMediaSource_);\n      }\n    }\n\n    // emulate `duration` and `seekable` until seeking can be\n    // handled uniformly for live streams\n    // see https://github.com/w3c/media-source/issues/5\n    _this.duration_ = NaN;\n    Object.defineProperty(_this, 'duration', {\n      get: function get$$1() {\n        if (this.duration_ === Infinity) {\n          return this.duration_;\n        }\n        return this.nativeMediaSource_.duration;\n      },\n      set: function set$$1(duration) {\n        this.duration_ = duration;\n        if (duration !== Infinity) {\n          this.nativeMediaSource_.duration = duration;\n          return;\n        }\n      }\n    });\n    Object.defineProperty(_this, 'seekable', {\n      get: function get$$1() {\n        if (this.duration_ === Infinity) {\n          return videojs$1.createTimeRanges([[0, this.nativeMediaSource_.duration]]);\n        }\n        return this.nativeMediaSource_.seekable;\n      }\n    });\n\n    Object.defineProperty(_this, 'readyState', {\n      get: function get$$1() {\n        return this.nativeMediaSource_.readyState;\n      }\n    });\n\n    Object.defineProperty(_this, 'activeSourceBuffers', {\n      get: function get$$1() {\n        return this.activeSourceBuffers_;\n      }\n    });\n\n    // the list of virtual and native SourceBuffers created by this\n    // MediaSource\n    _this.sourceBuffers = [];\n\n    _this.activeSourceBuffers_ = [];\n\n    /**\n     * update the list of active source buffers based upon various\n     * imformation from HLS and video.js\n     *\n     * @private\n     */\n    _this.updateActiveSourceBuffers_ = function () {\n      // Retain the reference but empty the array\n      _this.activeSourceBuffers_.length = 0;\n\n      // If there is only one source buffer, then it will always be active and audio will\n      // be disabled based on the codec of the source buffer\n      if (_this.sourceBuffers.length === 1) {\n        var sourceBuffer = _this.sourceBuffers[0];\n\n        sourceBuffer.appendAudioInitSegment_ = true;\n        sourceBuffer.audioDisabled_ = !sourceBuffer.audioCodec_;\n        _this.activeSourceBuffers_.push(sourceBuffer);\n        return;\n      }\n\n      // There are 2 source buffers, a combined (possibly video only) source buffer and\n      // and an audio only source buffer.\n      // By default, the audio in the combined virtual source buffer is enabled\n      // and the audio-only source buffer (if it exists) is disabled.\n      var disableCombined = false;\n      var disableAudioOnly = true;\n\n      // TODO: maybe we can store the sourcebuffers on the track objects?\n      // safari may do something like this\n      for (var i = 0; i < _this.player_.audioTracks().length; i++) {\n        var track = _this.player_.audioTracks()[i];\n\n        if (track.enabled && track.kind !== 'main') {\n          // The enabled track is an alternate audio track so disable the audio in\n          // the combined source buffer and enable the audio-only source buffer.\n          disableCombined = true;\n          disableAudioOnly = false;\n          break;\n        }\n      }\n\n      _this.sourceBuffers.forEach(function (sourceBuffer, index) {\n        /* eslinst-disable */\n        // TODO once codecs are required, we can switch to using the codecs to determine\n        //      what stream is the video stream, rather than relying on videoTracks\n        /* eslinst-enable */\n\n        sourceBuffer.appendAudioInitSegment_ = true;\n\n        if (sourceBuffer.videoCodec_ && sourceBuffer.audioCodec_) {\n          // combined\n          sourceBuffer.audioDisabled_ = disableCombined;\n        } else if (sourceBuffer.videoCodec_ && !sourceBuffer.audioCodec_) {\n          // If the \"combined\" source buffer is video only, then we do not want\n          // disable the audio-only source buffer (this is mostly for demuxed\n          // audio and video hls)\n          sourceBuffer.audioDisabled_ = true;\n          disableAudioOnly = false;\n        } else if (!sourceBuffer.videoCodec_ && sourceBuffer.audioCodec_) {\n          // audio only\n          // In the case of audio only with alternate audio and disableAudioOnly is true\n          // this means we want to disable the audio on the alternate audio sourcebuffer\n          // but not the main \"combined\" source buffer. The \"combined\" source buffer is\n          // always at index 0, so this ensures audio won't be disabled in both source\n          // buffers.\n          sourceBuffer.audioDisabled_ = index ? disableAudioOnly : !disableAudioOnly;\n          if (sourceBuffer.audioDisabled_) {\n            return;\n          }\n        }\n\n        _this.activeSourceBuffers_.push(sourceBuffer);\n      });\n    };\n\n    _this.onPlayerMediachange_ = function () {\n      _this.sourceBuffers.forEach(function (sourceBuffer) {\n        sourceBuffer.appendAudioInitSegment_ = true;\n      });\n    };\n\n    _this.onHlsReset_ = function () {\n      _this.sourceBuffers.forEach(function (sourceBuffer) {\n        if (sourceBuffer.transmuxer_) {\n          sourceBuffer.transmuxer_.postMessage({ action: 'resetCaptions' });\n        }\n      });\n    };\n\n    _this.onHlsSegmentTimeMapping_ = function (event) {\n      _this.sourceBuffers.forEach(function (buffer) {\n        return buffer.timeMapping_ = event.mapping;\n      });\n    };\n\n    // Re-emit MediaSource events on the polyfill\n    ['sourceopen', 'sourceclose', 'sourceended'].forEach(function (eventName) {\n      this.nativeMediaSource_.addEventListener(eventName, this.trigger.bind(this));\n    }, _this);\n\n    // capture the associated player when the MediaSource is\n    // successfully attached\n    _this.on('sourceopen', function (event) {\n      // Get the player this MediaSource is attached to\n      var video = document.querySelector('[src=\"' + _this.url_ + '\"]');\n\n      if (!video) {\n        return;\n      }\n\n      _this.player_ = videojs$1(video.parentNode);\n\n      // hls-reset is fired by videojs.Hls on to the tech after the main SegmentLoader\n      // resets its state and flushes the buffer\n      _this.player_.tech_.on('hls-reset', _this.onHlsReset_);\n      // hls-segment-time-mapping is fired by videojs.Hls on to the tech after the main\n      // SegmentLoader inspects an MTS segment and has an accurate stream to display\n      // time mapping\n      _this.player_.tech_.on('hls-segment-time-mapping', _this.onHlsSegmentTimeMapping_);\n\n      if (_this.player_.audioTracks && _this.player_.audioTracks()) {\n        _this.player_.audioTracks().on('change', _this.updateActiveSourceBuffers_);\n        _this.player_.audioTracks().on('addtrack', _this.updateActiveSourceBuffers_);\n        _this.player_.audioTracks().on('removetrack', _this.updateActiveSourceBuffers_);\n      }\n\n      _this.player_.on('mediachange', _this.onPlayerMediachange_);\n    });\n\n    _this.on('sourceended', function (event) {\n      var duration = durationOfVideo(_this.duration);\n\n      for (var i = 0; i < _this.sourceBuffers.length; i++) {\n        var sourcebuffer = _this.sourceBuffers[i];\n        var cues = sourcebuffer.metadataTrack_ && sourcebuffer.metadataTrack_.cues;\n\n        if (cues && cues.length) {\n          cues[cues.length - 1].endTime = duration;\n        }\n      }\n    });\n\n    // explicitly terminate any WebWorkers that were created\n    // by SourceHandlers\n    _this.on('sourceclose', function (event) {\n      this.sourceBuffers.forEach(function (sourceBuffer) {\n        if (sourceBuffer.transmuxer_) {\n          sourceBuffer.transmuxer_.terminate();\n        }\n      });\n\n      this.sourceBuffers.length = 0;\n      if (!this.player_) {\n        return;\n      }\n\n      if (this.player_.audioTracks && this.player_.audioTracks()) {\n        this.player_.audioTracks().off('change', this.updateActiveSourceBuffers_);\n        this.player_.audioTracks().off('addtrack', this.updateActiveSourceBuffers_);\n        this.player_.audioTracks().off('removetrack', this.updateActiveSourceBuffers_);\n      }\n\n      // We can only change this if the player hasn't been disposed of yet\n      // because `off` eventually tries to use the el_ property. If it has\n      // been disposed of, then don't worry about it because there are no\n      // event handlers left to unbind anyway\n      if (this.player_.el_) {\n        this.player_.off('mediachange', this.onPlayerMediachange_);\n        this.player_.tech_.off('hls-reset', this.onHlsReset_);\n        this.player_.tech_.off('hls-segment-time-mapping', this.onHlsSegmentTimeMapping_);\n      }\n    });\n    return _this;\n  }\n\n  /**\n   * Add a range that that can now be seeked to.\n   *\n   * @param {Double} start where to start the addition\n   * @param {Double} end where to end the addition\n   * @private\n   */\n\n  createClass$1(HtmlMediaSource, [{\n    key: 'addSeekableRange_',\n    value: function addSeekableRange_(start, end) {\n      var error = void 0;\n\n      if (this.duration !== Infinity) {\n        error = new Error('MediaSource.addSeekableRange() can only be invoked ' + 'when the duration is Infinity');\n        error.name = 'InvalidStateError';\n        error.code = 11;\n        throw error;\n      }\n\n      if (end > this.nativeMediaSource_.duration || isNaN(this.nativeMediaSource_.duration)) {\n        this.nativeMediaSource_.duration = end;\n      }\n    }\n\n    /**\n     * Add a source buffer to the media source.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/addSourceBuffer\n     * @param {String} type the content-type of the content\n     * @return {Object} the created source buffer\n     */\n\n  }, {\n    key: 'addSourceBuffer',\n    value: function addSourceBuffer(type) {\n      var buffer = void 0;\n      var parsedType = parseContentType(type);\n\n      // Create a VirtualSourceBuffer to transmux MPEG-2 transport\n      // stream segments into fragmented MP4s\n      if (/^(video|audio)\\/mp2t$/i.test(parsedType.type)) {\n        var codecs = [];\n\n        if (parsedType.parameters && parsedType.parameters.codecs) {\n          codecs = parsedType.parameters.codecs.split(',');\n          codecs = translateLegacyCodecs(codecs);\n          codecs = codecs.filter(function (codec) {\n            return isAudioCodec(codec) || isVideoCodec(codec);\n          });\n        }\n\n        if (codecs.length === 0) {\n          codecs = ['avc1.4d400d', 'mp4a.40.2'];\n        }\n\n        buffer = new VirtualSourceBuffer(this, codecs);\n\n        if (this.sourceBuffers.length !== 0) {\n          // If another VirtualSourceBuffer already exists, then we are creating a\n          // SourceBuffer for an alternate audio track and therefore we know that\n          // the source has both an audio and video track.\n          // That means we should trigger the manual creation of the real\n          // SourceBuffers instead of waiting for the transmuxer to return data\n          this.sourceBuffers[0].createRealSourceBuffers_();\n          buffer.createRealSourceBuffers_();\n\n          // Automatically disable the audio on the first source buffer if\n          // a second source buffer is ever created\n          this.sourceBuffers[0].audioDisabled_ = true;\n        }\n      } else {\n        // delegate to the native implementation\n        buffer = this.nativeMediaSource_.addSourceBuffer(type);\n      }\n\n      this.sourceBuffers.push(buffer);\n      return buffer;\n    }\n  }]);\n  return HtmlMediaSource;\n}(videojs$1.EventTarget);\n\n/**\n * @file videojs-contrib-media-sources.js\n */\nvar urlCount = 0;\n\n// ------------\n// Media Source\n// ------------\n\n// store references to the media sources so they can be connected\n// to a video element (a swf object)\n// TODO: can we store this somewhere local to this module?\nvideojs$1.mediaSources = {};\n\n/**\n * Provide a method for a swf object to notify JS that a\n * media source is now open.\n *\n * @param {String} msObjectURL string referencing the MSE Object URL\n * @param {String} swfId the swf id\n */\nvar open = function open(msObjectURL, swfId) {\n  var mediaSource = videojs$1.mediaSources[msObjectURL];\n\n  if (mediaSource) {\n    mediaSource.trigger({ type: 'sourceopen', swfId: swfId });\n  } else {\n    throw new Error('Media Source not found (Video.js)');\n  }\n};\n\n/**\n * Check to see if the native MediaSource object exists and supports\n * an MP4 container with both H.264 video and AAC-LC audio.\n *\n * @return {Boolean} if  native media sources are supported\n */\nvar supportsNativeMediaSources = function supportsNativeMediaSources() {\n  return !!window$1.MediaSource && !!window$1.MediaSource.isTypeSupported && window$1.MediaSource.isTypeSupported('video/mp4;codecs=\"avc1.4d400d,mp4a.40.2\"');\n};\n\n/**\n * An emulation of the MediaSource API so that we can support\n * native and non-native functionality. returns an instance of\n * HtmlMediaSource.\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/MediaSource\n */\nvar MediaSource = function MediaSource() {\n  this.MediaSource = {\n    open: open,\n    supportsNativeMediaSources: supportsNativeMediaSources\n  };\n\n  if (supportsNativeMediaSources()) {\n    return new HtmlMediaSource();\n  }\n\n  throw new Error('Cannot use create a virtual MediaSource for this video');\n};\n\nMediaSource.open = open;\nMediaSource.supportsNativeMediaSources = supportsNativeMediaSources;\n\n/**\n * A wrapper around the native URL for our MSE object\n * implementation, this object is exposed under videojs.URL\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/URL/URL\n */\nvar URL$1 = {\n  /**\n   * A wrapper around the native createObjectURL for our objects.\n   * This function maps a native or emulated mediaSource to a blob\n   * url so that it can be loaded into video.js\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL\n   * @param {MediaSource} object the object to create a blob url to\n   */\n  createObjectURL: function createObjectURL(object) {\n    var objectUrlPrefix = 'blob:vjs-media-source/';\n    var url = void 0;\n\n    // use the native MediaSource to generate an object URL\n    if (object instanceof HtmlMediaSource) {\n      url = window$1.URL.createObjectURL(object.nativeMediaSource_);\n      object.url_ = url;\n      return url;\n    }\n    // if the object isn't an emulated MediaSource, delegate to the\n    // native implementation\n    if (!(object instanceof HtmlMediaSource)) {\n      url = window$1.URL.createObjectURL(object);\n      object.url_ = url;\n      return url;\n    }\n\n    // build a URL that can be used to map back to the emulated\n    // MediaSource\n    url = objectUrlPrefix + urlCount;\n\n    urlCount++;\n\n    // setup the mapping back to object\n    videojs$1.mediaSources[url] = object;\n\n    return url;\n  }\n};\n\nvideojs$1.MediaSource = MediaSource;\nvideojs$1.URL = URL$1;\n\nvar EventTarget$1$1 = videojs$1.EventTarget,\n    mergeOptions$2 = videojs$1.mergeOptions;\n\n/**\n * Returns a new master manifest that is the result of merging an updated master manifest\n * into the original version.\n *\n * @param {Object} oldMaster\n *        The old parsed mpd object\n * @param {Object} newMaster\n *        The updated parsed mpd object\n * @return {Object}\n *         A new object representing the original master manifest with the updated media\n *         playlists merged in\n */\n\nvar updateMaster$1 = function updateMaster$$1(oldMaster, newMaster) {\n  var update = mergeOptions$2(oldMaster, {\n    // These are top level properties that can be updated\n    duration: newMaster.duration,\n    minimumUpdatePeriod: newMaster.minimumUpdatePeriod\n  });\n\n  // First update the playlists in playlist list\n  for (var i = 0; i < newMaster.playlists.length; i++) {\n    var playlistUpdate = updateMaster(update, newMaster.playlists[i]);\n\n    if (playlistUpdate) {\n      update = playlistUpdate;\n    }\n  }\n\n  // Then update media group playlists\n  forEachMediaGroup(newMaster, function (properties, type, group, label) {\n    if (properties.playlists && properties.playlists.length) {\n      var uri = properties.playlists[0].uri;\n      var _playlistUpdate = updateMaster(update, properties.playlists[0]);\n\n      if (_playlistUpdate) {\n        update = _playlistUpdate;\n        // update the playlist reference within media groups\n        update.mediaGroups[type][group][label].playlists[0] = update.playlists[uri];\n      }\n    }\n  });\n\n  return update;\n};\n\nvar DashPlaylistLoader = function (_EventTarget) {\n  inherits$1(DashPlaylistLoader, _EventTarget);\n\n  // DashPlaylistLoader must accept either a src url or a playlist because subsequent\n  // playlist loader setups from media groups will expect to be able to pass a playlist\n  // (since there aren't external URLs to media playlists with DASH)\n  function DashPlaylistLoader(srcUrlOrPlaylist, hls, withCredentials, masterPlaylistLoader) {\n    classCallCheck$1(this, DashPlaylistLoader);\n\n    var _this = possibleConstructorReturn$1(this, (DashPlaylistLoader.__proto__ || Object.getPrototypeOf(DashPlaylistLoader)).call(this));\n\n    _this.hls_ = hls;\n    _this.withCredentials = withCredentials;\n\n    if (!srcUrlOrPlaylist) {\n      throw new Error('A non-empty playlist URL or playlist is required');\n    }\n\n    // event naming?\n    _this.on('minimumUpdatePeriod', function () {\n      _this.refreshXml_();\n    });\n\n    // live playlist staleness timeout\n    _this.on('mediaupdatetimeout', function () {\n      _this.refreshMedia_();\n    });\n\n    // initialize the loader state\n    if (typeof srcUrlOrPlaylist === 'string') {\n      _this.srcUrl = srcUrlOrPlaylist;\n      _this.state = 'HAVE_NOTHING';\n      return possibleConstructorReturn$1(_this);\n    }\n\n    _this.masterPlaylistLoader_ = masterPlaylistLoader;\n\n    _this.state = 'HAVE_METADATA';\n    _this.started = true;\n    // we only should have one playlist so select it\n    _this.media(srcUrlOrPlaylist);\n    // trigger async to mimic behavior of HLS, where it must request a playlist\n    window$1.setTimeout(function () {\n      _this.trigger('loadedmetadata');\n    }, 0);\n    return _this;\n  }\n\n  createClass$1(DashPlaylistLoader, [{\n    key: 'dispose',\n    value: function dispose() {\n      this.stopRequest();\n      window$1.clearTimeout(this.mediaUpdateTimeout);\n    }\n  }, {\n    key: 'stopRequest',\n    value: function stopRequest() {\n      if (this.request) {\n        var oldRequest = this.request;\n\n        this.request = null;\n        oldRequest.onreadystatechange = null;\n        oldRequest.abort();\n      }\n    }\n  }, {\n    key: 'media',\n    value: function media(playlist) {\n      // getter\n      if (!playlist) {\n        return this.media_;\n      }\n\n      // setter\n      if (this.state === 'HAVE_NOTHING') {\n        throw new Error('Cannot switch media playlist from ' + this.state);\n      }\n\n      var startingState = this.state;\n\n      // find the playlist object if the target playlist has been specified by URI\n      if (typeof playlist === 'string') {\n        if (!this.master.playlists[playlist]) {\n          throw new Error('Unknown playlist URI: ' + playlist);\n        }\n        playlist = this.master.playlists[playlist];\n      }\n\n      var mediaChange = !this.media_ || playlist.uri !== this.media_.uri;\n\n      this.state = 'HAVE_METADATA';\n\n      // switching to the active playlist is a no-op\n      if (!mediaChange) {\n        return;\n      }\n\n      // switching from an already loaded playlist\n      if (this.media_) {\n        this.trigger('mediachanging');\n      }\n\n      this.media_ = playlist;\n\n      this.refreshMedia_();\n\n      // trigger media change if the active media has been updated\n      if (startingState !== 'HAVE_MASTER') {\n        this.trigger('mediachange');\n      }\n    }\n  }, {\n    key: 'pause',\n    value: function pause() {\n      this.stopRequest();\n      if (this.state === 'HAVE_NOTHING') {\n        // If we pause the loader before any data has been retrieved, its as if we never\n        // started, so reset to an unstarted state.\n        this.started = false;\n      }\n    }\n  }, {\n    key: 'load',\n    value: function load() {\n      // because the playlists are internal to the manifest, load should either load the\n      // main manifest, or do nothing but trigger an event\n      if (!this.started) {\n        this.start();\n        return;\n      }\n\n      this.trigger('loadedplaylist');\n    }\n\n    /**\n     * Parses the master xml string and updates playlist uri references\n     *\n     * @return {Object}\n     *         The parsed mpd manifest object\n     */\n\n  }, {\n    key: 'parseMasterXml',\n    value: function parseMasterXml() {\n      var master = parse(this.masterXml_, {\n        manifestUri: this.srcUrl,\n        clientOffset: this.clientOffset_\n      });\n\n      master.uri = this.srcUrl;\n\n      // Set up phony URIs for the playlists since we won't have external URIs for DASH\n      // but reference playlists by their URI throughout the project\n      // TODO: Should we create the dummy uris in mpd-parser as well (leaning towards yes).\n      for (var i = 0; i < master.playlists.length; i++) {\n        var phonyUri = 'placeholder-uri-' + i;\n\n        master.playlists[i].uri = phonyUri;\n        // set up by URI references\n        master.playlists[phonyUri] = master.playlists[i];\n      }\n\n      // set up phony URIs for the media group playlists since we won't have external\n      // URIs for DASH but reference playlists by their URI throughout the project\n      forEachMediaGroup(master, function (properties, mediaType, groupKey, labelKey) {\n        if (properties.playlists && properties.playlists.length) {\n          var _phonyUri = 'placeholder-uri-' + mediaType + '-' + groupKey + '-' + labelKey;\n\n          properties.playlists[0].uri = _phonyUri;\n          // setup URI references\n          master.playlists[_phonyUri] = properties.playlists[0];\n        }\n      });\n\n      setupMediaPlaylists(master);\n      resolveMediaGroupUris(master);\n\n      return master;\n    }\n  }, {\n    key: 'start',\n    value: function start() {\n      var _this2 = this;\n\n      this.started = true;\n\n      // request the specified URL\n      this.request = this.hls_.xhr({\n        uri: this.srcUrl,\n        withCredentials: this.withCredentials\n      }, function (error, req) {\n        // disposed\n        if (!_this2.request) {\n          return;\n        }\n\n        // clear the loader's request reference\n        _this2.request = null;\n\n        if (error) {\n          _this2.error = {\n            status: req.status,\n            message: 'DASH playlist request error at URL: ' + _this2.srcUrl,\n            responseText: req.responseText,\n            // MEDIA_ERR_NETWORK\n            code: 2\n          };\n          if (_this2.state === 'HAVE_NOTHING') {\n            _this2.started = false;\n          }\n          return _this2.trigger('error');\n        }\n\n        _this2.masterXml_ = req.responseText;\n\n        if (req.responseHeaders && req.responseHeaders.date) {\n          _this2.masterLoaded_ = Date.parse(req.responseHeaders.date);\n        } else {\n          _this2.masterLoaded_ = Date.now();\n        }\n\n        _this2.syncClientServerClock_(_this2.onClientServerClockSync_.bind(_this2));\n      });\n    }\n\n    /**\n     * Parses the master xml for UTCTiming node to sync the client clock to the server\n     * clock. If the UTCTiming node requires a HEAD or GET request, that request is made.\n     *\n     * @param {Function} done\n     *        Function to call when clock sync has completed\n     */\n\n  }, {\n    key: 'syncClientServerClock_',\n    value: function syncClientServerClock_(done) {\n      var _this3 = this;\n\n      var utcTiming = parseUTCTiming(this.masterXml_);\n\n      // No UTCTiming element found in the mpd. Use Date header from mpd request as the\n      // server clock\n      if (utcTiming === null) {\n        this.clientOffset_ = this.masterLoaded_ - Date.now();\n        return done();\n      }\n\n      if (utcTiming.method === 'DIRECT') {\n        this.clientOffset_ = utcTiming.value - Date.now();\n        return done();\n      }\n\n      this.request = this.hls_.xhr({\n        uri: resolveUrl(this.srcUrl, utcTiming.value),\n        method: utcTiming.method,\n        withCredentials: this.withCredentials\n      }, function (error, req) {\n        // disposed\n        if (!_this3.request) {\n          return;\n        }\n\n        if (error) {\n          // sync request failed, fall back to using date header from mpd\n          // TODO: log warning\n          _this3.clientOffset_ = _this3.masterLoaded_ - Date.now();\n          return done();\n        }\n\n        var serverTime = void 0;\n\n        if (utcTiming.method === 'HEAD') {\n          if (!req.responseHeaders || !req.responseHeaders.date) {\n            // expected date header not preset, fall back to using date header from mpd\n            // TODO: log warning\n            serverTime = _this3.masterLoaded_;\n          } else {\n            serverTime = Date.parse(req.responseHeaders.date);\n          }\n        } else {\n          serverTime = Date.parse(req.responseText);\n        }\n\n        _this3.clientOffset_ = serverTime - Date.now();\n\n        done();\n      });\n    }\n\n    /**\n     * Handler for after client/server clock synchronization has happened. Sets up\n     * xml refresh timer if specificed by the manifest.\n     */\n\n  }, {\n    key: 'onClientServerClockSync_',\n    value: function onClientServerClockSync_() {\n      var _this4 = this;\n\n      this.master = this.parseMasterXml();\n\n      this.state = 'HAVE_MASTER';\n\n      this.trigger('loadedplaylist');\n\n      if (!this.media_) {\n        // no media playlist was specifically selected so start\n        // from the first listed one\n        this.media(this.master.playlists[0]);\n      }\n      // trigger loadedmetadata to resolve setup of media groups\n      // trigger async to mimic behavior of HLS, where it must request a playlist\n      window$1.setTimeout(function () {\n        _this4.trigger('loadedmetadata');\n      }, 0);\n\n      // TODO: minimumUpdatePeriod can have a value of 0. Currently the manifest will not\n      // be refreshed when this is the case. The inter-op guide says that when the\n      // minimumUpdatePeriod is 0, the manifest should outline all currently available\n      // segments, but future segments may require an update. I think a good solution\n      // would be to update the manifest at the same rate that the media playlists\n      // are \"refreshed\", i.e. every targetDuration.\n      if (this.master.minimumUpdatePeriod) {\n        window$1.setTimeout(function () {\n          _this4.trigger('minimumUpdatePeriod');\n        }, this.master.minimumUpdatePeriod);\n      }\n    }\n\n    /**\n     * Sends request to refresh the master xml and updates the parsed master manifest\n     * TODO: Does the client offset need to be recalculated when the xml is refreshed?\n     */\n\n  }, {\n    key: 'refreshXml_',\n    value: function refreshXml_() {\n      var _this5 = this;\n\n      this.request = this.hls_.xhr({\n        uri: this.srcUrl,\n        withCredentials: this.withCredentials\n      }, function (error, req) {\n        // disposed\n        if (!_this5.request) {\n          return;\n        }\n\n        // clear the loader's request reference\n        _this5.request = null;\n\n        if (error) {\n          _this5.error = {\n            status: req.status,\n            message: 'DASH playlist request error at URL: ' + _this5.srcUrl,\n            responseText: req.responseText,\n            // MEDIA_ERR_NETWORK\n            code: 2\n          };\n          if (_this5.state === 'HAVE_NOTHING') {\n            _this5.started = false;\n          }\n          return _this5.trigger('error');\n        }\n\n        _this5.masterXml_ = req.responseText;\n\n        var newMaster = _this5.parseMasterXml();\n\n        _this5.master = updateMaster$1(_this5.master, newMaster);\n\n        window$1.setTimeout(function () {\n          _this5.trigger('minimumUpdatePeriod');\n        }, _this5.master.minimumUpdatePeriod);\n      });\n    }\n\n    /**\n     * Refreshes the media playlist by re-parsing the master xml and updating playlist\n     * references. If this is an alternate loader, the updated parsed manifest is retrieved\n     * from the master loader.\n     */\n\n  }, {\n    key: 'refreshMedia_',\n    value: function refreshMedia_() {\n      var _this6 = this;\n\n      var oldMaster = void 0;\n      var newMaster = void 0;\n\n      if (this.masterPlaylistLoader_) {\n        oldMaster = this.masterPlaylistLoader_.master;\n        newMaster = this.masterPlaylistLoader_.parseMasterXml();\n      } else {\n        oldMaster = this.master;\n        newMaster = this.parseMasterXml();\n      }\n\n      var updatedMaster = updateMaster$1(oldMaster, newMaster);\n\n      if (updatedMaster) {\n        if (this.masterPlaylistLoader_) {\n          this.masterPlaylistLoader_.master = updatedMaster;\n        } else {\n          this.master = updatedMaster;\n        }\n        this.media_ = updatedMaster.playlists[this.media_.uri];\n      } else {\n        this.trigger('playlistunchanged');\n      }\n\n      if (!this.media().endList) {\n        this.mediaUpdateTimeout = window$1.setTimeout(function () {\n          _this6.trigger('mediaupdatetimeout');\n        }, refreshDelay(this.media(), !!updatedMaster));\n      }\n\n      this.trigger('loadedplaylist');\n    }\n  }]);\n  return DashPlaylistLoader;\n}(EventTarget$1$1);\n\nvar logger = function logger(source) {\n  if (videojs$1.log.debug) {\n    return videojs$1.log.debug.bind(videojs$1, 'VHS:', source + ' >');\n  }\n\n  return function () {};\n};\n\nfunction noop() {}\n\n/**\n * @file source-updater.js\n */\n\n/**\n * A queue of callbacks to be serialized and applied when a\n * MediaSource and its associated SourceBuffers are not in the\n * updating state. It is used by the segment loader to update the\n * underlying SourceBuffers when new data is loaded, for instance.\n *\n * @class SourceUpdater\n * @param {MediaSource} mediaSource the MediaSource to create the\n * SourceBuffer from\n * @param {String} mimeType the desired MIME type of the underlying\n * SourceBuffer\n * @param {Object} sourceBufferEmitter an event emitter that fires when a source buffer is\n * added to the media source\n */\n\nvar SourceUpdater = function () {\n  function SourceUpdater(mediaSource, mimeType, type, sourceBufferEmitter) {\n    classCallCheck$1(this, SourceUpdater);\n\n    this.callbacks_ = [];\n    this.pendingCallback_ = null;\n    this.timestampOffset_ = 0;\n    this.mediaSource = mediaSource;\n    this.processedAppend_ = false;\n    this.type_ = type;\n    this.mimeType_ = mimeType;\n    this.logger_ = logger('SourceUpdater[' + type + '][' + mimeType + ']');\n\n    if (mediaSource.readyState === 'closed') {\n      mediaSource.addEventListener('sourceopen', this.createSourceBuffer_.bind(this, mimeType, sourceBufferEmitter));\n    } else {\n      this.createSourceBuffer_(mimeType, sourceBufferEmitter);\n    }\n  }\n\n  createClass$1(SourceUpdater, [{\n    key: 'createSourceBuffer_',\n    value: function createSourceBuffer_(mimeType, sourceBufferEmitter) {\n      var _this = this;\n\n      this.sourceBuffer_ = this.mediaSource.addSourceBuffer(mimeType);\n\n      this.logger_('created SourceBuffer');\n\n      if (sourceBufferEmitter) {\n        sourceBufferEmitter.trigger('sourcebufferadded');\n\n        if (this.mediaSource.sourceBuffers.length < 2) {\n          // There's another source buffer we must wait for before we can start updating\n          // our own (or else we can get into a bad state, i.e., appending video/audio data\n          // before the other video/audio source buffer is available and leading to a video\n          // or audio only buffer).\n          sourceBufferEmitter.on('sourcebufferadded', function () {\n            _this.start_();\n          });\n          return;\n        }\n      }\n\n      this.start_();\n    }\n  }, {\n    key: 'start_',\n    value: function start_() {\n      var _this2 = this;\n\n      this.started_ = true;\n\n      // run completion handlers and process callbacks as updateend\n      // events fire\n      this.onUpdateendCallback_ = function () {\n        var pendingCallback = _this2.pendingCallback_;\n\n        _this2.pendingCallback_ = null;\n\n        _this2.logger_('buffered [' + printableRange(_this2.buffered()) + ']');\n\n        if (pendingCallback) {\n          pendingCallback();\n        }\n\n        _this2.runCallback_();\n      };\n\n      this.sourceBuffer_.addEventListener('updateend', this.onUpdateendCallback_);\n\n      this.runCallback_();\n    }\n\n    /**\n     * Aborts the current segment and resets the segment parser.\n     *\n     * @param {Function} done function to call when done\n     * @see http://w3c.github.io/media-source/#widl-SourceBuffer-abort-void\n     */\n\n  }, {\n    key: 'abort',\n    value: function abort(done) {\n      var _this3 = this;\n\n      if (this.processedAppend_) {\n        this.queueCallback_(function () {\n          _this3.sourceBuffer_.abort();\n        }, done);\n      }\n    }\n\n    /**\n     * Queue an update to append an ArrayBuffer.\n     *\n     * @param {ArrayBuffer} bytes\n     * @param {Function} done the function to call when done\n     * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-appendBuffer-void-ArrayBuffer-data\n     */\n\n  }, {\n    key: 'appendBuffer',\n    value: function appendBuffer(bytes, done) {\n      var _this4 = this;\n\n      this.processedAppend_ = true;\n      this.queueCallback_(function () {\n        _this4.sourceBuffer_.appendBuffer(bytes);\n      }, done);\n    }\n\n    /**\n     * Indicates what TimeRanges are buffered in the managed SourceBuffer.\n     *\n     * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-buffered\n     */\n\n  }, {\n    key: 'buffered',\n    value: function buffered() {\n      if (!this.sourceBuffer_) {\n        return videojs$1.createTimeRanges();\n      }\n      return this.sourceBuffer_.buffered;\n    }\n\n    /**\n     * Queue an update to remove a time range from the buffer.\n     *\n     * @param {Number} start where to start the removal\n     * @param {Number} end where to end the removal\n     * @param {Function} [done=noop] optional callback to be executed when the remove\n     * operation is complete\n     * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-remove-void-double-start-unrestricted-double-end\n     */\n\n  }, {\n    key: 'remove',\n    value: function remove(start, end) {\n      var _this5 = this;\n\n      var done = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noop;\n\n      if (this.processedAppend_) {\n        this.queueCallback_(function () {\n          _this5.logger_('remove [' + start + ' => ' + end + ']');\n          _this5.sourceBuffer_.remove(start, end);\n        }, done);\n      }\n    }\n\n    /**\n     * Whether the underlying sourceBuffer is updating or not\n     *\n     * @return {Boolean} the updating status of the SourceBuffer\n     */\n\n  }, {\n    key: 'updating',\n    value: function updating() {\n      return !this.sourceBuffer_ || this.sourceBuffer_.updating || this.pendingCallback_;\n    }\n\n    /**\n     * Set/get the timestampoffset on the SourceBuffer\n     *\n     * @return {Number} the timestamp offset\n     */\n\n  }, {\n    key: 'timestampOffset',\n    value: function timestampOffset(offset) {\n      var _this6 = this;\n\n      if (typeof offset !== 'undefined') {\n        this.queueCallback_(function () {\n          _this6.sourceBuffer_.timestampOffset = offset;\n        });\n        this.timestampOffset_ = offset;\n      }\n      return this.timestampOffset_;\n    }\n\n    /**\n     * Queue a callback to run\n     */\n\n  }, {\n    key: 'queueCallback_',\n    value: function queueCallback_(callback, done) {\n      this.callbacks_.push([callback.bind(this), done]);\n      this.runCallback_();\n    }\n\n    /**\n     * Run a queued callback\n     */\n\n  }, {\n    key: 'runCallback_',\n    value: function runCallback_() {\n      var callbacks = void 0;\n\n      if (!this.updating() && this.callbacks_.length && this.started_) {\n        callbacks = this.callbacks_.shift();\n        this.pendingCallback_ = callbacks[1];\n        callbacks[0]();\n      }\n    }\n\n    /**\n     * dispose of the source updater and the underlying sourceBuffer\n     */\n\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.sourceBuffer_.removeEventListener('updateend', this.onUpdateendCallback_);\n      if (this.sourceBuffer_ && this.mediaSource.readyState === 'open') {\n        this.sourceBuffer_.abort();\n      }\n    }\n  }]);\n  return SourceUpdater;\n}();\n\nvar Config = {\n  GOAL_BUFFER_LENGTH: 30,\n  MAX_GOAL_BUFFER_LENGTH: 60,\n  GOAL_BUFFER_LENGTH_RATE: 1,\n  // A fudge factor to apply to advertised playlist bitrates to account for\n  // temporary flucations in client bandwidth\n  BANDWIDTH_VARIANCE: 1.2,\n  // How much of the buffer must be filled before we consider upswitching\n  BUFFER_LOW_WATER_LINE: 0,\n  MAX_BUFFER_LOW_WATER_LINE: 30,\n  BUFFER_LOW_WATER_LINE_RATE: 1\n};\n\nvar REQUEST_ERRORS = {\n  FAILURE: 2,\n  TIMEOUT: -101,\n  ABORTED: -102\n};\n\n/**\n * Turns segment byterange into a string suitable for use in\n * HTTP Range requests\n *\n * @param {Object} byterange - an object with two values defining the start and end\n *                             of a byte-range\n */\nvar byterangeStr = function byterangeStr(byterange) {\n  var byterangeStart = void 0;\n  var byterangeEnd = void 0;\n\n  // `byterangeEnd` is one less than `offset + length` because the HTTP range\n  // header uses inclusive ranges\n  byterangeEnd = byterange.offset + byterange.length - 1;\n  byterangeStart = byterange.offset;\n  return 'bytes=' + byterangeStart + '-' + byterangeEnd;\n};\n\n/**\n * Defines headers for use in the xhr request for a particular segment.\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n */\nvar segmentXhrHeaders = function segmentXhrHeaders(segment) {\n  var headers = {};\n\n  if (segment.byterange) {\n    headers.Range = byterangeStr(segment.byterange);\n  }\n  return headers;\n};\n\n/**\n * Abort all requests\n *\n * @param {Object} activeXhrs - an object that tracks all XHR requests\n */\nvar abortAll = function abortAll(activeXhrs) {\n  activeXhrs.forEach(function (xhr$$1) {\n    xhr$$1.abort();\n  });\n};\n\n/**\n * Gather important bandwidth stats once a request has completed\n *\n * @param {Object} request - the XHR request from which to gather stats\n */\nvar getRequestStats = function getRequestStats(request) {\n  return {\n    bandwidth: request.bandwidth,\n    bytesReceived: request.bytesReceived || 0,\n    roundTripTime: request.roundTripTime || 0\n  };\n};\n\n/**\n * If possible gather bandwidth stats as a request is in\n * progress\n *\n * @param {Event} progressEvent - an event object from an XHR's progress event\n */\nvar getProgressStats = function getProgressStats(progressEvent) {\n  var request = progressEvent.target;\n  var roundTripTime = Date.now() - request.requestTime;\n  var stats = {\n    bandwidth: Infinity,\n    bytesReceived: 0,\n    roundTripTime: roundTripTime || 0\n  };\n\n  stats.bytesReceived = progressEvent.loaded;\n  // This can result in Infinity if stats.roundTripTime is 0 but that is ok\n  // because we should only use bandwidth stats on progress to determine when\n  // abort a request early due to insufficient bandwidth\n  stats.bandwidth = Math.floor(stats.bytesReceived / stats.roundTripTime * 8 * 1000);\n\n  return stats;\n};\n\n/**\n * Handle all error conditions in one place and return an object\n * with all the information\n *\n * @param {Error|null} error - if non-null signals an error occured with the XHR\n * @param {Object} request -  the XHR request that possibly generated the error\n */\nvar handleErrors = function handleErrors(error, request) {\n  if (request.timedout) {\n    return {\n      status: request.status,\n      message: 'HLS request timed-out at URL: ' + request.uri,\n      code: REQUEST_ERRORS.TIMEOUT,\n      xhr: request\n    };\n  }\n\n  if (request.aborted) {\n    return {\n      status: request.status,\n      message: 'HLS request aborted at URL: ' + request.uri,\n      code: REQUEST_ERRORS.ABORTED,\n      xhr: request\n    };\n  }\n\n  if (error) {\n    return {\n      status: request.status,\n      message: 'HLS request errored at URL: ' + request.uri,\n      code: REQUEST_ERRORS.FAILURE,\n      xhr: request\n    };\n  }\n\n  return null;\n};\n\n/**\n * Handle responses for key data and convert the key data to the correct format\n * for the decryption step later\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} finishProcessingFn - a callback to execute to continue processing\n *                                        this request\n */\nvar handleKeyResponse = function handleKeyResponse(segment, finishProcessingFn) {\n  return function (error, request) {\n    var response = request.response;\n    var errorObj = handleErrors(error, request);\n\n    if (errorObj) {\n      return finishProcessingFn(errorObj, segment);\n    }\n\n    if (response.byteLength !== 16) {\n      return finishProcessingFn({\n        status: request.status,\n        message: 'Invalid HLS key at URL: ' + request.uri,\n        code: REQUEST_ERRORS.FAILURE,\n        xhr: request\n      }, segment);\n    }\n\n    var view = new DataView(response);\n\n    segment.key.bytes = new Uint32Array([view.getUint32(0), view.getUint32(4), view.getUint32(8), view.getUint32(12)]);\n    return finishProcessingFn(null, segment);\n  };\n};\n\n/**\n * Handle init-segment responses\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} finishProcessingFn - a callback to execute to continue processing\n *                                        this request\n */\nvar handleInitSegmentResponse = function handleInitSegmentResponse(segment, captionParser, finishProcessingFn) {\n  return function (error, request) {\n    var response = request.response;\n    var errorObj = handleErrors(error, request);\n\n    if (errorObj) {\n      return finishProcessingFn(errorObj, segment);\n    }\n\n    // stop processing if received empty content\n    if (response.byteLength === 0) {\n      return finishProcessingFn({\n        status: request.status,\n        message: 'Empty HLS segment content at URL: ' + request.uri,\n        code: REQUEST_ERRORS.FAILURE,\n        xhr: request\n      }, segment);\n    }\n\n    segment.map.bytes = new Uint8Array(request.response);\n\n    // Initialize CaptionParser if it hasn't been yet\n    if (!captionParser.isInitialized()) {\n      captionParser.init();\n    }\n\n    segment.map.timescales = mp4probe.timescale(segment.map.bytes);\n    segment.map.videoTrackIds = mp4probe.videoTrackIds(segment.map.bytes);\n\n    return finishProcessingFn(null, segment);\n  };\n};\n\n/**\n * Response handler for segment-requests being sure to set the correct\n * property depending on whether the segment is encryped or not\n * Also records and keeps track of stats that are used for ABR purposes\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} finishProcessingFn - a callback to execute to continue processing\n *                                        this request\n */\nvar handleSegmentResponse = function handleSegmentResponse(segment, captionParser, finishProcessingFn) {\n  return function (error, request) {\n    var response = request.response;\n    var errorObj = handleErrors(error, request);\n    var parsed = void 0;\n\n    if (errorObj) {\n      return finishProcessingFn(errorObj, segment);\n    }\n\n    // stop processing if received empty content\n    if (response.byteLength === 0) {\n      return finishProcessingFn({\n        status: request.status,\n        message: 'Empty HLS segment content at URL: ' + request.uri,\n        code: REQUEST_ERRORS.FAILURE,\n        xhr: request\n      }, segment);\n    }\n\n    segment.stats = getRequestStats(request);\n\n    if (segment.key) {\n      segment.encryptedBytes = new Uint8Array(request.response);\n    } else {\n      segment.bytes = new Uint8Array(request.response);\n    }\n\n    // This is likely an FMP4 and has the init segment.\n    // Run through the CaptionParser in case there are captions.\n    if (segment.map && segment.map.bytes) {\n      // Initialize CaptionParser if it hasn't been yet\n      if (!captionParser.isInitialized()) {\n        captionParser.init();\n      }\n\n      parsed = captionParser.parse(segment.bytes, segment.map.videoTrackIds, segment.map.timescales);\n\n      if (parsed && parsed.captions) {\n        segment.captionStreams = parsed.captionStreams;\n        segment.fmp4Captions = parsed.captions;\n      }\n    }\n\n    return finishProcessingFn(null, segment);\n  };\n};\n\n/**\n * Decrypt the segment via the decryption web worker\n *\n * @param {WebWorker} decrypter - a WebWorker interface to AES-128 decryption routines\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} doneFn - a callback that is executed after decryption has completed\n */\nvar decryptSegment = function decryptSegment(decrypter, segment, doneFn) {\n  var decryptionHandler = function decryptionHandler(event) {\n    if (event.data.source === segment.requestId) {\n      decrypter.removeEventListener('message', decryptionHandler);\n      var decrypted = event.data.decrypted;\n\n      segment.bytes = new Uint8Array(decrypted.bytes, decrypted.byteOffset, decrypted.byteLength);\n      return doneFn(null, segment);\n    }\n  };\n\n  decrypter.addEventListener('message', decryptionHandler);\n\n  // this is an encrypted segment\n  // incrementally decrypt the segment\n  decrypter.postMessage(createTransferableMessage({\n    source: segment.requestId,\n    encrypted: segment.encryptedBytes,\n    key: segment.key.bytes,\n    iv: segment.key.iv\n  }), [segment.encryptedBytes.buffer, segment.key.bytes.buffer]);\n};\n\n/**\n * The purpose of this function is to get the most pertinent error from the\n * array of errors.\n * For instance if a timeout and two aborts occur, then the aborts were\n * likely triggered by the timeout so return that error object.\n */\nvar getMostImportantError = function getMostImportantError(errors) {\n  return errors.reduce(function (prev, err) {\n    return err.code > prev.code ? err : prev;\n  });\n};\n\n/**\n * This function waits for all XHRs to finish (with either success or failure)\n * before continueing processing via it's callback. The function gathers errors\n * from each request into a single errors array so that the error status for\n * each request can be examined later.\n *\n * @param {Object} activeXhrs - an object that tracks all XHR requests\n * @param {WebWorker} decrypter - a WebWorker interface to AES-128 decryption routines\n * @param {Function} doneFn - a callback that is executed after all resources have been\n *                            downloaded and any decryption completed\n */\nvar waitForCompletion = function waitForCompletion(activeXhrs, decrypter, doneFn) {\n  var errors = [];\n  var count = 0;\n\n  return function (error, segment) {\n    if (error) {\n      // If there are errors, we have to abort any outstanding requests\n      abortAll(activeXhrs);\n      errors.push(error);\n    }\n    count += 1;\n\n    if (count === activeXhrs.length) {\n      // Keep track of when *all* of the requests have completed\n      segment.endOfAllRequests = Date.now();\n\n      if (errors.length > 0) {\n        var worstError = getMostImportantError(errors);\n\n        return doneFn(worstError, segment);\n      }\n      if (segment.encryptedBytes) {\n        return decryptSegment(decrypter, segment, doneFn);\n      }\n      // Otherwise, everything is ready just continue\n      return doneFn(null, segment);\n    }\n  };\n};\n\n/**\n * Simple progress event callback handler that gathers some stats before\n * executing a provided callback with the `segment` object\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} progressFn - a callback that is executed each time a progress event\n *                                is received\n * @param {Event} event - the progress event object from XMLHttpRequest\n */\nvar handleProgress = function handleProgress(segment, progressFn) {\n  return function (event) {\n    segment.stats = videojs$1.mergeOptions(segment.stats, getProgressStats(event));\n\n    // record the time that we receive the first byte of data\n    if (!segment.stats.firstBytesReceivedAt && segment.stats.bytesReceived) {\n      segment.stats.firstBytesReceivedAt = Date.now();\n    }\n\n    return progressFn(event, segment);\n  };\n};\n\n/**\n * Load all resources and does any processing necessary for a media-segment\n *\n * Features:\n *   decrypts the media-segment if it has a key uri and an iv\n *   aborts *all* requests if *any* one request fails\n *\n * The segment object, at minimum, has the following format:\n * {\n *   resolvedUri: String,\n *   [byterange]: {\n *     offset: Number,\n *     length: Number\n *   },\n *   [key]: {\n *     resolvedUri: String\n *     [byterange]: {\n *       offset: Number,\n *       length: Number\n *     },\n *     iv: {\n *       bytes: Uint32Array\n *     }\n *   },\n *   [map]: {\n *     resolvedUri: String,\n *     [byterange]: {\n *       offset: Number,\n *       length: Number\n *     },\n *     [bytes]: Uint8Array\n *   }\n * }\n * ...where [name] denotes optional properties\n *\n * @param {Function} xhr - an instance of the xhr wrapper in xhr.js\n * @param {Object} xhrOptions - the base options to provide to all xhr requests\n * @param {WebWorker} decryptionWorker - a WebWorker interface to AES-128\n *                                       decryption routines\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} progressFn - a callback that receives progress events from the main\n *                                segment's xhr request\n * @param {Function} doneFn - a callback that is executed only once all requests have\n *                            succeeded or failed\n * @returns {Function} a function that, when invoked, immediately aborts all\n *                     outstanding requests\n */\nvar mediaSegmentRequest = function mediaSegmentRequest(xhr$$1, xhrOptions, decryptionWorker, captionParser, segment, progressFn, doneFn) {\n  var activeXhrs = [];\n  var finishProcessingFn = waitForCompletion(activeXhrs, decryptionWorker, doneFn);\n\n  // optionally, request the decryption key\n  if (segment.key) {\n    var keyRequestOptions = videojs$1.mergeOptions(xhrOptions, {\n      uri: segment.key.resolvedUri,\n      responseType: 'arraybuffer'\n    });\n    var keyRequestCallback = handleKeyResponse(segment, finishProcessingFn);\n    var keyXhr = xhr$$1(keyRequestOptions, keyRequestCallback);\n\n    activeXhrs.push(keyXhr);\n  }\n\n  // optionally, request the associated media init segment\n  if (segment.map && !segment.map.bytes) {\n    var initSegmentOptions = videojs$1.mergeOptions(xhrOptions, {\n      uri: segment.map.resolvedUri,\n      responseType: 'arraybuffer',\n      headers: segmentXhrHeaders(segment.map)\n    });\n    var initSegmentRequestCallback = handleInitSegmentResponse(segment, captionParser, finishProcessingFn);\n    var initSegmentXhr = xhr$$1(initSegmentOptions, initSegmentRequestCallback);\n\n    activeXhrs.push(initSegmentXhr);\n  }\n\n  var segmentRequestOptions = videojs$1.mergeOptions(xhrOptions, {\n    uri: segment.resolvedUri,\n    responseType: 'arraybuffer',\n    headers: segmentXhrHeaders(segment)\n  });\n  var segmentRequestCallback = handleSegmentResponse(segment, captionParser, finishProcessingFn);\n  var segmentXhr = xhr$$1(segmentRequestOptions, segmentRequestCallback);\n\n  segmentXhr.addEventListener('progress', handleProgress(segment, progressFn));\n  activeXhrs.push(segmentXhr);\n\n  return function () {\n    return abortAll(activeXhrs);\n  };\n};\n\n// Utilities\n\n/**\n * Returns the CSS value for the specified property on an element\n * using `getComputedStyle`. Firefox has a long-standing issue where\n * getComputedStyle() may return null when running in an iframe with\n * `display: none`.\n *\n * @see https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n * @param {HTMLElement} el the htmlelement to work on\n * @param {string} the proprety to get the style for\n */\nvar safeGetComputedStyle = function safeGetComputedStyle(el, property) {\n  var result = void 0;\n\n  if (!el) {\n    return '';\n  }\n\n  result = window$1.getComputedStyle(el);\n  if (!result) {\n    return '';\n  }\n\n  return result[property];\n};\n\n/**\n * Resuable stable sort function\n *\n * @param {Playlists} array\n * @param {Function} sortFn Different comparators\n * @function stableSort\n */\nvar stableSort = function stableSort(array, sortFn) {\n  var newArray = array.slice();\n\n  array.sort(function (left, right) {\n    var cmp = sortFn(left, right);\n\n    if (cmp === 0) {\n      return newArray.indexOf(left) - newArray.indexOf(right);\n    }\n    return cmp;\n  });\n};\n\n/**\n * A comparator function to sort two playlist object by bandwidth.\n *\n * @param {Object} left a media playlist object\n * @param {Object} right a media playlist object\n * @return {Number} Greater than zero if the bandwidth attribute of\n * left is greater than the corresponding attribute of right. Less\n * than zero if the bandwidth of right is greater than left and\n * exactly zero if the two are equal.\n */\nvar comparePlaylistBandwidth = function comparePlaylistBandwidth(left, right) {\n  var leftBandwidth = void 0;\n  var rightBandwidth = void 0;\n\n  if (left.attributes.BANDWIDTH) {\n    leftBandwidth = left.attributes.BANDWIDTH;\n  }\n  leftBandwidth = leftBandwidth || window$1.Number.MAX_VALUE;\n  if (right.attributes.BANDWIDTH) {\n    rightBandwidth = right.attributes.BANDWIDTH;\n  }\n  rightBandwidth = rightBandwidth || window$1.Number.MAX_VALUE;\n\n  return leftBandwidth - rightBandwidth;\n};\n\n/**\n * A comparator function to sort two playlist object by resolution (width).\n * @param {Object} left a media playlist object\n * @param {Object} right a media playlist object\n * @return {Number} Greater than zero if the resolution.width attribute of\n * left is greater than the corresponding attribute of right. Less\n * than zero if the resolution.width of right is greater than left and\n * exactly zero if the two are equal.\n */\nvar comparePlaylistResolution = function comparePlaylistResolution(left, right) {\n  var leftWidth = void 0;\n  var rightWidth = void 0;\n\n  if (left.attributes.RESOLUTION && left.attributes.RESOLUTION.width) {\n    leftWidth = left.attributes.RESOLUTION.width;\n  }\n\n  leftWidth = leftWidth || window$1.Number.MAX_VALUE;\n\n  if (right.attributes.RESOLUTION && right.attributes.RESOLUTION.width) {\n    rightWidth = right.attributes.RESOLUTION.width;\n  }\n\n  rightWidth = rightWidth || window$1.Number.MAX_VALUE;\n\n  // NOTE - Fallback to bandwidth sort as appropriate in cases where multiple renditions\n  // have the same media dimensions/ resolution\n  if (leftWidth === rightWidth && left.attributes.BANDWIDTH && right.attributes.BANDWIDTH) {\n    return left.attributes.BANDWIDTH - right.attributes.BANDWIDTH;\n  }\n  return leftWidth - rightWidth;\n};\n\n/**\n * Chooses the appropriate media playlist based on bandwidth and player size\n *\n * @param {Object} master\n *        Object representation of the master manifest\n * @param {Number} playerBandwidth\n *        Current calculated bandwidth of the player\n * @param {Number} playerWidth\n *        Current width of the player element\n * @param {Number} playerHeight\n *        Current height of the player element\n * @return {Playlist} the highest bitrate playlist less than the\n * currently detected bandwidth, accounting for some amount of\n * bandwidth variance\n */\nvar simpleSelector = function simpleSelector(master, playerBandwidth, playerWidth, playerHeight) {\n  // convert the playlists to an intermediary representation to make comparisons easier\n  var sortedPlaylistReps = master.playlists.map(function (playlist) {\n    var width = void 0;\n    var height = void 0;\n    var bandwidth = void 0;\n\n    width = playlist.attributes.RESOLUTION && playlist.attributes.RESOLUTION.width;\n    height = playlist.attributes.RESOLUTION && playlist.attributes.RESOLUTION.height;\n    bandwidth = playlist.attributes.BANDWIDTH;\n\n    bandwidth = bandwidth || window$1.Number.MAX_VALUE;\n\n    return {\n      bandwidth: bandwidth,\n      width: width,\n      height: height,\n      playlist: playlist\n    };\n  });\n\n  stableSort(sortedPlaylistReps, function (left, right) {\n    return left.bandwidth - right.bandwidth;\n  });\n\n  // filter out any playlists that have been excluded due to\n  // incompatible configurations\n  sortedPlaylistReps = sortedPlaylistReps.filter(function (rep) {\n    return !Playlist.isIncompatible(rep.playlist);\n  });\n\n  // filter out any playlists that have been disabled manually through the representations\n  // api or blacklisted temporarily due to playback errors.\n  var enabledPlaylistReps = sortedPlaylistReps.filter(function (rep) {\n    return Playlist.isEnabled(rep.playlist);\n  });\n\n  if (!enabledPlaylistReps.length) {\n    // if there are no enabled playlists, then they have all been blacklisted or disabled\n    // by the user through the representations api. In this case, ignore blacklisting and\n    // fallback to what the user wants by using playlists the user has not disabled.\n    enabledPlaylistReps = sortedPlaylistReps.filter(function (rep) {\n      return !Playlist.isDisabled(rep.playlist);\n    });\n  }\n\n  // filter out any variant that has greater effective bitrate\n  // than the current estimated bandwidth\n  var bandwidthPlaylistReps = enabledPlaylistReps.filter(function (rep) {\n    return rep.bandwidth * Config.BANDWIDTH_VARIANCE < playerBandwidth;\n  });\n\n  var highestRemainingBandwidthRep = bandwidthPlaylistReps[bandwidthPlaylistReps.length - 1];\n\n  // get all of the renditions with the same (highest) bandwidth\n  // and then taking the very first element\n  var bandwidthBestRep = bandwidthPlaylistReps.filter(function (rep) {\n    return rep.bandwidth === highestRemainingBandwidthRep.bandwidth;\n  })[0];\n\n  // filter out playlists without resolution information\n  var haveResolution = bandwidthPlaylistReps.filter(function (rep) {\n    return rep.width && rep.height;\n  });\n\n  // sort variants by resolution\n  stableSort(haveResolution, function (left, right) {\n    return left.width - right.width;\n  });\n\n  // if we have the exact resolution as the player use it\n  var resolutionBestRepList = haveResolution.filter(function (rep) {\n    return rep.width === playerWidth && rep.height === playerHeight;\n  });\n\n  highestRemainingBandwidthRep = resolutionBestRepList[resolutionBestRepList.length - 1];\n  // ensure that we pick the highest bandwidth variant that have exact resolution\n  var resolutionBestRep = resolutionBestRepList.filter(function (rep) {\n    return rep.bandwidth === highestRemainingBandwidthRep.bandwidth;\n  })[0];\n\n  var resolutionPlusOneList = void 0;\n  var resolutionPlusOneSmallest = void 0;\n  var resolutionPlusOneRep = void 0;\n\n  // find the smallest variant that is larger than the player\n  // if there is no match of exact resolution\n  if (!resolutionBestRep) {\n    resolutionPlusOneList = haveResolution.filter(function (rep) {\n      return rep.width > playerWidth || rep.height > playerHeight;\n    });\n\n    // find all the variants have the same smallest resolution\n    resolutionPlusOneSmallest = resolutionPlusOneList.filter(function (rep) {\n      return rep.width === resolutionPlusOneList[0].width && rep.height === resolutionPlusOneList[0].height;\n    });\n\n    // ensure that we also pick the highest bandwidth variant that\n    // is just-larger-than the video player\n    highestRemainingBandwidthRep = resolutionPlusOneSmallest[resolutionPlusOneSmallest.length - 1];\n    resolutionPlusOneRep = resolutionPlusOneSmallest.filter(function (rep) {\n      return rep.bandwidth === highestRemainingBandwidthRep.bandwidth;\n    })[0];\n  }\n\n  // fallback chain of variants\n  var chosenRep = resolutionPlusOneRep || resolutionBestRep || bandwidthBestRep || enabledPlaylistReps[0] || sortedPlaylistReps[0];\n\n  return chosenRep ? chosenRep.playlist : null;\n};\n\n// Playlist Selectors\n\n/**\n * Chooses the appropriate media playlist based on the most recent\n * bandwidth estimate and the player size.\n *\n * Expects to be called within the context of an instance of HlsHandler\n *\n * @return {Playlist} the highest bitrate playlist less than the\n * currently detected bandwidth, accounting for some amount of\n * bandwidth variance\n */\nvar lastBandwidthSelector = function lastBandwidthSelector() {\n  return simpleSelector(this.playlists.master, this.systemBandwidth, parseInt(safeGetComputedStyle(this.tech_.el(), 'width'), 10), parseInt(safeGetComputedStyle(this.tech_.el(), 'height'), 10));\n};\n\n/**\n * Chooses the appropriate media playlist based on the potential to rebuffer\n *\n * @param {Object} settings\n *        Object of information required to use this selector\n * @param {Object} settings.master\n *        Object representation of the master manifest\n * @param {Number} settings.currentTime\n *        The current time of the player\n * @param {Number} settings.bandwidth\n *        Current measured bandwidth\n * @param {Number} settings.duration\n *        Duration of the media\n * @param {Number} settings.segmentDuration\n *        Segment duration to be used in round trip time calculations\n * @param {Number} settings.timeUntilRebuffer\n *        Time left in seconds until the player has to rebuffer\n * @param {Number} settings.currentTimeline\n *        The current timeline segments are being loaded from\n * @param {SyncController} settings.syncController\n *        SyncController for determining if we have a sync point for a given playlist\n * @return {Object|null}\n *         {Object} return.playlist\n *         The highest bandwidth playlist with the least amount of rebuffering\n *         {Number} return.rebufferingImpact\n *         The amount of time in seconds switching to this playlist will rebuffer. A\n *         negative value means that switching will cause zero rebuffering.\n */\nvar minRebufferMaxBandwidthSelector = function minRebufferMaxBandwidthSelector(settings) {\n  var master = settings.master,\n      currentTime = settings.currentTime,\n      bandwidth = settings.bandwidth,\n      duration$$1 = settings.duration,\n      segmentDuration = settings.segmentDuration,\n      timeUntilRebuffer = settings.timeUntilRebuffer,\n      currentTimeline = settings.currentTimeline,\n      syncController = settings.syncController;\n\n  // filter out any playlists that have been excluded due to\n  // incompatible configurations\n\n  var compatiblePlaylists = master.playlists.filter(function (playlist) {\n    return !Playlist.isIncompatible(playlist);\n  });\n\n  // filter out any playlists that have been disabled manually through the representations\n  // api or blacklisted temporarily due to playback errors.\n  var enabledPlaylists = compatiblePlaylists.filter(Playlist.isEnabled);\n\n  if (!enabledPlaylists.length) {\n    // if there are no enabled playlists, then they have all been blacklisted or disabled\n    // by the user through the representations api. In this case, ignore blacklisting and\n    // fallback to what the user wants by using playlists the user has not disabled.\n    enabledPlaylists = compatiblePlaylists.filter(function (playlist) {\n      return !Playlist.isDisabled(playlist);\n    });\n  }\n\n  var bandwidthPlaylists = enabledPlaylists.filter(Playlist.hasAttribute.bind(null, 'BANDWIDTH'));\n\n  var rebufferingEstimates = bandwidthPlaylists.map(function (playlist) {\n    var syncPoint = syncController.getSyncPoint(playlist, duration$$1, currentTimeline, currentTime);\n    // If there is no sync point for this playlist, switching to it will require a\n    // sync request first. This will double the request time\n    var numRequests = syncPoint ? 1 : 2;\n    var requestTimeEstimate = Playlist.estimateSegmentRequestTime(segmentDuration, bandwidth, playlist);\n    var rebufferingImpact = requestTimeEstimate * numRequests - timeUntilRebuffer;\n\n    return {\n      playlist: playlist,\n      rebufferingImpact: rebufferingImpact\n    };\n  });\n\n  var noRebufferingPlaylists = rebufferingEstimates.filter(function (estimate) {\n    return estimate.rebufferingImpact <= 0;\n  });\n\n  // Sort by bandwidth DESC\n  stableSort(noRebufferingPlaylists, function (a, b) {\n    return comparePlaylistBandwidth(b.playlist, a.playlist);\n  });\n\n  if (noRebufferingPlaylists.length) {\n    return noRebufferingPlaylists[0];\n  }\n\n  stableSort(rebufferingEstimates, function (a, b) {\n    return a.rebufferingImpact - b.rebufferingImpact;\n  });\n\n  return rebufferingEstimates[0] || null;\n};\n\n/**\n * Chooses the appropriate media playlist, which in this case is the lowest bitrate\n * one with video.  If no renditions with video exist, return the lowest audio rendition.\n *\n * Expects to be called within the context of an instance of HlsHandler\n *\n * @return {Object|null}\n *         {Object} return.playlist\n *         The lowest bitrate playlist that contains a video codec.  If no such rendition\n *         exists pick the lowest audio rendition.\n */\nvar lowestBitrateCompatibleVariantSelector = function lowestBitrateCompatibleVariantSelector() {\n  // filter out any playlists that have been excluded due to\n  // incompatible configurations or playback errors\n  var playlists = this.playlists.master.playlists.filter(Playlist.isEnabled);\n\n  // Sort ascending by bitrate\n  stableSort(playlists, function (a, b) {\n    return comparePlaylistBandwidth(a, b);\n  });\n\n  // Parse and assume that playlists with no video codec have no video\n  // (this is not necessarily true, although it is generally true).\n  //\n  // If an entire manifest has no valid videos everything will get filtered\n  // out.\n  var playlistsWithVideo = playlists.filter(function (playlist) {\n    return parseCodecs(playlist.attributes.CODECS).videoCodec;\n  });\n\n  return playlistsWithVideo[0] || null;\n};\n\n/**\n * Create captions text tracks on video.js if they do not exist\n *\n * @param {Object} inbandTextTracks a reference to current inbandTextTracks\n * @param {Object} tech the video.js tech\n * @param {Object} captionStreams the caption streams to create\n * @private\n */\nvar createCaptionsTrackIfNotExists = function createCaptionsTrackIfNotExists(inbandTextTracks, tech, captionStreams) {\n  for (var trackId in captionStreams) {\n    if (!inbandTextTracks[trackId]) {\n      tech.trigger({ type: 'usage', name: 'hls-608' });\n      var track = tech.textTracks().getTrackById(trackId);\n\n      if (track) {\n        // Resuse an existing track with a CC# id because this was\n        // very likely created by videojs-contrib-hls from information\n        // in the m3u8 for us to use\n        inbandTextTracks[trackId] = track;\n      } else {\n        // Otherwise, create a track with the default `CC#` label and\n        // without a language\n        inbandTextTracks[trackId] = tech.addRemoteTextTrack({\n          kind: 'captions',\n          id: trackId,\n          label: trackId\n        }, false).track;\n      }\n    }\n  }\n};\n\nvar addCaptionData = function addCaptionData(_ref) {\n  var inbandTextTracks = _ref.inbandTextTracks,\n      captionArray = _ref.captionArray,\n      timestampOffset = _ref.timestampOffset;\n\n  if (!captionArray) {\n    return;\n  }\n\n  var Cue = window.WebKitDataCue || window.VTTCue;\n\n  captionArray.forEach(function (caption) {\n    var track = caption.stream;\n    var startTime = caption.startTime;\n    var endTime = caption.endTime;\n\n    if (!inbandTextTracks[track]) {\n      return;\n    }\n\n    startTime += timestampOffset;\n    endTime += timestampOffset;\n\n    inbandTextTracks[track].addCue(new Cue(startTime, endTime, caption.text));\n  });\n};\n\n/**\n * @file segment-loader.js\n */\n\n// in ms\nvar CHECK_BUFFER_DELAY = 500;\n\n/**\n * Determines if we should call endOfStream on the media source based\n * on the state of the buffer or if appened segment was the final\n * segment in the playlist.\n *\n * @param {Object} playlist a media playlist object\n * @param {Object} mediaSource the MediaSource object\n * @param {Number} segmentIndex the index of segment we last appended\n * @returns {Boolean} do we need to call endOfStream on the MediaSource\n */\nvar detectEndOfStream = function detectEndOfStream(playlist, mediaSource, segmentIndex) {\n  if (!playlist || !mediaSource) {\n    return false;\n  }\n\n  var segments = playlist.segments;\n\n  // determine a few boolean values to help make the branch below easier\n  // to read\n  var appendedLastSegment = segmentIndex === segments.length;\n\n  // if we've buffered to the end of the video, we need to call endOfStream\n  // so that MediaSources can trigger the `ended` event when it runs out of\n  // buffered data instead of waiting for me\n  return playlist.endList && mediaSource.readyState === 'open' && appendedLastSegment;\n};\n\nvar finite = function finite(num) {\n  return typeof num === 'number' && isFinite(num);\n};\n\nvar illegalMediaSwitch = function illegalMediaSwitch(loaderType, startingMedia, newSegmentMedia) {\n  // Although these checks should most likely cover non 'main' types, for now it narrows\n  // the scope of our checks.\n  if (loaderType !== 'main' || !startingMedia || !newSegmentMedia) {\n    return null;\n  }\n\n  if (!newSegmentMedia.containsAudio && !newSegmentMedia.containsVideo) {\n    return 'Neither audio nor video found in segment.';\n  }\n\n  if (startingMedia.containsVideo && !newSegmentMedia.containsVideo) {\n    return 'Only audio found in segment when we expected video.' + ' We can\\'t switch to audio only from a stream that had video.' + ' To get rid of this message, please add codec information to the manifest.';\n  }\n\n  if (!startingMedia.containsVideo && newSegmentMedia.containsVideo) {\n    return 'Video found in segment when we expected only audio.' + ' We can\\'t switch to a stream with video from an audio only stream.' + ' To get rid of this message, please add codec information to the manifest.';\n  }\n\n  return null;\n};\n\n/**\n * Calculates a time value that is safe to remove from the back buffer without interupting\n * playback.\n *\n * @param {TimeRange} seekable\n *        The current seekable range\n * @param {Number} currentTime\n *        The current time of the player\n * @param {Number} targetDuration\n *        The target duration of the current playlist\n * @return {Number}\n *         Time that is safe to remove from the back buffer without interupting playback\n */\nvar safeBackBufferTrimTime = function safeBackBufferTrimTime(seekable$$1, currentTime, targetDuration) {\n  var removeToTime = void 0;\n\n  if (seekable$$1.length && seekable$$1.start(0) > 0 && seekable$$1.start(0) < currentTime) {\n    // If we have a seekable range use that as the limit for what can be removed safely\n    removeToTime = seekable$$1.start(0);\n  } else {\n    // otherwise remove anything older than 30 seconds before the current play head\n    removeToTime = currentTime - 30;\n  }\n\n  // Don't allow removing from the buffer within target duration of current time\n  // to avoid the possibility of removing the GOP currently being played which could\n  // cause playback stalls.\n  return Math.min(removeToTime, currentTime - targetDuration);\n};\n\nvar segmentInfoString = function segmentInfoString(segmentInfo) {\n  var _segmentInfo$segment = segmentInfo.segment,\n      start = _segmentInfo$segment.start,\n      end = _segmentInfo$segment.end,\n      _segmentInfo$playlist = segmentInfo.playlist,\n      seq = _segmentInfo$playlist.mediaSequence,\n      id = _segmentInfo$playlist.id,\n      _segmentInfo$playlist2 = _segmentInfo$playlist.segments,\n      segments = _segmentInfo$playlist2 === undefined ? [] : _segmentInfo$playlist2,\n      index = segmentInfo.mediaIndex,\n      timeline = segmentInfo.timeline;\n\n  return ['appending [' + index + '] of [' + seq + ', ' + (seq + segments.length) + '] from playlist [' + id + ']', '[' + start + ' => ' + end + '] in timeline [' + timeline + ']'].join(' ');\n};\n\n/**\n * An object that manages segment loading and appending.\n *\n * @class SegmentLoader\n * @param {Object} options required and optional options\n * @extends videojs.EventTarget\n */\n\nvar SegmentLoader = function (_videojs$EventTarget) {\n  inherits$1(SegmentLoader, _videojs$EventTarget);\n\n  function SegmentLoader(settings) {\n    classCallCheck$1(this, SegmentLoader);\n\n    // check pre-conditions\n    var _this = possibleConstructorReturn$1(this, (SegmentLoader.__proto__ || Object.getPrototypeOf(SegmentLoader)).call(this));\n\n    if (!settings) {\n      throw new TypeError('Initialization settings are required');\n    }\n    if (typeof settings.currentTime !== 'function') {\n      throw new TypeError('No currentTime getter specified');\n    }\n    if (!settings.mediaSource) {\n      throw new TypeError('No MediaSource specified');\n    }\n    // public properties\n    _this.bandwidth = settings.bandwidth;\n    _this.throughput = { rate: 0, count: 0 };\n    _this.roundTrip = NaN;\n    _this.resetStats_();\n    _this.mediaIndex = null;\n\n    // private settings\n    _this.hasPlayed_ = settings.hasPlayed;\n    _this.currentTime_ = settings.currentTime;\n    _this.seekable_ = settings.seekable;\n    _this.seeking_ = settings.seeking;\n    _this.duration_ = settings.duration;\n    _this.mediaSource_ = settings.mediaSource;\n    _this.hls_ = settings.hls;\n    _this.loaderType_ = settings.loaderType;\n    _this.startingMedia_ = void 0;\n    _this.segmentMetadataTrack_ = settings.segmentMetadataTrack;\n    _this.goalBufferLength_ = settings.goalBufferLength;\n    _this.sourceType_ = settings.sourceType;\n    _this.inbandTextTracks_ = settings.inbandTextTracks;\n    _this.state_ = 'INIT';\n\n    // private instance variables\n    _this.checkBufferTimeout_ = null;\n    _this.error_ = void 0;\n    _this.currentTimeline_ = -1;\n    _this.pendingSegment_ = null;\n    _this.mimeType_ = null;\n    _this.sourceUpdater_ = null;\n    _this.xhrOptions_ = null;\n\n    // Fragmented mp4 playback\n    _this.activeInitSegmentId_ = null;\n    _this.initSegments_ = {};\n    // Fmp4 CaptionParser\n    _this.captionParser_ = new CaptionParser();\n\n    _this.decrypter_ = settings.decrypter;\n\n    // Manages the tracking and generation of sync-points, mappings\n    // between a time in the display time and a segment index within\n    // a playlist\n    _this.syncController_ = settings.syncController;\n    _this.syncPoint_ = {\n      segmentIndex: 0,\n      time: 0\n    };\n\n    _this.syncController_.on('syncinfoupdate', function () {\n      return _this.trigger('syncinfoupdate');\n    });\n\n    _this.mediaSource_.addEventListener('sourceopen', function () {\n      return _this.ended_ = false;\n    });\n\n    // ...for determining the fetch location\n    _this.fetchAtBuffer_ = false;\n\n    _this.logger_ = logger('SegmentLoader[' + _this.loaderType_ + ']');\n\n    Object.defineProperty(_this, 'state', {\n      get: function get$$1() {\n        return this.state_;\n      },\n      set: function set$$1(newState) {\n        if (newState !== this.state_) {\n          this.logger_(this.state_ + ' -> ' + newState);\n          this.state_ = newState;\n        }\n      }\n    });\n    return _this;\n  }\n\n  /**\n   * reset all of our media stats\n   *\n   * @private\n   */\n\n  createClass$1(SegmentLoader, [{\n    key: 'resetStats_',\n    value: function resetStats_() {\n      this.mediaBytesTransferred = 0;\n      this.mediaRequests = 0;\n      this.mediaRequestsAborted = 0;\n      this.mediaRequestsTimedout = 0;\n      this.mediaRequestsErrored = 0;\n      this.mediaTransferDuration = 0;\n      this.mediaSecondsLoaded = 0;\n    }\n\n    /**\n     * dispose of the SegmentLoader and reset to the default state\n     */\n\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.state = 'DISPOSED';\n      this.pause();\n      this.abort_();\n      if (this.sourceUpdater_) {\n        this.sourceUpdater_.dispose();\n      }\n      this.resetStats_();\n      this.captionParser_.reset();\n    }\n\n    /**\n     * abort anything that is currently doing on with the SegmentLoader\n     * and reset to a default state\n     */\n\n  }, {\n    key: 'abort',\n    value: function abort() {\n      if (this.state !== 'WAITING') {\n        if (this.pendingSegment_) {\n          this.pendingSegment_ = null;\n        }\n        return;\n      }\n\n      this.abort_();\n\n      // We aborted the requests we were waiting on, so reset the loader's state to READY\n      // since we are no longer \"waiting\" on any requests. XHR callback is not always run\n      // when the request is aborted. This will prevent the loader from being stuck in the\n      // WAITING state indefinitely.\n      this.state = 'READY';\n\n      // don't wait for buffer check timeouts to begin fetching the\n      // next segment\n      if (!this.paused()) {\n        this.monitorBuffer_();\n      }\n    }\n\n    /**\n     * abort all pending xhr requests and null any pending segements\n     *\n     * @private\n     */\n\n  }, {\n    key: 'abort_',\n    value: function abort_() {\n      if (this.pendingSegment_) {\n        this.pendingSegment_.abortRequests();\n      }\n\n      // clear out the segment being processed\n      this.pendingSegment_ = null;\n    }\n\n    /**\n     * set an error on the segment loader and null out any pending segements\n     *\n     * @param {Error} error the error to set on the SegmentLoader\n     * @return {Error} the error that was set or that is currently set\n     */\n\n  }, {\n    key: 'error',\n    value: function error(_error) {\n      if (typeof _error !== 'undefined') {\n        this.error_ = _error;\n      }\n\n      this.pendingSegment_ = null;\n      return this.error_;\n    }\n  }, {\n    key: 'endOfStream',\n    value: function endOfStream() {\n      this.ended_ = true;\n      this.pause();\n      this.trigger('ended');\n    }\n\n    /**\n     * Indicates which time ranges are buffered\n     *\n     * @return {TimeRange}\n     *         TimeRange object representing the current buffered ranges\n     */\n\n  }, {\n    key: 'buffered_',\n    value: function buffered_() {\n      if (!this.sourceUpdater_) {\n        return videojs$1.createTimeRanges();\n      }\n\n      return this.sourceUpdater_.buffered();\n    }\n\n    /**\n     * Gets and sets init segment for the provided map\n     *\n     * @param {Object} map\n     *        The map object representing the init segment to get or set\n     * @param {Boolean=} set\n     *        If true, the init segment for the provided map should be saved\n     * @return {Object}\n     *         map object for desired init segment\n     */\n\n  }, {\n    key: 'initSegment',\n    value: function initSegment(map) {\n      var set$$1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (!map) {\n        return null;\n      }\n\n      var id = initSegmentId(map);\n      var storedMap = this.initSegments_[id];\n\n      if (set$$1 && !storedMap && map.bytes) {\n        this.initSegments_[id] = storedMap = {\n          resolvedUri: map.resolvedUri,\n          byterange: map.byterange,\n          bytes: map.bytes,\n          timescales: map.timescales,\n          videoTrackIds: map.videoTrackIds\n        };\n      }\n\n      return storedMap || map;\n    }\n\n    /**\n     * Returns true if all configuration required for loading is present, otherwise false.\n     *\n     * @return {Boolean} True if the all configuration is ready for loading\n     * @private\n     */\n\n  }, {\n    key: 'couldBeginLoading_',\n    value: function couldBeginLoading_() {\n      return this.playlist_ && (\n      // the source updater is created when init_ is called, so either having a\n      // source updater or being in the INIT state with a mimeType is enough\n      // to say we have all the needed configuration to start loading.\n      this.sourceUpdater_ || this.mimeType_ && this.state === 'INIT') && !this.paused();\n    }\n\n    /**\n     * load a playlist and start to fill the buffer\n     */\n\n  }, {\n    key: 'load',\n    value: function load() {\n      // un-pause\n      this.monitorBuffer_();\n\n      // if we don't have a playlist yet, keep waiting for one to be\n      // specified\n      if (!this.playlist_) {\n        return;\n      }\n\n      // not sure if this is the best place for this\n      this.syncController_.setDateTimeMapping(this.playlist_);\n\n      // if all the configuration is ready, initialize and begin loading\n      if (this.state === 'INIT' && this.couldBeginLoading_()) {\n        return this.init_();\n      }\n\n      // if we're in the middle of processing a segment already, don't\n      // kick off an additional segment request\n      if (!this.couldBeginLoading_() || this.state !== 'READY' && this.state !== 'INIT') {\n        return;\n      }\n\n      this.state = 'READY';\n    }\n\n    /**\n     * Once all the starting parameters have been specified, begin\n     * operation. This method should only be invoked from the INIT\n     * state.\n     *\n     * @private\n     */\n\n  }, {\n    key: 'init_',\n    value: function init_() {\n      this.state = 'READY';\n      this.sourceUpdater_ = new SourceUpdater(this.mediaSource_, this.mimeType_, this.loaderType_, this.sourceBufferEmitter_);\n      this.resetEverything();\n      return this.monitorBuffer_();\n    }\n\n    /**\n     * set a playlist on the segment loader\n     *\n     * @param {PlaylistLoader} media the playlist to set on the segment loader\n     */\n\n  }, {\n    key: 'playlist',\n    value: function playlist(newPlaylist) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (!newPlaylist) {\n        return;\n      }\n\n      var oldPlaylist = this.playlist_;\n      var segmentInfo = this.pendingSegment_;\n\n      this.playlist_ = newPlaylist;\n      this.xhrOptions_ = options;\n\n      // when we haven't started playing yet, the start of a live playlist\n      // is always our zero-time so force a sync update each time the playlist\n      // is refreshed from the server\n      if (!this.hasPlayed_()) {\n        newPlaylist.syncInfo = {\n          mediaSequence: newPlaylist.mediaSequence,\n          time: 0\n        };\n      }\n\n      var oldId = oldPlaylist ? oldPlaylist.id : null;\n\n      this.logger_('playlist update [' + oldId + ' => ' + newPlaylist.id + ']');\n\n      // in VOD, this is always a rendition switch (or we updated our syncInfo above)\n      // in LIVE, we always want to update with new playlists (including refreshes)\n      this.trigger('syncinfoupdate');\n\n      // if we were unpaused but waiting for a playlist, start\n      // buffering now\n      if (this.state === 'INIT' && this.couldBeginLoading_()) {\n        return this.init_();\n      }\n\n      if (!oldPlaylist || oldPlaylist.uri !== newPlaylist.uri) {\n        if (this.mediaIndex !== null) {\n          // we must \"resync\" the segment loader when we switch renditions and\n          // the segment loader is already synced to the previous rendition\n          this.resyncLoader();\n        }\n\n        // the rest of this function depends on `oldPlaylist` being defined\n        return;\n      }\n\n      // we reloaded the same playlist so we are in a live scenario\n      // and we will likely need to adjust the mediaIndex\n      var mediaSequenceDiff = newPlaylist.mediaSequence - oldPlaylist.mediaSequence;\n\n      this.logger_('live window shift [' + mediaSequenceDiff + ']');\n\n      // update the mediaIndex on the SegmentLoader\n      // this is important because we can abort a request and this value must be\n      // equal to the last appended mediaIndex\n      if (this.mediaIndex !== null) {\n        this.mediaIndex -= mediaSequenceDiff;\n      }\n\n      // update the mediaIndex on the SegmentInfo object\n      // this is important because we will update this.mediaIndex with this value\n      // in `handleUpdateEnd_` after the segment has been successfully appended\n      if (segmentInfo) {\n        segmentInfo.mediaIndex -= mediaSequenceDiff;\n\n        // we need to update the referenced segment so that timing information is\n        // saved for the new playlist's segment, however, if the segment fell off the\n        // playlist, we can leave the old reference and just lose the timing info\n        if (segmentInfo.mediaIndex >= 0) {\n          segmentInfo.segment = newPlaylist.segments[segmentInfo.mediaIndex];\n        }\n      }\n\n      this.syncController_.saveExpiredSegmentInfo(oldPlaylist, newPlaylist);\n    }\n\n    /**\n     * Prevent the loader from fetching additional segments. If there\n     * is a segment request outstanding, it will finish processing\n     * before the loader halts. A segment loader can be unpaused by\n     * calling load().\n     */\n\n  }, {\n    key: 'pause',\n    value: function pause() {\n      if (this.checkBufferTimeout_) {\n        window$1.clearTimeout(this.checkBufferTimeout_);\n\n        this.checkBufferTimeout_ = null;\n      }\n    }\n\n    /**\n     * Returns whether the segment loader is fetching additional\n     * segments when given the opportunity. This property can be\n     * modified through calls to pause() and load().\n     */\n\n  }, {\n    key: 'paused',\n    value: function paused() {\n      return this.checkBufferTimeout_ === null;\n    }\n\n    /**\n     * create/set the following mimetype on the SourceBuffer through a\n     * SourceUpdater\n     *\n     * @param {String} mimeType the mime type string to use\n     * @param {Object} sourceBufferEmitter an event emitter that fires when a source buffer\n     * is added to the media source\n     */\n\n  }, {\n    key: 'mimeType',\n    value: function mimeType(_mimeType, sourceBufferEmitter) {\n      if (this.mimeType_) {\n        return;\n      }\n\n      this.mimeType_ = _mimeType;\n      this.sourceBufferEmitter_ = sourceBufferEmitter;\n      // if we were unpaused but waiting for a sourceUpdater, start\n      // buffering now\n      if (this.state === 'INIT' && this.couldBeginLoading_()) {\n        this.init_();\n      }\n    }\n\n    /**\n     * Delete all the buffered data and reset the SegmentLoader\n     * @param {Function} [done] an optional callback to be executed when the remove\n     * operation is complete\n     */\n\n  }, {\n    key: 'resetEverything',\n    value: function resetEverything(done) {\n      this.ended_ = false;\n      this.resetLoader();\n      this.remove(0, this.duration_(), done);\n      // clears fmp4 captions\n      this.captionParser_.clearAllCaptions();\n      this.trigger('reseteverything');\n    }\n\n    /**\n     * Force the SegmentLoader to resync and start loading around the currentTime instead\n     * of starting at the end of the buffer\n     *\n     * Useful for fast quality changes\n     */\n\n  }, {\n    key: 'resetLoader',\n    value: function resetLoader() {\n      this.fetchAtBuffer_ = false;\n      this.resyncLoader();\n    }\n\n    /**\n     * Force the SegmentLoader to restart synchronization and make a conservative guess\n     * before returning to the simple walk-forward method\n     */\n\n  }, {\n    key: 'resyncLoader',\n    value: function resyncLoader() {\n      this.mediaIndex = null;\n      this.syncPoint_ = null;\n      this.abort();\n    }\n\n    /**\n     * Remove any data in the source buffer between start and end times\n     * @param {Number} start - the start time of the region to remove from the buffer\n     * @param {Number} end - the end time of the region to remove from the buffer\n     * @param {Function} [done] - an optional callback to be executed when the remove\n     * operation is complete\n     */\n\n  }, {\n    key: 'remove',\n    value: function remove(start, end, done) {\n      if (this.sourceUpdater_) {\n        this.sourceUpdater_.remove(start, end, done);\n      }\n      removeCuesFromTrack(start, end, this.segmentMetadataTrack_);\n\n      if (this.inbandTextTracks_) {\n        for (var id in this.inbandTextTracks_) {\n          removeCuesFromTrack(start, end, this.inbandTextTracks_[id]);\n        }\n      }\n    }\n\n    /**\n     * (re-)schedule monitorBufferTick_ to run as soon as possible\n     *\n     * @private\n     */\n\n  }, {\n    key: 'monitorBuffer_',\n    value: function monitorBuffer_() {\n      if (this.checkBufferTimeout_) {\n        window$1.clearTimeout(this.checkBufferTimeout_);\n      }\n\n      this.checkBufferTimeout_ = window$1.setTimeout(this.monitorBufferTick_.bind(this), 1);\n    }\n\n    /**\n     * As long as the SegmentLoader is in the READY state, periodically\n     * invoke fillBuffer_().\n     *\n     * @private\n     */\n\n  }, {\n    key: 'monitorBufferTick_',\n    value: function monitorBufferTick_() {\n      if (this.state === 'READY') {\n        this.fillBuffer_();\n      }\n\n      if (this.checkBufferTimeout_) {\n        window$1.clearTimeout(this.checkBufferTimeout_);\n      }\n\n      this.checkBufferTimeout_ = window$1.setTimeout(this.monitorBufferTick_.bind(this), CHECK_BUFFER_DELAY);\n    }\n\n    /**\n     * fill the buffer with segements unless the sourceBuffers are\n     * currently updating\n     *\n     * Note: this function should only ever be called by monitorBuffer_\n     * and never directly\n     *\n     * @private\n     */\n\n  }, {\n    key: 'fillBuffer_',\n    value: function fillBuffer_() {\n      if (this.sourceUpdater_.updating()) {\n        return;\n      }\n\n      if (!this.syncPoint_) {\n        this.syncPoint_ = this.syncController_.getSyncPoint(this.playlist_, this.duration_(), this.currentTimeline_, this.currentTime_());\n      }\n\n      // see if we need to begin loading immediately\n      var segmentInfo = this.checkBuffer_(this.buffered_(), this.playlist_, this.mediaIndex, this.hasPlayed_(), this.currentTime_(), this.syncPoint_);\n\n      if (!segmentInfo) {\n        return;\n      }\n\n      var isEndOfStream = detectEndOfStream(this.playlist_, this.mediaSource_, segmentInfo.mediaIndex);\n\n      if (isEndOfStream) {\n        this.endOfStream();\n        return;\n      }\n\n      if (segmentInfo.mediaIndex === this.playlist_.segments.length - 1 && this.mediaSource_.readyState === 'ended' && !this.seeking_()) {\n        return;\n      }\n\n      // We will need to change timestampOffset of the sourceBuffer if either of\n      // the following conditions are true:\n      // - The segment.timeline !== this.currentTimeline\n      //   (we are crossing a discontinuity somehow)\n      // - The \"timestampOffset\" for the start of this segment is less than\n      //   the currently set timestampOffset\n      // Also, clear captions if we are crossing a discontinuity boundary\n      if (segmentInfo.timeline !== this.currentTimeline_ || segmentInfo.startOfSegment !== null && segmentInfo.startOfSegment < this.sourceUpdater_.timestampOffset()) {\n        this.syncController_.reset();\n        segmentInfo.timestampOffset = segmentInfo.startOfSegment;\n        this.captionParser_.clearAllCaptions();\n      }\n\n      this.loadSegment_(segmentInfo);\n    }\n\n    /**\n     * Determines what segment request should be made, given current playback\n     * state.\n     *\n     * @param {TimeRanges} buffered - the state of the buffer\n     * @param {Object} playlist - the playlist object to fetch segments from\n     * @param {Number} mediaIndex - the previous mediaIndex fetched or null\n     * @param {Boolean} hasPlayed - a flag indicating whether we have played or not\n     * @param {Number} currentTime - the playback position in seconds\n     * @param {Object} syncPoint - a segment info object that describes the\n     * @returns {Object} a segment request object that describes the segment to load\n     */\n\n  }, {\n    key: 'checkBuffer_',\n    value: function checkBuffer_(buffered, playlist, mediaIndex, hasPlayed, currentTime, syncPoint) {\n      var lastBufferedEnd = 0;\n      var startOfSegment = void 0;\n\n      if (buffered.length) {\n        lastBufferedEnd = buffered.end(buffered.length - 1);\n      }\n\n      var bufferedTime = Math.max(0, lastBufferedEnd - currentTime);\n\n      if (!playlist.segments.length) {\n        return null;\n      }\n\n      // if there is plenty of content buffered, and the video has\n      // been played before relax for awhile\n      if (bufferedTime >= this.goalBufferLength_()) {\n        return null;\n      }\n\n      // if the video has not yet played once, and we already have\n      // one segment downloaded do nothing\n      if (!hasPlayed && bufferedTime >= 1) {\n        return null;\n      }\n\n      // When the syncPoint is null, there is no way of determining a good\n      // conservative segment index to fetch from\n      // The best thing to do here is to get the kind of sync-point data by\n      // making a request\n      if (syncPoint === null) {\n        mediaIndex = this.getSyncSegmentCandidate_(playlist);\n        return this.generateSegmentInfo_(playlist, mediaIndex, null, true);\n      }\n\n      // Under normal playback conditions fetching is a simple walk forward\n      if (mediaIndex !== null) {\n        var segment = playlist.segments[mediaIndex];\n\n        if (segment && segment.end) {\n          startOfSegment = segment.end;\n        } else {\n          startOfSegment = lastBufferedEnd;\n        }\n        return this.generateSegmentInfo_(playlist, mediaIndex + 1, startOfSegment, false);\n      }\n\n      // There is a sync-point but the lack of a mediaIndex indicates that\n      // we need to make a good conservative guess about which segment to\n      // fetch\n      if (this.fetchAtBuffer_) {\n        // Find the segment containing the end of the buffer\n        var mediaSourceInfo = Playlist.getMediaInfoForTime(playlist, lastBufferedEnd, syncPoint.segmentIndex, syncPoint.time);\n\n        mediaIndex = mediaSourceInfo.mediaIndex;\n        startOfSegment = mediaSourceInfo.startTime;\n      } else {\n        // Find the segment containing currentTime\n        var _mediaSourceInfo = Playlist.getMediaInfoForTime(playlist, currentTime, syncPoint.segmentIndex, syncPoint.time);\n\n        mediaIndex = _mediaSourceInfo.mediaIndex;\n        startOfSegment = _mediaSourceInfo.startTime;\n      }\n\n      return this.generateSegmentInfo_(playlist, mediaIndex, startOfSegment, false);\n    }\n\n    /**\n     * The segment loader has no recourse except to fetch a segment in the\n     * current playlist and use the internal timestamps in that segment to\n     * generate a syncPoint. This function returns a good candidate index\n     * for that process.\n     *\n     * @param {Object} playlist - the playlist object to look for a\n     * @returns {Number} An index of a segment from the playlist to load\n     */\n\n  }, {\n    key: 'getSyncSegmentCandidate_',\n    value: function getSyncSegmentCandidate_(playlist) {\n      var _this2 = this;\n\n      if (this.currentTimeline_ === -1) {\n        return 0;\n      }\n\n      var segmentIndexArray = playlist.segments.map(function (s, i) {\n        return {\n          timeline: s.timeline,\n          segmentIndex: i\n        };\n      }).filter(function (s) {\n        return s.timeline === _this2.currentTimeline_;\n      });\n\n      if (segmentIndexArray.length) {\n        return segmentIndexArray[Math.min(segmentIndexArray.length - 1, 1)].segmentIndex;\n      }\n\n      return Math.max(playlist.segments.length - 1, 0);\n    }\n  }, {\n    key: 'generateSegmentInfo_',\n    value: function generateSegmentInfo_(playlist, mediaIndex, startOfSegment, isSyncRequest) {\n      if (mediaIndex < 0 || mediaIndex >= playlist.segments.length) {\n        return null;\n      }\n\n      var segment = playlist.segments[mediaIndex];\n\n      return {\n        requestId: 'segment-loader-' + Math.random(),\n        // resolve the segment URL relative to the playlist\n        uri: segment.resolvedUri,\n        // the segment's mediaIndex at the time it was requested\n        mediaIndex: mediaIndex,\n        // whether or not to update the SegmentLoader's state with this\n        // segment's mediaIndex\n        isSyncRequest: isSyncRequest,\n        startOfSegment: startOfSegment,\n        // the segment's playlist\n        playlist: playlist,\n        // unencrypted bytes of the segment\n        bytes: null,\n        // when a key is defined for this segment, the encrypted bytes\n        encryptedBytes: null,\n        // The target timestampOffset for this segment when we append it\n        // to the source buffer\n        timestampOffset: null,\n        // The timeline that the segment is in\n        timeline: segment.timeline,\n        // The expected duration of the segment in seconds\n        duration: segment.duration,\n        // retain the segment in case the playlist updates while doing an async process\n        segment: segment\n      };\n    }\n\n    /**\n     * Determines if the network has enough bandwidth to complete the current segment\n     * request in a timely manner. If not, the request will be aborted early and bandwidth\n     * updated to trigger a playlist switch.\n     *\n     * @param {Object} stats\n     *        Object containing stats about the request timing and size\n     * @return {Boolean} True if the request was aborted, false otherwise\n     * @private\n     */\n\n  }, {\n    key: 'abortRequestEarly_',\n    value: function abortRequestEarly_(stats) {\n      if (this.hls_.tech_.paused() ||\n      // Don't abort if the current playlist is on the lowestEnabledRendition\n      // TODO: Replace using timeout with a boolean indicating whether this playlist is\n      //       the lowestEnabledRendition.\n      !this.xhrOptions_.timeout ||\n      // Don't abort if we have no bandwidth information to estimate segment sizes\n      !this.playlist_.attributes.BANDWIDTH) {\n        return false;\n      }\n\n      // Wait at least 1 second since the first byte of data has been received before\n      // using the calculated bandwidth from the progress event to allow the bitrate\n      // to stabilize\n      if (Date.now() - (stats.firstBytesReceivedAt || Date.now()) < 1000) {\n        return false;\n      }\n\n      var currentTime = this.currentTime_();\n      var measuredBandwidth = stats.bandwidth;\n      var segmentDuration = this.pendingSegment_.duration;\n\n      var requestTimeRemaining = Playlist.estimateSegmentRequestTime(segmentDuration, measuredBandwidth, this.playlist_, stats.bytesReceived);\n\n      // Subtract 1 from the timeUntilRebuffer so we still consider an early abort\n      // if we are only left with less than 1 second when the request completes.\n      // A negative timeUntilRebuffering indicates we are already rebuffering\n      var timeUntilRebuffer$$1 = timeUntilRebuffer(this.buffered_(), currentTime, this.hls_.tech_.playbackRate()) - 1;\n\n      // Only consider aborting early if the estimated time to finish the download\n      // is larger than the estimated time until the player runs out of forward buffer\n      if (requestTimeRemaining <= timeUntilRebuffer$$1) {\n        return false;\n      }\n\n      var switchCandidate = minRebufferMaxBandwidthSelector({\n        master: this.hls_.playlists.master,\n        currentTime: currentTime,\n        bandwidth: measuredBandwidth,\n        duration: this.duration_(),\n        segmentDuration: segmentDuration,\n        timeUntilRebuffer: timeUntilRebuffer$$1,\n        currentTimeline: this.currentTimeline_,\n        syncController: this.syncController_\n      });\n\n      if (!switchCandidate) {\n        return;\n      }\n\n      var rebufferingImpact = requestTimeRemaining - timeUntilRebuffer$$1;\n\n      var timeSavedBySwitching = rebufferingImpact - switchCandidate.rebufferingImpact;\n\n      var minimumTimeSaving = 0.5;\n\n      // If we are already rebuffering, increase the amount of variance we add to the\n      // potential round trip time of the new request so that we are not too aggressive\n      // with switching to a playlist that might save us a fraction of a second.\n      if (timeUntilRebuffer$$1 <= TIME_FUDGE_FACTOR) {\n        minimumTimeSaving = 1;\n      }\n\n      if (!switchCandidate.playlist || switchCandidate.playlist.uri === this.playlist_.uri || timeSavedBySwitching < minimumTimeSaving) {\n        return false;\n      }\n\n      // set the bandwidth to that of the desired playlist being sure to scale by\n      // BANDWIDTH_VARIANCE and add one so the playlist selector does not exclude it\n      // don't trigger a bandwidthupdate as the bandwidth is artifial\n      this.bandwidth = switchCandidate.playlist.attributes.BANDWIDTH * Config.BANDWIDTH_VARIANCE + 1;\n      this.abort();\n      this.trigger('earlyabort');\n      return true;\n    }\n\n    /**\n     * XHR `progress` event handler\n     *\n     * @param {Event}\n     *        The XHR `progress` event\n     * @param {Object} simpleSegment\n     *        A simplified segment object copy\n     * @private\n     */\n\n  }, {\n    key: 'handleProgress_',\n    value: function handleProgress_(event, simpleSegment) {\n      if (!this.pendingSegment_ || simpleSegment.requestId !== this.pendingSegment_.requestId || this.abortRequestEarly_(simpleSegment.stats)) {\n        return;\n      }\n\n      this.trigger('progress');\n    }\n\n    /**\n     * load a specific segment from a request into the buffer\n     *\n     * @private\n     */\n\n  }, {\n    key: 'loadSegment_',\n    value: function loadSegment_(segmentInfo) {\n      this.state = 'WAITING';\n      this.pendingSegment_ = segmentInfo;\n      this.trimBackBuffer_(segmentInfo);\n\n      segmentInfo.abortRequests = mediaSegmentRequest(this.hls_.xhr, this.xhrOptions_, this.decrypter_, this.captionParser_, this.createSimplifiedSegmentObj_(segmentInfo),\n      // progress callback\n      this.handleProgress_.bind(this), this.segmentRequestFinished_.bind(this));\n    }\n\n    /**\n     * trim the back buffer so that we don't have too much data\n     * in the source buffer\n     *\n     * @private\n     *\n     * @param {Object} segmentInfo - the current segment\n     */\n\n  }, {\n    key: 'trimBackBuffer_',\n    value: function trimBackBuffer_(segmentInfo) {\n      var removeToTime = safeBackBufferTrimTime(this.seekable_(), this.currentTime_(), this.playlist_.targetDuration || 10);\n\n      // Chrome has a hard limit of 150MB of\n      // buffer and a very conservative \"garbage collector\"\n      // We manually clear out the old buffer to ensure\n      // we don't trigger the QuotaExceeded error\n      // on the source buffer during subsequent appends\n\n      if (removeToTime > 0) {\n        this.remove(0, removeToTime);\n      }\n    }\n\n    /**\n     * created a simplified copy of the segment object with just the\n     * information necessary to perform the XHR and decryption\n     *\n     * @private\n     *\n     * @param {Object} segmentInfo - the current segment\n     * @returns {Object} a simplified segment object copy\n     */\n\n  }, {\n    key: 'createSimplifiedSegmentObj_',\n    value: function createSimplifiedSegmentObj_(segmentInfo) {\n      var segment = segmentInfo.segment;\n      var simpleSegment = {\n        resolvedUri: segment.resolvedUri,\n        byterange: segment.byterange,\n        requestId: segmentInfo.requestId\n      };\n\n      if (segment.key) {\n        // if the media sequence is greater than 2^32, the IV will be incorrect\n        // assuming 10s segments, that would be about 1300 years\n        var iv = segment.key.iv || new Uint32Array([0, 0, 0, segmentInfo.mediaIndex + segmentInfo.playlist.mediaSequence]);\n\n        simpleSegment.key = {\n          resolvedUri: segment.key.resolvedUri,\n          iv: iv\n        };\n      }\n\n      if (segment.map) {\n        simpleSegment.map = this.initSegment(segment.map);\n      }\n\n      return simpleSegment;\n    }\n\n    /**\n     * Handle the callback from the segmentRequest function and set the\n     * associated SegmentLoader state and errors if necessary\n     *\n     * @private\n     */\n\n  }, {\n    key: 'segmentRequestFinished_',\n    value: function segmentRequestFinished_(error, simpleSegment) {\n      // every request counts as a media request even if it has been aborted\n      // or canceled due to a timeout\n      this.mediaRequests += 1;\n\n      if (simpleSegment.stats) {\n        this.mediaBytesTransferred += simpleSegment.stats.bytesReceived;\n        this.mediaTransferDuration += simpleSegment.stats.roundTripTime;\n      }\n\n      // The request was aborted and the SegmentLoader has already been reset\n      if (!this.pendingSegment_) {\n        this.mediaRequestsAborted += 1;\n        return;\n      }\n\n      // the request was aborted and the SegmentLoader has already started\n      // another request. this can happen when the timeout for an aborted\n      // request triggers due to a limitation in the XHR library\n      // do not count this as any sort of request or we risk double-counting\n      if (simpleSegment.requestId !== this.pendingSegment_.requestId) {\n        return;\n      }\n\n      // an error occurred from the active pendingSegment_ so reset everything\n      if (error) {\n        this.pendingSegment_ = null;\n        this.state = 'READY';\n\n        // the requests were aborted just record the aborted stat and exit\n        // this is not a true error condition and nothing corrective needs\n        // to be done\n        if (error.code === REQUEST_ERRORS.ABORTED) {\n          this.mediaRequestsAborted += 1;\n          return;\n        }\n\n        this.pause();\n\n        // the error is really just that at least one of the requests timed-out\n        // set the bandwidth to a very low value and trigger an ABR switch to\n        // take emergency action\n        if (error.code === REQUEST_ERRORS.TIMEOUT) {\n          this.mediaRequestsTimedout += 1;\n          this.bandwidth = 1;\n          this.roundTrip = NaN;\n          this.trigger('bandwidthupdate');\n          return;\n        }\n\n        // if control-flow has arrived here, then the error is real\n        // emit an error event to blacklist the current playlist\n        this.mediaRequestsErrored += 1;\n        this.error(error);\n        this.trigger('error');\n        return;\n      }\n\n      // the response was a success so set any bandwidth stats the request\n      // generated for ABR purposes\n      this.bandwidth = simpleSegment.stats.bandwidth;\n      this.roundTrip = simpleSegment.stats.roundTripTime;\n\n      // if this request included an initialization segment, save that data\n      // to the initSegment cache\n      if (simpleSegment.map) {\n        simpleSegment.map = this.initSegment(simpleSegment.map, true);\n      }\n\n      this.processSegmentResponse_(simpleSegment);\n    }\n\n    /**\n     * Move any important data from the simplified segment object\n     * back to the real segment object for future phases\n     *\n     * @private\n     */\n\n  }, {\n    key: 'processSegmentResponse_',\n    value: function processSegmentResponse_(simpleSegment) {\n      var segmentInfo = this.pendingSegment_;\n\n      segmentInfo.bytes = simpleSegment.bytes;\n      if (simpleSegment.map) {\n        segmentInfo.segment.map.bytes = simpleSegment.map.bytes;\n      }\n\n      segmentInfo.endOfAllRequests = simpleSegment.endOfAllRequests;\n\n      // This has fmp4 captions, add them to text tracks\n      if (simpleSegment.fmp4Captions) {\n        createCaptionsTrackIfNotExists(this.inbandTextTracks_, this.hls_.tech_, simpleSegment.captionStreams);\n        addCaptionData({\n          inbandTextTracks: this.inbandTextTracks_,\n          captionArray: simpleSegment.fmp4Captions,\n          // fmp4s will not have a timestamp offset\n          timestampOffset: 0\n        });\n        // Reset stored captions since we added parsed\n        // captions to a text track at this point\n        this.captionParser_.clearParsedCaptions();\n      }\n\n      this.handleSegment_();\n    }\n\n    /**\n     * append a decrypted segement to the SourceBuffer through a SourceUpdater\n     *\n     * @private\n     */\n\n  }, {\n    key: 'handleSegment_',\n    value: function handleSegment_() {\n      var _this3 = this;\n\n      if (!this.pendingSegment_) {\n        this.state = 'READY';\n        return;\n      }\n\n      var segmentInfo = this.pendingSegment_;\n      var segment = segmentInfo.segment;\n      var timingInfo = this.syncController_.probeSegmentInfo(segmentInfo);\n\n      // When we have our first timing info, determine what media types this loader is\n      // dealing with. Although we're maintaining extra state, it helps to preserve the\n      // separation of segment loader from the actual source buffers.\n      if (typeof this.startingMedia_ === 'undefined' && timingInfo && (\n      // Guard against cases where we're not getting timing info at all until we are\n      // certain that all streams will provide it.\n      timingInfo.containsAudio || timingInfo.containsVideo)) {\n        this.startingMedia_ = {\n          containsAudio: timingInfo.containsAudio,\n          containsVideo: timingInfo.containsVideo\n        };\n      }\n\n      var illegalMediaSwitchError = illegalMediaSwitch(this.loaderType_, this.startingMedia_, timingInfo);\n\n      if (illegalMediaSwitchError) {\n        this.error({\n          message: illegalMediaSwitchError,\n          blacklistDuration: Infinity\n        });\n        this.trigger('error');\n        return;\n      }\n\n      if (segmentInfo.isSyncRequest) {\n        this.trigger('syncinfoupdate');\n        this.pendingSegment_ = null;\n        this.state = 'READY';\n        return;\n      }\n\n      if (segmentInfo.timestampOffset !== null && segmentInfo.timestampOffset !== this.sourceUpdater_.timestampOffset()) {\n        this.sourceUpdater_.timestampOffset(segmentInfo.timestampOffset);\n        // fired when a timestamp offset is set in HLS (can also identify discontinuities)\n        this.trigger('timestampoffset');\n      }\n\n      var timelineMapping = this.syncController_.mappingForTimeline(segmentInfo.timeline);\n\n      if (timelineMapping !== null) {\n        this.trigger({\n          type: 'segmenttimemapping',\n          mapping: timelineMapping\n        });\n      }\n\n      this.state = 'APPENDING';\n\n      // if the media initialization segment is changing, append it\n      // before the content segment\n      if (segment.map) {\n        var initId = initSegmentId(segment.map);\n\n        if (!this.activeInitSegmentId_ || this.activeInitSegmentId_ !== initId) {\n          var initSegment = this.initSegment(segment.map);\n\n          this.sourceUpdater_.appendBuffer(initSegment.bytes, function () {\n            _this3.activeInitSegmentId_ = initId;\n          });\n        }\n      }\n\n      segmentInfo.byteLength = segmentInfo.bytes.byteLength;\n      if (typeof segment.start === 'number' && typeof segment.end === 'number') {\n        this.mediaSecondsLoaded += segment.end - segment.start;\n      } else {\n        this.mediaSecondsLoaded += segment.duration;\n      }\n\n      this.logger_(segmentInfoString(segmentInfo));\n\n      this.sourceUpdater_.appendBuffer(segmentInfo.bytes, this.handleUpdateEnd_.bind(this));\n    }\n\n    /**\n     * callback to run when appendBuffer is finished. detects if we are\n     * in a good state to do things with the data we got, or if we need\n     * to wait for more\n     *\n     * @private\n     */\n\n  }, {\n    key: 'handleUpdateEnd_',\n    value: function handleUpdateEnd_() {\n      if (!this.pendingSegment_) {\n        this.state = 'READY';\n        if (!this.paused()) {\n          this.monitorBuffer_();\n        }\n        return;\n      }\n\n      var segmentInfo = this.pendingSegment_;\n      var segment = segmentInfo.segment;\n      var isWalkingForward = this.mediaIndex !== null;\n\n      this.pendingSegment_ = null;\n      this.recordThroughput_(segmentInfo);\n      this.addSegmentMetadataCue_(segmentInfo);\n\n      this.state = 'READY';\n\n      this.mediaIndex = segmentInfo.mediaIndex;\n      this.fetchAtBuffer_ = true;\n      this.currentTimeline_ = segmentInfo.timeline;\n\n      // We must update the syncinfo to recalculate the seekable range before\n      // the following conditional otherwise it may consider this a bad \"guess\"\n      // and attempt to resync when the post-update seekable window and live\n      // point would mean that this was the perfect segment to fetch\n      this.trigger('syncinfoupdate');\n\n      // If we previously appended a segment that ends more than 3 targetDurations before\n      // the currentTime_ that means that our conservative guess was too conservative.\n      // In that case, reset the loader state so that we try to use any information gained\n      // from the previous request to create a new, more accurate, sync-point.\n      if (segment.end && this.currentTime_() - segment.end > segmentInfo.playlist.targetDuration * 3) {\n        this.resetEverything();\n        return;\n      }\n\n      // Don't do a rendition switch unless we have enough time to get a sync segment\n      // and conservatively guess\n      if (isWalkingForward) {\n        this.trigger('bandwidthupdate');\n      }\n      this.trigger('progress');\n\n      // any time an update finishes and the last segment is in the\n      // buffer, end the stream. this ensures the \"ended\" event will\n      // fire if playback reaches that point.\n      var isEndOfStream = detectEndOfStream(segmentInfo.playlist, this.mediaSource_, segmentInfo.mediaIndex + 1);\n\n      if (isEndOfStream) {\n        this.endOfStream();\n      }\n\n      if (!this.paused()) {\n        this.monitorBuffer_();\n      }\n    }\n\n    /**\n     * Records the current throughput of the decrypt, transmux, and append\n     * portion of the semgment pipeline. `throughput.rate` is a the cumulative\n     * moving average of the throughput. `throughput.count` is the number of\n     * data points in the average.\n     *\n     * @private\n     * @param {Object} segmentInfo the object returned by loadSegment\n     */\n\n  }, {\n    key: 'recordThroughput_',\n    value: function recordThroughput_(segmentInfo) {\n      var rate = this.throughput.rate;\n      // Add one to the time to ensure that we don't accidentally attempt to divide\n      // by zero in the case where the throughput is ridiculously high\n      var segmentProcessingTime = Date.now() - segmentInfo.endOfAllRequests + 1;\n      // Multiply by 8000 to convert from bytes/millisecond to bits/second\n      var segmentProcessingThroughput = Math.floor(segmentInfo.byteLength / segmentProcessingTime * 8 * 1000);\n\n      // This is just a cumulative moving average calculation:\n      //   newAvg = oldAvg + (sample - oldAvg) / (sampleCount + 1)\n      this.throughput.rate += (segmentProcessingThroughput - rate) / ++this.throughput.count;\n    }\n\n    /**\n     * Adds a cue to the segment-metadata track with some metadata information about the\n     * segment\n     *\n     * @private\n     * @param {Object} segmentInfo\n     *        the object returned by loadSegment\n     * @method addSegmentMetadataCue_\n     */\n\n  }, {\n    key: 'addSegmentMetadataCue_',\n    value: function addSegmentMetadataCue_(segmentInfo) {\n      if (!this.segmentMetadataTrack_) {\n        return;\n      }\n\n      var segment = segmentInfo.segment;\n      var start = segment.start;\n      var end = segment.end;\n\n      // Do not try adding the cue if the start and end times are invalid.\n      if (!finite(start) || !finite(end)) {\n        return;\n      }\n\n      removeCuesFromTrack(start, end, this.segmentMetadataTrack_);\n\n      var Cue = window$1.WebKitDataCue || window$1.VTTCue;\n      var value = {\n        bandwidth: segmentInfo.playlist.attributes.BANDWIDTH,\n        resolution: segmentInfo.playlist.attributes.RESOLUTION,\n        codecs: segmentInfo.playlist.attributes.CODECS,\n        byteLength: segmentInfo.byteLength,\n        uri: segmentInfo.uri,\n        timeline: segmentInfo.timeline,\n        playlist: segmentInfo.playlist.uri,\n        start: start,\n        end: end\n      };\n      var data = JSON.stringify(value);\n      var cue = new Cue(start, end, data);\n\n      // Attach the metadata to the value property of the cue to keep consistency between\n      // the differences of WebKitDataCue in safari and VTTCue in other browsers\n      cue.value = value;\n\n      this.segmentMetadataTrack_.addCue(cue);\n    }\n  }]);\n  return SegmentLoader;\n}(videojs$1.EventTarget);\n\nvar uint8ToUtf8 = function uint8ToUtf8(uintArray) {\n  return decodeURIComponent(escape(String.fromCharCode.apply(null, uintArray)));\n};\n\n/**\n * @file vtt-segment-loader.js\n */\n\nvar VTT_LINE_TERMINATORS = new Uint8Array('\\n\\n'.split('').map(function (char) {\n  return char.charCodeAt(0);\n}));\n\n/**\n * An object that manages segment loading and appending.\n *\n * @class VTTSegmentLoader\n * @param {Object} options required and optional options\n * @extends videojs.EventTarget\n */\n\nvar VTTSegmentLoader = function (_SegmentLoader) {\n  inherits$1(VTTSegmentLoader, _SegmentLoader);\n\n  function VTTSegmentLoader(settings) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    classCallCheck$1(this, VTTSegmentLoader);\n\n    // SegmentLoader requires a MediaSource be specified or it will throw an error;\n    // however, VTTSegmentLoader has no need of a media source, so delete the reference\n    var _this = possibleConstructorReturn$1(this, (VTTSegmentLoader.__proto__ || Object.getPrototypeOf(VTTSegmentLoader)).call(this, settings, options));\n\n    _this.mediaSource_ = null;\n\n    _this.subtitlesTrack_ = null;\n    return _this;\n  }\n\n  /**\n   * Indicates which time ranges are buffered\n   *\n   * @return {TimeRange}\n   *         TimeRange object representing the current buffered ranges\n   */\n\n  createClass$1(VTTSegmentLoader, [{\n    key: 'buffered_',\n    value: function buffered_() {\n      if (!this.subtitlesTrack_ || !this.subtitlesTrack_.cues.length) {\n        return videojs$1.createTimeRanges();\n      }\n\n      var cues = this.subtitlesTrack_.cues;\n      var start = cues[0].startTime;\n      var end = cues[cues.length - 1].startTime;\n\n      return videojs$1.createTimeRanges([[start, end]]);\n    }\n\n    /**\n     * Gets and sets init segment for the provided map\n     *\n     * @param {Object} map\n     *        The map object representing the init segment to get or set\n     * @param {Boolean=} set\n     *        If true, the init segment for the provided map should be saved\n     * @return {Object}\n     *         map object for desired init segment\n     */\n\n  }, {\n    key: 'initSegment',\n    value: function initSegment(map) {\n      var set$$1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (!map) {\n        return null;\n      }\n\n      var id = initSegmentId(map);\n      var storedMap = this.initSegments_[id];\n\n      if (set$$1 && !storedMap && map.bytes) {\n        // append WebVTT line terminators to the media initialization segment if it exists\n        // to follow the WebVTT spec (https://w3c.github.io/webvtt/#file-structure) that\n        // requires two or more WebVTT line terminators between the WebVTT header and the\n        // rest of the file\n        var combinedByteLength = VTT_LINE_TERMINATORS.byteLength + map.bytes.byteLength;\n        var combinedSegment = new Uint8Array(combinedByteLength);\n\n        combinedSegment.set(map.bytes);\n        combinedSegment.set(VTT_LINE_TERMINATORS, map.bytes.byteLength);\n\n        this.initSegments_[id] = storedMap = {\n          resolvedUri: map.resolvedUri,\n          byterange: map.byterange,\n          bytes: combinedSegment\n        };\n      }\n\n      return storedMap || map;\n    }\n\n    /**\n     * Returns true if all configuration required for loading is present, otherwise false.\n     *\n     * @return {Boolean} True if the all configuration is ready for loading\n     * @private\n     */\n\n  }, {\n    key: 'couldBeginLoading_',\n    value: function couldBeginLoading_() {\n      return this.playlist_ && this.subtitlesTrack_ && !this.paused();\n    }\n\n    /**\n     * Once all the starting parameters have been specified, begin\n     * operation. This method should only be invoked from the INIT\n     * state.\n     *\n     * @private\n     */\n\n  }, {\n    key: 'init_',\n    value: function init_() {\n      this.state = 'READY';\n      this.resetEverything();\n      return this.monitorBuffer_();\n    }\n\n    /**\n     * Set a subtitle track on the segment loader to add subtitles to\n     *\n     * @param {TextTrack=} track\n     *        The text track to add loaded subtitles to\n     * @return {TextTrack}\n     *        Returns the subtitles track\n     */\n\n  }, {\n    key: 'track',\n    value: function track(_track) {\n      if (typeof _track === 'undefined') {\n        return this.subtitlesTrack_;\n      }\n\n      this.subtitlesTrack_ = _track;\n\n      // if we were unpaused but waiting for a sourceUpdater, start\n      // buffering now\n      if (this.state === 'INIT' && this.couldBeginLoading_()) {\n        this.init_();\n      }\n\n      return this.subtitlesTrack_;\n    }\n\n    /**\n     * Remove any data in the source buffer between start and end times\n     * @param {Number} start - the start time of the region to remove from the buffer\n     * @param {Number} end - the end time of the region to remove from the buffer\n     */\n\n  }, {\n    key: 'remove',\n    value: function remove(start, end) {\n      removeCuesFromTrack(start, end, this.subtitlesTrack_);\n    }\n\n    /**\n     * fill the buffer with segements unless the sourceBuffers are\n     * currently updating\n     *\n     * Note: this function should only ever be called by monitorBuffer_\n     * and never directly\n     *\n     * @private\n     */\n\n  }, {\n    key: 'fillBuffer_',\n    value: function fillBuffer_() {\n      var _this2 = this;\n\n      if (!this.syncPoint_) {\n        this.syncPoint_ = this.syncController_.getSyncPoint(this.playlist_, this.duration_(), this.currentTimeline_, this.currentTime_());\n      }\n\n      // see if we need to begin loading immediately\n      var segmentInfo = this.checkBuffer_(this.buffered_(), this.playlist_, this.mediaIndex, this.hasPlayed_(), this.currentTime_(), this.syncPoint_);\n\n      segmentInfo = this.skipEmptySegments_(segmentInfo);\n\n      if (!segmentInfo) {\n        return;\n      }\n\n      if (this.syncController_.timestampOffsetForTimeline(segmentInfo.timeline) === null) {\n        // We don't have the timestamp offset that we need to sync subtitles.\n        // Rerun on a timestamp offset or user interaction.\n        var checkTimestampOffset = function checkTimestampOffset() {\n          _this2.state = 'READY';\n          if (!_this2.paused()) {\n            // if not paused, queue a buffer check as soon as possible\n            _this2.monitorBuffer_();\n          }\n        };\n\n        this.syncController_.one('timestampoffset', checkTimestampOffset);\n        this.state = 'WAITING_ON_TIMELINE';\n        return;\n      }\n\n      this.loadSegment_(segmentInfo);\n    }\n\n    /**\n     * Prevents the segment loader from requesting segments we know contain no subtitles\n     * by walking forward until we find the next segment that we don't know whether it is\n     * empty or not.\n     *\n     * @param {Object} segmentInfo\n     *        a segment info object that describes the current segment\n     * @return {Object}\n     *         a segment info object that describes the current segment\n     */\n\n  }, {\n    key: 'skipEmptySegments_',\n    value: function skipEmptySegments_(segmentInfo) {\n      while (segmentInfo && segmentInfo.segment.empty) {\n        segmentInfo = this.generateSegmentInfo_(segmentInfo.playlist, segmentInfo.mediaIndex + 1, segmentInfo.startOfSegment + segmentInfo.duration, segmentInfo.isSyncRequest);\n      }\n      return segmentInfo;\n    }\n\n    /**\n     * append a decrypted segement to the SourceBuffer through a SourceUpdater\n     *\n     * @private\n     */\n\n  }, {\n    key: 'handleSegment_',\n    value: function handleSegment_() {\n      var _this3 = this;\n\n      if (!this.pendingSegment_ || !this.subtitlesTrack_) {\n        this.state = 'READY';\n        return;\n      }\n\n      this.state = 'APPENDING';\n\n      var segmentInfo = this.pendingSegment_;\n      var segment = segmentInfo.segment;\n\n      // Make sure that vttjs has loaded, otherwise, wait till it finished loading\n      if (typeof window$1.WebVTT !== 'function' && this.subtitlesTrack_ && this.subtitlesTrack_.tech_) {\n\n        var loadHandler = function loadHandler() {\n          _this3.handleSegment_();\n        };\n\n        this.state = 'WAITING_ON_VTTJS';\n        this.subtitlesTrack_.tech_.one('vttjsloaded', loadHandler);\n        this.subtitlesTrack_.tech_.one('vttjserror', function () {\n          _this3.subtitlesTrack_.tech_.off('vttjsloaded', loadHandler);\n          _this3.error({\n            message: 'Error loading vtt.js'\n          });\n          _this3.state = 'READY';\n          _this3.pause();\n          _this3.trigger('error');\n        });\n\n        return;\n      }\n\n      segment.requested = true;\n\n      try {\n        this.parseVTTCues_(segmentInfo);\n      } catch (e) {\n        this.error({\n          message: e.message\n        });\n        this.state = 'READY';\n        this.pause();\n        return this.trigger('error');\n      }\n\n      this.updateTimeMapping_(segmentInfo, this.syncController_.timelines[segmentInfo.timeline], this.playlist_);\n\n      if (segmentInfo.isSyncRequest) {\n        this.trigger('syncinfoupdate');\n        this.pendingSegment_ = null;\n        this.state = 'READY';\n        return;\n      }\n\n      segmentInfo.byteLength = segmentInfo.bytes.byteLength;\n\n      this.mediaSecondsLoaded += segment.duration;\n\n      if (segmentInfo.cues.length) {\n        // remove any overlapping cues to prevent doubling\n        this.remove(segmentInfo.cues[0].endTime, segmentInfo.cues[segmentInfo.cues.length - 1].endTime);\n      }\n\n      segmentInfo.cues.forEach(function (cue) {\n        _this3.subtitlesTrack_.addCue(cue);\n      });\n\n      this.handleUpdateEnd_();\n    }\n\n    /**\n     * Uses the WebVTT parser to parse the segment response\n     *\n     * @param {Object} segmentInfo\n     *        a segment info object that describes the current segment\n     * @private\n     */\n\n  }, {\n    key: 'parseVTTCues_',\n    value: function parseVTTCues_(segmentInfo) {\n      var decoder = void 0;\n      var decodeBytesToString = false;\n\n      if (typeof window$1.TextDecoder === 'function') {\n        decoder = new window$1.TextDecoder('utf8');\n      } else {\n        decoder = window$1.WebVTT.StringDecoder();\n        decodeBytesToString = true;\n      }\n\n      var parser = new window$1.WebVTT.Parser(window$1, window$1.vttjs, decoder);\n\n      segmentInfo.cues = [];\n      segmentInfo.timestampmap = { MPEGTS: 0, LOCAL: 0 };\n\n      parser.oncue = segmentInfo.cues.push.bind(segmentInfo.cues);\n      parser.ontimestampmap = function (map) {\n        return segmentInfo.timestampmap = map;\n      };\n      parser.onparsingerror = function (error) {\n        videojs$1.log.warn('Error encountered when parsing cues: ' + error.message);\n      };\n\n      if (segmentInfo.segment.map) {\n        var mapData = segmentInfo.segment.map.bytes;\n\n        if (decodeBytesToString) {\n          mapData = uint8ToUtf8(mapData);\n        }\n\n        parser.parse(mapData);\n      }\n\n      var segmentData = segmentInfo.bytes;\n\n      if (decodeBytesToString) {\n        segmentData = uint8ToUtf8(segmentData);\n      }\n\n      parser.parse(segmentData);\n      parser.flush();\n    }\n\n    /**\n     * Updates the start and end times of any cues parsed by the WebVTT parser using\n     * the information parsed from the X-TIMESTAMP-MAP header and a TS to media time mapping\n     * from the SyncController\n     *\n     * @param {Object} segmentInfo\n     *        a segment info object that describes the current segment\n     * @param {Object} mappingObj\n     *        object containing a mapping from TS to media time\n     * @param {Object} playlist\n     *        the playlist object containing the segment\n     * @private\n     */\n\n  }, {\n    key: 'updateTimeMapping_',\n    value: function updateTimeMapping_(segmentInfo, mappingObj, playlist) {\n      var segment = segmentInfo.segment;\n\n      if (!mappingObj) {\n        // If the sync controller does not have a mapping of TS to Media Time for the\n        // timeline, then we don't have enough information to update the cue\n        // start/end times\n        return;\n      }\n\n      if (!segmentInfo.cues.length) {\n        // If there are no cues, we also do not have enough information to figure out\n        // segment timing. Mark that the segment contains no cues so we don't re-request\n        // an empty segment.\n        segment.empty = true;\n        return;\n      }\n\n      var timestampmap = segmentInfo.timestampmap;\n      var diff = timestampmap.MPEGTS / 90000 - timestampmap.LOCAL + mappingObj.mapping;\n\n      segmentInfo.cues.forEach(function (cue) {\n        // First convert cue time to TS time using the timestamp-map provided within the vtt\n        cue.startTime += diff;\n        cue.endTime += diff;\n      });\n\n      if (!playlist.syncInfo) {\n        var firstStart = segmentInfo.cues[0].startTime;\n        var lastStart = segmentInfo.cues[segmentInfo.cues.length - 1].startTime;\n\n        playlist.syncInfo = {\n          mediaSequence: playlist.mediaSequence + segmentInfo.mediaIndex,\n          time: Math.min(firstStart, lastStart - segment.duration)\n        };\n      }\n    }\n  }]);\n  return VTTSegmentLoader;\n}(SegmentLoader);\n\n/**\n * @file ad-cue-tags.js\n */\n\n/**\n * Searches for an ad cue that overlaps with the given mediaTime\n */\nvar findAdCue = function findAdCue(track, mediaTime) {\n  var cues = track.cues;\n\n  for (var i = 0; i < cues.length; i++) {\n    var cue = cues[i];\n\n    if (mediaTime >= cue.adStartTime && mediaTime <= cue.adEndTime) {\n      return cue;\n    }\n  }\n  return null;\n};\n\nvar updateAdCues = function updateAdCues(media, track) {\n  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  if (!media.segments) {\n    return;\n  }\n\n  var mediaTime = offset;\n  var cue = void 0;\n\n  for (var i = 0; i < media.segments.length; i++) {\n    var segment = media.segments[i];\n\n    if (!cue) {\n      // Since the cues will span for at least the segment duration, adding a fudge\n      // factor of half segment duration will prevent duplicate cues from being\n      // created when timing info is not exact (e.g. cue start time initialized\n      // at 10.006677, but next call mediaTime is 10.003332 )\n      cue = findAdCue(track, mediaTime + segment.duration / 2);\n    }\n\n    if (cue) {\n      if ('cueIn' in segment) {\n        // Found a CUE-IN so end the cue\n        cue.endTime = mediaTime;\n        cue.adEndTime = mediaTime;\n        mediaTime += segment.duration;\n        cue = null;\n        continue;\n      }\n\n      if (mediaTime < cue.endTime) {\n        // Already processed this mediaTime for this cue\n        mediaTime += segment.duration;\n        continue;\n      }\n\n      // otherwise extend cue until a CUE-IN is found\n      cue.endTime += segment.duration;\n    } else {\n      if ('cueOut' in segment) {\n        cue = new window$1.VTTCue(mediaTime, mediaTime + segment.duration, segment.cueOut);\n        cue.adStartTime = mediaTime;\n        // Assumes tag format to be\n        // #EXT-X-CUE-OUT:30\n        cue.adEndTime = mediaTime + parseFloat(segment.cueOut);\n        track.addCue(cue);\n      }\n\n      if ('cueOutCont' in segment) {\n        // Entered into the middle of an ad cue\n        var adOffset = void 0;\n        var adTotal = void 0;\n\n        // Assumes tag formate to be\n        // #EXT-X-CUE-OUT-CONT:10/30\n\n        var _segment$cueOutCont$s = segment.cueOutCont.split('/').map(parseFloat);\n\n        var _segment$cueOutCont$s2 = slicedToArray$1(_segment$cueOutCont$s, 2);\n\n        adOffset = _segment$cueOutCont$s2[0];\n        adTotal = _segment$cueOutCont$s2[1];\n\n        cue = new window$1.VTTCue(mediaTime, mediaTime + segment.duration, '');\n        cue.adStartTime = mediaTime - adOffset;\n        cue.adEndTime = cue.adStartTime + adTotal;\n        track.addCue(cue);\n      }\n    }\n    mediaTime += segment.duration;\n  }\n};\n\n/**\n * @file sync-controller.js\n */\n\nvar tsprobe = tsInspector.inspect;\n\nvar syncPointStrategies = [\n// Stategy \"VOD\": Handle the VOD-case where the sync-point is *always*\n//                the equivalence display-time 0 === segment-index 0\n{\n  name: 'VOD',\n  run: function run(syncController, playlist, duration$$1, currentTimeline, currentTime) {\n    if (duration$$1 !== Infinity) {\n      var syncPoint = {\n        time: 0,\n        segmentIndex: 0\n      };\n\n      return syncPoint;\n    }\n    return null;\n  }\n},\n// Stategy \"ProgramDateTime\": We have a program-date-time tag in this playlist\n{\n  name: 'ProgramDateTime',\n  run: function run(syncController, playlist, duration$$1, currentTimeline, currentTime) {\n    if (!syncController.datetimeToDisplayTime) {\n      return null;\n    }\n\n    var segments = playlist.segments || [];\n    var syncPoint = null;\n    var lastDistance = null;\n\n    currentTime = currentTime || 0;\n\n    for (var i = 0; i < segments.length; i++) {\n      var segment = segments[i];\n\n      if (segment.dateTimeObject) {\n        var segmentTime = segment.dateTimeObject.getTime() / 1000;\n        var segmentStart = segmentTime + syncController.datetimeToDisplayTime;\n        var distance = Math.abs(currentTime - segmentStart);\n\n        // Once the distance begins to increase, we have passed\n        // currentTime and can stop looking for better candidates\n        if (lastDistance !== null && lastDistance < distance) {\n          break;\n        }\n\n        lastDistance = distance;\n        syncPoint = {\n          time: segmentStart,\n          segmentIndex: i\n        };\n      }\n    }\n    return syncPoint;\n  }\n},\n// Stategy \"Segment\": We have a known time mapping for a timeline and a\n//                    segment in the current timeline with timing data\n{\n  name: 'Segment',\n  run: function run(syncController, playlist, duration$$1, currentTimeline, currentTime) {\n    var segments = playlist.segments || [];\n    var syncPoint = null;\n    var lastDistance = null;\n\n    currentTime = currentTime || 0;\n\n    for (var i = 0; i < segments.length; i++) {\n      var segment = segments[i];\n\n      if (segment.timeline === currentTimeline && typeof segment.start !== 'undefined') {\n        var distance = Math.abs(currentTime - segment.start);\n\n        // Once the distance begins to increase, we have passed\n        // currentTime and can stop looking for better candidates\n        if (lastDistance !== null && lastDistance < distance) {\n          break;\n        }\n\n        if (!syncPoint || lastDistance === null || lastDistance >= distance) {\n          lastDistance = distance;\n          syncPoint = {\n            time: segment.start,\n            segmentIndex: i\n          };\n        }\n      }\n    }\n    return syncPoint;\n  }\n},\n// Stategy \"Discontinuity\": We have a discontinuity with a known\n//                          display-time\n{\n  name: 'Discontinuity',\n  run: function run(syncController, playlist, duration$$1, currentTimeline, currentTime) {\n    var syncPoint = null;\n\n    currentTime = currentTime || 0;\n\n    if (playlist.discontinuityStarts && playlist.discontinuityStarts.length) {\n      var lastDistance = null;\n\n      for (var i = 0; i < playlist.discontinuityStarts.length; i++) {\n        var segmentIndex = playlist.discontinuityStarts[i];\n        var discontinuity = playlist.discontinuitySequence + i + 1;\n        var discontinuitySync = syncController.discontinuities[discontinuity];\n\n        if (discontinuitySync) {\n          var distance = Math.abs(currentTime - discontinuitySync.time);\n\n          // Once the distance begins to increase, we have passed\n          // currentTime and can stop looking for better candidates\n          if (lastDistance !== null && lastDistance < distance) {\n            break;\n          }\n\n          if (!syncPoint || lastDistance === null || lastDistance >= distance) {\n            lastDistance = distance;\n            syncPoint = {\n              time: discontinuitySync.time,\n              segmentIndex: segmentIndex\n            };\n          }\n        }\n      }\n    }\n    return syncPoint;\n  }\n},\n// Stategy \"Playlist\": We have a playlist with a known mapping of\n//                     segment index to display time\n{\n  name: 'Playlist',\n  run: function run(syncController, playlist, duration$$1, currentTimeline, currentTime) {\n    if (playlist.syncInfo) {\n      var syncPoint = {\n        time: playlist.syncInfo.time,\n        segmentIndex: playlist.syncInfo.mediaSequence - playlist.mediaSequence\n      };\n\n      return syncPoint;\n    }\n    return null;\n  }\n}];\n\nvar SyncController = function (_videojs$EventTarget) {\n  inherits$1(SyncController, _videojs$EventTarget);\n\n  function SyncController() {\n    classCallCheck$1(this, SyncController);\n\n    // Segment Loader state variables...\n    // ...for synching across variants\n    var _this = possibleConstructorReturn$1(this, (SyncController.__proto__ || Object.getPrototypeOf(SyncController)).call(this));\n\n    _this.inspectCache_ = undefined;\n\n    // ...for synching across variants\n    _this.timelines = [];\n    _this.discontinuities = [];\n    _this.datetimeToDisplayTime = null;\n\n    _this.logger_ = logger('SyncController');\n    return _this;\n  }\n\n  /**\n   * Find a sync-point for the playlist specified\n   *\n   * A sync-point is defined as a known mapping from display-time to\n   * a segment-index in the current playlist.\n   *\n   * @param {Playlist} playlist\n   *        The playlist that needs a sync-point\n   * @param {Number} duration\n   *        Duration of the MediaSource (Infinite if playing a live source)\n   * @param {Number} currentTimeline\n   *        The last timeline from which a segment was loaded\n   * @returns {Object}\n   *          A sync-point object\n   */\n\n  createClass$1(SyncController, [{\n    key: 'getSyncPoint',\n    value: function getSyncPoint(playlist, duration$$1, currentTimeline, currentTime) {\n      var syncPoints = this.runStrategies_(playlist, duration$$1, currentTimeline, currentTime);\n\n      if (!syncPoints.length) {\n        // Signal that we need to attempt to get a sync-point manually\n        // by fetching a segment in the playlist and constructing\n        // a sync-point from that information\n        return null;\n      }\n\n      // Now find the sync-point that is closest to the currentTime because\n      // that should result in the most accurate guess about which segment\n      // to fetch\n      return this.selectSyncPoint_(syncPoints, { key: 'time', value: currentTime });\n    }\n\n    /**\n     * Calculate the amount of time that has expired off the playlist during playback\n     *\n     * @param {Playlist} playlist\n     *        Playlist object to calculate expired from\n     * @param {Number} duration\n     *        Duration of the MediaSource (Infinity if playling a live source)\n     * @returns {Number|null}\n     *          The amount of time that has expired off the playlist during playback. Null\n     *          if no sync-points for the playlist can be found.\n     */\n\n  }, {\n    key: 'getExpiredTime',\n    value: function getExpiredTime(playlist, duration$$1) {\n      if (!playlist || !playlist.segments) {\n        return null;\n      }\n\n      var syncPoints = this.runStrategies_(playlist, duration$$1, playlist.discontinuitySequence, 0);\n\n      // Without sync-points, there is not enough information to determine the expired time\n      if (!syncPoints.length) {\n        return null;\n      }\n\n      var syncPoint = this.selectSyncPoint_(syncPoints, {\n        key: 'segmentIndex',\n        value: 0\n      });\n\n      // If the sync-point is beyond the start of the playlist, we want to subtract the\n      // duration from index 0 to syncPoint.segmentIndex instead of adding.\n      if (syncPoint.segmentIndex > 0) {\n        syncPoint.time *= -1;\n      }\n\n      return Math.abs(syncPoint.time + sumDurations(playlist, syncPoint.segmentIndex, 0));\n    }\n\n    /**\n     * Runs each sync-point strategy and returns a list of sync-points returned by the\n     * strategies\n     *\n     * @private\n     * @param {Playlist} playlist\n     *        The playlist that needs a sync-point\n     * @param {Number} duration\n     *        Duration of the MediaSource (Infinity if playing a live source)\n     * @param {Number} currentTimeline\n     *        The last timeline from which a segment was loaded\n     * @returns {Array}\n     *          A list of sync-point objects\n     */\n\n  }, {\n    key: 'runStrategies_',\n    value: function runStrategies_(playlist, duration$$1, currentTimeline, currentTime) {\n      var syncPoints = [];\n\n      // Try to find a sync-point in by utilizing various strategies...\n      for (var i = 0; i < syncPointStrategies.length; i++) {\n        var strategy = syncPointStrategies[i];\n        var syncPoint = strategy.run(this, playlist, duration$$1, currentTimeline, currentTime);\n\n        if (syncPoint) {\n          syncPoint.strategy = strategy.name;\n          syncPoints.push({\n            strategy: strategy.name,\n            syncPoint: syncPoint\n          });\n        }\n      }\n\n      return syncPoints;\n    }\n\n    /**\n     * Selects the sync-point nearest the specified target\n     *\n     * @private\n     * @param {Array} syncPoints\n     *        List of sync-points to select from\n     * @param {Object} target\n     *        Object specifying the property and value we are targeting\n     * @param {String} target.key\n     *        Specifies the property to target. Must be either 'time' or 'segmentIndex'\n     * @param {Number} target.value\n     *        The value to target for the specified key.\n     * @returns {Object}\n     *          The sync-point nearest the target\n     */\n\n  }, {\n    key: 'selectSyncPoint_',\n    value: function selectSyncPoint_(syncPoints, target) {\n      var bestSyncPoint = syncPoints[0].syncPoint;\n      var bestDistance = Math.abs(syncPoints[0].syncPoint[target.key] - target.value);\n      var bestStrategy = syncPoints[0].strategy;\n\n      for (var i = 1; i < syncPoints.length; i++) {\n        var newDistance = Math.abs(syncPoints[i].syncPoint[target.key] - target.value);\n\n        if (newDistance < bestDistance) {\n          bestDistance = newDistance;\n          bestSyncPoint = syncPoints[i].syncPoint;\n          bestStrategy = syncPoints[i].strategy;\n        }\n      }\n\n      this.logger_('syncPoint for [' + target.key + ': ' + target.value + '] chosen with strategy' + (' [' + bestStrategy + ']: [time:' + bestSyncPoint.time + ',') + (' segmentIndex:' + bestSyncPoint.segmentIndex + ']'));\n\n      return bestSyncPoint;\n    }\n\n    /**\n     * Save any meta-data present on the segments when segments leave\n     * the live window to the playlist to allow for synchronization at the\n     * playlist level later.\n     *\n     * @param {Playlist} oldPlaylist - The previous active playlist\n     * @param {Playlist} newPlaylist - The updated and most current playlist\n     */\n\n  }, {\n    key: 'saveExpiredSegmentInfo',\n    value: function saveExpiredSegmentInfo(oldPlaylist, newPlaylist) {\n      var mediaSequenceDiff = newPlaylist.mediaSequence - oldPlaylist.mediaSequence;\n\n      // When a segment expires from the playlist and it has a start time\n      // save that information as a possible sync-point reference in future\n      for (var i = mediaSequenceDiff - 1; i >= 0; i--) {\n        var lastRemovedSegment = oldPlaylist.segments[i];\n\n        if (lastRemovedSegment && typeof lastRemovedSegment.start !== 'undefined') {\n          newPlaylist.syncInfo = {\n            mediaSequence: oldPlaylist.mediaSequence + i,\n            time: lastRemovedSegment.start\n          };\n          this.logger_('playlist refresh sync: [time:' + newPlaylist.syncInfo.time + ',' + (' mediaSequence: ' + newPlaylist.syncInfo.mediaSequence + ']'));\n          this.trigger('syncinfoupdate');\n          break;\n        }\n      }\n    }\n\n    /**\n     * Save the mapping from playlist's ProgramDateTime to display. This should\n     * only ever happen once at the start of playback.\n     *\n     * @param {Playlist} playlist - The currently active playlist\n     */\n\n  }, {\n    key: 'setDateTimeMapping',\n    value: function setDateTimeMapping(playlist) {\n      if (!this.datetimeToDisplayTime && playlist.segments && playlist.segments.length && playlist.segments[0].dateTimeObject) {\n        var playlistTimestamp = playlist.segments[0].dateTimeObject.getTime() / 1000;\n\n        this.datetimeToDisplayTime = -playlistTimestamp;\n      }\n    }\n\n    /**\n     * Reset the state of the inspection cache when we do a rendition\n     * switch\n     */\n\n  }, {\n    key: 'reset',\n    value: function reset() {\n      this.inspectCache_ = undefined;\n    }\n\n    /**\n     * Probe or inspect a fmp4 or an mpeg2-ts segment to determine the start\n     * and end of the segment in it's internal \"media time\". Used to generate\n     * mappings from that internal \"media time\" to the display time that is\n     * shown on the player.\n     *\n     * @param {SegmentInfo} segmentInfo - The current active request information\n     */\n\n  }, {\n    key: 'probeSegmentInfo',\n    value: function probeSegmentInfo(segmentInfo) {\n      var segment = segmentInfo.segment;\n      var playlist = segmentInfo.playlist;\n      var timingInfo = void 0;\n\n      if (segment.map) {\n        timingInfo = this.probeMp4Segment_(segmentInfo);\n      } else {\n        timingInfo = this.probeTsSegment_(segmentInfo);\n      }\n\n      if (timingInfo) {\n        if (this.calculateSegmentTimeMapping_(segmentInfo, timingInfo)) {\n          this.saveDiscontinuitySyncInfo_(segmentInfo);\n\n          // If the playlist does not have sync information yet, record that information\n          // now with segment timing information\n          if (!playlist.syncInfo) {\n            playlist.syncInfo = {\n              mediaSequence: playlist.mediaSequence + segmentInfo.mediaIndex,\n              time: segment.start\n            };\n          }\n        }\n      }\n\n      return timingInfo;\n    }\n\n    /**\n     * Probe an fmp4 or an mpeg2-ts segment to determine the start of the segment\n     * in it's internal \"media time\".\n     *\n     * @private\n     * @param {SegmentInfo} segmentInfo - The current active request information\n     * @return {object} The start and end time of the current segment in \"media time\"\n     */\n\n  }, {\n    key: 'probeMp4Segment_',\n    value: function probeMp4Segment_(segmentInfo) {\n      var segment = segmentInfo.segment;\n      var timescales = mp4probe.timescale(segment.map.bytes);\n      var startTime = mp4probe.startTime(timescales, segmentInfo.bytes);\n\n      if (segmentInfo.timestampOffset !== null) {\n        segmentInfo.timestampOffset -= startTime;\n      }\n\n      return {\n        start: startTime,\n        end: startTime + segment.duration\n      };\n    }\n\n    /**\n     * Probe an mpeg2-ts segment to determine the start and end of the segment\n     * in it's internal \"media time\".\n     *\n     * @private\n     * @param {SegmentInfo} segmentInfo - The current active request information\n     * @return {object} The start and end time of the current segment in \"media time\"\n     */\n\n  }, {\n    key: 'probeTsSegment_',\n    value: function probeTsSegment_(segmentInfo) {\n      var timeInfo = tsprobe(segmentInfo.bytes, this.inspectCache_);\n      var segmentStartTime = void 0;\n      var segmentEndTime = void 0;\n\n      if (!timeInfo) {\n        return null;\n      }\n\n      if (timeInfo.video && timeInfo.video.length === 2) {\n        this.inspectCache_ = timeInfo.video[1].dts;\n        segmentStartTime = timeInfo.video[0].dtsTime;\n        segmentEndTime = timeInfo.video[1].dtsTime;\n      } else if (timeInfo.audio && timeInfo.audio.length === 2) {\n        this.inspectCache_ = timeInfo.audio[1].dts;\n        segmentStartTime = timeInfo.audio[0].dtsTime;\n        segmentEndTime = timeInfo.audio[1].dtsTime;\n      }\n\n      return {\n        start: segmentStartTime,\n        end: segmentEndTime,\n        containsVideo: timeInfo.video && timeInfo.video.length === 2,\n        containsAudio: timeInfo.audio && timeInfo.audio.length === 2\n      };\n    }\n  }, {\n    key: 'timestampOffsetForTimeline',\n    value: function timestampOffsetForTimeline(timeline) {\n      if (typeof this.timelines[timeline] === 'undefined') {\n        return null;\n      }\n      return this.timelines[timeline].time;\n    }\n  }, {\n    key: 'mappingForTimeline',\n    value: function mappingForTimeline(timeline) {\n      if (typeof this.timelines[timeline] === 'undefined') {\n        return null;\n      }\n      return this.timelines[timeline].mapping;\n    }\n\n    /**\n     * Use the \"media time\" for a segment to generate a mapping to \"display time\" and\n     * save that display time to the segment.\n     *\n     * @private\n     * @param {SegmentInfo} segmentInfo\n     *        The current active request information\n     * @param {object} timingInfo\n     *        The start and end time of the current segment in \"media time\"\n     * @returns {Boolean}\n     *          Returns false if segment time mapping could not be calculated\n     */\n\n  }, {\n    key: 'calculateSegmentTimeMapping_',\n    value: function calculateSegmentTimeMapping_(segmentInfo, timingInfo) {\n      var segment = segmentInfo.segment;\n      var mappingObj = this.timelines[segmentInfo.timeline];\n\n      if (segmentInfo.timestampOffset !== null) {\n        mappingObj = {\n          time: segmentInfo.startOfSegment,\n          mapping: segmentInfo.startOfSegment - timingInfo.start\n        };\n        this.timelines[segmentInfo.timeline] = mappingObj;\n        this.trigger('timestampoffset');\n\n        this.logger_('time mapping for timeline ' + segmentInfo.timeline + ': ' + ('[time: ' + mappingObj.time + '] [mapping: ' + mappingObj.mapping + ']'));\n\n        segment.start = segmentInfo.startOfSegment;\n        segment.end = timingInfo.end + mappingObj.mapping;\n      } else if (mappingObj) {\n        segment.start = timingInfo.start + mappingObj.mapping;\n        segment.end = timingInfo.end + mappingObj.mapping;\n      } else {\n        return false;\n      }\n\n      return true;\n    }\n\n    /**\n     * Each time we have discontinuity in the playlist, attempt to calculate the location\n     * in display of the start of the discontinuity and save that. We also save an accuracy\n     * value so that we save values with the most accuracy (closest to 0.)\n     *\n     * @private\n     * @param {SegmentInfo} segmentInfo - The current active request information\n     */\n\n  }, {\n    key: 'saveDiscontinuitySyncInfo_',\n    value: function saveDiscontinuitySyncInfo_(segmentInfo) {\n      var playlist = segmentInfo.playlist;\n      var segment = segmentInfo.segment;\n\n      // If the current segment is a discontinuity then we know exactly where\n      // the start of the range and it's accuracy is 0 (greater accuracy values\n      // mean more approximation)\n      if (segment.discontinuity) {\n        this.discontinuities[segment.timeline] = {\n          time: segment.start,\n          accuracy: 0\n        };\n      } else if (playlist.discontinuityStarts && playlist.discontinuityStarts.length) {\n        // Search for future discontinuities that we can provide better timing\n        // information for and save that information for sync purposes\n        for (var i = 0; i < playlist.discontinuityStarts.length; i++) {\n          var segmentIndex = playlist.discontinuityStarts[i];\n          var discontinuity = playlist.discontinuitySequence + i + 1;\n          var mediaIndexDiff = segmentIndex - segmentInfo.mediaIndex;\n          var accuracy = Math.abs(mediaIndexDiff);\n\n          if (!this.discontinuities[discontinuity] || this.discontinuities[discontinuity].accuracy > accuracy) {\n            var time = void 0;\n\n            if (mediaIndexDiff < 0) {\n              time = segment.start - sumDurations(playlist, segmentInfo.mediaIndex, segmentIndex);\n            } else {\n              time = segment.end + sumDurations(playlist, segmentInfo.mediaIndex + 1, segmentIndex);\n            }\n\n            this.discontinuities[discontinuity] = {\n              time: time,\n              accuracy: accuracy\n            };\n          }\n        }\n      }\n    }\n  }]);\n  return SyncController;\n}(videojs$1.EventTarget);\n\nvar Decrypter$1 = new shimWorker(\"./decrypter-worker.worker.js\", function (window, document$$1) {\n  var self = this;\n  var decrypterWorker = function () {\n\n    /*\n     * pkcs7.pad\n     * https://github.com/brightcove/pkcs7\n     *\n     * Copyright (c) 2014 Brightcove\n     * Licensed under the apache2 license.\n     */\n\n    /**\n     * Returns the subarray of a Uint8Array without PKCS#7 padding.\n     * @param padded {Uint8Array} unencrypted bytes that have been padded\n     * @return {Uint8Array} the unpadded bytes\n     * @see http://tools.ietf.org/html/rfc5652\n     */\n\n    function unpad(padded) {\n      return padded.subarray(0, padded.byteLength - padded[padded.byteLength - 1]);\n    }\n\n    var classCallCheck$$1 = function classCallCheck$$1(instance, Constructor) {\n      if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n      }\n    };\n\n    var createClass$$1 = function () {\n      function defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n          var descriptor = props[i];\n          descriptor.enumerable = descriptor.enumerable || false;\n          descriptor.configurable = true;\n          if (\"value\" in descriptor) descriptor.writable = true;\n          Object.defineProperty(target, descriptor.key, descriptor);\n        }\n      }\n\n      return function (Constructor, protoProps, staticProps) {\n        if (protoProps) defineProperties(Constructor.prototype, protoProps);\n        if (staticProps) defineProperties(Constructor, staticProps);\n        return Constructor;\n      };\n    }();\n\n    var inherits$$1 = function inherits$$1(subClass, superClass) {\n      if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));\n      }\n\n      subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n          value: subClass,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      });\n      if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n    };\n\n    var possibleConstructorReturn$$1 = function possibleConstructorReturn$$1(self, call) {\n      if (!self) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n      }\n\n      return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === \"object\" || typeof call === \"function\") ? call : self;\n    };\n\n    /**\n     * @file aes.js\n     *\n     * This file contains an adaptation of the AES decryption algorithm\n     * from the Standford Javascript Cryptography Library. That work is\n     * covered by the following copyright and permissions notice:\n     *\n     * Copyright 2009-2010 Emily Stark, Mike Hamburg, Dan Boneh.\n     * All rights reserved.\n     *\n     * Redistribution and use in source and binary forms, with or without\n     * modification, are permitted provided that the following conditions are\n     * met:\n     *\n     * 1. Redistributions of source code must retain the above copyright\n     *    notice, this list of conditions and the following disclaimer.\n     *\n     * 2. Redistributions in binary form must reproduce the above\n     *    copyright notice, this list of conditions and the following\n     *    disclaimer in the documentation and/or other materials provided\n     *    with the distribution.\n     *\n     * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR\n     * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n     * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n     * DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> OR CONTRIBUTORS BE\n     * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n     * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR\n     * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n     * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\n     * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN\n     * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n     *\n     * The views and conclusions contained in the software and documentation\n     * are those of the authors and should not be interpreted as representing\n     * official policies, either expressed or implied, of the authors.\n     */\n\n    /**\n     * Expand the S-box tables.\n     *\n     * @private\n     */\n    var precompute = function precompute() {\n      var tables = [[[], [], [], [], []], [[], [], [], [], []]];\n      var encTable = tables[0];\n      var decTable = tables[1];\n      var sbox = encTable[4];\n      var sboxInv = decTable[4];\n      var i = void 0;\n      var x = void 0;\n      var xInv = void 0;\n      var d = [];\n      var th = [];\n      var x2 = void 0;\n      var x4 = void 0;\n      var x8 = void 0;\n      var s = void 0;\n      var tEnc = void 0;\n      var tDec = void 0;\n\n      // Compute double and third tables\n      for (i = 0; i < 256; i++) {\n        th[(d[i] = i << 1 ^ (i >> 7) * 283) ^ i] = i;\n      }\n\n      for (x = xInv = 0; !sbox[x]; x ^= x2 || 1, xInv = th[xInv] || 1) {\n        // Compute sbox\n        s = xInv ^ xInv << 1 ^ xInv << 2 ^ xInv << 3 ^ xInv << 4;\n        s = s >> 8 ^ s & 255 ^ 99;\n        sbox[x] = s;\n        sboxInv[s] = x;\n\n        // Compute MixColumns\n        x8 = d[x4 = d[x2 = d[x]]];\n        tDec = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;\n        tEnc = d[s] * 0x101 ^ s * 0x1010100;\n\n        for (i = 0; i < 4; i++) {\n          encTable[i][x] = tEnc = tEnc << 24 ^ tEnc >>> 8;\n          decTable[i][s] = tDec = tDec << 24 ^ tDec >>> 8;\n        }\n      }\n\n      // Compactify. Considerable speedup on Firefox.\n      for (i = 0; i < 5; i++) {\n        encTable[i] = encTable[i].slice(0);\n        decTable[i] = decTable[i].slice(0);\n      }\n      return tables;\n    };\n    var aesTables = null;\n\n    /**\n     * Schedule out an AES key for both encryption and decryption. This\n     * is a low-level class. Use a cipher mode to do bulk encryption.\n     *\n     * @class AES\n     * @param key {Array} The key as an array of 4, 6 or 8 words.\n     */\n\n    var AES = function () {\n      function AES(key) {\n        classCallCheck$$1(this, AES);\n\n        /**\n         * The expanded S-box and inverse S-box tables. These will be computed\n         * on the client so that we don't have to send them down the wire.\n         *\n         * There are two tables, _tables[0] is for encryption and\n         * _tables[1] is for decryption.\n         *\n         * The first 4 sub-tables are the expanded S-box with MixColumns. The\n         * last (_tables[01][4]) is the S-box itself.\n         *\n         * @private\n         */\n        // if we have yet to precompute the S-box tables\n        // do so now\n        if (!aesTables) {\n          aesTables = precompute();\n        }\n        // then make a copy of that object for use\n        this._tables = [[aesTables[0][0].slice(), aesTables[0][1].slice(), aesTables[0][2].slice(), aesTables[0][3].slice(), aesTables[0][4].slice()], [aesTables[1][0].slice(), aesTables[1][1].slice(), aesTables[1][2].slice(), aesTables[1][3].slice(), aesTables[1][4].slice()]];\n        var i = void 0;\n        var j = void 0;\n        var tmp = void 0;\n        var encKey = void 0;\n        var decKey = void 0;\n        var sbox = this._tables[0][4];\n        var decTable = this._tables[1];\n        var keyLen = key.length;\n        var rcon = 1;\n\n        if (keyLen !== 4 && keyLen !== 6 && keyLen !== 8) {\n          throw new Error('Invalid aes key size');\n        }\n\n        encKey = key.slice(0);\n        decKey = [];\n        this._key = [encKey, decKey];\n\n        // schedule encryption keys\n        for (i = keyLen; i < 4 * keyLen + 28; i++) {\n          tmp = encKey[i - 1];\n\n          // apply sbox\n          if (i % keyLen === 0 || keyLen === 8 && i % keyLen === 4) {\n            tmp = sbox[tmp >>> 24] << 24 ^ sbox[tmp >> 16 & 255] << 16 ^ sbox[tmp >> 8 & 255] << 8 ^ sbox[tmp & 255];\n\n            // shift rows and add rcon\n            if (i % keyLen === 0) {\n              tmp = tmp << 8 ^ tmp >>> 24 ^ rcon << 24;\n              rcon = rcon << 1 ^ (rcon >> 7) * 283;\n            }\n          }\n\n          encKey[i] = encKey[i - keyLen] ^ tmp;\n        }\n\n        // schedule decryption keys\n        for (j = 0; i; j++, i--) {\n          tmp = encKey[j & 3 ? i : i - 4];\n          if (i <= 4 || j < 4) {\n            decKey[j] = tmp;\n          } else {\n            decKey[j] = decTable[0][sbox[tmp >>> 24]] ^ decTable[1][sbox[tmp >> 16 & 255]] ^ decTable[2][sbox[tmp >> 8 & 255]] ^ decTable[3][sbox[tmp & 255]];\n          }\n        }\n      }\n\n      /**\n       * Decrypt 16 bytes, specified as four 32-bit words.\n       *\n       * @param {Number} encrypted0 the first word to decrypt\n       * @param {Number} encrypted1 the second word to decrypt\n       * @param {Number} encrypted2 the third word to decrypt\n       * @param {Number} encrypted3 the fourth word to decrypt\n       * @param {Int32Array} out the array to write the decrypted words\n       * into\n       * @param {Number} offset the offset into the output array to start\n       * writing results\n       * @return {Array} The plaintext.\n       */\n\n      AES.prototype.decrypt = function decrypt$$1(encrypted0, encrypted1, encrypted2, encrypted3, out, offset) {\n        var key = this._key[1];\n        // state variables a,b,c,d are loaded with pre-whitened data\n        var a = encrypted0 ^ key[0];\n        var b = encrypted3 ^ key[1];\n        var c = encrypted2 ^ key[2];\n        var d = encrypted1 ^ key[3];\n        var a2 = void 0;\n        var b2 = void 0;\n        var c2 = void 0;\n\n        // key.length === 2 ?\n        var nInnerRounds = key.length / 4 - 2;\n        var i = void 0;\n        var kIndex = 4;\n        var table = this._tables[1];\n\n        // load up the tables\n        var table0 = table[0];\n        var table1 = table[1];\n        var table2 = table[2];\n        var table3 = table[3];\n        var sbox = table[4];\n\n        // Inner rounds. Cribbed from OpenSSL.\n        for (i = 0; i < nInnerRounds; i++) {\n          a2 = table0[a >>> 24] ^ table1[b >> 16 & 255] ^ table2[c >> 8 & 255] ^ table3[d & 255] ^ key[kIndex];\n          b2 = table0[b >>> 24] ^ table1[c >> 16 & 255] ^ table2[d >> 8 & 255] ^ table3[a & 255] ^ key[kIndex + 1];\n          c2 = table0[c >>> 24] ^ table1[d >> 16 & 255] ^ table2[a >> 8 & 255] ^ table3[b & 255] ^ key[kIndex + 2];\n          d = table0[d >>> 24] ^ table1[a >> 16 & 255] ^ table2[b >> 8 & 255] ^ table3[c & 255] ^ key[kIndex + 3];\n          kIndex += 4;\n          a = a2;b = b2;c = c2;\n        }\n\n        // Last round.\n        for (i = 0; i < 4; i++) {\n          out[(3 & -i) + offset] = sbox[a >>> 24] << 24 ^ sbox[b >> 16 & 255] << 16 ^ sbox[c >> 8 & 255] << 8 ^ sbox[d & 255] ^ key[kIndex++];\n          a2 = a;a = b;b = c;c = d;d = a2;\n        }\n      };\n\n      return AES;\n    }();\n\n    /**\n     * @file stream.js\n     */\n    /**\n     * A lightweight readable stream implemention that handles event dispatching.\n     *\n     * @class Stream\n     */\n    var Stream = function () {\n      function Stream() {\n        classCallCheck$$1(this, Stream);\n\n        this.listeners = {};\n      }\n\n      /**\n       * Add a listener for a specified event type.\n       *\n       * @param {String} type the event name\n       * @param {Function} listener the callback to be invoked when an event of\n       * the specified type occurs\n       */\n\n      Stream.prototype.on = function on(type, listener) {\n        if (!this.listeners[type]) {\n          this.listeners[type] = [];\n        }\n        this.listeners[type].push(listener);\n      };\n\n      /**\n       * Remove a listener for a specified event type.\n       *\n       * @param {String} type the event name\n       * @param {Function} listener  a function previously registered for this\n       * type of event through `on`\n       * @return {Boolean} if we could turn it off or not\n       */\n\n      Stream.prototype.off = function off(type, listener) {\n        if (!this.listeners[type]) {\n          return false;\n        }\n\n        var index = this.listeners[type].indexOf(listener);\n\n        this.listeners[type].splice(index, 1);\n        return index > -1;\n      };\n\n      /**\n       * Trigger an event of the specified type on this stream. Any additional\n       * arguments to this function are passed as parameters to event listeners.\n       *\n       * @param {String} type the event name\n       */\n\n      Stream.prototype.trigger = function trigger(type) {\n        var callbacks = this.listeners[type];\n\n        if (!callbacks) {\n          return;\n        }\n\n        // Slicing the arguments on every invocation of this method\n        // can add a significant amount of overhead. Avoid the\n        // intermediate object creation for the common case of a\n        // single callback argument\n        if (arguments.length === 2) {\n          var length = callbacks.length;\n\n          for (var i = 0; i < length; ++i) {\n            callbacks[i].call(this, arguments[1]);\n          }\n        } else {\n          var args = Array.prototype.slice.call(arguments, 1);\n          var _length = callbacks.length;\n\n          for (var _i = 0; _i < _length; ++_i) {\n            callbacks[_i].apply(this, args);\n          }\n        }\n      };\n\n      /**\n       * Destroys the stream and cleans up.\n       */\n\n      Stream.prototype.dispose = function dispose() {\n        this.listeners = {};\n      };\n      /**\n       * Forwards all `data` events on this stream to the destination stream. The\n       * destination stream should provide a method `push` to receive the data\n       * events as they arrive.\n       *\n       * @param {Stream} destination the stream that will receive all `data` events\n       * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n       */\n\n      Stream.prototype.pipe = function pipe(destination) {\n        this.on('data', function (data) {\n          destination.push(data);\n        });\n      };\n\n      return Stream;\n    }();\n\n    /**\n     * @file async-stream.js\n     */\n    /**\n     * A wrapper around the Stream class to use setTiemout\n     * and run stream \"jobs\" Asynchronously\n     *\n     * @class AsyncStream\n     * @extends Stream\n     */\n\n    var AsyncStream$$1 = function (_Stream) {\n      inherits$$1(AsyncStream$$1, _Stream);\n\n      function AsyncStream$$1() {\n        classCallCheck$$1(this, AsyncStream$$1);\n\n        var _this = possibleConstructorReturn$$1(this, _Stream.call(this, Stream));\n\n        _this.jobs = [];\n        _this.delay = 1;\n        _this.timeout_ = null;\n        return _this;\n      }\n\n      /**\n       * process an async job\n       *\n       * @private\n       */\n\n      AsyncStream$$1.prototype.processJob_ = function processJob_() {\n        this.jobs.shift()();\n        if (this.jobs.length) {\n          this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);\n        } else {\n          this.timeout_ = null;\n        }\n      };\n\n      /**\n       * push a job into the stream\n       *\n       * @param {Function} job the job to push into the stream\n       */\n\n      AsyncStream$$1.prototype.push = function push(job) {\n        this.jobs.push(job);\n        if (!this.timeout_) {\n          this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);\n        }\n      };\n\n      return AsyncStream$$1;\n    }(Stream);\n\n    /**\n     * @file decrypter.js\n     *\n     * An asynchronous implementation of AES-128 CBC decryption with\n     * PKCS#7 padding.\n     */\n\n    /**\n     * Convert network-order (big-endian) bytes into their little-endian\n     * representation.\n     */\n    var ntoh = function ntoh(word) {\n      return word << 24 | (word & 0xff00) << 8 | (word & 0xff0000) >> 8 | word >>> 24;\n    };\n\n    /**\n     * Decrypt bytes using AES-128 with CBC and PKCS#7 padding.\n     *\n     * @param {Uint8Array} encrypted the encrypted bytes\n     * @param {Uint32Array} key the bytes of the decryption key\n     * @param {Uint32Array} initVector the initialization vector (IV) to\n     * use for the first round of CBC.\n     * @return {Uint8Array} the decrypted bytes\n     *\n     * @see http://en.wikipedia.org/wiki/Advanced_Encryption_Standard\n     * @see http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_.28CBC.29\n     * @see https://tools.ietf.org/html/rfc2315\n     */\n    var decrypt$$1 = function decrypt$$1(encrypted, key, initVector) {\n      // word-level access to the encrypted bytes\n      var encrypted32 = new Int32Array(encrypted.buffer, encrypted.byteOffset, encrypted.byteLength >> 2);\n\n      var decipher = new AES(Array.prototype.slice.call(key));\n\n      // byte and word-level access for the decrypted output\n      var decrypted = new Uint8Array(encrypted.byteLength);\n      var decrypted32 = new Int32Array(decrypted.buffer);\n\n      // temporary variables for working with the IV, encrypted, and\n      // decrypted data\n      var init0 = void 0;\n      var init1 = void 0;\n      var init2 = void 0;\n      var init3 = void 0;\n      var encrypted0 = void 0;\n      var encrypted1 = void 0;\n      var encrypted2 = void 0;\n      var encrypted3 = void 0;\n\n      // iteration variable\n      var wordIx = void 0;\n\n      // pull out the words of the IV to ensure we don't modify the\n      // passed-in reference and easier access\n      init0 = initVector[0];\n      init1 = initVector[1];\n      init2 = initVector[2];\n      init3 = initVector[3];\n\n      // decrypt four word sequences, applying cipher-block chaining (CBC)\n      // to each decrypted block\n      for (wordIx = 0; wordIx < encrypted32.length; wordIx += 4) {\n        // convert big-endian (network order) words into little-endian\n        // (javascript order)\n        encrypted0 = ntoh(encrypted32[wordIx]);\n        encrypted1 = ntoh(encrypted32[wordIx + 1]);\n        encrypted2 = ntoh(encrypted32[wordIx + 2]);\n        encrypted3 = ntoh(encrypted32[wordIx + 3]);\n\n        // decrypt the block\n        decipher.decrypt(encrypted0, encrypted1, encrypted2, encrypted3, decrypted32, wordIx);\n\n        // XOR with the IV, and restore network byte-order to obtain the\n        // plaintext\n        decrypted32[wordIx] = ntoh(decrypted32[wordIx] ^ init0);\n        decrypted32[wordIx + 1] = ntoh(decrypted32[wordIx + 1] ^ init1);\n        decrypted32[wordIx + 2] = ntoh(decrypted32[wordIx + 2] ^ init2);\n        decrypted32[wordIx + 3] = ntoh(decrypted32[wordIx + 3] ^ init3);\n\n        // setup the IV for the next round\n        init0 = encrypted0;\n        init1 = encrypted1;\n        init2 = encrypted2;\n        init3 = encrypted3;\n      }\n\n      return decrypted;\n    };\n\n    /**\n     * The `Decrypter` class that manages decryption of AES\n     * data through `AsyncStream` objects and the `decrypt`\n     * function\n     *\n     * @param {Uint8Array} encrypted the encrypted bytes\n     * @param {Uint32Array} key the bytes of the decryption key\n     * @param {Uint32Array} initVector the initialization vector (IV) to\n     * @param {Function} done the function to run when done\n     * @class Decrypter\n     */\n\n    var Decrypter$$1 = function () {\n      function Decrypter$$1(encrypted, key, initVector, done) {\n        classCallCheck$$1(this, Decrypter$$1);\n\n        var step = Decrypter$$1.STEP;\n        var encrypted32 = new Int32Array(encrypted.buffer);\n        var decrypted = new Uint8Array(encrypted.byteLength);\n        var i = 0;\n\n        this.asyncStream_ = new AsyncStream$$1();\n\n        // split up the encryption job and do the individual chunks asynchronously\n        this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));\n        for (i = step; i < encrypted32.length; i += step) {\n          initVector = new Uint32Array([ntoh(encrypted32[i - 4]), ntoh(encrypted32[i - 3]), ntoh(encrypted32[i - 2]), ntoh(encrypted32[i - 1])]);\n          this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));\n        }\n        // invoke the done() callback when everything is finished\n        this.asyncStream_.push(function () {\n          // remove pkcs#7 padding from the decrypted bytes\n          done(null, unpad(decrypted));\n        });\n      }\n\n      /**\n       * a getter for step the maximum number of bytes to process at one time\n       *\n       * @return {Number} the value of step 32000\n       */\n\n      /**\n       * @private\n       */\n      Decrypter$$1.prototype.decryptChunk_ = function decryptChunk_(encrypted, key, initVector, decrypted) {\n        return function () {\n          var bytes = decrypt$$1(encrypted, key, initVector);\n\n          decrypted.set(bytes, encrypted.byteOffset);\n        };\n      };\n\n      createClass$$1(Decrypter$$1, null, [{\n        key: 'STEP',\n        get: function get$$1() {\n          // 4 * 8000;\n          return 32000;\n        }\n      }]);\n      return Decrypter$$1;\n    }();\n\n    /**\n     * @file bin-utils.js\n     */\n\n    /**\n     * Creates an object for sending to a web worker modifying properties that are TypedArrays\n     * into a new object with seperated properties for the buffer, byteOffset, and byteLength.\n     *\n     * @param {Object} message\n     *        Object of properties and values to send to the web worker\n     * @return {Object}\n     *         Modified message with TypedArray values expanded\n     * @function createTransferableMessage\n     */\n    var createTransferableMessage = function createTransferableMessage(message) {\n      var transferable = {};\n\n      Object.keys(message).forEach(function (key) {\n        var value = message[key];\n\n        if (ArrayBuffer.isView(value)) {\n          transferable[key] = {\n            bytes: value.buffer,\n            byteOffset: value.byteOffset,\n            byteLength: value.byteLength\n          };\n        } else {\n          transferable[key] = value;\n        }\n      });\n\n      return transferable;\n    };\n\n    /**\n     * Our web worker interface so that things can talk to aes-decrypter\n     * that will be running in a web worker. the scope is passed to this by\n     * webworkify.\n     *\n     * @param {Object} self\n     *        the scope for the web worker\n     */\n    var DecrypterWorker = function DecrypterWorker(self) {\n      self.onmessage = function (event) {\n        var data = event.data;\n        var encrypted = new Uint8Array(data.encrypted.bytes, data.encrypted.byteOffset, data.encrypted.byteLength);\n        var key = new Uint32Array(data.key.bytes, data.key.byteOffset, data.key.byteLength / 4);\n        var iv = new Uint32Array(data.iv.bytes, data.iv.byteOffset, data.iv.byteLength / 4);\n\n        /* eslint-disable no-new, handle-callback-err */\n        new Decrypter$$1(encrypted, key, iv, function (err, bytes) {\n          self.postMessage(createTransferableMessage({\n            source: data.source,\n            decrypted: bytes\n          }), [bytes.buffer]);\n        });\n        /* eslint-enable */\n      };\n    };\n\n    var decrypterWorker = new DecrypterWorker(self);\n\n    return decrypterWorker;\n  }();\n});\n\n/**\n * Convert the properties of an HLS track into an audioTrackKind.\n *\n * @private\n */\nvar audioTrackKind_ = function audioTrackKind_(properties) {\n  var kind = properties.default ? 'main' : 'alternative';\n\n  if (properties.characteristics && properties.characteristics.indexOf('public.accessibility.describes-video') >= 0) {\n    kind = 'main-desc';\n  }\n\n  return kind;\n};\n\n/**\n * Pause provided segment loader and playlist loader if active\n *\n * @param {SegmentLoader} segmentLoader\n *        SegmentLoader to pause\n * @param {Object} mediaType\n *        Active media type\n * @function stopLoaders\n */\nvar stopLoaders = function stopLoaders(segmentLoader, mediaType) {\n  segmentLoader.abort();\n  segmentLoader.pause();\n\n  if (mediaType && mediaType.activePlaylistLoader) {\n    mediaType.activePlaylistLoader.pause();\n    mediaType.activePlaylistLoader = null;\n  }\n};\n\n/**\n * Start loading provided segment loader and playlist loader\n *\n * @param {PlaylistLoader} playlistLoader\n *        PlaylistLoader to start loading\n * @param {Object} mediaType\n *        Active media type\n * @function startLoaders\n */\nvar startLoaders = function startLoaders(playlistLoader, mediaType) {\n  // Segment loader will be started after `loadedmetadata` or `loadedplaylist` from the\n  // playlist loader\n  mediaType.activePlaylistLoader = playlistLoader;\n  playlistLoader.load();\n};\n\n/**\n * Returns a function to be called when the media group changes. It performs a\n * non-destructive (preserve the buffer) resync of the SegmentLoader. This is because a\n * change of group is merely a rendition switch of the same content at another encoding,\n * rather than a change of content, such as switching audio from English to Spanish.\n *\n * @param {String} type\n *        MediaGroup type\n * @param {Object} settings\n *        Object containing required information for media groups\n * @return {Function}\n *         Handler for a non-destructive resync of SegmentLoader when the active media\n *         group changes.\n * @function onGroupChanged\n */\nvar onGroupChanged = function onGroupChanged(type, settings) {\n  return function () {\n    var _settings$segmentLoad = settings.segmentLoaders,\n        segmentLoader = _settings$segmentLoad[type],\n        mainSegmentLoader = _settings$segmentLoad.main,\n        mediaType = settings.mediaTypes[type];\n\n    var activeTrack = mediaType.activeTrack();\n    var activeGroup = mediaType.activeGroup(activeTrack);\n    var previousActiveLoader = mediaType.activePlaylistLoader;\n\n    stopLoaders(segmentLoader, mediaType);\n\n    if (!activeGroup) {\n      // there is no group active\n      return;\n    }\n\n    if (!activeGroup.playlistLoader) {\n      if (previousActiveLoader) {\n        // The previous group had a playlist loader but the new active group does not\n        // this means we are switching from demuxed to muxed audio. In this case we want to\n        // do a destructive reset of the main segment loader and not restart the audio\n        // loaders.\n        mainSegmentLoader.resetEverything();\n      }\n      return;\n    }\n\n    // Non-destructive resync\n    segmentLoader.resyncLoader();\n\n    startLoaders(activeGroup.playlistLoader, mediaType);\n  };\n};\n\n/**\n * Returns a function to be called when the media track changes. It performs a\n * destructive reset of the SegmentLoader to ensure we start loading as close to\n * currentTime as possible.\n *\n * @param {String} type\n *        MediaGroup type\n * @param {Object} settings\n *        Object containing required information for media groups\n * @return {Function}\n *         Handler for a destructive reset of SegmentLoader when the active media\n *         track changes.\n * @function onTrackChanged\n */\nvar onTrackChanged = function onTrackChanged(type, settings) {\n  return function () {\n    var _settings$segmentLoad2 = settings.segmentLoaders,\n        segmentLoader = _settings$segmentLoad2[type],\n        mainSegmentLoader = _settings$segmentLoad2.main,\n        mediaType = settings.mediaTypes[type];\n\n    var activeTrack = mediaType.activeTrack();\n    var activeGroup = mediaType.activeGroup(activeTrack);\n    var previousActiveLoader = mediaType.activePlaylistLoader;\n\n    stopLoaders(segmentLoader, mediaType);\n\n    if (!activeGroup) {\n      // there is no group active so we do not want to restart loaders\n      return;\n    }\n\n    if (!activeGroup.playlistLoader) {\n      // when switching from demuxed audio/video to muxed audio/video (noted by no playlist\n      // loader for the audio group), we want to do a destructive reset of the main segment\n      // loader and not restart the audio loaders\n      mainSegmentLoader.resetEverything();\n      return;\n    }\n\n    if (previousActiveLoader === activeGroup.playlistLoader) {\n      // Nothing has actually changed. This can happen because track change events can fire\n      // multiple times for a \"single\" change. One for enabling the new active track, and\n      // one for disabling the track that was active\n      startLoaders(activeGroup.playlistLoader, mediaType);\n      return;\n    }\n\n    if (segmentLoader.track) {\n      // For WebVTT, set the new text track in the segmentloader\n      segmentLoader.track(activeTrack);\n    }\n\n    // destructive reset\n    segmentLoader.resetEverything();\n\n    startLoaders(activeGroup.playlistLoader, mediaType);\n  };\n};\n\nvar onError = {\n  /**\n   * Returns a function to be called when a SegmentLoader or PlaylistLoader encounters\n   * an error.\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @return {Function}\n   *         Error handler. Logs warning (or error if the playlist is blacklisted) to\n   *         console and switches back to default audio track.\n   * @function onError.AUDIO\n   */\n  AUDIO: function AUDIO(type, settings) {\n    return function () {\n      var segmentLoader = settings.segmentLoaders[type],\n          mediaType = settings.mediaTypes[type],\n          blacklistCurrentPlaylist = settings.blacklistCurrentPlaylist;\n\n      stopLoaders(segmentLoader, mediaType);\n\n      // switch back to default audio track\n      var activeTrack = mediaType.activeTrack();\n      var activeGroup = mediaType.activeGroup();\n      var id = (activeGroup.filter(function (group) {\n        return group.default;\n      })[0] || activeGroup[0]).id;\n      var defaultTrack = mediaType.tracks[id];\n\n      if (activeTrack === defaultTrack) {\n        // Default track encountered an error. All we can do now is blacklist the current\n        // rendition and hope another will switch audio groups\n        blacklistCurrentPlaylist({\n          message: 'Problem encountered loading the default audio track.'\n        });\n        return;\n      }\n\n      videojs$1.log.warn('Problem encountered loading the alternate audio track.' + 'Switching back to default.');\n\n      for (var trackId in mediaType.tracks) {\n        mediaType.tracks[trackId].enabled = mediaType.tracks[trackId] === defaultTrack;\n      }\n\n      mediaType.onTrackChanged();\n    };\n  },\n  /**\n   * Returns a function to be called when a SegmentLoader or PlaylistLoader encounters\n   * an error.\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @return {Function}\n   *         Error handler. Logs warning to console and disables the active subtitle track\n   * @function onError.SUBTITLES\n   */\n  SUBTITLES: function SUBTITLES(type, settings) {\n    return function () {\n      var segmentLoader = settings.segmentLoaders[type],\n          mediaType = settings.mediaTypes[type];\n\n      videojs$1.log.warn('Problem encountered loading the subtitle track.' + 'Disabling subtitle track.');\n\n      stopLoaders(segmentLoader, mediaType);\n\n      var track = mediaType.activeTrack();\n\n      if (track) {\n        track.mode = 'disabled';\n      }\n\n      mediaType.onTrackChanged();\n    };\n  }\n};\n\nvar setupListeners = {\n  /**\n   * Setup event listeners for audio playlist loader\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {PlaylistLoader|null} playlistLoader\n   *        PlaylistLoader to register listeners on\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function setupListeners.AUDIO\n   */\n  AUDIO: function AUDIO(type, playlistLoader, settings) {\n    if (!playlistLoader) {\n      // no playlist loader means audio will be muxed with the video\n      return;\n    }\n\n    var tech = settings.tech,\n        requestOptions = settings.requestOptions,\n        segmentLoader = settings.segmentLoaders[type];\n\n    playlistLoader.on('loadedmetadata', function () {\n      var media = playlistLoader.media();\n\n      segmentLoader.playlist(media, requestOptions);\n\n      // if the video is already playing, or if this isn't a live video and preload\n      // permits, start downloading segments\n      if (!tech.paused() || media.endList && tech.preload() !== 'none') {\n        segmentLoader.load();\n      }\n    });\n\n    playlistLoader.on('loadedplaylist', function () {\n      segmentLoader.playlist(playlistLoader.media(), requestOptions);\n\n      // If the player isn't paused, ensure that the segment loader is running\n      if (!tech.paused()) {\n        segmentLoader.load();\n      }\n    });\n\n    playlistLoader.on('error', onError[type](type, settings));\n  },\n  /**\n   * Setup event listeners for subtitle playlist loader\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {PlaylistLoader|null} playlistLoader\n   *        PlaylistLoader to register listeners on\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function setupListeners.SUBTITLES\n   */\n  SUBTITLES: function SUBTITLES(type, playlistLoader, settings) {\n    var tech = settings.tech,\n        requestOptions = settings.requestOptions,\n        segmentLoader = settings.segmentLoaders[type],\n        mediaType = settings.mediaTypes[type];\n\n    playlistLoader.on('loadedmetadata', function () {\n      var media = playlistLoader.media();\n\n      segmentLoader.playlist(media, requestOptions);\n      segmentLoader.track(mediaType.activeTrack());\n\n      // if the video is already playing, or if this isn't a live video and preload\n      // permits, start downloading segments\n      if (!tech.paused() || media.endList && tech.preload() !== 'none') {\n        segmentLoader.load();\n      }\n    });\n\n    playlistLoader.on('loadedplaylist', function () {\n      segmentLoader.playlist(playlistLoader.media(), requestOptions);\n\n      // If the player isn't paused, ensure that the segment loader is running\n      if (!tech.paused()) {\n        segmentLoader.load();\n      }\n    });\n\n    playlistLoader.on('error', onError[type](type, settings));\n  }\n};\n\nvar byGroupId = function byGroupId(type, groupId) {\n  return function (playlist) {\n    return playlist.attributes[type] === groupId;\n  };\n};\n\nvar byResolvedUri = function byResolvedUri(resolvedUri) {\n  return function (playlist) {\n    return playlist.resolvedUri === resolvedUri;\n  };\n};\n\nvar initialize = {\n  /**\n   * Setup PlaylistLoaders and AudioTracks for the audio groups\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function initialize.AUDIO\n   */\n  'AUDIO': function AUDIO(type, settings) {\n    var hls = settings.hls,\n        sourceType = settings.sourceType,\n        segmentLoader = settings.segmentLoaders[type],\n        withCredentials = settings.requestOptions.withCredentials,\n        _settings$master = settings.master,\n        mediaGroups = _settings$master.mediaGroups,\n        playlists = _settings$master.playlists,\n        _settings$mediaTypes$ = settings.mediaTypes[type],\n        groups = _settings$mediaTypes$.groups,\n        tracks = _settings$mediaTypes$.tracks,\n        masterPlaylistLoader = settings.masterPlaylistLoader;\n\n    // force a default if we have none\n\n    if (!mediaGroups[type] || Object.keys(mediaGroups[type]).length === 0) {\n      mediaGroups[type] = { main: { default: { default: true } } };\n    }\n\n    for (var groupId in mediaGroups[type]) {\n      if (!groups[groupId]) {\n        groups[groupId] = [];\n      }\n\n      // List of playlists that have an AUDIO attribute value matching the current\n      // group ID\n      var groupPlaylists = playlists.filter(byGroupId(type, groupId));\n\n      for (var variantLabel in mediaGroups[type][groupId]) {\n        var properties = mediaGroups[type][groupId][variantLabel];\n\n        // List of playlists for the current group ID that have a matching uri with\n        // this alternate audio variant\n        var matchingPlaylists = groupPlaylists.filter(byResolvedUri(properties.resolvedUri));\n\n        if (matchingPlaylists.length) {\n          // If there is a playlist that has the same uri as this audio variant, assume\n          // that the playlist is audio only. We delete the resolvedUri property here\n          // to prevent a playlist loader from being created so that we don't have\n          // both the main and audio segment loaders loading the same audio segments\n          // from the same playlist.\n          delete properties.resolvedUri;\n        }\n\n        var playlistLoader = void 0;\n\n        if (properties.resolvedUri) {\n          playlistLoader = new PlaylistLoader(properties.resolvedUri, hls, withCredentials);\n        } else if (properties.playlists && sourceType === 'dash') {\n          playlistLoader = new DashPlaylistLoader(properties.playlists[0], hls, withCredentials, masterPlaylistLoader);\n        } else {\n          // no resolvedUri means the audio is muxed with the video when using this\n          // audio track\n          playlistLoader = null;\n        }\n\n        properties = videojs$1.mergeOptions({ id: variantLabel, playlistLoader: playlistLoader }, properties);\n\n        setupListeners[type](type, properties.playlistLoader, settings);\n\n        groups[groupId].push(properties);\n\n        if (typeof tracks[variantLabel] === 'undefined') {\n          var track = new videojs$1.AudioTrack({\n            id: variantLabel,\n            kind: audioTrackKind_(properties),\n            enabled: false,\n            language: properties.language,\n            default: properties.default,\n            label: variantLabel\n          });\n\n          tracks[variantLabel] = track;\n        }\n      }\n    }\n\n    // setup single error event handler for the segment loader\n    segmentLoader.on('error', onError[type](type, settings));\n  },\n  /**\n   * Setup PlaylistLoaders and TextTracks for the subtitle groups\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function initialize.SUBTITLES\n   */\n  'SUBTITLES': function SUBTITLES(type, settings) {\n    var tech = settings.tech,\n        hls = settings.hls,\n        sourceType = settings.sourceType,\n        segmentLoader = settings.segmentLoaders[type],\n        withCredentials = settings.requestOptions.withCredentials,\n        mediaGroups = settings.master.mediaGroups,\n        _settings$mediaTypes$2 = settings.mediaTypes[type],\n        groups = _settings$mediaTypes$2.groups,\n        tracks = _settings$mediaTypes$2.tracks,\n        masterPlaylistLoader = settings.masterPlaylistLoader;\n\n    for (var groupId in mediaGroups[type]) {\n      if (!groups[groupId]) {\n        groups[groupId] = [];\n      }\n\n      for (var variantLabel in mediaGroups[type][groupId]) {\n        if (mediaGroups[type][groupId][variantLabel].forced) {\n          // Subtitle playlists with the forced attribute are not selectable in Safari.\n          // According to Apple's HLS Authoring Specification:\n          //   If content has forced subtitles and regular subtitles in a given language,\n          //   the regular subtitles track in that language MUST contain both the forced\n          //   subtitles and the regular subtitles for that language.\n          // Because of this requirement and that Safari does not add forced subtitles,\n          // forced subtitles are skipped here to maintain consistent experience across\n          // all platforms\n          continue;\n        }\n\n        var properties = mediaGroups[type][groupId][variantLabel];\n\n        var playlistLoader = void 0;\n\n        if (sourceType === 'hls') {\n          playlistLoader = new PlaylistLoader(properties.resolvedUri, hls, withCredentials);\n        } else if (sourceType === 'dash') {\n          playlistLoader = new DashPlaylistLoader(properties.playlists[0], hls, withCredentials, masterPlaylistLoader);\n        }\n\n        properties = videojs$1.mergeOptions({\n          id: variantLabel,\n          playlistLoader: playlistLoader\n        }, properties);\n\n        setupListeners[type](type, properties.playlistLoader, settings);\n\n        groups[groupId].push(properties);\n\n        if (typeof tracks[variantLabel] === 'undefined') {\n          var track = tech.addRemoteTextTrack({\n            id: variantLabel,\n            kind: 'subtitles',\n            enabled: false,\n            language: properties.language,\n            label: variantLabel\n          }, false).track;\n\n          tracks[variantLabel] = track;\n        }\n      }\n    }\n\n    // setup single error event handler for the segment loader\n    segmentLoader.on('error', onError[type](type, settings));\n  },\n  /**\n   * Setup TextTracks for the closed-caption groups\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function initialize['CLOSED-CAPTIONS']\n   */\n  'CLOSED-CAPTIONS': function CLOSEDCAPTIONS(type, settings) {\n    var tech = settings.tech,\n        mediaGroups = settings.master.mediaGroups,\n        _settings$mediaTypes$3 = settings.mediaTypes[type],\n        groups = _settings$mediaTypes$3.groups,\n        tracks = _settings$mediaTypes$3.tracks;\n\n    for (var groupId in mediaGroups[type]) {\n      if (!groups[groupId]) {\n        groups[groupId] = [];\n      }\n\n      for (var variantLabel in mediaGroups[type][groupId]) {\n        var properties = mediaGroups[type][groupId][variantLabel];\n\n        // We only support CEA608 captions for now, so ignore anything that\n        // doesn't use a CCx INSTREAM-ID\n        if (!properties.instreamId.match(/CC\\d/)) {\n          continue;\n        }\n\n        // No PlaylistLoader is required for Closed-Captions because the captions are\n        // embedded within the video stream\n        groups[groupId].push(videojs$1.mergeOptions({ id: variantLabel }, properties));\n\n        if (typeof tracks[variantLabel] === 'undefined') {\n          var track = tech.addRemoteTextTrack({\n            id: properties.instreamId,\n            kind: 'captions',\n            enabled: false,\n            language: properties.language,\n            label: variantLabel\n          }, false).track;\n\n          tracks[variantLabel] = track;\n        }\n      }\n    }\n  }\n};\n\n/**\n * Returns a function used to get the active group of the provided type\n *\n * @param {String} type\n *        MediaGroup type\n * @param {Object} settings\n *        Object containing required information for media groups\n * @return {Function}\n *         Function that returns the active media group for the provided type. Takes an\n *         optional parameter {TextTrack} track. If no track is provided, a list of all\n *         variants in the group, otherwise the variant corresponding to the provided\n *         track is returned.\n * @function activeGroup\n */\nvar activeGroup = function activeGroup(type, settings) {\n  return function (track) {\n    var masterPlaylistLoader = settings.masterPlaylistLoader,\n        groups = settings.mediaTypes[type].groups;\n\n    var media = masterPlaylistLoader.media();\n\n    if (!media) {\n      return null;\n    }\n\n    var variants = null;\n\n    if (media.attributes[type]) {\n      variants = groups[media.attributes[type]];\n    }\n\n    variants = variants || groups.main;\n\n    if (typeof track === 'undefined') {\n      return variants;\n    }\n\n    if (track === null) {\n      // An active track was specified so a corresponding group is expected. track === null\n      // means no track is currently active so there is no corresponding group\n      return null;\n    }\n\n    return variants.filter(function (props) {\n      return props.id === track.id;\n    })[0] || null;\n  };\n};\n\nvar activeTrack = {\n  /**\n   * Returns a function used to get the active track of type provided\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @return {Function}\n   *         Function that returns the active media track for the provided type. Returns\n   *         null if no track is active\n   * @function activeTrack.AUDIO\n   */\n  AUDIO: function AUDIO(type, settings) {\n    return function () {\n      var tracks = settings.mediaTypes[type].tracks;\n\n      for (var id in tracks) {\n        if (tracks[id].enabled) {\n          return tracks[id];\n        }\n      }\n\n      return null;\n    };\n  },\n  /**\n   * Returns a function used to get the active track of type provided\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @return {Function}\n   *         Function that returns the active media track for the provided type. Returns\n   *         null if no track is active\n   * @function activeTrack.SUBTITLES\n   */\n  SUBTITLES: function SUBTITLES(type, settings) {\n    return function () {\n      var tracks = settings.mediaTypes[type].tracks;\n\n      for (var id in tracks) {\n        if (tracks[id].mode === 'showing') {\n          return tracks[id];\n        }\n      }\n\n      return null;\n    };\n  }\n};\n\n/**\n * Setup PlaylistLoaders and Tracks for media groups (Audio, Subtitles,\n * Closed-Captions) specified in the master manifest.\n *\n * @param {Object} settings\n *        Object containing required information for setting up the media groups\n * @param {SegmentLoader} settings.segmentLoaders.AUDIO\n *        Audio segment loader\n * @param {SegmentLoader} settings.segmentLoaders.SUBTITLES\n *        Subtitle segment loader\n * @param {SegmentLoader} settings.segmentLoaders.main\n *        Main segment loader\n * @param {Tech} settings.tech\n *        The tech of the player\n * @param {Object} settings.requestOptions\n *        XHR request options used by the segment loaders\n * @param {PlaylistLoader} settings.masterPlaylistLoader\n *        PlaylistLoader for the master source\n * @param {HlsHandler} settings.hls\n *        HLS SourceHandler\n * @param {Object} settings.master\n *        The parsed master manifest\n * @param {Object} settings.mediaTypes\n *        Object to store the loaders, tracks, and utility methods for each media type\n * @param {Function} settings.blacklistCurrentPlaylist\n *        Blacklists the current rendition and forces a rendition switch.\n * @function setupMediaGroups\n */\nvar setupMediaGroups = function setupMediaGroups(settings) {\n  ['AUDIO', 'SUBTITLES', 'CLOSED-CAPTIONS'].forEach(function (type) {\n    initialize[type](type, settings);\n  });\n\n  var mediaTypes = settings.mediaTypes,\n      masterPlaylistLoader = settings.masterPlaylistLoader,\n      tech = settings.tech,\n      hls = settings.hls;\n\n  // setup active group and track getters and change event handlers\n\n  ['AUDIO', 'SUBTITLES'].forEach(function (type) {\n    mediaTypes[type].activeGroup = activeGroup(type, settings);\n    mediaTypes[type].activeTrack = activeTrack[type](type, settings);\n    mediaTypes[type].onGroupChanged = onGroupChanged(type, settings);\n    mediaTypes[type].onTrackChanged = onTrackChanged(type, settings);\n  });\n\n  // DO NOT enable the default subtitle or caption track.\n  // DO enable the default audio track\n  var audioGroup = mediaTypes.AUDIO.activeGroup();\n  var groupId = (audioGroup.filter(function (group) {\n    return group.default;\n  })[0] || audioGroup[0]).id;\n\n  mediaTypes.AUDIO.tracks[groupId].enabled = true;\n  mediaTypes.AUDIO.onTrackChanged();\n\n  masterPlaylistLoader.on('mediachange', function () {\n    ['AUDIO', 'SUBTITLES'].forEach(function (type) {\n      return mediaTypes[type].onGroupChanged();\n    });\n  });\n\n  // custom audio track change event handler for usage event\n  var onAudioTrackChanged = function onAudioTrackChanged() {\n    mediaTypes.AUDIO.onTrackChanged();\n    tech.trigger({ type: 'usage', name: 'hls-audio-change' });\n  };\n\n  tech.audioTracks().addEventListener('change', onAudioTrackChanged);\n  tech.remoteTextTracks().addEventListener('change', mediaTypes.SUBTITLES.onTrackChanged);\n\n  hls.on('dispose', function () {\n    tech.audioTracks().removeEventListener('change', onAudioTrackChanged);\n    tech.remoteTextTracks().removeEventListener('change', mediaTypes.SUBTITLES.onTrackChanged);\n  });\n\n  // clear existing audio tracks and add the ones we just created\n  tech.clearTracks('audio');\n\n  for (var id in mediaTypes.AUDIO.tracks) {\n    tech.audioTracks().addTrack(mediaTypes.AUDIO.tracks[id]);\n  }\n};\n\n/**\n * Creates skeleton object used to store the loaders, tracks, and utility methods for each\n * media type\n *\n * @return {Object}\n *         Object to store the loaders, tracks, and utility methods for each media type\n * @function createMediaTypes\n */\nvar createMediaTypes = function createMediaTypes() {\n  var mediaTypes = {};\n\n  ['AUDIO', 'SUBTITLES', 'CLOSED-CAPTIONS'].forEach(function (type) {\n    mediaTypes[type] = {\n      groups: {},\n      tracks: {},\n      activePlaylistLoader: null,\n      activeGroup: noop,\n      activeTrack: noop,\n      onGroupChanged: noop,\n      onTrackChanged: noop\n    };\n  });\n\n  return mediaTypes;\n};\n\n/**\n * @file master-playlist-controller.js\n */\n\nvar ABORT_EARLY_BLACKLIST_SECONDS = 60 * 2;\n\nvar Hls = void 0;\n\n// SegmentLoader stats that need to have each loader's\n// values summed to calculate the final value\nvar loaderStats = ['mediaRequests', 'mediaRequestsAborted', 'mediaRequestsTimedout', 'mediaRequestsErrored', 'mediaTransferDuration', 'mediaBytesTransferred'];\nvar sumLoaderStat = function sumLoaderStat(stat) {\n  return this.audioSegmentLoader_[stat] + this.mainSegmentLoader_[stat];\n};\n\n/**\n * the master playlist controller controller all interactons\n * between playlists and segmentloaders. At this time this mainly\n * involves a master playlist and a series of audio playlists\n * if they are available\n *\n * @class MasterPlaylistController\n * @extends videojs.EventTarget\n */\nvar MasterPlaylistController = function (_videojs$EventTarget) {\n  inherits$1(MasterPlaylistController, _videojs$EventTarget);\n\n  function MasterPlaylistController(options) {\n    classCallCheck$1(this, MasterPlaylistController);\n\n    var _this = possibleConstructorReturn$1(this, (MasterPlaylistController.__proto__ || Object.getPrototypeOf(MasterPlaylistController)).call(this));\n\n    var url = options.url,\n        withCredentials = options.withCredentials,\n        tech = options.tech,\n        bandwidth = options.bandwidth,\n        externHls = options.externHls,\n        useCueTags = options.useCueTags,\n        blacklistDuration = options.blacklistDuration,\n        enableLowInitialPlaylist = options.enableLowInitialPlaylist,\n        sourceType = options.sourceType,\n        seekTo = options.seekTo;\n\n    if (!url) {\n      throw new Error('A non-empty playlist URL is required');\n    }\n\n    Hls = externHls;\n\n    _this.withCredentials = withCredentials;\n    _this.tech_ = tech;\n    _this.hls_ = tech.hls;\n    _this.seekTo_ = seekTo;\n    _this.sourceType_ = sourceType;\n    _this.useCueTags_ = useCueTags;\n    _this.blacklistDuration = blacklistDuration;\n    _this.enableLowInitialPlaylist = enableLowInitialPlaylist;\n    if (_this.useCueTags_) {\n      _this.cueTagsTrack_ = _this.tech_.addTextTrack('metadata', 'ad-cues');\n      _this.cueTagsTrack_.inBandMetadataTrackDispatchType = '';\n    }\n\n    _this.requestOptions_ = {\n      withCredentials: _this.withCredentials,\n      timeout: null\n    };\n\n    _this.mediaTypes_ = createMediaTypes();\n\n    _this.mediaSource = new videojs$1.MediaSource();\n\n    // load the media source into the player\n    _this.mediaSource.addEventListener('sourceopen', _this.handleSourceOpen_.bind(_this));\n\n    _this.seekable_ = videojs$1.createTimeRanges();\n    _this.hasPlayed_ = function () {\n      return false;\n    };\n\n    _this.syncController_ = new SyncController(options);\n    _this.segmentMetadataTrack_ = tech.addRemoteTextTrack({\n      kind: 'metadata',\n      label: 'segment-metadata'\n    }, false).track;\n\n    _this.decrypter_ = new Decrypter$1();\n    _this.inbandTextTracks_ = {};\n\n    var segmentLoaderSettings = {\n      hls: _this.hls_,\n      mediaSource: _this.mediaSource,\n      currentTime: _this.tech_.currentTime.bind(_this.tech_),\n      seekable: function seekable$$1() {\n        return _this.seekable();\n      },\n      seeking: function seeking() {\n        return _this.tech_.seeking();\n      },\n      duration: function duration$$1() {\n        return _this.mediaSource.duration;\n      },\n      hasPlayed: function hasPlayed() {\n        return _this.hasPlayed_();\n      },\n      goalBufferLength: function goalBufferLength() {\n        return _this.goalBufferLength();\n      },\n      bandwidth: bandwidth,\n      syncController: _this.syncController_,\n      decrypter: _this.decrypter_,\n      sourceType: _this.sourceType_,\n      inbandTextTracks: _this.inbandTextTracks_\n    };\n\n    _this.masterPlaylistLoader_ = _this.sourceType_ === 'dash' ? new DashPlaylistLoader(url, _this.hls_, _this.withCredentials) : new PlaylistLoader(url, _this.hls_, _this.withCredentials);\n    _this.setupMasterPlaylistLoaderListeners_();\n\n    // setup segment loaders\n    // combined audio/video or just video when alternate audio track is selected\n    _this.mainSegmentLoader_ = new SegmentLoader(videojs$1.mergeOptions(segmentLoaderSettings, {\n      segmentMetadataTrack: _this.segmentMetadataTrack_,\n      loaderType: 'main'\n    }), options);\n\n    // alternate audio track\n    _this.audioSegmentLoader_ = new SegmentLoader(videojs$1.mergeOptions(segmentLoaderSettings, {\n      loaderType: 'audio'\n    }), options);\n\n    _this.subtitleSegmentLoader_ = new VTTSegmentLoader(videojs$1.mergeOptions(segmentLoaderSettings, {\n      loaderType: 'vtt'\n    }), options);\n\n    _this.setupSegmentLoaderListeners_();\n\n    // Create SegmentLoader stat-getters\n    loaderStats.forEach(function (stat) {\n      _this[stat + '_'] = sumLoaderStat.bind(_this, stat);\n    });\n\n    _this.logger_ = logger('MPC');\n\n    _this.masterPlaylistLoader_.load();\n    return _this;\n  }\n\n  /**\n   * Register event handlers on the master playlist loader. A helper\n   * function for construction time.\n   *\n   * @private\n   */\n\n  createClass$1(MasterPlaylistController, [{\n    key: 'setupMasterPlaylistLoaderListeners_',\n    value: function setupMasterPlaylistLoaderListeners_() {\n      var _this2 = this;\n\n      this.masterPlaylistLoader_.on('loadedmetadata', function () {\n        var media = _this2.masterPlaylistLoader_.media();\n        var requestTimeout = _this2.masterPlaylistLoader_.targetDuration * 1.5 * 1000;\n\n        // If we don't have any more available playlists, we don't want to\n        // timeout the request.\n        if (isLowestEnabledRendition(_this2.masterPlaylistLoader_.master, _this2.masterPlaylistLoader_.media())) {\n          _this2.requestOptions_.timeout = 0;\n        } else {\n          _this2.requestOptions_.timeout = requestTimeout;\n        }\n\n        // if this isn't a live video and preload permits, start\n        // downloading segments\n        if (media.endList && _this2.tech_.preload() !== 'none') {\n          _this2.mainSegmentLoader_.playlist(media, _this2.requestOptions_);\n          _this2.mainSegmentLoader_.load();\n        }\n\n        setupMediaGroups({\n          sourceType: _this2.sourceType_,\n          segmentLoaders: {\n            AUDIO: _this2.audioSegmentLoader_,\n            SUBTITLES: _this2.subtitleSegmentLoader_,\n            main: _this2.mainSegmentLoader_\n          },\n          tech: _this2.tech_,\n          requestOptions: _this2.requestOptions_,\n          masterPlaylistLoader: _this2.masterPlaylistLoader_,\n          hls: _this2.hls_,\n          master: _this2.master(),\n          mediaTypes: _this2.mediaTypes_,\n          blacklistCurrentPlaylist: _this2.blacklistCurrentPlaylist.bind(_this2)\n        });\n\n        _this2.triggerPresenceUsage_(_this2.master(), media);\n\n        try {\n          _this2.setupSourceBuffers_();\n        } catch (e) {\n          videojs$1.log.warn('Failed to create SourceBuffers', e);\n          return _this2.mediaSource.endOfStream('decode');\n        }\n        _this2.setupFirstPlay();\n\n        _this2.trigger('selectedinitialmedia');\n      });\n\n      this.masterPlaylistLoader_.on('loadedplaylist', function () {\n        var updatedPlaylist = _this2.masterPlaylistLoader_.media();\n\n        if (!updatedPlaylist) {\n          // blacklist any variants that are not supported by the browser before selecting\n          // an initial media as the playlist selectors do not consider browser support\n          _this2.excludeUnsupportedVariants_();\n\n          var selectedMedia = void 0;\n\n          if (_this2.enableLowInitialPlaylist) {\n            selectedMedia = _this2.selectInitialPlaylist();\n          }\n\n          if (!selectedMedia) {\n            selectedMedia = _this2.selectPlaylist();\n          }\n\n          _this2.initialMedia_ = selectedMedia;\n          _this2.masterPlaylistLoader_.media(_this2.initialMedia_);\n          return;\n        }\n\n        if (_this2.useCueTags_) {\n          _this2.updateAdCues_(updatedPlaylist);\n        }\n\n        // TODO: Create a new event on the PlaylistLoader that signals\n        // that the segments have changed in some way and use that to\n        // update the SegmentLoader instead of doing it twice here and\n        // on `mediachange`\n        _this2.mainSegmentLoader_.playlist(updatedPlaylist, _this2.requestOptions_);\n        _this2.updateDuration();\n\n        // If the player isn't paused, ensure that the segment loader is running,\n        // as it is possible that it was temporarily stopped while waiting for\n        // a playlist (e.g., in case the playlist errored and we re-requested it).\n        if (!_this2.tech_.paused()) {\n          _this2.mainSegmentLoader_.load();\n          if (_this2.audioSegmentLoader_) {\n            _this2.audioSegmentLoader_.load();\n          }\n        }\n\n        if (!updatedPlaylist.endList) {\n          var addSeekableRange = function addSeekableRange() {\n            var seekable$$1 = _this2.seekable();\n\n            if (seekable$$1.length !== 0) {\n              _this2.mediaSource.addSeekableRange_(seekable$$1.start(0), seekable$$1.end(0));\n            }\n          };\n\n          if (_this2.duration() !== Infinity) {\n            var onDurationchange = function onDurationchange() {\n              if (_this2.duration() === Infinity) {\n                addSeekableRange();\n              } else {\n                _this2.tech_.one('durationchange', onDurationchange);\n              }\n            };\n\n            _this2.tech_.one('durationchange', onDurationchange);\n          } else {\n            addSeekableRange();\n          }\n        }\n      });\n\n      this.masterPlaylistLoader_.on('error', function () {\n        _this2.blacklistCurrentPlaylist(_this2.masterPlaylistLoader_.error);\n      });\n\n      this.masterPlaylistLoader_.on('mediachanging', function () {\n        _this2.mainSegmentLoader_.abort();\n        _this2.mainSegmentLoader_.pause();\n      });\n\n      this.masterPlaylistLoader_.on('mediachange', function () {\n        var media = _this2.masterPlaylistLoader_.media();\n        var requestTimeout = _this2.masterPlaylistLoader_.targetDuration * 1.5 * 1000;\n\n        // If we don't have any more available playlists, we don't want to\n        // timeout the request.\n        if (isLowestEnabledRendition(_this2.masterPlaylistLoader_.master, _this2.masterPlaylistLoader_.media())) {\n          _this2.requestOptions_.timeout = 0;\n        } else {\n          _this2.requestOptions_.timeout = requestTimeout;\n        }\n\n        // TODO: Create a new event on the PlaylistLoader that signals\n        // that the segments have changed in some way and use that to\n        // update the SegmentLoader instead of doing it twice here and\n        // on `loadedplaylist`\n        _this2.mainSegmentLoader_.playlist(media, _this2.requestOptions_);\n\n        _this2.mainSegmentLoader_.load();\n\n        _this2.tech_.trigger({\n          type: 'mediachange',\n          bubbles: true\n        });\n      });\n\n      this.masterPlaylistLoader_.on('playlistunchanged', function () {\n        var updatedPlaylist = _this2.masterPlaylistLoader_.media();\n        var playlistOutdated = _this2.stuckAtPlaylistEnd_(updatedPlaylist);\n\n        if (playlistOutdated) {\n          // Playlist has stopped updating and we're stuck at its end. Try to\n          // blacklist it and switch to another playlist in the hope that that\n          // one is updating (and give the player a chance to re-adjust to the\n          // safe live point).\n          _this2.blacklistCurrentPlaylist({\n            message: 'Playlist no longer updating.'\n          });\n          // useful for monitoring QoS\n          _this2.tech_.trigger('playliststuck');\n        }\n      });\n\n      this.masterPlaylistLoader_.on('renditiondisabled', function () {\n        _this2.tech_.trigger({ type: 'usage', name: 'hls-rendition-disabled' });\n      });\n      this.masterPlaylistLoader_.on('renditionenabled', function () {\n        _this2.tech_.trigger({ type: 'usage', name: 'hls-rendition-enabled' });\n      });\n    }\n\n    /**\n     * A helper function for triggerring presence usage events once per source\n     *\n     * @private\n     */\n\n  }, {\n    key: 'triggerPresenceUsage_',\n    value: function triggerPresenceUsage_(master, media) {\n      var mediaGroups = master.mediaGroups || {};\n      var defaultDemuxed = true;\n      var audioGroupKeys = Object.keys(mediaGroups.AUDIO);\n\n      for (var mediaGroup in mediaGroups.AUDIO) {\n        for (var label in mediaGroups.AUDIO[mediaGroup]) {\n          var properties = mediaGroups.AUDIO[mediaGroup][label];\n\n          if (!properties.uri) {\n            defaultDemuxed = false;\n          }\n        }\n      }\n\n      if (defaultDemuxed) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-demuxed' });\n      }\n\n      if (Object.keys(mediaGroups.SUBTITLES).length) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-webvtt' });\n      }\n\n      if (Hls.Playlist.isAes(media)) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-aes' });\n      }\n\n      if (Hls.Playlist.isFmp4(media)) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-fmp4' });\n      }\n\n      if (audioGroupKeys.length && Object.keys(mediaGroups.AUDIO[audioGroupKeys[0]]).length > 1) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-alternate-audio' });\n      }\n\n      if (this.useCueTags_) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-playlist-cue-tags' });\n      }\n    }\n    /**\n     * Register event handlers on the segment loaders. A helper function\n     * for construction time.\n     *\n     * @private\n     */\n\n  }, {\n    key: 'setupSegmentLoaderListeners_',\n    value: function setupSegmentLoaderListeners_() {\n      var _this3 = this;\n\n      this.mainSegmentLoader_.on('bandwidthupdate', function () {\n        var nextPlaylist = _this3.selectPlaylist();\n        var currentPlaylist = _this3.masterPlaylistLoader_.media();\n        var buffered = _this3.tech_.buffered();\n        var forwardBuffer = buffered.length ? buffered.end(buffered.length - 1) - _this3.tech_.currentTime() : 0;\n\n        var bufferLowWaterLine = _this3.bufferLowWaterLine();\n\n        // If the playlist is live, then we want to not take low water line into account.\n        // This is because in LIVE, the player plays 3 segments from the end of the\n        // playlist, and if `BUFFER_LOW_WATER_LINE` is greater than the duration availble\n        // in those segments, a viewer will never experience a rendition upswitch.\n        if (!currentPlaylist.endList ||\n        // For the same reason as LIVE, we ignore the low water line when the VOD\n        // duration is below the max potential low water line\n        _this3.duration() < Config.MAX_BUFFER_LOW_WATER_LINE ||\n        // we want to switch down to lower resolutions quickly to continue playback, but\n        nextPlaylist.attributes.BANDWIDTH < currentPlaylist.attributes.BANDWIDTH ||\n        // ensure we have some buffer before we switch up to prevent us running out of\n        // buffer while loading a higher rendition.\n        forwardBuffer >= bufferLowWaterLine) {\n          _this3.masterPlaylistLoader_.media(nextPlaylist);\n        }\n\n        _this3.tech_.trigger('bandwidthupdate');\n      });\n      this.mainSegmentLoader_.on('progress', function () {\n        _this3.trigger('progress');\n      });\n\n      this.mainSegmentLoader_.on('error', function () {\n        _this3.blacklistCurrentPlaylist(_this3.mainSegmentLoader_.error());\n      });\n\n      this.mainSegmentLoader_.on('syncinfoupdate', function () {\n        _this3.onSyncInfoUpdate_();\n      });\n\n      this.mainSegmentLoader_.on('timestampoffset', function () {\n        _this3.tech_.trigger({ type: 'usage', name: 'hls-timestamp-offset' });\n      });\n      this.audioSegmentLoader_.on('syncinfoupdate', function () {\n        _this3.onSyncInfoUpdate_();\n      });\n\n      this.mainSegmentLoader_.on('ended', function () {\n        _this3.onEndOfStream();\n      });\n\n      this.mainSegmentLoader_.on('earlyabort', function () {\n        _this3.blacklistCurrentPlaylist({\n          message: 'Aborted early because there isn\\'t enough bandwidth to complete the ' + 'request without rebuffering.'\n        }, ABORT_EARLY_BLACKLIST_SECONDS);\n      });\n\n      this.mainSegmentLoader_.on('reseteverything', function () {\n        // If playing an MTS stream, a videojs.MediaSource is listening for\n        // hls-reset to reset caption parsing state in the transmuxer\n        _this3.tech_.trigger('hls-reset');\n      });\n\n      this.mainSegmentLoader_.on('segmenttimemapping', function (event) {\n        // If playing an MTS stream in html, a videojs.MediaSource is listening for\n        // hls-segment-time-mapping update its internal mapping of stream to display time\n        _this3.tech_.trigger({\n          type: 'hls-segment-time-mapping',\n          mapping: event.mapping\n        });\n      });\n\n      this.audioSegmentLoader_.on('ended', function () {\n        _this3.onEndOfStream();\n      });\n    }\n  }, {\n    key: 'mediaSecondsLoaded_',\n    value: function mediaSecondsLoaded_() {\n      return Math.max(this.audioSegmentLoader_.mediaSecondsLoaded + this.mainSegmentLoader_.mediaSecondsLoaded);\n    }\n\n    /**\n     * Call load on our SegmentLoaders\n     */\n\n  }, {\n    key: 'load',\n    value: function load() {\n      this.mainSegmentLoader_.load();\n      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n        this.audioSegmentLoader_.load();\n      }\n      if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {\n        this.subtitleSegmentLoader_.load();\n      }\n    }\n\n    /**\n     * Re-tune playback quality level for the current player\n     * conditions without performing destructive actions, like\n     * removing already buffered content\n     *\n     * @private\n     */\n\n  }, {\n    key: 'smoothQualityChange_',\n    value: function smoothQualityChange_() {\n      var media = this.selectPlaylist();\n\n      if (media !== this.masterPlaylistLoader_.media()) {\n        this.masterPlaylistLoader_.media(media);\n\n        this.mainSegmentLoader_.resetLoader();\n        // don't need to reset audio as it is reset when media changes\n      }\n    }\n\n    /**\n     * Re-tune playback quality level for the current player\n     * conditions. This method will perform destructive actions like removing\n     * already buffered content in order to readjust the currently active\n     * playlist quickly. This is good for manual quality changes\n     *\n     * @private\n     */\n\n  }, {\n    key: 'fastQualityChange_',\n    value: function fastQualityChange_() {\n      var _this4 = this;\n\n      var media = this.selectPlaylist();\n\n      if (media === this.masterPlaylistLoader_.media()) {\n        return;\n      }\n\n      this.masterPlaylistLoader_.media(media);\n\n      // delete all buffered data to allow an immediate quality switch, then seek\n      // in place to give the browser a kick to remove any cached frames from the\n      // previous rendition\n      this.mainSegmentLoader_.resetEverything(function () {\n        // Since this is not a typical seek, we avoid the seekTo method which can cause\n        // segments from the previously enabled rendition to load before the new playlist\n        // has finished loading\n        _this4.tech_.setCurrentTime(_this4.tech_.currentTime());\n      });\n\n      // don't need to reset audio as it is reset when media changes\n    }\n\n    /**\n     * Begin playback.\n     */\n\n  }, {\n    key: 'play',\n    value: function play() {\n      if (this.setupFirstPlay()) {\n        return;\n      }\n\n      if (this.tech_.ended()) {\n        this.seekTo_(0);\n      }\n\n      if (this.hasPlayed_()) {\n        this.load();\n      }\n\n      var seekable$$1 = this.tech_.seekable();\n\n      // if the viewer has paused and we fell out of the live window,\n      // seek forward to the live point\n      if (this.tech_.duration() === Infinity) {\n        if (this.tech_.currentTime() < seekable$$1.start(0)) {\n          return this.seekTo_(seekable$$1.end(seekable$$1.length - 1));\n        }\n      }\n    }\n\n    /**\n     * Seek to the latest media position if this is a live video and the\n     * player and video are loaded and initialized.\n     */\n\n  }, {\n    key: 'setupFirstPlay',\n    value: function setupFirstPlay() {\n      var _this5 = this;\n\n      var media = this.masterPlaylistLoader_.media();\n\n      // Check that everything is ready to begin buffering for the first call to play\n      //  If 1) there is no active media\n      //     2) the player is paused\n      //     3) the first play has already been setup\n      // then exit early\n      if (!media || this.tech_.paused() || this.hasPlayed_()) {\n        return false;\n      }\n\n      // when the video is a live stream\n      if (!media.endList) {\n        var seekable$$1 = this.seekable();\n\n        if (!seekable$$1.length) {\n          // without a seekable range, the player cannot seek to begin buffering at the live\n          // point\n          return false;\n        }\n\n        if (videojs$1.browser.IE_VERSION && this.tech_.readyState() === 0) {\n          // IE11 throws an InvalidStateError if you try to set currentTime while the\n          // readyState is 0, so it must be delayed until the tech fires loadedmetadata.\n          this.tech_.one('loadedmetadata', function () {\n            _this5.trigger('firstplay');\n            _this5.seekTo_(seekable$$1.end(0));\n            _this5.hasPlayed_ = function () {\n              return true;\n            };\n          });\n\n          return false;\n        }\n\n        // trigger firstplay to inform the source handler to ignore the next seek event\n        this.trigger('firstplay');\n        // seek to the live point\n        this.seekTo_(seekable$$1.end(0));\n      }\n\n      this.hasPlayed_ = function () {\n        return true;\n      };\n      // we can begin loading now that everything is ready\n      this.load();\n      return true;\n    }\n\n    /**\n     * handle the sourceopen event on the MediaSource\n     *\n     * @private\n     */\n\n  }, {\n    key: 'handleSourceOpen_',\n    value: function handleSourceOpen_() {\n      // Only attempt to create the source buffer if none already exist.\n      // handleSourceOpen is also called when we are \"re-opening\" a source buffer\n      // after `endOfStream` has been called (in response to a seek for instance)\n      try {\n        this.setupSourceBuffers_();\n      } catch (e) {\n        videojs$1.log.warn('Failed to create Source Buffers', e);\n        return this.mediaSource.endOfStream('decode');\n      }\n\n      // if autoplay is enabled, begin playback. This is duplicative of\n      // code in video.js but is required because play() must be invoked\n      // *after* the media source has opened.\n      if (this.tech_.autoplay()) {\n        var playPromise = this.tech_.play();\n\n        // Catch/silence error when a pause interrupts a play request\n        // on browsers which return a promise\n        if (typeof playPromise !== 'undefined' && typeof playPromise.then === 'function') {\n          playPromise.then(null, function (e) {});\n        }\n      }\n\n      this.trigger('sourceopen');\n    }\n\n    /**\n     * Calls endOfStream on the media source when all active stream types have called\n     * endOfStream\n     *\n     * @param {string} streamType\n     *        Stream type of the segment loader that called endOfStream\n     * @private\n     */\n\n  }, {\n    key: 'onEndOfStream',\n    value: function onEndOfStream() {\n      var isEndOfStream = this.mainSegmentLoader_.ended_;\n\n      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n        // if the audio playlist loader exists, then alternate audio is active\n        if (!this.mainSegmentLoader_.startingMedia_ || this.mainSegmentLoader_.startingMedia_.containsVideo) {\n          // if we do not know if the main segment loader contains video yet or if we\n          // definitively know the main segment loader contains video, then we need to wait\n          // for both main and audio segment loaders to call endOfStream\n          isEndOfStream = isEndOfStream && this.audioSegmentLoader_.ended_;\n        } else {\n          // otherwise just rely on the audio loader\n          isEndOfStream = this.audioSegmentLoader_.ended_;\n        }\n      }\n\n      if (isEndOfStream) {\n        this.mediaSource.endOfStream();\n      }\n    }\n\n    /**\n     * Check if a playlist has stopped being updated\n     * @param {Object} playlist the media playlist object\n     * @return {boolean} whether the playlist has stopped being updated or not\n     */\n\n  }, {\n    key: 'stuckAtPlaylistEnd_',\n    value: function stuckAtPlaylistEnd_(playlist) {\n      var seekable$$1 = this.seekable();\n\n      if (!seekable$$1.length) {\n        // playlist doesn't have enough information to determine whether we are stuck\n        return false;\n      }\n\n      var expired = this.syncController_.getExpiredTime(playlist, this.mediaSource.duration);\n\n      if (expired === null) {\n        return false;\n      }\n\n      // does not use the safe live end to calculate playlist end, since we\n      // don't want to say we are stuck while there is still content\n      var absolutePlaylistEnd = Hls.Playlist.playlistEnd(playlist, expired);\n      var currentTime = this.tech_.currentTime();\n      var buffered = this.tech_.buffered();\n\n      if (!buffered.length) {\n        // return true if the playhead reached the absolute end of the playlist\n        return absolutePlaylistEnd - currentTime <= SAFE_TIME_DELTA;\n      }\n      var bufferedEnd = buffered.end(buffered.length - 1);\n\n      // return true if there is too little buffer left and buffer has reached absolute\n      // end of playlist\n      return bufferedEnd - currentTime <= SAFE_TIME_DELTA && absolutePlaylistEnd - bufferedEnd <= SAFE_TIME_DELTA;\n    }\n\n    /**\n     * Blacklists a playlist when an error occurs for a set amount of time\n     * making it unavailable for selection by the rendition selection algorithm\n     * and then forces a new playlist (rendition) selection.\n     *\n     * @param {Object=} error an optional error that may include the playlist\n     * to blacklist\n     * @param {Number=} blacklistDuration an optional number of seconds to blacklist the\n     * playlist\n     */\n\n  }, {\n    key: 'blacklistCurrentPlaylist',\n    value: function blacklistCurrentPlaylist() {\n      var error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var blacklistDuration = arguments[1];\n\n      var currentPlaylist = void 0;\n      var nextPlaylist = void 0;\n\n      // If the `error` was generated by the playlist loader, it will contain\n      // the playlist we were trying to load (but failed) and that should be\n      // blacklisted instead of the currently selected playlist which is likely\n      // out-of-date in this scenario\n      currentPlaylist = error.playlist || this.masterPlaylistLoader_.media();\n\n      blacklistDuration = blacklistDuration || error.blacklistDuration || this.blacklistDuration;\n\n      // If there is no current playlist, then an error occurred while we were\n      // trying to load the master OR while we were disposing of the tech\n      if (!currentPlaylist) {\n        this.error = error;\n\n        try {\n          return this.mediaSource.endOfStream('network');\n        } catch (e) {\n          return this.trigger('error');\n        }\n      }\n\n      var isFinalRendition = this.masterPlaylistLoader_.master.playlists.filter(isEnabled).length === 1;\n\n      if (isFinalRendition) {\n        // Never blacklisting this playlist because it's final rendition\n        videojs$1.log.warn('Problem encountered with the current ' + 'HLS playlist. Trying again since it is the final playlist.');\n\n        this.tech_.trigger('retryplaylist');\n        return this.masterPlaylistLoader_.load(isFinalRendition);\n      }\n      // Blacklist this playlist\n      currentPlaylist.excludeUntil = Date.now() + blacklistDuration * 1000;\n      this.tech_.trigger('blacklistplaylist');\n      this.tech_.trigger({ type: 'usage', name: 'hls-rendition-blacklisted' });\n\n      // Select a new playlist\n      nextPlaylist = this.selectPlaylist();\n      videojs$1.log.warn('Problem encountered with the current HLS playlist.' + (error.message ? ' ' + error.message : '') + ' Switching to another playlist.');\n\n      return this.masterPlaylistLoader_.media(nextPlaylist);\n    }\n\n    /**\n     * Pause all segment loaders\n     */\n\n  }, {\n    key: 'pauseLoading',\n    value: function pauseLoading() {\n      this.mainSegmentLoader_.pause();\n      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n        this.audioSegmentLoader_.pause();\n      }\n      if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {\n        this.subtitleSegmentLoader_.pause();\n      }\n    }\n\n    /**\n     * set the current time on all segment loaders\n     *\n     * @param {TimeRange} currentTime the current time to set\n     * @return {TimeRange} the current time\n     */\n\n  }, {\n    key: 'setCurrentTime',\n    value: function setCurrentTime(currentTime) {\n      var buffered = findRange(this.tech_.buffered(), currentTime);\n\n      if (!(this.masterPlaylistLoader_ && this.masterPlaylistLoader_.media())) {\n        // return immediately if the metadata is not ready yet\n        return 0;\n      }\n\n      // it's clearly an edge-case but don't thrown an error if asked to\n      // seek within an empty playlist\n      if (!this.masterPlaylistLoader_.media().segments) {\n        return 0;\n      }\n\n      // In flash playback, the segment loaders should be reset on every seek, even\n      // in buffer seeks. If the seek location is already buffered, continue buffering as\n      // usual\n      // TODO: redo this comment\n      if (buffered && buffered.length) {\n        return currentTime;\n      }\n\n      // cancel outstanding requests so we begin buffering at the new\n      // location\n      this.mainSegmentLoader_.resetEverything();\n      this.mainSegmentLoader_.abort();\n      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n        this.audioSegmentLoader_.resetEverything();\n        this.audioSegmentLoader_.abort();\n      }\n      if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {\n        this.subtitleSegmentLoader_.resetEverything();\n        this.subtitleSegmentLoader_.abort();\n      }\n\n      // start segment loader loading in case they are paused\n      this.load();\n    }\n\n    /**\n     * get the current duration\n     *\n     * @return {TimeRange} the duration\n     */\n\n  }, {\n    key: 'duration',\n    value: function duration$$1() {\n      if (!this.masterPlaylistLoader_) {\n        return 0;\n      }\n\n      if (this.mediaSource) {\n        return this.mediaSource.duration;\n      }\n\n      return Hls.Playlist.duration(this.masterPlaylistLoader_.media());\n    }\n\n    /**\n     * check the seekable range\n     *\n     * @return {TimeRange} the seekable range\n     */\n\n  }, {\n    key: 'seekable',\n    value: function seekable$$1() {\n      return this.seekable_;\n    }\n  }, {\n    key: 'onSyncInfoUpdate_',\n    value: function onSyncInfoUpdate_() {\n      var mainSeekable = void 0;\n      var audioSeekable = void 0;\n\n      if (!this.masterPlaylistLoader_) {\n        return;\n      }\n\n      var media = this.masterPlaylistLoader_.media();\n\n      if (!media) {\n        return;\n      }\n\n      var expired = this.syncController_.getExpiredTime(media, this.mediaSource.duration);\n\n      if (expired === null) {\n        // not enough information to update seekable\n        return;\n      }\n\n      mainSeekable = Hls.Playlist.seekable(media, expired);\n\n      if (mainSeekable.length === 0) {\n        return;\n      }\n\n      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n        media = this.mediaTypes_.AUDIO.activePlaylistLoader.media();\n        expired = this.syncController_.getExpiredTime(media, this.mediaSource.duration);\n\n        if (expired === null) {\n          return;\n        }\n\n        audioSeekable = Hls.Playlist.seekable(media, expired);\n\n        if (audioSeekable.length === 0) {\n          return;\n        }\n      }\n\n      if (!audioSeekable) {\n        // seekable has been calculated based on buffering video data so it\n        // can be returned directly\n        this.seekable_ = mainSeekable;\n      } else if (audioSeekable.start(0) > mainSeekable.end(0) || mainSeekable.start(0) > audioSeekable.end(0)) {\n        // seekables are pretty far off, rely on main\n        this.seekable_ = mainSeekable;\n      } else {\n        this.seekable_ = videojs$1.createTimeRanges([[audioSeekable.start(0) > mainSeekable.start(0) ? audioSeekable.start(0) : mainSeekable.start(0), audioSeekable.end(0) < mainSeekable.end(0) ? audioSeekable.end(0) : mainSeekable.end(0)]]);\n      }\n\n      this.logger_('seekable updated [' + printableRange(this.seekable_) + ']');\n\n      this.tech_.trigger('seekablechanged');\n    }\n\n    /**\n     * Update the player duration\n     */\n\n  }, {\n    key: 'updateDuration',\n    value: function updateDuration() {\n      var _this6 = this;\n\n      var oldDuration = this.mediaSource.duration;\n      var newDuration = Hls.Playlist.duration(this.masterPlaylistLoader_.media());\n      var buffered = this.tech_.buffered();\n      var setDuration = function setDuration() {\n        _this6.mediaSource.duration = newDuration;\n        _this6.tech_.trigger('durationchange');\n\n        _this6.mediaSource.removeEventListener('sourceopen', setDuration);\n      };\n\n      if (buffered.length > 0) {\n        newDuration = Math.max(newDuration, buffered.end(buffered.length - 1));\n      }\n\n      // if the duration has changed, invalidate the cached value\n      if (oldDuration !== newDuration) {\n        // update the duration\n        if (this.mediaSource.readyState !== 'open') {\n          this.mediaSource.addEventListener('sourceopen', setDuration);\n        } else {\n          setDuration();\n        }\n      }\n    }\n\n    /**\n     * dispose of the MasterPlaylistController and everything\n     * that it controls\n     */\n\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      var _this7 = this;\n\n      this.decrypter_.terminate();\n      this.masterPlaylistLoader_.dispose();\n      this.mainSegmentLoader_.dispose();\n\n      ['AUDIO', 'SUBTITLES'].forEach(function (type) {\n        var groups = _this7.mediaTypes_[type].groups;\n\n        for (var id in groups) {\n          groups[id].forEach(function (group) {\n            if (group.playlistLoader) {\n              group.playlistLoader.dispose();\n            }\n          });\n        }\n      });\n\n      this.audioSegmentLoader_.dispose();\n      this.subtitleSegmentLoader_.dispose();\n    }\n\n    /**\n     * return the master playlist object if we have one\n     *\n     * @return {Object} the master playlist object that we parsed\n     */\n\n  }, {\n    key: 'master',\n    value: function master() {\n      return this.masterPlaylistLoader_.master;\n    }\n\n    /**\n     * return the currently selected playlist\n     *\n     * @return {Object} the currently selected playlist object that we parsed\n     */\n\n  }, {\n    key: 'media',\n    value: function media() {\n      // playlist loader will not return media if it has not been fully loaded\n      return this.masterPlaylistLoader_.media() || this.initialMedia_;\n    }\n\n    /**\n     * setup our internal source buffers on our segment Loaders\n     *\n     * @private\n     */\n\n  }, {\n    key: 'setupSourceBuffers_',\n    value: function setupSourceBuffers_() {\n      var media = this.masterPlaylistLoader_.media();\n      var mimeTypes = void 0;\n\n      // wait until a media playlist is available and the Media Source is\n      // attached\n      if (!media || this.mediaSource.readyState !== 'open') {\n        return;\n      }\n\n      mimeTypes = mimeTypesForPlaylist(this.masterPlaylistLoader_.master, media);\n      if (mimeTypes.length < 1) {\n        this.error = 'No compatible SourceBuffer configuration for the variant stream:' + media.resolvedUri;\n        return this.mediaSource.endOfStream('decode');\n      }\n\n      this.configureLoaderMimeTypes_(mimeTypes);\n      // exclude any incompatible variant streams from future playlist\n      // selection\n      this.excludeIncompatibleVariants_(media);\n    }\n  }, {\n    key: 'configureLoaderMimeTypes_',\n    value: function configureLoaderMimeTypes_(mimeTypes) {\n      // If the content is demuxed, we can't start appending segments to a source buffer\n      // until both source buffers are set up, or else the browser may not let us add the\n      // second source buffer (it will assume we are playing either audio only or video\n      // only).\n      var sourceBufferEmitter =\n      // If there is more than one mime type\n      mimeTypes.length > 1 &&\n      // and the first mime type does not have muxed video and audio\n      mimeTypes[0].indexOf(',') === -1 &&\n      // and the two mime types are different (they can be the same in the case of audio\n      // only with alternate audio)\n      mimeTypes[0] !== mimeTypes[1] ?\n      // then we want to wait on the second source buffer\n      new videojs$1.EventTarget() :\n      // otherwise there is no need to wait as the content is either audio only,\n      // video only, or muxed content.\n      null;\n\n      this.mainSegmentLoader_.mimeType(mimeTypes[0], sourceBufferEmitter);\n      if (mimeTypes[1]) {\n        this.audioSegmentLoader_.mimeType(mimeTypes[1], sourceBufferEmitter);\n      }\n    }\n\n    /**\n     * Blacklists playlists with codecs that are unsupported by the browser.\n     */\n\n  }, {\n    key: 'excludeUnsupportedVariants_',\n    value: function excludeUnsupportedVariants_() {\n      this.master().playlists.forEach(function (variant) {\n        if (variant.attributes.CODECS && window$1.MediaSource && window$1.MediaSource.isTypeSupported && !window$1.MediaSource.isTypeSupported('video/mp4; codecs=\"' + mapLegacyAvcCodecs(variant.attributes.CODECS) + '\"')) {\n          variant.excludeUntil = Infinity;\n        }\n      });\n    }\n\n    /**\n     * Blacklist playlists that are known to be codec or\n     * stream-incompatible with the SourceBuffer configuration. For\n     * instance, Media Source Extensions would cause the video element to\n     * stall waiting for video data if you switched from a variant with\n     * video and audio to an audio-only one.\n     *\n     * @param {Object} media a media playlist compatible with the current\n     * set of SourceBuffers. Variants in the current master playlist that\n     * do not appear to have compatible codec or stream configurations\n     * will be excluded from the default playlist selection algorithm\n     * indefinitely.\n     * @private\n     */\n\n  }, {\n    key: 'excludeIncompatibleVariants_',\n    value: function excludeIncompatibleVariants_(media) {\n      var codecCount = 2;\n      var videoCodec = null;\n      var codecs = void 0;\n\n      if (media.attributes.CODECS) {\n        codecs = parseCodecs(media.attributes.CODECS);\n        videoCodec = codecs.videoCodec;\n        codecCount = codecs.codecCount;\n      }\n\n      this.master().playlists.forEach(function (variant) {\n        var variantCodecs = {\n          codecCount: 2,\n          videoCodec: null\n        };\n\n        if (variant.attributes.CODECS) {\n          variantCodecs = parseCodecs(variant.attributes.CODECS);\n        }\n\n        // if the streams differ in the presence or absence of audio or\n        // video, they are incompatible\n        if (variantCodecs.codecCount !== codecCount) {\n          variant.excludeUntil = Infinity;\n        }\n\n        // if h.264 is specified on the current playlist, some flavor of\n        // it must be specified on all compatible variants\n        if (variantCodecs.videoCodec !== videoCodec) {\n          variant.excludeUntil = Infinity;\n        }\n      });\n    }\n  }, {\n    key: 'updateAdCues_',\n    value: function updateAdCues_(media) {\n      var offset = 0;\n      var seekable$$1 = this.seekable();\n\n      if (seekable$$1.length) {\n        offset = seekable$$1.start(0);\n      }\n\n      updateAdCues(media, this.cueTagsTrack_, offset);\n    }\n\n    /**\n     * Calculates the desired forward buffer length based on current time\n     *\n     * @return {Number} Desired forward buffer length in seconds\n     */\n\n  }, {\n    key: 'goalBufferLength',\n    value: function goalBufferLength() {\n      var currentTime = this.tech_.currentTime();\n      var initial = Config.GOAL_BUFFER_LENGTH;\n      var rate = Config.GOAL_BUFFER_LENGTH_RATE;\n      var max = Math.max(initial, Config.MAX_GOAL_BUFFER_LENGTH);\n\n      return Math.min(initial + currentTime * rate, max);\n    }\n\n    /**\n     * Calculates the desired buffer low water line based on current time\n     *\n     * @return {Number} Desired buffer low water line in seconds\n     */\n\n  }, {\n    key: 'bufferLowWaterLine',\n    value: function bufferLowWaterLine() {\n      var currentTime = this.tech_.currentTime();\n      var initial = Config.BUFFER_LOW_WATER_LINE;\n      var rate = Config.BUFFER_LOW_WATER_LINE_RATE;\n      var max = Math.max(initial, Config.MAX_BUFFER_LOW_WATER_LINE);\n\n      return Math.min(initial + currentTime * rate, max);\n    }\n  }]);\n  return MasterPlaylistController;\n}(videojs$1.EventTarget);\n\n/**\n * Returns a function that acts as the Enable/disable playlist function.\n *\n * @param {PlaylistLoader} loader - The master playlist loader\n * @param {String} playlistUri - uri of the playlist\n * @param {Function} changePlaylistFn - A function to be called after a\n * playlist's enabled-state has been changed. Will NOT be called if a\n * playlist's enabled-state is unchanged\n * @param {Boolean=} enable - Value to set the playlist enabled-state to\n * or if undefined returns the current enabled-state for the playlist\n * @return {Function} Function for setting/getting enabled\n */\nvar enableFunction = function enableFunction(loader, playlistUri, changePlaylistFn) {\n  return function (enable) {\n    var playlist = loader.master.playlists[playlistUri];\n    var incompatible = isIncompatible(playlist);\n    var currentlyEnabled = isEnabled(playlist);\n\n    if (typeof enable === 'undefined') {\n      return currentlyEnabled;\n    }\n\n    if (enable) {\n      delete playlist.disabled;\n    } else {\n      playlist.disabled = true;\n    }\n\n    if (enable !== currentlyEnabled && !incompatible) {\n      // Ensure the outside world knows about our changes\n      changePlaylistFn();\n      if (enable) {\n        loader.trigger('renditionenabled');\n      } else {\n        loader.trigger('renditiondisabled');\n      }\n    }\n    return enable;\n  };\n};\n\n/**\n * The representation object encapsulates the publicly visible information\n * in a media playlist along with a setter/getter-type function (enabled)\n * for changing the enabled-state of a particular playlist entry\n *\n * @class Representation\n */\n\nvar Representation = function Representation(hlsHandler, playlist, id) {\n  classCallCheck$1(this, Representation);\n\n  // Get a reference to a bound version of fastQualityChange_\n  var fastChangeFunction = hlsHandler.masterPlaylistController_.fastQualityChange_.bind(hlsHandler.masterPlaylistController_);\n\n  // some playlist attributes are optional\n  if (playlist.attributes.RESOLUTION) {\n    var resolution = playlist.attributes.RESOLUTION;\n\n    this.width = resolution.width;\n    this.height = resolution.height;\n  }\n\n  this.bandwidth = playlist.attributes.BANDWIDTH;\n\n  // The id is simply the ordinality of the media playlist\n  // within the master playlist\n  this.id = id;\n\n  // Partially-apply the enableFunction to create a playlist-\n  // specific variant\n  this.enabled = enableFunction(hlsHandler.playlists, playlist.uri, fastChangeFunction);\n};\n\n/**\n * A mixin function that adds the `representations` api to an instance\n * of the HlsHandler class\n * @param {HlsHandler} hlsHandler - An instance of HlsHandler to add the\n * representation API into\n */\n\nvar renditionSelectionMixin = function renditionSelectionMixin(hlsHandler) {\n  var playlists = hlsHandler.playlists;\n\n  // Add a single API-specific function to the HlsHandler instance\n  hlsHandler.representations = function () {\n    return playlists.master.playlists.filter(function (media) {\n      return !isIncompatible(media);\n    }).map(function (e, i) {\n      return new Representation(hlsHandler, e, e.uri);\n    });\n  };\n};\n\n/**\n * @file playback-watcher.js\n *\n * Playback starts, and now my watch begins. It shall not end until my death. I shall\n * take no wait, hold no uncleared timeouts, father no bad seeks. I shall wear no crowns\n * and win no glory. I shall live and die at my post. I am the corrector of the underflow.\n * I am the watcher of gaps. I am the shield that guards the realms of seekable. I pledge\n * my life and honor to the Playback Watch, for this Player and all the Players to come.\n */\n\n// Set of events that reset the playback-watcher time check logic and clear the timeout\nvar timerCancelEvents = ['seeking', 'seeked', 'pause', 'playing', 'error'];\n\n/**\n * @class PlaybackWatcher\n */\n\nvar PlaybackWatcher = function () {\n  /**\n   * Represents an PlaybackWatcher object.\n   * @constructor\n   * @param {object} options an object that includes the tech and settings\n   */\n  function PlaybackWatcher(options) {\n    var _this = this;\n\n    classCallCheck$1(this, PlaybackWatcher);\n\n    this.tech_ = options.tech;\n    this.seekable = options.seekable;\n    this.seekTo = options.seekTo;\n\n    this.consecutiveUpdates = 0;\n    this.lastRecordedTime = null;\n    this.timer_ = null;\n    this.checkCurrentTimeTimeout_ = null;\n    this.logger_ = logger('PlaybackWatcher');\n\n    this.logger_('initialize');\n\n    var canPlayHandler = function canPlayHandler() {\n      return _this.monitorCurrentTime_();\n    };\n    var waitingHandler = function waitingHandler() {\n      return _this.techWaiting_();\n    };\n    var cancelTimerHandler = function cancelTimerHandler() {\n      return _this.cancelTimer_();\n    };\n    var fixesBadSeeksHandler = function fixesBadSeeksHandler() {\n      return _this.fixesBadSeeks_();\n    };\n\n    this.tech_.on('seekablechanged', fixesBadSeeksHandler);\n    this.tech_.on('waiting', waitingHandler);\n    this.tech_.on(timerCancelEvents, cancelTimerHandler);\n    this.tech_.on('canplay', canPlayHandler);\n\n    // Define the dispose function to clean up our events\n    this.dispose = function () {\n      _this.logger_('dispose');\n      _this.tech_.off('seekablechanged', fixesBadSeeksHandler);\n      _this.tech_.off('waiting', waitingHandler);\n      _this.tech_.off(timerCancelEvents, cancelTimerHandler);\n      _this.tech_.off('canplay', canPlayHandler);\n      if (_this.checkCurrentTimeTimeout_) {\n        window$1.clearTimeout(_this.checkCurrentTimeTimeout_);\n      }\n      _this.cancelTimer_();\n    };\n  }\n\n  /**\n   * Periodically check current time to see if playback stopped\n   *\n   * @private\n   */\n\n  createClass$1(PlaybackWatcher, [{\n    key: 'monitorCurrentTime_',\n    value: function monitorCurrentTime_() {\n      this.checkCurrentTime_();\n\n      if (this.checkCurrentTimeTimeout_) {\n        window$1.clearTimeout(this.checkCurrentTimeTimeout_);\n      }\n\n      // 42 = 24 fps // 250 is what Webkit uses // FF uses 15\n      this.checkCurrentTimeTimeout_ = window$1.setTimeout(this.monitorCurrentTime_.bind(this), 250);\n    }\n\n    /**\n     * The purpose of this function is to emulate the \"waiting\" event on\n     * browsers that do not emit it when they are waiting for more\n     * data to continue playback\n     *\n     * @private\n     */\n\n  }, {\n    key: 'checkCurrentTime_',\n    value: function checkCurrentTime_() {\n      if (this.tech_.seeking() && this.fixesBadSeeks_()) {\n        this.consecutiveUpdates = 0;\n        this.lastRecordedTime = this.tech_.currentTime();\n        return;\n      }\n\n      if (this.tech_.paused() || this.tech_.seeking()) {\n        return;\n      }\n\n      var currentTime = this.tech_.currentTime();\n      var buffered = this.tech_.buffered();\n\n      if (this.lastRecordedTime === currentTime && (!buffered.length || currentTime + SAFE_TIME_DELTA >= buffered.end(buffered.length - 1))) {\n        // If current time is at the end of the final buffered region, then any playback\n        // stall is most likely caused by buffering in a low bandwidth environment. The tech\n        // should fire a `waiting` event in this scenario, but due to browser and tech\n        // inconsistencies. Calling `techWaiting_` here allows us to simulate\n        // responding to a native `waiting` event when the tech fails to emit one.\n        return this.techWaiting_();\n      }\n\n      if (this.consecutiveUpdates >= 5 && currentTime === this.lastRecordedTime) {\n        this.consecutiveUpdates++;\n        this.waiting_();\n      } else if (currentTime === this.lastRecordedTime) {\n        this.consecutiveUpdates++;\n      } else {\n        this.consecutiveUpdates = 0;\n        this.lastRecordedTime = currentTime;\n      }\n    }\n\n    /**\n     * Cancels any pending timers and resets the 'timeupdate' mechanism\n     * designed to detect that we are stalled\n     *\n     * @private\n     */\n\n  }, {\n    key: 'cancelTimer_',\n    value: function cancelTimer_() {\n      this.consecutiveUpdates = 0;\n\n      if (this.timer_) {\n        this.logger_('cancelTimer_');\n        clearTimeout(this.timer_);\n      }\n\n      this.timer_ = null;\n    }\n\n    /**\n     * Fixes situations where there's a bad seek\n     *\n     * @return {Boolean} whether an action was taken to fix the seek\n     * @private\n     */\n\n  }, {\n    key: 'fixesBadSeeks_',\n    value: function fixesBadSeeks_() {\n      var seeking = this.tech_.seeking();\n      var seekable = this.seekable();\n      var currentTime = this.tech_.currentTime();\n      var seekTo = void 0;\n\n      if (seeking && this.afterSeekableWindow_(seekable, currentTime)) {\n        var seekableEnd = seekable.end(seekable.length - 1);\n\n        // sync to live point (if VOD, our seekable was updated and we're simply adjusting)\n        seekTo = seekableEnd;\n      }\n\n      if (seeking && this.beforeSeekableWindow_(seekable, currentTime)) {\n        var seekableStart = seekable.start(0);\n\n        // sync to the beginning of the live window\n        // provide a buffer of .1 seconds to handle rounding/imprecise numbers\n        seekTo = seekableStart + SAFE_TIME_DELTA;\n      }\n\n      if (typeof seekTo !== 'undefined') {\n        this.logger_('Trying to seek outside of seekable at time ' + currentTime + ' with ' + ('seekable range ' + printableRange(seekable) + '. Seeking to ') + (seekTo + '.'));\n\n        this.seekTo(seekTo);\n        return true;\n      }\n\n      return false;\n    }\n\n    /**\n     * Handler for situations when we determine the player is waiting.\n     *\n     * @private\n     */\n\n  }, {\n    key: 'waiting_',\n    value: function waiting_() {\n      if (this.techWaiting_()) {\n        return;\n      }\n\n      // All tech waiting checks failed. Use last resort correction\n      var currentTime = this.tech_.currentTime();\n      var buffered = this.tech_.buffered();\n      var currentRange = findRange(buffered, currentTime);\n\n      // Sometimes the player can stall for unknown reasons within a contiguous buffered\n      // region with no indication that anything is amiss (seen in Firefox). Seeking to\n      // currentTime is usually enough to kickstart the player. This checks that the player\n      // is currently within a buffered region before attempting a corrective seek.\n      // Chrome does not appear to continue `timeupdate` events after a `waiting` event\n      // until there is ~ 3 seconds of forward buffer available. PlaybackWatcher should also\n      // make sure there is ~3 seconds of forward buffer before taking any corrective action\n      // to avoid triggering an `unknownwaiting` event when the network is slow.\n      if (currentRange.length && currentTime + 3 <= currentRange.end(0)) {\n        this.cancelTimer_();\n        this.seekTo(currentTime);\n\n        this.logger_('Stopped at ' + currentTime + ' while inside a buffered region ' + ('[' + currentRange.start(0) + ' -> ' + currentRange.end(0) + ']. Attempting to resume ') + 'playback by seeking to the current time.');\n\n        // unknown waiting corrections may be useful for monitoring QoS\n        this.tech_.trigger({ type: 'usage', name: 'hls-unknown-waiting' });\n        return;\n      }\n    }\n\n    /**\n     * Handler for situations when the tech fires a `waiting` event\n     *\n     * @return {Boolean}\n     *         True if an action (or none) was needed to correct the waiting. False if no\n     *         checks passed\n     * @private\n     */\n\n  }, {\n    key: 'techWaiting_',\n    value: function techWaiting_() {\n      var seekable = this.seekable();\n      var currentTime = this.tech_.currentTime();\n\n      if (this.tech_.seeking() && this.fixesBadSeeks_()) {\n        // Tech is seeking or bad seek fixed, no action needed\n        return true;\n      }\n\n      if (this.tech_.seeking() || this.timer_ !== null) {\n        // Tech is seeking or already waiting on another action, no action needed\n        return true;\n      }\n\n      if (this.beforeSeekableWindow_(seekable, currentTime)) {\n        var livePoint = seekable.end(seekable.length - 1);\n\n        this.logger_('Fell out of live window at time ' + currentTime + '. Seeking to ' + ('live point (seekable end) ' + livePoint));\n        this.cancelTimer_();\n        this.seekTo(livePoint);\n\n        // live window resyncs may be useful for monitoring QoS\n        this.tech_.trigger({ type: 'usage', name: 'hls-live-resync' });\n        return true;\n      }\n\n      var buffered = this.tech_.buffered();\n      var nextRange = findNextRange(buffered, currentTime);\n\n      if (this.videoUnderflow_(nextRange, buffered, currentTime)) {\n        // Even though the video underflowed and was stuck in a gap, the audio overplayed\n        // the gap, leading currentTime into a buffered range. Seeking to currentTime\n        // allows the video to catch up to the audio position without losing any audio\n        // (only suffering ~3 seconds of frozen video and a pause in audio playback).\n        this.cancelTimer_();\n        this.seekTo(currentTime);\n\n        // video underflow may be useful for monitoring QoS\n        this.tech_.trigger({ type: 'usage', name: 'hls-video-underflow' });\n        return true;\n      }\n\n      // check for gap\n      if (nextRange.length > 0) {\n        var difference = nextRange.start(0) - currentTime;\n\n        this.logger_('Stopped at ' + currentTime + ', setting timer for ' + difference + ', seeking ' + ('to ' + nextRange.start(0)));\n\n        this.timer_ = setTimeout(this.skipTheGap_.bind(this), difference * 1000, currentTime);\n        return true;\n      }\n\n      // All checks failed. Returning false to indicate failure to correct waiting\n      return false;\n    }\n  }, {\n    key: 'afterSeekableWindow_',\n    value: function afterSeekableWindow_(seekable, currentTime) {\n      if (!seekable.length) {\n        // we can't make a solid case if there's no seekable, default to false\n        return false;\n      }\n\n      if (currentTime > seekable.end(seekable.length - 1) + SAFE_TIME_DELTA) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: 'beforeSeekableWindow_',\n    value: function beforeSeekableWindow_(seekable, currentTime) {\n      if (seekable.length &&\n      // can't fall before 0 and 0 seekable start identifies VOD stream\n      seekable.start(0) > 0 && currentTime < seekable.start(0) - SAFE_TIME_DELTA) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: 'videoUnderflow_',\n    value: function videoUnderflow_(nextRange, buffered, currentTime) {\n      if (nextRange.length === 0) {\n        // Even if there is no available next range, there is still a possibility we are\n        // stuck in a gap due to video underflow.\n        var gap = this.gapFromVideoUnderflow_(buffered, currentTime);\n\n        if (gap) {\n          this.logger_('Encountered a gap in video from ' + gap.start + ' to ' + gap.end + '. ' + ('Seeking to current time ' + currentTime));\n\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    /**\n     * Timer callback. If playback still has not proceeded, then we seek\n     * to the start of the next buffered region.\n     *\n     * @private\n     */\n\n  }, {\n    key: 'skipTheGap_',\n    value: function skipTheGap_(scheduledCurrentTime) {\n      var buffered = this.tech_.buffered();\n      var currentTime = this.tech_.currentTime();\n      var nextRange = findNextRange(buffered, currentTime);\n\n      this.cancelTimer_();\n\n      if (nextRange.length === 0 || currentTime !== scheduledCurrentTime) {\n        return;\n      }\n\n      this.logger_('skipTheGap_:', 'currentTime:', currentTime, 'scheduled currentTime:', scheduledCurrentTime, 'nextRange start:', nextRange.start(0));\n\n      // only seek if we still have not played\n      this.seekTo(nextRange.start(0) + TIME_FUDGE_FACTOR);\n\n      this.tech_.trigger({ type: 'usage', name: 'hls-gap-skip' });\n    }\n  }, {\n    key: 'gapFromVideoUnderflow_',\n    value: function gapFromVideoUnderflow_(buffered, currentTime) {\n      // At least in Chrome, if there is a gap in the video buffer, the audio will continue\n      // playing for ~3 seconds after the video gap starts. This is done to account for\n      // video buffer underflow/underrun (note that this is not done when there is audio\n      // buffer underflow/underrun -- in that case the video will stop as soon as it\n      // encounters the gap, as audio stalls are more noticeable/jarring to a user than\n      // video stalls). The player's time will reflect the playthrough of audio, so the\n      // time will appear as if we are in a buffered region, even if we are stuck in a\n      // \"gap.\"\n      //\n      // Example:\n      // video buffer:   0 => 10.1, 10.2 => 20\n      // audio buffer:   0 => 20\n      // overall buffer: 0 => 10.1, 10.2 => 20\n      // current time: 13\n      //\n      // Chrome's video froze at 10 seconds, where the video buffer encountered the gap,\n      // however, the audio continued playing until it reached ~3 seconds past the gap\n      // (13 seconds), at which point it stops as well. Since current time is past the\n      // gap, findNextRange will return no ranges.\n      //\n      // To check for this issue, we see if there is a gap that starts somewhere within\n      // a 3 second range (3 seconds +/- 1 second) back from our current time.\n      var gaps = findGaps(buffered);\n\n      for (var i = 0; i < gaps.length; i++) {\n        var start = gaps.start(i);\n        var end = gaps.end(i);\n\n        // gap is starts no more than 4 seconds back\n        if (currentTime - start < 4 && currentTime - start > 2) {\n          return {\n            start: start,\n            end: end\n          };\n        }\n      }\n\n      return null;\n    }\n  }]);\n  return PlaybackWatcher;\n}();\n\nvar defaultOptions = {\n  errorInterval: 30,\n  getSource: function getSource(next) {\n    var tech = this.tech({ IWillNotUseThisInPlugins: true });\n    var sourceObj = tech.currentSource_;\n\n    return next(sourceObj);\n  }\n};\n\n/**\n * Main entry point for the plugin\n *\n * @param {Player} player a reference to a videojs Player instance\n * @param {Object} [options] an object with plugin options\n * @private\n */\nvar initPlugin = function initPlugin(player, options) {\n  var lastCalled = 0;\n  var seekTo = 0;\n  var localOptions = videojs$1.mergeOptions(defaultOptions, options);\n\n  player.ready(function () {\n    player.trigger({ type: 'usage', name: 'hls-error-reload-initialized' });\n  });\n\n  /**\n   * Player modifications to perform that must wait until `loadedmetadata`\n   * has been triggered\n   *\n   * @private\n   */\n  var loadedMetadataHandler = function loadedMetadataHandler() {\n    if (seekTo) {\n      player.currentTime(seekTo);\n    }\n  };\n\n  /**\n   * Set the source on the player element, play, and seek if necessary\n   *\n   * @param {Object} sourceObj An object specifying the source url and mime-type to play\n   * @private\n   */\n  var setSource = function setSource(sourceObj) {\n    if (sourceObj === null || sourceObj === undefined) {\n      return;\n    }\n    seekTo = player.duration() !== Infinity && player.currentTime() || 0;\n\n    player.one('loadedmetadata', loadedMetadataHandler);\n\n    player.src(sourceObj);\n    player.trigger({ type: 'usage', name: 'hls-error-reload' });\n    player.play();\n  };\n\n  /**\n   * Attempt to get a source from either the built-in getSource function\n   * or a custom function provided via the options\n   *\n   * @private\n   */\n  var errorHandler = function errorHandler() {\n    // Do not attempt to reload the source if a source-reload occurred before\n    // 'errorInterval' time has elapsed since the last source-reload\n    if (Date.now() - lastCalled < localOptions.errorInterval * 1000) {\n      player.trigger({ type: 'usage', name: 'hls-error-reload-canceled' });\n      return;\n    }\n\n    if (!localOptions.getSource || typeof localOptions.getSource !== 'function') {\n      videojs$1.log.error('ERROR: reloadSourceOnError - The option getSource must be a function!');\n      return;\n    }\n    lastCalled = Date.now();\n\n    return localOptions.getSource.call(player, setSource);\n  };\n\n  /**\n   * Unbind any event handlers that were bound by the plugin\n   *\n   * @private\n   */\n  var cleanupEvents = function cleanupEvents() {\n    player.off('loadedmetadata', loadedMetadataHandler);\n    player.off('error', errorHandler);\n    player.off('dispose', cleanupEvents);\n  };\n\n  /**\n   * Cleanup before re-initializing the plugin\n   *\n   * @param {Object} [newOptions] an object with plugin options\n   * @private\n   */\n  var reinitPlugin = function reinitPlugin(newOptions) {\n    cleanupEvents();\n    initPlugin(player, newOptions);\n  };\n\n  player.on('error', errorHandler);\n  player.on('dispose', cleanupEvents);\n\n  // Overwrite the plugin function so that we can correctly cleanup before\n  // initializing the plugin\n  player.reloadSourceOnError = reinitPlugin;\n};\n\n/**\n * Reload the source when an error is detected as long as there\n * wasn't an error previously within the last 30 seconds\n *\n * @param {Object} [options] an object with plugin options\n */\nvar reloadSourceOnError = function reloadSourceOnError(options) {\n  initPlugin(this, options);\n};\n\nvar version$1 = \"1.2.5\";\n\n// since VHS handles HLS and DASH (and in the future, more types), use * to capture all\nvideojs$1.use('*', function (player) {\n  return {\n    setSource: function setSource(srcObj, next) {\n      // pass null as the first argument to indicate that the source is not rejected\n      next(null, srcObj);\n    },\n\n    // VHS needs to know when seeks happen. For external seeks (generated at the player\n    // level), this middleware will capture the action. For internal seeks (generated at\n    // the tech level), we use a wrapped function so that we can handle it on our own\n    // (specified elsewhere).\n    setCurrentTime: function setCurrentTime(time) {\n      if (player.vhs && player.currentSource().src === player.vhs.source_.src) {\n        player.vhs.setCurrentTime(time);\n      }\n\n      return time;\n    },\n\n    // Sync VHS after play requests.\n    // This specifically handles replay where the order of actions is\n    // play, video element will seek to 0 (skipping the setCurrentTime middleware)\n    // then triggers a play event.\n    play: function play() {\n      if (player.vhs && player.currentSource().src === player.vhs.source_.src) {\n        player.vhs.setCurrentTime(player.currentTime());\n      }\n    }\n  };\n});\n\n/**\n * @file videojs-http-streaming.js\n *\n * The main file for the HLS project.\n * License: https://github.com/videojs/videojs-http-streaming/blob/master/LICENSE\n */\n\nvar Hls$1 = {\n  PlaylistLoader: PlaylistLoader,\n  Playlist: Playlist,\n  Decrypter: Decrypter,\n  AsyncStream: AsyncStream,\n  decrypt: decrypt,\n  utils: utils,\n\n  STANDARD_PLAYLIST_SELECTOR: lastBandwidthSelector,\n  INITIAL_PLAYLIST_SELECTOR: lowestBitrateCompatibleVariantSelector,\n  comparePlaylistBandwidth: comparePlaylistBandwidth,\n  comparePlaylistResolution: comparePlaylistResolution,\n\n  xhr: xhrFactory()\n};\n\n// 0.5 MB/s\nvar INITIAL_BANDWIDTH = 4194304;\n\n// Define getter/setters for config properites\n['GOAL_BUFFER_LENGTH', 'MAX_GOAL_BUFFER_LENGTH', 'GOAL_BUFFER_LENGTH_RATE', 'BUFFER_LOW_WATER_LINE', 'MAX_BUFFER_LOW_WATER_LINE', 'BUFFER_LOW_WATER_LINE_RATE', 'BANDWIDTH_VARIANCE'].forEach(function (prop) {\n  Object.defineProperty(Hls$1, prop, {\n    get: function get$$1() {\n      videojs$1.log.warn('using Hls.' + prop + ' is UNSAFE be sure you know what you are doing');\n      return Config[prop];\n    },\n    set: function set$$1(value) {\n      videojs$1.log.warn('using Hls.' + prop + ' is UNSAFE be sure you know what you are doing');\n\n      if (typeof value !== 'number' || value < 0) {\n        videojs$1.log.warn('value of Hls.' + prop + ' must be greater than or equal to 0');\n        return;\n      }\n\n      Config[prop] = value;\n    }\n  });\n});\n\nvar simpleTypeFromSourceType = function simpleTypeFromSourceType(type) {\n  var mpegurlRE = /^(audio|video|application)\\/(x-|vnd\\.apple\\.)?mpegurl/i;\n\n  if (mpegurlRE.test(type)) {\n    return 'hls';\n  }\n\n  var dashRE = /^application\\/dash\\+xml/i;\n\n  if (dashRE.test(type)) {\n    return 'dash';\n  }\n\n  return null;\n};\n\n/**\n * Updates the selectedIndex of the QualityLevelList when a mediachange happens in hls.\n *\n * @param {QualityLevelList} qualityLevels The QualityLevelList to update.\n * @param {PlaylistLoader} playlistLoader PlaylistLoader containing the new media info.\n * @function handleHlsMediaChange\n */\nvar handleHlsMediaChange = function handleHlsMediaChange(qualityLevels, playlistLoader) {\n  var newPlaylist = playlistLoader.media();\n  var selectedIndex = -1;\n\n  for (var i = 0; i < qualityLevels.length; i++) {\n    if (qualityLevels[i].id === newPlaylist.uri) {\n      selectedIndex = i;\n      break;\n    }\n  }\n\n  qualityLevels.selectedIndex_ = selectedIndex;\n  qualityLevels.trigger({\n    selectedIndex: selectedIndex,\n    type: 'change'\n  });\n};\n\n/**\n * Adds quality levels to list once playlist metadata is available\n *\n * @param {QualityLevelList} qualityLevels The QualityLevelList to attach events to.\n * @param {Object} hls Hls object to listen to for media events.\n * @function handleHlsLoadedMetadata\n */\nvar handleHlsLoadedMetadata = function handleHlsLoadedMetadata(qualityLevels, hls) {\n  hls.representations().forEach(function (rep) {\n    qualityLevels.addQualityLevel(rep);\n  });\n  handleHlsMediaChange(qualityLevels, hls.playlists);\n};\n\n// HLS is a source handler, not a tech. Make sure attempts to use it\n// as one do not cause exceptions.\nHls$1.canPlaySource = function () {\n  return videojs$1.log.warn('HLS is no longer a tech. Please remove it from ' + 'your player\\'s techOrder.');\n};\n\nvar emeKeySystems = function emeKeySystems(keySystemOptions, videoPlaylist, audioPlaylist) {\n  if (!keySystemOptions) {\n    return keySystemOptions;\n  }\n\n  // upsert the content types based on the selected playlist\n  var keySystemContentTypes = {};\n\n  for (var keySystem in keySystemOptions) {\n    keySystemContentTypes[keySystem] = {\n      audioContentType: 'audio/mp4; codecs=\"' + audioPlaylist.attributes.CODECS + '\"',\n      videoContentType: 'video/mp4; codecs=\"' + videoPlaylist.attributes.CODECS + '\"'\n    };\n\n    if (videoPlaylist.contentProtection && videoPlaylist.contentProtection[keySystem] && videoPlaylist.contentProtection[keySystem].pssh) {\n      keySystemContentTypes[keySystem].pssh = videoPlaylist.contentProtection[keySystem].pssh;\n    }\n\n    // videojs-contrib-eme accepts the option of specifying: 'com.some.cdm': 'url'\n    // so we need to prevent overwriting the URL entirely\n    if (typeof keySystemOptions[keySystem] === 'string') {\n      keySystemContentTypes[keySystem].url = keySystemOptions[keySystem];\n    }\n  }\n\n  return videojs$1.mergeOptions(keySystemOptions, keySystemContentTypes);\n};\n\nvar setupEmeOptions = function setupEmeOptions(hlsHandler) {\n  if (hlsHandler.options_.sourceType !== 'dash') {\n    return;\n  }\n  var player = videojs$1.players[hlsHandler.tech_.options_.playerId];\n\n  if (player.eme) {\n    var sourceOptions = emeKeySystems(hlsHandler.source_.keySystems, hlsHandler.playlists.media(), hlsHandler.masterPlaylistController_.mediaTypes_.AUDIO.activePlaylistLoader.media());\n\n    if (sourceOptions) {\n      player.currentSource().keySystems = sourceOptions;\n    }\n  }\n};\n\n/**\n * Whether the browser has built-in HLS support.\n */\nHls$1.supportsNativeHls = function () {\n  var video = document.createElement('video');\n\n  // native HLS is definitely not supported if HTML5 video isn't\n  if (!videojs$1.getTech('Html5').isSupported()) {\n    return false;\n  }\n\n  // HLS manifests can go by many mime-types\n  var canPlay = [\n  // Apple santioned\n  'application/vnd.apple.mpegurl',\n  // Apple sanctioned for backwards compatibility\n  'audio/mpegurl',\n  // Very common\n  'audio/x-mpegurl',\n  // Very common\n  'application/x-mpegurl',\n  // Included for completeness\n  'video/x-mpegurl', 'video/mpegurl', 'application/mpegurl'];\n\n  return canPlay.some(function (canItPlay) {\n    return (/maybe|probably/i.test(video.canPlayType(canItPlay))\n    );\n  });\n}();\n\nHls$1.supportsNativeDash = function () {\n  if (!videojs$1.getTech('Html5').isSupported()) {\n    return false;\n  }\n\n  return (/maybe|probably/i.test(document.createElement('video').canPlayType('application/dash+xml'))\n  );\n}();\n\nHls$1.supportsTypeNatively = function (type) {\n  if (type === 'hls') {\n    return Hls$1.supportsNativeHls;\n  }\n\n  if (type === 'dash') {\n    return Hls$1.supportsNativeDash;\n  }\n\n  return false;\n};\n\n/**\n * HLS is a source handler, not a tech. Make sure attempts to use it\n * as one do not cause exceptions.\n */\nHls$1.isSupported = function () {\n  return videojs$1.log.warn('HLS is no longer a tech. Please remove it from ' + 'your player\\'s techOrder.');\n};\n\nvar Component$1 = videojs$1.getComponent('Component');\n\n/**\n * The Hls Handler object, where we orchestrate all of the parts\n * of HLS to interact with video.js\n *\n * @class HlsHandler\n * @extends videojs.Component\n * @param {Object} source the soruce object\n * @param {Tech} tech the parent tech object\n * @param {Object} options optional and required options\n */\n\nvar HlsHandler = function (_Component) {\n  inherits$1(HlsHandler, _Component);\n\n  function HlsHandler(source, tech, options) {\n    classCallCheck$1(this, HlsHandler);\n\n    // tech.player() is deprecated but setup a reference to HLS for\n    // backwards-compatibility\n    var _this = possibleConstructorReturn$1(this, (HlsHandler.__proto__ || Object.getPrototypeOf(HlsHandler)).call(this, tech, options.hls));\n\n    if (tech.options_ && tech.options_.playerId) {\n      var _player = videojs$1(tech.options_.playerId);\n\n      if (!_player.hasOwnProperty('hls')) {\n        Object.defineProperty(_player, 'hls', {\n          get: function get$$1() {\n            videojs$1.log.warn('player.hls is deprecated. Use player.tech().hls instead.');\n            tech.trigger({ type: 'usage', name: 'hls-player-access' });\n            return _this;\n          }\n        });\n      }\n\n      // Set up a reference to the HlsHandler from player.vhs. This allows users to start\n      // migrating from player.tech_.hls... to player.vhs... for API access. Although this\n      // isn't the most appropriate form of reference for video.js (since all APIs should\n      // be provided through core video.js), it is a common pattern for plugins, and vhs\n      // will act accordingly.\n      _player.vhs = _this;\n      // deprecated, for backwards compatibility\n      _player.dash = _this;\n    }\n\n    _this.tech_ = tech;\n    _this.source_ = source;\n    _this.stats = {};\n    _this.setOptions_();\n\n    if (_this.options_.overrideNative && tech.overrideNativeAudioTracks && tech.overrideNativeVideoTracks) {\n      tech.overrideNativeAudioTracks(true);\n      tech.overrideNativeVideoTracks(true);\n    } else if (_this.options_.overrideNative && (tech.featuresNativeVideoTracks || tech.featuresNativeAudioTracks)) {\n      // overriding native HLS only works if audio tracks have been emulated\n      // error early if we're misconfigured\n      throw new Error('Overriding native HLS requires emulated tracks. ' + 'See https://git.io/vMpjB');\n    }\n\n    // listen for fullscreenchange events for this player so that we\n    // can adjust our quality selection quickly\n    _this.on(document, ['fullscreenchange', 'webkitfullscreenchange', 'mozfullscreenchange', 'MSFullscreenChange'], function (event) {\n      var fullscreenElement = document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement;\n\n      if (fullscreenElement && fullscreenElement.contains(_this.tech_.el())) {\n        _this.masterPlaylistController_.smoothQualityChange_();\n      }\n    });\n    _this.on(_this.tech_, 'error', function () {\n      if (this.masterPlaylistController_) {\n        this.masterPlaylistController_.pauseLoading();\n      }\n    });\n\n    _this.on(_this.tech_, 'play', _this.play);\n    return _this;\n  }\n\n  createClass$1(HlsHandler, [{\n    key: 'setOptions_',\n    value: function setOptions_() {\n      var _this2 = this;\n\n      // defaults\n      this.options_.withCredentials = this.options_.withCredentials || false;\n\n      if (typeof this.options_.blacklistDuration !== 'number') {\n        this.options_.blacklistDuration = 5 * 60;\n      }\n\n      // start playlist selection at a reasonable bandwidth for\n      // broadband internet (0.5 MB/s) or mobile (0.0625 MB/s)\n      if (typeof this.options_.bandwidth !== 'number') {\n        this.options_.bandwidth = INITIAL_BANDWIDTH;\n      }\n\n      // If the bandwidth number is unchanged from the initial setting\n      // then this takes precedence over the enableLowInitialPlaylist option\n      this.options_.enableLowInitialPlaylist = this.options_.enableLowInitialPlaylist && this.options_.bandwidth === INITIAL_BANDWIDTH;\n\n      // grab options passed to player.src\n      ['withCredentials', 'bandwidth'].forEach(function (option) {\n        if (typeof _this2.source_[option] !== 'undefined') {\n          _this2.options_[option] = _this2.source_[option];\n        }\n      });\n\n      this.bandwidth = this.options_.bandwidth;\n    }\n    /**\n     * called when player.src gets called, handle a new source\n     *\n     * @param {Object} src the source object to handle\n     */\n\n  }, {\n    key: 'src',\n    value: function src(_src, type) {\n      var _this3 = this;\n\n      // do nothing if the src is falsey\n      if (!_src) {\n        return;\n      }\n      this.setOptions_();\n      // add master playlist controller options\n      this.options_.url = this.source_.src;\n      this.options_.tech = this.tech_;\n      this.options_.externHls = Hls$1;\n      this.options_.sourceType = simpleTypeFromSourceType(type);\n      // Whenever we seek internally, we should update both the tech and call our own\n      // setCurrentTime function. This is needed because \"seeking\" events aren't always\n      // reliable. External seeks (via the player object) are handled via middleware.\n      this.options_.seekTo = function (time) {\n        _this3.tech_.setCurrentTime(time);\n        _this3.setCurrentTime(time);\n      };\n\n      this.masterPlaylistController_ = new MasterPlaylistController(this.options_);\n      this.playbackWatcher_ = new PlaybackWatcher(videojs$1.mergeOptions(this.options_, {\n        seekable: function seekable$$1() {\n          return _this3.seekable();\n        }\n      }));\n\n      this.masterPlaylistController_.on('error', function () {\n        var player = videojs$1.players[_this3.tech_.options_.playerId];\n\n        player.error(_this3.masterPlaylistController_.error);\n      });\n\n      // `this` in selectPlaylist should be the HlsHandler for backwards\n      // compatibility with < v2\n      this.masterPlaylistController_.selectPlaylist = this.selectPlaylist ? this.selectPlaylist.bind(this) : Hls$1.STANDARD_PLAYLIST_SELECTOR.bind(this);\n\n      this.masterPlaylistController_.selectInitialPlaylist = Hls$1.INITIAL_PLAYLIST_SELECTOR.bind(this);\n\n      // re-expose some internal objects for backwards compatibility with < v2\n      this.playlists = this.masterPlaylistController_.masterPlaylistLoader_;\n      this.mediaSource = this.masterPlaylistController_.mediaSource;\n\n      // Proxy assignment of some properties to the master playlist\n      // controller. Using a custom property for backwards compatibility\n      // with < v2\n      Object.defineProperties(this, {\n        selectPlaylist: {\n          get: function get$$1() {\n            return this.masterPlaylistController_.selectPlaylist;\n          },\n          set: function set$$1(selectPlaylist) {\n            this.masterPlaylistController_.selectPlaylist = selectPlaylist.bind(this);\n          }\n        },\n        throughput: {\n          get: function get$$1() {\n            return this.masterPlaylistController_.mainSegmentLoader_.throughput.rate;\n          },\n          set: function set$$1(throughput) {\n            this.masterPlaylistController_.mainSegmentLoader_.throughput.rate = throughput;\n            // By setting `count` to 1 the throughput value becomes the starting value\n            // for the cumulative average\n            this.masterPlaylistController_.mainSegmentLoader_.throughput.count = 1;\n          }\n        },\n        bandwidth: {\n          get: function get$$1() {\n            return this.masterPlaylistController_.mainSegmentLoader_.bandwidth;\n          },\n          set: function set$$1(bandwidth) {\n            this.masterPlaylistController_.mainSegmentLoader_.bandwidth = bandwidth;\n            // setting the bandwidth manually resets the throughput counter\n            // `count` is set to zero that current value of `rate` isn't included\n            // in the cumulative average\n            this.masterPlaylistController_.mainSegmentLoader_.throughput = {\n              rate: 0,\n              count: 0\n            };\n          }\n        },\n        /**\n         * `systemBandwidth` is a combination of two serial processes bit-rates. The first\n         * is the network bitrate provided by `bandwidth` and the second is the bitrate of\n         * the entire process after that - decryption, transmuxing, and appending - provided\n         * by `throughput`.\n         *\n         * Since the two process are serial, the overall system bandwidth is given by:\n         *   sysBandwidth = 1 / (1 / bandwidth + 1 / throughput)\n         */\n        systemBandwidth: {\n          get: function get$$1() {\n            var invBandwidth = 1 / (this.bandwidth || 1);\n            var invThroughput = void 0;\n\n            if (this.throughput > 0) {\n              invThroughput = 1 / this.throughput;\n            } else {\n              invThroughput = 0;\n            }\n\n            var systemBitrate = Math.floor(1 / (invBandwidth + invThroughput));\n\n            return systemBitrate;\n          },\n          set: function set$$1() {\n            videojs$1.log.error('The \"systemBandwidth\" property is read-only');\n          }\n        }\n      });\n\n      Object.defineProperties(this.stats, {\n        bandwidth: {\n          get: function get$$1() {\n            return _this3.bandwidth || 0;\n          },\n          enumerable: true\n        },\n        mediaRequests: {\n          get: function get$$1() {\n            return _this3.masterPlaylistController_.mediaRequests_() || 0;\n          },\n          enumerable: true\n        },\n        mediaRequestsAborted: {\n          get: function get$$1() {\n            return _this3.masterPlaylistController_.mediaRequestsAborted_() || 0;\n          },\n          enumerable: true\n        },\n        mediaRequestsTimedout: {\n          get: function get$$1() {\n            return _this3.masterPlaylistController_.mediaRequestsTimedout_() || 0;\n          },\n          enumerable: true\n        },\n        mediaRequestsErrored: {\n          get: function get$$1() {\n            return _this3.masterPlaylistController_.mediaRequestsErrored_() || 0;\n          },\n          enumerable: true\n        },\n        mediaTransferDuration: {\n          get: function get$$1() {\n            return _this3.masterPlaylistController_.mediaTransferDuration_() || 0;\n          },\n          enumerable: true\n        },\n        mediaBytesTransferred: {\n          get: function get$$1() {\n            return _this3.masterPlaylistController_.mediaBytesTransferred_() || 0;\n          },\n          enumerable: true\n        },\n        mediaSecondsLoaded: {\n          get: function get$$1() {\n            return _this3.masterPlaylistController_.mediaSecondsLoaded_() || 0;\n          },\n          enumerable: true\n        },\n        buffered: {\n          get: function get$$1() {\n            return timeRangesToArray(_this3.tech_.buffered());\n          },\n          enumerable: true\n        },\n        currentTime: {\n          get: function get$$1() {\n            return _this3.tech_.currentTime();\n          },\n          enumerable: true\n        },\n        currentSource: {\n          get: function get$$1() {\n            return _this3.tech_.currentSource_;\n          },\n          enumerable: true\n        },\n        currentTech: {\n          get: function get$$1() {\n            return _this3.tech_.name_;\n          },\n          enumerable: true\n        },\n        duration: {\n          get: function get$$1() {\n            return _this3.tech_.duration();\n          },\n          enumerable: true\n        },\n        master: {\n          get: function get$$1() {\n            return _this3.playlists.master;\n          },\n          enumerable: true\n        },\n        playerDimensions: {\n          get: function get$$1() {\n            return _this3.tech_.currentDimensions();\n          },\n          enumerable: true\n        },\n        seekable: {\n          get: function get$$1() {\n            return timeRangesToArray(_this3.tech_.seekable());\n          },\n          enumerable: true\n        },\n        timestamp: {\n          get: function get$$1() {\n            return Date.now();\n          },\n          enumerable: true\n        },\n        videoPlaybackQuality: {\n          get: function get$$1() {\n            return _this3.tech_.getVideoPlaybackQuality();\n          },\n          enumerable: true\n        }\n      });\n\n      this.tech_.one('canplay', this.masterPlaylistController_.setupFirstPlay.bind(this.masterPlaylistController_));\n\n      this.masterPlaylistController_.on('selectedinitialmedia', function () {\n        // Add the manual rendition mix-in to HlsHandler\n        renditionSelectionMixin(_this3);\n        setupEmeOptions(_this3);\n      });\n\n      // the bandwidth of the primary segment loader is our best\n      // estimate of overall bandwidth\n      this.on(this.masterPlaylistController_, 'progress', function () {\n        this.tech_.trigger('progress');\n      });\n\n      this.tech_.ready(function () {\n        return _this3.setupQualityLevels_();\n      });\n\n      // do nothing if the tech has been disposed already\n      // this can occur if someone sets the src in player.ready(), for instance\n      if (!this.tech_.el()) {\n        return;\n      }\n\n      this.tech_.src(videojs$1.URL.createObjectURL(this.masterPlaylistController_.mediaSource));\n    }\n\n    /**\n     * Initializes the quality levels and sets listeners to update them.\n     *\n     * @method setupQualityLevels_\n     * @private\n     */\n\n  }, {\n    key: 'setupQualityLevels_',\n    value: function setupQualityLevels_() {\n      var _this4 = this;\n\n      var player = videojs$1.players[this.tech_.options_.playerId];\n\n      if (player && player.qualityLevels) {\n        this.qualityLevels_ = player.qualityLevels();\n\n        this.masterPlaylistController_.on('selectedinitialmedia', function () {\n          handleHlsLoadedMetadata(_this4.qualityLevels_, _this4);\n        });\n\n        this.playlists.on('mediachange', function () {\n          handleHlsMediaChange(_this4.qualityLevels_, _this4.playlists);\n        });\n      }\n    }\n\n    /**\n     * Begin playing the video.\n     */\n\n  }, {\n    key: 'play',\n    value: function play() {\n      this.masterPlaylistController_.play();\n    }\n\n    /**\n     * a wrapper around the function in MasterPlaylistController\n     */\n\n  }, {\n    key: 'setCurrentTime',\n    value: function setCurrentTime(currentTime) {\n      this.masterPlaylistController_.setCurrentTime(currentTime);\n    }\n\n    /**\n     * a wrapper around the function in MasterPlaylistController\n     */\n\n  }, {\n    key: 'duration',\n    value: function duration$$1() {\n      return this.masterPlaylistController_.duration();\n    }\n\n    /**\n     * a wrapper around the function in MasterPlaylistController\n     */\n\n  }, {\n    key: 'seekable',\n    value: function seekable$$1() {\n      return this.masterPlaylistController_.seekable();\n    }\n\n    /**\n     * Abort all outstanding work and cleanup.\n     */\n\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      if (this.playbackWatcher_) {\n        this.playbackWatcher_.dispose();\n      }\n      if (this.masterPlaylistController_) {\n        this.masterPlaylistController_.dispose();\n      }\n      if (this.qualityLevels_) {\n        this.qualityLevels_.dispose();\n      }\n      get$2(HlsHandler.prototype.__proto__ || Object.getPrototypeOf(HlsHandler.prototype), 'dispose', this).call(this);\n    }\n  }]);\n  return HlsHandler;\n}(Component$1);\n\n/**\n * The Source Handler object, which informs video.js what additional\n * MIME types are supported and sets up playback. It is registered\n * automatically to the appropriate tech based on the capabilities of\n * the browser it is running in. It is not necessary to use or modify\n * this object in normal usage.\n */\n\nvar HlsSourceHandler = {\n  name: 'videojs-http-streaming',\n  VERSION: version$1,\n  canHandleSource: function canHandleSource(srcObj) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var localOptions = videojs$1.mergeOptions(videojs$1.options, options);\n\n    return HlsSourceHandler.canPlayType(srcObj.type, localOptions);\n  },\n  handleSource: function handleSource(source, tech) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var localOptions = videojs$1.mergeOptions(videojs$1.options, options);\n\n    tech.hls = new HlsHandler(source, tech, localOptions);\n    tech.hls.xhr = xhrFactory();\n\n    tech.hls.src(source.src, source.type);\n    return tech.hls;\n  },\n  canPlayType: function canPlayType(type) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var _videojs$mergeOptions = videojs$1.mergeOptions(videojs$1.options, options),\n        overrideNative = _videojs$mergeOptions.hls.overrideNative;\n\n    var supportedType = simpleTypeFromSourceType(type);\n    var canUseMsePlayback = supportedType && (!Hls$1.supportsTypeNatively(supportedType) || overrideNative);\n\n    return canUseMsePlayback ? 'maybe' : '';\n  }\n};\n\nif (typeof videojs$1.MediaSource === 'undefined' || typeof videojs$1.URL === 'undefined') {\n  videojs$1.MediaSource = MediaSource;\n  videojs$1.URL = URL$1;\n}\n\n// register source handlers with the appropriate techs\nif (MediaSource.supportsNativeMediaSources()) {\n  videojs$1.getTech('Html5').registerSourceHandler(HlsSourceHandler, 0);\n}\n\nvideojs$1.HlsHandler = HlsHandler;\nvideojs$1.HlsSourceHandler = HlsSourceHandler;\nvideojs$1.Hls = Hls$1;\nif (!videojs$1.use) {\n  videojs$1.registerComponent('Hls', Hls$1);\n}\nvideojs$1.options.hls = videojs$1.options.hls || {};\n\nif (videojs$1.registerPlugin) {\n  videojs$1.registerPlugin('reloadSourceOnError', reloadSourceOnError);\n} else {\n  videojs$1.plugin('reloadSourceOnError', reloadSourceOnError);\n}\n\nexport default videojs$1;\n","/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * A stream-based mp2t to mp4 converter. This utility can be used to\n * deliver mp4s to a SourceBuffer on platforms that support native\n * Media Source Extensions.\n */\n'use strict';\n\nvar Stream = require('../utils/stream.js');\nvar mp4 = require('./mp4-generator.js');\nvar frameUtils = require('./frame-utils');\nvar trackDecodeInfo = require('./track-decode-info');\nvar m2ts = require('../m2ts/m2ts.js');\nvar AdtsStream = require('../codecs/adts.js');\nvar H264Stream = require('../codecs/h264').H264Stream;\nvar AacStream = require('../aac');\nvar coneOfSilence = require('../data/silence');\nvar clock = require('../utils/clock');\n\n// constants\nvar AUDIO_PROPERTIES = [\n  'audioobjecttype',\n  'channelcount',\n  'samplerate',\n  'samplingfrequencyindex',\n  'samplesize'\n];\n\nvar VIDEO_PROPERTIES = [\n  'width',\n  'height',\n  'profileIdc',\n  'levelIdc',\n  'profileCompatibility'\n];\n\nvar ONE_SECOND_IN_TS = 90000; // 90kHz clock\n\n// object types\nvar VideoSegmentStream, AudioSegmentStream, Transmuxer, CoalesceStream;\n\n// Helper functions\nvar\n  isLikelyAacData,\n  arrayEquals,\n  sumFrameByteLengths;\n\nisLikelyAacData = function(data) {\n  if ((data[0] === 'I'.charCodeAt(0)) &&\n      (data[1] === 'D'.charCodeAt(0)) &&\n      (data[2] === '3'.charCodeAt(0))) {\n    return true;\n  }\n  return false;\n};\n\n/**\n * Compare two arrays (even typed) for same-ness\n */\narrayEquals = function(a, b) {\n  var\n    i;\n\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  // compare the value of each element in the array\n  for (i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * Sum the `byteLength` properties of the data in each AAC frame\n */\nsumFrameByteLengths = function(array) {\n  var\n    i,\n    currentObj,\n    sum = 0;\n\n  // sum the byteLength's all each nal unit in the frame\n  for (i = 0; i < array.length; i++) {\n    currentObj = array[i];\n    sum += currentObj.data.byteLength;\n  }\n\n  return sum;\n};\n\n/**\n * Constructs a single-track, ISO BMFF media segment from AAC data\n * events. The output of this stream can be fed to a SourceBuffer\n * configured with a suitable initialization segment.\n * @param track {object} track metadata configuration\n * @param options {object} transmuxer options object\n * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps\n *        in the source; false to adjust the first segment to start at 0.\n */\nAudioSegmentStream = function(track, options) {\n  var\n    adtsFrames = [],\n    sequenceNumber = 0,\n    earliestAllowedDts = 0,\n    audioAppendStartTs = 0,\n    videoBaseMediaDecodeTime = Infinity;\n\n  options = options || {};\n\n  AudioSegmentStream.prototype.init.call(this);\n\n  this.push = function(data) {\n    trackDecodeInfo.collectDtsInfo(track, data);\n\n    if (track) {\n      AUDIO_PROPERTIES.forEach(function(prop) {\n        track[prop] = data[prop];\n      });\n    }\n\n    // buffer audio data until end() is called\n    adtsFrames.push(data);\n  };\n\n  this.setEarliestDts = function(earliestDts) {\n    earliestAllowedDts = earliestDts - track.timelineStartInfo.baseMediaDecodeTime;\n  };\n\n  this.setVideoBaseMediaDecodeTime = function(baseMediaDecodeTime) {\n    videoBaseMediaDecodeTime = baseMediaDecodeTime;\n  };\n\n  this.setAudioAppendStart = function(timestamp) {\n    audioAppendStartTs = timestamp;\n  };\n\n  this.flush = function() {\n    var\n      frames,\n      moof,\n      mdat,\n      boxes;\n\n    // return early if no audio data has been observed\n    if (adtsFrames.length === 0) {\n      this.trigger('done', 'AudioSegmentStream');\n      return;\n    }\n\n    frames = this.trimAdtsFramesByEarliestDts_(adtsFrames);\n    track.baseMediaDecodeTime = trackDecodeInfo.calculateTrackBaseMediaDecodeTime(\n      track, options.keepOriginalTimestamps);\n\n    this.prefixWithSilence_(track, frames);\n\n    // we have to build the index from byte locations to\n    // samples (that is, adts frames) in the audio data\n    track.samples = this.generateSampleTable_(frames);\n\n    // concatenate the audio data to constuct the mdat\n    mdat = mp4.mdat(this.concatenateFrameData_(frames));\n\n    adtsFrames = [];\n\n    moof = mp4.moof(sequenceNumber, [track]);\n    boxes = new Uint8Array(moof.byteLength + mdat.byteLength);\n\n    // bump the sequence number for next time\n    sequenceNumber++;\n\n    boxes.set(moof);\n    boxes.set(mdat, moof.byteLength);\n\n    trackDecodeInfo.clearDtsInfo(track);\n\n    this.trigger('data', {track: track, boxes: boxes});\n    this.trigger('done', 'AudioSegmentStream');\n  };\n\n  // Possibly pad (prefix) the audio track with silence if appending this track\n  // would lead to the introduction of a gap in the audio buffer\n  this.prefixWithSilence_ = function(track, frames) {\n    var\n      baseMediaDecodeTimeTs,\n      frameDuration = 0,\n      audioGapDuration = 0,\n      audioFillFrameCount = 0,\n      audioFillDuration = 0,\n      silentFrame,\n      i;\n\n    if (!frames.length) {\n      return;\n    }\n\n    baseMediaDecodeTimeTs = clock.audioTsToVideoTs(track.baseMediaDecodeTime, track.samplerate);\n    // determine frame clock duration based on sample rate, round up to avoid overfills\n    frameDuration = Math.ceil(ONE_SECOND_IN_TS / (track.samplerate / 1024));\n\n    if (audioAppendStartTs && videoBaseMediaDecodeTime) {\n      // insert the shortest possible amount (audio gap or audio to video gap)\n      audioGapDuration =\n        baseMediaDecodeTimeTs - Math.max(audioAppendStartTs, videoBaseMediaDecodeTime);\n      // number of full frames in the audio gap\n      audioFillFrameCount = Math.floor(audioGapDuration / frameDuration);\n      audioFillDuration = audioFillFrameCount * frameDuration;\n    }\n\n    // don't attempt to fill gaps smaller than a single frame or larger\n    // than a half second\n    if (audioFillFrameCount < 1 || audioFillDuration > ONE_SECOND_IN_TS / 2) {\n      return;\n    }\n\n    silentFrame = coneOfSilence[track.samplerate];\n\n    if (!silentFrame) {\n      // we don't have a silent frame pregenerated for the sample rate, so use a frame\n      // from the content instead\n      silentFrame = frames[0].data;\n    }\n\n    for (i = 0; i < audioFillFrameCount; i++) {\n      frames.splice(i, 0, {\n        data: silentFrame\n      });\n    }\n\n    track.baseMediaDecodeTime -=\n      Math.floor(clock.videoTsToAudioTs(audioFillDuration, track.samplerate));\n  };\n\n  // If the audio segment extends before the earliest allowed dts\n  // value, remove AAC frames until starts at or after the earliest\n  // allowed DTS so that we don't end up with a negative baseMedia-\n  // DecodeTime for the audio track\n  this.trimAdtsFramesByEarliestDts_ = function(adtsFrames) {\n    if (track.minSegmentDts >= earliestAllowedDts) {\n      return adtsFrames;\n    }\n\n    // We will need to recalculate the earliest segment Dts\n    track.minSegmentDts = Infinity;\n\n    return adtsFrames.filter(function(currentFrame) {\n      // If this is an allowed frame, keep it and record it's Dts\n      if (currentFrame.dts >= earliestAllowedDts) {\n        track.minSegmentDts = Math.min(track.minSegmentDts, currentFrame.dts);\n        track.minSegmentPts = track.minSegmentDts;\n        return true;\n      }\n      // Otherwise, discard it\n      return false;\n    });\n  };\n\n  // generate the track's raw mdat data from an array of frames\n  this.generateSampleTable_ = function(frames) {\n    var\n      i,\n      currentFrame,\n      samples = [];\n\n    for (i = 0; i < frames.length; i++) {\n      currentFrame = frames[i];\n      samples.push({\n        size: currentFrame.data.byteLength,\n        duration: 1024 // For AAC audio, all samples contain 1024 samples\n      });\n    }\n    return samples;\n  };\n\n  // generate the track's sample table from an array of frames\n  this.concatenateFrameData_ = function(frames) {\n    var\n      i,\n      currentFrame,\n      dataOffset = 0,\n      data = new Uint8Array(sumFrameByteLengths(frames));\n\n    for (i = 0; i < frames.length; i++) {\n      currentFrame = frames[i];\n\n      data.set(currentFrame.data, dataOffset);\n      dataOffset += currentFrame.data.byteLength;\n    }\n    return data;\n  };\n};\n\nAudioSegmentStream.prototype = new Stream();\n\n/**\n * Constructs a single-track, ISO BMFF media segment from H264 data\n * events. The output of this stream can be fed to a SourceBuffer\n * configured with a suitable initialization segment.\n * @param track {object} track metadata configuration\n * @param options {object} transmuxer options object\n * @param options.alignGopsAtEnd {boolean} If true, start from the end of the\n *        gopsToAlignWith list when attempting to align gop pts\n * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps\n *        in the source; false to adjust the first segment to start at 0.\n */\nVideoSegmentStream = function(track, options) {\n  var\n    sequenceNumber = 0,\n    nalUnits = [],\n    gopsToAlignWith = [],\n    config,\n    pps;\n\n  options = options || {};\n\n  VideoSegmentStream.prototype.init.call(this);\n\n  delete track.minPTS;\n\n  this.gopCache_ = [];\n\n  /**\n    * Constructs a ISO BMFF segment given H264 nalUnits\n    * @param {Object} nalUnit A data event representing a nalUnit\n    * @param {String} nalUnit.nalUnitType\n    * @param {Object} nalUnit.config Properties for a mp4 track\n    * @param {Uint8Array} nalUnit.data The nalUnit bytes\n    * @see lib/codecs/h264.js\n   **/\n  this.push = function(nalUnit) {\n    trackDecodeInfo.collectDtsInfo(track, nalUnit);\n\n    // record the track config\n    if (nalUnit.nalUnitType === 'seq_parameter_set_rbsp' && !config) {\n      config = nalUnit.config;\n      track.sps = [nalUnit.data];\n\n      VIDEO_PROPERTIES.forEach(function(prop) {\n        track[prop] = config[prop];\n      }, this);\n    }\n\n    if (nalUnit.nalUnitType === 'pic_parameter_set_rbsp' &&\n        !pps) {\n      pps = nalUnit.data;\n      track.pps = [nalUnit.data];\n    }\n\n    // buffer video until flush() is called\n    nalUnits.push(nalUnit);\n  };\n\n  /**\n    * Pass constructed ISO BMFF track and boxes on to the\n    * next stream in the pipeline\n   **/\n  this.flush = function() {\n    var\n      frames,\n      gopForFusion,\n      gops,\n      moof,\n      mdat,\n      boxes;\n\n    // Throw away nalUnits at the start of the byte stream until\n    // we find the first AUD\n    while (nalUnits.length) {\n      if (nalUnits[0].nalUnitType === 'access_unit_delimiter_rbsp') {\n        break;\n      }\n      nalUnits.shift();\n    }\n\n    // Return early if no video data has been observed\n    if (nalUnits.length === 0) {\n      this.resetStream_();\n      this.trigger('done', 'VideoSegmentStream');\n      return;\n    }\n\n    // Organize the raw nal-units into arrays that represent\n    // higher-level constructs such as frames and gops\n    // (group-of-pictures)\n    frames = frameUtils.groupNalsIntoFrames(nalUnits);\n    gops = frameUtils.groupFramesIntoGops(frames);\n\n    // If the first frame of this fragment is not a keyframe we have\n    // a problem since MSE (on Chrome) requires a leading keyframe.\n    //\n    // We have two approaches to repairing this situation:\n    // 1) GOP-FUSION:\n    //    This is where we keep track of the GOPS (group-of-pictures)\n    //    from previous fragments and attempt to find one that we can\n    //    prepend to the current fragment in order to create a valid\n    //    fragment.\n    // 2) KEYFRAME-PULLING:\n    //    Here we search for the first keyframe in the fragment and\n    //    throw away all the frames between the start of the fragment\n    //    and that keyframe. We then extend the duration and pull the\n    //    PTS of the keyframe forward so that it covers the time range\n    //    of the frames that were disposed of.\n    //\n    // #1 is far prefereable over #2 which can cause \"stuttering\" but\n    // requires more things to be just right.\n    if (!gops[0][0].keyFrame) {\n      // Search for a gop for fusion from our gopCache\n      gopForFusion = this.getGopForFusion_(nalUnits[0], track);\n\n      if (gopForFusion) {\n        gops.unshift(gopForFusion);\n        // Adjust Gops' metadata to account for the inclusion of the\n        // new gop at the beginning\n        gops.byteLength += gopForFusion.byteLength;\n        gops.nalCount += gopForFusion.nalCount;\n        gops.pts = gopForFusion.pts;\n        gops.dts = gopForFusion.dts;\n        gops.duration += gopForFusion.duration;\n      } else {\n        // If we didn't find a candidate gop fall back to keyframe-pulling\n        gops = frameUtils.extendFirstKeyFrame(gops);\n      }\n    }\n\n    // Trim gops to align with gopsToAlignWith\n    if (gopsToAlignWith.length) {\n      var alignedGops;\n\n      if (options.alignGopsAtEnd) {\n        alignedGops = this.alignGopsAtEnd_(gops);\n      } else {\n        alignedGops = this.alignGopsAtStart_(gops);\n      }\n\n      if (!alignedGops) {\n        // save all the nals in the last GOP into the gop cache\n        this.gopCache_.unshift({\n          gop: gops.pop(),\n          pps: track.pps,\n          sps: track.sps\n        });\n\n        // Keep a maximum of 6 GOPs in the cache\n        this.gopCache_.length = Math.min(6, this.gopCache_.length);\n\n        // Clear nalUnits\n        nalUnits = [];\n\n        // return early no gops can be aligned with desired gopsToAlignWith\n        this.resetStream_();\n        this.trigger('done', 'VideoSegmentStream');\n        return;\n      }\n\n      // Some gops were trimmed. clear dts info so minSegmentDts and pts are correct\n      // when recalculated before sending off to CoalesceStream\n      trackDecodeInfo.clearDtsInfo(track);\n\n      gops = alignedGops;\n    }\n\n    trackDecodeInfo.collectDtsInfo(track, gops);\n\n    // First, we have to build the index from byte locations to\n    // samples (that is, frames) in the video data\n    track.samples = frameUtils.generateSampleTable(gops);\n\n    // Concatenate the video data and construct the mdat\n    mdat = mp4.mdat(frameUtils.concatenateNalData(gops));\n\n    track.baseMediaDecodeTime = trackDecodeInfo.calculateTrackBaseMediaDecodeTime(\n      track, options.keepOriginalTimestamps);\n\n    this.trigger('processedGopsInfo', gops.map(function(gop) {\n      return {\n        pts: gop.pts,\n        dts: gop.dts,\n        byteLength: gop.byteLength\n      };\n    }));\n\n    // save all the nals in the last GOP into the gop cache\n    this.gopCache_.unshift({\n      gop: gops.pop(),\n      pps: track.pps,\n      sps: track.sps\n    });\n\n    // Keep a maximum of 6 GOPs in the cache\n    this.gopCache_.length = Math.min(6, this.gopCache_.length);\n\n    // Clear nalUnits\n    nalUnits = [];\n\n    this.trigger('baseMediaDecodeTime', track.baseMediaDecodeTime);\n    this.trigger('timelineStartInfo', track.timelineStartInfo);\n\n    moof = mp4.moof(sequenceNumber, [track]);\n\n    // it would be great to allocate this array up front instead of\n    // throwing away hundreds of media segment fragments\n    boxes = new Uint8Array(moof.byteLength + mdat.byteLength);\n\n    // Bump the sequence number for next time\n    sequenceNumber++;\n\n    boxes.set(moof);\n    boxes.set(mdat, moof.byteLength);\n\n    this.trigger('data', {track: track, boxes: boxes});\n\n    this.resetStream_();\n\n    // Continue with the flush process now\n    this.trigger('done', 'VideoSegmentStream');\n  };\n\n  this.resetStream_ = function() {\n    trackDecodeInfo.clearDtsInfo(track);\n\n    // reset config and pps because they may differ across segments\n    // for instance, when we are rendition switching\n    config = undefined;\n    pps = undefined;\n  };\n\n  // Search for a candidate Gop for gop-fusion from the gop cache and\n  // return it or return null if no good candidate was found\n  this.getGopForFusion_ = function(nalUnit) {\n    var\n      halfSecond = 45000, // Half-a-second in a 90khz clock\n      allowableOverlap = 10000, // About 3 frames @ 30fps\n      nearestDistance = Infinity,\n      dtsDistance,\n      nearestGopObj,\n      currentGop,\n      currentGopObj,\n      i;\n\n    // Search for the GOP nearest to the beginning of this nal unit\n    for (i = 0; i < this.gopCache_.length; i++) {\n      currentGopObj = this.gopCache_[i];\n      currentGop = currentGopObj.gop;\n\n      // Reject Gops with different SPS or PPS\n      if (!(track.pps && arrayEquals(track.pps[0], currentGopObj.pps[0])) ||\n          !(track.sps && arrayEquals(track.sps[0], currentGopObj.sps[0]))) {\n        continue;\n      }\n\n      // Reject Gops that would require a negative baseMediaDecodeTime\n      if (currentGop.dts < track.timelineStartInfo.dts) {\n        continue;\n      }\n\n      // The distance between the end of the gop and the start of the nalUnit\n      dtsDistance = (nalUnit.dts - currentGop.dts) - currentGop.duration;\n\n      // Only consider GOPS that start before the nal unit and end within\n      // a half-second of the nal unit\n      if (dtsDistance >= -allowableOverlap &&\n          dtsDistance <= halfSecond) {\n\n        // Always use the closest GOP we found if there is more than\n        // one candidate\n        if (!nearestGopObj ||\n            nearestDistance > dtsDistance) {\n          nearestGopObj = currentGopObj;\n          nearestDistance = dtsDistance;\n        }\n      }\n    }\n\n    if (nearestGopObj) {\n      return nearestGopObj.gop;\n    }\n    return null;\n  };\n\n  // trim gop list to the first gop found that has a matching pts with a gop in the list\n  // of gopsToAlignWith starting from the START of the list\n  this.alignGopsAtStart_ = function(gops) {\n    var alignIndex, gopIndex, align, gop, byteLength, nalCount, duration, alignedGops;\n\n    byteLength = gops.byteLength;\n    nalCount = gops.nalCount;\n    duration = gops.duration;\n    alignIndex = gopIndex = 0;\n\n    while (alignIndex < gopsToAlignWith.length && gopIndex < gops.length) {\n      align = gopsToAlignWith[alignIndex];\n      gop = gops[gopIndex];\n\n      if (align.pts === gop.pts) {\n        break;\n      }\n\n      if (gop.pts > align.pts) {\n        // this current gop starts after the current gop we want to align on, so increment\n        // align index\n        alignIndex++;\n        continue;\n      }\n\n      // current gop starts before the current gop we want to align on. so increment gop\n      // index\n      gopIndex++;\n      byteLength -= gop.byteLength;\n      nalCount -= gop.nalCount;\n      duration -= gop.duration;\n    }\n\n    if (gopIndex === 0) {\n      // no gops to trim\n      return gops;\n    }\n\n    if (gopIndex === gops.length) {\n      // all gops trimmed, skip appending all gops\n      return null;\n    }\n\n    alignedGops = gops.slice(gopIndex);\n    alignedGops.byteLength = byteLength;\n    alignedGops.duration = duration;\n    alignedGops.nalCount = nalCount;\n    alignedGops.pts = alignedGops[0].pts;\n    alignedGops.dts = alignedGops[0].dts;\n\n    return alignedGops;\n  };\n\n  // trim gop list to the first gop found that has a matching pts with a gop in the list\n  // of gopsToAlignWith starting from the END of the list\n  this.alignGopsAtEnd_ = function(gops) {\n    var alignIndex, gopIndex, align, gop, alignEndIndex, matchFound;\n\n    alignIndex = gopsToAlignWith.length - 1;\n    gopIndex = gops.length - 1;\n    alignEndIndex = null;\n    matchFound = false;\n\n    while (alignIndex >= 0 && gopIndex >= 0) {\n      align = gopsToAlignWith[alignIndex];\n      gop = gops[gopIndex];\n\n      if (align.pts === gop.pts) {\n        matchFound = true;\n        break;\n      }\n\n      if (align.pts > gop.pts) {\n        alignIndex--;\n        continue;\n      }\n\n      if (alignIndex === gopsToAlignWith.length - 1) {\n        // gop.pts is greater than the last alignment candidate. If no match is found\n        // by the end of this loop, we still want to append gops that come after this\n        // point\n        alignEndIndex = gopIndex;\n      }\n\n      gopIndex--;\n    }\n\n    if (!matchFound && alignEndIndex === null) {\n      return null;\n    }\n\n    var trimIndex;\n\n    if (matchFound) {\n      trimIndex = gopIndex;\n    } else {\n      trimIndex = alignEndIndex;\n    }\n\n    if (trimIndex === 0) {\n      return gops;\n    }\n\n    var alignedGops = gops.slice(trimIndex);\n    var metadata = alignedGops.reduce(function(total, gop) {\n      total.byteLength += gop.byteLength;\n      total.duration += gop.duration;\n      total.nalCount += gop.nalCount;\n      return total;\n    }, { byteLength: 0, duration: 0, nalCount: 0 });\n\n    alignedGops.byteLength = metadata.byteLength;\n    alignedGops.duration = metadata.duration;\n    alignedGops.nalCount = metadata.nalCount;\n    alignedGops.pts = alignedGops[0].pts;\n    alignedGops.dts = alignedGops[0].dts;\n\n    return alignedGops;\n  };\n\n  this.alignGopsWith = function(newGopsToAlignWith) {\n    gopsToAlignWith = newGopsToAlignWith;\n  };\n};\n\nVideoSegmentStream.prototype = new Stream();\n\n/**\n * A Stream that can combine multiple streams (ie. audio & video)\n * into a single output segment for MSE. Also supports audio-only\n * and video-only streams.\n */\nCoalesceStream = function(options, metadataStream) {\n  // Number of Tracks per output segment\n  // If greater than 1, we combine multiple\n  // tracks into a single segment\n  this.numberOfTracks = 0;\n  this.metadataStream = metadataStream;\n\n  if (typeof options.remux !== 'undefined') {\n    this.remuxTracks = !!options.remux;\n  } else {\n    this.remuxTracks = true;\n  }\n\n  this.pendingTracks = [];\n  this.videoTrack = null;\n  this.pendingBoxes = [];\n  this.pendingCaptions = [];\n  this.pendingMetadata = [];\n  this.pendingBytes = 0;\n  this.emittedTracks = 0;\n\n  CoalesceStream.prototype.init.call(this);\n\n  // Take output from multiple\n  this.push = function(output) {\n    // buffer incoming captions until the associated video segment\n    // finishes\n    if (output.text) {\n      return this.pendingCaptions.push(output);\n    }\n    // buffer incoming id3 tags until the final flush\n    if (output.frames) {\n      return this.pendingMetadata.push(output);\n    }\n\n    // Add this track to the list of pending tracks and store\n    // important information required for the construction of\n    // the final segment\n    this.pendingTracks.push(output.track);\n    this.pendingBoxes.push(output.boxes);\n    this.pendingBytes += output.boxes.byteLength;\n\n    if (output.track.type === 'video') {\n      this.videoTrack = output.track;\n    }\n    if (output.track.type === 'audio') {\n      this.audioTrack = output.track;\n    }\n  };\n};\n\nCoalesceStream.prototype = new Stream();\nCoalesceStream.prototype.flush = function(flushSource) {\n  var\n    offset = 0,\n    event = {\n      captions: [],\n      captionStreams: {},\n      metadata: [],\n      info: {}\n    },\n    caption,\n    id3,\n    initSegment,\n    timelineStartPts = 0,\n    i;\n\n  if (this.pendingTracks.length < this.numberOfTracks) {\n    if (flushSource !== 'VideoSegmentStream' &&\n        flushSource !== 'AudioSegmentStream') {\n      // Return because we haven't received a flush from a data-generating\n      // portion of the segment (meaning that we have only recieved meta-data\n      // or captions.)\n      return;\n    } else if (this.remuxTracks) {\n      // Return until we have enough tracks from the pipeline to remux (if we\n      // are remuxing audio and video into a single MP4)\n      return;\n    } else if (this.pendingTracks.length === 0) {\n      // In the case where we receive a flush without any data having been\n      // received we consider it an emitted track for the purposes of coalescing\n      // `done` events.\n      // We do this for the case where there is an audio and video track in the\n      // segment but no audio data. (seen in several playlists with alternate\n      // audio tracks and no audio present in the main TS segments.)\n      this.emittedTracks++;\n\n      if (this.emittedTracks >= this.numberOfTracks) {\n        this.trigger('done');\n        this.emittedTracks = 0;\n      }\n      return;\n    }\n  }\n\n  if (this.videoTrack) {\n    timelineStartPts = this.videoTrack.timelineStartInfo.pts;\n    VIDEO_PROPERTIES.forEach(function(prop) {\n      event.info[prop] = this.videoTrack[prop];\n    }, this);\n  } else if (this.audioTrack) {\n    timelineStartPts = this.audioTrack.timelineStartInfo.pts;\n    AUDIO_PROPERTIES.forEach(function(prop) {\n      event.info[prop] = this.audioTrack[prop];\n    }, this);\n  }\n\n  if (this.pendingTracks.length === 1) {\n    event.type = this.pendingTracks[0].type;\n  } else {\n    event.type = 'combined';\n  }\n\n  this.emittedTracks += this.pendingTracks.length;\n\n  initSegment = mp4.initSegment(this.pendingTracks);\n\n  // Create a new typed array to hold the init segment\n  event.initSegment = new Uint8Array(initSegment.byteLength);\n\n  // Create an init segment containing a moov\n  // and track definitions\n  event.initSegment.set(initSegment);\n\n  // Create a new typed array to hold the moof+mdats\n  event.data = new Uint8Array(this.pendingBytes);\n\n  // Append each moof+mdat (one per track) together\n  for (i = 0; i < this.pendingBoxes.length; i++) {\n    event.data.set(this.pendingBoxes[i], offset);\n    offset += this.pendingBoxes[i].byteLength;\n  }\n\n  // Translate caption PTS times into second offsets into the\n  // video timeline for the segment, and add track info\n  for (i = 0; i < this.pendingCaptions.length; i++) {\n    caption = this.pendingCaptions[i];\n    caption.startTime = (caption.startPts - timelineStartPts);\n    caption.startTime /= 90e3;\n    caption.endTime = (caption.endPts - timelineStartPts);\n    caption.endTime /= 90e3;\n    event.captionStreams[caption.stream] = true;\n    event.captions.push(caption);\n  }\n\n  // Translate ID3 frame PTS times into second offsets into the\n  // video timeline for the segment\n  for (i = 0; i < this.pendingMetadata.length; i++) {\n    id3 = this.pendingMetadata[i];\n    id3.cueTime = (id3.pts - timelineStartPts);\n    id3.cueTime /= 90e3;\n    event.metadata.push(id3);\n  }\n  // We add this to every single emitted segment even though we only need\n  // it for the first\n  event.metadata.dispatchType = this.metadataStream.dispatchType;\n\n  // Reset stream state\n  this.pendingTracks.length = 0;\n  this.videoTrack = null;\n  this.pendingBoxes.length = 0;\n  this.pendingCaptions.length = 0;\n  this.pendingBytes = 0;\n  this.pendingMetadata.length = 0;\n\n  // Emit the built segment\n  this.trigger('data', event);\n\n  // Only emit `done` if all tracks have been flushed and emitted\n  if (this.emittedTracks >= this.numberOfTracks) {\n    this.trigger('done');\n    this.emittedTracks = 0;\n  }\n};\n/**\n * A Stream that expects MP2T binary data as input and produces\n * corresponding media segments, suitable for use with Media Source\n * Extension (MSE) implementations that support the ISO BMFF byte\n * stream format, like Chrome.\n */\nTransmuxer = function(options) {\n  var\n    self = this,\n    hasFlushed = true,\n    videoTrack,\n    audioTrack;\n\n  Transmuxer.prototype.init.call(this);\n\n  options = options || {};\n  this.baseMediaDecodeTime = options.baseMediaDecodeTime || 0;\n  this.transmuxPipeline_ = {};\n\n  this.setupAacPipeline = function() {\n    var pipeline = {};\n    this.transmuxPipeline_ = pipeline;\n\n    pipeline.type = 'aac';\n    pipeline.metadataStream = new m2ts.MetadataStream();\n\n    // set up the parsing pipeline\n    pipeline.aacStream = new AacStream();\n    pipeline.audioTimestampRolloverStream = new m2ts.TimestampRolloverStream('audio');\n    pipeline.timedMetadataTimestampRolloverStream = new m2ts.TimestampRolloverStream('timed-metadata');\n    pipeline.adtsStream = new AdtsStream();\n    pipeline.coalesceStream = new CoalesceStream(options, pipeline.metadataStream);\n    pipeline.headOfPipeline = pipeline.aacStream;\n\n    pipeline.aacStream\n      .pipe(pipeline.audioTimestampRolloverStream)\n      .pipe(pipeline.adtsStream);\n    pipeline.aacStream\n      .pipe(pipeline.timedMetadataTimestampRolloverStream)\n      .pipe(pipeline.metadataStream)\n      .pipe(pipeline.coalesceStream);\n\n    pipeline.metadataStream.on('timestamp', function(frame) {\n      pipeline.aacStream.setTimestamp(frame.timeStamp);\n    });\n\n    pipeline.aacStream.on('data', function(data) {\n      if (data.type === 'timed-metadata' && !pipeline.audioSegmentStream) {\n        audioTrack = audioTrack || {\n          timelineStartInfo: {\n            baseMediaDecodeTime: self.baseMediaDecodeTime\n          },\n          codec: 'adts',\n          type: 'audio'\n        };\n        // hook up the audio segment stream to the first track with aac data\n        pipeline.coalesceStream.numberOfTracks++;\n        pipeline.audioSegmentStream = new AudioSegmentStream(audioTrack, options);\n        // Set up the final part of the audio pipeline\n        pipeline.adtsStream\n          .pipe(pipeline.audioSegmentStream)\n          .pipe(pipeline.coalesceStream);\n      }\n    });\n\n    // Re-emit any data coming from the coalesce stream to the outside world\n    pipeline.coalesceStream.on('data', this.trigger.bind(this, 'data'));\n    // Let the consumer know we have finished flushing the entire pipeline\n    pipeline.coalesceStream.on('done', this.trigger.bind(this, 'done'));\n  };\n\n  this.setupTsPipeline = function() {\n    var pipeline = {};\n    this.transmuxPipeline_ = pipeline;\n\n    pipeline.type = 'ts';\n    pipeline.metadataStream = new m2ts.MetadataStream();\n\n    // set up the parsing pipeline\n    pipeline.packetStream = new m2ts.TransportPacketStream();\n    pipeline.parseStream = new m2ts.TransportParseStream();\n    pipeline.elementaryStream = new m2ts.ElementaryStream();\n    pipeline.videoTimestampRolloverStream = new m2ts.TimestampRolloverStream('video');\n    pipeline.audioTimestampRolloverStream = new m2ts.TimestampRolloverStream('audio');\n    pipeline.timedMetadataTimestampRolloverStream = new m2ts.TimestampRolloverStream('timed-metadata');\n    pipeline.adtsStream = new AdtsStream();\n    pipeline.h264Stream = new H264Stream();\n    pipeline.captionStream = new m2ts.CaptionStream();\n    pipeline.coalesceStream = new CoalesceStream(options, pipeline.metadataStream);\n    pipeline.headOfPipeline = pipeline.packetStream;\n\n    // disassemble MPEG2-TS packets into elementary streams\n    pipeline.packetStream\n      .pipe(pipeline.parseStream)\n      .pipe(pipeline.elementaryStream);\n\n    // !!THIS ORDER IS IMPORTANT!!\n    // demux the streams\n    pipeline.elementaryStream\n      .pipe(pipeline.videoTimestampRolloverStream)\n      .pipe(pipeline.h264Stream);\n    pipeline.elementaryStream\n      .pipe(pipeline.audioTimestampRolloverStream)\n      .pipe(pipeline.adtsStream);\n\n    pipeline.elementaryStream\n      .pipe(pipeline.timedMetadataTimestampRolloverStream)\n      .pipe(pipeline.metadataStream)\n      .pipe(pipeline.coalesceStream);\n\n    // Hook up CEA-608/708 caption stream\n    pipeline.h264Stream.pipe(pipeline.captionStream)\n      .pipe(pipeline.coalesceStream);\n\n    pipeline.elementaryStream.on('data', function(data) {\n      var i;\n\n      if (data.type === 'metadata') {\n        i = data.tracks.length;\n\n        // scan the tracks listed in the metadata\n        while (i--) {\n          if (!videoTrack && data.tracks[i].type === 'video') {\n            videoTrack = data.tracks[i];\n            videoTrack.timelineStartInfo.baseMediaDecodeTime = self.baseMediaDecodeTime;\n          } else if (!audioTrack && data.tracks[i].type === 'audio') {\n            audioTrack = data.tracks[i];\n            audioTrack.timelineStartInfo.baseMediaDecodeTime = self.baseMediaDecodeTime;\n          }\n        }\n\n        // hook up the video segment stream to the first track with h264 data\n        if (videoTrack && !pipeline.videoSegmentStream) {\n          pipeline.coalesceStream.numberOfTracks++;\n          pipeline.videoSegmentStream = new VideoSegmentStream(videoTrack, options);\n\n          pipeline.videoSegmentStream.on('timelineStartInfo', function(timelineStartInfo) {\n          // When video emits timelineStartInfo data after a flush, we forward that\n          // info to the AudioSegmentStream, if it exists, because video timeline\n          // data takes precedence.\n            if (audioTrack) {\n              audioTrack.timelineStartInfo = timelineStartInfo;\n              // On the first segment we trim AAC frames that exist before the\n              // very earliest DTS we have seen in video because Chrome will\n              // interpret any video track with a baseMediaDecodeTime that is\n              // non-zero as a gap.\n              pipeline.audioSegmentStream.setEarliestDts(timelineStartInfo.dts);\n            }\n          });\n\n          pipeline.videoSegmentStream.on('processedGopsInfo',\n            self.trigger.bind(self, 'gopInfo'));\n\n          pipeline.videoSegmentStream.on('baseMediaDecodeTime', function(baseMediaDecodeTime) {\n            if (audioTrack) {\n              pipeline.audioSegmentStream.setVideoBaseMediaDecodeTime(baseMediaDecodeTime);\n            }\n          });\n\n          // Set up the final part of the video pipeline\n          pipeline.h264Stream\n            .pipe(pipeline.videoSegmentStream)\n            .pipe(pipeline.coalesceStream);\n        }\n\n        if (audioTrack && !pipeline.audioSegmentStream) {\n          // hook up the audio segment stream to the first track with aac data\n          pipeline.coalesceStream.numberOfTracks++;\n          pipeline.audioSegmentStream = new AudioSegmentStream(audioTrack, options);\n\n          // Set up the final part of the audio pipeline\n          pipeline.adtsStream\n            .pipe(pipeline.audioSegmentStream)\n            .pipe(pipeline.coalesceStream);\n        }\n      }\n    });\n\n    // Re-emit any data coming from the coalesce stream to the outside world\n    pipeline.coalesceStream.on('data', this.trigger.bind(this, 'data'));\n    // Let the consumer know we have finished flushing the entire pipeline\n    pipeline.coalesceStream.on('done', this.trigger.bind(this, 'done'));\n  };\n\n  // hook up the segment streams once track metadata is delivered\n  this.setBaseMediaDecodeTime = function(baseMediaDecodeTime) {\n    var pipeline = this.transmuxPipeline_;\n\n    this.baseMediaDecodeTime = baseMediaDecodeTime;\n    if (audioTrack) {\n      audioTrack.timelineStartInfo.dts = undefined;\n      audioTrack.timelineStartInfo.pts = undefined;\n      trackDecodeInfo.clearDtsInfo(audioTrack);\n      audioTrack.timelineStartInfo.baseMediaDecodeTime = baseMediaDecodeTime;\n      if (pipeline.audioTimestampRolloverStream) {\n        pipeline.audioTimestampRolloverStream.discontinuity();\n      }\n    }\n    if (videoTrack) {\n      if (pipeline.videoSegmentStream) {\n        pipeline.videoSegmentStream.gopCache_ = [];\n        pipeline.videoTimestampRolloverStream.discontinuity();\n      }\n      videoTrack.timelineStartInfo.dts = undefined;\n      videoTrack.timelineStartInfo.pts = undefined;\n      trackDecodeInfo.clearDtsInfo(videoTrack);\n      pipeline.captionStream.reset();\n      videoTrack.timelineStartInfo.baseMediaDecodeTime = baseMediaDecodeTime;\n    }\n\n    if (pipeline.timedMetadataTimestampRolloverStream) {\n      pipeline.timedMetadataTimestampRolloverStream.discontinuity();\n    }\n  };\n\n  this.setAudioAppendStart = function(timestamp) {\n    if (audioTrack) {\n      this.transmuxPipeline_.audioSegmentStream.setAudioAppendStart(timestamp);\n    }\n  };\n\n  this.alignGopsWith = function(gopsToAlignWith) {\n    if (videoTrack && this.transmuxPipeline_.videoSegmentStream) {\n      this.transmuxPipeline_.videoSegmentStream.alignGopsWith(gopsToAlignWith);\n    }\n  };\n\n  // feed incoming data to the front of the parsing pipeline\n  this.push = function(data) {\n    if (hasFlushed) {\n      var isAac = isLikelyAacData(data);\n\n      if (isAac && this.transmuxPipeline_.type !== 'aac') {\n        this.setupAacPipeline();\n      } else if (!isAac && this.transmuxPipeline_.type !== 'ts') {\n        this.setupTsPipeline();\n      }\n      hasFlushed = false;\n    }\n    this.transmuxPipeline_.headOfPipeline.push(data);\n  };\n\n  // flush any buffered data\n  this.flush = function() {\n      hasFlushed = true;\n    // Start at the top of the pipeline and flush all pending work\n    this.transmuxPipeline_.headOfPipeline.flush();\n  };\n\n  // Caption data has to be reset when seeking outside buffered range\n  this.resetCaptions = function() {\n    if (this.transmuxPipeline_.captionStream) {\n      this.transmuxPipeline_.captionStream.reset();\n    }\n  };\n\n};\nTransmuxer.prototype = new Stream();\n\nmodule.exports = {\n  Transmuxer: Transmuxer,\n  VideoSegmentStream: VideoSegmentStream,\n  AudioSegmentStream: AudioSegmentStream,\n  AUDIO_PROPERTIES: AUDIO_PROPERTIES,\n  VIDEO_PROPERTIES: VIDEO_PROPERTIES\n};\n","// see https://tools.ietf.org/html/rfc1808\n\n/* jshint ignore:start */\n(function(root) { \n/* jshint ignore:end */\n\n  var URL_REGEX = /^((?:[a-zA-Z0-9+\\-.]+:)?)(\\/\\/[^\\/?#]*)?((?:[^\\/\\?#]*\\/)*.*?)??(;.*?)?(\\?.*?)?(#.*?)?$/;\n  var FIRST_SEGMENT_REGEX = /^([^\\/?#]*)(.*)$/;\n  var SLASH_DOT_REGEX = /(?:\\/|^)\\.(?=\\/)/g;\n  var SLASH_DOT_DOT_REGEX = /(?:\\/|^)\\.\\.\\/(?!\\.\\.\\/).*?(?=\\/)/g;\n\n  var URLToolkit = { // jshint ignore:line\n    // If opts.alwaysNormalize is true then the path will always be normalized even when it starts with / or //\n    // E.g\n    // With opts.alwaysNormalize = false (default, spec compliant)\n    // http://a.com/b/cd + /e/f/../g => http://a.com/e/f/../g\n    // With opts.alwaysNormalize = true (not spec compliant)\n    // http://a.com/b/cd + /e/f/../g => http://a.com/e/g\n    buildAbsoluteURL: function(baseURL, relativeURL, opts) {\n      opts = opts || {};\n      // remove any remaining space and CRLF\n      baseURL = baseURL.trim();\n      relativeURL = relativeURL.trim();\n      if (!relativeURL) {\n        // 2a) If the embedded URL is entirely empty, it inherits the\n        // entire base URL (i.e., is set equal to the base URL)\n        // and we are done.\n        if (!opts.alwaysNormalize) {\n          return baseURL;\n        }\n        var basePartsForNormalise = URLToolkit.parseURL(baseURL);\n        if (!basePartsForNormalise) {\n          throw new Error('Error trying to parse base URL.');\n        }\n        basePartsForNormalise.path = URLToolkit.normalizePath(basePartsForNormalise.path);\n        return URLToolkit.buildURLFromParts(basePartsForNormalise);\n      }\n      var relativeParts = URLToolkit.parseURL(relativeURL);\n      if (!relativeParts) {\n        throw new Error('Error trying to parse relative URL.');\n      }\n      if (relativeParts.scheme) {\n        // 2b) If the embedded URL starts with a scheme name, it is\n        // interpreted as an absolute URL and we are done.\n        if (!opts.alwaysNormalize) {\n          return relativeURL;\n        }\n        relativeParts.path = URLToolkit.normalizePath(relativeParts.path);\n        return URLToolkit.buildURLFromParts(relativeParts);\n      }\n      var baseParts = URLToolkit.parseURL(baseURL);\n      if (!baseParts) {\n        throw new Error('Error trying to parse base URL.');\n      }\n      if (!baseParts.netLoc && baseParts.path && baseParts.path[0] !== '/') {\n        // If netLoc missing and path doesn't start with '/', assume everthing before the first '/' is the netLoc\n        // This causes 'example.com/a' to be handled as '//example.com/a' instead of '/example.com/a'\n        var pathParts = FIRST_SEGMENT_REGEX.exec(baseParts.path);\n        baseParts.netLoc = pathParts[1];\n        baseParts.path = pathParts[2];\n      }\n      if (baseParts.netLoc && !baseParts.path) {\n        baseParts.path = '/';\n      }\n      var builtParts = {\n        // 2c) Otherwise, the embedded URL inherits the scheme of\n        // the base URL.\n        scheme: baseParts.scheme,\n        netLoc: relativeParts.netLoc,\n        path: null,\n        params: relativeParts.params,\n        query: relativeParts.query,\n        fragment: relativeParts.fragment\n      };\n      if (!relativeParts.netLoc) {\n        // 3) If the embedded URL's <net_loc> is non-empty, we skip to\n        // Step 7.  Otherwise, the embedded URL inherits the <net_loc>\n        // (if any) of the base URL.\n        builtParts.netLoc = baseParts.netLoc;\n        // 4) If the embedded URL path is preceded by a slash \"/\", the\n        // path is not relative and we skip to Step 7.\n        if (relativeParts.path[0] !== '/') {\n          if (!relativeParts.path) {\n            // 5) If the embedded URL path is empty (and not preceded by a\n            // slash), then the embedded URL inherits the base URL path\n            builtParts.path = baseParts.path;\n            // 5a) if the embedded URL's <params> is non-empty, we skip to\n            // step 7; otherwise, it inherits the <params> of the base\n            // URL (if any) and\n            if (!relativeParts.params) {\n              builtParts.params = baseParts.params;\n              // 5b) if the embedded URL's <query> is non-empty, we skip to\n              // step 7; otherwise, it inherits the <query> of the base\n              // URL (if any) and we skip to step 7.\n              if (!relativeParts.query) {\n                builtParts.query = baseParts.query;\n              }\n            }\n          } else {\n            // 6) The last segment of the base URL's path (anything\n            // following the rightmost slash \"/\", or the entire path if no\n            // slash is present) is removed and the embedded URL's path is\n            // appended in its place.\n            var baseURLPath = baseParts.path;\n            var newPath = baseURLPath.substring(0, baseURLPath.lastIndexOf('/') + 1) + relativeParts.path;\n            builtParts.path = URLToolkit.normalizePath(newPath);\n          }\n        }\n      }\n      if (builtParts.path === null) {\n        builtParts.path = opts.alwaysNormalize ? URLToolkit.normalizePath(relativeParts.path) : relativeParts.path;\n      }\n      return URLToolkit.buildURLFromParts(builtParts);\n    },\n    parseURL: function(url) {\n      var parts = URL_REGEX.exec(url);\n      if (!parts) {\n        return null;\n      }\n      return {\n        scheme: parts[1] || '',\n        netLoc: parts[2] || '',\n        path: parts[3] || '',\n        params: parts[4] || '',\n        query: parts[5] || '',\n        fragment: parts[6] || ''\n      };\n    },\n    normalizePath: function(path) {\n      // The following operations are\n      // then applied, in order, to the new path:\n      // 6a) All occurrences of \"./\", where \".\" is a complete path\n      // segment, are removed.\n      // 6b) If the path ends with \".\" as a complete path segment,\n      // that \".\" is removed.\n      path = path.split('').reverse().join('').replace(SLASH_DOT_REGEX, '');\n      // 6c) All occurrences of \"<segment>/../\", where <segment> is a\n      // complete path segment not equal to \"..\", are removed.\n      // Removal of these path segments is performed iteratively,\n      // removing the leftmost matching pattern on each iteration,\n      // until no matching pattern remains.\n      // 6d) If the path ends with \"<segment>/..\", where <segment> is a\n      // complete path segment not equal to \"..\", that\n      // \"<segment>/..\" is removed.\n      while (path.length !== (path = path.replace(SLASH_DOT_DOT_REGEX, '')).length) {} // jshint ignore:line\n      return path.split('').reverse().join('');\n    },\n    buildURLFromParts: function(parts) {\n      return parts.scheme + parts.netLoc + parts.path + parts.params + parts.query + parts.fragment;\n    }\n  };\n\n/* jshint ignore:start */\n  if(typeof exports === 'object' && typeof module === 'object')\n    module.exports = URLToolkit;\n  else if(typeof define === 'function' && define.amd)\n    define([], function() { return URLToolkit; });\n  else if(typeof exports === 'object')\n    exports[\"URLToolkit\"] = URLToolkit;\n  else\n    root[\"URLToolkit\"] = URLToolkit;\n})(this);\n/* jshint ignore:end */\n","/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * Functions that generate fragmented MP4s suitable for use with Media\n * Source Extensions.\n */\n'use strict';\n\nvar UINT32_MAX = Math.pow(2, 32) - 1;\n\nvar box, dinf, esds, ftyp, mdat, mfhd, minf, moof, moov, mvex, mvhd,\n    trak, tkhd, mdia, mdhd, hdlr, sdtp, stbl, stsd, traf, trex,\n    trun, types, MAJOR_BRAND, MINOR_VERSION, AVC1_BRAND, VIDEO_HDLR,\n    AUDIO_HDLR, HDLR_TYPES, VMHD, SMHD, DREF, STCO, STSC, STSZ, STTS;\n\n// pre-calculate constants\n(function() {\n  var i;\n  types = {\n    avc1: [], // codingname\n    avcC: [],\n    btrt: [],\n    dinf: [],\n    dref: [],\n    esds: [],\n    ftyp: [],\n    hdlr: [],\n    mdat: [],\n    mdhd: [],\n    mdia: [],\n    mfhd: [],\n    minf: [],\n    moof: [],\n    moov: [],\n    mp4a: [], // codingname\n    mvex: [],\n    mvhd: [],\n    sdtp: [],\n    smhd: [],\n    stbl: [],\n    stco: [],\n    stsc: [],\n    stsd: [],\n    stsz: [],\n    stts: [],\n    styp: [],\n    tfdt: [],\n    tfhd: [],\n    traf: [],\n    trak: [],\n    trun: [],\n    trex: [],\n    tkhd: [],\n    vmhd: []\n  };\n\n  // In environments where Uint8Array is undefined (e.g., IE8), skip set up so that we\n  // don't throw an error\n  if (typeof Uint8Array === 'undefined') {\n    return;\n  }\n\n  for (i in types) {\n    if (types.hasOwnProperty(i)) {\n      types[i] = [\n        i.charCodeAt(0),\n        i.charCodeAt(1),\n        i.charCodeAt(2),\n        i.charCodeAt(3)\n      ];\n    }\n  }\n\n  MAJOR_BRAND = new Uint8Array([\n    'i'.charCodeAt(0),\n    's'.charCodeAt(0),\n    'o'.charCodeAt(0),\n    'm'.charCodeAt(0)\n  ]);\n  AVC1_BRAND = new Uint8Array([\n    'a'.charCodeAt(0),\n    'v'.charCodeAt(0),\n    'c'.charCodeAt(0),\n    '1'.charCodeAt(0)\n  ]);\n  MINOR_VERSION = new Uint8Array([0, 0, 0, 1]);\n  VIDEO_HDLR = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00, // pre_defined\n    0x76, 0x69, 0x64, 0x65, // handler_type: 'vide'\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x56, 0x69, 0x64, 0x65,\n    0x6f, 0x48, 0x61, 0x6e,\n    0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'VideoHandler'\n  ]);\n  AUDIO_HDLR = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00, // pre_defined\n    0x73, 0x6f, 0x75, 0x6e, // handler_type: 'soun'\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x53, 0x6f, 0x75, 0x6e,\n    0x64, 0x48, 0x61, 0x6e,\n    0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'SoundHandler'\n  ]);\n  HDLR_TYPES = {\n    video: VIDEO_HDLR,\n    audio: AUDIO_HDLR\n  };\n  DREF = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x01, // entry_count\n    0x00, 0x00, 0x00, 0x0c, // entry_size\n    0x75, 0x72, 0x6c, 0x20, // 'url' type\n    0x00, // version 0\n    0x00, 0x00, 0x01 // entry_flags\n  ]);\n  SMHD = new Uint8Array([\n    0x00,             // version\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00,       // balance, 0 means centered\n    0x00, 0x00        // reserved\n  ]);\n  STCO = new Uint8Array([\n    0x00, // version\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00 // entry_count\n  ]);\n  STSC = STCO;\n  STSZ = new Uint8Array([\n    0x00, // version\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00, // sample_size\n    0x00, 0x00, 0x00, 0x00 // sample_count\n  ]);\n  STTS = STCO;\n  VMHD = new Uint8Array([\n    0x00, // version\n    0x00, 0x00, 0x01, // flags\n    0x00, 0x00, // graphicsmode\n    0x00, 0x00,\n    0x00, 0x00,\n    0x00, 0x00 // opcolor\n  ]);\n}());\n\nbox = function(type) {\n  var\n    payload = [],\n    size = 0,\n    i,\n    result,\n    view;\n\n  for (i = 1; i < arguments.length; i++) {\n    payload.push(arguments[i]);\n  }\n\n  i = payload.length;\n\n  // calculate the total size we need to allocate\n  while (i--) {\n    size += payload[i].byteLength;\n  }\n  result = new Uint8Array(size + 8);\n  view = new DataView(result.buffer, result.byteOffset, result.byteLength);\n  view.setUint32(0, result.byteLength);\n  result.set(type, 4);\n\n  // copy the payload into the result\n  for (i = 0, size = 8; i < payload.length; i++) {\n    result.set(payload[i], size);\n    size += payload[i].byteLength;\n  }\n  return result;\n};\n\ndinf = function() {\n  return box(types.dinf, box(types.dref, DREF));\n};\n\nesds = function(track) {\n  return box(types.esds, new Uint8Array([\n    0x00, // version\n    0x00, 0x00, 0x00, // flags\n\n    // ES_Descriptor\n    0x03, // tag, ES_DescrTag\n    0x19, // length\n    0x00, 0x00, // ES_ID\n    0x00, // streamDependenceFlag, URL_flag, reserved, streamPriority\n\n    // DecoderConfigDescriptor\n    0x04, // tag, DecoderConfigDescrTag\n    0x11, // length\n    0x40, // object type\n    0x15,  // streamType\n    0x00, 0x06, 0x00, // bufferSizeDB\n    0x00, 0x00, 0xda, 0xc0, // maxBitrate\n    0x00, 0x00, 0xda, 0xc0, // avgBitrate\n\n    // DecoderSpecificInfo\n    0x05, // tag, DecoderSpecificInfoTag\n    0x02, // length\n    // ISO/IEC 14496-3, AudioSpecificConfig\n    // for samplingFrequencyIndex see ISO/IEC 13818-7:2006, 8.1.3.2.2, Table 35\n    (track.audioobjecttype << 3) | (track.samplingfrequencyindex >>> 1),\n    (track.samplingfrequencyindex << 7) | (track.channelcount << 3),\n    0x06, 0x01, 0x02 // GASpecificConfig\n  ]));\n};\n\nftyp = function() {\n  return box(types.ftyp, MAJOR_BRAND, MINOR_VERSION, MAJOR_BRAND, AVC1_BRAND);\n};\n\nhdlr = function(type) {\n  return box(types.hdlr, HDLR_TYPES[type]);\n};\nmdat = function(data) {\n  return box(types.mdat, data);\n};\nmdhd = function(track) {\n  var result = new Uint8Array([\n    0x00,                   // version 0\n    0x00, 0x00, 0x00,       // flags\n    0x00, 0x00, 0x00, 0x02, // creation_time\n    0x00, 0x00, 0x00, 0x03, // modification_time\n    0x00, 0x01, 0x5f, 0x90, // timescale, 90,000 \"ticks\" per second\n\n    (track.duration >>> 24) & 0xFF,\n    (track.duration >>> 16) & 0xFF,\n    (track.duration >>>  8) & 0xFF,\n    track.duration & 0xFF,  // duration\n    0x55, 0xc4,             // 'und' language (undetermined)\n    0x00, 0x00\n  ]);\n\n  // Use the sample rate from the track metadata, when it is\n  // defined. The sample rate can be parsed out of an ADTS header, for\n  // instance.\n  if (track.samplerate) {\n    result[12] = (track.samplerate >>> 24) & 0xFF;\n    result[13] = (track.samplerate >>> 16) & 0xFF;\n    result[14] = (track.samplerate >>>  8) & 0xFF;\n    result[15] = (track.samplerate)        & 0xFF;\n  }\n\n  return box(types.mdhd, result);\n};\nmdia = function(track) {\n  return box(types.mdia, mdhd(track), hdlr(track.type), minf(track));\n};\nmfhd = function(sequenceNumber) {\n  return box(types.mfhd, new Uint8Array([\n    0x00,\n    0x00, 0x00, 0x00, // flags\n    (sequenceNumber & 0xFF000000) >> 24,\n    (sequenceNumber & 0xFF0000) >> 16,\n    (sequenceNumber & 0xFF00) >> 8,\n    sequenceNumber & 0xFF // sequence_number\n  ]));\n};\nminf = function(track) {\n  return box(types.minf,\n             track.type === 'video' ? box(types.vmhd, VMHD) : box(types.smhd, SMHD),\n             dinf(),\n             stbl(track));\n};\nmoof = function(sequenceNumber, tracks) {\n  var\n    trackFragments = [],\n    i = tracks.length;\n  // build traf boxes for each track fragment\n  while (i--) {\n    trackFragments[i] = traf(tracks[i]);\n  }\n  return box.apply(null, [\n    types.moof,\n    mfhd(sequenceNumber)\n  ].concat(trackFragments));\n};\n/**\n * Returns a movie box.\n * @param tracks {array} the tracks associated with this movie\n * @see ISO/IEC 14496-12:2012(E), section 8.2.1\n */\nmoov = function(tracks) {\n  var\n    i = tracks.length,\n    boxes = [];\n\n  while (i--) {\n    boxes[i] = trak(tracks[i]);\n  }\n\n  return box.apply(null, [types.moov, mvhd(0xffffffff)].concat(boxes).concat(mvex(tracks)));\n};\nmvex = function(tracks) {\n  var\n    i = tracks.length,\n    boxes = [];\n\n  while (i--) {\n    boxes[i] = trex(tracks[i]);\n  }\n  return box.apply(null, [types.mvex].concat(boxes));\n};\nmvhd = function(duration) {\n  var\n    bytes = new Uint8Array([\n      0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x01, // creation_time\n      0x00, 0x00, 0x00, 0x02, // modification_time\n      0x00, 0x01, 0x5f, 0x90, // timescale, 90,000 \"ticks\" per second\n      (duration & 0xFF000000) >> 24,\n      (duration & 0xFF0000) >> 16,\n      (duration & 0xFF00) >> 8,\n      duration & 0xFF, // duration\n      0x00, 0x01, 0x00, 0x00, // 1.0 rate\n      0x01, 0x00, // 1.0 volume\n      0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x01, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, // pre_defined\n      0xff, 0xff, 0xff, 0xff // next_track_ID\n    ]);\n  return box(types.mvhd, bytes);\n};\n\nsdtp = function(track) {\n  var\n    samples = track.samples || [],\n    bytes = new Uint8Array(4 + samples.length),\n    flags,\n    i;\n\n  // leave the full box header (4 bytes) all zero\n\n  // write the sample table\n  for (i = 0; i < samples.length; i++) {\n    flags = samples[i].flags;\n\n    bytes[i + 4] = (flags.dependsOn << 4) |\n      (flags.isDependedOn << 2) |\n      (flags.hasRedundancy);\n  }\n\n  return box(types.sdtp,\n             bytes);\n};\n\nstbl = function(track) {\n  return box(types.stbl,\n             stsd(track),\n             box(types.stts, STTS),\n             box(types.stsc, STSC),\n             box(types.stsz, STSZ),\n             box(types.stco, STCO));\n};\n\n(function() {\n  var videoSample, audioSample;\n\n  stsd = function(track) {\n\n    return box(types.stsd, new Uint8Array([\n      0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x01\n    ]), track.type === 'video' ? videoSample(track) : audioSample(track));\n  };\n\n  videoSample = function(track) {\n    var\n      sps = track.sps || [],\n      pps = track.pps || [],\n      sequenceParameterSets = [],\n      pictureParameterSets = [],\n      i;\n\n    // assemble the SPSs\n    for (i = 0; i < sps.length; i++) {\n      sequenceParameterSets.push((sps[i].byteLength & 0xFF00) >>> 8);\n      sequenceParameterSets.push((sps[i].byteLength & 0xFF)); // sequenceParameterSetLength\n      sequenceParameterSets = sequenceParameterSets.concat(Array.prototype.slice.call(sps[i])); // SPS\n    }\n\n    // assemble the PPSs\n    for (i = 0; i < pps.length; i++) {\n      pictureParameterSets.push((pps[i].byteLength & 0xFF00) >>> 8);\n      pictureParameterSets.push((pps[i].byteLength & 0xFF));\n      pictureParameterSets = pictureParameterSets.concat(Array.prototype.slice.call(pps[i]));\n    }\n\n    return box(types.avc1, new Uint8Array([\n      0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, // data_reference_index\n      0x00, 0x00, // pre_defined\n      0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, // pre_defined\n      (track.width & 0xff00) >> 8,\n      track.width & 0xff, // width\n      (track.height & 0xff00) >> 8,\n      track.height & 0xff, // height\n      0x00, 0x48, 0x00, 0x00, // horizresolution\n      0x00, 0x48, 0x00, 0x00, // vertresolution\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, // frame_count\n      0x13,\n      0x76, 0x69, 0x64, 0x65,\n      0x6f, 0x6a, 0x73, 0x2d,\n      0x63, 0x6f, 0x6e, 0x74,\n      0x72, 0x69, 0x62, 0x2d,\n      0x68, 0x6c, 0x73, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, // compressorname\n      0x00, 0x18, // depth = 24\n      0x11, 0x11 // pre_defined = -1\n    ]), box(types.avcC, new Uint8Array([\n      0x01, // configurationVersion\n      track.profileIdc, // AVCProfileIndication\n      track.profileCompatibility, // profile_compatibility\n      track.levelIdc, // AVCLevelIndication\n      0xff // lengthSizeMinusOne, hard-coded to 4 bytes\n    ].concat([\n      sps.length // numOfSequenceParameterSets\n    ]).concat(sequenceParameterSets).concat([\n      pps.length // numOfPictureParameterSets\n    ]).concat(pictureParameterSets))), // \"PPS\"\n            box(types.btrt, new Uint8Array([\n              0x00, 0x1c, 0x9c, 0x80, // bufferSizeDB\n              0x00, 0x2d, 0xc6, 0xc0, // maxBitrate\n              0x00, 0x2d, 0xc6, 0xc0\n            ])) // avgBitrate\n              );\n  };\n\n  audioSample = function(track) {\n    return box(types.mp4a, new Uint8Array([\n\n      // SampleEntry, ISO/IEC 14496-12\n      0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, // data_reference_index\n\n      // AudioSampleEntry, ISO/IEC 14496-12\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      (track.channelcount & 0xff00) >> 8,\n      (track.channelcount & 0xff), // channelcount\n\n      (track.samplesize & 0xff00) >> 8,\n      (track.samplesize & 0xff), // samplesize\n      0x00, 0x00, // pre_defined\n      0x00, 0x00, // reserved\n\n      (track.samplerate & 0xff00) >> 8,\n      (track.samplerate & 0xff),\n      0x00, 0x00 // samplerate, 16.16\n\n      // MP4AudioSampleEntry, ISO/IEC 14496-14\n    ]), esds(track));\n  };\n}());\n\ntkhd = function(track) {\n  var result = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x07, // flags\n    0x00, 0x00, 0x00, 0x00, // creation_time\n    0x00, 0x00, 0x00, 0x00, // modification_time\n    (track.id & 0xFF000000) >> 24,\n    (track.id & 0xFF0000) >> 16,\n    (track.id & 0xFF00) >> 8,\n    track.id & 0xFF, // track_ID\n    0x00, 0x00, 0x00, 0x00, // reserved\n    (track.duration & 0xFF000000) >> 24,\n    (track.duration & 0xFF0000) >> 16,\n    (track.duration & 0xFF00) >> 8,\n    track.duration & 0xFF, // duration\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, // layer\n    0x00, 0x00, // alternate_group\n    0x01, 0x00, // non-audio track volume\n    0x00, 0x00, // reserved\n    0x00, 0x01, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x01, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\n    (track.width & 0xFF00) >> 8,\n    track.width & 0xFF,\n    0x00, 0x00, // width\n    (track.height & 0xFF00) >> 8,\n    track.height & 0xFF,\n    0x00, 0x00 // height\n  ]);\n\n  return box(types.tkhd, result);\n};\n\n/**\n * Generate a track fragment (traf) box. A traf box collects metadata\n * about tracks in a movie fragment (moof) box.\n */\ntraf = function(track) {\n  var trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun,\n      sampleDependencyTable, dataOffset,\n      upperWordBaseMediaDecodeTime, lowerWordBaseMediaDecodeTime;\n\n  trackFragmentHeader = box(types.tfhd, new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x3a, // flags\n    (track.id & 0xFF000000) >> 24,\n    (track.id & 0xFF0000) >> 16,\n    (track.id & 0xFF00) >> 8,\n    (track.id & 0xFF), // track_ID\n    0x00, 0x00, 0x00, 0x01, // sample_description_index\n    0x00, 0x00, 0x00, 0x00, // default_sample_duration\n    0x00, 0x00, 0x00, 0x00, // default_sample_size\n    0x00, 0x00, 0x00, 0x00  // default_sample_flags\n  ]));\n\n  upperWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime / (UINT32_MAX + 1));\n  lowerWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime % (UINT32_MAX + 1));\n\n  trackFragmentDecodeTime = box(types.tfdt, new Uint8Array([\n    0x01, // version 1\n    0x00, 0x00, 0x00, // flags\n    // baseMediaDecodeTime\n    (upperWordBaseMediaDecodeTime >>> 24) & 0xFF,\n    (upperWordBaseMediaDecodeTime >>> 16) & 0xFF,\n    (upperWordBaseMediaDecodeTime >>>  8) & 0xFF,\n    upperWordBaseMediaDecodeTime & 0xFF,\n    (lowerWordBaseMediaDecodeTime >>> 24) & 0xFF,\n    (lowerWordBaseMediaDecodeTime >>> 16) & 0xFF,\n    (lowerWordBaseMediaDecodeTime >>>  8) & 0xFF,\n    lowerWordBaseMediaDecodeTime & 0xFF\n  ]));\n\n  // the data offset specifies the number of bytes from the start of\n  // the containing moof to the first payload byte of the associated\n  // mdat\n  dataOffset = (32 + // tfhd\n                20 + // tfdt\n                8 +  // traf header\n                16 + // mfhd\n                8 +  // moof header\n                8);  // mdat header\n\n  // audio tracks require less metadata\n  if (track.type === 'audio') {\n    trackFragmentRun = trun(track, dataOffset);\n    return box(types.traf,\n               trackFragmentHeader,\n               trackFragmentDecodeTime,\n               trackFragmentRun);\n  }\n\n  // video tracks should contain an independent and disposable samples\n  // box (sdtp)\n  // generate one and adjust offsets to match\n  sampleDependencyTable = sdtp(track);\n  trackFragmentRun = trun(track,\n                          sampleDependencyTable.length + dataOffset);\n  return box(types.traf,\n             trackFragmentHeader,\n             trackFragmentDecodeTime,\n             trackFragmentRun,\n             sampleDependencyTable);\n};\n\n/**\n * Generate a track box.\n * @param track {object} a track definition\n * @return {Uint8Array} the track box\n */\ntrak = function(track) {\n  track.duration = track.duration || 0xffffffff;\n  return box(types.trak,\n             tkhd(track),\n             mdia(track));\n};\n\ntrex = function(track) {\n  var result = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    (track.id & 0xFF000000) >> 24,\n    (track.id & 0xFF0000) >> 16,\n    (track.id & 0xFF00) >> 8,\n    (track.id & 0xFF), // track_ID\n    0x00, 0x00, 0x00, 0x01, // default_sample_description_index\n    0x00, 0x00, 0x00, 0x00, // default_sample_duration\n    0x00, 0x00, 0x00, 0x00, // default_sample_size\n    0x00, 0x01, 0x00, 0x01 // default_sample_flags\n  ]);\n  // the last two bytes of default_sample_flags is the sample\n  // degradation priority, a hint about the importance of this sample\n  // relative to others. Lower the degradation priority for all sample\n  // types other than video.\n  if (track.type !== 'video') {\n    result[result.length - 1] = 0x00;\n  }\n\n  return box(types.trex, result);\n};\n\n(function() {\n  var audioTrun, videoTrun, trunHeader;\n\n  // This method assumes all samples are uniform. That is, if a\n  // duration is present for the first sample, it will be present for\n  // all subsequent samples.\n  // see ISO/IEC 14496-12:2012, Section 8.8.8.1\n  trunHeader = function(samples, offset) {\n    var durationPresent = 0, sizePresent = 0,\n        flagsPresent = 0, compositionTimeOffset = 0;\n\n    // trun flag constants\n    if (samples.length) {\n      if (samples[0].duration !== undefined) {\n        durationPresent = 0x1;\n      }\n      if (samples[0].size !== undefined) {\n        sizePresent = 0x2;\n      }\n      if (samples[0].flags !== undefined) {\n        flagsPresent = 0x4;\n      }\n      if (samples[0].compositionTimeOffset !== undefined) {\n        compositionTimeOffset = 0x8;\n      }\n    }\n\n    return [\n      0x00, // version 0\n      0x00,\n      durationPresent | sizePresent | flagsPresent | compositionTimeOffset,\n      0x01, // flags\n      (samples.length & 0xFF000000) >>> 24,\n      (samples.length & 0xFF0000) >>> 16,\n      (samples.length & 0xFF00) >>> 8,\n      samples.length & 0xFF, // sample_count\n      (offset & 0xFF000000) >>> 24,\n      (offset & 0xFF0000) >>> 16,\n      (offset & 0xFF00) >>> 8,\n      offset & 0xFF // data_offset\n    ];\n  };\n\n  videoTrun = function(track, offset) {\n    var bytes, samples, sample, i;\n\n    samples = track.samples || [];\n    offset += 8 + 12 + (16 * samples.length);\n\n    bytes = trunHeader(samples, offset);\n\n    for (i = 0; i < samples.length; i++) {\n      sample = samples[i];\n      bytes = bytes.concat([\n        (sample.duration & 0xFF000000) >>> 24,\n        (sample.duration & 0xFF0000) >>> 16,\n        (sample.duration & 0xFF00) >>> 8,\n        sample.duration & 0xFF, // sample_duration\n        (sample.size & 0xFF000000) >>> 24,\n        (sample.size & 0xFF0000) >>> 16,\n        (sample.size & 0xFF00) >>> 8,\n        sample.size & 0xFF, // sample_size\n        (sample.flags.isLeading << 2) | sample.flags.dependsOn,\n        (sample.flags.isDependedOn << 6) |\n          (sample.flags.hasRedundancy << 4) |\n          (sample.flags.paddingValue << 1) |\n          sample.flags.isNonSyncSample,\n        sample.flags.degradationPriority & 0xF0 << 8,\n        sample.flags.degradationPriority & 0x0F, // sample_flags\n        (sample.compositionTimeOffset & 0xFF000000) >>> 24,\n        (sample.compositionTimeOffset & 0xFF0000) >>> 16,\n        (sample.compositionTimeOffset & 0xFF00) >>> 8,\n        sample.compositionTimeOffset & 0xFF // sample_composition_time_offset\n      ]);\n    }\n    return box(types.trun, new Uint8Array(bytes));\n  };\n\n  audioTrun = function(track, offset) {\n    var bytes, samples, sample, i;\n\n    samples = track.samples || [];\n    offset += 8 + 12 + (8 * samples.length);\n\n    bytes = trunHeader(samples, offset);\n\n    for (i = 0; i < samples.length; i++) {\n      sample = samples[i];\n      bytes = bytes.concat([\n        (sample.duration & 0xFF000000) >>> 24,\n        (sample.duration & 0xFF0000) >>> 16,\n        (sample.duration & 0xFF00) >>> 8,\n        sample.duration & 0xFF, // sample_duration\n        (sample.size & 0xFF000000) >>> 24,\n        (sample.size & 0xFF0000) >>> 16,\n        (sample.size & 0xFF00) >>> 8,\n        sample.size & 0xFF]); // sample_size\n    }\n\n    return box(types.trun, new Uint8Array(bytes));\n  };\n\n  trun = function(track, offset) {\n    if (track.type === 'audio') {\n      return audioTrun(track, offset);\n    }\n\n    return videoTrun(track, offset);\n  };\n}());\n\nmodule.exports = {\n  ftyp: ftyp,\n  mdat: mdat,\n  moof: moof,\n  moov: moov,\n  initSegment: function(tracks) {\n    var\n      fileType = ftyp(),\n      movie = moov(tracks),\n      result;\n\n    result = new Uint8Array(fileType.byteLength + movie.byteLength);\n    result.set(fileType);\n    result.set(movie, fileType.byteLength);\n    return result;\n  }\n};\n","/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * Reads in-band caption information from a video elementary\n * stream. Captions must follow the CEA-708 standard for injection\n * into an MPEG-2 transport streams.\n * @see https://en.wikipedia.org/wiki/CEA-708\n * @see https://www.gpo.gov/fdsys/pkg/CFR-2007-title47-vol1/pdf/CFR-2007-title47-vol1-sec15-119.pdf\n */\n\n'use strict';\n\n// -----------------\n// Link To Transport\n// -----------------\n\nvar Stream = require('../utils/stream');\nvar cea708Parser = require('../tools/caption-packet-parser');\n\nvar CaptionStream = function() {\n\n  CaptionStream.prototype.init.call(this);\n\n  this.captionPackets_ = [];\n\n  this.ccStreams_ = [\n    new Cea608Stream(0, 0), // eslint-disable-line no-use-before-define\n    new Cea608Stream(0, 1), // eslint-disable-line no-use-before-define\n    new Cea608Stream(1, 0), // eslint-disable-line no-use-before-define\n    new Cea608Stream(1, 1) // eslint-disable-line no-use-before-define\n  ];\n\n  this.reset();\n\n  // forward data and done events from CCs to this CaptionStream\n  this.ccStreams_.forEach(function(cc) {\n    cc.on('data', this.trigger.bind(this, 'data'));\n    cc.on('done', this.trigger.bind(this, 'done'));\n  }, this);\n\n};\n\nCaptionStream.prototype = new Stream();\nCaptionStream.prototype.push = function(event) {\n  var sei, userData, newCaptionPackets;\n\n  // only examine SEI NALs\n  if (event.nalUnitType !== 'sei_rbsp') {\n    return;\n  }\n\n  // parse the sei\n  sei = cea708Parser.parseSei(event.escapedRBSP);\n\n  // ignore everything but user_data_registered_itu_t_t35\n  if (sei.payloadType !== cea708Parser.USER_DATA_REGISTERED_ITU_T_T35) {\n    return;\n  }\n\n  // parse out the user data payload\n  userData = cea708Parser.parseUserData(sei);\n\n  // ignore unrecognized userData\n  if (!userData) {\n    return;\n  }\n\n  // Sometimes, the same segment # will be downloaded twice. To stop the\n  // caption data from being processed twice, we track the latest dts we've\n  // received and ignore everything with a dts before that. However, since\n  // data for a specific dts can be split across packets on either side of\n  // a segment boundary, we need to make sure we *don't* ignore the packets\n  // from the *next* segment that have dts === this.latestDts_. By constantly\n  // tracking the number of packets received with dts === this.latestDts_, we\n  // know how many should be ignored once we start receiving duplicates.\n  if (event.dts < this.latestDts_) {\n    // We've started getting older data, so set the flag.\n    this.ignoreNextEqualDts_ = true;\n    return;\n  } else if ((event.dts === this.latestDts_) && (this.ignoreNextEqualDts_)) {\n    this.numSameDts_--;\n    if (!this.numSameDts_) {\n      // We've received the last duplicate packet, time to start processing again\n      this.ignoreNextEqualDts_ = false;\n    }\n    return;\n  }\n\n  // parse out CC data packets and save them for later\n  newCaptionPackets = cea708Parser.parseCaptionPackets(event.pts, userData);\n  this.captionPackets_ = this.captionPackets_.concat(newCaptionPackets);\n  if (this.latestDts_ !== event.dts) {\n    this.numSameDts_ = 0;\n  }\n  this.numSameDts_++;\n  this.latestDts_ = event.dts;\n};\n\nCaptionStream.prototype.flush = function() {\n  // make sure we actually parsed captions before proceeding\n  if (!this.captionPackets_.length) {\n    this.ccStreams_.forEach(function(cc) {\n      cc.flush();\n    }, this);\n    return;\n  }\n\n  // In Chrome, the Array#sort function is not stable so add a\n  // presortIndex that we can use to ensure we get a stable-sort\n  this.captionPackets_.forEach(function(elem, idx) {\n    elem.presortIndex = idx;\n  });\n\n  // sort caption byte-pairs based on their PTS values\n  this.captionPackets_.sort(function(a, b) {\n    if (a.pts === b.pts) {\n      return a.presortIndex - b.presortIndex;\n    }\n    return a.pts - b.pts;\n  });\n\n  this.captionPackets_.forEach(function(packet) {\n    if (packet.type < 2) {\n      // Dispatch packet to the right Cea608Stream\n      this.dispatchCea608Packet(packet);\n    }\n    // this is where an 'else' would go for a dispatching packets\n    // to a theoretical Cea708Stream that handles SERVICEn data\n  }, this);\n\n  this.captionPackets_.length = 0;\n  this.ccStreams_.forEach(function(cc) {\n    cc.flush();\n  }, this);\n  return;\n};\n\nCaptionStream.prototype.reset = function() {\n  this.latestDts_ = null;\n  this.ignoreNextEqualDts_ = false;\n  this.numSameDts_ = 0;\n  this.activeCea608Channel_ = [null, null];\n  this.ccStreams_.forEach(function(ccStream) {\n    ccStream.reset();\n  });\n};\n\nCaptionStream.prototype.dispatchCea608Packet = function(packet) {\n  // NOTE: packet.type is the CEA608 field\n  if (this.setsChannel1Active(packet)) {\n    this.activeCea608Channel_[packet.type] = 0;\n  } else if (this.setsChannel2Active(packet)) {\n    this.activeCea608Channel_[packet.type] = 1;\n  }\n  if (this.activeCea608Channel_[packet.type] === null) {\n    // If we haven't received anything to set the active channel, discard the\n    // data; we don't want jumbled captions\n    return;\n  }\n  this.ccStreams_[(packet.type << 1) + this.activeCea608Channel_[packet.type]].push(packet);\n};\n\nCaptionStream.prototype.setsChannel1Active = function(packet) {\n  return ((packet.ccData & 0x7800) === 0x1000);\n};\nCaptionStream.prototype.setsChannel2Active = function(packet) {\n  return ((packet.ccData & 0x7800) === 0x1800);\n};\n\n// ----------------------\n// Session to Application\n// ----------------------\n\n// This hash maps non-ASCII, special, and extended character codes to their\n// proper Unicode equivalent. The first keys that are only a single byte\n// are the non-standard ASCII characters, which simply map the CEA608 byte\n// to the standard ASCII/Unicode. The two-byte keys that follow are the CEA608\n// character codes, but have their MSB bitmasked with 0x03 so that a lookup\n// can be performed regardless of the field and data channel on which the\n// character code was received.\nvar CHARACTER_TRANSLATION = {\n  0x2a: 0xe1,     // á\n  0x5c: 0xe9,     // é\n  0x5e: 0xed,     // í\n  0x5f: 0xf3,     // ó\n  0x60: 0xfa,     // ú\n  0x7b: 0xe7,     // ç\n  0x7c: 0xf7,     // ÷\n  0x7d: 0xd1,     // Ñ\n  0x7e: 0xf1,     // ñ\n  0x7f: 0x2588,   // █\n  0x0130: 0xae,   // ®\n  0x0131: 0xb0,   // °\n  0x0132: 0xbd,   // ½\n  0x0133: 0xbf,   // ¿\n  0x0134: 0x2122, // ™\n  0x0135: 0xa2,   // ¢\n  0x0136: 0xa3,   // £\n  0x0137: 0x266a, // ♪\n  0x0138: 0xe0,   // à\n  0x0139: 0xa0,   //\n  0x013a: 0xe8,   // è\n  0x013b: 0xe2,   // â\n  0x013c: 0xea,   // ê\n  0x013d: 0xee,   // î\n  0x013e: 0xf4,   // ô\n  0x013f: 0xfb,   // û\n  0x0220: 0xc1,   // Á\n  0x0221: 0xc9,   // É\n  0x0222: 0xd3,   // Ó\n  0x0223: 0xda,   // Ú\n  0x0224: 0xdc,   // Ü\n  0x0225: 0xfc,   // ü\n  0x0226: 0x2018, // ‘\n  0x0227: 0xa1,   // ¡\n  0x0228: 0x2a,   // *\n  0x0229: 0x27,   // '\n  0x022a: 0x2014, // —\n  0x022b: 0xa9,   // ©\n  0x022c: 0x2120, // ℠\n  0x022d: 0x2022, // •\n  0x022e: 0x201c, // “\n  0x022f: 0x201d, // ”\n  0x0230: 0xc0,   // À\n  0x0231: 0xc2,   // Â\n  0x0232: 0xc7,   // Ç\n  0x0233: 0xc8,   // È\n  0x0234: 0xca,   // Ê\n  0x0235: 0xcb,   // Ë\n  0x0236: 0xeb,   // ë\n  0x0237: 0xce,   // Î\n  0x0238: 0xcf,   // Ï\n  0x0239: 0xef,   // ï\n  0x023a: 0xd4,   // Ô\n  0x023b: 0xd9,   // Ù\n  0x023c: 0xf9,   // ù\n  0x023d: 0xdb,   // Û\n  0x023e: 0xab,   // «\n  0x023f: 0xbb,   // »\n  0x0320: 0xc3,   // Ã\n  0x0321: 0xe3,   // ã\n  0x0322: 0xcd,   // Í\n  0x0323: 0xcc,   // Ì\n  0x0324: 0xec,   // ì\n  0x0325: 0xd2,   // Ò\n  0x0326: 0xf2,   // ò\n  0x0327: 0xd5,   // Õ\n  0x0328: 0xf5,   // õ\n  0x0329: 0x7b,   // {\n  0x032a: 0x7d,   // }\n  0x032b: 0x5c,   // \\\n  0x032c: 0x5e,   // ^\n  0x032d: 0x5f,   // _\n  0x032e: 0x7c,   // |\n  0x032f: 0x7e,   // ~\n  0x0330: 0xc4,   // Ä\n  0x0331: 0xe4,   // ä\n  0x0332: 0xd6,   // Ö\n  0x0333: 0xf6,   // ö\n  0x0334: 0xdf,   // ß\n  0x0335: 0xa5,   // ¥\n  0x0336: 0xa4,   // ¤\n  0x0337: 0x2502, // │\n  0x0338: 0xc5,   // Å\n  0x0339: 0xe5,   // å\n  0x033a: 0xd8,   // Ø\n  0x033b: 0xf8,   // ø\n  0x033c: 0x250c, // ┌\n  0x033d: 0x2510, // ┐\n  0x033e: 0x2514, // └\n  0x033f: 0x2518  // ┘\n};\n\nvar getCharFromCode = function(code) {\n  if (code === null) {\n    return '';\n  }\n  code = CHARACTER_TRANSLATION[code] || code;\n  return String.fromCharCode(code);\n};\n\n// the index of the last row in a CEA-608 display buffer\nvar BOTTOM_ROW = 14;\n\n// This array is used for mapping PACs -> row #, since there's no way of\n// getting it through bit logic.\nvar ROWS = [0x1100, 0x1120, 0x1200, 0x1220, 0x1500, 0x1520, 0x1600, 0x1620,\n            0x1700, 0x1720, 0x1000, 0x1300, 0x1320, 0x1400, 0x1420];\n\n// CEA-608 captions are rendered onto a 34x15 matrix of character\n// cells. The \"bottom\" row is the last element in the outer array.\nvar createDisplayBuffer = function() {\n  var result = [], i = BOTTOM_ROW + 1;\n  while (i--) {\n    result.push('');\n  }\n  return result;\n};\n\nvar Cea608Stream = function(field, dataChannel) {\n  Cea608Stream.prototype.init.call(this);\n\n  this.field_ = field || 0;\n  this.dataChannel_ = dataChannel || 0;\n\n  this.name_ = 'CC' + (((this.field_ << 1) | this.dataChannel_) + 1);\n\n  this.setConstants();\n  this.reset();\n\n  this.push = function(packet) {\n    var data, swap, char0, char1, text;\n    // remove the parity bits\n    data = packet.ccData & 0x7f7f;\n\n    // ignore duplicate control codes; the spec demands they're sent twice\n    if (data === this.lastControlCode_) {\n      this.lastControlCode_ = null;\n      return;\n    }\n\n    // Store control codes\n    if ((data & 0xf000) === 0x1000) {\n      this.lastControlCode_ = data;\n    } else if (data !== this.PADDING_) {\n      this.lastControlCode_ = null;\n    }\n\n    char0 = data >>> 8;\n    char1 = data & 0xff;\n\n    if (data === this.PADDING_) {\n      return;\n\n    } else if (data === this.RESUME_CAPTION_LOADING_) {\n      this.mode_ = 'popOn';\n\n    } else if (data === this.END_OF_CAPTION_) {\n      // If an EOC is received while in paint-on mode, the displayed caption\n      // text should be swapped to non-displayed memory as if it was a pop-on\n      // caption. Because of that, we should explicitly switch back to pop-on\n      // mode\n      this.mode_ = 'popOn';\n      this.clearFormatting(packet.pts);\n      // if a caption was being displayed, it's gone now\n      this.flushDisplayed(packet.pts);\n\n      // flip memory\n      swap = this.displayed_;\n      this.displayed_ = this.nonDisplayed_;\n      this.nonDisplayed_ = swap;\n\n      // start measuring the time to display the caption\n      this.startPts_ = packet.pts;\n\n    } else if (data === this.ROLL_UP_2_ROWS_) {\n      this.rollUpRows_ = 2;\n      this.setRollUp(packet.pts);\n    } else if (data === this.ROLL_UP_3_ROWS_) {\n      this.rollUpRows_ = 3;\n      this.setRollUp(packet.pts);\n    } else if (data === this.ROLL_UP_4_ROWS_) {\n      this.rollUpRows_ = 4;\n      this.setRollUp(packet.pts);\n    } else if (data === this.CARRIAGE_RETURN_) {\n      this.clearFormatting(packet.pts);\n      this.flushDisplayed(packet.pts);\n      this.shiftRowsUp_();\n      this.startPts_ = packet.pts;\n\n    } else if (data === this.BACKSPACE_) {\n      if (this.mode_ === 'popOn') {\n        this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);\n      } else {\n        this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1);\n      }\n    } else if (data === this.ERASE_DISPLAYED_MEMORY_) {\n      this.flushDisplayed(packet.pts);\n      this.displayed_ = createDisplayBuffer();\n    } else if (data === this.ERASE_NON_DISPLAYED_MEMORY_) {\n      this.nonDisplayed_ = createDisplayBuffer();\n\n    } else if (data === this.RESUME_DIRECT_CAPTIONING_) {\n      if (this.mode_ !== 'paintOn') {\n        // NOTE: This should be removed when proper caption positioning is\n        // implemented\n        this.flushDisplayed(packet.pts);\n        this.displayed_ = createDisplayBuffer();\n      }\n      this.mode_ = 'paintOn';\n      this.startPts_ = packet.pts;\n\n    // Append special characters to caption text\n    } else if (this.isSpecialCharacter(char0, char1)) {\n      // Bitmask char0 so that we can apply character transformations\n      // regardless of field and data channel.\n      // Then byte-shift to the left and OR with char1 so we can pass the\n      // entire character code to `getCharFromCode`.\n      char0 = (char0 & 0x03) << 8;\n      text = getCharFromCode(char0 | char1);\n      this[this.mode_](packet.pts, text);\n      this.column_++;\n\n    // Append extended characters to caption text\n    } else if (this.isExtCharacter(char0, char1)) {\n      // Extended characters always follow their \"non-extended\" equivalents.\n      // IE if a \"è\" is desired, you'll always receive \"eè\"; non-compliant\n      // decoders are supposed to drop the \"è\", while compliant decoders\n      // backspace the \"e\" and insert \"è\".\n\n      // Delete the previous character\n      if (this.mode_ === 'popOn') {\n        this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);\n      } else {\n        this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1);\n      }\n\n      // Bitmask char0 so that we can apply character transformations\n      // regardless of field and data channel.\n      // Then byte-shift to the left and OR with char1 so we can pass the\n      // entire character code to `getCharFromCode`.\n      char0 = (char0 & 0x03) << 8;\n      text = getCharFromCode(char0 | char1);\n      this[this.mode_](packet.pts, text);\n      this.column_++;\n\n    // Process mid-row codes\n    } else if (this.isMidRowCode(char0, char1)) {\n      // Attributes are not additive, so clear all formatting\n      this.clearFormatting(packet.pts);\n\n      // According to the standard, mid-row codes\n      // should be replaced with spaces, so add one now\n      this[this.mode_](packet.pts, ' ');\n      this.column_++;\n\n      if ((char1 & 0xe) === 0xe) {\n        this.addFormatting(packet.pts, ['i']);\n      }\n\n      if ((char1 & 0x1) === 0x1) {\n        this.addFormatting(packet.pts, ['u']);\n      }\n\n    // Detect offset control codes and adjust cursor\n    } else if (this.isOffsetControlCode(char0, char1)) {\n      // Cursor position is set by indent PAC (see below) in 4-column\n      // increments, with an additional offset code of 1-3 to reach any\n      // of the 32 columns specified by CEA-608. So all we need to do\n      // here is increment the column cursor by the given offset.\n      this.column_ += (char1 & 0x03);\n\n    // Detect PACs (Preamble Address Codes)\n    } else if (this.isPAC(char0, char1)) {\n\n      // There's no logic for PAC -> row mapping, so we have to just\n      // find the row code in an array and use its index :(\n      var row = ROWS.indexOf(data & 0x1f20);\n\n      // Configure the caption window if we're in roll-up mode\n      if (this.mode_ === 'rollUp') {\n        this.setRollUp(packet.pts, row);\n      }\n\n      if (row !== this.row_) {\n        // formatting is only persistent for current row\n        this.clearFormatting(packet.pts);\n        this.row_ = row;\n      }\n      // All PACs can apply underline, so detect and apply\n      // (All odd-numbered second bytes set underline)\n      if ((char1 & 0x1) && (this.formatting_.indexOf('u') === -1)) {\n          this.addFormatting(packet.pts, ['u']);\n      }\n\n      if ((data & 0x10) === 0x10) {\n        // We've got an indent level code. Each successive even number\n        // increments the column cursor by 4, so we can get the desired\n        // column position by bit-shifting to the right (to get n/2)\n        // and multiplying by 4.\n        this.column_ = ((data & 0xe) >> 1) * 4;\n      }\n\n      if (this.isColorPAC(char1)) {\n        // it's a color code, though we only support white, which\n        // can be either normal or italicized. white italics can be\n        // either 0x4e or 0x6e depending on the row, so we just\n        // bitwise-and with 0xe to see if italics should be turned on\n        if ((char1 & 0xe) === 0xe) {\n          this.addFormatting(packet.pts, ['i']);\n        }\n      }\n\n    // We have a normal character in char0, and possibly one in char1\n    } else if (this.isNormalChar(char0)) {\n      if (char1 === 0x00) {\n        char1 = null;\n      }\n      text = getCharFromCode(char0);\n      text += getCharFromCode(char1);\n      this[this.mode_](packet.pts, text);\n      this.column_ += text.length;\n\n    } // finish data processing\n\n  };\n};\nCea608Stream.prototype = new Stream();\n// Trigger a cue point that captures the current state of the\n// display buffer\nCea608Stream.prototype.flushDisplayed = function(pts) {\n  var content = this.displayed_\n    // remove spaces from the start and end of the string\n    .map(function(row) {\n      return row.trim();\n    })\n    // combine all text rows to display in one cue\n    .join('\\n')\n    // and remove blank rows from the start and end, but not the middle\n    .replace(/^\\n+|\\n+$/g, '');\n\n  if (content.length) {\n    this.trigger('data', {\n      startPts: this.startPts_,\n      endPts: pts,\n      text: content,\n      stream: this.name_\n    });\n  }\n};\n\n/**\n * Zero out the data, used for startup and on seek\n */\nCea608Stream.prototype.reset = function() {\n  this.mode_ = 'popOn';\n  // When in roll-up mode, the index of the last row that will\n  // actually display captions. If a caption is shifted to a row\n  // with a lower index than this, it is cleared from the display\n  // buffer\n  this.topRow_ = 0;\n  this.startPts_ = 0;\n  this.displayed_ = createDisplayBuffer();\n  this.nonDisplayed_ = createDisplayBuffer();\n  this.lastControlCode_ = null;\n\n  // Track row and column for proper line-breaking and spacing\n  this.column_ = 0;\n  this.row_ = BOTTOM_ROW;\n  this.rollUpRows_ = 2;\n\n  // This variable holds currently-applied formatting\n  this.formatting_ = [];\n};\n\n/**\n * Sets up control code and related constants for this instance\n */\nCea608Stream.prototype.setConstants = function() {\n  // The following attributes have these uses:\n  // ext_ :    char0 for mid-row codes, and the base for extended\n  //           chars (ext_+0, ext_+1, and ext_+2 are char0s for\n  //           extended codes)\n  // control_: char0 for control codes, except byte-shifted to the\n  //           left so that we can do this.control_ | CONTROL_CODE\n  // offset_:  char0 for tab offset codes\n  //\n  // It's also worth noting that control codes, and _only_ control codes,\n  // differ between field 1 and field2. Field 2 control codes are always\n  // their field 1 value plus 1. That's why there's the \"| field\" on the\n  // control value.\n  if (this.dataChannel_ === 0) {\n    this.BASE_     = 0x10;\n    this.EXT_      = 0x11;\n    this.CONTROL_  = (0x14 | this.field_) << 8;\n    this.OFFSET_   = 0x17;\n  } else if (this.dataChannel_ === 1) {\n    this.BASE_     = 0x18;\n    this.EXT_      = 0x19;\n    this.CONTROL_  = (0x1c | this.field_) << 8;\n    this.OFFSET_   = 0x1f;\n  }\n\n  // Constants for the LSByte command codes recognized by Cea608Stream. This\n  // list is not exhaustive. For a more comprehensive listing and semantics see\n  // http://www.gpo.gov/fdsys/pkg/CFR-2010-title47-vol1/pdf/CFR-2010-title47-vol1-sec15-119.pdf\n  // Padding\n  this.PADDING_                    = 0x0000;\n  // Pop-on Mode\n  this.RESUME_CAPTION_LOADING_     = this.CONTROL_ | 0x20;\n  this.END_OF_CAPTION_             = this.CONTROL_ | 0x2f;\n  // Roll-up Mode\n  this.ROLL_UP_2_ROWS_             = this.CONTROL_ | 0x25;\n  this.ROLL_UP_3_ROWS_             = this.CONTROL_ | 0x26;\n  this.ROLL_UP_4_ROWS_             = this.CONTROL_ | 0x27;\n  this.CARRIAGE_RETURN_            = this.CONTROL_ | 0x2d;\n  // paint-on mode\n  this.RESUME_DIRECT_CAPTIONING_   = this.CONTROL_ | 0x29;\n  // Erasure\n  this.BACKSPACE_                  = this.CONTROL_ | 0x21;\n  this.ERASE_DISPLAYED_MEMORY_     = this.CONTROL_ | 0x2c;\n  this.ERASE_NON_DISPLAYED_MEMORY_ = this.CONTROL_ | 0x2e;\n};\n\n/**\n * Detects if the 2-byte packet data is a special character\n *\n * Special characters have a second byte in the range 0x30 to 0x3f,\n * with the first byte being 0x11 (for data channel 1) or 0x19 (for\n * data channel 2).\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are an special character\n */\nCea608Stream.prototype.isSpecialCharacter = function(char0, char1) {\n  return (char0 === this.EXT_ && char1 >= 0x30 && char1 <= 0x3f);\n};\n\n/**\n * Detects if the 2-byte packet data is an extended character\n *\n * Extended characters have a second byte in the range 0x20 to 0x3f,\n * with the first byte being 0x12 or 0x13 (for data channel 1) or\n * 0x1a or 0x1b (for data channel 2).\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are an extended character\n */\nCea608Stream.prototype.isExtCharacter = function(char0, char1) {\n  return ((char0 === (this.EXT_ + 1) || char0 === (this.EXT_ + 2)) &&\n    (char1 >= 0x20 && char1 <= 0x3f));\n};\n\n/**\n * Detects if the 2-byte packet is a mid-row code\n *\n * Mid-row codes have a second byte in the range 0x20 to 0x2f, with\n * the first byte being 0x11 (for data channel 1) or 0x19 (for data\n * channel 2).\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are a mid-row code\n */\nCea608Stream.prototype.isMidRowCode = function(char0, char1) {\n  return (char0 === this.EXT_ && (char1 >= 0x20 && char1 <= 0x2f));\n};\n\n/**\n * Detects if the 2-byte packet is an offset control code\n *\n * Offset control codes have a second byte in the range 0x21 to 0x23,\n * with the first byte being 0x17 (for data channel 1) or 0x1f (for\n * data channel 2).\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are an offset control code\n */\nCea608Stream.prototype.isOffsetControlCode = function(char0, char1) {\n  return (char0 === this.OFFSET_ && (char1 >= 0x21 && char1 <= 0x23));\n};\n\n/**\n * Detects if the 2-byte packet is a Preamble Address Code\n *\n * PACs have a first byte in the range 0x10 to 0x17 (for data channel 1)\n * or 0x18 to 0x1f (for data channel 2), with the second byte in the\n * range 0x40 to 0x7f.\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are a PAC\n */\nCea608Stream.prototype.isPAC = function(char0, char1) {\n  return (char0 >= this.BASE_ && char0 < (this.BASE_ + 8) &&\n    (char1 >= 0x40 && char1 <= 0x7f));\n};\n\n/**\n * Detects if a packet's second byte is in the range of a PAC color code\n *\n * PAC color codes have the second byte be in the range 0x40 to 0x4f, or\n * 0x60 to 0x6f.\n *\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the byte is a color PAC\n */\nCea608Stream.prototype.isColorPAC = function(char1) {\n  return ((char1 >= 0x40 && char1 <= 0x4f) || (char1 >= 0x60 && char1 <= 0x7f));\n};\n\n/**\n * Detects if a single byte is in the range of a normal character\n *\n * Normal text bytes are in the range 0x20 to 0x7f.\n *\n * @param  {Integer} char  The byte\n * @return {Boolean}       Whether the byte is a normal character\n */\nCea608Stream.prototype.isNormalChar = function(char) {\n  return (char >= 0x20 && char <= 0x7f);\n};\n\n/**\n * Configures roll-up\n *\n * @param  {Integer} pts         Current PTS\n * @param  {Integer} newBaseRow  Used by PACs to slide the current window to\n *                               a new position\n */\nCea608Stream.prototype.setRollUp = function(pts, newBaseRow) {\n  // Reset the base row to the bottom row when switching modes\n  if (this.mode_ !== 'rollUp') {\n    this.row_ = BOTTOM_ROW;\n    this.mode_ = 'rollUp';\n    // Spec says to wipe memories when switching to roll-up\n    this.flushDisplayed(pts);\n    this.nonDisplayed_ = createDisplayBuffer();\n    this.displayed_ = createDisplayBuffer();\n  }\n\n  if (newBaseRow !== undefined && newBaseRow !== this.row_) {\n    // move currently displayed captions (up or down) to the new base row\n    for (var i = 0; i < this.rollUpRows_; i++) {\n      this.displayed_[newBaseRow - i] = this.displayed_[this.row_ - i];\n      this.displayed_[this.row_ - i] = '';\n    }\n  }\n\n  if (newBaseRow === undefined) {\n    newBaseRow = this.row_;\n  }\n  this.topRow_ = newBaseRow - this.rollUpRows_ + 1;\n};\n\n// Adds the opening HTML tag for the passed character to the caption text,\n// and keeps track of it for later closing\nCea608Stream.prototype.addFormatting = function(pts, format) {\n  this.formatting_ = this.formatting_.concat(format);\n  var text = format.reduce(function(text, format) {\n    return text + '<' + format + '>';\n  }, '');\n  this[this.mode_](pts, text);\n};\n\n// Adds HTML closing tags for current formatting to caption text and\n// clears remembered formatting\nCea608Stream.prototype.clearFormatting = function(pts) {\n  if (!this.formatting_.length) {\n    return;\n  }\n  var text = this.formatting_.reverse().reduce(function(text, format) {\n    return text + '</' + format + '>';\n  }, '');\n  this.formatting_ = [];\n  this[this.mode_](pts, text);\n};\n\n// Mode Implementations\nCea608Stream.prototype.popOn = function(pts, text) {\n  var baseRow = this.nonDisplayed_[this.row_];\n\n  // buffer characters\n  baseRow += text;\n  this.nonDisplayed_[this.row_] = baseRow;\n};\n\nCea608Stream.prototype.rollUp = function(pts, text) {\n  var baseRow = this.displayed_[this.row_];\n\n  baseRow += text;\n  this.displayed_[this.row_] = baseRow;\n\n};\n\nCea608Stream.prototype.shiftRowsUp_ = function() {\n  var i;\n  // clear out inactive rows\n  for (i = 0; i < this.topRow_; i++) {\n    this.displayed_[i] = '';\n  }\n  for (i = this.row_ + 1; i < BOTTOM_ROW + 1; i++) {\n    this.displayed_[i] = '';\n  }\n  // shift displayed rows up\n  for (i = this.topRow_; i < this.row_; i++) {\n    this.displayed_[i] = this.displayed_[i + 1];\n  }\n  // clear out the bottom row\n  this.displayed_[this.row_] = '';\n};\n\nCea608Stream.prototype.paintOn = function(pts, text) {\n  var baseRow = this.displayed_[this.row_];\n\n  baseRow += text;\n  this.displayed_[this.row_] = baseRow;\n};\n\n// exports\nmodule.exports = {\n  CaptionStream: CaptionStream,\n  Cea608Stream: Cea608Stream\n};\n","/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * Reads in-band caption information from a video elementary\n * stream. Captions must follow the CEA-708 standard for injection\n * into an MPEG-2 transport streams.\n * @see https://en.wikipedia.org/wiki/CEA-708\n * @see https://www.gpo.gov/fdsys/pkg/CFR-2007-title47-vol1/pdf/CFR-2007-title47-vol1-sec15-119.pdf\n */\n\n'use strict';\n\n// Supplemental enhancement information (SEI) NAL units have a\n// payload type field to indicate how they are to be\n// interpreted. CEAS-708 caption content is always transmitted with\n// payload type 0x04.\nvar USER_DATA_REGISTERED_ITU_T_T35 = 4,\n    RBSP_TRAILING_BITS = 128;\n\n/**\n  * Parse a supplemental enhancement information (SEI) NAL unit.\n  * Stops parsing once a message of type ITU T T35 has been found.\n  *\n  * @param bytes {Uint8Array} the bytes of a SEI NAL unit\n  * @return {object} the parsed SEI payload\n  * @see Rec. ITU-T H.264, 7.3.2.3.1\n  */\nvar parseSei = function(bytes) {\n  var\n    i = 0,\n    result = {\n      payloadType: -1,\n      payloadSize: 0\n    },\n    payloadType = 0,\n    payloadSize = 0;\n\n  // go through the sei_rbsp parsing each each individual sei_message\n  while (i < bytes.byteLength) {\n    // stop once we have hit the end of the sei_rbsp\n    if (bytes[i] === RBSP_TRAILING_BITS) {\n      break;\n    }\n\n    // Parse payload type\n    while (bytes[i] === 0xFF) {\n      payloadType += 255;\n      i++;\n    }\n    payloadType += bytes[i++];\n\n    // Parse payload size\n    while (bytes[i] === 0xFF) {\n      payloadSize += 255;\n      i++;\n    }\n    payloadSize += bytes[i++];\n\n    // this sei_message is a 608/708 caption so save it and break\n    // there can only ever be one caption message in a frame's sei\n    if (!result.payload && payloadType === USER_DATA_REGISTERED_ITU_T_T35) {\n      result.payloadType = payloadType;\n      result.payloadSize = payloadSize;\n      result.payload = bytes.subarray(i, i + payloadSize);\n      break;\n    }\n\n    // skip the payload and parse the next message\n    i += payloadSize;\n    payloadType = 0;\n    payloadSize = 0;\n  }\n\n  return result;\n};\n\n// see ANSI/SCTE 128-1 (2013), section 8.1\nvar parseUserData = function(sei) {\n  // itu_t_t35_contry_code must be 181 (United States) for\n  // captions\n  if (sei.payload[0] !== 181) {\n    return null;\n  }\n\n  // itu_t_t35_provider_code should be 49 (ATSC) for captions\n  if (((sei.payload[1] << 8) | sei.payload[2]) !== 49) {\n    return null;\n  }\n\n  // the user_identifier should be \"GA94\" to indicate ATSC1 data\n  if (String.fromCharCode(sei.payload[3],\n                          sei.payload[4],\n                          sei.payload[5],\n                          sei.payload[6]) !== 'GA94') {\n    return null;\n  }\n\n  // finally, user_data_type_code should be 0x03 for caption data\n  if (sei.payload[7] !== 0x03) {\n    return null;\n  }\n\n  // return the user_data_type_structure and strip the trailing\n  // marker bits\n  return sei.payload.subarray(8, sei.payload.length - 1);\n};\n\n// see CEA-708-D, section 4.4\nvar parseCaptionPackets = function(pts, userData) {\n  var results = [], i, count, offset, data;\n\n  // if this is just filler, return immediately\n  if (!(userData[0] & 0x40)) {\n    return results;\n  }\n\n  // parse out the cc_data_1 and cc_data_2 fields\n  count = userData[0] & 0x1f;\n  for (i = 0; i < count; i++) {\n    offset = i * 3;\n    data = {\n      type: userData[offset + 2] & 0x03,\n      pts: pts\n    };\n\n    // capture cc data when cc_valid is 1\n    if (userData[offset + 2] & 0x04) {\n      data.ccData = (userData[offset + 3] << 8) | userData[offset + 4];\n      results.push(data);\n    }\n  }\n  return results;\n};\n\nvar discardEmulationPreventionBytes = function(data) {\n    var\n      length = data.byteLength,\n      emulationPreventionBytesPositions = [],\n      i = 1,\n      newLength, newData;\n\n    // Find all `Emulation Prevention Bytes`\n    while (i < length - 2) {\n      if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {\n        emulationPreventionBytesPositions.push(i + 2);\n        i += 2;\n      } else {\n        i++;\n      }\n    }\n\n    // If no Emulation Prevention Bytes were found just return the original\n    // array\n    if (emulationPreventionBytesPositions.length === 0) {\n      return data;\n    }\n\n    // Create a new array to hold the NAL unit data\n    newLength = length - emulationPreventionBytesPositions.length;\n    newData = new Uint8Array(newLength);\n    var sourceIndex = 0;\n\n    for (i = 0; i < newLength; sourceIndex++, i++) {\n      if (sourceIndex === emulationPreventionBytesPositions[0]) {\n        // Skip this byte\n        sourceIndex++;\n        // Remove this position index\n        emulationPreventionBytesPositions.shift();\n      }\n      newData[i] = data[sourceIndex];\n    }\n\n    return newData;\n};\n\n// exports\nmodule.exports = {\n  parseSei: parseSei,\n  parseUserData: parseUserData,\n  parseCaptionPackets: parseCaptionPackets,\n  discardEmulationPreventionBytes: discardEmulationPreventionBytes,\n  USER_DATA_REGISTERED_ITU_T_T35: USER_DATA_REGISTERED_ITU_T_T35\n};\n","/**\n * mux.js\n *\n * Copyright (c) 2016 Brightcove\n * All rights reserved.\n *\n * Accepts program elementary stream (PES) data events and corrects\n * decode and presentation time stamps to account for a rollover\n * of the 33 bit value.\n */\n\n'use strict';\n\nvar Stream = require('../utils/stream');\n\nvar MAX_TS = 8589934592;\n\nvar RO_THRESH = 4294967296;\n\nvar handleRollover = function(value, reference) {\n  var direction = 1;\n\n  if (value > reference) {\n    // If the current timestamp value is greater than our reference timestamp and we detect a\n    // timestamp rollover, this means the roll over is happening in the opposite direction.\n    // Example scenario: Enter a long stream/video just after a rollover occurred. The reference\n    // point will be set to a small number, e.g. 1. The user then seeks backwards over the\n    // rollover point. In loading this segment, the timestamp values will be very large,\n    // e.g. 2^33 - 1. Since this comes before the data we loaded previously, we want to adjust\n    // the time stamp to be `value - 2^33`.\n    direction = -1;\n  }\n\n  // Note: A seek forwards or back that is greater than the RO_THRESH (2^32, ~13 hours) will\n  // cause an incorrect adjustment.\n  while (Math.abs(reference - value) > RO_THRESH) {\n    value += (direction * MAX_TS);\n  }\n\n  return value;\n};\n\nvar TimestampRolloverStream = function(type) {\n  var lastDTS, referenceDTS;\n\n  TimestampRolloverStream.prototype.init.call(this);\n\n  this.type_ = type;\n\n  this.push = function(data) {\n    if (data.type !== this.type_) {\n      return;\n    }\n\n    if (referenceDTS === undefined) {\n      referenceDTS = data.dts;\n    }\n\n    data.dts = handleRollover(data.dts, referenceDTS);\n    data.pts = handleRollover(data.pts, referenceDTS);\n\n    lastDTS = data.dts;\n\n    this.trigger('data', data);\n  };\n\n  this.flush = function() {\n    referenceDTS = lastDTS;\n    this.trigger('done');\n  };\n\n  this.discontinuity = function() {\n    referenceDTS = void 0;\n    lastDTS = void 0;\n  };\n\n};\n\nTimestampRolloverStream.prototype = new Stream();\n\nmodule.exports = {\n  TimestampRolloverStream: TimestampRolloverStream,\n  handleRollover: handleRollover\n};\n","// helper for String#{startsWith, endsWith, includes}\nvar isRegExp = require('./_is-regexp');\nvar defined = require('./_defined');\n\nmodule.exports = function (that, searchString, NAME) {\n  if (isRegExp(searchString)) throw TypeError('String#' + NAME + \" doesn't accept regex!\");\n  return String(defined(that));\n};\n","var MATCH = require('./_wks')('match');\nmodule.exports = function (KEY) {\n  var re = /./;\n  try {\n    '/./'[KEY](re);\n  } catch (e) {\n    try {\n      re[MATCH] = false;\n      return !'/./'[KEY](re);\n    } catch (f) { /* empty */ }\n  } return true;\n};\n","var topLevel = typeof global !== 'undefined' ? global :\n    typeof window !== 'undefined' ? window : {}\nvar minDoc = require('min-document');\n\nvar doccy;\n\nif (typeof document !== 'undefined') {\n    doccy = document;\n} else {\n    doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];\n\n    if (!doccy) {\n        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;\n    }\n}\n\nmodule.exports = doccy;\n","function clean (s) {\n  return s.replace(/\\n\\r?\\s*/g, '')\n}\n\n\nmodule.exports = function tsml (sa) {\n  var s = ''\n    , i = 0\n\n  for (; i < arguments.length; i++)\n    s += clean(sa[i]) + (arguments[i + 1] || '')\n\n  return s\n}","\"use strict\";\nvar window = require(\"global/window\")\nvar isFunction = require(\"is-function\")\nvar parseHeaders = require(\"parse-headers\")\nvar xtend = require(\"xtend\")\n\nmodule.exports = createXHR\ncreateXHR.XMLHttpRequest = window.XMLHttpRequest || noop\ncreateXHR.XDomainRequest = \"withCredentials\" in (new createXHR.XMLHttpRequest()) ? createXHR.XMLHttpRequest : window.XDomainRequest\n\nforEachArray([\"get\", \"put\", \"post\", \"patch\", \"head\", \"delete\"], function(method) {\n    createXHR[method === \"delete\" ? \"del\" : method] = function(uri, options, callback) {\n        options = initParams(uri, options, callback)\n        options.method = method.toUpperCase()\n        return _createXHR(options)\n    }\n})\n\nfunction forEachArray(array, iterator) {\n    for (var i = 0; i < array.length; i++) {\n        iterator(array[i])\n    }\n}\n\nfunction isEmpty(obj){\n    for(var i in obj){\n        if(obj.hasOwnProperty(i)) return false\n    }\n    return true\n}\n\nfunction initParams(uri, options, callback) {\n    var params = uri\n\n    if (isFunction(options)) {\n        callback = options\n        if (typeof uri === \"string\") {\n            params = {uri:uri}\n        }\n    } else {\n        params = xtend(options, {uri: uri})\n    }\n\n    params.callback = callback\n    return params\n}\n\nfunction createXHR(uri, options, callback) {\n    options = initParams(uri, options, callback)\n    return _createXHR(options)\n}\n\nfunction _createXHR(options) {\n    if(typeof options.callback === \"undefined\"){\n        throw new Error(\"callback argument missing\")\n    }\n\n    var called = false\n    var callback = function cbOnce(err, response, body){\n        if(!called){\n            called = true\n            options.callback(err, response, body)\n        }\n    }\n\n    function readystatechange() {\n        if (xhr.readyState === 4) {\n            setTimeout(loadFunc, 0)\n        }\n    }\n\n    function getBody() {\n        // Chrome with requestType=blob throws errors arround when even testing access to responseText\n        var body = undefined\n\n        if (xhr.response) {\n            body = xhr.response\n        } else {\n            body = xhr.responseText || getXml(xhr)\n        }\n\n        if (isJson) {\n            try {\n                body = JSON.parse(body)\n            } catch (e) {}\n        }\n\n        return body\n    }\n\n    function errorFunc(evt) {\n        clearTimeout(timeoutTimer)\n        if(!(evt instanceof Error)){\n            evt = new Error(\"\" + (evt || \"Unknown XMLHttpRequest Error\") )\n        }\n        evt.statusCode = 0\n        return callback(evt, failureResponse)\n    }\n\n    // will load the data & process the response in a special response object\n    function loadFunc() {\n        if (aborted) return\n        var status\n        clearTimeout(timeoutTimer)\n        if(options.useXDR && xhr.status===undefined) {\n            //IE8 CORS GET successful response doesn't have a status field, but body is fine\n            status = 200\n        } else {\n            status = (xhr.status === 1223 ? 204 : xhr.status)\n        }\n        var response = failureResponse\n        var err = null\n\n        if (status !== 0){\n            response = {\n                body: getBody(),\n                statusCode: status,\n                method: method,\n                headers: {},\n                url: uri,\n                rawRequest: xhr\n            }\n            if(xhr.getAllResponseHeaders){ //remember xhr can in fact be XDR for CORS in IE\n                response.headers = parseHeaders(xhr.getAllResponseHeaders())\n            }\n        } else {\n            err = new Error(\"Internal XMLHttpRequest Error\")\n        }\n        return callback(err, response, response.body)\n    }\n\n    var xhr = options.xhr || null\n\n    if (!xhr) {\n        if (options.cors || options.useXDR) {\n            xhr = new createXHR.XDomainRequest()\n        }else{\n            xhr = new createXHR.XMLHttpRequest()\n        }\n    }\n\n    var key\n    var aborted\n    var uri = xhr.url = options.uri || options.url\n    var method = xhr.method = options.method || \"GET\"\n    var body = options.body || options.data\n    var headers = xhr.headers = options.headers || {}\n    var sync = !!options.sync\n    var isJson = false\n    var timeoutTimer\n    var failureResponse = {\n        body: undefined,\n        headers: {},\n        statusCode: 0,\n        method: method,\n        url: uri,\n        rawRequest: xhr\n    }\n\n    if (\"json\" in options && options.json !== false) {\n        isJson = true\n        headers[\"accept\"] || headers[\"Accept\"] || (headers[\"Accept\"] = \"application/json\") //Don't override existing accept header declared by user\n        if (method !== \"GET\" && method !== \"HEAD\") {\n            headers[\"content-type\"] || headers[\"Content-Type\"] || (headers[\"Content-Type\"] = \"application/json\") //Don't override existing accept header declared by user\n            body = JSON.stringify(options.json === true ? body : options.json)\n        }\n    }\n\n    xhr.onreadystatechange = readystatechange\n    xhr.onload = loadFunc\n    xhr.onerror = errorFunc\n    // IE9 must have onprogress be set to a unique function.\n    xhr.onprogress = function () {\n        // IE must die\n    }\n    xhr.onabort = function(){\n        aborted = true;\n    }\n    xhr.ontimeout = errorFunc\n    xhr.open(method, uri, !sync, options.username, options.password)\n    //has to be after open\n    if(!sync) {\n        xhr.withCredentials = !!options.withCredentials\n    }\n    // Cannot set timeout with sync request\n    // not setting timeout on the xhr object, because of old webkits etc. not handling that correctly\n    // both npm's request and jquery 1.x use this kind of timeout, so this is being consistent\n    if (!sync && options.timeout > 0 ) {\n        timeoutTimer = setTimeout(function(){\n            if (aborted) return\n            aborted = true//IE9 may still call readystatechange\n            xhr.abort(\"timeout\")\n            var e = new Error(\"XMLHttpRequest timeout\")\n            e.code = \"ETIMEDOUT\"\n            errorFunc(e)\n        }, options.timeout )\n    }\n\n    if (xhr.setRequestHeader) {\n        for(key in headers){\n            if(headers.hasOwnProperty(key)){\n                xhr.setRequestHeader(key, headers[key])\n            }\n        }\n    } else if (options.headers && !isEmpty(options.headers)) {\n        throw new Error(\"Headers cannot be set on an XDomainRequest object\")\n    }\n\n    if (\"responseType\" in options) {\n        xhr.responseType = options.responseType\n    }\n\n    if (\"beforeSend\" in options &&\n        typeof options.beforeSend === \"function\"\n    ) {\n        options.beforeSend(xhr)\n    }\n\n    // Microsoft Edge browser sends \"undefined\" when send is called with undefined value.\n    // XMLHttpRequest spec says to pass null as body to indicate no body\n    // See https://github.com/naugtur/xhr/issues/100.\n    xhr.send(body || null)\n\n    return xhr\n\n\n}\n\nfunction getXml(xhr) {\n    if (xhr.responseType === \"document\") {\n        return xhr.responseXML\n    }\n    var firefoxBugTakenEffect = xhr.responseXML && xhr.responseXML.documentElement.nodeName === \"parsererror\"\n    if (xhr.responseType === \"\" && !firefoxBugTakenEffect) {\n        return xhr.responseXML\n    }\n\n    return null\n}\n\nfunction noop() {}\n","module.exports = isFunction\n\nvar toString = Object.prototype.toString\n\nfunction isFunction (fn) {\n  var string = toString.call(fn)\n  return string === '[object Function]' ||\n    (typeof fn === 'function' && string !== '[object RegExp]') ||\n    (typeof window !== 'undefined' &&\n     // IE8 and below\n     (fn === window.setTimeout ||\n      fn === window.alert ||\n      fn === window.confirm ||\n      fn === window.prompt))\n};\n","var trim = require('trim')\n  , forEach = require('for-each')\n  , isArray = function(arg) {\n      return Object.prototype.toString.call(arg) === '[object Array]';\n    }\n\nmodule.exports = function (headers) {\n  if (!headers)\n    return {}\n\n  var result = {}\n\n  forEach(\n      trim(headers).split('\\n')\n    , function (row) {\n        var index = row.indexOf(':')\n          , key = trim(row.slice(0, index)).toLowerCase()\n          , value = trim(row.slice(index + 1))\n\n        if (typeof(result[key]) === 'undefined') {\n          result[key] = value\n        } else if (isArray(result[key])) {\n          result[key].push(value)\n        } else {\n          result[key] = [ result[key], value ]\n        }\n      }\n  )\n\n  return result\n}","\nexports = module.exports = trim;\n\nfunction trim(str){\n  return str.replace(/^\\s*|\\s*$/g, '');\n}\n\nexports.left = function(str){\n  return str.replace(/^\\s*/, '');\n};\n\nexports.right = function(str){\n  return str.replace(/\\s*$/, '');\n};\n","'use strict';\n\nvar isCallable = require('is-callable');\n\nvar toStr = Object.prototype.toString;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar forEachArray = function forEachArray(array, iterator, receiver) {\n    for (var i = 0, len = array.length; i < len; i++) {\n        if (hasOwnProperty.call(array, i)) {\n            if (receiver == null) {\n                iterator(array[i], i, array);\n            } else {\n                iterator.call(receiver, array[i], i, array);\n            }\n        }\n    }\n};\n\nvar forEachString = function forEachString(string, iterator, receiver) {\n    for (var i = 0, len = string.length; i < len; i++) {\n        // no such thing as a sparse string.\n        if (receiver == null) {\n            iterator(string.charAt(i), i, string);\n        } else {\n            iterator.call(receiver, string.charAt(i), i, string);\n        }\n    }\n};\n\nvar forEachObject = function forEachObject(object, iterator, receiver) {\n    for (var k in object) {\n        if (hasOwnProperty.call(object, k)) {\n            if (receiver == null) {\n                iterator(object[k], k, object);\n            } else {\n                iterator.call(receiver, object[k], k, object);\n            }\n        }\n    }\n};\n\nvar forEach = function forEach(list, iterator, thisArg) {\n    if (!isCallable(iterator)) {\n        throw new TypeError('iterator must be a function');\n    }\n\n    var receiver;\n    if (arguments.length >= 3) {\n        receiver = thisArg;\n    }\n\n    if (toStr.call(list) === '[object Array]') {\n        forEachArray(list, iterator, receiver);\n    } else if (typeof list === 'string') {\n        forEachString(list, iterator, receiver);\n    } else {\n        forEachObject(list, iterator, receiver);\n    }\n};\n\nmodule.exports = forEach;\n","'use strict';\n\nvar fnToStr = Function.prototype.toString;\n\nvar constructorRegex = /^\\s*class\\b/;\nvar isES6ClassFn = function isES6ClassFunction(value) {\n\ttry {\n\t\tvar fnStr = fnToStr.call(value);\n\t\treturn constructorRegex.test(fnStr);\n\t} catch (e) {\n\t\treturn false; // not a function\n\t}\n};\n\nvar tryFunctionObject = function tryFunctionToStr(value) {\n\ttry {\n\t\tif (isES6ClassFn(value)) { return false; }\n\t\tfnToStr.call(value);\n\t\treturn true;\n\t} catch (e) {\n\t\treturn false;\n\t}\n};\nvar toStr = Object.prototype.toString;\nvar fnClass = '[object Function]';\nvar genClass = '[object GeneratorFunction]';\nvar hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';\n\nmodule.exports = function isCallable(value) {\n\tif (!value) { return false; }\n\tif (typeof value !== 'function' && typeof value !== 'object') { return false; }\n\tif (typeof value === 'function' && !value.prototype) { return true; }\n\tif (hasToStringTag) { return tryFunctionObject(value); }\n\tif (isES6ClassFn(value)) { return false; }\n\tvar strClass = toStr.call(value);\n\treturn strClass === fnClass || strClass === genClass;\n};\n","module.exports = extend\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction extend() {\n    var target = {}\n\n    for (var i = 0; i < arguments.length; i++) {\n        var source = arguments[i]\n\n        for (var key in source) {\n            if (hasOwnProperty.call(source, key)) {\n                target[key] = source[key]\n            }\n        }\n    }\n\n    return target\n}\n","/**\n * Copyright 2013 vtt.js Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Default exports for Node. Export the extended versions of VTTCue and\n// VTTRegion in Node since we likely want the capability to convert back and\n// forth between JSON. If we don't then it's not that big of a deal since we're\n// off browser.\n\nvar window = require('global/window');\n\nvar vttjs = module.exports = {\n  WebVTT: require(\"./vtt.js\"),\n  VTTCue: require(\"./vttcue.js\"),\n  VTTRegion: require(\"./vttregion.js\")\n};\n\nwindow.vttjs = vttjs;\nwindow.WebVTT = vttjs.WebVTT;\n\nvar cueShim = vttjs.VTTCue;\nvar regionShim = vttjs.VTTRegion;\nvar nativeVTTCue = window.VTTCue;\nvar nativeVTTRegion = window.VTTRegion;\n\nvttjs.shim = function() {\n  window.VTTCue = cueShim;\n  window.VTTRegion = regionShim;\n};\n\nvttjs.restore = function() {\n  window.VTTCue = nativeVTTCue;\n  window.VTTRegion = nativeVTTRegion;\n};\n\nif (!window.VTTCue) {\n  vttjs.shim();\n}\n","/**\n * Copyright 2013 vtt.js Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */\nvar _objCreate = Object.create || (function() {\n  function F() {}\n  return function(o) {\n    if (arguments.length !== 1) {\n      throw new Error('Object.create shim only accepts one parameter.');\n    }\n    F.prototype = o;\n    return new F();\n  };\n})();\n\n// Creates a new ParserError object from an errorData object. The errorData\n// object should have default code and message properties. The default message\n// property can be overriden by passing in a message parameter.\n// See ParsingError.Errors below for acceptable errors.\nfunction ParsingError(errorData, message) {\n  this.name = \"ParsingError\";\n  this.code = errorData.code;\n  this.message = message || errorData.message;\n}\nParsingError.prototype = _objCreate(Error.prototype);\nParsingError.prototype.constructor = ParsingError;\n\n// ParsingError metadata for acceptable ParsingErrors.\nParsingError.Errors = {\n  BadSignature: {\n    code: 0,\n    message: \"Malformed WebVTT signature.\"\n  },\n  BadTimeStamp: {\n    code: 1,\n    message: \"Malformed time stamp.\"\n  }\n};\n\n// Try to parse input as a time stamp.\nfunction parseTimeStamp(input) {\n\n  function computeSeconds(h, m, s, f) {\n    return (h | 0) * 3600 + (m | 0) * 60 + (s | 0) + (f | 0) / 1000;\n  }\n\n  var m = input.match(/^(\\d+):(\\d{2})(:\\d{2})?\\.(\\d{3})/);\n  if (!m) {\n    return null;\n  }\n\n  if (m[3]) {\n    // Timestamp takes the form of [hours]:[minutes]:[seconds].[milliseconds]\n    return computeSeconds(m[1], m[2], m[3].replace(\":\", \"\"), m[4]);\n  } else if (m[1] > 59) {\n    // Timestamp takes the form of [hours]:[minutes].[milliseconds]\n    // First position is hours as it's over 59.\n    return computeSeconds(m[1], m[2], 0,  m[4]);\n  } else {\n    // Timestamp takes the form of [minutes]:[seconds].[milliseconds]\n    return computeSeconds(0, m[1], m[2], m[4]);\n  }\n}\n\n// A settings object holds key/value pairs and will ignore anything but the first\n// assignment to a specific key.\nfunction Settings() {\n  this.values = _objCreate(null);\n}\n\nSettings.prototype = {\n  // Only accept the first assignment to any key.\n  set: function(k, v) {\n    if (!this.get(k) && v !== \"\") {\n      this.values[k] = v;\n    }\n  },\n  // Return the value for a key, or a default value.\n  // If 'defaultKey' is passed then 'dflt' is assumed to be an object with\n  // a number of possible default values as properties where 'defaultKey' is\n  // the key of the property that will be chosen; otherwise it's assumed to be\n  // a single value.\n  get: function(k, dflt, defaultKey) {\n    if (defaultKey) {\n      return this.has(k) ? this.values[k] : dflt[defaultKey];\n    }\n    return this.has(k) ? this.values[k] : dflt;\n  },\n  // Check whether we have a value for a key.\n  has: function(k) {\n    return k in this.values;\n  },\n  // Accept a setting if its one of the given alternatives.\n  alt: function(k, v, a) {\n    for (var n = 0; n < a.length; ++n) {\n      if (v === a[n]) {\n        this.set(k, v);\n        break;\n      }\n    }\n  },\n  // Accept a setting if its a valid (signed) integer.\n  integer: function(k, v) {\n    if (/^-?\\d+$/.test(v)) { // integer\n      this.set(k, parseInt(v, 10));\n    }\n  },\n  // Accept a setting if its a valid percentage.\n  percent: function(k, v) {\n    var m;\n    if ((m = v.match(/^([\\d]{1,3})(\\.[\\d]*)?%$/))) {\n      v = parseFloat(v);\n      if (v >= 0 && v <= 100) {\n        this.set(k, v);\n        return true;\n      }\n    }\n    return false;\n  }\n};\n\n// Helper function to parse input into groups separated by 'groupDelim', and\n// interprete each group as a key/value pair separated by 'keyValueDelim'.\nfunction parseOptions(input, callback, keyValueDelim, groupDelim) {\n  var groups = groupDelim ? input.split(groupDelim) : [input];\n  for (var i in groups) {\n    if (typeof groups[i] !== \"string\") {\n      continue;\n    }\n    var kv = groups[i].split(keyValueDelim);\n    if (kv.length !== 2) {\n      continue;\n    }\n    var k = kv[0];\n    var v = kv[1];\n    callback(k, v);\n  }\n}\n\nfunction parseCue(input, cue, regionList) {\n  // Remember the original input if we need to throw an error.\n  var oInput = input;\n  // 4.1 WebVTT timestamp\n  function consumeTimeStamp() {\n    var ts = parseTimeStamp(input);\n    if (ts === null) {\n      throw new ParsingError(ParsingError.Errors.BadTimeStamp,\n                            \"Malformed timestamp: \" + oInput);\n    }\n    // Remove time stamp from input.\n    input = input.replace(/^[^\\sa-zA-Z-]+/, \"\");\n    return ts;\n  }\n\n  // 4.4.2 WebVTT cue settings\n  function consumeCueSettings(input, cue) {\n    var settings = new Settings();\n\n    parseOptions(input, function (k, v) {\n      switch (k) {\n      case \"region\":\n        // Find the last region we parsed with the same region id.\n        for (var i = regionList.length - 1; i >= 0; i--) {\n          if (regionList[i].id === v) {\n            settings.set(k, regionList[i].region);\n            break;\n          }\n        }\n        break;\n      case \"vertical\":\n        settings.alt(k, v, [\"rl\", \"lr\"]);\n        break;\n      case \"line\":\n        var vals = v.split(\",\"),\n            vals0 = vals[0];\n        settings.integer(k, vals0);\n        settings.percent(k, vals0) ? settings.set(\"snapToLines\", false) : null;\n        settings.alt(k, vals0, [\"auto\"]);\n        if (vals.length === 2) {\n          settings.alt(\"lineAlign\", vals[1], [\"start\", \"middle\", \"end\"]);\n        }\n        break;\n      case \"position\":\n        vals = v.split(\",\");\n        settings.percent(k, vals[0]);\n        if (vals.length === 2) {\n          settings.alt(\"positionAlign\", vals[1], [\"start\", \"middle\", \"end\"]);\n        }\n        break;\n      case \"size\":\n        settings.percent(k, v);\n        break;\n      case \"align\":\n        settings.alt(k, v, [\"start\", \"middle\", \"end\", \"left\", \"right\"]);\n        break;\n      }\n    }, /:/, /\\s/);\n\n    // Apply default values for any missing fields.\n    cue.region = settings.get(\"region\", null);\n    cue.vertical = settings.get(\"vertical\", \"\");\n    cue.line = settings.get(\"line\", \"auto\");\n    cue.lineAlign = settings.get(\"lineAlign\", \"start\");\n    cue.snapToLines = settings.get(\"snapToLines\", true);\n    cue.size = settings.get(\"size\", 100);\n    cue.align = settings.get(\"align\", \"middle\");\n    cue.position = settings.get(\"position\", {\n      start: 0,\n      left: 0,\n      middle: 50,\n      end: 100,\n      right: 100\n    }, cue.align);\n    cue.positionAlign = settings.get(\"positionAlign\", {\n      start: \"start\",\n      left: \"start\",\n      middle: \"middle\",\n      end: \"end\",\n      right: \"end\"\n    }, cue.align);\n  }\n\n  function skipWhitespace() {\n    input = input.replace(/^\\s+/, \"\");\n  }\n\n  // 4.1 WebVTT cue timings.\n  skipWhitespace();\n  cue.startTime = consumeTimeStamp();   // (1) collect cue start time\n  skipWhitespace();\n  if (input.substr(0, 3) !== \"-->\") {     // (3) next characters must match \"-->\"\n    throw new ParsingError(ParsingError.Errors.BadTimeStamp,\n                           \"Malformed time stamp (time stamps must be separated by '-->'): \" +\n                           oInput);\n  }\n  input = input.substr(3);\n  skipWhitespace();\n  cue.endTime = consumeTimeStamp();     // (5) collect cue end time\n\n  // 4.1 WebVTT cue settings list.\n  skipWhitespace();\n  consumeCueSettings(input, cue);\n}\n\nvar ESCAPE = {\n  \"&amp;\": \"&\",\n  \"&lt;\": \"<\",\n  \"&gt;\": \">\",\n  \"&lrm;\": \"\\u200e\",\n  \"&rlm;\": \"\\u200f\",\n  \"&nbsp;\": \"\\u00a0\"\n};\n\nvar TAG_NAME = {\n  c: \"span\",\n  i: \"i\",\n  b: \"b\",\n  u: \"u\",\n  ruby: \"ruby\",\n  rt: \"rt\",\n  v: \"span\",\n  lang: \"span\"\n};\n\nvar TAG_ANNOTATION = {\n  v: \"title\",\n  lang: \"lang\"\n};\n\nvar NEEDS_PARENT = {\n  rt: \"ruby\"\n};\n\n// Parse content into a document fragment.\nfunction parseContent(window, input) {\n  function nextToken() {\n    // Check for end-of-string.\n    if (!input) {\n      return null;\n    }\n\n    // Consume 'n' characters from the input.\n    function consume(result) {\n      input = input.substr(result.length);\n      return result;\n    }\n\n    var m = input.match(/^([^<]*)(<[^>]*>?)?/);\n    // If there is some text before the next tag, return it, otherwise return\n    // the tag.\n    return consume(m[1] ? m[1] : m[2]);\n  }\n\n  // Unescape a string 's'.\n  function unescape1(e) {\n    return ESCAPE[e];\n  }\n  function unescape(s) {\n    while ((m = s.match(/&(amp|lt|gt|lrm|rlm|nbsp);/))) {\n      s = s.replace(m[0], unescape1);\n    }\n    return s;\n  }\n\n  function shouldAdd(current, element) {\n    return !NEEDS_PARENT[element.localName] ||\n           NEEDS_PARENT[element.localName] === current.localName;\n  }\n\n  // Create an element for this tag.\n  function createElement(type, annotation) {\n    var tagName = TAG_NAME[type];\n    if (!tagName) {\n      return null;\n    }\n    var element = window.document.createElement(tagName);\n    element.localName = tagName;\n    var name = TAG_ANNOTATION[type];\n    if (name && annotation) {\n      element[name] = annotation.trim();\n    }\n    return element;\n  }\n\n  var rootDiv = window.document.createElement(\"div\"),\n      current = rootDiv,\n      t,\n      tagStack = [];\n\n  while ((t = nextToken()) !== null) {\n    if (t[0] === '<') {\n      if (t[1] === \"/\") {\n        // If the closing tag matches, move back up to the parent node.\n        if (tagStack.length &&\n            tagStack[tagStack.length - 1] === t.substr(2).replace(\">\", \"\")) {\n          tagStack.pop();\n          current = current.parentNode;\n        }\n        // Otherwise just ignore the end tag.\n        continue;\n      }\n      var ts = parseTimeStamp(t.substr(1, t.length - 2));\n      var node;\n      if (ts) {\n        // Timestamps are lead nodes as well.\n        node = window.document.createProcessingInstruction(\"timestamp\", ts);\n        current.appendChild(node);\n        continue;\n      }\n      var m = t.match(/^<([^.\\s/0-9>]+)(\\.[^\\s\\\\>]+)?([^>\\\\]+)?(\\\\?)>?$/);\n      // If we can't parse the tag, skip to the next tag.\n      if (!m) {\n        continue;\n      }\n      // Try to construct an element, and ignore the tag if we couldn't.\n      node = createElement(m[1], m[3]);\n      if (!node) {\n        continue;\n      }\n      // Determine if the tag should be added based on the context of where it\n      // is placed in the cuetext.\n      if (!shouldAdd(current, node)) {\n        continue;\n      }\n      // Set the class list (as a list of classes, separated by space).\n      if (m[2]) {\n        node.className = m[2].substr(1).replace('.', ' ');\n      }\n      // Append the node to the current node, and enter the scope of the new\n      // node.\n      tagStack.push(m[1]);\n      current.appendChild(node);\n      current = node;\n      continue;\n    }\n\n    // Text nodes are leaf nodes.\n    current.appendChild(window.document.createTextNode(unescape(t)));\n  }\n\n  return rootDiv;\n}\n\n// This is a list of all the Unicode characters that have a strong\n// right-to-left category. What this means is that these characters are\n// written right-to-left for sure. It was generated by pulling all the strong\n// right-to-left characters out of the Unicode data table. That table can\n// found at: http://www.unicode.org/Public/UNIDATA/UnicodeData.txt\nvar strongRTLRanges = [[0x5be, 0x5be], [0x5c0, 0x5c0], [0x5c3, 0x5c3], [0x5c6, 0x5c6],\n [0x5d0, 0x5ea], [0x5f0, 0x5f4], [0x608, 0x608], [0x60b, 0x60b], [0x60d, 0x60d],\n [0x61b, 0x61b], [0x61e, 0x64a], [0x66d, 0x66f], [0x671, 0x6d5], [0x6e5, 0x6e6],\n [0x6ee, 0x6ef], [0x6fa, 0x70d], [0x70f, 0x710], [0x712, 0x72f], [0x74d, 0x7a5],\n [0x7b1, 0x7b1], [0x7c0, 0x7ea], [0x7f4, 0x7f5], [0x7fa, 0x7fa], [0x800, 0x815],\n [0x81a, 0x81a], [0x824, 0x824], [0x828, 0x828], [0x830, 0x83e], [0x840, 0x858],\n [0x85e, 0x85e], [0x8a0, 0x8a0], [0x8a2, 0x8ac], [0x200f, 0x200f],\n [0xfb1d, 0xfb1d], [0xfb1f, 0xfb28], [0xfb2a, 0xfb36], [0xfb38, 0xfb3c],\n [0xfb3e, 0xfb3e], [0xfb40, 0xfb41], [0xfb43, 0xfb44], [0xfb46, 0xfbc1],\n [0xfbd3, 0xfd3d], [0xfd50, 0xfd8f], [0xfd92, 0xfdc7], [0xfdf0, 0xfdfc],\n [0xfe70, 0xfe74], [0xfe76, 0xfefc], [0x10800, 0x10805], [0x10808, 0x10808],\n [0x1080a, 0x10835], [0x10837, 0x10838], [0x1083c, 0x1083c], [0x1083f, 0x10855],\n [0x10857, 0x1085f], [0x10900, 0x1091b], [0x10920, 0x10939], [0x1093f, 0x1093f],\n [0x10980, 0x109b7], [0x109be, 0x109bf], [0x10a00, 0x10a00], [0x10a10, 0x10a13],\n [0x10a15, 0x10a17], [0x10a19, 0x10a33], [0x10a40, 0x10a47], [0x10a50, 0x10a58],\n [0x10a60, 0x10a7f], [0x10b00, 0x10b35], [0x10b40, 0x10b55], [0x10b58, 0x10b72],\n [0x10b78, 0x10b7f], [0x10c00, 0x10c48], [0x1ee00, 0x1ee03], [0x1ee05, 0x1ee1f],\n [0x1ee21, 0x1ee22], [0x1ee24, 0x1ee24], [0x1ee27, 0x1ee27], [0x1ee29, 0x1ee32],\n [0x1ee34, 0x1ee37], [0x1ee39, 0x1ee39], [0x1ee3b, 0x1ee3b], [0x1ee42, 0x1ee42],\n [0x1ee47, 0x1ee47], [0x1ee49, 0x1ee49], [0x1ee4b, 0x1ee4b], [0x1ee4d, 0x1ee4f],\n [0x1ee51, 0x1ee52], [0x1ee54, 0x1ee54], [0x1ee57, 0x1ee57], [0x1ee59, 0x1ee59],\n [0x1ee5b, 0x1ee5b], [0x1ee5d, 0x1ee5d], [0x1ee5f, 0x1ee5f], [0x1ee61, 0x1ee62],\n [0x1ee64, 0x1ee64], [0x1ee67, 0x1ee6a], [0x1ee6c, 0x1ee72], [0x1ee74, 0x1ee77],\n [0x1ee79, 0x1ee7c], [0x1ee7e, 0x1ee7e], [0x1ee80, 0x1ee89], [0x1ee8b, 0x1ee9b],\n [0x1eea1, 0x1eea3], [0x1eea5, 0x1eea9], [0x1eeab, 0x1eebb], [0x10fffd, 0x10fffd]];\n\nfunction isStrongRTLChar(charCode) {\n  for (var i = 0; i < strongRTLRanges.length; i++) {\n    var currentRange = strongRTLRanges[i];\n    if (charCode >= currentRange[0] && charCode <= currentRange[1]) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction determineBidi(cueDiv) {\n  var nodeStack = [],\n      text = \"\",\n      charCode;\n\n  if (!cueDiv || !cueDiv.childNodes) {\n    return \"ltr\";\n  }\n\n  function pushNodes(nodeStack, node) {\n    for (var i = node.childNodes.length - 1; i >= 0; i--) {\n      nodeStack.push(node.childNodes[i]);\n    }\n  }\n\n  function nextTextNode(nodeStack) {\n    if (!nodeStack || !nodeStack.length) {\n      return null;\n    }\n\n    var node = nodeStack.pop(),\n        text = node.textContent || node.innerText;\n    if (text) {\n      // TODO: This should match all unicode type B characters (paragraph\n      // separator characters). See issue #115.\n      var m = text.match(/^.*(\\n|\\r)/);\n      if (m) {\n        nodeStack.length = 0;\n        return m[0];\n      }\n      return text;\n    }\n    if (node.tagName === \"ruby\") {\n      return nextTextNode(nodeStack);\n    }\n    if (node.childNodes) {\n      pushNodes(nodeStack, node);\n      return nextTextNode(nodeStack);\n    }\n  }\n\n  pushNodes(nodeStack, cueDiv);\n  while ((text = nextTextNode(nodeStack))) {\n    for (var i = 0; i < text.length; i++) {\n      charCode = text.charCodeAt(i);\n      if (isStrongRTLChar(charCode)) {\n        return \"rtl\";\n      }\n    }\n  }\n  return \"ltr\";\n}\n\nfunction computeLinePos(cue) {\n  if (typeof cue.line === \"number\" &&\n      (cue.snapToLines || (cue.line >= 0 && cue.line <= 100))) {\n    return cue.line;\n  }\n  if (!cue.track || !cue.track.textTrackList ||\n      !cue.track.textTrackList.mediaElement) {\n    return -1;\n  }\n  var track = cue.track,\n      trackList = track.textTrackList,\n      count = 0;\n  for (var i = 0; i < trackList.length && trackList[i] !== track; i++) {\n    if (trackList[i].mode === \"showing\") {\n      count++;\n    }\n  }\n  return ++count * -1;\n}\n\nfunction StyleBox() {\n}\n\n// Apply styles to a div. If there is no div passed then it defaults to the\n// div on 'this'.\nStyleBox.prototype.applyStyles = function(styles, div) {\n  div = div || this.div;\n  for (var prop in styles) {\n    if (styles.hasOwnProperty(prop)) {\n      div.style[prop] = styles[prop];\n    }\n  }\n};\n\nStyleBox.prototype.formatStyle = function(val, unit) {\n  return val === 0 ? 0 : val + unit;\n};\n\n// Constructs the computed display state of the cue (a div). Places the div\n// into the overlay which should be a block level element (usually a div).\nfunction CueStyleBox(window, cue, styleOptions) {\n  StyleBox.call(this);\n  this.cue = cue;\n\n  // Parse our cue's text into a DOM tree rooted at 'cueDiv'. This div will\n  // have inline positioning and will function as the cue background box.\n  this.cueDiv = parseContent(window, cue.text);\n  var styles = {\n    color: \"rgba(255, 255, 255, 1)\",\n    backgroundColor:  \"rgba(0, 0, 0, 0.8)\",\n    position: \"relative\",\n    left: 0,\n    right: 0,\n    top: 0,\n    bottom: 0,\n    display: \"inline\",\n    writingMode: cue.vertical === \"\" ? \"horizontal-tb\"\n                                     : cue.vertical === \"lr\" ? \"vertical-lr\"\n                                                             : \"vertical-rl\",\n    unicodeBidi: \"plaintext\"\n  };\n\n  this.applyStyles(styles, this.cueDiv);\n\n  // Create an absolutely positioned div that will be used to position the cue\n  // div. Note, all WebVTT cue-setting alignments are equivalent to the CSS\n  // mirrors of them except \"middle\" which is \"center\" in CSS.\n  this.div = window.document.createElement(\"div\");\n  styles = {\n    direction: determineBidi(this.cueDiv),\n    writingMode: cue.vertical === \"\" ? \"horizontal-tb\"\n                                     : cue.vertical === \"lr\" ? \"vertical-lr\"\n                                                             : \"vertical-rl\",\n    unicodeBidi: \"plaintext\",\n    textAlign: cue.align === \"middle\" ? \"center\" : cue.align,\n    font: styleOptions.font,\n    whiteSpace: \"pre-line\",\n    position: \"absolute\"\n  };\n\n  this.applyStyles(styles);\n  this.div.appendChild(this.cueDiv);\n\n  // Calculate the distance from the reference edge of the viewport to the text\n  // position of the cue box. The reference edge will be resolved later when\n  // the box orientation styles are applied.\n  var textPos = 0;\n  switch (cue.positionAlign) {\n  case \"start\":\n    textPos = cue.position;\n    break;\n  case \"middle\":\n    textPos = cue.position - (cue.size / 2);\n    break;\n  case \"end\":\n    textPos = cue.position - cue.size;\n    break;\n  }\n\n  // Horizontal box orientation; textPos is the distance from the left edge of the\n  // area to the left edge of the box and cue.size is the distance extending to\n  // the right from there.\n  if (cue.vertical === \"\") {\n    this.applyStyles({\n      left:  this.formatStyle(textPos, \"%\"),\n      width: this.formatStyle(cue.size, \"%\")\n    });\n  // Vertical box orientation; textPos is the distance from the top edge of the\n  // area to the top edge of the box and cue.size is the height extending\n  // downwards from there.\n  } else {\n    this.applyStyles({\n      top: this.formatStyle(textPos, \"%\"),\n      height: this.formatStyle(cue.size, \"%\")\n    });\n  }\n\n  this.move = function(box) {\n    this.applyStyles({\n      top: this.formatStyle(box.top, \"px\"),\n      bottom: this.formatStyle(box.bottom, \"px\"),\n      left: this.formatStyle(box.left, \"px\"),\n      right: this.formatStyle(box.right, \"px\"),\n      height: this.formatStyle(box.height, \"px\"),\n      width: this.formatStyle(box.width, \"px\")\n    });\n  };\n}\nCueStyleBox.prototype = _objCreate(StyleBox.prototype);\nCueStyleBox.prototype.constructor = CueStyleBox;\n\n// Represents the co-ordinates of an Element in a way that we can easily\n// compute things with such as if it overlaps or intersects with another Element.\n// Can initialize it with either a StyleBox or another BoxPosition.\nfunction BoxPosition(obj) {\n  // Either a BoxPosition was passed in and we need to copy it, or a StyleBox\n  // was passed in and we need to copy the results of 'getBoundingClientRect'\n  // as the object returned is readonly. All co-ordinate values are in reference\n  // to the viewport origin (top left).\n  var lh, height, width, top;\n  if (obj.div) {\n    height = obj.div.offsetHeight;\n    width = obj.div.offsetWidth;\n    top = obj.div.offsetTop;\n\n    var rects = (rects = obj.div.childNodes) && (rects = rects[0]) &&\n                rects.getClientRects && rects.getClientRects();\n    obj = obj.div.getBoundingClientRect();\n    // In certain cases the outter div will be slightly larger then the sum of\n    // the inner div's lines. This could be due to bold text, etc, on some platforms.\n    // In this case we should get the average line height and use that. This will\n    // result in the desired behaviour.\n    lh = rects ? Math.max((rects[0] && rects[0].height) || 0, obj.height / rects.length)\n               : 0;\n\n  }\n  this.left = obj.left;\n  this.right = obj.right;\n  this.top = obj.top || top;\n  this.height = obj.height || height;\n  this.bottom = obj.bottom || (top + (obj.height || height));\n  this.width = obj.width || width;\n  this.lineHeight = lh !== undefined ? lh : obj.lineHeight;\n}\n\n// Move the box along a particular axis. Optionally pass in an amount to move\n// the box. If no amount is passed then the default is the line height of the\n// box.\nBoxPosition.prototype.move = function(axis, toMove) {\n  toMove = toMove !== undefined ? toMove : this.lineHeight;\n  switch (axis) {\n  case \"+x\":\n    this.left += toMove;\n    this.right += toMove;\n    break;\n  case \"-x\":\n    this.left -= toMove;\n    this.right -= toMove;\n    break;\n  case \"+y\":\n    this.top += toMove;\n    this.bottom += toMove;\n    break;\n  case \"-y\":\n    this.top -= toMove;\n    this.bottom -= toMove;\n    break;\n  }\n};\n\n// Check if this box overlaps another box, b2.\nBoxPosition.prototype.overlaps = function(b2) {\n  return this.left < b2.right &&\n         this.right > b2.left &&\n         this.top < b2.bottom &&\n         this.bottom > b2.top;\n};\n\n// Check if this box overlaps any other boxes in boxes.\nBoxPosition.prototype.overlapsAny = function(boxes) {\n  for (var i = 0; i < boxes.length; i++) {\n    if (this.overlaps(boxes[i])) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Check if this box is within another box.\nBoxPosition.prototype.within = function(container) {\n  return this.top >= container.top &&\n         this.bottom <= container.bottom &&\n         this.left >= container.left &&\n         this.right <= container.right;\n};\n\n// Check if this box is entirely within the container or it is overlapping\n// on the edge opposite of the axis direction passed. For example, if \"+x\" is\n// passed and the box is overlapping on the left edge of the container, then\n// return true.\nBoxPosition.prototype.overlapsOppositeAxis = function(container, axis) {\n  switch (axis) {\n  case \"+x\":\n    return this.left < container.left;\n  case \"-x\":\n    return this.right > container.right;\n  case \"+y\":\n    return this.top < container.top;\n  case \"-y\":\n    return this.bottom > container.bottom;\n  }\n};\n\n// Find the percentage of the area that this box is overlapping with another\n// box.\nBoxPosition.prototype.intersectPercentage = function(b2) {\n  var x = Math.max(0, Math.min(this.right, b2.right) - Math.max(this.left, b2.left)),\n      y = Math.max(0, Math.min(this.bottom, b2.bottom) - Math.max(this.top, b2.top)),\n      intersectArea = x * y;\n  return intersectArea / (this.height * this.width);\n};\n\n// Convert the positions from this box to CSS compatible positions using\n// the reference container's positions. This has to be done because this\n// box's positions are in reference to the viewport origin, whereas, CSS\n// values are in referecne to their respective edges.\nBoxPosition.prototype.toCSSCompatValues = function(reference) {\n  return {\n    top: this.top - reference.top,\n    bottom: reference.bottom - this.bottom,\n    left: this.left - reference.left,\n    right: reference.right - this.right,\n    height: this.height,\n    width: this.width\n  };\n};\n\n// Get an object that represents the box's position without anything extra.\n// Can pass a StyleBox, HTMLElement, or another BoxPositon.\nBoxPosition.getSimpleBoxPosition = function(obj) {\n  var height = obj.div ? obj.div.offsetHeight : obj.tagName ? obj.offsetHeight : 0;\n  var width = obj.div ? obj.div.offsetWidth : obj.tagName ? obj.offsetWidth : 0;\n  var top = obj.div ? obj.div.offsetTop : obj.tagName ? obj.offsetTop : 0;\n\n  obj = obj.div ? obj.div.getBoundingClientRect() :\n                obj.tagName ? obj.getBoundingClientRect() : obj;\n  var ret = {\n    left: obj.left,\n    right: obj.right,\n    top: obj.top || top,\n    height: obj.height || height,\n    bottom: obj.bottom || (top + (obj.height || height)),\n    width: obj.width || width\n  };\n  return ret;\n};\n\n// Move a StyleBox to its specified, or next best, position. The containerBox\n// is the box that contains the StyleBox, such as a div. boxPositions are\n// a list of other boxes that the styleBox can't overlap with.\nfunction moveBoxToLinePosition(window, styleBox, containerBox, boxPositions) {\n\n  // Find the best position for a cue box, b, on the video. The axis parameter\n  // is a list of axis, the order of which, it will move the box along. For example:\n  // Passing [\"+x\", \"-x\"] will move the box first along the x axis in the positive\n  // direction. If it doesn't find a good position for it there it will then move\n  // it along the x axis in the negative direction.\n  function findBestPosition(b, axis) {\n    var bestPosition,\n        specifiedPosition = new BoxPosition(b),\n        percentage = 1; // Highest possible so the first thing we get is better.\n\n    for (var i = 0; i < axis.length; i++) {\n      while (b.overlapsOppositeAxis(containerBox, axis[i]) ||\n             (b.within(containerBox) && b.overlapsAny(boxPositions))) {\n        b.move(axis[i]);\n      }\n      // We found a spot where we aren't overlapping anything. This is our\n      // best position.\n      if (b.within(containerBox)) {\n        return b;\n      }\n      var p = b.intersectPercentage(containerBox);\n      // If we're outside the container box less then we were on our last try\n      // then remember this position as the best position.\n      if (percentage > p) {\n        bestPosition = new BoxPosition(b);\n        percentage = p;\n      }\n      // Reset the box position to the specified position.\n      b = new BoxPosition(specifiedPosition);\n    }\n    return bestPosition || specifiedPosition;\n  }\n\n  var boxPosition = new BoxPosition(styleBox),\n      cue = styleBox.cue,\n      linePos = computeLinePos(cue),\n      axis = [];\n\n  // If we have a line number to align the cue to.\n  if (cue.snapToLines) {\n    var size;\n    switch (cue.vertical) {\n    case \"\":\n      axis = [ \"+y\", \"-y\" ];\n      size = \"height\";\n      break;\n    case \"rl\":\n      axis = [ \"+x\", \"-x\" ];\n      size = \"width\";\n      break;\n    case \"lr\":\n      axis = [ \"-x\", \"+x\" ];\n      size = \"width\";\n      break;\n    }\n\n    var step = boxPosition.lineHeight,\n        position = step * Math.round(linePos),\n        maxPosition = containerBox[size] + step,\n        initialAxis = axis[0];\n\n    // If the specified intial position is greater then the max position then\n    // clamp the box to the amount of steps it would take for the box to\n    // reach the max position.\n    if (Math.abs(position) > maxPosition) {\n      position = position < 0 ? -1 : 1;\n      position *= Math.ceil(maxPosition / step) * step;\n    }\n\n    // If computed line position returns negative then line numbers are\n    // relative to the bottom of the video instead of the top. Therefore, we\n    // need to increase our initial position by the length or width of the\n    // video, depending on the writing direction, and reverse our axis directions.\n    if (linePos < 0) {\n      position += cue.vertical === \"\" ? containerBox.height : containerBox.width;\n      axis = axis.reverse();\n    }\n\n    // Move the box to the specified position. This may not be its best\n    // position.\n    boxPosition.move(initialAxis, position);\n\n  } else {\n    // If we have a percentage line value for the cue.\n    var calculatedPercentage = (boxPosition.lineHeight / containerBox.height) * 100;\n\n    switch (cue.lineAlign) {\n    case \"middle\":\n      linePos -= (calculatedPercentage / 2);\n      break;\n    case \"end\":\n      linePos -= calculatedPercentage;\n      break;\n    }\n\n    // Apply initial line position to the cue box.\n    switch (cue.vertical) {\n    case \"\":\n      styleBox.applyStyles({\n        top: styleBox.formatStyle(linePos, \"%\")\n      });\n      break;\n    case \"rl\":\n      styleBox.applyStyles({\n        left: styleBox.formatStyle(linePos, \"%\")\n      });\n      break;\n    case \"lr\":\n      styleBox.applyStyles({\n        right: styleBox.formatStyle(linePos, \"%\")\n      });\n      break;\n    }\n\n    axis = [ \"+y\", \"-x\", \"+x\", \"-y\" ];\n\n    // Get the box position again after we've applied the specified positioning\n    // to it.\n    boxPosition = new BoxPosition(styleBox);\n  }\n\n  var bestPosition = findBestPosition(boxPosition, axis);\n  styleBox.move(bestPosition.toCSSCompatValues(containerBox));\n}\n\nfunction WebVTT() {\n  // Nothing\n}\n\n// Helper to allow strings to be decoded instead of the default binary utf8 data.\nWebVTT.StringDecoder = function() {\n  return {\n    decode: function(data) {\n      if (!data) {\n        return \"\";\n      }\n      if (typeof data !== \"string\") {\n        throw new Error(\"Error - expected string data.\");\n      }\n      return decodeURIComponent(encodeURIComponent(data));\n    }\n  };\n};\n\nWebVTT.convertCueToDOMTree = function(window, cuetext) {\n  if (!window || !cuetext) {\n    return null;\n  }\n  return parseContent(window, cuetext);\n};\n\nvar FONT_SIZE_PERCENT = 0.05;\nvar FONT_STYLE = \"sans-serif\";\nvar CUE_BACKGROUND_PADDING = \"1.5%\";\n\n// Runs the processing model over the cues and regions passed to it.\n// @param overlay A block level element (usually a div) that the computed cues\n//                and regions will be placed into.\nWebVTT.processCues = function(window, cues, overlay) {\n  if (!window || !cues || !overlay) {\n    return null;\n  }\n\n  // Remove all previous children.\n  while (overlay.firstChild) {\n    overlay.removeChild(overlay.firstChild);\n  }\n\n  var paddedOverlay = window.document.createElement(\"div\");\n  paddedOverlay.style.position = \"absolute\";\n  paddedOverlay.style.left = \"0\";\n  paddedOverlay.style.right = \"0\";\n  paddedOverlay.style.top = \"0\";\n  paddedOverlay.style.bottom = \"0\";\n  paddedOverlay.style.margin = CUE_BACKGROUND_PADDING;\n  overlay.appendChild(paddedOverlay);\n\n  // Determine if we need to compute the display states of the cues. This could\n  // be the case if a cue's state has been changed since the last computation or\n  // if it has not been computed yet.\n  function shouldCompute(cues) {\n    for (var i = 0; i < cues.length; i++) {\n      if (cues[i].hasBeenReset || !cues[i].displayState) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // We don't need to recompute the cues' display states. Just reuse them.\n  if (!shouldCompute(cues)) {\n    for (var i = 0; i < cues.length; i++) {\n      paddedOverlay.appendChild(cues[i].displayState);\n    }\n    return;\n  }\n\n  var boxPositions = [],\n      containerBox = BoxPosition.getSimpleBoxPosition(paddedOverlay),\n      fontSize = Math.round(containerBox.height * FONT_SIZE_PERCENT * 100) / 100;\n  var styleOptions = {\n    font: fontSize + \"px \" + FONT_STYLE\n  };\n\n  (function() {\n    var styleBox, cue;\n\n    for (var i = 0; i < cues.length; i++) {\n      cue = cues[i];\n\n      // Compute the intial position and styles of the cue div.\n      styleBox = new CueStyleBox(window, cue, styleOptions);\n      paddedOverlay.appendChild(styleBox.div);\n\n      // Move the cue div to it's correct line position.\n      moveBoxToLinePosition(window, styleBox, containerBox, boxPositions);\n\n      // Remember the computed div so that we don't have to recompute it later\n      // if we don't have too.\n      cue.displayState = styleBox.div;\n\n      boxPositions.push(BoxPosition.getSimpleBoxPosition(styleBox));\n    }\n  })();\n};\n\nWebVTT.Parser = function(window, vttjs, decoder) {\n  if (!decoder) {\n    decoder = vttjs;\n    vttjs = {};\n  }\n  if (!vttjs) {\n    vttjs = {};\n  }\n\n  this.window = window;\n  this.vttjs = vttjs;\n  this.state = \"INITIAL\";\n  this.buffer = \"\";\n  this.decoder = decoder || new TextDecoder(\"utf8\");\n  this.regionList = [];\n};\n\nWebVTT.Parser.prototype = {\n  // If the error is a ParsingError then report it to the consumer if\n  // possible. If it's not a ParsingError then throw it like normal.\n  reportOrThrowError: function(e) {\n    if (e instanceof ParsingError) {\n      this.onparsingerror && this.onparsingerror(e);\n    } else {\n      throw e;\n    }\n  },\n  parse: function (data) {\n    var self = this;\n\n    // If there is no data then we won't decode it, but will just try to parse\n    // whatever is in buffer already. This may occur in circumstances, for\n    // example when flush() is called.\n    if (data) {\n      // Try to decode the data that we received.\n      self.buffer += self.decoder.decode(data, {stream: true});\n    }\n\n    function collectNextLine() {\n      var buffer = self.buffer;\n      var pos = 0;\n      while (pos < buffer.length && buffer[pos] !== '\\r' && buffer[pos] !== '\\n') {\n        ++pos;\n      }\n      var line = buffer.substr(0, pos);\n      // Advance the buffer early in case we fail below.\n      if (buffer[pos] === '\\r') {\n        ++pos;\n      }\n      if (buffer[pos] === '\\n') {\n        ++pos;\n      }\n      self.buffer = buffer.substr(pos);\n      return line;\n    }\n\n    // 3.4 WebVTT region and WebVTT region settings syntax\n    function parseRegion(input) {\n      var settings = new Settings();\n\n      parseOptions(input, function (k, v) {\n        switch (k) {\n        case \"id\":\n          settings.set(k, v);\n          break;\n        case \"width\":\n          settings.percent(k, v);\n          break;\n        case \"lines\":\n          settings.integer(k, v);\n          break;\n        case \"regionanchor\":\n        case \"viewportanchor\":\n          var xy = v.split(',');\n          if (xy.length !== 2) {\n            break;\n          }\n          // We have to make sure both x and y parse, so use a temporary\n          // settings object here.\n          var anchor = new Settings();\n          anchor.percent(\"x\", xy[0]);\n          anchor.percent(\"y\", xy[1]);\n          if (!anchor.has(\"x\") || !anchor.has(\"y\")) {\n            break;\n          }\n          settings.set(k + \"X\", anchor.get(\"x\"));\n          settings.set(k + \"Y\", anchor.get(\"y\"));\n          break;\n        case \"scroll\":\n          settings.alt(k, v, [\"up\"]);\n          break;\n        }\n      }, /=/, /\\s/);\n\n      // Create the region, using default values for any values that were not\n      // specified.\n      if (settings.has(\"id\")) {\n        var region = new (self.vttjs.VTTRegion || self.window.VTTRegion)();\n        region.width = settings.get(\"width\", 100);\n        region.lines = settings.get(\"lines\", 3);\n        region.regionAnchorX = settings.get(\"regionanchorX\", 0);\n        region.regionAnchorY = settings.get(\"regionanchorY\", 100);\n        region.viewportAnchorX = settings.get(\"viewportanchorX\", 0);\n        region.viewportAnchorY = settings.get(\"viewportanchorY\", 100);\n        region.scroll = settings.get(\"scroll\", \"\");\n        // Register the region.\n        self.onregion && self.onregion(region);\n        // Remember the VTTRegion for later in case we parse any VTTCues that\n        // reference it.\n        self.regionList.push({\n          id: settings.get(\"id\"),\n          region: region\n        });\n      }\n    }\n\n    // draft-pantos-http-live-streaming-20\n    // https://tools.ietf.org/html/draft-pantos-http-live-streaming-20#section-3.5\n    // 3.5 WebVTT\n    function parseTimestampMap(input) {\n      var settings = new Settings();\n\n      parseOptions(input, function(k, v) {\n        switch(k) {\n        case \"MPEGT\":\n          settings.integer(k + 'S', v);\n          break;\n        case \"LOCA\":\n          settings.set(k + 'L', parseTimeStamp(v));\n          break;\n        }\n      }, /[^\\d]:/, /,/);\n\n      self.ontimestampmap && self.ontimestampmap({\n        \"MPEGTS\": settings.get(\"MPEGTS\"),\n        \"LOCAL\": settings.get(\"LOCAL\")\n      });\n    }\n\n    // 3.2 WebVTT metadata header syntax\n    function parseHeader(input) {\n      if (input.match(/X-TIMESTAMP-MAP/)) {\n        // This line contains HLS X-TIMESTAMP-MAP metadata\n        parseOptions(input, function(k, v) {\n          switch(k) {\n          case \"X-TIMESTAMP-MAP\":\n            parseTimestampMap(v);\n            break;\n          }\n        }, /=/);\n      } else {\n        parseOptions(input, function (k, v) {\n          switch (k) {\n          case \"Region\":\n            // 3.3 WebVTT region metadata header syntax\n            parseRegion(v);\n            break;\n          }\n        }, /:/);\n      }\n\n    }\n\n    // 5.1 WebVTT file parsing.\n    try {\n      var line;\n      if (self.state === \"INITIAL\") {\n        // We can't start parsing until we have the first line.\n        if (!/\\r\\n|\\n/.test(self.buffer)) {\n          return this;\n        }\n\n        line = collectNextLine();\n\n        var m = line.match(/^WEBVTT([ \\t].*)?$/);\n        if (!m || !m[0]) {\n          throw new ParsingError(ParsingError.Errors.BadSignature);\n        }\n\n        self.state = \"HEADER\";\n      }\n\n      var alreadyCollectedLine = false;\n      while (self.buffer) {\n        // We can't parse a line until we have the full line.\n        if (!/\\r\\n|\\n/.test(self.buffer)) {\n          return this;\n        }\n\n        if (!alreadyCollectedLine) {\n          line = collectNextLine();\n        } else {\n          alreadyCollectedLine = false;\n        }\n\n        switch (self.state) {\n        case \"HEADER\":\n          // 13-18 - Allow a header (metadata) under the WEBVTT line.\n          if (/:/.test(line)) {\n            parseHeader(line);\n          } else if (!line) {\n            // An empty line terminates the header and starts the body (cues).\n            self.state = \"ID\";\n          }\n          continue;\n        case \"NOTE\":\n          // Ignore NOTE blocks.\n          if (!line) {\n            self.state = \"ID\";\n          }\n          continue;\n        case \"ID\":\n          // Check for the start of NOTE blocks.\n          if (/^NOTE($|[ \\t])/.test(line)) {\n            self.state = \"NOTE\";\n            break;\n          }\n          // 19-29 - Allow any number of line terminators, then initialize new cue values.\n          if (!line) {\n            continue;\n          }\n          self.cue = new (self.vttjs.VTTCue || self.window.VTTCue)(0, 0, \"\");\n          self.state = \"CUE\";\n          // 30-39 - Check if self line contains an optional identifier or timing data.\n          if (line.indexOf(\"-->\") === -1) {\n            self.cue.id = line;\n            continue;\n          }\n          // Process line as start of a cue.\n          /*falls through*/\n        case \"CUE\":\n          // 40 - Collect cue timings and settings.\n          try {\n            parseCue(line, self.cue, self.regionList);\n          } catch (e) {\n            self.reportOrThrowError(e);\n            // In case of an error ignore rest of the cue.\n            self.cue = null;\n            self.state = \"BADCUE\";\n            continue;\n          }\n          self.state = \"CUETEXT\";\n          continue;\n        case \"CUETEXT\":\n          var hasSubstring = line.indexOf(\"-->\") !== -1;\n          // 34 - If we have an empty line then report the cue.\n          // 35 - If we have the special substring '-->' then report the cue,\n          // but do not collect the line as we need to process the current\n          // one as a new cue.\n          if (!line || hasSubstring && (alreadyCollectedLine = true)) {\n            // We are done parsing self cue.\n            self.oncue && self.oncue(self.cue);\n            self.cue = null;\n            self.state = \"ID\";\n            continue;\n          }\n          if (self.cue.text) {\n            self.cue.text += \"\\n\";\n          }\n          self.cue.text += line;\n          continue;\n        case \"BADCUE\": // BADCUE\n          // 54-62 - Collect and discard the remaining cue.\n          if (!line) {\n            self.state = \"ID\";\n          }\n          continue;\n        }\n      }\n    } catch (e) {\n      self.reportOrThrowError(e);\n\n      // If we are currently parsing a cue, report what we have.\n      if (self.state === \"CUETEXT\" && self.cue && self.oncue) {\n        self.oncue(self.cue);\n      }\n      self.cue = null;\n      // Enter BADWEBVTT state if header was not parsed correctly otherwise\n      // another exception occurred so enter BADCUE state.\n      self.state = self.state === \"INITIAL\" ? \"BADWEBVTT\" : \"BADCUE\";\n    }\n    return this;\n  },\n  flush: function () {\n    var self = this;\n    try {\n      // Finish decoding the stream.\n      self.buffer += self.decoder.decode();\n      // Synthesize the end of the current cue or region.\n      if (self.cue || self.state === \"HEADER\") {\n        self.buffer += \"\\n\\n\";\n        self.parse();\n      }\n      // If we've flushed, parsed, and we're still on the INITIAL state then\n      // that means we don't have enough of the stream to parse the first\n      // line.\n      if (self.state === \"INITIAL\") {\n        throw new ParsingError(ParsingError.Errors.BadSignature);\n      }\n    } catch(e) {\n      self.reportOrThrowError(e);\n    }\n    self.onflush && self.onflush();\n    return this;\n  }\n};\n\nmodule.exports = WebVTT;\n","/**\n * Copyright 2013 vtt.js Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar autoKeyword = \"auto\";\nvar directionSetting = {\n  \"\": 1,\n  \"lr\": 1,\n  \"rl\": 1\n};\nvar alignSetting = {\n  \"start\": 1,\n  \"middle\": 1,\n  \"end\": 1,\n  \"left\": 1,\n  \"right\": 1\n};\n\nfunction findDirectionSetting(value) {\n  if (typeof value !== \"string\") {\n    return false;\n  }\n  var dir = directionSetting[value.toLowerCase()];\n  return dir ? value.toLowerCase() : false;\n}\n\nfunction findAlignSetting(value) {\n  if (typeof value !== \"string\") {\n    return false;\n  }\n  var align = alignSetting[value.toLowerCase()];\n  return align ? value.toLowerCase() : false;\n}\n\nfunction VTTCue(startTime, endTime, text) {\n  /**\n   * Shim implementation specific properties. These properties are not in\n   * the spec.\n   */\n\n  // Lets us know when the VTTCue's data has changed in such a way that we need\n  // to recompute its display state. This lets us compute its display state\n  // lazily.\n  this.hasBeenReset = false;\n\n  /**\n   * VTTCue and TextTrackCue properties\n   * http://dev.w3.org/html5/webvtt/#vttcue-interface\n   */\n\n  var _id = \"\";\n  var _pauseOnExit = false;\n  var _startTime = startTime;\n  var _endTime = endTime;\n  var _text = text;\n  var _region = null;\n  var _vertical = \"\";\n  var _snapToLines = true;\n  var _line = \"auto\";\n  var _lineAlign = \"start\";\n  var _position = 50;\n  var _positionAlign = \"middle\";\n  var _size = 50;\n  var _align = \"middle\";\n\n  Object.defineProperties(this, {\n    \"id\": {\n      enumerable: true,\n      get: function() {\n        return _id;\n      },\n      set: function(value) {\n        _id = \"\" + value;\n      }\n    },\n\n    \"pauseOnExit\": {\n      enumerable: true,\n      get: function() {\n        return _pauseOnExit;\n      },\n      set: function(value) {\n        _pauseOnExit = !!value;\n      }\n    },\n\n    \"startTime\": {\n      enumerable: true,\n      get: function() {\n        return _startTime;\n      },\n      set: function(value) {\n        if (typeof value !== \"number\") {\n          throw new TypeError(\"Start time must be set to a number.\");\n        }\n        _startTime = value;\n        this.hasBeenReset = true;\n      }\n    },\n\n    \"endTime\": {\n      enumerable: true,\n      get: function() {\n        return _endTime;\n      },\n      set: function(value) {\n        if (typeof value !== \"number\") {\n          throw new TypeError(\"End time must be set to a number.\");\n        }\n        _endTime = value;\n        this.hasBeenReset = true;\n      }\n    },\n\n    \"text\": {\n      enumerable: true,\n      get: function() {\n        return _text;\n      },\n      set: function(value) {\n        _text = \"\" + value;\n        this.hasBeenReset = true;\n      }\n    },\n\n    \"region\": {\n      enumerable: true,\n      get: function() {\n        return _region;\n      },\n      set: function(value) {\n        _region = value;\n        this.hasBeenReset = true;\n      }\n    },\n\n    \"vertical\": {\n      enumerable: true,\n      get: function() {\n        return _vertical;\n      },\n      set: function(value) {\n        var setting = findDirectionSetting(value);\n        // Have to check for false because the setting an be an empty string.\n        if (setting === false) {\n          throw new SyntaxError(\"An invalid or illegal string was specified.\");\n        }\n        _vertical = setting;\n        this.hasBeenReset = true;\n      }\n    },\n\n    \"snapToLines\": {\n      enumerable: true,\n      get: function() {\n        return _snapToLines;\n      },\n      set: function(value) {\n        _snapToLines = !!value;\n        this.hasBeenReset = true;\n      }\n    },\n\n    \"line\": {\n      enumerable: true,\n      get: function() {\n        return _line;\n      },\n      set: function(value) {\n        if (typeof value !== \"number\" && value !== autoKeyword) {\n          throw new SyntaxError(\"An invalid number or illegal string was specified.\");\n        }\n        _line = value;\n        this.hasBeenReset = true;\n      }\n    },\n\n    \"lineAlign\": {\n      enumerable: true,\n      get: function() {\n        return _lineAlign;\n      },\n      set: function(value) {\n        var setting = findAlignSetting(value);\n        if (!setting) {\n          throw new SyntaxError(\"An invalid or illegal string was specified.\");\n        }\n        _lineAlign = setting;\n        this.hasBeenReset = true;\n      }\n    },\n\n    \"position\": {\n      enumerable: true,\n      get: function() {\n        return _position;\n      },\n      set: function(value) {\n        if (value < 0 || value > 100) {\n          throw new Error(\"Position must be between 0 and 100.\");\n        }\n        _position = value;\n        this.hasBeenReset = true;\n      }\n    },\n\n    \"positionAlign\": {\n      enumerable: true,\n      get: function() {\n        return _positionAlign;\n      },\n      set: function(value) {\n        var setting = findAlignSetting(value);\n        if (!setting) {\n          throw new SyntaxError(\"An invalid or illegal string was specified.\");\n        }\n        _positionAlign = setting;\n        this.hasBeenReset = true;\n      }\n    },\n\n    \"size\": {\n      enumerable: true,\n      get: function() {\n        return _size;\n      },\n      set: function(value) {\n        if (value < 0 || value > 100) {\n          throw new Error(\"Size must be between 0 and 100.\");\n        }\n        _size = value;\n        this.hasBeenReset = true;\n      }\n    },\n\n    \"align\": {\n      enumerable: true,\n      get: function() {\n        return _align;\n      },\n      set: function(value) {\n        var setting = findAlignSetting(value);\n        if (!setting) {\n          throw new SyntaxError(\"An invalid or illegal string was specified.\");\n        }\n        _align = setting;\n        this.hasBeenReset = true;\n      }\n    }\n  });\n\n  /**\n   * Other <track> spec defined properties\n   */\n\n  // http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html#text-track-cue-display-state\n  this.displayState = undefined;\n}\n\n/**\n * VTTCue methods\n */\n\nVTTCue.prototype.getCueAsHTML = function() {\n  // Assume WebVTT.convertCueToDOMTree is on the global.\n  return WebVTT.convertCueToDOMTree(window, this.text);\n};\n\nmodule.exports = VTTCue;\n","/**\n * Copyright 2013 vtt.js Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar scrollSetting = {\n  \"\": true,\n  \"up\": true\n};\n\nfunction findScrollSetting(value) {\n  if (typeof value !== \"string\") {\n    return false;\n  }\n  var scroll = scrollSetting[value.toLowerCase()];\n  return scroll ? value.toLowerCase() : false;\n}\n\nfunction isValidPercentValue(value) {\n  return typeof value === \"number\" && (value >= 0 && value <= 100);\n}\n\n// VTTRegion shim http://dev.w3.org/html5/webvtt/#vttregion-interface\nfunction VTTRegion() {\n  var _width = 100;\n  var _lines = 3;\n  var _regionAnchorX = 0;\n  var _regionAnchorY = 100;\n  var _viewportAnchorX = 0;\n  var _viewportAnchorY = 100;\n  var _scroll = \"\";\n\n  Object.defineProperties(this, {\n    \"width\": {\n      enumerable: true,\n      get: function() {\n        return _width;\n      },\n      set: function(value) {\n        if (!isValidPercentValue(value)) {\n          throw new Error(\"Width must be between 0 and 100.\");\n        }\n        _width = value;\n      }\n    },\n    \"lines\": {\n      enumerable: true,\n      get: function() {\n        return _lines;\n      },\n      set: function(value) {\n        if (typeof value !== \"number\") {\n          throw new TypeError(\"Lines must be set to a number.\");\n        }\n        _lines = value;\n      }\n    },\n    \"regionAnchorY\": {\n      enumerable: true,\n      get: function() {\n        return _regionAnchorY;\n      },\n      set: function(value) {\n        if (!isValidPercentValue(value)) {\n          throw new Error(\"RegionAnchorX must be between 0 and 100.\");\n        }\n        _regionAnchorY = value;\n      }\n    },\n    \"regionAnchorX\": {\n      enumerable: true,\n      get: function() {\n        return _regionAnchorX;\n      },\n      set: function(value) {\n        if(!isValidPercentValue(value)) {\n          throw new Error(\"RegionAnchorY must be between 0 and 100.\");\n        }\n        _regionAnchorX = value;\n      }\n    },\n    \"viewportAnchorY\": {\n      enumerable: true,\n      get: function() {\n        return _viewportAnchorY;\n      },\n      set: function(value) {\n        if (!isValidPercentValue(value)) {\n          throw new Error(\"ViewportAnchorY must be between 0 and 100.\");\n        }\n        _viewportAnchorY = value;\n      }\n    },\n    \"viewportAnchorX\": {\n      enumerable: true,\n      get: function() {\n        return _viewportAnchorX;\n      },\n      set: function(value) {\n        if (!isValidPercentValue(value)) {\n          throw new Error(\"ViewportAnchorX must be between 0 and 100.\");\n        }\n        _viewportAnchorX = value;\n      }\n    },\n    \"scroll\": {\n      enumerable: true,\n      get: function() {\n        return _scroll;\n      },\n      set: function(value) {\n        var setting = findScrollSetting(value);\n        // Have to check for false as an empty string is a legal value.\n        if (setting === false) {\n          throw new SyntaxError(\"An invalid or illegal string was specified.\");\n        }\n        _scroll = setting;\n      }\n    }\n  });\n}\n\nmodule.exports = VTTRegion;\n","module.exports = SafeParseTuple\n\nfunction SafeParseTuple(obj, reviver) {\n    var json\n    var error = null\n\n    try {\n        json = JSON.parse(obj, reviver)\n    } catch (err) {\n        error = err\n    }\n\n    return [error, json]\n}\n","var toUnsigned = function(value) {\n  return value >>> 0;\n};\n\nmodule.exports = {\n  toUnsigned: toUnsigned\n};\n","module.exports = {\n  generator: require('./mp4-generator'),\n  probe: require('./probe'),\n  Transmuxer: require('./transmuxer').Transmuxer,\n  AudioSegmentStream: require('./transmuxer').AudioSegmentStream,\n  VideoSegmentStream: require('./transmuxer').VideoSegmentStream,\n  CaptionParser: require('./caption-parser')\n};\n","// Convert an array of nal units into an array of frames with each frame being\n// composed of the nal units that make up that frame\n// Also keep track of cummulative data about the frame from the nal units such\n// as the frame duration, starting pts, etc.\nvar groupNalsIntoFrames = function(nalUnits) {\n  var\n    i,\n    currentNal,\n    currentFrame = [],\n    frames = [];\n\n  currentFrame.byteLength = 0;\n\n  for (i = 0; i < nalUnits.length; i++) {\n    currentNal = nalUnits[i];\n\n    // Split on 'aud'-type nal units\n    if (currentNal.nalUnitType === 'access_unit_delimiter_rbsp') {\n      // Since the very first nal unit is expected to be an AUD\n      // only push to the frames array when currentFrame is not empty\n      if (currentFrame.length) {\n        currentFrame.duration = currentNal.dts - currentFrame.dts;\n        frames.push(currentFrame);\n      }\n      currentFrame = [currentNal];\n      currentFrame.byteLength = currentNal.data.byteLength;\n      currentFrame.pts = currentNal.pts;\n      currentFrame.dts = currentNal.dts;\n    } else {\n      // Specifically flag key frames for ease of use later\n      if (currentNal.nalUnitType === 'slice_layer_without_partitioning_rbsp_idr') {\n        currentFrame.keyFrame = true;\n      }\n      currentFrame.duration = currentNal.dts - currentFrame.dts;\n      currentFrame.byteLength += currentNal.data.byteLength;\n      currentFrame.push(currentNal);\n    }\n  }\n\n  // For the last frame, use the duration of the previous frame if we\n  // have nothing better to go on\n  if (frames.length &&\n      (!currentFrame.duration ||\n       currentFrame.duration <= 0)) {\n    currentFrame.duration = frames[frames.length - 1].duration;\n  }\n\n  // Push the final frame\n  frames.push(currentFrame);\n  return frames;\n};\n\n// Convert an array of frames into an array of Gop with each Gop being composed\n// of the frames that make up that Gop\n// Also keep track of cummulative data about the Gop from the frames such as the\n// Gop duration, starting pts, etc.\nvar groupFramesIntoGops = function(frames) {\n  var\n    i,\n    currentFrame,\n    currentGop = [],\n    gops = [];\n\n  // We must pre-set some of the values on the Gop since we\n  // keep running totals of these values\n  currentGop.byteLength = 0;\n  currentGop.nalCount = 0;\n  currentGop.duration = 0;\n  currentGop.pts = frames[0].pts;\n  currentGop.dts = frames[0].dts;\n\n  // store some metadata about all the Gops\n  gops.byteLength = 0;\n  gops.nalCount = 0;\n  gops.duration = 0;\n  gops.pts = frames[0].pts;\n  gops.dts = frames[0].dts;\n\n  for (i = 0; i < frames.length; i++) {\n    currentFrame = frames[i];\n\n    if (currentFrame.keyFrame) {\n      // Since the very first frame is expected to be an keyframe\n      // only push to the gops array when currentGop is not empty\n      if (currentGop.length) {\n        gops.push(currentGop);\n        gops.byteLength += currentGop.byteLength;\n        gops.nalCount += currentGop.nalCount;\n        gops.duration += currentGop.duration;\n      }\n\n      currentGop = [currentFrame];\n      currentGop.nalCount = currentFrame.length;\n      currentGop.byteLength = currentFrame.byteLength;\n      currentGop.pts = currentFrame.pts;\n      currentGop.dts = currentFrame.dts;\n      currentGop.duration = currentFrame.duration;\n    } else {\n      currentGop.duration += currentFrame.duration;\n      currentGop.nalCount += currentFrame.length;\n      currentGop.byteLength += currentFrame.byteLength;\n      currentGop.push(currentFrame);\n    }\n  }\n\n  if (gops.length && currentGop.duration <= 0) {\n    currentGop.duration = gops[gops.length - 1].duration;\n  }\n  gops.byteLength += currentGop.byteLength;\n  gops.nalCount += currentGop.nalCount;\n  gops.duration += currentGop.duration;\n\n  // push the final Gop\n  gops.push(currentGop);\n  return gops;\n};\n\n/*\n * Search for the first keyframe in the GOPs and throw away all frames\n * until that keyframe. Then extend the duration of the pulled keyframe\n * and pull the PTS and DTS of the keyframe so that it covers the time\n * range of the frames that were disposed.\n *\n * @param {Array} gops video GOPs\n * @returns {Array} modified video GOPs\n */\nvar extendFirstKeyFrame = function(gops) {\n  var currentGop;\n\n  if (!gops[0][0].keyFrame && gops.length > 1) {\n    // Remove the first GOP\n    currentGop = gops.shift();\n\n    gops.byteLength -= currentGop.byteLength;\n    gops.nalCount -= currentGop.nalCount;\n\n    // Extend the first frame of what is now the\n    // first gop to cover the time period of the\n    // frames we just removed\n    gops[0][0].dts = currentGop.dts;\n    gops[0][0].pts = currentGop.pts;\n    gops[0][0].duration += currentGop.duration;\n  }\n\n  return gops;\n};\n\n/**\n * Default sample object\n * see ISO/IEC 14496-12:2012, section 8.6.4.3\n */\nvar createDefaultSample = function() {\n  return {\n    size: 0,\n    flags: {\n      isLeading: 0,\n      dependsOn: 1,\n      isDependedOn: 0,\n      hasRedundancy: 0,\n      degradationPriority: 0,\n      isNonSyncSample: 1\n    }\n  };\n};\n\n/*\n * Collates information from a video frame into an object for eventual\n * entry into an MP4 sample table.\n *\n * @param {Object} frame the video frame\n * @param {Number} dataOffset the byte offset to position the sample\n * @return {Object} object containing sample table info for a frame\n */\nvar sampleForFrame = function(frame, dataOffset) {\n  var sample = createDefaultSample();\n\n  sample.dataOffset = dataOffset;\n  sample.compositionTimeOffset = frame.pts - frame.dts;\n  sample.duration = frame.duration;\n  sample.size = 4 * frame.length; // Space for nal unit size\n  sample.size += frame.byteLength;\n\n  if (frame.keyFrame) {\n    sample.flags.dependsOn = 2;\n    sample.flags.isNonSyncSample = 0;\n  }\n\n  return sample;\n};\n\n// generate the track's sample table from an array of gops\nvar generateSampleTable = function(gops, baseDataOffset) {\n  var\n    h, i,\n    sample,\n    currentGop,\n    currentFrame,\n    dataOffset = baseDataOffset || 0,\n    samples = [];\n\n  for (h = 0; h < gops.length; h++) {\n    currentGop = gops[h];\n\n    for (i = 0; i < currentGop.length; i++) {\n      currentFrame = currentGop[i];\n\n      sample = sampleForFrame(currentFrame, dataOffset);\n\n      dataOffset += sample.size;\n\n      samples.push(sample);\n    }\n  }\n  return samples;\n};\n\n// generate the track's raw mdat data from an array of gops\nvar concatenateNalData = function(gops) {\n  var\n    h, i, j,\n    currentGop,\n    currentFrame,\n    currentNal,\n    dataOffset = 0,\n    nalsByteLength = gops.byteLength,\n    numberOfNals = gops.nalCount,\n    totalByteLength = nalsByteLength + 4 * numberOfNals,\n    data = new Uint8Array(totalByteLength),\n    view = new DataView(data.buffer);\n\n  // For each Gop..\n  for (h = 0; h < gops.length; h++) {\n    currentGop = gops[h];\n\n    // For each Frame..\n    for (i = 0; i < currentGop.length; i++) {\n      currentFrame = currentGop[i];\n\n      // For each NAL..\n      for (j = 0; j < currentFrame.length; j++) {\n        currentNal = currentFrame[j];\n\n        view.setUint32(dataOffset, currentNal.data.byteLength);\n        dataOffset += 4;\n        data.set(currentNal.data, dataOffset);\n        dataOffset += currentNal.data.byteLength;\n      }\n    }\n  }\n  return data;\n};\n\nmodule.exports = {\n  groupNalsIntoFrames: groupNalsIntoFrames,\n  groupFramesIntoGops: groupFramesIntoGops,\n  extendFirstKeyFrame: extendFirstKeyFrame,\n  generateSampleTable: generateSampleTable,\n  concatenateNalData: concatenateNalData\n};\n","var ONE_SECOND_IN_TS = 90000; // 90kHz clock\n\n/**\n * Store information about the start and end of the track and the\n * duration for each frame/sample we process in order to calculate\n * the baseMediaDecodeTime\n */\nvar collectDtsInfo = function(track, data) {\n  if (typeof data.pts === 'number') {\n    if (track.timelineStartInfo.pts === undefined) {\n      track.timelineStartInfo.pts = data.pts;\n    }\n\n    if (track.minSegmentPts === undefined) {\n      track.minSegmentPts = data.pts;\n    } else {\n      track.minSegmentPts = Math.min(track.minSegmentPts, data.pts);\n    }\n\n    if (track.maxSegmentPts === undefined) {\n      track.maxSegmentPts = data.pts;\n    } else {\n      track.maxSegmentPts = Math.max(track.maxSegmentPts, data.pts);\n    }\n  }\n\n  if (typeof data.dts === 'number') {\n    if (track.timelineStartInfo.dts === undefined) {\n      track.timelineStartInfo.dts = data.dts;\n    }\n\n    if (track.minSegmentDts === undefined) {\n      track.minSegmentDts = data.dts;\n    } else {\n      track.minSegmentDts = Math.min(track.minSegmentDts, data.dts);\n    }\n\n    if (track.maxSegmentDts === undefined) {\n      track.maxSegmentDts = data.dts;\n    } else {\n      track.maxSegmentDts = Math.max(track.maxSegmentDts, data.dts);\n    }\n  }\n};\n\n/**\n * Clear values used to calculate the baseMediaDecodeTime between\n * tracks\n */\nvar clearDtsInfo = function(track) {\n  delete track.minSegmentDts;\n  delete track.maxSegmentDts;\n  delete track.minSegmentPts;\n  delete track.maxSegmentPts;\n};\n\n/**\n * Calculate the track's baseMediaDecodeTime based on the earliest\n * DTS the transmuxer has ever seen and the minimum DTS for the\n * current track\n * @param track {object} track metadata configuration\n * @param keepOriginalTimestamps {boolean} If true, keep the timestamps\n *        in the source; false to adjust the first segment to start at 0.\n */\nvar calculateTrackBaseMediaDecodeTime = function(track, keepOriginalTimestamps) {\n  var\n    baseMediaDecodeTime,\n    scale,\n    minSegmentDts = track.minSegmentDts;\n\n  // Optionally adjust the time so the first segment starts at zero.\n  if (!keepOriginalTimestamps) {\n    minSegmentDts -= track.timelineStartInfo.dts;\n  }\n\n  // track.timelineStartInfo.baseMediaDecodeTime is the location, in time, where\n  // we want the start of the first segment to be placed\n  baseMediaDecodeTime = track.timelineStartInfo.baseMediaDecodeTime;\n\n  // Add to that the distance this segment is from the very first\n  baseMediaDecodeTime += minSegmentDts;\n\n  // baseMediaDecodeTime must not become negative\n  baseMediaDecodeTime = Math.max(0, baseMediaDecodeTime);\n\n  if (track.type === 'audio') {\n    // Audio has a different clock equal to the sampling_rate so we need to\n    // scale the PTS values into the clock rate of the track\n    scale = track.samplerate / ONE_SECOND_IN_TS;\n    baseMediaDecodeTime *= scale;\n    baseMediaDecodeTime = Math.floor(baseMediaDecodeTime);\n  }\n\n  return baseMediaDecodeTime;\n};\n\nmodule.exports = {\n  clearDtsInfo: clearDtsInfo,\n  calculateTrackBaseMediaDecodeTime: calculateTrackBaseMediaDecodeTime,\n  collectDtsInfo: collectDtsInfo\n};\n","/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * A stream-based mp2t to mp4 converter. This utility can be used to\n * deliver mp4s to a SourceBuffer on platforms that support native\n * Media Source Extensions.\n */\n'use strict';\nvar Stream = require('../utils/stream.js'),\n  CaptionStream = require('./caption-stream'),\n  StreamTypes = require('./stream-types'),\n  TimestampRolloverStream = require('./timestamp-rollover-stream').TimestampRolloverStream;\n\nvar m2tsStreamTypes = require('./stream-types.js');\n\n// object types\nvar TransportPacketStream, TransportParseStream, ElementaryStream;\n\n// constants\nvar\n  MP2T_PACKET_LENGTH = 188, // bytes\n  SYNC_BYTE = 0x47;\n\n/**\n * Splits an incoming stream of binary data into MPEG-2 Transport\n * Stream packets.\n */\nTransportPacketStream = function() {\n  var\n    buffer = new Uint8Array(MP2T_PACKET_LENGTH),\n    bytesInBuffer = 0;\n\n  TransportPacketStream.prototype.init.call(this);\n\n   // Deliver new bytes to the stream.\n\n  /**\n   * Split a stream of data into M2TS packets\n  **/\n  this.push = function(bytes) {\n    var\n      startIndex = 0,\n      endIndex = MP2T_PACKET_LENGTH,\n      everything;\n\n    // If there are bytes remaining from the last segment, prepend them to the\n    // bytes that were pushed in\n    if (bytesInBuffer) {\n      everything = new Uint8Array(bytes.byteLength + bytesInBuffer);\n      everything.set(buffer.subarray(0, bytesInBuffer));\n      everything.set(bytes, bytesInBuffer);\n      bytesInBuffer = 0;\n    } else {\n      everything = bytes;\n    }\n\n    // While we have enough data for a packet\n    while (endIndex < everything.byteLength) {\n      // Look for a pair of start and end sync bytes in the data..\n      if (everything[startIndex] === SYNC_BYTE && everything[endIndex] === SYNC_BYTE) {\n        // We found a packet so emit it and jump one whole packet forward in\n        // the stream\n        this.trigger('data', everything.subarray(startIndex, endIndex));\n        startIndex += MP2T_PACKET_LENGTH;\n        endIndex += MP2T_PACKET_LENGTH;\n        continue;\n      }\n      // If we get here, we have somehow become de-synchronized and we need to step\n      // forward one byte at a time until we find a pair of sync bytes that denote\n      // a packet\n      startIndex++;\n      endIndex++;\n    }\n\n    // If there was some data left over at the end of the segment that couldn't\n    // possibly be a whole packet, keep it because it might be the start of a packet\n    // that continues in the next segment\n    if (startIndex < everything.byteLength) {\n      buffer.set(everything.subarray(startIndex), 0);\n      bytesInBuffer = everything.byteLength - startIndex;\n    }\n  };\n\n  /**\n   * Passes identified M2TS packets to the TransportParseStream to be parsed\n  **/\n  this.flush = function() {\n    // If the buffer contains a whole packet when we are being flushed, emit it\n    // and empty the buffer. Otherwise hold onto the data because it may be\n    // important for decoding the next segment\n    if (bytesInBuffer === MP2T_PACKET_LENGTH && buffer[0] === SYNC_BYTE) {\n      this.trigger('data', buffer);\n      bytesInBuffer = 0;\n    }\n    this.trigger('done');\n  };\n};\nTransportPacketStream.prototype = new Stream();\n\n/**\n * Accepts an MP2T TransportPacketStream and emits data events with parsed\n * forms of the individual transport stream packets.\n */\nTransportParseStream = function() {\n  var parsePsi, parsePat, parsePmt, self;\n  TransportParseStream.prototype.init.call(this);\n  self = this;\n\n  this.packetsWaitingForPmt = [];\n  this.programMapTable = undefined;\n\n  parsePsi = function(payload, psi) {\n    var offset = 0;\n\n    // PSI packets may be split into multiple sections and those\n    // sections may be split into multiple packets. If a PSI\n    // section starts in this packet, the payload_unit_start_indicator\n    // will be true and the first byte of the payload will indicate\n    // the offset from the current position to the start of the\n    // section.\n    if (psi.payloadUnitStartIndicator) {\n      offset += payload[offset] + 1;\n    }\n\n    if (psi.type === 'pat') {\n      parsePat(payload.subarray(offset), psi);\n    } else {\n      parsePmt(payload.subarray(offset), psi);\n    }\n  };\n\n  parsePat = function(payload, pat) {\n    pat.section_number = payload[7]; // eslint-disable-line camelcase\n    pat.last_section_number = payload[8]; // eslint-disable-line camelcase\n\n    // skip the PSI header and parse the first PMT entry\n    self.pmtPid = (payload[10] & 0x1F) << 8 | payload[11];\n    pat.pmtPid = self.pmtPid;\n  };\n\n  /**\n   * Parse out the relevant fields of a Program Map Table (PMT).\n   * @param payload {Uint8Array} the PMT-specific portion of an MP2T\n   * packet. The first byte in this array should be the table_id\n   * field.\n   * @param pmt {object} the object that should be decorated with\n   * fields parsed from the PMT.\n   */\n  parsePmt = function(payload, pmt) {\n    var sectionLength, tableEnd, programInfoLength, offset;\n\n    // PMTs can be sent ahead of the time when they should actually\n    // take effect. We don't believe this should ever be the case\n    // for HLS but we'll ignore \"forward\" PMT declarations if we see\n    // them. Future PMT declarations have the current_next_indicator\n    // set to zero.\n    if (!(payload[5] & 0x01)) {\n      return;\n    }\n\n    // overwrite any existing program map table\n    self.programMapTable = {\n      video: null,\n      audio: null,\n      'timed-metadata': {}\n    };\n\n    // the mapping table ends at the end of the current section\n    sectionLength = (payload[1] & 0x0f) << 8 | payload[2];\n    tableEnd = 3 + sectionLength - 4;\n\n    // to determine where the table is, we have to figure out how\n    // long the program info descriptors are\n    programInfoLength = (payload[10] & 0x0f) << 8 | payload[11];\n\n    // advance the offset to the first entry in the mapping table\n    offset = 12 + programInfoLength;\n    while (offset < tableEnd) {\n      var streamType = payload[offset];\n      var pid = (payload[offset + 1] & 0x1F) << 8 | payload[offset + 2];\n\n      // only map a single elementary_pid for audio and video stream types\n      // TODO: should this be done for metadata too? for now maintain behavior of\n      //       multiple metadata streams\n      if (streamType === StreamTypes.H264_STREAM_TYPE &&\n          self.programMapTable.video === null) {\n        self.programMapTable.video = pid;\n      } else if (streamType === StreamTypes.ADTS_STREAM_TYPE &&\n                 self.programMapTable.audio === null) {\n        self.programMapTable.audio = pid;\n      } else if (streamType === StreamTypes.METADATA_STREAM_TYPE) {\n        // map pid to stream type for metadata streams\n        self.programMapTable['timed-metadata'][pid] = streamType;\n      }\n\n      // move to the next table entry\n      // skip past the elementary stream descriptors, if present\n      offset += ((payload[offset + 3] & 0x0F) << 8 | payload[offset + 4]) + 5;\n    }\n\n    // record the map on the packet as well\n    pmt.programMapTable = self.programMapTable;\n  };\n\n  /**\n   * Deliver a new MP2T packet to the next stream in the pipeline.\n   */\n  this.push = function(packet) {\n    var\n      result = {},\n      offset = 4;\n\n    result.payloadUnitStartIndicator = !!(packet[1] & 0x40);\n\n    // pid is a 13-bit field starting at the last bit of packet[1]\n    result.pid = packet[1] & 0x1f;\n    result.pid <<= 8;\n    result.pid |= packet[2];\n\n    // if an adaption field is present, its length is specified by the\n    // fifth byte of the TS packet header. The adaptation field is\n    // used to add stuffing to PES packets that don't fill a complete\n    // TS packet, and to specify some forms of timing and control data\n    // that we do not currently use.\n    if (((packet[3] & 0x30) >>> 4) > 0x01) {\n      offset += packet[offset] + 1;\n    }\n\n    // parse the rest of the packet based on the type\n    if (result.pid === 0) {\n      result.type = 'pat';\n      parsePsi(packet.subarray(offset), result);\n      this.trigger('data', result);\n    } else if (result.pid === this.pmtPid) {\n      result.type = 'pmt';\n      parsePsi(packet.subarray(offset), result);\n      this.trigger('data', result);\n\n      // if there are any packets waiting for a PMT to be found, process them now\n      while (this.packetsWaitingForPmt.length) {\n        this.processPes_.apply(this, this.packetsWaitingForPmt.shift());\n      }\n    } else if (this.programMapTable === undefined) {\n      // When we have not seen a PMT yet, defer further processing of\n      // PES packets until one has been parsed\n      this.packetsWaitingForPmt.push([packet, offset, result]);\n    } else {\n      this.processPes_(packet, offset, result);\n    }\n  };\n\n  this.processPes_ = function(packet, offset, result) {\n    // set the appropriate stream type\n    if (result.pid === this.programMapTable.video) {\n      result.streamType = StreamTypes.H264_STREAM_TYPE;\n    } else if (result.pid === this.programMapTable.audio) {\n      result.streamType = StreamTypes.ADTS_STREAM_TYPE;\n    } else {\n      // if not video or audio, it is timed-metadata or unknown\n      // if unknown, streamType will be undefined\n      result.streamType = this.programMapTable['timed-metadata'][result.pid];\n    }\n\n    result.type = 'pes';\n    result.data = packet.subarray(offset);\n\n    this.trigger('data', result);\n  };\n\n};\nTransportParseStream.prototype = new Stream();\nTransportParseStream.STREAM_TYPES  = {\n  h264: 0x1b,\n  adts: 0x0f\n};\n\n/**\n * Reconsistutes program elementary stream (PES) packets from parsed\n * transport stream packets. That is, if you pipe an\n * mp2t.TransportParseStream into a mp2t.ElementaryStream, the output\n * events will be events which capture the bytes for individual PES\n * packets plus relevant metadata that has been extracted from the\n * container.\n */\nElementaryStream = function() {\n  var\n    self = this,\n    // PES packet fragments\n    video = {\n      data: [],\n      size: 0\n    },\n    audio = {\n      data: [],\n      size: 0\n    },\n    timedMetadata = {\n      data: [],\n      size: 0\n    },\n    parsePes = function(payload, pes) {\n      var ptsDtsFlags;\n\n      // get the packet length, this will be 0 for video\n      pes.packetLength = 6 + ((payload[4] << 8) | payload[5]);\n\n      // find out if this packets starts a new keyframe\n      pes.dataAlignmentIndicator = (payload[6] & 0x04) !== 0;\n      // PES packets may be annotated with a PTS value, or a PTS value\n      // and a DTS value. Determine what combination of values is\n      // available to work with.\n      ptsDtsFlags = payload[7];\n\n      // PTS and DTS are normally stored as a 33-bit number.  Javascript\n      // performs all bitwise operations on 32-bit integers but javascript\n      // supports a much greater range (52-bits) of integer using standard\n      // mathematical operations.\n      // We construct a 31-bit value using bitwise operators over the 31\n      // most significant bits and then multiply by 4 (equal to a left-shift\n      // of 2) before we add the final 2 least significant bits of the\n      // timestamp (equal to an OR.)\n      if (ptsDtsFlags & 0xC0) {\n        // the PTS and DTS are not written out directly. For information\n        // on how they are encoded, see\n        // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n        pes.pts = (payload[9] & 0x0E) << 27 |\n          (payload[10] & 0xFF) << 20 |\n          (payload[11] & 0xFE) << 12 |\n          (payload[12] & 0xFF) <<  5 |\n          (payload[13] & 0xFE) >>>  3;\n        pes.pts *= 4; // Left shift by 2\n        pes.pts += (payload[13] & 0x06) >>> 1; // OR by the two LSBs\n        pes.dts = pes.pts;\n        if (ptsDtsFlags & 0x40) {\n          pes.dts = (payload[14] & 0x0E) << 27 |\n            (payload[15] & 0xFF) << 20 |\n            (payload[16] & 0xFE) << 12 |\n            (payload[17] & 0xFF) << 5 |\n            (payload[18] & 0xFE) >>> 3;\n          pes.dts *= 4; // Left shift by 2\n          pes.dts += (payload[18] & 0x06) >>> 1; // OR by the two LSBs\n        }\n      }\n      // the data section starts immediately after the PES header.\n      // pes_header_data_length specifies the number of header bytes\n      // that follow the last byte of the field.\n      pes.data = payload.subarray(9 + payload[8]);\n    },\n    /**\n      * Pass completely parsed PES packets to the next stream in the pipeline\n     **/\n    flushStream = function(stream, type, forceFlush) {\n      var\n        packetData = new Uint8Array(stream.size),\n        event = {\n          type: type\n        },\n        i = 0,\n        offset = 0,\n        packetFlushable = false,\n        fragment;\n\n      // do nothing if there is not enough buffered data for a complete\n      // PES header\n      if (!stream.data.length || stream.size < 9) {\n        return;\n      }\n      event.trackId = stream.data[0].pid;\n\n      // reassemble the packet\n      for (i = 0; i < stream.data.length; i++) {\n        fragment = stream.data[i];\n\n        packetData.set(fragment.data, offset);\n        offset += fragment.data.byteLength;\n      }\n\n      // parse assembled packet's PES header\n      parsePes(packetData, event);\n\n      // non-video PES packets MUST have a non-zero PES_packet_length\n      // check that there is enough stream data to fill the packet\n      packetFlushable = type === 'video' || event.packetLength <= stream.size;\n\n      // flush pending packets if the conditions are right\n      if (forceFlush || packetFlushable) {\n        stream.size = 0;\n        stream.data.length = 0;\n      }\n\n      // only emit packets that are complete. this is to avoid assembling\n      // incomplete PES packets due to poor segmentation\n      if (packetFlushable) {\n        self.trigger('data', event);\n      }\n    };\n\n  ElementaryStream.prototype.init.call(this);\n\n  /**\n   * Identifies M2TS packet types and parses PES packets using metadata\n   * parsed from the PMT\n   **/\n  this.push = function(data) {\n    ({\n      pat: function() {\n        // we have to wait for the PMT to arrive as well before we\n        // have any meaningful metadata\n      },\n      pes: function() {\n        var stream, streamType;\n\n        switch (data.streamType) {\n        case StreamTypes.H264_STREAM_TYPE:\n        case m2tsStreamTypes.H264_STREAM_TYPE:\n          stream = video;\n          streamType = 'video';\n          break;\n        case StreamTypes.ADTS_STREAM_TYPE:\n          stream = audio;\n          streamType = 'audio';\n          break;\n        case StreamTypes.METADATA_STREAM_TYPE:\n          stream = timedMetadata;\n          streamType = 'timed-metadata';\n          break;\n        default:\n          // ignore unknown stream types\n          return;\n        }\n\n        // if a new packet is starting, we can flush the completed\n        // packet\n        if (data.payloadUnitStartIndicator) {\n          flushStream(stream, streamType, true);\n        }\n\n        // buffer this fragment until we are sure we've received the\n        // complete payload\n        stream.data.push(data);\n        stream.size += data.data.byteLength;\n      },\n      pmt: function() {\n        var\n          event = {\n            type: 'metadata',\n            tracks: []\n          },\n          programMapTable = data.programMapTable;\n\n        // translate audio and video streams to tracks\n        if (programMapTable.video !== null) {\n          event.tracks.push({\n            timelineStartInfo: {\n              baseMediaDecodeTime: 0\n            },\n            id: +programMapTable.video,\n            codec: 'avc',\n            type: 'video'\n          });\n        }\n        if (programMapTable.audio !== null) {\n          event.tracks.push({\n            timelineStartInfo: {\n              baseMediaDecodeTime: 0\n            },\n            id: +programMapTable.audio,\n            codec: 'adts',\n            type: 'audio'\n          });\n        }\n\n        self.trigger('data', event);\n      }\n    })[data.type]();\n  };\n\n  /**\n   * Flush any remaining input. Video PES packets may be of variable\n   * length. Normally, the start of a new video packet can trigger the\n   * finalization of the previous packet. That is not possible if no\n   * more video is forthcoming, however. In that case, some other\n   * mechanism (like the end of the file) has to be employed. When it is\n   * clear that no additional data is forthcoming, calling this method\n   * will flush the buffered packets.\n   */\n  this.flush = function() {\n    // !!THIS ORDER IS IMPORTANT!!\n    // video first then audio\n    flushStream(video, 'video');\n    flushStream(audio, 'audio');\n    flushStream(timedMetadata, 'timed-metadata');\n    this.trigger('done');\n  };\n};\nElementaryStream.prototype = new Stream();\n\nvar m2ts = {\n  PAT_PID: 0x0000,\n  MP2T_PACKET_LENGTH: MP2T_PACKET_LENGTH,\n  TransportPacketStream: TransportPacketStream,\n  TransportParseStream: TransportParseStream,\n  ElementaryStream: ElementaryStream,\n  TimestampRolloverStream: TimestampRolloverStream,\n  CaptionStream: CaptionStream.CaptionStream,\n  Cea608Stream: CaptionStream.Cea608Stream,\n  MetadataStream: require('./metadata-stream')\n};\n\nfor (var type in StreamTypes) {\n  if (StreamTypes.hasOwnProperty(type)) {\n    m2ts[type] = StreamTypes[type];\n  }\n}\n\nmodule.exports = m2ts;\n","/**\n * Accepts program elementary stream (PES) data events and parses out\n * ID3 metadata from them, if present.\n * @see http://id3.org/id3v2.3.0\n */\n'use strict';\nvar\n  Stream = require('../utils/stream'),\n  StreamTypes = require('./stream-types'),\n  // return a percent-encoded representation of the specified byte range\n  // @see http://en.wikipedia.org/wiki/Percent-encoding\n  percentEncode = function(bytes, start, end) {\n    var i, result = '';\n    for (i = start; i < end; i++) {\n      result += '%' + ('00' + bytes[i].toString(16)).slice(-2);\n    }\n    return result;\n  },\n  // return the string representation of the specified byte range,\n  // interpreted as UTf-8.\n  parseUtf8 = function(bytes, start, end) {\n    return decodeURIComponent(percentEncode(bytes, start, end));\n  },\n  // return the string representation of the specified byte range,\n  // interpreted as ISO-8859-1.\n  parseIso88591 = function(bytes, start, end) {\n    return unescape(percentEncode(bytes, start, end)); // jshint ignore:line\n  },\n  parseSyncSafeInteger = function(data) {\n    return (data[0] << 21) |\n            (data[1] << 14) |\n            (data[2] << 7) |\n            (data[3]);\n  },\n  tagParsers = {\n    TXXX: function(tag) {\n      var i;\n      if (tag.data[0] !== 3) {\n        // ignore frames with unrecognized character encodings\n        return;\n      }\n\n      for (i = 1; i < tag.data.length; i++) {\n        if (tag.data[i] === 0) {\n          // parse the text fields\n          tag.description = parseUtf8(tag.data, 1, i);\n          // do not include the null terminator in the tag value\n          tag.value = parseUtf8(tag.data, i + 1, tag.data.length).replace(/\\0*$/, '');\n          break;\n        }\n      }\n      tag.data = tag.value;\n    },\n    WXXX: function(tag) {\n      var i;\n      if (tag.data[0] !== 3) {\n        // ignore frames with unrecognized character encodings\n        return;\n      }\n\n      for (i = 1; i < tag.data.length; i++) {\n        if (tag.data[i] === 0) {\n          // parse the description and URL fields\n          tag.description = parseUtf8(tag.data, 1, i);\n          tag.url = parseUtf8(tag.data, i + 1, tag.data.length);\n          break;\n        }\n      }\n    },\n    PRIV: function(tag) {\n      var i;\n\n      for (i = 0; i < tag.data.length; i++) {\n        if (tag.data[i] === 0) {\n          // parse the description and URL fields\n          tag.owner = parseIso88591(tag.data, 0, i);\n          break;\n        }\n      }\n      tag.privateData = tag.data.subarray(i + 1);\n      tag.data = tag.privateData;\n    }\n  },\n  MetadataStream;\n\nMetadataStream = function(options) {\n  var\n    settings = {\n      debug: !!(options && options.debug),\n\n      // the bytes of the program-level descriptor field in MP2T\n      // see ISO/IEC 13818-1:2013 (E), section 2.6 \"Program and\n      // program element descriptors\"\n      descriptor: options && options.descriptor\n    },\n    // the total size in bytes of the ID3 tag being parsed\n    tagSize = 0,\n    // tag data that is not complete enough to be parsed\n    buffer = [],\n    // the total number of bytes currently in the buffer\n    bufferSize = 0,\n    i;\n\n  MetadataStream.prototype.init.call(this);\n\n  // calculate the text track in-band metadata track dispatch type\n  // https://html.spec.whatwg.org/multipage/embedded-content.html#steps-to-expose-a-media-resource-specific-text-track\n  this.dispatchType = StreamTypes.METADATA_STREAM_TYPE.toString(16);\n  if (settings.descriptor) {\n    for (i = 0; i < settings.descriptor.length; i++) {\n      this.dispatchType += ('00' + settings.descriptor[i].toString(16)).slice(-2);\n    }\n  }\n\n  this.push = function(chunk) {\n    var tag, frameStart, frameSize, frame, i, frameHeader;\n    if (chunk.type !== 'timed-metadata') {\n      return;\n    }\n\n    // if data_alignment_indicator is set in the PES header,\n    // we must have the start of a new ID3 tag. Assume anything\n    // remaining in the buffer was malformed and throw it out\n    if (chunk.dataAlignmentIndicator) {\n      bufferSize = 0;\n      buffer.length = 0;\n    }\n\n    // ignore events that don't look like ID3 data\n    if (buffer.length === 0 &&\n        (chunk.data.length < 10 ||\n          chunk.data[0] !== 'I'.charCodeAt(0) ||\n          chunk.data[1] !== 'D'.charCodeAt(0) ||\n          chunk.data[2] !== '3'.charCodeAt(0))) {\n      if (settings.debug) {\n        // eslint-disable-next-line no-console\n        console.log('Skipping unrecognized metadata packet');\n      }\n      return;\n    }\n\n    // add this chunk to the data we've collected so far\n\n    buffer.push(chunk);\n    bufferSize += chunk.data.byteLength;\n\n    // grab the size of the entire frame from the ID3 header\n    if (buffer.length === 1) {\n      // the frame size is transmitted as a 28-bit integer in the\n      // last four bytes of the ID3 header.\n      // The most significant bit of each byte is dropped and the\n      // results concatenated to recover the actual value.\n      tagSize = parseSyncSafeInteger(chunk.data.subarray(6, 10));\n\n      // ID3 reports the tag size excluding the header but it's more\n      // convenient for our comparisons to include it\n      tagSize += 10;\n    }\n\n    // if the entire frame has not arrived, wait for more data\n    if (bufferSize < tagSize) {\n      return;\n    }\n\n    // collect the entire frame so it can be parsed\n    tag = {\n      data: new Uint8Array(tagSize),\n      frames: [],\n      pts: buffer[0].pts,\n      dts: buffer[0].dts\n    };\n    for (i = 0; i < tagSize;) {\n      tag.data.set(buffer[0].data.subarray(0, tagSize - i), i);\n      i += buffer[0].data.byteLength;\n      bufferSize -= buffer[0].data.byteLength;\n      buffer.shift();\n    }\n\n    // find the start of the first frame and the end of the tag\n    frameStart = 10;\n    if (tag.data[5] & 0x40) {\n      // advance the frame start past the extended header\n      frameStart += 4; // header size field\n      frameStart += parseSyncSafeInteger(tag.data.subarray(10, 14));\n\n      // clip any padding off the end\n      tagSize -= parseSyncSafeInteger(tag.data.subarray(16, 20));\n    }\n\n    // parse one or more ID3 frames\n    // http://id3.org/id3v2.3.0#ID3v2_frame_overview\n    do {\n      // determine the number of bytes in this frame\n      frameSize = parseSyncSafeInteger(tag.data.subarray(frameStart + 4, frameStart + 8));\n      if (frameSize < 1) {\n         // eslint-disable-next-line no-console\n        return console.log('Malformed ID3 frame encountered. Skipping metadata parsing.');\n      }\n      frameHeader = String.fromCharCode(tag.data[frameStart],\n                                        tag.data[frameStart + 1],\n                                        tag.data[frameStart + 2],\n                                        tag.data[frameStart + 3]);\n\n\n      frame = {\n        id: frameHeader,\n        data: tag.data.subarray(frameStart + 10, frameStart + frameSize + 10)\n      };\n      frame.key = frame.id;\n      if (tagParsers[frame.id]) {\n        tagParsers[frame.id](frame);\n\n        // handle the special PRIV frame used to indicate the start\n        // time for raw AAC data\n        if (frame.owner === 'com.apple.streaming.transportStreamTimestamp') {\n          var\n            d = frame.data,\n            size = ((d[3] & 0x01)  << 30) |\n                   (d[4]  << 22) |\n                   (d[5] << 14) |\n                   (d[6] << 6) |\n                   (d[7] >>> 2);\n\n          size *= 4;\n          size += d[7] & 0x03;\n          frame.timeStamp = size;\n          // in raw AAC, all subsequent data will be timestamped based\n          // on the value of this frame\n          // we couldn't have known the appropriate pts and dts before\n          // parsing this ID3 tag so set those values now\n          if (tag.pts === undefined && tag.dts === undefined) {\n            tag.pts = frame.timeStamp;\n            tag.dts = frame.timeStamp;\n          }\n          this.trigger('timestamp', frame);\n        }\n      }\n      tag.frames.push(frame);\n\n      frameStart += 10; // advance past the frame header\n      frameStart += frameSize; // advance past the frame body\n    } while (frameStart < tagSize);\n    this.trigger('data', tag);\n  };\n};\nMetadataStream.prototype = new Stream();\n\nmodule.exports = MetadataStream;\n","'use strict';\n\nvar Stream = require('../utils/stream.js');\n\nvar AdtsStream;\n\nvar\n  ADTS_SAMPLING_FREQUENCIES = [\n    96000,\n    88200,\n    64000,\n    48000,\n    44100,\n    32000,\n    24000,\n    22050,\n    16000,\n    12000,\n    11025,\n    8000,\n    7350\n  ];\n\n/*\n * Accepts a ElementaryStream and emits data events with parsed\n * AAC Audio Frames of the individual packets. Input audio in ADTS\n * format is unpacked and re-emitted as AAC frames.\n *\n * @see http://wiki.multimedia.cx/index.php?title=ADTS\n * @see http://wiki.multimedia.cx/?title=Understanding_AAC\n */\nAdtsStream = function() {\n  var buffer;\n\n  AdtsStream.prototype.init.call(this);\n\n  this.push = function(packet) {\n    var\n      i = 0,\n      frameNum = 0,\n      frameLength,\n      protectionSkipBytes,\n      frameEnd,\n      oldBuffer,\n      sampleCount,\n      adtsFrameDuration;\n\n    if (packet.type !== 'audio') {\n      // ignore non-audio data\n      return;\n    }\n\n    // Prepend any data in the buffer to the input data so that we can parse\n    // aac frames the cross a PES packet boundary\n    if (buffer) {\n      oldBuffer = buffer;\n      buffer = new Uint8Array(oldBuffer.byteLength + packet.data.byteLength);\n      buffer.set(oldBuffer);\n      buffer.set(packet.data, oldBuffer.byteLength);\n    } else {\n      buffer = packet.data;\n    }\n\n    // unpack any ADTS frames which have been fully received\n    // for details on the ADTS header, see http://wiki.multimedia.cx/index.php?title=ADTS\n    while (i + 5 < buffer.length) {\n\n      // Loook for the start of an ADTS header..\n      if (buffer[i] !== 0xFF || (buffer[i + 1] & 0xF6) !== 0xF0) {\n        // If a valid header was not found,  jump one forward and attempt to\n        // find a valid ADTS header starting at the next byte\n        i++;\n        continue;\n      }\n\n      // The protection skip bit tells us if we have 2 bytes of CRC data at the\n      // end of the ADTS header\n      protectionSkipBytes = (~buffer[i + 1] & 0x01) * 2;\n\n      // Frame length is a 13 bit integer starting 16 bits from the\n      // end of the sync sequence\n      frameLength = ((buffer[i + 3] & 0x03) << 11) |\n        (buffer[i + 4] << 3) |\n        ((buffer[i + 5] & 0xe0) >> 5);\n\n      sampleCount = ((buffer[i + 6] & 0x03) + 1) * 1024;\n      adtsFrameDuration = (sampleCount * 90000) /\n        ADTS_SAMPLING_FREQUENCIES[(buffer[i + 2] & 0x3c) >>> 2];\n\n      frameEnd = i + frameLength;\n\n      // If we don't have enough data to actually finish this ADTS frame, return\n      // and wait for more data\n      if (buffer.byteLength < frameEnd) {\n        return;\n      }\n\n      // Otherwise, deliver the complete AAC frame\n      this.trigger('data', {\n        pts: packet.pts + (frameNum * adtsFrameDuration),\n        dts: packet.dts + (frameNum * adtsFrameDuration),\n        sampleCount: sampleCount,\n        audioobjecttype: ((buffer[i + 2] >>> 6) & 0x03) + 1,\n        channelcount: ((buffer[i + 2] & 1) << 2) |\n          ((buffer[i + 3] & 0xc0) >>> 6),\n        samplerate: ADTS_SAMPLING_FREQUENCIES[(buffer[i + 2] & 0x3c) >>> 2],\n        samplingfrequencyindex: (buffer[i + 2] & 0x3c) >>> 2,\n        // assume ISO/IEC 14496-12 AudioSampleEntry default of 16\n        samplesize: 16,\n        data: buffer.subarray(i + 7 + protectionSkipBytes, frameEnd)\n      });\n\n      // If the buffer is empty, clear it and return\n      if (buffer.byteLength === frameEnd) {\n        buffer = undefined;\n        return;\n      }\n\n      frameNum++;\n\n      // Remove the finished frame from the buffer and start the process again\n      buffer = buffer.subarray(frameEnd);\n    }\n  };\n  this.flush = function() {\n    this.trigger('done');\n  };\n};\n\nAdtsStream.prototype = new Stream();\n\nmodule.exports = AdtsStream;\n","'use strict';\n\nvar Stream = require('../utils/stream.js');\nvar ExpGolomb = require('../utils/exp-golomb.js');\n\nvar H264Stream, NalByteStream;\nvar PROFILES_WITH_OPTIONAL_SPS_DATA;\n\n/**\n * Accepts a NAL unit byte stream and unpacks the embedded NAL units.\n */\nNalByteStream = function() {\n  var\n    syncPoint = 0,\n    i,\n    buffer;\n  NalByteStream.prototype.init.call(this);\n\n  /*\n   * Scans a byte stream and triggers a data event with the NAL units found.\n   * @param {Object} data Event received from H264Stream\n   * @param {Uint8Array} data.data The h264 byte stream to be scanned\n   *\n   * @see H264Stream.push\n   */\n  this.push = function(data) {\n    var swapBuffer;\n\n    if (!buffer) {\n      buffer = data.data;\n    } else {\n      swapBuffer = new Uint8Array(buffer.byteLength + data.data.byteLength);\n      swapBuffer.set(buffer);\n      swapBuffer.set(data.data, buffer.byteLength);\n      buffer = swapBuffer;\n    }\n\n    // Rec. ITU-T H.264, Annex B\n    // scan for NAL unit boundaries\n\n    // a match looks like this:\n    // 0 0 1 .. NAL .. 0 0 1\n    // ^ sync point        ^ i\n    // or this:\n    // 0 0 1 .. NAL .. 0 0 0\n    // ^ sync point        ^ i\n\n    // advance the sync point to a NAL start, if necessary\n    for (; syncPoint < buffer.byteLength - 3; syncPoint++) {\n      if (buffer[syncPoint + 2] === 1) {\n        // the sync point is properly aligned\n        i = syncPoint + 5;\n        break;\n      }\n    }\n\n    while (i < buffer.byteLength) {\n      // look at the current byte to determine if we've hit the end of\n      // a NAL unit boundary\n      switch (buffer[i]) {\n      case 0:\n        // skip past non-sync sequences\n        if (buffer[i - 1] !== 0) {\n          i += 2;\n          break;\n        } else if (buffer[i - 2] !== 0) {\n          i++;\n          break;\n        }\n\n        // deliver the NAL unit if it isn't empty\n        if (syncPoint + 3 !== i - 2) {\n          this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));\n        }\n\n        // drop trailing zeroes\n        do {\n          i++;\n        } while (buffer[i] !== 1 && i < buffer.length);\n        syncPoint = i - 2;\n        i += 3;\n        break;\n      case 1:\n        // skip past non-sync sequences\n        if (buffer[i - 1] !== 0 ||\n            buffer[i - 2] !== 0) {\n          i += 3;\n          break;\n        }\n\n        // deliver the NAL unit\n        this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));\n        syncPoint = i - 2;\n        i += 3;\n        break;\n      default:\n        // the current byte isn't a one or zero, so it cannot be part\n        // of a sync sequence\n        i += 3;\n        break;\n      }\n    }\n    // filter out the NAL units that were delivered\n    buffer = buffer.subarray(syncPoint);\n    i -= syncPoint;\n    syncPoint = 0;\n  };\n\n  this.flush = function() {\n    // deliver the last buffered NAL unit\n    if (buffer && buffer.byteLength > 3) {\n      this.trigger('data', buffer.subarray(syncPoint + 3));\n    }\n    // reset the stream state\n    buffer = null;\n    syncPoint = 0;\n    this.trigger('done');\n  };\n};\nNalByteStream.prototype = new Stream();\n\n// values of profile_idc that indicate additional fields are included in the SPS\n// see Recommendation ITU-T H.264 (4/2013),\n// 7.3.2.1.1 Sequence parameter set data syntax\nPROFILES_WITH_OPTIONAL_SPS_DATA = {\n  100: true,\n  110: true,\n  122: true,\n  244: true,\n  44: true,\n  83: true,\n  86: true,\n  118: true,\n  128: true,\n  138: true,\n  139: true,\n  134: true\n};\n\n/**\n * Accepts input from a ElementaryStream and produces H.264 NAL unit data\n * events.\n */\nH264Stream = function() {\n  var\n    nalByteStream = new NalByteStream(),\n    self,\n    trackId,\n    currentPts,\n    currentDts,\n\n    discardEmulationPreventionBytes,\n    readSequenceParameterSet,\n    skipScalingList;\n\n  H264Stream.prototype.init.call(this);\n  self = this;\n\n  /*\n   * Pushes a packet from a stream onto the NalByteStream\n   *\n   * @param {Object} packet - A packet received from a stream\n   * @param {Uint8Array} packet.data - The raw bytes of the packet\n   * @param {Number} packet.dts - Decode timestamp of the packet\n   * @param {Number} packet.pts - Presentation timestamp of the packet\n   * @param {Number} packet.trackId - The id of the h264 track this packet came from\n   * @param {('video'|'audio')} packet.type - The type of packet\n   *\n   */\n  this.push = function(packet) {\n    if (packet.type !== 'video') {\n      return;\n    }\n    trackId = packet.trackId;\n    currentPts = packet.pts;\n    currentDts = packet.dts;\n\n    nalByteStream.push(packet);\n  };\n\n  /*\n   * Identify NAL unit types and pass on the NALU, trackId, presentation and decode timestamps\n   * for the NALUs to the next stream component.\n   * Also, preprocess caption and sequence parameter NALUs.\n   *\n   * @param {Uint8Array} data - A NAL unit identified by `NalByteStream.push`\n   * @see NalByteStream.push\n   */\n  nalByteStream.on('data', function(data) {\n    var\n      event = {\n        trackId: trackId,\n        pts: currentPts,\n        dts: currentDts,\n        data: data\n      };\n\n    switch (data[0] & 0x1f) {\n    case 0x05:\n      event.nalUnitType = 'slice_layer_without_partitioning_rbsp_idr';\n      break;\n    case 0x06:\n      event.nalUnitType = 'sei_rbsp';\n      event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));\n      break;\n    case 0x07:\n      event.nalUnitType = 'seq_parameter_set_rbsp';\n      event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));\n      event.config = readSequenceParameterSet(event.escapedRBSP);\n      break;\n    case 0x08:\n      event.nalUnitType = 'pic_parameter_set_rbsp';\n      break;\n    case 0x09:\n      event.nalUnitType = 'access_unit_delimiter_rbsp';\n      break;\n\n    default:\n      break;\n    }\n    // This triggers data on the H264Stream\n    self.trigger('data', event);\n  });\n  nalByteStream.on('done', function() {\n    self.trigger('done');\n  });\n\n  this.flush = function() {\n    nalByteStream.flush();\n  };\n\n  /**\n   * Advance the ExpGolomb decoder past a scaling list. The scaling\n   * list is optionally transmitted as part of a sequence parameter\n   * set and is not relevant to transmuxing.\n   * @param count {number} the number of entries in this scaling list\n   * @param expGolombDecoder {object} an ExpGolomb pointed to the\n   * start of a scaling list\n   * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1\n   */\n  skipScalingList = function(count, expGolombDecoder) {\n    var\n      lastScale = 8,\n      nextScale = 8,\n      j,\n      deltaScale;\n\n    for (j = 0; j < count; j++) {\n      if (nextScale !== 0) {\n        deltaScale = expGolombDecoder.readExpGolomb();\n        nextScale = (lastScale + deltaScale + 256) % 256;\n      }\n\n      lastScale = (nextScale === 0) ? lastScale : nextScale;\n    }\n  };\n\n  /**\n   * Expunge any \"Emulation Prevention\" bytes from a \"Raw Byte\n   * Sequence Payload\"\n   * @param data {Uint8Array} the bytes of a RBSP from a NAL\n   * unit\n   * @return {Uint8Array} the RBSP without any Emulation\n   * Prevention Bytes\n   */\n  discardEmulationPreventionBytes = function(data) {\n    var\n      length = data.byteLength,\n      emulationPreventionBytesPositions = [],\n      i = 1,\n      newLength, newData;\n\n    // Find all `Emulation Prevention Bytes`\n    while (i < length - 2) {\n      if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {\n        emulationPreventionBytesPositions.push(i + 2);\n        i += 2;\n      } else {\n        i++;\n      }\n    }\n\n    // If no Emulation Prevention Bytes were found just return the original\n    // array\n    if (emulationPreventionBytesPositions.length === 0) {\n      return data;\n    }\n\n    // Create a new array to hold the NAL unit data\n    newLength = length - emulationPreventionBytesPositions.length;\n    newData = new Uint8Array(newLength);\n    var sourceIndex = 0;\n\n    for (i = 0; i < newLength; sourceIndex++, i++) {\n      if (sourceIndex === emulationPreventionBytesPositions[0]) {\n        // Skip this byte\n        sourceIndex++;\n        // Remove this position index\n        emulationPreventionBytesPositions.shift();\n      }\n      newData[i] = data[sourceIndex];\n    }\n\n    return newData;\n  };\n\n  /**\n   * Read a sequence parameter set and return some interesting video\n   * properties. A sequence parameter set is the H264 metadata that\n   * describes the properties of upcoming video frames.\n   * @param data {Uint8Array} the bytes of a sequence parameter set\n   * @return {object} an object with configuration parsed from the\n   * sequence parameter set, including the dimensions of the\n   * associated video frames.\n   */\n  readSequenceParameterSet = function(data) {\n    var\n      frameCropLeftOffset = 0,\n      frameCropRightOffset = 0,\n      frameCropTopOffset = 0,\n      frameCropBottomOffset = 0,\n      sarScale = 1,\n      expGolombDecoder, profileIdc, levelIdc, profileCompatibility,\n      chromaFormatIdc, picOrderCntType,\n      numRefFramesInPicOrderCntCycle, picWidthInMbsMinus1,\n      picHeightInMapUnitsMinus1,\n      frameMbsOnlyFlag,\n      scalingListCount,\n      sarRatio,\n      aspectRatioIdc,\n      i;\n\n    expGolombDecoder = new ExpGolomb(data);\n    profileIdc = expGolombDecoder.readUnsignedByte(); // profile_idc\n    profileCompatibility = expGolombDecoder.readUnsignedByte(); // constraint_set[0-5]_flag\n    levelIdc = expGolombDecoder.readUnsignedByte(); // level_idc u(8)\n    expGolombDecoder.skipUnsignedExpGolomb(); // seq_parameter_set_id\n\n    // some profiles have more optional data we don't need\n    if (PROFILES_WITH_OPTIONAL_SPS_DATA[profileIdc]) {\n      chromaFormatIdc = expGolombDecoder.readUnsignedExpGolomb();\n      if (chromaFormatIdc === 3) {\n        expGolombDecoder.skipBits(1); // separate_colour_plane_flag\n      }\n      expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_luma_minus8\n      expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_chroma_minus8\n      expGolombDecoder.skipBits(1); // qpprime_y_zero_transform_bypass_flag\n      if (expGolombDecoder.readBoolean()) { // seq_scaling_matrix_present_flag\n        scalingListCount = (chromaFormatIdc !== 3) ? 8 : 12;\n        for (i = 0; i < scalingListCount; i++) {\n          if (expGolombDecoder.readBoolean()) { // seq_scaling_list_present_flag[ i ]\n            if (i < 6) {\n              skipScalingList(16, expGolombDecoder);\n            } else {\n              skipScalingList(64, expGolombDecoder);\n            }\n          }\n        }\n      }\n    }\n\n    expGolombDecoder.skipUnsignedExpGolomb(); // log2_max_frame_num_minus4\n    picOrderCntType = expGolombDecoder.readUnsignedExpGolomb();\n\n    if (picOrderCntType === 0) {\n      expGolombDecoder.readUnsignedExpGolomb(); // log2_max_pic_order_cnt_lsb_minus4\n    } else if (picOrderCntType === 1) {\n      expGolombDecoder.skipBits(1); // delta_pic_order_always_zero_flag\n      expGolombDecoder.skipExpGolomb(); // offset_for_non_ref_pic\n      expGolombDecoder.skipExpGolomb(); // offset_for_top_to_bottom_field\n      numRefFramesInPicOrderCntCycle = expGolombDecoder.readUnsignedExpGolomb();\n      for (i = 0; i < numRefFramesInPicOrderCntCycle; i++) {\n        expGolombDecoder.skipExpGolomb(); // offset_for_ref_frame[ i ]\n      }\n    }\n\n    expGolombDecoder.skipUnsignedExpGolomb(); // max_num_ref_frames\n    expGolombDecoder.skipBits(1); // gaps_in_frame_num_value_allowed_flag\n\n    picWidthInMbsMinus1 = expGolombDecoder.readUnsignedExpGolomb();\n    picHeightInMapUnitsMinus1 = expGolombDecoder.readUnsignedExpGolomb();\n\n    frameMbsOnlyFlag = expGolombDecoder.readBits(1);\n    if (frameMbsOnlyFlag === 0) {\n      expGolombDecoder.skipBits(1); // mb_adaptive_frame_field_flag\n    }\n\n    expGolombDecoder.skipBits(1); // direct_8x8_inference_flag\n    if (expGolombDecoder.readBoolean()) { // frame_cropping_flag\n      frameCropLeftOffset = expGolombDecoder.readUnsignedExpGolomb();\n      frameCropRightOffset = expGolombDecoder.readUnsignedExpGolomb();\n      frameCropTopOffset = expGolombDecoder.readUnsignedExpGolomb();\n      frameCropBottomOffset = expGolombDecoder.readUnsignedExpGolomb();\n    }\n    if (expGolombDecoder.readBoolean()) {\n      // vui_parameters_present_flag\n      if (expGolombDecoder.readBoolean()) {\n        // aspect_ratio_info_present_flag\n        aspectRatioIdc = expGolombDecoder.readUnsignedByte();\n        switch (aspectRatioIdc) {\n          case 1: sarRatio = [1, 1]; break;\n          case 2: sarRatio = [12, 11]; break;\n          case 3: sarRatio = [10, 11]; break;\n          case 4: sarRatio = [16, 11]; break;\n          case 5: sarRatio = [40, 33]; break;\n          case 6: sarRatio = [24, 11]; break;\n          case 7: sarRatio = [20, 11]; break;\n          case 8: sarRatio = [32, 11]; break;\n          case 9: sarRatio = [80, 33]; break;\n          case 10: sarRatio = [18, 11]; break;\n          case 11: sarRatio = [15, 11]; break;\n          case 12: sarRatio = [64, 33]; break;\n          case 13: sarRatio = [160, 99]; break;\n          case 14: sarRatio = [4, 3]; break;\n          case 15: sarRatio = [3, 2]; break;\n          case 16: sarRatio = [2, 1]; break;\n          case 255: {\n            sarRatio = [expGolombDecoder.readUnsignedByte() << 8 |\n                        expGolombDecoder.readUnsignedByte(),\n                        expGolombDecoder.readUnsignedByte() << 8 |\n                        expGolombDecoder.readUnsignedByte() ];\n            break;\n          }\n        }\n        if (sarRatio) {\n          sarScale = sarRatio[0] / sarRatio[1];\n        }\n      }\n    }\n    return {\n      profileIdc: profileIdc,\n      levelIdc: levelIdc,\n      profileCompatibility: profileCompatibility,\n      width: Math.ceil((((picWidthInMbsMinus1 + 1) * 16) - frameCropLeftOffset * 2 - frameCropRightOffset * 2) * sarScale),\n      height: ((2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16) - (frameCropTopOffset * 2) - (frameCropBottomOffset * 2)\n    };\n  };\n\n};\nH264Stream.prototype = new Stream();\n\nmodule.exports = {\n  H264Stream: H264Stream,\n  NalByteStream: NalByteStream\n};\n","'use strict';\n\nvar ExpGolomb;\n\n/**\n * Parser for exponential Golomb codes, a variable-bitwidth number encoding\n * scheme used by h264.\n */\nExpGolomb = function(workingData) {\n  var\n    // the number of bytes left to examine in workingData\n    workingBytesAvailable = workingData.byteLength,\n\n    // the current word being examined\n    workingWord = 0, // :uint\n\n    // the number of bits left to examine in the current word\n    workingBitsAvailable = 0; // :uint;\n\n  // ():uint\n  this.length = function() {\n    return (8 * workingBytesAvailable);\n  };\n\n  // ():uint\n  this.bitsAvailable = function() {\n    return (8 * workingBytesAvailable) + workingBitsAvailable;\n  };\n\n  // ():void\n  this.loadWord = function() {\n    var\n      position = workingData.byteLength - workingBytesAvailable,\n      workingBytes = new Uint8Array(4),\n      availableBytes = Math.min(4, workingBytesAvailable);\n\n    if (availableBytes === 0) {\n      throw new Error('no bytes available');\n    }\n\n    workingBytes.set(workingData.subarray(position,\n                                          position + availableBytes));\n    workingWord = new DataView(workingBytes.buffer).getUint32(0);\n\n    // track the amount of workingData that has been processed\n    workingBitsAvailable = availableBytes * 8;\n    workingBytesAvailable -= availableBytes;\n  };\n\n  // (count:int):void\n  this.skipBits = function(count) {\n    var skipBytes; // :int\n    if (workingBitsAvailable > count) {\n      workingWord          <<= count;\n      workingBitsAvailable -= count;\n    } else {\n      count -= workingBitsAvailable;\n      skipBytes = Math.floor(count / 8);\n\n      count -= (skipBytes * 8);\n      workingBytesAvailable -= skipBytes;\n\n      this.loadWord();\n\n      workingWord <<= count;\n      workingBitsAvailable -= count;\n    }\n  };\n\n  // (size:int):uint\n  this.readBits = function(size) {\n    var\n      bits = Math.min(workingBitsAvailable, size), // :uint\n      valu = workingWord >>> (32 - bits); // :uint\n    // if size > 31, handle error\n    workingBitsAvailable -= bits;\n    if (workingBitsAvailable > 0) {\n      workingWord <<= bits;\n    } else if (workingBytesAvailable > 0) {\n      this.loadWord();\n    }\n\n    bits = size - bits;\n    if (bits > 0) {\n      return valu << bits | this.readBits(bits);\n    }\n    return valu;\n  };\n\n  // ():uint\n  this.skipLeadingZeros = function() {\n    var leadingZeroCount; // :uint\n    for (leadingZeroCount = 0; leadingZeroCount < workingBitsAvailable; ++leadingZeroCount) {\n      if ((workingWord & (0x80000000 >>> leadingZeroCount)) !== 0) {\n        // the first bit of working word is 1\n        workingWord <<= leadingZeroCount;\n        workingBitsAvailable -= leadingZeroCount;\n        return leadingZeroCount;\n      }\n    }\n\n    // we exhausted workingWord and still have not found a 1\n    this.loadWord();\n    return leadingZeroCount + this.skipLeadingZeros();\n  };\n\n  // ():void\n  this.skipUnsignedExpGolomb = function() {\n    this.skipBits(1 + this.skipLeadingZeros());\n  };\n\n  // ():void\n  this.skipExpGolomb = function() {\n    this.skipBits(1 + this.skipLeadingZeros());\n  };\n\n  // ():uint\n  this.readUnsignedExpGolomb = function() {\n    var clz = this.skipLeadingZeros(); // :uint\n    return this.readBits(clz + 1) - 1;\n  };\n\n  // ():int\n  this.readExpGolomb = function() {\n    var valu = this.readUnsignedExpGolomb(); // :int\n    if (0x01 & valu) {\n      // the number is odd if the low order bit is set\n      return (1 + valu) >>> 1; // add 1 to make it even, and divide by 2\n    }\n    return -1 * (valu >>> 1); // divide by two then make it negative\n  };\n\n  // Some convenience functions\n  // :Boolean\n  this.readBoolean = function() {\n    return this.readBits(1) === 1;\n  };\n\n  // ():int\n  this.readUnsignedByte = function() {\n    return this.readBits(8);\n  };\n\n  this.loadWord();\n};\n\nmodule.exports = ExpGolomb;\n","/**\n * mux.js\n *\n * Copyright (c) 2016 Brightcove\n * All rights reserved.\n *\n * A stream-based aac to mp4 converter. This utility can be used to\n * deliver mp4s to a SourceBuffer on platforms that support native\n * Media Source Extensions.\n */\n'use strict';\nvar Stream = require('../utils/stream.js');\n\n// Constants\nvar AacStream;\n\n/**\n * Splits an incoming stream of binary data into ADTS and ID3 Frames.\n */\n\nAacStream = function() {\n  var\n    everything = new Uint8Array(),\n    timeStamp = 0;\n\n  AacStream.prototype.init.call(this);\n\n  this.setTimestamp = function(timestamp) {\n    timeStamp = timestamp;\n  };\n\n  this.parseId3TagSize = function(header, byteIndex) {\n    var\n      returnSize = (header[byteIndex + 6] << 21) |\n                   (header[byteIndex + 7] << 14) |\n                   (header[byteIndex + 8] << 7) |\n                   (header[byteIndex + 9]),\n      flags = header[byteIndex + 5],\n      footerPresent = (flags & 16) >> 4;\n\n    if (footerPresent) {\n      return returnSize + 20;\n    }\n    return returnSize + 10;\n  };\n\n  this.parseAdtsSize = function(header, byteIndex) {\n    var\n      lowThree = (header[byteIndex + 5] & 0xE0) >> 5,\n      middle = header[byteIndex + 4] << 3,\n      highTwo = header[byteIndex + 3] & 0x3 << 11;\n\n    return (highTwo | middle) | lowThree;\n  };\n\n  this.push = function(bytes) {\n    var\n      frameSize = 0,\n      byteIndex = 0,\n      bytesLeft,\n      chunk,\n      packet,\n      tempLength;\n\n    // If there are bytes remaining from the last segment, prepend them to the\n    // bytes that were pushed in\n    if (everything.length) {\n      tempLength = everything.length;\n      everything = new Uint8Array(bytes.byteLength + tempLength);\n      everything.set(everything.subarray(0, tempLength));\n      everything.set(bytes, tempLength);\n    } else {\n      everything = bytes;\n    }\n\n    while (everything.length - byteIndex >= 3) {\n      if ((everything[byteIndex] === 'I'.charCodeAt(0)) &&\n          (everything[byteIndex + 1] === 'D'.charCodeAt(0)) &&\n          (everything[byteIndex + 2] === '3'.charCodeAt(0))) {\n\n        // Exit early because we don't have enough to parse\n        // the ID3 tag header\n        if (everything.length - byteIndex < 10) {\n          break;\n        }\n\n        // check framesize\n        frameSize = this.parseId3TagSize(everything, byteIndex);\n\n        // Exit early if we don't have enough in the buffer\n        // to emit a full packet\n        if (frameSize > everything.length) {\n          break;\n        }\n        chunk = {\n          type: 'timed-metadata',\n          data: everything.subarray(byteIndex, byteIndex + frameSize)\n        };\n        this.trigger('data', chunk);\n        byteIndex += frameSize;\n        continue;\n      } else if ((everything[byteIndex] & 0xff === 0xff) &&\n                 ((everything[byteIndex + 1] & 0xf0) === 0xf0)) {\n\n        // Exit early because we don't have enough to parse\n        // the ADTS frame header\n        if (everything.length - byteIndex < 7) {\n          break;\n        }\n\n        frameSize = this.parseAdtsSize(everything, byteIndex);\n\n        // Exit early if we don't have enough in the buffer\n        // to emit a full packet\n        if (frameSize > everything.length) {\n          break;\n        }\n\n        packet = {\n          type: 'audio',\n          data: everything.subarray(byteIndex, byteIndex + frameSize),\n          pts: timeStamp,\n          dts: timeStamp\n        };\n        this.trigger('data', packet);\n        byteIndex += frameSize;\n        continue;\n      }\n      byteIndex++;\n    }\n    bytesLeft = everything.length - byteIndex;\n\n    if (bytesLeft > 0) {\n      everything = everything.subarray(byteIndex);\n    } else {\n      everything = new Uint8Array();\n    }\n  };\n};\n\nAacStream.prototype = new Stream();\n\nmodule.exports = AacStream;\n","var highPrefix = [33, 16, 5, 32, 164, 27];\nvar lowPrefix = [33, 65, 108, 84, 1, 2, 4, 8, 168, 2, 4, 8, 17, 191, 252];\nvar zeroFill = function(count) {\n  var a = [];\n  while (count--) {\n    a.push(0);\n  }\n  return a;\n};\n\nvar makeTable = function(metaTable) {\n  return Object.keys(metaTable).reduce(function(obj, key) {\n    obj[key] = new Uint8Array(metaTable[key].reduce(function(arr, part) {\n      return arr.concat(part);\n    }, []));\n    return obj;\n  }, {});\n};\n\n// Frames-of-silence to use for filling in missing AAC frames\nvar coneOfSilence = {\n  96000: [highPrefix, [227, 64], zeroFill(154), [56]],\n  88200: [highPrefix, [231], zeroFill(170), [56]],\n  64000: [highPrefix, [248, 192], zeroFill(240), [56]],\n  48000: [highPrefix, [255, 192], zeroFill(268), [55, 148, 128], zeroFill(54), [112]],\n  44100: [highPrefix, [255, 192], zeroFill(268), [55, 163, 128], zeroFill(84), [112]],\n  32000: [highPrefix, [255, 192], zeroFill(268), [55, 234], zeroFill(226), [112]],\n  24000: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 112], zeroFill(126), [224]],\n  16000: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 255], zeroFill(269), [223, 108], zeroFill(195), [1, 192]],\n  12000: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 253, 128], zeroFill(259), [56]],\n  11025: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 255, 192], zeroFill(268), [55, 175, 128], zeroFill(108), [112]],\n  8000: [lowPrefix, zeroFill(268), [3, 121, 16], zeroFill(47), [7]]\n};\n\nmodule.exports = makeTable(coneOfSilence);\n","var\n  ONE_SECOND_IN_TS = 90000, // 90kHz clock\n  secondsToVideoTs,\n  secondsToAudioTs,\n  videoTsToSeconds,\n  audioTsToSeconds,\n  audioTsToVideoTs,\n  videoTsToAudioTs;\n\nsecondsToVideoTs = function(seconds) {\n  return seconds * ONE_SECOND_IN_TS;\n};\n\nsecondsToAudioTs = function(seconds, sampleRate) {\n  return seconds * sampleRate;\n};\n\nvideoTsToSeconds = function(timestamp) {\n  return timestamp / ONE_SECOND_IN_TS;\n};\n\naudioTsToSeconds = function(timestamp, sampleRate) {\n  return timestamp / sampleRate;\n};\n\naudioTsToVideoTs = function(timestamp, sampleRate) {\n  return secondsToVideoTs(audioTsToSeconds(timestamp, sampleRate));\n};\n\nvideoTsToAudioTs = function(timestamp, sampleRate) {\n  return secondsToAudioTs(videoTsToSeconds(timestamp), sampleRate);\n};\n\nmodule.exports = {\n  secondsToVideoTs: secondsToVideoTs,\n  secondsToAudioTs: secondsToAudioTs,\n  videoTsToSeconds: videoTsToSeconds,\n  audioTsToSeconds: audioTsToSeconds,\n  audioTsToVideoTs: audioTsToVideoTs,\n  videoTsToAudioTs: videoTsToAudioTs\n};\n","/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * Reads in-band CEA-708 captions out of FMP4 segments.\n * @see https://en.wikipedia.org/wiki/CEA-708\n */\n'use strict';\n\nvar discardEmulationPreventionBytes = require('../tools/caption-packet-parser').discardEmulationPreventionBytes;\nvar CaptionStream = require('../m2ts/caption-stream').CaptionStream;\nvar probe = require('./probe');\nvar inspect = require('../tools/mp4-inspector');\n\n/**\n  * Maps an offset in the mdat to a sample based on the the size of the samples.\n  * Assumes that `parseSamples` has been called first.\n  *\n  * @param {Number} offset - The offset into the mdat\n  * @param {Object[]} samples - An array of samples, parsed using `parseSamples`\n  * @return {?Object} The matching sample, or null if no match was found.\n  *\n  * @see ISO-BMFF-12/2015, Section 8.8.8\n **/\nvar mapToSample = function(offset, samples) {\n  var approximateOffset = offset;\n\n  for (var i = 0; i < samples.length; i++) {\n    var sample = samples[i];\n\n    if (approximateOffset < sample.size) {\n      return sample;\n    }\n\n    approximateOffset -= sample.size;\n  }\n\n  return null;\n};\n\n/**\n  * Finds SEI nal units contained in a Media Data Box.\n  * Assumes that `parseSamples` has been called first.\n  *\n  * @param {Uint8Array} avcStream - The bytes of the mdat\n  * @param {Object[]} samples - The samples parsed out by `parseSamples`\n  * @param {Number} trackId - The trackId of this video track\n  * @return {Object[]} seiNals - the parsed SEI NALUs found.\n  *   The contents of the seiNal should match what is expected by\n  *   CaptionStream.push (nalUnitType, size, data, escapedRBSP, pts, dts)\n  *\n  * @see ISO-BMFF-12/2015, Section 8.1.1\n  * @see Rec. ITU-T H.264, 7.3.2.3.1\n **/\nvar findSeiNals = function(avcStream, samples, trackId) {\n  var\n    avcView = new DataView(avcStream.buffer, avcStream.byteOffset, avcStream.byteLength),\n    result = [],\n    seiNal,\n    i,\n    length,\n    lastMatchedSample;\n\n  for (i = 0; i + 4 < avcStream.length; i += length) {\n    length = avcView.getUint32(i);\n    i += 4;\n\n    // Bail if this doesn't appear to be an H264 stream\n    if (length <= 0) {\n      continue;\n    }\n\n    switch (avcStream[i] & 0x1F) {\n    case 0x06:\n      var data = avcStream.subarray(i + 1, i + 1 + length);\n      var matchingSample = mapToSample(i, samples);\n\n      seiNal = {\n        nalUnitType: 'sei_rbsp',\n        size: length,\n        data: data,\n        escapedRBSP: discardEmulationPreventionBytes(data),\n        trackId: trackId\n      };\n\n      if (matchingSample) {\n        seiNal.pts = matchingSample.pts;\n        seiNal.dts = matchingSample.dts;\n        lastMatchedSample = matchingSample;\n      } else {\n        // If a matching sample cannot be found, use the last\n        // sample's values as they should be as close as possible\n        seiNal.pts = lastMatchedSample.pts;\n        seiNal.dts = lastMatchedSample.dts;\n      }\n\n      result.push(seiNal);\n      break;\n    default:\n      break;\n    }\n  }\n\n  return result;\n};\n\n/**\n  * Parses sample information out of Track Run Boxes and calculates\n  * the absolute presentation and decode timestamps of each sample.\n  *\n  * @param {Array<Uint8Array>} truns - The Trun Run boxes to be parsed\n  * @param {Number} baseMediaDecodeTime - base media decode time from tfdt\n      @see ISO-BMFF-12/2015, Section 8.8.12\n  * @param {Object} tfhd - The parsed Track Fragment Header\n  *   @see inspect.parseTfhd\n  * @return {Object[]} the parsed samples\n  *\n  * @see ISO-BMFF-12/2015, Section 8.8.8\n **/\nvar parseSamples = function(truns, baseMediaDecodeTime, tfhd) {\n  var currentDts = baseMediaDecodeTime;\n  var defaultSampleDuration = tfhd.defaultSampleDuration || 0;\n  var defaultSampleSize = tfhd.defaultSampleSize || 0;\n  var trackId = tfhd.trackId;\n  var allSamples = [];\n\n  truns.forEach(function(trun) {\n    // Note: We currently do not parse the sample table as well\n    // as the trun. It's possible some sources will require this.\n    // moov > trak > mdia > minf > stbl\n    var trackRun = inspect.parseTrun(trun);\n    var samples = trackRun.samples;\n\n    samples.forEach(function(sample) {\n      if (sample.duration === undefined) {\n        sample.duration = defaultSampleDuration;\n      }\n      if (sample.size === undefined) {\n        sample.size = defaultSampleSize;\n      }\n      sample.trackId = trackId;\n      sample.dts = currentDts;\n      if (sample.compositionTimeOffset === undefined) {\n        sample.compositionTimeOffset = 0;\n      }\n      sample.pts = currentDts + sample.compositionTimeOffset;\n\n      currentDts += sample.duration;\n    });\n\n    allSamples = allSamples.concat(samples);\n  });\n\n  return allSamples;\n};\n\n/**\n  * Parses out caption nals from an FMP4 segment's video tracks.\n  *\n  * @param {Uint8Array} segment - The bytes of a single segment\n  * @param {Number} videoTrackId - The trackId of a video track in the segment\n  * @return {Object.<Number, Object[]>} A mapping of video trackId to\n  *   a list of seiNals found in that track\n **/\nvar parseCaptionNals = function(segment, videoTrackId) {\n  // To get the samples\n  var trafs = probe.findBox(segment, ['moof', 'traf']);\n  // To get SEI NAL units\n  var mdats = probe.findBox(segment, ['mdat']);\n  var captionNals = {};\n  var mdatTrafPairs = [];\n\n  // Pair up each traf with a mdat as moofs and mdats are in pairs\n  mdats.forEach(function(mdat, index) {\n    var matchingTraf = trafs[index];\n    mdatTrafPairs.push({\n      mdat: mdat,\n      traf: matchingTraf\n    });\n  });\n\n  mdatTrafPairs.forEach(function(pair) {\n    var mdat = pair.mdat;\n    var traf = pair.traf;\n    var tfhd = probe.findBox(traf, ['tfhd']);\n    // Exactly 1 tfhd per traf\n    var headerInfo = inspect.parseTfhd(tfhd[0]);\n    var trackId = headerInfo.trackId;\n    var tfdt = probe.findBox(traf, ['tfdt']);\n    // Either 0 or 1 tfdt per traf\n    var baseMediaDecodeTime = (tfdt.length > 0) ? inspect.parseTfdt(tfdt[0]).baseMediaDecodeTime : 0;\n    var truns = probe.findBox(traf, ['trun']);\n    var samples;\n    var seiNals;\n\n    // Only parse video data for the chosen video track\n    if (videoTrackId === trackId && truns.length > 0) {\n      samples = parseSamples(truns, baseMediaDecodeTime, headerInfo);\n\n      seiNals = findSeiNals(mdat, samples, trackId);\n\n      if (!captionNals[trackId]) {\n        captionNals[trackId] = [];\n      }\n\n      captionNals[trackId] = captionNals[trackId].concat(seiNals);\n    }\n  });\n\n  return captionNals;\n};\n\n/**\n  * Parses out inband captions from an MP4 container and returns\n  * caption objects that can be used by WebVTT and the TextTrack API.\n  * @see https://developer.mozilla.org/en-US/docs/Web/API/VTTCue\n  * @see https://developer.mozilla.org/en-US/docs/Web/API/TextTrack\n  * Assumes that `probe.getVideoTrackIds` and `probe.timescale` have been called first\n  *\n  * @param {Uint8Array} segment - The fmp4 segment containing embedded captions\n  * @param {Number} trackId - The id of the video track to parse\n  * @param {Number} timescale - The timescale for the video track from the init segment\n  *\n  * @return {?Object[]} parsedCaptions - A list of captions or null if no video tracks\n  * @return {Number} parsedCaptions[].startTime - The time to show the caption in seconds\n  * @return {Number} parsedCaptions[].endTime - The time to stop showing the caption in seconds\n  * @return {String} parsedCaptions[].text - The visible content of the caption\n **/\nvar parseEmbeddedCaptions = function(segment, trackId, timescale) {\n  var seiNals;\n\n  if (!trackId) {\n    return null;\n  }\n\n  seiNals = parseCaptionNals(segment, trackId);\n\n  return {\n    seiNals: seiNals[trackId],\n    timescale: timescale\n  };\n};\n\n/**\n  * Converts SEI NALUs into captions that can be used by video.js\n **/\nvar CaptionParser = function() {\n  var isInitialized = false;\n  var captionStream;\n\n  // Stores segments seen before trackId and timescale are set\n  var segmentCache;\n  // Stores video track ID of the track being parsed\n  var trackId;\n  // Stores the timescale of the track being parsed\n  var timescale;\n  // Stores captions parsed so far\n  var parsedCaptions;\n\n  /**\n    * A method to indicate whether a CaptionParser has been initalized\n    * @returns {Boolean}\n   **/\n  this.isInitialized = function() {\n    return isInitialized;\n  };\n\n  /**\n    * Initializes the underlying CaptionStream, SEI NAL parsing\n    * and management, and caption collection\n   **/\n  this.init = function() {\n    captionStream = new CaptionStream();\n    isInitialized = true;\n\n    // Collect dispatched captions\n    captionStream.on('data', function(event) {\n      // Convert to seconds in the source's timescale\n      event.startTime = event.startPts / timescale;\n      event.endTime = event.endPts / timescale;\n\n      parsedCaptions.captions.push(event);\n      parsedCaptions.captionStreams[event.stream] = true;\n    });\n  };\n\n  /**\n    * Determines if a new video track will be selected\n    * or if the timescale changed\n    * @return {Boolean}\n   **/\n  this.isNewInit = function(videoTrackIds, timescales) {\n    if ((videoTrackIds && videoTrackIds.length === 0) ||\n        (timescales && typeof timescales === 'object' &&\n          Object.keys(timescales).length === 0)) {\n      return false;\n    }\n\n    return trackId !== videoTrackIds[0] ||\n      timescale !== timescales[trackId];\n  };\n\n  /**\n    * Parses out SEI captions and interacts with underlying\n    * CaptionStream to return dispatched captions\n    *\n    * @param {Uint8Array} segment - The fmp4 segment containing embedded captions\n    * @param {Number[]} videoTrackIds - A list of video tracks found in the init segment\n    * @param {Object.<Number, Number>} timescales - The timescales found in the init segment\n    * @see parseEmbeddedCaptions\n    * @see m2ts/caption-stream.js\n   **/\n  this.parse = function(segment, videoTrackIds, timescales) {\n    var parsedData;\n\n    if (!this.isInitialized()) {\n      return null;\n\n    // This is not likely to be a video segment\n    } else if (!videoTrackIds || !timescales) {\n      return null;\n\n    } else if (this.isNewInit(videoTrackIds, timescales)) {\n      // Use the first video track only as there is no\n      // mechanism to switch to other video tracks\n      trackId = videoTrackIds[0];\n      timescale = timescales[trackId];\n\n    // If an init segment has not been seen yet, hold onto segment\n    // data until we have one\n    } else if (!trackId || !timescale) {\n      segmentCache.push(segment);\n      return null;\n    }\n\n    // Now that a timescale and trackId is set, parse cached segments\n    while (segmentCache.length > 0) {\n      var cachedSegment = segmentCache.shift();\n\n      this.parse(cachedSegment, videoTrackIds, timescales);\n    }\n\n    parsedData = parseEmbeddedCaptions(segment, trackId, timescale);\n\n    if (parsedData === null || !parsedData.seiNals) {\n      return null;\n    }\n\n    this.pushNals(parsedData.seiNals);\n    // Force the parsed captions to be dispatched\n    this.flushStream();\n\n    return parsedCaptions;\n  };\n\n  /**\n    * Pushes SEI NALUs onto CaptionStream\n    * @param {Object[]} nals - A list of SEI nals parsed using `parseCaptionNals`\n    * Assumes that `parseCaptionNals` has been called first\n    * @see m2ts/caption-stream.js\n    **/\n  this.pushNals = function(nals) {\n    if (!this.isInitialized() || !nals || nals.length === 0) {\n      return null;\n    }\n\n    nals.forEach(function(nal) {\n      captionStream.push(nal);\n    });\n  };\n\n  /**\n    * Flushes underlying CaptionStream to dispatch processed, displayable captions\n    * @see m2ts/caption-stream.js\n   **/\n  this.flushStream = function() {\n    if (!this.isInitialized()) {\n      return null;\n    }\n\n    captionStream.flush();\n  };\n\n  /**\n    * Reset caption buckets for new data\n   **/\n  this.clearParsedCaptions = function() {\n    parsedCaptions.captions = [];\n    parsedCaptions.captionStreams = {};\n  };\n\n  /**\n    * Resets underlying CaptionStream\n    * @see m2ts/caption-stream.js\n   **/\n  this.resetCaptionStream = function() {\n    if (!this.isInitialized()) {\n      return null;\n    }\n\n    captionStream.reset();\n  };\n\n  /**\n    * Convenience method to clear all captions flushed from the\n    * CaptionStream and still being parsed\n    * @see m2ts/caption-stream.js\n   **/\n  this.clearAllCaptions = function() {\n    this.clearParsedCaptions();\n    this.resetCaptionStream();\n  };\n\n  /**\n    * Reset caption parser\n   **/\n  this.reset = function() {\n    segmentCache = [];\n    trackId = null;\n    timescale = null;\n\n    if (!parsedCaptions) {\n      parsedCaptions = {\n        captions: [],\n        // CC1, CC2, CC3, CC4\n        captionStreams: {}\n      };\n    } else {\n      this.clearParsedCaptions();\n    }\n\n    this.resetCaptionStream();\n  };\n\n  this.reset();\n};\n\nmodule.exports = CaptionParser;\n","/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * Parse the internal MP4 structure into an equivalent javascript\n * object.\n */\n'use strict';\n\nvar\n  inspectMp4,\n  textifyMp4,\n\n  parseType = require('../mp4/probe').parseType,\n  parseMp4Date = function(seconds) {\n    return new Date(seconds * 1000 - 2082844800000);\n  },\n  parseSampleFlags = function(flags) {\n    return {\n      isLeading: (flags[0] & 0x0c) >>> 2,\n      dependsOn: flags[0] & 0x03,\n      isDependedOn: (flags[1] & 0xc0) >>> 6,\n      hasRedundancy: (flags[1] & 0x30) >>> 4,\n      paddingValue: (flags[1] & 0x0e) >>> 1,\n      isNonSyncSample: flags[1] & 0x01,\n      degradationPriority: (flags[2] << 8) | flags[3]\n    };\n  },\n  nalParse = function(avcStream) {\n    var\n      avcView = new DataView(avcStream.buffer, avcStream.byteOffset, avcStream.byteLength),\n      result = [],\n      i,\n      length;\n    for (i = 0; i + 4 < avcStream.length; i += length) {\n      length = avcView.getUint32(i);\n      i += 4;\n\n      // bail if this doesn't appear to be an H264 stream\n      if (length <= 0) {\n        result.push('<span style=\\'color:red;\\'>MALFORMED DATA</span>');\n        continue;\n      }\n\n      switch (avcStream[i] & 0x1F) {\n      case 0x01:\n        result.push('slice_layer_without_partitioning_rbsp');\n        break;\n      case 0x05:\n        result.push('slice_layer_without_partitioning_rbsp_idr');\n        break;\n      case 0x06:\n        result.push('sei_rbsp');\n        break;\n      case 0x07:\n        result.push('seq_parameter_set_rbsp');\n        break;\n      case 0x08:\n        result.push('pic_parameter_set_rbsp');\n        break;\n      case 0x09:\n        result.push('access_unit_delimiter_rbsp');\n        break;\n      default:\n        result.push('UNKNOWN NAL - ' + avcStream[i] & 0x1F);\n        break;\n      }\n    }\n    return result;\n  },\n\n  // registry of handlers for individual mp4 box types\n  parse = {\n    // codingname, not a first-class box type. stsd entries share the\n    // same format as real boxes so the parsing infrastructure can be\n    // shared\n    avc1: function(data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n      return {\n        dataReferenceIndex: view.getUint16(6),\n        width: view.getUint16(24),\n        height: view.getUint16(26),\n        horizresolution: view.getUint16(28) + (view.getUint16(30) / 16),\n        vertresolution: view.getUint16(32) + (view.getUint16(34) / 16),\n        frameCount: view.getUint16(40),\n        depth: view.getUint16(74),\n        config: inspectMp4(data.subarray(78, data.byteLength))\n      };\n    },\n    avcC: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n          configurationVersion: data[0],\n          avcProfileIndication: data[1],\n          profileCompatibility: data[2],\n          avcLevelIndication: data[3],\n          lengthSizeMinusOne: data[4] & 0x03,\n          sps: [],\n          pps: []\n        },\n        numOfSequenceParameterSets = data[5] & 0x1f,\n        numOfPictureParameterSets,\n        nalSize,\n        offset,\n        i;\n\n      // iterate past any SPSs\n      offset = 6;\n      for (i = 0; i < numOfSequenceParameterSets; i++) {\n        nalSize = view.getUint16(offset);\n        offset += 2;\n        result.sps.push(new Uint8Array(data.subarray(offset, offset + nalSize)));\n        offset += nalSize;\n      }\n      // iterate past any PPSs\n      numOfPictureParameterSets = data[offset];\n      offset++;\n      for (i = 0; i < numOfPictureParameterSets; i++) {\n        nalSize = view.getUint16(offset);\n        offset += 2;\n        result.pps.push(new Uint8Array(data.subarray(offset, offset + nalSize)));\n        offset += nalSize;\n      }\n      return result;\n    },\n    btrt: function(data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n      return {\n        bufferSizeDB: view.getUint32(0),\n        maxBitrate: view.getUint32(4),\n        avgBitrate: view.getUint32(8)\n      };\n    },\n    esds: function(data) {\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        esId: (data[6] << 8) | data[7],\n        streamPriority: data[8] & 0x1f,\n        decoderConfig: {\n          objectProfileIndication: data[11],\n          streamType: (data[12] >>> 2) & 0x3f,\n          bufferSize: (data[13] << 16) | (data[14] << 8) | data[15],\n          maxBitrate: (data[16] << 24) |\n            (data[17] << 16) |\n            (data[18] <<  8) |\n            data[19],\n          avgBitrate: (data[20] << 24) |\n            (data[21] << 16) |\n            (data[22] <<  8) |\n            data[23],\n          decoderConfigDescriptor: {\n            tag: data[24],\n            length: data[25],\n            audioObjectType: (data[26] >>> 3) & 0x1f,\n            samplingFrequencyIndex: ((data[26] & 0x07) << 1) |\n              ((data[27] >>> 7) & 0x01),\n            channelConfiguration: (data[27] >>> 3) & 0x0f\n          }\n        }\n      };\n    },\n    ftyp: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n          majorBrand: parseType(data.subarray(0, 4)),\n          minorVersion: view.getUint32(4),\n          compatibleBrands: []\n        },\n        i = 8;\n      while (i < data.byteLength) {\n        result.compatibleBrands.push(parseType(data.subarray(i, i + 4)));\n        i += 4;\n      }\n      return result;\n    },\n    dinf: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    dref: function(data) {\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        dataReferences: inspectMp4(data.subarray(8))\n      };\n    },\n    hdlr: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4)),\n          handlerType: parseType(data.subarray(8, 12)),\n          name: ''\n        },\n        i = 8;\n\n      // parse out the name field\n      for (i = 24; i < data.byteLength; i++) {\n        if (data[i] === 0x00) {\n          // the name field is null-terminated\n          i++;\n          break;\n        }\n        result.name += String.fromCharCode(data[i]);\n      }\n      // decode UTF-8 to javascript's internal representation\n      // see http://ecmanaut.blogspot.com/2006/07/encoding-decoding-utf8-in-javascript.html\n      result.name = decodeURIComponent(escape(result.name));\n\n      return result;\n    },\n    mdat: function(data) {\n      return {\n        byteLength: data.byteLength,\n        nals: nalParse(data)\n      };\n    },\n    mdhd: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        i = 4,\n        language,\n        result = {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4)),\n          language: ''\n        };\n      if (result.version === 1) {\n        i += 4;\n        result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n        i += 8;\n        result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n        i += 4;\n        result.timescale = view.getUint32(i);\n        i += 8;\n        result.duration = view.getUint32(i); // truncating top 4 bytes\n      } else {\n        result.creationTime = parseMp4Date(view.getUint32(i));\n        i += 4;\n        result.modificationTime = parseMp4Date(view.getUint32(i));\n        i += 4;\n        result.timescale = view.getUint32(i);\n        i += 4;\n        result.duration = view.getUint32(i);\n      }\n      i += 4;\n      // language is stored as an ISO-639-2/T code in an array of three 5-bit fields\n      // each field is the packed difference between its ASCII value and 0x60\n      language = view.getUint16(i);\n      result.language += String.fromCharCode((language >> 10) + 0x60);\n      result.language += String.fromCharCode(((language & 0x03e0) >> 5) + 0x60);\n      result.language += String.fromCharCode((language & 0x1f) + 0x60);\n\n      return result;\n    },\n    mdia: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    mfhd: function(data) {\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        sequenceNumber: (data[4] << 24) |\n          (data[5] << 16) |\n          (data[6] << 8) |\n          (data[7])\n      };\n    },\n    minf: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    // codingname, not a first-class box type. stsd entries share the\n    // same format as real boxes so the parsing infrastructure can be\n    // shared\n    mp4a: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n          // 6 bytes reserved\n          dataReferenceIndex: view.getUint16(6),\n          // 4 + 4 bytes reserved\n          channelcount: view.getUint16(16),\n          samplesize: view.getUint16(18),\n          // 2 bytes pre_defined\n          // 2 bytes reserved\n          samplerate: view.getUint16(24) + (view.getUint16(26) / 65536)\n        };\n\n      // if there are more bytes to process, assume this is an ISO/IEC\n      // 14496-14 MP4AudioSampleEntry and parse the ESDBox\n      if (data.byteLength > 28) {\n        result.streamDescriptor = inspectMp4(data.subarray(28))[0];\n      }\n      return result;\n    },\n    moof: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    moov: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    mvex: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    mvhd: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        i = 4,\n        result = {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4))\n        };\n\n      if (result.version === 1) {\n        i += 4;\n        result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n        i += 8;\n        result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n        i += 4;\n        result.timescale = view.getUint32(i);\n        i += 8;\n        result.duration = view.getUint32(i); // truncating top 4 bytes\n      } else {\n        result.creationTime = parseMp4Date(view.getUint32(i));\n        i += 4;\n        result.modificationTime = parseMp4Date(view.getUint32(i));\n        i += 4;\n        result.timescale = view.getUint32(i);\n        i += 4;\n        result.duration = view.getUint32(i);\n      }\n      i += 4;\n\n      // convert fixed-point, base 16 back to a number\n      result.rate = view.getUint16(i) + (view.getUint16(i + 2) / 16);\n      i += 4;\n      result.volume = view.getUint8(i) + (view.getUint8(i + 1) / 8);\n      i += 2;\n      i += 2;\n      i += 2 * 4;\n      result.matrix = new Uint32Array(data.subarray(i, i + (9 * 4)));\n      i += 9 * 4;\n      i += 6 * 4;\n      result.nextTrackId = view.getUint32(i);\n      return result;\n    },\n    pdin: function(data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n      return {\n        version: view.getUint8(0),\n        flags: new Uint8Array(data.subarray(1, 4)),\n        rate: view.getUint32(4),\n        initialDelay: view.getUint32(8)\n      };\n    },\n    sdtp: function(data) {\n      var\n        result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          samples: []\n        }, i;\n\n      for (i = 4; i < data.byteLength; i++) {\n        result.samples.push({\n          dependsOn: (data[i] & 0x30) >> 4,\n          isDependedOn: (data[i] & 0x0c) >> 2,\n          hasRedundancy: data[i] & 0x03\n        });\n      }\n      return result;\n    },\n    sidx: function(data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n          result = {\n            version: data[0],\n            flags: new Uint8Array(data.subarray(1, 4)),\n            references: [],\n            referenceId: view.getUint32(4),\n            timescale: view.getUint32(8),\n            earliestPresentationTime: view.getUint32(12),\n            firstOffset: view.getUint32(16)\n          },\n          referenceCount = view.getUint16(22),\n          i;\n\n      for (i = 24; referenceCount; i += 12, referenceCount--) {\n        result.references.push({\n          referenceType: (data[i] & 0x80) >>> 7,\n          referencedSize: view.getUint32(i) & 0x7FFFFFFF,\n          subsegmentDuration: view.getUint32(i + 4),\n          startsWithSap: !!(data[i + 8] & 0x80),\n          sapType: (data[i + 8] & 0x70) >>> 4,\n          sapDeltaTime: view.getUint32(i + 8) & 0x0FFFFFFF\n        });\n      }\n\n      return result;\n    },\n    smhd: function(data) {\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        balance: data[4] + (data[5] / 256)\n      };\n    },\n    stbl: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    stco: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          chunkOffsets: []\n        },\n        entryCount = view.getUint32(4),\n        i;\n      for (i = 8; entryCount; i += 4, entryCount--) {\n        result.chunkOffsets.push(view.getUint32(i));\n      }\n      return result;\n    },\n    stsc: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        entryCount = view.getUint32(4),\n        result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          sampleToChunks: []\n        },\n        i;\n      for (i = 8; entryCount; i += 12, entryCount--) {\n        result.sampleToChunks.push({\n          firstChunk: view.getUint32(i),\n          samplesPerChunk: view.getUint32(i + 4),\n          sampleDescriptionIndex: view.getUint32(i + 8)\n        });\n      }\n      return result;\n    },\n    stsd: function(data) {\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        sampleDescriptions: inspectMp4(data.subarray(8))\n      };\n    },\n    stsz: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          sampleSize: view.getUint32(4),\n          entries: []\n        },\n        i;\n      for (i = 12; i < data.byteLength; i += 4) {\n        result.entries.push(view.getUint32(i));\n      }\n      return result;\n    },\n    stts: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          timeToSamples: []\n        },\n        entryCount = view.getUint32(4),\n        i;\n\n      for (i = 8; entryCount; i += 8, entryCount--) {\n        result.timeToSamples.push({\n          sampleCount: view.getUint32(i),\n          sampleDelta: view.getUint32(i + 4)\n        });\n      }\n      return result;\n    },\n    styp: function(data) {\n      return parse.ftyp(data);\n    },\n    tfdt: function(data) {\n      var result = {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        baseMediaDecodeTime: data[4] << 24 | data[5] << 16 | data[6] << 8 | data[7]\n      };\n      if (result.version === 1) {\n        result.baseMediaDecodeTime *= Math.pow(2, 32);\n        result.baseMediaDecodeTime += data[8] << 24 | data[9] << 16 | data[10] << 8 | data[11];\n      }\n      return result;\n    },\n    tfhd: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          trackId: view.getUint32(4)\n        },\n        baseDataOffsetPresent = result.flags[2] & 0x01,\n        sampleDescriptionIndexPresent = result.flags[2] & 0x02,\n        defaultSampleDurationPresent = result.flags[2] & 0x08,\n        defaultSampleSizePresent = result.flags[2] & 0x10,\n        defaultSampleFlagsPresent = result.flags[2] & 0x20,\n        durationIsEmpty = result.flags[0] & 0x010000,\n        defaultBaseIsMoof =  result.flags[0] & 0x020000,\n        i;\n\n      i = 8;\n      if (baseDataOffsetPresent) {\n        i += 4; // truncate top 4 bytes\n        // FIXME: should we read the full 64 bits?\n        result.baseDataOffset = view.getUint32(12);\n        i += 4;\n      }\n      if (sampleDescriptionIndexPresent) {\n        result.sampleDescriptionIndex = view.getUint32(i);\n        i += 4;\n      }\n      if (defaultSampleDurationPresent) {\n        result.defaultSampleDuration = view.getUint32(i);\n        i += 4;\n      }\n      if (defaultSampleSizePresent) {\n        result.defaultSampleSize = view.getUint32(i);\n        i += 4;\n      }\n      if (defaultSampleFlagsPresent) {\n        result.defaultSampleFlags = view.getUint32(i);\n      }\n      if (durationIsEmpty) {\n        result.durationIsEmpty = true;\n      }\n      if (!baseDataOffsetPresent && defaultBaseIsMoof) {\n        result.baseDataOffsetIsMoof = true;\n      }\n      return result;\n    },\n    tkhd: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        i = 4,\n        result = {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4))\n        };\n      if (result.version === 1) {\n        i += 4;\n        result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n        i += 8;\n        result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n        i += 4;\n        result.trackId = view.getUint32(i);\n        i += 4;\n        i += 8;\n        result.duration = view.getUint32(i); // truncating top 4 bytes\n      } else {\n        result.creationTime = parseMp4Date(view.getUint32(i));\n        i += 4;\n        result.modificationTime = parseMp4Date(view.getUint32(i));\n        i += 4;\n        result.trackId = view.getUint32(i);\n        i += 4;\n        i += 4;\n        result.duration = view.getUint32(i);\n      }\n      i += 4;\n      i += 2 * 4;\n      result.layer = view.getUint16(i);\n      i += 2;\n      result.alternateGroup = view.getUint16(i);\n      i += 2;\n      // convert fixed-point, base 16 back to a number\n      result.volume = view.getUint8(i) + (view.getUint8(i + 1) / 8);\n      i += 2;\n      i += 2;\n      result.matrix = new Uint32Array(data.subarray(i, i + (9 * 4)));\n      i += 9 * 4;\n      result.width = view.getUint16(i) + (view.getUint16(i + 2) / 16);\n      i += 4;\n      result.height = view.getUint16(i) + (view.getUint16(i + 2) / 16);\n      return result;\n    },\n    traf: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    trak: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    trex: function(data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        trackId: view.getUint32(4),\n        defaultSampleDescriptionIndex: view.getUint32(8),\n        defaultSampleDuration: view.getUint32(12),\n        defaultSampleSize: view.getUint32(16),\n        sampleDependsOn: data[20] & 0x03,\n        sampleIsDependedOn: (data[21] & 0xc0) >> 6,\n        sampleHasRedundancy: (data[21] & 0x30) >> 4,\n        samplePaddingValue: (data[21] & 0x0e) >> 1,\n        sampleIsDifferenceSample: !!(data[21] & 0x01),\n        sampleDegradationPriority: view.getUint16(22)\n      };\n    },\n    trun: function(data) {\n      var\n        result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          samples: []\n        },\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        // Flag interpretation\n        dataOffsetPresent = result.flags[2] & 0x01, // compare with 2nd byte of 0x1\n        firstSampleFlagsPresent = result.flags[2] & 0x04, // compare with 2nd byte of 0x4\n        sampleDurationPresent = result.flags[1] & 0x01, // compare with 2nd byte of 0x100\n        sampleSizePresent = result.flags[1] & 0x02, // compare with 2nd byte of 0x200\n        sampleFlagsPresent = result.flags[1] & 0x04, // compare with 2nd byte of 0x400\n        sampleCompositionTimeOffsetPresent = result.flags[1] & 0x08, // compare with 2nd byte of 0x800\n        sampleCount = view.getUint32(4),\n        offset = 8,\n        sample;\n\n      if (dataOffsetPresent) {\n        // 32 bit signed integer\n        result.dataOffset = view.getInt32(offset);\n        offset += 4;\n      }\n\n      // Overrides the flags for the first sample only. The order of\n      // optional values will be: duration, size, compositionTimeOffset\n      if (firstSampleFlagsPresent && sampleCount) {\n        sample = {\n          flags: parseSampleFlags(data.subarray(offset, offset + 4))\n        };\n        offset += 4;\n        if (sampleDurationPresent) {\n          sample.duration = view.getUint32(offset);\n          offset += 4;\n        }\n        if (sampleSizePresent) {\n          sample.size = view.getUint32(offset);\n          offset += 4;\n        }\n        if (sampleCompositionTimeOffsetPresent) {\n          // Note: this should be a signed int if version is 1\n          sample.compositionTimeOffset = view.getUint32(offset);\n          offset += 4;\n        }\n        result.samples.push(sample);\n        sampleCount--;\n      }\n\n      while (sampleCount--) {\n        sample = {};\n        if (sampleDurationPresent) {\n          sample.duration = view.getUint32(offset);\n          offset += 4;\n        }\n        if (sampleSizePresent) {\n          sample.size = view.getUint32(offset);\n          offset += 4;\n        }\n        if (sampleFlagsPresent) {\n          sample.flags = parseSampleFlags(data.subarray(offset, offset + 4));\n          offset += 4;\n        }\n        if (sampleCompositionTimeOffsetPresent) {\n          // Note: this should be a signed int if version is 1\n          sample.compositionTimeOffset = view.getUint32(offset);\n          offset += 4;\n        }\n        result.samples.push(sample);\n      }\n      return result;\n    },\n    'url ': function(data) {\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4))\n      };\n    },\n    vmhd: function(data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        graphicsmode: view.getUint16(4),\n        opcolor: new Uint16Array([view.getUint16(6),\n                                  view.getUint16(8),\n                                  view.getUint16(10)])\n      };\n    }\n  };\n\n\n/**\n * Return a javascript array of box objects parsed from an ISO base\n * media file.\n * @param data {Uint8Array} the binary data of the media to be inspected\n * @return {array} a javascript array of potentially nested box objects\n */\ninspectMp4 = function(data) {\n  var\n    i = 0,\n    result = [],\n    view,\n    size,\n    type,\n    end,\n    box;\n\n  // Convert data from Uint8Array to ArrayBuffer, to follow Dataview API\n  var ab = new ArrayBuffer(data.length);\n  var v = new Uint8Array(ab);\n  for (var z = 0; z < data.length; ++z) {\n      v[z] = data[z];\n  }\n  view = new DataView(ab);\n\n  while (i < data.byteLength) {\n    // parse box data\n    size = view.getUint32(i);\n    type =  parseType(data.subarray(i + 4, i + 8));\n    end = size > 1 ? i + size : data.byteLength;\n\n    // parse type-specific data\n    box = (parse[type] || function(data) {\n      return {\n        data: data\n      };\n    })(data.subarray(i + 8, end));\n    box.size = size;\n    box.type = type;\n\n    // store this box and move to the next\n    result.push(box);\n    i = end;\n  }\n  return result;\n};\n\n/**\n * Returns a textual representation of the javascript represtentation\n * of an MP4 file. You can use it as an alternative to\n * JSON.stringify() to compare inspected MP4s.\n * @param inspectedMp4 {array} the parsed array of boxes in an MP4\n * file\n * @param depth {number} (optional) the number of ancestor boxes of\n * the elements of inspectedMp4. Assumed to be zero if unspecified.\n * @return {string} a text representation of the parsed MP4\n */\ntextifyMp4 = function(inspectedMp4, depth) {\n  var indent;\n  depth = depth || 0;\n  indent = new Array(depth * 2 + 1).join(' ');\n\n  // iterate over all the boxes\n  return inspectedMp4.map(function(box, index) {\n\n    // list the box type first at the current indentation level\n    return indent + box.type + '\\n' +\n\n      // the type is already included and handle child boxes separately\n      Object.keys(box).filter(function(key) {\n        return key !== 'type' && key !== 'boxes';\n\n      // output all the box properties\n      }).map(function(key) {\n        var prefix = indent + '  ' + key + ': ',\n            value = box[key];\n\n        // print out raw bytes as hexademical\n        if (value instanceof Uint8Array || value instanceof Uint32Array) {\n          var bytes = Array.prototype.slice.call(new Uint8Array(value.buffer, value.byteOffset, value.byteLength))\n              .map(function(byte) {\n                return ' ' + ('00' + byte.toString(16)).slice(-2);\n              }).join('').match(/.{1,24}/g);\n          if (!bytes) {\n            return prefix + '<>';\n          }\n          if (bytes.length === 1) {\n            return prefix + '<' + bytes.join('').slice(1) + '>';\n          }\n          return prefix + '<\\n' + bytes.map(function(line) {\n            return indent + '  ' + line;\n          }).join('\\n') + '\\n' + indent + '  >';\n        }\n\n        // stringify generic objects\n        return prefix +\n            JSON.stringify(value, null, 2)\n              .split('\\n').map(function(line, index) {\n                if (index === 0) {\n                  return line;\n                }\n                return indent + '  ' + line;\n              }).join('\\n');\n      }).join('\\n') +\n\n    // recursively textify the child boxes\n    (box.boxes ? '\\n' + textifyMp4(box.boxes, depth + 1) : '');\n  }).join('\\n');\n};\n\nmodule.exports = {\n  inspect: inspectMp4,\n  textify: textifyMp4,\n  parseTfdt: parse.tfdt,\n  parseHdlr: parse.hdlr,\n  parseTfhd: parse.tfhd,\n  parseTrun: parse.trun\n};\n","/**\n * mux.js\n *\n * Copyright (c) 2016 Brightcove\n * All rights reserved.\n *\n * Parse mpeg2 transport stream packets to extract basic timing information\n */\n'use strict';\n\nvar StreamTypes = require('../m2ts/stream-types.js');\nvar handleRollover = require('../m2ts/timestamp-rollover-stream.js').handleRollover;\nvar probe = {};\nprobe.ts = require('../m2ts/probe.js');\nprobe.aac = require('../aac/probe.js');\n\n\nvar\n  PES_TIMESCALE = 90000,\n  MP2T_PACKET_LENGTH = 188, // bytes\n  SYNC_BYTE = 0x47;\n\nvar isLikelyAacData = function(data) {\n  if ((data[0] === 'I'.charCodeAt(0)) &&\n      (data[1] === 'D'.charCodeAt(0)) &&\n      (data[2] === '3'.charCodeAt(0))) {\n    return true;\n  }\n  return false;\n};\n\n/**\n * walks through segment data looking for pat and pmt packets to parse out\n * program map table information\n */\nvar parsePsi_ = function(bytes, pmt) {\n  var\n    startIndex = 0,\n    endIndex = MP2T_PACKET_LENGTH,\n    packet, type;\n\n  while (endIndex < bytes.byteLength) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pat':\n          if (!pmt.pid) {\n            pmt.pid = probe.ts.parsePat(packet);\n          }\n          break;\n        case 'pmt':\n          if (!pmt.table) {\n            pmt.table = probe.ts.parsePmt(packet);\n          }\n          break;\n        default:\n          break;\n      }\n\n      // Found the pat and pmt, we can stop walking the segment\n      if (pmt.pid && pmt.table) {\n        return;\n      }\n\n      startIndex += MP2T_PACKET_LENGTH;\n      endIndex += MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex++;\n    endIndex++;\n  }\n};\n\n/**\n * walks through the segment data from the start and end to get timing information\n * for the first and last audio pes packets\n */\nvar parseAudioPes_ = function(bytes, pmt, result) {\n  var\n    startIndex = 0,\n    endIndex = MP2T_PACKET_LENGTH,\n    packet, type, pesType, pusi, parsed;\n\n  var endLoop = false;\n\n  // Start walking from start of segment to get first audio packet\n  while (endIndex < bytes.byteLength) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pes':\n          pesType = probe.ts.parsePesType(packet, pmt.table);\n          pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n          if (pesType === 'audio' && pusi) {\n            parsed = probe.ts.parsePesTime(packet);\n            if (parsed) {\n              parsed.type = 'audio';\n              result.audio.push(parsed);\n              endLoop = true;\n            }\n          }\n          break;\n        default:\n          break;\n      }\n\n      if (endLoop) {\n        break;\n      }\n\n      startIndex += MP2T_PACKET_LENGTH;\n      endIndex += MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex++;\n    endIndex++;\n  }\n\n  // Start walking from end of segment to get last audio packet\n  endIndex = bytes.byteLength;\n  startIndex = endIndex - MP2T_PACKET_LENGTH;\n  endLoop = false;\n  while (startIndex >= 0) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pes':\n          pesType = probe.ts.parsePesType(packet, pmt.table);\n          pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n          if (pesType === 'audio' && pusi) {\n            parsed = probe.ts.parsePesTime(packet);\n            if (parsed) {\n              parsed.type = 'audio';\n              result.audio.push(parsed);\n              endLoop = true;\n            }\n          }\n          break;\n        default:\n          break;\n      }\n\n      if (endLoop) {\n        break;\n      }\n\n      startIndex -= MP2T_PACKET_LENGTH;\n      endIndex -= MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex--;\n    endIndex--;\n  }\n};\n\n/**\n * walks through the segment data from the start and end to get timing information\n * for the first and last video pes packets as well as timing information for the first\n * key frame.\n */\nvar parseVideoPes_ = function(bytes, pmt, result) {\n  var\n    startIndex = 0,\n    endIndex = MP2T_PACKET_LENGTH,\n    packet, type, pesType, pusi, parsed, frame, i, pes;\n\n  var endLoop = false;\n\n  var currentFrame = {\n    data: [],\n    size: 0\n  };\n\n  // Start walking from start of segment to get first video packet\n  while (endIndex < bytes.byteLength) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pes':\n          pesType = probe.ts.parsePesType(packet, pmt.table);\n          pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n          if (pesType === 'video') {\n            if (pusi && !endLoop) {\n              parsed = probe.ts.parsePesTime(packet);\n              if (parsed) {\n                parsed.type = 'video';\n                result.video.push(parsed);\n                endLoop = true;\n              }\n            }\n            if (!result.firstKeyFrame) {\n              if (pusi) {\n                if (currentFrame.size !== 0) {\n                  frame = new Uint8Array(currentFrame.size);\n                  i = 0;\n                  while (currentFrame.data.length) {\n                    pes = currentFrame.data.shift();\n                    frame.set(pes, i);\n                    i += pes.byteLength;\n                  }\n                  if (probe.ts.videoPacketContainsKeyFrame(frame)) {\n                    result.firstKeyFrame = probe.ts.parsePesTime(frame);\n                    result.firstKeyFrame.type = 'video';\n                  }\n                  currentFrame.size = 0;\n                }\n              }\n              currentFrame.data.push(packet);\n              currentFrame.size += packet.byteLength;\n            }\n          }\n          break;\n        default:\n          break;\n      }\n\n      if (endLoop && result.firstKeyFrame) {\n        break;\n      }\n\n      startIndex += MP2T_PACKET_LENGTH;\n      endIndex += MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex++;\n    endIndex++;\n  }\n\n  // Start walking from end of segment to get last video packet\n  endIndex = bytes.byteLength;\n  startIndex = endIndex - MP2T_PACKET_LENGTH;\n  endLoop = false;\n  while (startIndex >= 0) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pes':\n          pesType = probe.ts.parsePesType(packet, pmt.table);\n          pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n          if (pesType === 'video' && pusi) {\n              parsed = probe.ts.parsePesTime(packet);\n              if (parsed) {\n                parsed.type = 'video';\n                result.video.push(parsed);\n                endLoop = true;\n              }\n          }\n          break;\n        default:\n          break;\n      }\n\n      if (endLoop) {\n        break;\n      }\n\n      startIndex -= MP2T_PACKET_LENGTH;\n      endIndex -= MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex--;\n    endIndex--;\n  }\n};\n\n/**\n * Adjusts the timestamp information for the segment to account for\n * rollover and convert to seconds based on pes packet timescale (90khz clock)\n */\nvar adjustTimestamp_ = function(segmentInfo, baseTimestamp) {\n  if (segmentInfo.audio && segmentInfo.audio.length) {\n    var audioBaseTimestamp = baseTimestamp;\n    if (typeof audioBaseTimestamp === 'undefined') {\n      audioBaseTimestamp = segmentInfo.audio[0].dts;\n    }\n    segmentInfo.audio.forEach(function(info) {\n      info.dts = handleRollover(info.dts, audioBaseTimestamp);\n      info.pts = handleRollover(info.pts, audioBaseTimestamp);\n      // time in seconds\n      info.dtsTime = info.dts / PES_TIMESCALE;\n      info.ptsTime = info.pts / PES_TIMESCALE;\n    });\n  }\n\n  if (segmentInfo.video && segmentInfo.video.length) {\n    var videoBaseTimestamp = baseTimestamp;\n    if (typeof videoBaseTimestamp === 'undefined') {\n      videoBaseTimestamp = segmentInfo.video[0].dts;\n    }\n    segmentInfo.video.forEach(function(info) {\n      info.dts = handleRollover(info.dts, videoBaseTimestamp);\n      info.pts = handleRollover(info.pts, videoBaseTimestamp);\n      // time in seconds\n      info.dtsTime = info.dts / PES_TIMESCALE;\n      info.ptsTime = info.pts / PES_TIMESCALE;\n    });\n    if (segmentInfo.firstKeyFrame) {\n      var frame = segmentInfo.firstKeyFrame;\n      frame.dts = handleRollover(frame.dts, videoBaseTimestamp);\n      frame.pts = handleRollover(frame.pts, videoBaseTimestamp);\n      // time in seconds\n      frame.dtsTime = frame.dts / PES_TIMESCALE;\n      frame.ptsTime = frame.dts / PES_TIMESCALE;\n    }\n  }\n};\n\n/**\n * inspects the aac data stream for start and end time information\n */\nvar inspectAac_ = function(bytes) {\n  var\n    endLoop = false,\n    audioCount = 0,\n    sampleRate = null,\n    timestamp = null,\n    frameSize = 0,\n    byteIndex = 0,\n    packet;\n\n  while (bytes.length - byteIndex >= 3) {\n    var type = probe.aac.parseType(bytes, byteIndex);\n    switch (type) {\n      case 'timed-metadata':\n        // Exit early because we don't have enough to parse\n        // the ID3 tag header\n        if (bytes.length - byteIndex < 10) {\n          endLoop = true;\n          break;\n        }\n\n        frameSize = probe.aac.parseId3TagSize(bytes, byteIndex);\n\n        // Exit early if we don't have enough in the buffer\n        // to emit a full packet\n        if (frameSize > bytes.length) {\n          endLoop = true;\n          break;\n        }\n        if (timestamp === null) {\n          packet = bytes.subarray(byteIndex, byteIndex + frameSize);\n          timestamp = probe.aac.parseAacTimestamp(packet);\n        }\n        byteIndex += frameSize;\n        break;\n      case 'audio':\n        // Exit early because we don't have enough to parse\n        // the ADTS frame header\n        if (bytes.length - byteIndex < 7) {\n          endLoop = true;\n          break;\n        }\n\n        frameSize = probe.aac.parseAdtsSize(bytes, byteIndex);\n\n        // Exit early if we don't have enough in the buffer\n        // to emit a full packet\n        if (frameSize > bytes.length) {\n          endLoop = true;\n          break;\n        }\n        if (sampleRate === null) {\n          packet = bytes.subarray(byteIndex, byteIndex + frameSize);\n          sampleRate = probe.aac.parseSampleRate(packet);\n        }\n        audioCount++;\n        byteIndex += frameSize;\n        break;\n      default:\n        byteIndex++;\n        break;\n    }\n    if (endLoop) {\n      return null;\n    }\n  }\n  if (sampleRate === null || timestamp === null) {\n    return null;\n  }\n\n  var audioTimescale = PES_TIMESCALE / sampleRate;\n\n  var result = {\n    audio: [\n      {\n        type: 'audio',\n        dts: timestamp,\n        pts: timestamp\n      },\n      {\n        type: 'audio',\n        dts: timestamp + (audioCount * 1024 * audioTimescale),\n        pts: timestamp + (audioCount * 1024 * audioTimescale)\n      }\n    ]\n  };\n\n  return result;\n};\n\n/**\n * inspects the transport stream segment data for start and end time information\n * of the audio and video tracks (when present) as well as the first key frame's\n * start time.\n */\nvar inspectTs_ = function(bytes) {\n  var pmt = {\n    pid: null,\n    table: null\n  };\n\n  var result = {};\n\n  parsePsi_(bytes, pmt);\n\n  for (var pid in pmt.table) {\n    if (pmt.table.hasOwnProperty(pid)) {\n      var type = pmt.table[pid];\n      switch (type) {\n        case StreamTypes.H264_STREAM_TYPE:\n          result.video = [];\n          parseVideoPes_(bytes, pmt, result);\n          if (result.video.length === 0) {\n            delete result.video;\n          }\n          break;\n        case StreamTypes.ADTS_STREAM_TYPE:\n          result.audio = [];\n          parseAudioPes_(bytes, pmt, result);\n          if (result.audio.length === 0) {\n            delete result.audio;\n          }\n          break;\n        default:\n          break;\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Inspects segment byte data and returns an object with start and end timing information\n *\n * @param {Uint8Array} bytes The segment byte data\n * @param {Number} baseTimestamp Relative reference timestamp used when adjusting frame\n *  timestamps for rollover. This value must be in 90khz clock.\n * @return {Object} Object containing start and end frame timing info of segment.\n */\nvar inspect = function(bytes, baseTimestamp) {\n  var isAacData = isLikelyAacData(bytes);\n\n  var result;\n\n  if (isAacData) {\n    result = inspectAac_(bytes);\n  } else {\n    result = inspectTs_(bytes);\n  }\n\n  if (!result || (!result.audio && !result.video)) {\n    return null;\n  }\n\n  adjustTimestamp_(result, baseTimestamp);\n\n  return result;\n};\n\nmodule.exports = {\n  inspect: inspect\n};\n","/**\n * mux.js\n *\n * Copyright (c) 2016 Brightcove\n * All rights reserved.\n *\n * Utilities to detect basic properties and metadata about TS Segments.\n */\n'use strict';\n\nvar StreamTypes = require('./stream-types.js');\n\nvar parsePid = function(packet) {\n  var pid = packet[1] & 0x1f;\n  pid <<= 8;\n  pid |= packet[2];\n  return pid;\n};\n\nvar parsePayloadUnitStartIndicator = function(packet) {\n  return !!(packet[1] & 0x40);\n};\n\nvar parseAdaptionField = function(packet) {\n  var offset = 0;\n  // if an adaption field is present, its length is specified by the\n  // fifth byte of the TS packet header. The adaptation field is\n  // used to add stuffing to PES packets that don't fill a complete\n  // TS packet, and to specify some forms of timing and control data\n  // that we do not currently use.\n  if (((packet[3] & 0x30) >>> 4) > 0x01) {\n    offset += packet[4] + 1;\n  }\n  return offset;\n};\n\nvar parseType = function(packet, pmtPid) {\n  var pid = parsePid(packet);\n  if (pid === 0) {\n    return 'pat';\n  } else if (pid === pmtPid) {\n    return 'pmt';\n  } else if (pmtPid) {\n    return 'pes';\n  }\n  return null;\n};\n\nvar parsePat = function(packet) {\n  var pusi = parsePayloadUnitStartIndicator(packet);\n  var offset = 4 + parseAdaptionField(packet);\n\n  if (pusi) {\n    offset += packet[offset] + 1;\n  }\n\n  return (packet[offset + 10] & 0x1f) << 8 | packet[offset + 11];\n};\n\nvar parsePmt = function(packet) {\n  var programMapTable = {};\n  var pusi = parsePayloadUnitStartIndicator(packet);\n  var payloadOffset = 4 + parseAdaptionField(packet);\n\n  if (pusi) {\n    payloadOffset += packet[payloadOffset] + 1;\n  }\n\n  // PMTs can be sent ahead of the time when they should actually\n  // take effect. We don't believe this should ever be the case\n  // for HLS but we'll ignore \"forward\" PMT declarations if we see\n  // them. Future PMT declarations have the current_next_indicator\n  // set to zero.\n  if (!(packet[payloadOffset + 5] & 0x01)) {\n    return;\n  }\n\n  var sectionLength, tableEnd, programInfoLength;\n  // the mapping table ends at the end of the current section\n  sectionLength = (packet[payloadOffset + 1] & 0x0f) << 8 | packet[payloadOffset + 2];\n  tableEnd = 3 + sectionLength - 4;\n\n  // to determine where the table is, we have to figure out how\n  // long the program info descriptors are\n  programInfoLength = (packet[payloadOffset + 10] & 0x0f) << 8 | packet[payloadOffset + 11];\n\n  // advance the offset to the first entry in the mapping table\n  var offset = 12 + programInfoLength;\n  while (offset < tableEnd) {\n    var i = payloadOffset + offset;\n    // add an entry that maps the elementary_pid to the stream_type\n    programMapTable[(packet[i + 1] & 0x1F) << 8 | packet[i + 2]] = packet[i];\n\n    // move to the next table entry\n    // skip past the elementary stream descriptors, if present\n    offset += ((packet[i + 3] & 0x0F) << 8 | packet[i + 4]) + 5;\n  }\n  return programMapTable;\n};\n\nvar parsePesType = function(packet, programMapTable) {\n  var pid = parsePid(packet);\n  var type = programMapTable[pid];\n  switch (type) {\n    case StreamTypes.H264_STREAM_TYPE:\n      return 'video';\n    case StreamTypes.ADTS_STREAM_TYPE:\n      return 'audio';\n    case StreamTypes.METADATA_STREAM_TYPE:\n      return 'timed-metadata';\n    default:\n      return null;\n  }\n};\n\nvar parsePesTime = function(packet) {\n  var pusi = parsePayloadUnitStartIndicator(packet);\n  if (!pusi) {\n    return null;\n  }\n\n  var offset = 4 + parseAdaptionField(packet);\n\n  if (offset >= packet.byteLength) {\n    // From the H 222.0 MPEG-TS spec\n    // \"For transport stream packets carrying PES packets, stuffing is needed when there\n    //  is insufficient PES packet data to completely fill the transport stream packet\n    //  payload bytes. Stuffing is accomplished by defining an adaptation field longer than\n    //  the sum of the lengths of the data elements in it, so that the payload bytes\n    //  remaining after the adaptation field exactly accommodates the available PES packet\n    //  data.\"\n    //\n    // If the offset is >= the length of the packet, then the packet contains no data\n    // and instead is just adaption field stuffing bytes\n    return null;\n  }\n\n  var pes = null;\n  var ptsDtsFlags;\n\n  // PES packets may be annotated with a PTS value, or a PTS value\n  // and a DTS value. Determine what combination of values is\n  // available to work with.\n  ptsDtsFlags = packet[offset + 7];\n\n  // PTS and DTS are normally stored as a 33-bit number.  Javascript\n  // performs all bitwise operations on 32-bit integers but javascript\n  // supports a much greater range (52-bits) of integer using standard\n  // mathematical operations.\n  // We construct a 31-bit value using bitwise operators over the 31\n  // most significant bits and then multiply by 4 (equal to a left-shift\n  // of 2) before we add the final 2 least significant bits of the\n  // timestamp (equal to an OR.)\n  if (ptsDtsFlags & 0xC0) {\n    pes = {};\n    // the PTS and DTS are not written out directly. For information\n    // on how they are encoded, see\n    // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n    pes.pts = (packet[offset + 9] & 0x0E) << 27 |\n      (packet[offset + 10] & 0xFF) << 20 |\n      (packet[offset + 11] & 0xFE) << 12 |\n      (packet[offset + 12] & 0xFF) <<  5 |\n      (packet[offset + 13] & 0xFE) >>>  3;\n    pes.pts *= 4; // Left shift by 2\n    pes.pts += (packet[offset + 13] & 0x06) >>> 1; // OR by the two LSBs\n    pes.dts = pes.pts;\n    if (ptsDtsFlags & 0x40) {\n      pes.dts = (packet[offset + 14] & 0x0E) << 27 |\n        (packet[offset + 15] & 0xFF) << 20 |\n        (packet[offset + 16] & 0xFE) << 12 |\n        (packet[offset + 17] & 0xFF) << 5 |\n        (packet[offset + 18] & 0xFE) >>> 3;\n      pes.dts *= 4; // Left shift by 2\n      pes.dts += (packet[offset + 18] & 0x06) >>> 1; // OR by the two LSBs\n    }\n  }\n  return pes;\n};\n\nvar parseNalUnitType = function(type) {\n  switch (type) {\n    case 0x05:\n      return 'slice_layer_without_partitioning_rbsp_idr';\n    case 0x06:\n      return 'sei_rbsp';\n    case 0x07:\n      return 'seq_parameter_set_rbsp';\n    case 0x08:\n      return 'pic_parameter_set_rbsp';\n    case 0x09:\n      return 'access_unit_delimiter_rbsp';\n    default:\n      return null;\n  }\n};\n\nvar videoPacketContainsKeyFrame = function(packet) {\n  var offset = 4 + parseAdaptionField(packet);\n  var frameBuffer = packet.subarray(offset);\n  var frameI = 0;\n  var frameSyncPoint = 0;\n  var foundKeyFrame = false;\n  var nalType;\n\n  // advance the sync point to a NAL start, if necessary\n  for (; frameSyncPoint < frameBuffer.byteLength - 3; frameSyncPoint++) {\n    if (frameBuffer[frameSyncPoint + 2] === 1) {\n      // the sync point is properly aligned\n      frameI = frameSyncPoint + 5;\n      break;\n    }\n  }\n\n  while (frameI < frameBuffer.byteLength) {\n    // look at the current byte to determine if we've hit the end of\n    // a NAL unit boundary\n    switch (frameBuffer[frameI]) {\n    case 0:\n      // skip past non-sync sequences\n      if (frameBuffer[frameI - 1] !== 0) {\n        frameI += 2;\n        break;\n      } else if (frameBuffer[frameI - 2] !== 0) {\n        frameI++;\n        break;\n      }\n\n      if (frameSyncPoint + 3 !== frameI - 2) {\n        nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n        if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n          foundKeyFrame = true;\n        }\n      }\n\n      // drop trailing zeroes\n      do {\n        frameI++;\n      } while (frameBuffer[frameI] !== 1 && frameI < frameBuffer.length);\n      frameSyncPoint = frameI - 2;\n      frameI += 3;\n      break;\n    case 1:\n      // skip past non-sync sequences\n      if (frameBuffer[frameI - 1] !== 0 ||\n          frameBuffer[frameI - 2] !== 0) {\n        frameI += 3;\n        break;\n      }\n\n      nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n      if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n        foundKeyFrame = true;\n      }\n      frameSyncPoint = frameI - 2;\n      frameI += 3;\n      break;\n    default:\n      // the current byte isn't a one or zero, so it cannot be part\n      // of a sync sequence\n      frameI += 3;\n      break;\n    }\n  }\n  frameBuffer = frameBuffer.subarray(frameSyncPoint);\n  frameI -= frameSyncPoint;\n  frameSyncPoint = 0;\n  // parse the final nal\n  if (frameBuffer && frameBuffer.byteLength > 3) {\n    nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n    if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n      foundKeyFrame = true;\n    }\n  }\n\n  return foundKeyFrame;\n};\n\n\nmodule.exports = {\n  parseType: parseType,\n  parsePat: parsePat,\n  parsePmt: parsePmt,\n  parsePayloadUnitStartIndicator: parsePayloadUnitStartIndicator,\n  parsePesType: parsePesType,\n  parsePesTime: parsePesTime,\n  videoPacketContainsKeyFrame: videoPacketContainsKeyFrame\n};\n","/**\n * mux.js\n *\n * Copyright (c) 2016 Brightcove\n * All rights reserved.\n *\n * Utilities to detect basic properties and metadata about Aac data.\n */\n'use strict';\n\nvar ADTS_SAMPLING_FREQUENCIES = [\n  96000,\n  88200,\n  64000,\n  48000,\n  44100,\n  32000,\n  24000,\n  22050,\n  16000,\n  12000,\n  11025,\n  8000,\n  7350\n];\n\nvar parseSyncSafeInteger = function(data) {\n  return (data[0] << 21) |\n          (data[1] << 14) |\n          (data[2] << 7) |\n          (data[3]);\n};\n\n// return a percent-encoded representation of the specified byte range\n// @see http://en.wikipedia.org/wiki/Percent-encoding\nvar percentEncode = function(bytes, start, end) {\n  var i, result = '';\n  for (i = start; i < end; i++) {\n    result += '%' + ('00' + bytes[i].toString(16)).slice(-2);\n  }\n  return result;\n};\n\n// return the string representation of the specified byte range,\n// interpreted as ISO-8859-1.\nvar parseIso88591 = function(bytes, start, end) {\n  return unescape(percentEncode(bytes, start, end)); // jshint ignore:line\n};\n\nvar parseId3TagSize = function(header, byteIndex) {\n  var\n    returnSize = (header[byteIndex + 6] << 21) |\n                 (header[byteIndex + 7] << 14) |\n                 (header[byteIndex + 8] << 7) |\n                 (header[byteIndex + 9]),\n    flags = header[byteIndex + 5],\n    footerPresent = (flags & 16) >> 4;\n\n  if (footerPresent) {\n    return returnSize + 20;\n  }\n  return returnSize + 10;\n};\n\nvar parseAdtsSize = function(header, byteIndex) {\n  var\n    lowThree = (header[byteIndex + 5] & 0xE0) >> 5,\n    middle = header[byteIndex + 4] << 3,\n    highTwo = header[byteIndex + 3] & 0x3 << 11;\n\n  return (highTwo | middle) | lowThree;\n};\n\nvar parseType = function(header, byteIndex) {\n  if ((header[byteIndex] === 'I'.charCodeAt(0)) &&\n      (header[byteIndex + 1] === 'D'.charCodeAt(0)) &&\n      (header[byteIndex + 2] === '3'.charCodeAt(0))) {\n    return 'timed-metadata';\n  } else if ((header[byteIndex] & 0xff === 0xff) &&\n             ((header[byteIndex + 1] & 0xf0) === 0xf0)) {\n    return 'audio';\n  }\n  return null;\n};\n\nvar parseSampleRate = function(packet) {\n  var i = 0;\n\n  while (i + 5 < packet.length) {\n    if (packet[i] !== 0xFF || (packet[i + 1] & 0xF6) !== 0xF0) {\n      // If a valid header was not found,  jump one forward and attempt to\n      // find a valid ADTS header starting at the next byte\n      i++;\n      continue;\n    }\n    return ADTS_SAMPLING_FREQUENCIES[(packet[i + 2] & 0x3c) >>> 2];\n  }\n\n  return null;\n};\n\nvar parseAacTimestamp = function(packet) {\n  var frameStart, frameSize, frame, frameHeader;\n\n  // find the start of the first frame and the end of the tag\n  frameStart = 10;\n  if (packet[5] & 0x40) {\n    // advance the frame start past the extended header\n    frameStart += 4; // header size field\n    frameStart += parseSyncSafeInteger(packet.subarray(10, 14));\n  }\n\n  // parse one or more ID3 frames\n  // http://id3.org/id3v2.3.0#ID3v2_frame_overview\n  do {\n    // determine the number of bytes in this frame\n    frameSize = parseSyncSafeInteger(packet.subarray(frameStart + 4, frameStart + 8));\n    if (frameSize < 1) {\n      return null;\n    }\n    frameHeader = String.fromCharCode(packet[frameStart],\n                                      packet[frameStart + 1],\n                                      packet[frameStart + 2],\n                                      packet[frameStart + 3]);\n\n    if (frameHeader === 'PRIV') {\n      frame = packet.subarray(frameStart + 10, frameStart + frameSize + 10);\n\n      for (var i = 0; i < frame.byteLength; i++) {\n        if (frame[i] === 0) {\n          var owner = parseIso88591(frame, 0, i);\n          if (owner === 'com.apple.streaming.transportStreamTimestamp') {\n            var d = frame.subarray(i + 1);\n            var size = ((d[3] & 0x01)  << 30) |\n                       (d[4]  << 22) |\n                       (d[5] << 14) |\n                       (d[6] << 6) |\n                       (d[7] >>> 2);\n            size *= 4;\n            size += d[7] & 0x03;\n\n            return size;\n          }\n          break;\n        }\n      }\n    }\n\n    frameStart += 10; // advance past the frame header\n    frameStart += frameSize; // advance past the frame body\n  } while (frameStart < packet.byteLength);\n  return null;\n};\n\nmodule.exports = {\n  parseId3TagSize: parseId3TagSize,\n  parseAdtsSize: parseAdtsSize,\n  parseType: parseType,\n  parseSampleRate: parseSampleRate,\n  parseAacTimestamp: parseAacTimestamp\n};\n"],"sourceRoot":""}