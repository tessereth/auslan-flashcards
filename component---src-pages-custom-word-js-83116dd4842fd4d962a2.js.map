{"version":3,"sources":["webpack:///./src/pages/custom/word.js","webpack:///./src/components/title-bar.js","webpack:///./src/components/video.js","webpack:///./src/components/flashcard.js","webpack:///./src/components/flashcard-scene.js"],"names":["CustomWord","props","deck","URLSearchParams","name","words","title","video","web","urlParams","location","search","JSON","parse","atob","get","forEach","word","index","id","String","react__WEBPACK_IMPORTED_MODULE_3___default","a","createElement","_components_flashcard_scene__WEBPACK_IMPORTED_MODULE_4__","slug","guess","custom","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","TitleBar","_ref","children","className","mediaPath","mediaRef","startsWith","slice","Video","_this","_React$PureComponent","call","this","vjsDefaultOptions","playbackRates","preload","loop","controls","muted","videoRef","React","createRef","componentDidMount","player","videojs","current","componentWillUnmount","dispose","componentDidUpdate","prevProps","prevState","revealed","play","pause","render","_this$props","other","_babel_runtime_helpers_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1___default","react__WEBPACK_IMPORTED_MODULE_4___default","Object","assign","poster","ref","autoPlay","src","type","href","target","rel","PureComponent","defaultProps","WordCard","react_default","classnames","flashcard--hidden","VideoCard","_ref2","HiddenCard","_ref3","reveal","onClick","Flashcard","_ref4","wordFirst","flashcard_WordCard","flashcard_VideoCard","flashcard_HiddenCard","propTypes","PropTypes","shape","string","isRequired","bool","func","FlashcardScene","state","e","preventDefault","setState","unreveal","idxUrl","idx","gotoIdx","navigate","linkToIdx","text","objectWithoutPropertiesLoose_default","length","disabled","gatsby_browser_entry","to","right","isLast","left","isFirst","onKeyDownNative","key","parseInt","seed","undefined","_seed","params","has","Math","floor","random","shuffle","set","toString","document","addEventListener","removeEventListener","_this$props2","layout","title_bar","flashcard","object"],"mappings":"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","file":"component---src-pages-custom-word-js-83116dd4842fd4d962a2.js","sourcesContent":["import React from 'react'\nimport FlashcardScene from '../../components/flashcard-scene'\n\nconst CustomWord = props => {\n  let deck\n  if (typeof URLSearchParams === 'undefined') {\n    deck = {\n      name: 'test',\n      words: [{ title: 'test', video: '1234', web: 'http://foo.com' }],\n    }\n  } else {\n    const urlParams = new URLSearchParams(props.location.search)\n    deck = JSON.parse(atob(urlParams.get('deck')))\n  }\n  deck.words.forEach((word, index) => {\n    word.id = String(index)\n  })\n  return (\n    <FlashcardScene\n      slug=\"custom\"\n      guess=\"word\"\n      deck={deck}\n      search={props.location.search}\n      custom\n    />\n  )\n}\n\nexport default CustomWord\n","import React from 'react'\n\nconst TitleBar = ({ children }) => {\n  return (\n    <section className=\"hero is-primary is-small\">\n      <div className=\"hero-body\">\n        <div className=\"container\">{children}</div>\n      </div>\n    </section>\n  )\n}\n\nexport default TitleBar\n","import React from 'react'\nimport videojs from 'video.js'\n\nconst mediaPath = mediaRef => {\n  // If it's already a url, just return it\n  if (mediaRef.startsWith('http')) {\n    return mediaRef\n  }\n  let base\n  if (mediaRef.slice(-2) === '_1') {\n    base = 'http://media.auslan.org.au/mp4video'\n  } else {\n    base = 'http://media.auslan.org.au/auslan'\n  }\n  return `${base}/${mediaRef.slice(0, 2)}/${mediaRef}`\n}\n\nclass Video extends React.PureComponent {\n  vjsDefaultOptions = {\n    playbackRates: [0.25, 0.5, 1.0, 1.5],\n    preload: 'auto',\n    loop: true,\n    controls: true,\n    muted: true,\n  }\n\n  constructor(props) {\n    super(props)\n    this.videoRef = React.createRef()\n  }\n\n  componentDidMount() {\n    this.player = videojs(this.videoRef.current, this.vjsDefaultOptions)\n  }\n\n  componentWillUnmount() {\n    if (this.player) {\n      this.player.dispose()\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.revealed !== this.props.revealed) {\n      if (this.props.revealed) {\n        this.player.play()\n      } else {\n        this.player.pause()\n      }\n    }\n  }\n\n  render() {\n    const { word, revealed, ...other } = this.props\n    return (\n      <video\n        id={`flashcard-video-${word.id}`}\n        className=\"video-js vjs-fill\"\n        poster={`${mediaPath(word.video)}.jpg`}\n        ref={this.videoRef}\n        autoPlay={revealed}\n        {...other}\n      >\n        <source src={`${mediaPath(word.video)}.mp4`} type=\"video/mp4\" />\n        <p className=\"vjs-no-js\">\n          To view this video please enable JavaScript, and consider upgrading to\n          a web browser that\n          <a\n            href=\"https://videojs.com/html5-video-support/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            supports HTML5 video\n          </a>\n        </p>\n      </video>\n    )\n  }\n}\n\nVideo.defaultProps = {\n  revealed: true,\n}\n\nexport default Video\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport Video from './video'\n\nconst WordCard = ({ word, revealed }) => (\n  <div className={classnames('flashcard', { 'flashcard--hidden': !revealed })}>\n    <div className=\"flashcard__content flashcard__content--word\">\n      <h1 className=\"title\">{word.title || word.id}</h1>\n    </div>\n  </div>\n)\n\nconst VideoCard = ({ word, revealed }) => (\n  <div className={classnames('flashcard', { 'flashcard--hidden': !revealed })}>\n    <div className=\"flashcard__content flashcard__content--video\">\n      <Video word={word} revealed={revealed} />\n    </div>\n  </div>\n)\n\nconst HiddenCard = ({ reveal }) => (\n  <button className=\"flashcard flashcard--reveal\" onClick={reveal}>\n    <div className=\"flashcard__content flashcard__content--reveal\">\n      <p className=\"subtitle\">Reveal</p>\n    </div>\n  </button>\n)\n\nconst Flashcard = ({ word, wordFirst, revealed, reveal }) => {\n  return (\n    <div className=\"columns\">\n      <div className=\"column is-centered\">\n        {wordFirst ? (\n          <WordCard word={word} revealed />\n        ) : (\n          <VideoCard word={word} revealed />\n        )}\n      </div>\n      <div className=\"column is-centered\">\n        {wordFirst ? (\n          <VideoCard word={word} revealed={revealed} />\n        ) : (\n          <WordCard word={word} revealed={revealed} />\n        )}\n        {!revealed && <HiddenCard reveal={reveal} />}\n      </div>\n    </div>\n  )\n}\n\nFlashcard.propTypes = {\n  word: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string,\n    video: PropTypes.string.isRequired,\n  }).isRequired,\n  wordFirst: PropTypes.bool,\n  revealed: PropTypes.bool,\n  reveal: PropTypes.func.isRequired,\n}\n\nexport default Flashcard\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link, navigate } from 'gatsby'\nimport { shuffle } from 'shuffle-seed'\n\nimport Layout from '../components/layout'\nimport Flashcard from '../components/flashcard'\nimport TitleBar from '../components/title-bar'\n\nclass FlashcardScene extends React.PureComponent {\n  state = { revealed: false }\n\n  reveal = e => {\n    if (e) e.preventDefault()\n    this.setState({\n      revealed: true,\n    })\n  }\n\n  unreveal = e => {\n    if (e) e.preventDefault()\n    this.setState({\n      revealed: false,\n    })\n  }\n\n  idxUrl = idx => {\n    const { slug, guess } = this.props\n    return `/${slug}/${guess}?${this.search(idx)}`\n  }\n\n  gotoIdx = idx => {\n    this.unreveal()\n    navigate(this.idxUrl(idx))\n  }\n\n  linkToIdx = ({ idx, text, ...other }) => {\n    if (idx < 0 || idx >= this.props.deck.words.length) {\n      return (\n        <button disabled {...other}>\n          {text}\n        </button>\n      )\n    } else {\n      return (\n        <Link\n          to={this.idxUrl(idx)}\n          onClick={() => this.gotoIdx(idx)}\n          {...other}\n        >\n          {text}\n        </Link>\n      )\n    }\n  }\n\n  right = e => {\n    if (this.isLast() && this.state.revealed) {\n      // do nothing\n    } else if (this.state.revealed) {\n      this.gotoIdx(this.idx() + 1)\n    } else {\n      this.reveal(e)\n    }\n  }\n\n  left = e => {\n    if (this.isFirst() && !this.state.revealed) {\n      // do nothing\n    } else if (this.state.revealed) {\n      this.unreveal(e)\n    } else {\n      this.gotoIdx(this.idx() - 1)\n    }\n  }\n\n  isFirst = () => this.idx() === 0\n\n  isLast = () => this.idx() === this.props.deck.words.length - 1\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.onKeyDownNative)\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.onKeyDownNative)\n  }\n\n  onKeyDownNative = e => {\n    if (e.key === 'ArrowLeft') {\n      this.left()\n    } else if (e.key === 'ArrowRight') {\n      this.right()\n    }\n  }\n\n  idx = () => {\n    if (typeof URLSearchParams === 'undefined') {\n      return 0\n    }\n    const urlParams = new URLSearchParams(this.props.search)\n    const idx = parseInt(urlParams.get('idx') || '0')\n    if (idx < 0) {\n      return 0\n    } else if (idx >= this.props.deck.words.length) {\n      return this.props.deck.words.length - 1\n    } else {\n      return idx\n    }\n  }\n\n  seed = () => {\n    if (this._seed === undefined) {\n      if (typeof URLSearchParams === 'undefined') {\n        this._seed = 0\n        return this._seed\n      }\n      let params = new URLSearchParams(this.props.search)\n      if (params.has('seed')) {\n        this._seed = params.get('seed')\n      } else {\n        this._seed = Math.floor(Math.random() * 10000)\n      }\n    }\n    return this._seed\n  }\n\n  words = () => {\n    return shuffle(this.props.deck.words, this.seed())\n  }\n\n  search = idx => {\n    if (typeof URLSearchParams === 'undefined') {\n      return ''\n    }\n    let params = new URLSearchParams(this.props.search)\n    params.set('idx', idx)\n    params.set('seed', this.seed())\n    return params.toString()\n  }\n\n  render() {\n    const { deck, slug, guess, custom } = this.props\n    const idx = this.idx()\n    const word = this.words()[idx]\n    return (\n      <Layout>\n        <TitleBar>\n          <div className=\"level\">\n            <div className=\"level-left\">\n              <h1 className=\"title\">{deck.name}</h1>\n            </div>\n            {custom && (\n              <div className=\"level-right\">\n                <Link\n                  to={`/build-custom?${this.search(0)}`}\n                  className=\"button is-primary is-outlined is-inverted\"\n                >\n                  Edit\n                </Link>\n              </div>\n            )}\n          </div>\n        </TitleBar>\n        <section className=\"section\">\n          <div className=\"container\">\n            <Flashcard\n              key={word.id}\n              word={word}\n              wordFirst={guess === 'sign'}\n              reveal={this.reveal}\n              revealed={this.state.revealed}\n            />\n            <div className=\"level is-mobile\">\n              <div className=\"level-left\">\n                {this.linkToIdx({\n                  idx: idx - 1,\n                  text: 'Previous',\n                  className: 'button',\n                })}\n              </div>\n              <div className=\"level-right\">\n                {this.isLast() ? (\n                  <Link className=\"button is-success\" to={`/${slug}`}>\n                    Done!\n                  </Link>\n                ) : (\n                  this.linkToIdx({\n                    idx: idx + 1,\n                    text: 'Next',\n                    className: 'button is-primary',\n                  })\n                )}\n              </div>\n            </div>\n          </div>\n        </section>\n      </Layout>\n    )\n  }\n}\n\nFlashcardScene.propTypes = {\n  slug: PropTypes.string.isRequired,\n  guess: PropTypes.string.isRequired,\n  deck: PropTypes.object.isRequired,\n  search: PropTypes.string.isRequired,\n}\n\nexport default FlashcardScene\n"],"sourceRoot":""}