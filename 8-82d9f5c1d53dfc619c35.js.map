{"version":3,"sources":["webpack:///./node_modules/mux.js/lib/utils/stream.js","webpack:///./node_modules/mux.js/lib/m2ts/stream-types.js","webpack:///./node_modules/global/window.js","webpack:///./node_modules/mux.js/lib/mp4/probe.js","webpack:///./node_modules/mux.js/lib/mp4/transmuxer.js","webpack:///./node_modules/url-toolkit/src/url-toolkit.js","webpack:///./node_modules/mux.js/lib/mp4/mp4-generator.js","webpack:///./node_modules/mux.js/lib/m2ts/caption-stream.js","webpack:///./node_modules/mux.js/lib/tools/caption-packet-parser.js","webpack:///./node_modules/mux.js/lib/m2ts/timestamp-rollover-stream.js","webpack:///./node_modules/global/document.js","webpack:///./node_modules/tsml/tsml.js","webpack:///./node_modules/xhr/index.js","webpack:///./node_modules/is-function/index.js","webpack:///./node_modules/parse-headers/parse-headers.js","webpack:///./node_modules/trim/index.js","webpack:///./node_modules/for-each/index.js","webpack:///./node_modules/is-callable/index.js","webpack:///./node_modules/xtend/immutable.js","webpack:///./node_modules/videojs-vtt.js/lib/browser-index.js","webpack:///./node_modules/videojs-vtt.js/lib/vtt.js","webpack:///./node_modules/videojs-vtt.js/lib/vttcue.js","webpack:///./node_modules/videojs-vtt.js/lib/vttregion.js","webpack:///./node_modules/safe-json-parse/tuple.js","webpack:///./node_modules/mux.js/lib/utils/bin.js","webpack:///./node_modules/mux.js/lib/mp4/index.js","webpack:///./node_modules/mux.js/lib/mp4/frame-utils.js","webpack:///./node_modules/mux.js/lib/mp4/track-decode-info.js","webpack:///./node_modules/mux.js/lib/m2ts/m2ts.js","webpack:///./node_modules/mux.js/lib/m2ts/metadata-stream.js","webpack:///./node_modules/mux.js/lib/codecs/adts.js","webpack:///./node_modules/mux.js/lib/codecs/h264.js","webpack:///./node_modules/mux.js/lib/utils/exp-golomb.js","webpack:///./node_modules/mux.js/lib/aac/index.js","webpack:///./node_modules/mux.js/lib/data/silence.js","webpack:///./node_modules/mux.js/lib/utils/clock.js","webpack:///./node_modules/mux.js/lib/mp4/caption-parser.js","webpack:///./node_modules/mux.js/lib/tools/mp4-inspector.js","webpack:///./node_modules/mux.js/lib/tools/ts-inspector.js","webpack:///./node_modules/mux.js/lib/m2ts/probe.js","webpack:///./node_modules/mux.js/lib/aac/probe.js","webpack:///./node_modules/m3u8-parser/dist/m3u8-parser.es.js","webpack:///./node_modules/mpd-parser/dist/mpd-parser.es.js","webpack:///./node_modules/pkcs7/dist/pkcs7.es.js","webpack:///./node_modules/aes-decrypter/dist/aes-decrypter.es.js","webpack:///./node_modules/video.js/dist/video.es.js"],"names":["Stream","this","init","listeners","on","type","listener","concat","off","index","indexOf","slice","splice","trigger","callbacks","i","length","args","arguments","call","push","apply","dispose","prototype","pipe","destination","data","flushSource","flush","module","exports","H264_STREAM_TYPE","ADTS_STREAM_TYPE","METADATA_STREAM_TYPE","global","win","window","self","findBox","parseType","timescale","startTime","getVideoTrackIds","toUnsigned","__webpack_require__","path","size","end","subresults","results","byteLength","subarray","buffer","result","String","fromCharCode","reduce","trak","tkhd","version","id","mdhd","fragment","trafs","baseTimes","map","traf","tfhd","scale","tfdt","Math","pow","Infinity","min","isFinite","traks","videoTrackIds","forEach","hdlrs","tkhds","hdlr","view","trackId","handlerType","DataView","byteOffset","getUint8","getUint32","VideoSegmentStream","AudioSegmentStream","Transmuxer","CoalesceStream","isLikelyAacData","arrayEquals","sumFrameByteLengths","mp4","frameUtils","trackDecodeInfo","m2ts","AdtsStream","H264Stream","AacStream","coneOfSilence","clock","AUDIO_PROPERTIES","VIDEO_PROPERTIES","charCodeAt","a","b","array","sum","track","options","adtsFrames","sequenceNumber","earliestAllowedDts","audioAppendStartTs","videoBaseMediaDecodeTime","collectDtsInfo","prop","setEarliestDts","earliestDts","timelineStartInfo","baseMediaDecodeTime","setVideoBaseMediaDecodeTime","setAudioAppendStart","timestamp","frames","moof","mdat","boxes","trimAdtsFramesByEarliestDts_","calculateTrackBaseMediaDecodeTime","keepOriginalTimestamps","prefixWithSilence_","samples","generateSampleTable_","concatenateFrameData_","Uint8Array","set","clearDtsInfo","baseMediaDecodeTimeTs","frameDuration","silentFrame","audioGapDuration","audioFillFrameCount","audioFillDuration","audioTsToVideoTs","samplerate","ceil","max","floor","ONE_SECOND_IN_TS","videoTsToAudioTs","minSegmentDts","filter","currentFrame","dts","minSegmentPts","duration","dataOffset","config","pps","nalUnits","gopsToAlignWith","minPTS","gopCache_","nalUnit","nalUnitType","sps","gopForFusion","gops","shift","resetStream_","groupNalsIntoFrames","groupFramesIntoGops","keyFrame","getGopForFusion_","unshift","nalCount","pts","extendFirstKeyFrame","alignedGops","alignGopsAtEnd","alignGopsAtEnd_","alignGopsAtStart_","gop","pop","generateSampleTable","concatenateNalData","undefined","dtsDistance","nearestGopObj","currentGop","currentGopObj","nearestDistance","alignIndex","gopIndex","align","alignEndIndex","matchFound","trimIndex","metadata","total","alignGopsWith","newGopsToAlignWith","metadataStream","numberOfTracks","remux","remuxTracks","pendingTracks","videoTrack","pendingBoxes","pendingCaptions","pendingMetadata","pendingBytes","emittedTracks","output","text","audioTrack","caption","id3","initSegment","offset","event","captions","captionStreams","info","timelineStartPts","startPts","endTime","endPts","stream","cueTime","dispatchType","hasFlushed","transmuxPipeline_","setupAacPipeline","pipeline","MetadataStream","aacStream","audioTimestampRolloverStream","TimestampRolloverStream","timedMetadataTimestampRolloverStream","adtsStream","coalesceStream","headOfPipeline","frame","setTimestamp","timeStamp","audioSegmentStream","codec","bind","setupTsPipeline","packetStream","TransportPacketStream","parseStream","TransportParseStream","elementaryStream","ElementaryStream","videoTimestampRolloverStream","h264Stream","captionStream","CaptionStream","tracks","videoSegmentStream","setBaseMediaDecodeTime","discontinuity","reset","isAac","resetCaptions","URL_REGEX","FIRST_SEGMENT_REGEX","SLASH_DOT_REGEX","SLASH_DOT_DOT_REGEX","URLToolkit","buildAbsoluteURL","baseURL","relativeURL","opts","trim","alwaysNormalize","basePartsForNormalise","parseURL","Error","normalizePath","buildURLFromParts","relativeParts","scheme","baseParts","netLoc","pathParts","exec","builtParts","params","query","baseURLPath","newPath","substring","lastIndexOf","url","parts","split","reverse","join","replace","box","dinf","esds","ftyp","mfhd","minf","moov","mvex","mvhd","mdia","sdtp","stbl","stsd","trex","trun","types","MAJOR_BRAND","MINOR_VERSION","AVC1_BRAND","VIDEO_HDLR","AUDIO_HDLR","HDLR_TYPES","VMHD","SMHD","DREF","STCO","STSC","STSZ","STTS","videoSample","audioSample","audioTrun","videoTrun","trunHeader","UINT32_MAX","avc1","avcC","btrt","dref","mp4a","smhd","stco","stsc","stsz","stts","styp","vmhd","hasOwnProperty","video","audio","payload","setUint32","audioobjecttype","samplingfrequencyindex","channelcount","trackFragments","bytes","flags","dependsOn","isDependedOn","sequenceParameterSets","pictureParameterSets","Array","width","height","profileIdc","profileCompatibility","levelIdc","samplesize","trackFragmentHeader","trackFragmentDecodeTime","trackFragmentRun","sampleDependencyTable","upperWordBaseMediaDecodeTime","lowerWordBaseMediaDecodeTime","durationPresent","sizePresent","flagsPresent","compositionTimeOffset","sample","isLeading","hasRedundancy","paddingValue","isNonSyncSample","degradationPriority","fileType","movie","cea708Parser","captionPackets_","ccStreams_","Cea608Stream","cc","sei","userData","newCaptionPackets","parseSei","escapedRBSP","payloadType","USER_DATA_REGISTERED_ITU_T_T35","parseUserData","latestDts_","ignoreNextEqualDts_","numSameDts_","parseCaptionPackets","elem","idx","presortIndex","sort","packet","dispatchCea608Packet","activeCea608Channel_","ccStream","setsChannel1Active","setsChannel2Active","ccData","CHARACTER_TRANSLATION","42","92","94","95","96","123","124","125","126","127","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","544","545","546","547","548","549","550","551","552","553","554","555","556","557","558","559","560","561","562","563","564","565","566","567","568","569","570","571","572","573","574","575","800","801","802","803","804","805","806","807","808","809","810","811","812","813","814","815","816","817","818","819","820","821","822","823","824","825","826","827","828","829","830","831","getCharFromCode","code","ROWS","createDisplayBuffer","BOTTOM_ROW","field","dataChannel","field_","dataChannel_","name_","setConstants","swap","char0","char1","lastControlCode_","PADDING_","RESUME_CAPTION_LOADING_","mode_","END_OF_CAPTION_","clearFormatting","flushDisplayed","displayed_","nonDisplayed_","startPts_","ROLL_UP_2_ROWS_","rollUpRows_","setRollUp","ROLL_UP_3_ROWS_","ROLL_UP_4_ROWS_","CARRIAGE_RETURN_","shiftRowsUp_","BACKSPACE_","row_","ERASE_DISPLAYED_MEMORY_","ERASE_NON_DISPLAYED_MEMORY_","RESUME_DIRECT_CAPTIONING_","isSpecialCharacter","column_","isExtCharacter","isMidRowCode","addFormatting","isOffsetControlCode","isPAC","row","formatting_","isColorPAC","isNormalChar","content","topRow_","BASE_","EXT_","CONTROL_","OFFSET_","char","newBaseRow","format","popOn","baseRow","rollUp","paintOn","payloadSize","count","discardEmulationPreventionBytes","newLength","newData","emulationPreventionBytesPositions","sourceIndex","handleRollover","value","reference","direction","abs","lastDTS","referenceDTS","type_","doccy","topLevel","minDoc","document","clean","s","sa","isFunction","parseHeaders","xtend","initParams","uri","callback","createXHR","_createXHR","called","err","response","body","errorFunc","evt","clearTimeout","timeoutTimer","statusCode","failureResponse","loadFunc","aborted","status","useXDR","xhr","responseText","responseType","responseXML","firefoxBugTakenEffect","documentElement","nodeName","getXml","isJson","JSON","parse","e","getBody","method","headers","rawRequest","getAllResponseHeaders","key","cors","XDomainRequest","XMLHttpRequest","sync","json","stringify","onreadystatechange","readyState","setTimeout","onload","onerror","onprogress","onabort","ontimeout","open","username","password","withCredentials","timeout","abort","setRequestHeader","obj","isEmpty","beforeSend","send","iterator","forEachArray","toUpperCase","fn","string","toString","alert","confirm","prompt","Object","arg","toLowerCase","str","left","right","isCallable","toStr","list","thisArg","TypeError","receiver","len","charAt","forEachString","object","k","forEachObject","fnToStr","Function","constructorRegex","isES6ClassFn","fnStr","test","hasToStringTag","Symbol","toStringTag","tryFunctionObject","strClass","target","source","vttjs","WebVTT","VTTCue","VTTRegion","cueShim","regionShim","nativeVTTCue","nativeVTTRegion","shim","restore","_objCreate","create","F","o","ParsingError","errorData","message","name","parseTimeStamp","input","computeSeconds","h","m","f","match","Settings","values","parseOptions","keyValueDelim","groupDelim","groups","kv","parseCue","cue","regionList","oInput","consumeTimeStamp","ts","Errors","BadTimeStamp","skipWhitespace","substr","settings","v","region","alt","vals","vals0","integer","percent","get","vertical","line","lineAlign","snapToLines","position","start","middle","positionAlign","consumeCueSettings","constructor","BadSignature","dflt","defaultKey","has","n","parseInt","parseFloat","ESCAPE","&amp;","&lt;","&gt;","&lrm;","&rlm;","&nbsp;","TAG_NAME","c","u","ruby","rt","lang","TAG_ANNOTATION","NEEDS_PARENT","parseContent","nextToken","unescape1","unescape","shouldAdd","current","element","localName","createElement","annotation","tagName","t","rootDiv","tagStack","appendChild","createTextNode","parentNode","node","createProcessingInstruction","className","strongRTLRanges","isStrongRTLChar","charCode","currentRange","StyleBox","CueStyleBox","styleOptions","cueDiv","styles","color","backgroundColor","top","bottom","display","writingMode","unicodeBidi","applyStyles","div","nodeStack","childNodes","pushNodes","nextTextNode","textContent","innerText","determineBidi","textAlign","font","whiteSpace","textPos","formatStyle","move","BoxPosition","lh","offsetHeight","offsetWidth","offsetTop","rects","getClientRects","getBoundingClientRect","lineHeight","moveBoxToLinePosition","styleBox","containerBox","boxPositions","boxPosition","linePos","textTrackList","mediaElement","trackList","mode","computeLinePos","axis","step","round","maxPosition","initialAxis","calculatedPercentage","bestPosition","specifiedPosition","percentage","overlapsOppositeAxis","within","overlapsAny","p","intersectPercentage","findBestPosition","toCSSCompatValues","style","val","unit","toMove","overlaps","b2","container","getSimpleBoxPosition","StringDecoder","decode","decodeURIComponent","encodeURIComponent","convertCueToDOMTree","cuetext","processCues","cues","overlay","firstChild","removeChild","paddedOverlay","margin","hasBeenReset","displayState","shouldCompute","Parser","decoder","state","TextDecoder","reportOrThrowError","onparsingerror","collectNextLine","pos","parseHeader","ontimestampmap","MPEGTS","LOCAL","xy","anchor","lines","regionAnchorX","regionAnchorY","viewportAnchorX","viewportAnchorY","scroll","onregion","parseRegion","alreadyCollectedLine","hasSubstring","oncue","onflush","autoKeyword","directionSetting","","lr","rl","alignSetting","findAlignSetting","_id","_pauseOnExit","_startTime","_endTime","_text","_region","_vertical","_snapToLines","_line","_lineAlign","_position","_positionAlign","_size","_align","defineProperties","enumerable","pauseOnExit","setting","findDirectionSetting","SyntaxError","getCueAsHTML","scrollSetting","up","isValidPercentValue","_width","_lines","_regionAnchorX","_regionAnchorY","_viewportAnchorX","_viewportAnchorY","_scroll","findScrollSetting","reviver","error","generator","probe","CaptionParser","sampleForFrame","currentNal","baseDataOffset","j","nalsByteLength","numberOfNals","maxSegmentDts","maxSegmentPts","StreamTypes","m2tsStreamTypes","bytesInBuffer","everything","startIndex","endIndex","parsePsi","parsePat","parsePmt","packetsWaitingForPmt","programMapTable","psi","payloadUnitStartIndicator","pat","section_number","last_section_number","pmtPid","pmt","tableEnd","timed-metadata","streamType","pid","processPes_","STREAM_TYPES","h264","adts","timedMetadata","flushStream","forceFlush","packetFlushable","packetData","pes","ptsDtsFlags","packetLength","dataAlignmentIndicator","PAT_PID","MP2T_PACKET_LENGTH","percentEncode","parseUtf8","parseSyncSafeInteger","tagParsers","TXXX","tag","description","WXXX","PRIV","owner","privateData","debug","descriptor","tagSize","bufferSize","chunk","frameStart","frameSize","console","log","d","ADTS_SAMPLING_FREQUENCIES","frameLength","protectionSkipBytes","frameEnd","oldBuffer","sampleCount","adtsFrameDuration","frameNum","NalByteStream","PROFILES_WITH_OPTIONAL_SPS_DATA","ExpGolomb","syncPoint","swapBuffer","100","110","122","244","44","83","86","118","128","138","139","134","currentPts","currentDts","readSequenceParameterSet","skipScalingList","nalByteStream","expGolombDecoder","lastScale","nextScale","readExpGolomb","chromaFormatIdc","picOrderCntType","numRefFramesInPicOrderCntCycle","picWidthInMbsMinus1","picHeightInMapUnitsMinus1","frameMbsOnlyFlag","scalingListCount","sarRatio","frameCropLeftOffset","frameCropRightOffset","frameCropTopOffset","frameCropBottomOffset","sarScale","readUnsignedByte","skipUnsignedExpGolomb","readUnsignedExpGolomb","skipBits","readBoolean","skipExpGolomb","readBits","workingData","workingBytesAvailable","workingWord","workingBitsAvailable","bitsAvailable","loadWord","workingBytes","availableBytes","skipBytes","bits","valu","skipLeadingZeros","leadingZeroCount","clz","parseId3TagSize","header","byteIndex","returnSize","parseAdtsSize","lowThree","bytesLeft","tempLength","metaTable","highPrefix","lowPrefix","zeroFill","96000","88200","64000","48000","44100","32000","24000","16000","12000","11025","8000","keys","arr","part","secondsToVideoTs","secondsToAudioTs","videoTsToSeconds","audioTsToSeconds","seconds","sampleRate","inspect","mapToSample","approximateOffset","parseCaptionNals","segment","videoTrackId","mdats","captionNals","mdatTrafPairs","matchingTraf","pair","seiNals","headerInfo","parseTfhd","parseTfdt","truns","avcStream","seiNal","lastMatchedSample","avcView","matchingSample","findSeiNals","defaultSampleDuration","defaultSampleSize","allSamples","parseTrun","parseSamples","segmentCache","parsedCaptions","isInitialized","isNewInit","timescales","parsedData","cachedSegment","parseEmbeddedCaptions","pushNals","nals","nal","clearParsedCaptions","resetCaptionStream","clearAllCaptions","inspectMp4","textifyMp4","parseMp4Date","Date","parseSampleFlags","dataReferenceIndex","getUint16","horizresolution","vertresolution","frameCount","depth","numOfPictureParameterSets","nalSize","configurationVersion","avcProfileIndication","avcLevelIndication","lengthSizeMinusOne","numOfSequenceParameterSets","bufferSizeDB","maxBitrate","avgBitrate","esId","streamPriority","decoderConfig","objectProfileIndication","decoderConfigDescriptor","audioObjectType","samplingFrequencyIndex","channelConfiguration","majorBrand","minorVersion","compatibleBrands","dataReferences","escape","nalParse","language","creationTime","modificationTime","streamDescriptor","rate","volume","matrix","Uint32Array","nextTrackId","pdin","initialDelay","sidx","references","referenceId","earliestPresentationTime","firstOffset","referenceCount","referenceType","referencedSize","subsegmentDuration","startsWithSap","sapType","sapDeltaTime","balance","chunkOffsets","entryCount","sampleToChunks","firstChunk","samplesPerChunk","sampleDescriptionIndex","sampleDescriptions","sampleSize","entries","timeToSamples","sampleDelta","baseDataOffsetPresent","sampleDescriptionIndexPresent","defaultSampleDurationPresent","defaultSampleSizePresent","defaultSampleFlagsPresent","durationIsEmpty","defaultBaseIsMoof","defaultSampleFlags","baseDataOffsetIsMoof","layer","alternateGroup","defaultSampleDescriptionIndex","sampleDependsOn","sampleIsDependedOn","sampleHasRedundancy","samplePaddingValue","sampleIsDifferenceSample","sampleDegradationPriority","dataOffsetPresent","firstSampleFlagsPresent","sampleDurationPresent","sampleSizePresent","sampleFlagsPresent","sampleCompositionTimeOffsetPresent","getInt32","url ","graphicsmode","opcolor","Uint16Array","ab","ArrayBuffer","z","inspectedMp4","indent","prefix","byte","textify","parseHdlr","aac","parseAudioPes_","pesType","pusi","parsed","endLoop","parsePesType","table","parsePayloadUnitStartIndicator","parsePesTime","parseVideoPes_","firstKeyFrame","videoPacketContainsKeyFrame","inspectTs_","parsePsi_","baseTimestamp","audioCount","parseAacTimestamp","parseSampleRate","audioTimescale","inspectAac_","segmentInfo","audioBaseTimestamp","dtsTime","ptsTime","videoBaseTimestamp","adjustTimestamp_","parsePid","parseAdaptionField","parseNalUnitType","payloadOffset","frameBuffer","frameI","frameSyncPoint","foundKeyFrame","classCallCheck","instance","Constructor","_extends","assign","inherits","subClass","superClass","writable","configurable","setPrototypeOf","__proto__","possibleConstructorReturn","ReferenceError","LineStream","_Stream","_this","nextNewline","parseAttributes","attributes","attrs","RegExp","attr","ParseStream","customParsers","tagType","title","number","playlistType","allowed","URI","BYTERANGE","_attributes$BYTERANGE","byterange","RESOLUTION","resolution","BANDWIDTH","dateTimeString","dateTimeObject","IV","PRECISE","addParser","_ref","_this2","expression","customType","dataParser","lineStream","uris","currentUri","currentMap","_key","defaultMediaGroups","AUDIO","VIDEO","CLOSED-CAPTIONS","SUBTITLES","currentTimeline","manifest","allowCache","discontinuityStarts","segments","entry","mediaGroup","rendition","allow-cache","endlist","endList","inf","mediaSequence","discontinuitySequence","METHOD","iv","media-sequence","discontinuity-sequence","playlist-type","playlist","stream-inf","playlists","mediaGroups","media","TYPE","NAME","mediaGroupType","default","DEFAULT","autoselect","AUTOSELECT","LANGUAGE","instreamId","CHARACTERISTICS","characteristics","FORCED","forced","program-date-time","targetduration","targetDuration","totalduration","totalDuration","isNaN","timeOffset","precise","cue-out","cueOut","cue-out-cont","cueOutCont","cue-in","cueIn","timeline","comment","custom","formatVideoPlaylist","_ref3","_attributes3","CODECS","codecs","bandwidth","periodIndex","resolvedUri","contentProtection","_typeof","isObject","merge","_len","objects","isArray","mpd_parser_es_resolveUrl","baseUrl","relativeUrl","url_toolkit_default","window_default","location","href","urlTypeToSegment","_ref$baseUrl","_ref$source","_ref$range","range","ranges","startRange","endRange","getLiveRValue","time","NOW","clientOffset","availabilityStartTime","_attributes$timescale","_attributes$start","_attributes$minimumUp","minimumUpdatePeriod","periodDuration","parseByTimeline","segmentTimeline","_attributes$type","_attributes$minimumUp2","_attributes$media","sourceDuration","_attributes$timescale2","_attributes$startNumb","startNumber","sIndex","S","repeat","r","segmentTime","nextS","flatten","lists","x","y","from","segmentRange","static","dynamic","_attributes$timeShift","timeShiftBufferDepth","now","periodStartWC","segmentCount","availableStart","availableEnd","parseByDuration","_attributes$timescale4","_segmentRange$type","_attributes$timescale3","toSegments","identifierPattern","constructTemplateUrl","identifier","identifierReplacement","segmentsFromTemplate","templateValues","RepresentationID","Bandwidth","_attributes$initializ","initialization","sourceURL","mapSegment","parseTemplateInfo","Number","Time","mpd_parser_es_errors","segmentsFromList","_attributes$segmentUr","segmentUrls","segmentUrlMap","segmentUrlObject","segmentUrl","mediaRange","SegmentURLToSegmentObject","segmentTimeInfo","segmentsFromBase","_attributes$indexRang","indexRange","generateSegments","segmentAttributes","segmentsFn","template","base","_segmentAttributes","_segmentAttributes$ti","findChildren","getContent","parseDuration","_match$slice","year","month","day","hour","minute","second","parsers","mediaPresentationDuration","parsedValue","mpd_parser_es_parseAttributes","el","parseFn","keySystemsMap","urn:uuid:1077efec-c0b2-4d02-ace3-3c1e52e2fb4b","urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed","urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95","urn:uuid:f239e769-efa3-4850-9c16-a903c6932efb","buildBaseUrls","referenceUrls","baseUrlElements","baseUrlElement","getSegmentInformation","adaptationSet","segmentTemplate","segmentList","segmentBase","segmentTimelineParentNode","segmentInitializationParentNode","segmentInitialization","generateKeySystemInformation","contentProtectionNodes","acc","keySystem","schemeIdUri","psshNode","pssh","psshBuffer","b64Text","decodedString","atob","decodeB64ToUint8Array","toRepresentations","periodAttributes","periodBaseUrls","periodSegmentInfo","adaptationSetAttributes","adaptationSetBaseUrls","role","roleAttributes","representations","adaptationSetSegmentInfo","representation","repBaseUrlElements","repBaseUrls","representationSegmentInfo","inheritBaseUrls","inheritAttributes","mpd","_options$manifestUri","manifestUri","_options$NOW","_options$clientOffset","periods","mpdAttributes","mpdBaseUrls","period","periodAtt","adaptationSets","toAdaptationSets","mpd_parser_es_stringToMpdXml","manifestString","xml","DOMParser","parseFromString","getElementsByTagName","dashPlaylists","_mediaGroups","_dashPlaylists$0$attr","_dashPlaylists$0$attr2","videoPlaylists","_ref4","mimeType","contentType","audioPlaylists","_ref5","vttPlaylists","_ref6","master","label","_attributes","formatAudioPlaylist","subs","_ref2","_attributes2","organizeVttPlaylists","toM3u8","parseUTCTiming","UTCTimingNode","parseUTCTimingScheme","aes_decrypter_es_classCallCheck","createClass","props","defineProperty","protoProps","staticProps","aes_decrypter_es_possibleConstructorReturn","precompute","tables","encTable","decTable","sbox","sboxInv","xInv","th","x2","x4","tEnc","tDec","aesTables","AES","_tables","tmp","encKey","decKey","keyLen","rcon","decrypt","encrypted0","encrypted1","encrypted2","encrypted3","out","a2","c2","nInnerRounds","kIndex","table0","table1","table2","table3","aes_decrypter_es_Stream","_length","_i","AsyncStream","jobs","delay","timeout_","aes_decrypter_es_inherits","processJob_","job","ntoh","word","encrypted","initVector","encrypted32","Int32Array","decipher","decrypted","decrypted32","init0","init1","init2","init3","wordIx","aes_decrypter_es_Decrypter","Decrypter","done","STEP","asyncStream_","decryptChunk_","padded","video_es_version","level","video_es_history","video_es_logByType","lvl","levels","lvlRegExp","all","warn","history","clear","disable","enable","_len2","_key2","_len3","_key3","_len4","_key4","log$1","video_es_typeof","video_es_classCallCheck","video_es_inherits","video_es_possibleConstructorReturn","taggedTemplateLiteralLoose","strings","raw","video_es_toString","video_es_isObject","each","video_es_assign","sources","isPlain","video_es_computedStyle","getComputedStyle","cs","_templateObject","isNonBlankString","throwIfWhitespace","isReal","document_default","isEl","nodeType","isInFrame","parent","createQuerier","selector","context","querySelector","ctx","createEl","properties","getOwnPropertyNames","propName","tsml_default","setAttribute","attrName","appendContent","prependTo","child","insertBefore","hasClass","classToCheck","classList","contains","addClass","classToAdd","add","removeClass","classToRemove","remove","toggleClass","classToToggle","predicate","setAttributes","attrValue","removeAttribute","getAttributes","knownBooleans","attrVal","getAttribute","attribute","blockTextSelection","focus","onselectstart","unblockTextSelection","rect","findPosition","docEl","clientLeft","scrollLeft","pageXOffset","clientTop","scrollTop","pageYOffset","getPointerPosition","boxW","boxH","boxY","boxX","pageY","pageX","changedTouches","isTextNode","emptyEl","normalizeContent","insertContent","isSingleLeftClick","button","buttons","$","$$","Dom","freeze","_guid","newGUID","elData","elIdAttr","getTime","getData","hasData","removeData","_cleanUpEvents","handlers","removeEventListener","dispatcher","detachEvent","disabled","_handleMultipleEvents","fixEvent","returnTrue","returnFalse","isPropagationStopped","old","preventDefault","srcElement","relatedTarget","fromElement","toElement","returnValue","defaultPrevented","stopPropagation","cancelBubble","stopImmediatePropagation","isImmediatePropagationStopped","clientX","doc","clientY","which","keyCode","_supportsPassive","addEventListener","passiveEvents","guid","hash","handlersCopy","passive","attachEvent","removeType","elemData","ownerDocument","bubbles","targetData","one","func","Events","_windowLoaded","videojs","video_es_autoSetup","autoSetup","vids","audios","divs","mediaEls","mediaEl","autoSetupTimeout","player","wait","vjs","video_es_createStyleElement","setTextContent","styleSheet","cssText","uid","bound","throttle","last","video_es_debounce","immediate","debounced","_later","cancel","EventTarget","allowedEvents_","ael","dispatchEvent","EVENT_MAP","queueTrigger","Map","oldTimeout","delete","isEvented","eventBusEl_","every","isValidEventType","validateTarget","validateEventType","validateListener","normalizeListenArgs","isTargetingSelf","listen","EventedMixin","_normalizeListenArgs","removeListenerOnDispose","removeRemoverOnTargetDispose","_normalizeListenArgs2","wrapper","largs","targetOrType","typeOrListener","evented","eventBusKey","StatefulMixin","setState","stateUpdates","changes","to","stateful","defaultState","handleStateChanged","toTitleCase","mergeOptions","video_es_Component","Component","ready","play","player_","options_","id_","el_","children_","childIndex_","childNameIndex_","initChildren","reportTouchActivity","enableTouchActivity","localize","tokens","defaultValue","languages","primaryCode","primaryLang","localizedString","ret","contentEl","contentEl_","children","getChildById","getChild","addChild","component","componentName","componentClassName","componentClass","ComponentClass","getComponent","refNode","childFound","compEl","parentOptions","workingChildren","Tech","some","wchild","isTech","playerOptions","newChild","buildCSSClass","isReady_","readyQueue_","triggerReady","readyQueue","show","hide","lockShowing","unlockShowing","num","skipListeners","dimension","dimensions","widthOrHeight","pxIndex","currentDimension","computedWidthOrHeight","computedStyle","getPropertyValue","rule","currentDimensions","currentWidth","currentHeight","blur","emitTapEvents","touchStart","firstTouch","couldBeTap","touches","xdiff","ydiff","sqrt","noTap","reportUserActivity","report","touchHolding","clearInterval","setInterval","touchEnd","timeoutId","disposeFn","interval","_this3","intervalId","requestAnimationFrame","_this4","supportsRaf_","cancelAnimationFrame","registerComponent","ComponentToRegister","isComp","isPrototypeOf","reason","components_","Player","players","playerNames","pname","Boolean","USER_AGENT","navigator","userAgent","webkitVersionMap","appleWebkitVersion","IS_IPAD","IS_IPHONE","IS_IPOD","IS_IOS","IOS_VERSION","IS_ANDROID","ANDROID_VERSION","major","minor","IS_NATIVE_ANDROID","IS_FIREFOX","IS_EDGE","IS_CHROME","CHROME_VERSION","IE_VERSION","IS_SAFARI","IS_ANY_SAFARI","TOUCH_ENABLED","maxTouchPoints","DocumentTouch","browser","getRange","fnName","valueIndex","rangeIndex","maxIndex","rangeCheck","createTimeRangesObj","createTimeRanges","bufferedPercent","buffered","bufferedDuration","FullscreenApi","apiMap","specApi","browserApi","video_es_i","dist_video_es_i","MediaError","defaultMessages","errorTypes","1","2","3","4","5","errNum","isPromise","then","silencePromise","trackToJson_","textTrackConverter","tech","trackEls","trackObjs","trackEl","src","textTracks","addedTrack","addRemoteTextTrack","addCue","MODAL_CLASS_NAME","video_es_ModalDialog","_Component","ModalDialog","opened_","hasBeenOpened_","hasBeenFilled_","closeable","uncloseable","descEl_","tabIndex","aria-describedby","aria-hidden","aria-label","previouslyActiveEl_","handleKeyPress","close","desc","fillAlways","fill","wasPlaying_","paused","pauseOnOpen","pause","hadControls_","controls","conditionalFocus_","opened","conditionalBlur_","temporary","closeable_","temp","controlText","fillWith","parentEl","nextSiblingEl","nextSibling","empty","closeButton","content_","activeEl","activeElement","playerEl","handleKeyDown","focusableEls","focusableEls_","focusIndex","shiftKey","allChildren","querySelectorAll","HTMLAnchorElement","HTMLAreaElement","hasAttribute","HTMLInputElement","HTMLSelectElement","HTMLTextAreaElement","HTMLButtonElement","HTMLIFrameElement","HTMLObjectElement","HTMLEmbedElement","TrackList","_EventTarget","tracks_","addTrack","removeTrack","rtrack","l","getTrackById","video_es_event","change","addtrack","removetrack","disableOthers","enabled","AudioTrackList","_TrackList","changing_","disableOthers$1","selected","VideoTrackList","TextTrackList","kind","HtmlTrackElementList","trackElements","trackElements_","addTrackElement_","trackElement","getTrackElementByTrack_","trackElement_","removeTrackElement_","TextTrackCueList","setCues_","length_","oldLength","cues_","defineProp","getCueById","VideoTrackKind","alternative","main","sign","subtitles","commentary","AudioTrackKind","descriptions","main-desc","translation","TextTrackKind","chapters","TextTrackMode","hidden","showing","Track","trackProps","_loop","video_es_parseUrl","addToBody","host","protocol","innerHTML","details","video_es_getAbsoluteURL","getFileExtension","video_es_isCrossOrigin","winLoc","urlInfo","Url","parseUrl","getAbsoluteURL","isCrossOrigin","video_es_parseCues","srcContent","parser","errors","groupCollapsed","groupEnd","video_es_loadTrack","crossOrigin","xhr_default","responseBody","loaded_","tech_","loadHandler","video_es_TextTrack","_Track","TextTrack","srclang","default_","activeCues_","activeCues","changed","timeupdateHandler","newMode","ct","currentTime","active","originalCue","originalCue_","removeCue","_removeCue","cuechange","AudioTrack","newEnabled","VideoTrack","newSelected","NONE","LOADED","HTMLTrackElement","load","LOADING","ERROR","NORMAL","ListClass","TrackClass","capitalName","getterName","privateName","REMOTE","remoteText","remoteTextEl","ALL","names","video_es_Tech","hasStarted_","featuresProgressEvents","manualProgressOn","featuresTimeupdateEvents","manualTimeUpdatesOn","nativeCaptions","nativeTextTracks","featuresNativeTextTracks","emulateTextTracks","autoRemoteTextTracks_","initTrackListeners","nativeControlsForTouch","triggerSourceset","onDurationChange","manualProgress","trackProgress","manualProgressOff","stopTrackingProgress","progressInterval","numBufferedPercent","bufferedPercent_","duration_","manualTimeUpdates","trackCurrentTime","stopTrackingCurrentTime","manualTimeUpdatesOff","currentTimeInterval","manuallyTriggered","clearTracks","removeRemoteTextTrack","cleanupAutoTextTracks","error_","played","setCurrentTime","trackListChanges","addWebVttScript_","_this5","browser_index_default","script","_this6","remoteTracks","remoteTextTracks","handleAddTrack","handleRemoveTrack","updateDisplay","textTracksChanges","addTextTrack","createTrackHelper","createRemoteTextTrack","_this7","manualCleanup","htmlTrackElement","remoteTextTrackEls","getVideoPlaybackQuality","setPoster","playsinline","setPlaysinline","overrideNativeAudioTracks","overrideNativeVideoTracks","canPlayType","canPlaySource","srcObj","registerTech","techs_","defaultTechOrder_","getTech","featuresVolumeControl","featuresMuteControl","featuresFullscreenResize","featuresPlaybackRate","featuresSourceset","withSourceHandlers","_Tech","registerSourceHandler","handler","sourceHandlers","can","selectSourceHandler","canHandleSource","sh","originalFn","sourceHandler_","setSource","nativeSourceHandler","disposeSourceHandler","currentSource_","handleSource","middlewares","middlewareInstances","TERMINATOR","next","setSourceHelper","middleware","lastRun","mwFactory","mwrest","mw","mws","_mws$i","mwf","mwi","getOrCreateFactory","_src","mediate","callMethod","middlewareValue","middlewareIterator","terminated","executeRight","allowedGetters","seekable","allowedSetters","allowedMediators","MimetypesKind","opus","ogv","mov","m4v","mkv","mp3","oga","m3u8","getMimetype","ext","fixSource","mimetype","MediaLoader","techOrder","techName","isSupported","loadTech_","video_es_ClickableComponent","ClickableComponent","tabIndex_","createControlTextEl","controlTextEl_","aria-live","controlText_","localizedText","nonIconControl","enabled_","handleClick","handleFocus","handleBlur","PosterImage","_ClickableComponent","update","poster","setSrc","backgroundImage","fontMap","monospace","sansSerif","serif","monospaceSansSerif","monospaceSerif","proportionalSansSerif","proportionalSerif","casual","smallcaps","constructColor","opacity","hex","tryUpdateStyle","video_es_TextTrackDisplay","TextTrackDisplay","toggleDisplay","preselectTrack","modes","userPref","cache_","selectedLanguage","firstDesc","firstCaptions","preferredTrack","aria-atomic","clearDisplay","descriptionsTrack","captionsSubtitlesTrack","updateForTrack","textTrackSettings","overrides","getValues","textOpacity","backgroundOpacity","windowColor","windowOpacity","edgeStyle","textShadow","fontPercent","fontSize","fontFamily","fontVariant","LoadingSpinner","isAudio","playerType","dir","Button","BigPlayButton","_Button","mouseused_","handleMouseDown","playPromise","cb","playToggle","playFocus","CloseButton","PlayToggle","handlePlay","handlePause","handleEnded","handleSeeked","defaultImplementation","guide","gm","gh","implementation","formatTime","video_es_TimeDisplay","TimeDisplay","throttledUpdateContent","updateContent","plainName","labelText_","updateTextNode_","textNode_","formattedTime_","formatTime_","updateFormattedTime_","formattedTime","CurrentTimeDisplay","_TimeDisplay","scrubbing","getCache","DurationDisplay","TimeDivider","RemainingTimeDisplay","remainingTimeDisplay","remainingTime","LiveDisplay","updateShowing","Slider","bar","barName","playerEvent","handleMouseMove","handleMouseUp","aria-valuenow","aria-valuemin","aria-valuemax","progress","getPercent","toFixed","calculateDistance","stepBack","stepForward","bool","vertical_","LoadProgressBar","partEls_","bufferedEnd","percentify","TimeTooltip","seekBarRect","seekBarPoint","tooltipRect","playerRect","seekBarPointPx","spaceLeftOfPoint","spaceRightOfPoint","pullTooltipBy","PlayProgressBar","rafId_","timeTooltip","MouseTimeDisplay","SeekBar","_Slider","setEventHandlers_","updateInterval","update_","getCurrentTime_","videoWasPlaying","newTime","mouseTimeDisplay","handleAction","ProgressControl","throttledHandleMouseSeek","handleMouseSeek","seekBar","seekBarEl","video_es_FullscreenToggle","FullscreenToggle","handleFullscreenChange","fullscreenEnabled","isFullscreen","exitFullscreen","requestFullscreen","checkVolumeSupport","VolumeLevel","VolumeBar","updateLastVolume_","updateARIAAttributes","checkMuted","muted","ariaValue","volumeAsPercentage_","volumeBeforeDrag","lastVolume_","VolumeControl","volumeBar","throttledHandleMouseMove","orientationClass","checkMuteSupport","MuteToggle","vol","lastVolume","volumeToSet","updateIcon_","updateControlText_","VolumePanel","inline","volumeControl","volumePanelState_","sliderActive_","sliderInactive_","muteToggle","Menu","menuButton_","menuButton","focusedChild_","addItem","unpressButton","contentElType","append","stepChild","item","video_es_MenuButton","MenuButton","buttonClass","handleSubmenuKeyPress","menu","createMenu","buttonPressed_","items","hideThreshold_","createItems","buildWrapperCSSClass","menuButtonClass","pressButton","TrackButton","_MenuButton","updateHandler","MenuItem","selectable","isSelected_","multiSelectable","_selected","video_es_TextTrackMenuItem","_MenuItem","TextTrackMenuItem","changeHandler","handleTracksChange","selectedLanguageChangeHandler","handleSelectedLanguageChange","onchange","Event","createEvent","initEvent","kinds","shouldBeSelected","OffTextTrackMenuItem","_TextTrackMenuItem","allHidden","TextTrackButton","_TrackButton","TrackMenuItem","label_","kinds_","kind_","ChaptersTrackMenuItem","ChaptersButton","_TextTrackButton","track_","setTrack","findChaptersTrack","updateHandler_","remoteTextTrackEl","_remoteTextTrackEl","getMenuCaption","mi","DescriptionsButton","SubtitlesButton","CaptionSettingsMenuItem","CaptionsButton","SubsCapsMenuItem","SubsCapsButton","language_","AudioTrackMenuItem","audioTracks","AudioTrackButton","PlaybackRateMenuItem","playbackRate","PlaybackRateMenuButton","updateVisibility","updateLabel","labelEl_","rates","playbackRates","currentRate","newRate","playbackRateSupported","Spacer","CustomControlSpacer","_Spacer","ControlBar","ErrorDisplay","_ModalDialog","COLOR_BLACK","COLOR_BLUE","COLOR_CYAN","COLOR_GREEN","COLOR_MAGENTA","COLOR_RED","COLOR_WHITE","COLOR_YELLOW","OPACITY_OPAQUE","OPACITY_SEMI","OPACITY_TRANS","selectConfigs","parseOptionValue","video_es_TextTrackSettings","TextTrackSettings","endDialog","setDefaults","persistTextTrackSettings","saveSettings","restoreSettings","createElSelect_","legendId","selectLabelledbyIds","optionId","createElFgColor_","createElBgColor_","createElWinColor_","createElColors_","createElFont_","createElControls_","defaultsDescription","initial","accum","selectedIndex","setValues","setSelectedOption","localStorage","getItem","setItem","removeItem","ttDisplay","controlBar","subsCapsBtn","subsCapsButton","ccBtn","captionsButton","video_es_ResizeManager","ResizeManager","RESIZE_OBSERVER_AVAILABLE","ResizeObserver","loadListener_","resizeObserver_","debouncedHandler_","resizeHandler","observe","contentWindow","unobserve","disconnect","resizeObserver","sourcesetLoad","srcUrls","innerHTMLDescriptorPolyfill","cloneNode","dummy","docFrag","createDocumentFragment","Element","getDescriptor","priority","getOwnPropertyDescriptor","firstSourceWatch","resetSourceWatch_","innerDescriptor","HTMLMediaElement","video_es_getInnerHTMLDescriptor","appendWrapper","appendFn","retval","srcDescriptorPolyfill","setupSourceset","resetSourceset_","srcDescriptor","video_es_getSrcDescriptor","oldSetAttribute","oldLoad","currentSrc","_templateObject$1","video_es_Html5","Html5","crossoriginTracks","initNetworkState_","handleLateInit_","enableSourceset","setupSourcesetHandling_","hasChildNodes","nodes","nodesLength","removeNodes","proxyNativeTracks_","restoreMetadataTracksInIOSNativePlayer_","setControls","proxyWebkitFullscreen_","disposeMediaElement","metadataTracksPreFullscreenState","takeMetadataTrackSnapshot","storedMode","restoreTrackMode","storedTrack","overrideNative_","override","lowerCaseType","eventName","proxyNativeTracksForType_","elTracks","techTracks","currentTarget","removeOldTracks","removeTracks","found","playerElIngest","movingMediaElementInDOM","clone","techId","class","playerId","preload","settingsAttrs","networkState","loadstartFired","setLoadstartFired","triggerLoadstart","eventsToTrigger","checkProgress","NaN","endFn","beginFn","webkitPresentationMode","supportsFullScreen","webkitEnterFullScreen","enterFullScreen","HAVE_METADATA","exitFullScreen","webkitExitFullScreen","resetMediaElement","videoPlaybackQuality","webkitDroppedFrameCount","webkitDecodedFrameCount","droppedVideoFrames","totalVideoFrames","performance","timing","navigationStart","TEST_VID","video_es_track","canControlVolume","canMuteVolume","canControlPlaybackRate","canOverrideAttributes","noop","supportsNativeTextTracks","supportsNativeVideoTracks","videoTracks","supportsNativeAudioTracks","featuresNativeVideoTracks","featuresNativeAudioTracks","mpegurlRE","patchCanPlayType","unpatchCanPlayType","_templateObject$2","TECH_EVENTS_RETRIGGER","TECH_EVENTS_QUEUE","canplay","canplaythrough","playing","seeked","video_es_Player","getTagSettings","closest","isPosterFromTech_","queuedCallbacks_","userActive_","tagAttributes","languagesToLower","name$$1","languages_","poster_","controls_","autoplay","scrubbing_","lastPlaybackRate","defaultPlaybackRate","playerOptionsCopy","plugins","middleware_","flexNotSupported_","majorVersion","userActive","listenForUserActivity_","handleFullscreenChange_","handleStageClick_","changingSrc_","playWaitingForReady_","playOnLoadstart_","styleEl_","playerElIngest_","divEmbed","tabindex","VIDEOJS_NO_DYNAMIC_STYLE","defaultsStyleEl","head","fluid","aspectRatio","links","linkEl","_dimension","privDimension","updateStyleEl_","parsedVal","fluid_","ratio","aspectRatio_","idClass","ratioParts","videoWidth","videoHeight","ratioMultiplier","width_","height_","_height","techEl","unloadTech_","titleTechName","camelTechName","techName_","techOptions","loop","vtt.js","canOverridePoster","techCanOverridePoster","TechClass","handleTechReady_","textTracksJson_","eventObj","seeking","handleTechLoadStart_","handleTechSourceset_","handleTechWaiting_","handleTechEnded_","handleTechSeeking_","handleTechPlay_","handleTechFirstPlay_","handleTechPause_","handleTechDurationChange_","handleTechFullscreenChange_","handleTechError_","handleTechPosterChange_","handleTechTextData_","handleTechRateChange_","usingNativeControls","techGet_","addTechControlsListeners_","safety","removeTechControlsListeners_","handleTechClick_","handleTechDoubleClick_","handleTechTouchStart_","handleTechTouchMove_","handleTechTouchEnd_","handleTechTap_","techCall_","hasStarted","manualAutoplay_","previouslyMuted","catch","promise","updateSourceCaches_","matchingSources","findMimetype","sourceElSources","sourceEls","matchingSourceEls","sourceObj","updateCache","request","queued","handleTechCanPlay_","handleTechCanPlayThrough_","handleTechPlaying_","handleTechSeeked_","starttime","userWasActive","set$1","reduceRight","get$1","PromiseClass","Promise","resolve","play_","_this8","isScrubbing","percentAsDecimal","_muted","defaultMuted","_defaultMuted","isFS","isFullscreen_","fsApi","fullscreenchange","documentFullscreenChange","fullscreenElement","enterFullWindow","exitFullWindow","isFullWindow","docOrigOverflow","overflow","fullWindowOnEscKey","selectSource","_this9","techs","findFirstPassingTechSourcePair","outerArray","innerArray","tester","outerChoice","innerChoice","finder","sourceOrder","_this10","filterSource","newsrc","srcobj","middlewareSource","src_","notSupportedMessage","setTech","str1","str2","_this11","sourceTech","currentSources","currentSource","currentType","techAutoplay","newPoster","usingNativeControls_","errorDisplay","userActivity_","mouseInProgress","lastMoveX","lastMoveY","handleActivity","screenX","screenY","inactivityTimeout","isAudio_","_ref3$track","toJSON","createModal","_this12","modal","baseOptions","tagOptions","dataSetup","_safeParseTuple","tuple_default","childName","video_es_navigator","html5","flash","userLanguage","pluginStorage","pluginExists","getPlugin","markPluginAsActive","triggerSetupEvent","before","createPluginFactory","PluginSubClass","plugin","getEventHash","Plugin","VERSION","isBasic","registerPlugin","basicPluginWrapper","createBasicPlugin","deregisterPlugin","getPlugins","getPluginVersion","BASE_PLUGIN_NAME","usingPlugin","hasPlugin","normalizeId","videojs$1","getPlayer","hooks","hookFunction","PlayerComponent","hooks_","hook","hookOnce","original","removeHook","style$1","video_es_head","getPlayers","nId","_tag","_player","getAllPlayers","comp","use","writeable","extend","subClassMethods","methods","super_","_inherits","addLanguage","_mergeOptions","createTimeRange","setFormatTime","customImplementation","resetFormatTime","dom","video_es_resolveUrl","classCallCheck$1","createClass$1","inherits$1","possibleConstructorReturn$1","slicedToArray$1","_arr","_n","_d","_e","_s","sliceIterator","mergeOptions$1","EventTarget$1","log$2","forEachMediaGroup","mediaType","groupKey","labelKey","mediaProperties","updateMaster","mergedPlaylist","updateSegments","baseUri","resolveSegmentUris","setupMediaPlaylists","resolveMediaGroupUris","refreshDelay","lastSegment","video_es_PlaylistLoader","PlaylistLoader","srcUrl","hls","getPrototypeOf","hls_","req","playlistRequestError","haveMetadata","xhr$$1","startingState","media_","mediaUpdateTimeout","stopRequest","oldRequest","mediaChange","started","isFinalRendition","intervalDuration","endSequence","expired","backward","forward","backwardDuration","forwardDuration","video_es_duration","sumDurations","durations","safeLiveIndex","distanceFromEnd","safeDistance","playlistEnd","useSafeLiveEnd","isWholeNumber","roundSignificantDigit","increment","numDecimalDigits","ceilLeastSignificantDigit","floorLeastSignificantDigit","isBlacklisted","excludeUntil","isIncompatible","isEnabled","blacklisted","isLowestEnabledRendition","currentBandwidth","MAX_VALUE","Playlist","seekableStart","seekableEnd","getMediaInfoForTime","numSegments","mediaIndex","isDisabled","isAes","isFmp4","estimateSegmentRequestTime","segmentDuration","bytesReceived","videojsXHR","mergeOptions$1$1","xhrFactory","XhrFunction","beforeRequest","Hls","newOptions","reqResponse","responseTime","roundTripTime","requestTime","responseHeaders","timedout","originalAbort","textRange","formatHexString","formatAsciiString","createTransferableMessage","transferable","isView","initSegmentId","hexDump","utils","tagDump","textRanges","filterRanges","timeRanges","findRange","findNextRange","printableRange","strArr","timeRangesToArray","timeRangesList","removeCuesFromTrack","durationOfVideo","video_es_addTextTrackData","sourceHandler","captionArray","metadataArray","Cue","WebKitDataCue","inbandTextTracks_","timestampOffset","videoDuration","mediaSource_","deprecateOldCue","metadataTrack_","cuesArray","cuesGroupedByStartTime","timeSlot","sortedStartTimes","cueGroup","nextTime","TARGET","SCRIPT_TYPE","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","URL","webkitURL","msURL","Worker","shimWorker","filename","forceFallback","objURL","createSourceObject","worker","term","terminate","revokeObjectURL","wrapTerminate","selfShim","postMessage","onmessage","isThisThread","testWorker","testArray","createObjectURL","Blob","blob","getBlob","TransmuxWorker","document$$1","_findBox","mp4Generator","toUnsigned$1","captionPacketParser","streamTypes","_MetadataStream","timestampRolloverStream","_TransportPacketStream","_TransportParseStream","_ElementaryStream","TimestampRolloverStream$1","stream$$1","_AdtsStream","m2ts_1","_H264Stream","_NalByteStream","expGolomb","_AacStream","silence","_VideoSegmentStream","_AudioSegmentStream","_Transmuxer","_CoalesceStream","ONE_SECOND_IN_TS$2","_textifyMp","transmuxer","parseType$1","parse$$1","mp4Inspector","discardEmulationPreventionBytes$1","CaptionStream$1","captionStream$$1","classCallCheck$$1","createClass$$1","MessageHandlers","initArray","typedArray","action","gopInfo","appendStart","messageHandlers","defaultCodecs","videoCodec","videoObjectTypeIndicator","audioProfile","translateLegacyCodecs","orig","profile","avcLevel","parseCodecs","codecCount","makeMimeTypeString","mimeTypesForPlaylist","containerType","getContainerType","codecInfo","mediaAttributes","getCodecs","isMuxed","isMaat","audioGroup","groupId","audioGroupId","audioType","audioProfileFromDefault","codecStrings","justAudio","justVideo","bothVideoAudio","isAudioCodec","isVideoCodec","videoBuffer","audioBuffer","audioDisabled","arity","extents","videoBuffered","audioBuffered","VirtualSourceBuffer","_videojs$EventTarget","mediaSource","timestampOffset_","pendingBuffers_","bufferUpdating_","codecs_","audioCodec_","videoCodec_","audioDisabled_","appendAudioInitSegment_","gopBuffer_","timeMapping_","safeAppend_","transmuxer_","data_","done_","appendGopInfo_","videoBuffer_","audioBuffer_","appendWindowStart","updating","sourceBuffer","inBandMetadataTrackDispatchType","createTextTracksIfNecessary","processPendingSegments_","addSourceBuffer","realBuffer_","makeWrappedSourceBuffer","nativeMediaSource_","mapping","currentTimePts","gopsSafeToAlignWith","updateGopBuffer","updatedBuffer","removeGopBuffer","sortedSegments","segmentObj","createRealSourceBuffers_","triggerUpdateend","concatAndAppendSegments_","destinationBuffer","tempBuffer","appendBuffer","originalError","video_es_HtmlMediaSource","HtmlMediaSource","property","MediaSource","activeSourceBuffers_","sourceBuffers","updateActiveSourceBuffers_","disableCombined","disableAudioOnly","onPlayerMediachange_","onHlsReset_","onHlsSegmentTimeMapping_","url_","sourcebuffer","parsedType","parameters","parameter","parseContentType","urlCount","mediaSources","video_es_open","msObjectURL","swfId","video_es_supportsNativeMediaSources","isTypeSupported","supportsNativeMediaSources","URL$1","EventTarget$1$1","mergeOptions$2","updateMaster$1","oldMaster","newMaster","playlistUpdate","group","_playlistUpdate","video_es_DashPlaylistLoader","DashPlaylistLoader","srcUrlOrPlaylist","masterPlaylistLoader","refreshXml_","refreshMedia_","masterPlaylistLoader_","masterXml_","clientOffset_","phonyUri","_phonyUri","date","masterLoaded_","syncClientServerClock_","onClientServerClockSync_","utcTiming","serverTime","parseMasterXml","updatedMaster","logger","video_es_noop","SourceUpdater","sourceBufferEmitter","callbacks_","pendingCallback_","processedAppend_","mimeType_","logger_","createSourceBuffer_","sourceBuffer_","start_","started_","onUpdateendCallback_","pendingCallback","runCallback_","queueCallback_","Config","GOAL_BUFFER_LENGTH","MAX_GOAL_BUFFER_LENGTH","GOAL_BUFFER_LENGTH_RATE","BANDWIDTH_VARIANCE","BUFFER_LOW_WATER_LINE","MAX_BUFFER_LOW_WATER_LINE","BUFFER_LOW_WATER_LINE_RATE","REQUEST_ERRORS","segmentXhrHeaders","byterangeEnd","Range","abortAll","activeXhrs","handleErrors","waitForCompletion","decrypter","doneFn","endOfAllRequests","worstError","prev","getMostImportantError","encryptedBytes","decryptionHandler","requestId","decryptSegment","handleProgress","progressFn","progressEvent","stats","loaded","firstBytesReceivedAt","mediaSegmentRequest","xhrOptions","decryptionWorker","captionParser","finishProcessingFn","keyXhr","errorObj","handleKeyResponse","initSegmentXhr","probe_default","video_es_handleInitSegmentResponse","segmentXhr","getRequestStats","fmp4Captions","handleSegmentResponse","video_es_safeGetComputedStyle","stableSort","sortFn","newArray","cmp","video_es_comparePlaylistBandwidth","leftBandwidth","rightBandwidth","detectEndOfStream","segmentIndex","appendedLastSegment","finite","video_es_SegmentLoader","SegmentLoader","throughput","roundTrip","resetStats_","hasPlayed_","hasPlayed","currentTime_","seekable_","seeking_","loaderType_","loaderType","startingMedia_","segmentMetadataTrack_","segmentMetadataTrack","goalBufferLength_","goalBufferLength","sourceType_","sourceType","inbandTextTracks","state_","checkBufferTimeout_","currentTimeline_","pendingSegment_","sourceUpdater_","xhrOptions_","activeInitSegmentId_","initSegments_","captionParser_","decrypter_","syncController_","syncController","syncPoint_","ended_","fetchAtBuffer_","newState","mediaBytesTransferred","mediaRequests","mediaRequestsAborted","mediaRequestsTimedout","mediaRequestsErrored","mediaTransferDuration","mediaSecondsLoaded","abort_","monitorBuffer_","abortRequests","_error","set$$1","storedMap","playlist_","setDateTimeMapping","couldBeginLoading_","init_","sourceBufferEmitter_","resetEverything","newPlaylist","oldPlaylist","syncInfo","oldId","mediaSequenceDiff","saveExpiredSegmentInfo","resyncLoader","_mimeType","resetLoader","monitorBufferTick_","fillBuffer_","getSyncPoint","checkBuffer_","buffered_","endOfStream","startOfSegment","loadSegment_","lastBufferedEnd","bufferedTime","getSyncSegmentCandidate_","generateSegmentInfo_","mediaSourceInfo","_mediaSourceInfo","segmentIndexArray","isSyncRequest","random","measuredBandwidth","requestTimeRemaining","timeUntilRebuffer$$1","timeUntilRebuffer","switchCandidate","duration$$1","compatiblePlaylists","enabledPlaylists","rebufferingEstimates","numRequests","rebufferingImpact","noRebufferingPlaylists","estimate","minRebufferMaxBandwidthSelector","timeSavedBySwitching","minimumTimeSaving","simpleSegment","abortRequestEarly_","trimBackBuffer_","createSimplifiedSegmentObj_","handleProgress_","segmentRequestFinished_","removeToTime","seekable$$1","safeBackBufferTrimTime","processSegmentResponse_","createCaptionsTrackIfNotExists","addCaptionData","handleSegment_","timingInfo","probeSegmentInfo","containsAudio","containsVideo","startingMedia","newSegmentMedia","illegalMediaSwitchError","blacklistDuration","timelineMapping","mappingForTimeline","initId","_segmentInfo$segment","_segmentInfo$playlist","seq","_segmentInfo$playlist2","segmentInfoString","handleUpdateEnd_","isWalkingForward","recordThroughput_","addSegmentMetadataCue_","segmentProcessingTime","segmentProcessingThroughput","uint8ToUtf8","uintArray","VTT_LINE_TERMINATORS","video_es_VTTSegmentLoader","_SegmentLoader","VTTSegmentLoader","subtitlesTrack_","combinedByteLength","combinedSegment","_track","skipEmptySegments_","timestampOffsetForTimeline","requested","parseVTTCues_","updateTimeMapping_","timelines","decodeBytesToString","timestampmap","mapData","segmentData","mappingObj","diff","firstStart","lastStart","findAdCue","mediaTime","adStartTime","adEndTime","tsprobe","ts_inspector_default","syncPointStrategies","run","datetimeToDisplayTime","lastDistance","segmentStart","distance","discontinuitySync","discontinuities","video_es_SyncController","SyncController","inspectCache_","syncPoints","runStrategies_","selectSyncPoint_","strategy","bestSyncPoint","bestDistance","bestStrategy","newDistance","lastRemovedSegment","playlistTimestamp","probeMp4Segment_","probeTsSegment_","calculateSegmentTimeMapping_","saveDiscontinuitySyncInfo_","timeInfo","segmentStartTime","segmentEndTime","accuracy","mediaIndexDiff","Decrypter$1","possibleConstructorReturn$$1","AsyncStream$$1","inherits$$1","Decrypter$$1","decrypt$$1","audioTrackKind_","stopLoaders","segmentLoader","activePlaylistLoader","startLoaders","playlistLoader","onError","segmentLoaders","mediaTypes","blacklistCurrentPlaylist","activeTrack","activeGroup","defaultTrack","onTrackChanged","setupListeners","requestOptions","byGroupId","byResolvedUri","initialize","_settings$master","_settings$mediaTypes$","groupPlaylists","variantLabel","_settings$mediaTypes$2","_settings$mediaTypes$3","setupMediaGroups","variants","onGroupChanged","_settings$segmentLoad","mainSegmentLoader","previousActiveLoader","_settings$segmentLoad2","onAudioTrackChanged","createMediaTypes","loaderStats","sumLoaderStat","stat","audioSegmentLoader_","mainSegmentLoader_","video_es_MasterPlaylistController","MasterPlaylistController","externHls","useCueTags","enableLowInitialPlaylist","seekTo","seekTo_","useCueTags_","cueTagsTrack_","requestOptions_","mediaTypes_","handleSourceOpen_","segmentLoaderSettings","setupMasterPlaylistLoaderListeners_","subtitleSegmentLoader_","setupSegmentLoaderListeners_","requestTimeout","triggerPresenceUsage_","setupSourceBuffers_","setupFirstPlay","updatedPlaylist","excludeUnsupportedVariants_","selectedMedia","selectInitialPlaylist","selectPlaylist","initialMedia_","updateAdCues_","updateDuration","addSeekableRange","addSeekableRange_","onDurationchange","stuckAtPlaylistEnd_","defaultDemuxed","audioGroupKeys","nextPlaylist","currentPlaylist","forwardBuffer","bufferLowWaterLine","onSyncInfoUpdate_","onEndOfStream","ended","isEndOfStream","getExpiredTime","absolutePlaylistEnd","TIME_FUDGE_FACTOR","mainSeekable","audioSeekable","oldDuration","newDuration","setDuration","mimeTypes","configureLoaderMimeTypes_","excludeIncompatibleVariants_","variant","codecString","variantCodecs","adOffset","adTotal","_segment$cueOutCont$s","_segment$cueOutCont$s2","video_es_updateAdCues","Representation","hlsHandler","loader","playlistUri","changePlaylistFn","fastChangeFunction","masterPlaylistController_","fastQualityChange_","incompatible","currentlyEnabled","timerCancelEvents","video_es_PlaybackWatcher","PlaybackWatcher","consecutiveUpdates","lastRecordedTime","timer_","checkCurrentTimeTimeout_","canPlayHandler","monitorCurrentTime_","waitingHandler","techWaiting_","cancelTimerHandler","cancelTimer_","fixesBadSeeksHandler","fixesBadSeeks_","checkCurrentTime_","waiting_","afterSeekableWindow_","beforeSeekableWindow_","livePoint","nextRange","videoUnderflow_","difference","skipTheGap_","gap","gapFromVideoUnderflow_","scheduledCurrentTime","gaps","findGaps","defaultOptions","errorInterval","getSource","IWillNotUseThisInPlugins","reloadSourceOnError","initPlugin","lastCalled","localOptions","loadedMetadataHandler","errorHandler","cleanupEvents","vhs","source_","Hls$1","STANDARD_PLAYLIST_SELECTOR","playerBandwidth","playerWidth","playerHeight","sortedPlaylistReps","enabledPlaylistReps","rep","bandwidthPlaylistReps","highestRemainingBandwidthRep","bandwidthBestRep","haveResolution","resolutionBestRepList","resolutionBestRep","resolutionPlusOneList","resolutionPlusOneSmallest","resolutionPlusOneRep","chosenRep","video_es_simpleSelector","systemBandwidth","INITIAL_PLAYLIST_SELECTOR","comparePlaylistBandwidth","comparePlaylistResolution","leftWidth","rightWidth","simpleTypeFromSourceType","handleHlsMediaChange","qualityLevels","selectedIndex_","setupEmeOptions","eme","sourceOptions","keySystemOptions","videoPlaylist","audioPlaylist","keySystemContentTypes","audioContentType","videoContentType","emeKeySystems","keySystems","supportsNativeHls","canItPlay","supportsNativeDash","supportsTypeNatively","Component$1","video_es_HlsHandler","HlsHandler","dash","setOptions_","overrideNative","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","smoothQualityChange_","pauseLoading","option","playbackWatcher_","invBandwidth","invThroughput","mediaRequests_","mediaRequestsAborted_","mediaRequestsTimedout_","mediaRequestsErrored_","mediaTransferDuration_","mediaBytesTransferred_","mediaSecondsLoaded_","currentTech","playerDimensions","setupQualityLevels_","qualityLevels_","addQualityLevel","get$$1","getter","get$2","HlsSourceHandler","supportedType"],"mappings":"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","file":"8-82d9f5c1d53dfc619c35.js","sourcesContent":["/**\n * mux.js\n *\n * Copyright (c) 2014 Brightcove\n * All rights reserved.\n *\n * A lightweight readable stream implemention that handles event dispatching.\n * Objects that inherit from streams should call init in their constructors.\n */\n'use strict';\n\nvar Stream = function() {\n  this.init = function() {\n    var listeners = {};\n    /**\n     * Add a listener for a specified event type.\n     * @param type {string} the event name\n     * @param listener {function} the callback to be invoked when an event of\n     * the specified type occurs\n     */\n    this.on = function(type, listener) {\n      if (!listeners[type]) {\n        listeners[type] = [];\n      }\n      listeners[type] = listeners[type].concat(listener);\n    };\n    /**\n     * Remove a listener for a specified event type.\n     * @param type {string} the event name\n     * @param listener {function} a function previously registered for this\n     * type of event through `on`\n     */\n    this.off = function(type, listener) {\n      var index;\n      if (!listeners[type]) {\n        return false;\n      }\n      index = listeners[type].indexOf(listener);\n      listeners[type] = listeners[type].slice();\n      listeners[type].splice(index, 1);\n      return index > -1;\n    };\n    /**\n     * Trigger an event of the specified type on this stream. Any additional\n     * arguments to this function are passed as parameters to event listeners.\n     * @param type {string} the event name\n     */\n    this.trigger = function(type) {\n      var callbacks, i, length, args;\n      callbacks = listeners[type];\n      if (!callbacks) {\n        return;\n      }\n      // Slicing the arguments on every invocation of this method\n      // can add a significant amount of overhead. Avoid the\n      // intermediate object creation for the common case of a\n      // single callback argument\n      if (arguments.length === 2) {\n        length = callbacks.length;\n        for (i = 0; i < length; ++i) {\n          callbacks[i].call(this, arguments[1]);\n        }\n      } else {\n        args = [];\n        i = arguments.length;\n        for (i = 1; i < arguments.length; ++i) {\n          args.push(arguments[i]);\n        }\n        length = callbacks.length;\n        for (i = 0; i < length; ++i) {\n          callbacks[i].apply(this, args);\n        }\n      }\n    };\n    /**\n     * Destroys the stream and cleans up.\n     */\n    this.dispose = function() {\n      listeners = {};\n    };\n  };\n};\n\n/**\n * Forwards all `data` events on this stream to the destination stream. The\n * destination stream should provide a method `push` to receive the data\n * events as they arrive.\n * @param destination {stream} the stream that will receive all `data` events\n * @param autoFlush {boolean} if false, we will not call `flush` on the destination\n *                            when the current stream emits a 'done' event\n * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n */\nStream.prototype.pipe = function(destination) {\n  this.on('data', function(data) {\n    destination.push(data);\n  });\n\n  this.on('done', function(flushSource) {\n    destination.flush(flushSource);\n  });\n\n  return destination;\n};\n\n// Default stream functions that are expected to be overridden to perform\n// actual work. These are provided by the prototype as a sort of no-op\n// implementation so that we don't have to check for their existence in the\n// `pipe` function above.\nStream.prototype.push = function(data) {\n  this.trigger('data', data);\n};\n\nStream.prototype.flush = function(flushSource) {\n  this.trigger('done', flushSource);\n};\n\nmodule.exports = Stream;\n","'use strict';\n\nmodule.exports = {\n  H264_STREAM_TYPE: 0x1B,\n  ADTS_STREAM_TYPE: 0x0F,\n  METADATA_STREAM_TYPE: 0x15\n};\n","var win;\n\nif (typeof window !== \"undefined\") {\n    win = window;\n} else if (typeof global !== \"undefined\") {\n    win = global;\n} else if (typeof self !== \"undefined\"){\n    win = self;\n} else {\n    win = {};\n}\n\nmodule.exports = win;\n","/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * Utilities to detect basic properties and metadata about MP4s.\n */\n'use strict';\n\nvar toUnsigned = require('../utils/bin').toUnsigned;\nvar findBox, parseType, timescale, startTime, getVideoTrackIds;\n\n// Find the data for a box specified by its path\nfindBox = function(data, path) {\n  var results = [],\n      i, size, type, end, subresults;\n\n  if (!path.length) {\n    // short-circuit the search for empty paths\n    return null;\n  }\n\n  for (i = 0; i < data.byteLength;) {\n    size  = toUnsigned(data[i]     << 24 |\n                       data[i + 1] << 16 |\n                       data[i + 2] <<  8 |\n                       data[i + 3]);\n\n    type = parseType(data.subarray(i + 4, i + 8));\n\n    end = size > 1 ? i + size : data.byteLength;\n\n    if (type === path[0]) {\n      if (path.length === 1) {\n        // this is the end of the path and we've found the box we were\n        // looking for\n        results.push(data.subarray(i + 8, end));\n      } else {\n        // recursively search for the next box along the path\n        subresults = findBox(data.subarray(i + 8, end), path.slice(1));\n        if (subresults.length) {\n          results = results.concat(subresults);\n        }\n      }\n    }\n    i = end;\n  }\n\n  // we've finished searching all of data\n  return results;\n};\n\n/**\n * Returns the string representation of an ASCII encoded four byte buffer.\n * @param buffer {Uint8Array} a four-byte buffer to translate\n * @return {string} the corresponding string\n */\nparseType = function(buffer) {\n  var result = '';\n  result += String.fromCharCode(buffer[0]);\n  result += String.fromCharCode(buffer[1]);\n  result += String.fromCharCode(buffer[2]);\n  result += String.fromCharCode(buffer[3]);\n  return result;\n};\n\n/**\n * Parses an MP4 initialization segment and extracts the timescale\n * values for any declared tracks. Timescale values indicate the\n * number of clock ticks per second to assume for time-based values\n * elsewhere in the MP4.\n *\n * To determine the start time of an MP4, you need two pieces of\n * information: the timescale unit and the earliest base media decode\n * time. Multiple timescales can be specified within an MP4 but the\n * base media decode time is always expressed in the timescale from\n * the media header box for the track:\n * ```\n * moov > trak > mdia > mdhd.timescale\n * ```\n * @param init {Uint8Array} the bytes of the init segment\n * @return {object} a hash of track ids to timescale values or null if\n * the init segment is malformed.\n */\ntimescale = function(init) {\n  var\n    result = {},\n    traks = findBox(init, ['moov', 'trak']);\n\n  // mdhd timescale\n  return traks.reduce(function(result, trak) {\n    var tkhd, version, index, id, mdhd;\n\n    tkhd = findBox(trak, ['tkhd'])[0];\n    if (!tkhd) {\n      return null;\n    }\n    version = tkhd[0];\n    index = version === 0 ? 12 : 20;\n    id = toUnsigned(tkhd[index]     << 24 |\n                    tkhd[index + 1] << 16 |\n                    tkhd[index + 2] <<  8 |\n                    tkhd[index + 3]);\n\n    mdhd = findBox(trak, ['mdia', 'mdhd'])[0];\n    if (!mdhd) {\n      return null;\n    }\n    version = mdhd[0];\n    index = version === 0 ? 12 : 20;\n    result[id] = toUnsigned(mdhd[index]     << 24 |\n                            mdhd[index + 1] << 16 |\n                            mdhd[index + 2] <<  8 |\n                            mdhd[index + 3]);\n    return result;\n  }, result);\n};\n\n/**\n * Determine the base media decode start time, in seconds, for an MP4\n * fragment. If multiple fragments are specified, the earliest time is\n * returned.\n *\n * The base media decode time can be parsed from track fragment\n * metadata:\n * ```\n * moof > traf > tfdt.baseMediaDecodeTime\n * ```\n * It requires the timescale value from the mdhd to interpret.\n *\n * @param timescale {object} a hash of track ids to timescale values.\n * @return {number} the earliest base media decode start time for the\n * fragment, in seconds\n */\nstartTime = function(timescale, fragment) {\n  var trafs, baseTimes, result;\n\n  // we need info from two childrend of each track fragment box\n  trafs = findBox(fragment, ['moof', 'traf']);\n\n  // determine the start times for each track\n  baseTimes = [].concat.apply([], trafs.map(function(traf) {\n    return findBox(traf, ['tfhd']).map(function(tfhd) {\n      var id, scale, baseTime;\n\n      // get the track id from the tfhd\n      id = toUnsigned(tfhd[4] << 24 |\n                      tfhd[5] << 16 |\n                      tfhd[6] <<  8 |\n                      tfhd[7]);\n      // assume a 90kHz clock if no timescale was specified\n      scale = timescale[id] || 90e3;\n\n      // get the base media decode time from the tfdt\n      baseTime = findBox(traf, ['tfdt']).map(function(tfdt) {\n        var version, result;\n\n        version = tfdt[0];\n        result = toUnsigned(tfdt[4] << 24 |\n                            tfdt[5] << 16 |\n                            tfdt[6] <<  8 |\n                            tfdt[7]);\n        if (version ===  1) {\n          result *= Math.pow(2, 32);\n          result += toUnsigned(tfdt[8]  << 24 |\n                               tfdt[9]  << 16 |\n                               tfdt[10] <<  8 |\n                               tfdt[11]);\n        }\n        return result;\n      })[0];\n      baseTime = baseTime || Infinity;\n\n      // convert base time to seconds\n      return baseTime / scale;\n    });\n  }));\n\n  // return the minimum\n  result = Math.min.apply(null, baseTimes);\n  return isFinite(result) ? result : 0;\n};\n\n/**\n  * Find the trackIds of the video tracks in this source.\n  * Found by parsing the Handler Reference and Track Header Boxes:\n  *   moov > trak > mdia > hdlr\n  *   moov > trak > tkhd\n  *\n  * @param {Uint8Array} init - The bytes of the init segment for this source\n  * @return {Number[]} A list of trackIds\n  *\n  * @see ISO-BMFF-12/2015, Section 8.4.3\n **/\ngetVideoTrackIds = function(init) {\n  var traks = findBox(init, ['moov', 'trak']);\n  var videoTrackIds = [];\n\n  traks.forEach(function(trak) {\n    var hdlrs = findBox(trak, ['mdia', 'hdlr']);\n    var tkhds = findBox(trak, ['tkhd']);\n\n    hdlrs.forEach(function(hdlr, index) {\n      var handlerType = parseType(hdlr.subarray(8, 12));\n      var tkhd = tkhds[index];\n      var view;\n      var version;\n      var trackId;\n\n      if (handlerType === 'vide') {\n        view = new DataView(tkhd.buffer, tkhd.byteOffset, tkhd.byteLength);\n        version = view.getUint8(0);\n        trackId = (version === 0) ? view.getUint32(12) : view.getUint32(20);\n\n        videoTrackIds.push(trackId);\n      }\n    });\n  });\n\n  return videoTrackIds;\n};\n\nmodule.exports = {\n  findBox: findBox,\n  parseType: parseType,\n  timescale: timescale,\n  startTime: startTime,\n  videoTrackIds: getVideoTrackIds\n};\n","/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * A stream-based mp2t to mp4 converter. This utility can be used to\n * deliver mp4s to a SourceBuffer on platforms that support native\n * Media Source Extensions.\n */\n'use strict';\n\nvar Stream = require('../utils/stream.js');\nvar mp4 = require('./mp4-generator.js');\nvar frameUtils = require('./frame-utils');\nvar trackDecodeInfo = require('./track-decode-info');\nvar m2ts = require('../m2ts/m2ts.js');\nvar AdtsStream = require('../codecs/adts.js');\nvar H264Stream = require('../codecs/h264').H264Stream;\nvar AacStream = require('../aac');\nvar coneOfSilence = require('../data/silence');\nvar clock = require('../utils/clock');\n\n// constants\nvar AUDIO_PROPERTIES = [\n  'audioobjecttype',\n  'channelcount',\n  'samplerate',\n  'samplingfrequencyindex',\n  'samplesize'\n];\n\nvar VIDEO_PROPERTIES = [\n  'width',\n  'height',\n  'profileIdc',\n  'levelIdc',\n  'profileCompatibility'\n];\n\nvar ONE_SECOND_IN_TS = 90000; // 90kHz clock\n\n// object types\nvar VideoSegmentStream, AudioSegmentStream, Transmuxer, CoalesceStream;\n\n// Helper functions\nvar\n  isLikelyAacData,\n  arrayEquals,\n  sumFrameByteLengths;\n\nisLikelyAacData = function(data) {\n  if ((data[0] === 'I'.charCodeAt(0)) &&\n      (data[1] === 'D'.charCodeAt(0)) &&\n      (data[2] === '3'.charCodeAt(0))) {\n    return true;\n  }\n  return false;\n};\n\n/**\n * Compare two arrays (even typed) for same-ness\n */\narrayEquals = function(a, b) {\n  var\n    i;\n\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  // compare the value of each element in the array\n  for (i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * Sum the `byteLength` properties of the data in each AAC frame\n */\nsumFrameByteLengths = function(array) {\n  var\n    i,\n    currentObj,\n    sum = 0;\n\n  // sum the byteLength's all each nal unit in the frame\n  for (i = 0; i < array.length; i++) {\n    currentObj = array[i];\n    sum += currentObj.data.byteLength;\n  }\n\n  return sum;\n};\n\n/**\n * Constructs a single-track, ISO BMFF media segment from AAC data\n * events. The output of this stream can be fed to a SourceBuffer\n * configured with a suitable initialization segment.\n * @param track {object} track metadata configuration\n * @param options {object} transmuxer options object\n * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps\n *        in the source; false to adjust the first segment to start at 0.\n */\nAudioSegmentStream = function(track, options) {\n  var\n    adtsFrames = [],\n    sequenceNumber = 0,\n    earliestAllowedDts = 0,\n    audioAppendStartTs = 0,\n    videoBaseMediaDecodeTime = Infinity;\n\n  options = options || {};\n\n  AudioSegmentStream.prototype.init.call(this);\n\n  this.push = function(data) {\n    trackDecodeInfo.collectDtsInfo(track, data);\n\n    if (track) {\n      AUDIO_PROPERTIES.forEach(function(prop) {\n        track[prop] = data[prop];\n      });\n    }\n\n    // buffer audio data until end() is called\n    adtsFrames.push(data);\n  };\n\n  this.setEarliestDts = function(earliestDts) {\n    earliestAllowedDts = earliestDts - track.timelineStartInfo.baseMediaDecodeTime;\n  };\n\n  this.setVideoBaseMediaDecodeTime = function(baseMediaDecodeTime) {\n    videoBaseMediaDecodeTime = baseMediaDecodeTime;\n  };\n\n  this.setAudioAppendStart = function(timestamp) {\n    audioAppendStartTs = timestamp;\n  };\n\n  this.flush = function() {\n    var\n      frames,\n      moof,\n      mdat,\n      boxes;\n\n    // return early if no audio data has been observed\n    if (adtsFrames.length === 0) {\n      this.trigger('done', 'AudioSegmentStream');\n      return;\n    }\n\n    frames = this.trimAdtsFramesByEarliestDts_(adtsFrames);\n    track.baseMediaDecodeTime = trackDecodeInfo.calculateTrackBaseMediaDecodeTime(\n      track, options.keepOriginalTimestamps);\n\n    this.prefixWithSilence_(track, frames);\n\n    // we have to build the index from byte locations to\n    // samples (that is, adts frames) in the audio data\n    track.samples = this.generateSampleTable_(frames);\n\n    // concatenate the audio data to constuct the mdat\n    mdat = mp4.mdat(this.concatenateFrameData_(frames));\n\n    adtsFrames = [];\n\n    moof = mp4.moof(sequenceNumber, [track]);\n    boxes = new Uint8Array(moof.byteLength + mdat.byteLength);\n\n    // bump the sequence number for next time\n    sequenceNumber++;\n\n    boxes.set(moof);\n    boxes.set(mdat, moof.byteLength);\n\n    trackDecodeInfo.clearDtsInfo(track);\n\n    this.trigger('data', {track: track, boxes: boxes});\n    this.trigger('done', 'AudioSegmentStream');\n  };\n\n  // Possibly pad (prefix) the audio track with silence if appending this track\n  // would lead to the introduction of a gap in the audio buffer\n  this.prefixWithSilence_ = function(track, frames) {\n    var\n      baseMediaDecodeTimeTs,\n      frameDuration = 0,\n      audioGapDuration = 0,\n      audioFillFrameCount = 0,\n      audioFillDuration = 0,\n      silentFrame,\n      i;\n\n    if (!frames.length) {\n      return;\n    }\n\n    baseMediaDecodeTimeTs = clock.audioTsToVideoTs(track.baseMediaDecodeTime, track.samplerate);\n    // determine frame clock duration based on sample rate, round up to avoid overfills\n    frameDuration = Math.ceil(ONE_SECOND_IN_TS / (track.samplerate / 1024));\n\n    if (audioAppendStartTs && videoBaseMediaDecodeTime) {\n      // insert the shortest possible amount (audio gap or audio to video gap)\n      audioGapDuration =\n        baseMediaDecodeTimeTs - Math.max(audioAppendStartTs, videoBaseMediaDecodeTime);\n      // number of full frames in the audio gap\n      audioFillFrameCount = Math.floor(audioGapDuration / frameDuration);\n      audioFillDuration = audioFillFrameCount * frameDuration;\n    }\n\n    // don't attempt to fill gaps smaller than a single frame or larger\n    // than a half second\n    if (audioFillFrameCount < 1 || audioFillDuration > ONE_SECOND_IN_TS / 2) {\n      return;\n    }\n\n    silentFrame = coneOfSilence[track.samplerate];\n\n    if (!silentFrame) {\n      // we don't have a silent frame pregenerated for the sample rate, so use a frame\n      // from the content instead\n      silentFrame = frames[0].data;\n    }\n\n    for (i = 0; i < audioFillFrameCount; i++) {\n      frames.splice(i, 0, {\n        data: silentFrame\n      });\n    }\n\n    track.baseMediaDecodeTime -=\n      Math.floor(clock.videoTsToAudioTs(audioFillDuration, track.samplerate));\n  };\n\n  // If the audio segment extends before the earliest allowed dts\n  // value, remove AAC frames until starts at or after the earliest\n  // allowed DTS so that we don't end up with a negative baseMedia-\n  // DecodeTime for the audio track\n  this.trimAdtsFramesByEarliestDts_ = function(adtsFrames) {\n    if (track.minSegmentDts >= earliestAllowedDts) {\n      return adtsFrames;\n    }\n\n    // We will need to recalculate the earliest segment Dts\n    track.minSegmentDts = Infinity;\n\n    return adtsFrames.filter(function(currentFrame) {\n      // If this is an allowed frame, keep it and record it's Dts\n      if (currentFrame.dts >= earliestAllowedDts) {\n        track.minSegmentDts = Math.min(track.minSegmentDts, currentFrame.dts);\n        track.minSegmentPts = track.minSegmentDts;\n        return true;\n      }\n      // Otherwise, discard it\n      return false;\n    });\n  };\n\n  // generate the track's raw mdat data from an array of frames\n  this.generateSampleTable_ = function(frames) {\n    var\n      i,\n      currentFrame,\n      samples = [];\n\n    for (i = 0; i < frames.length; i++) {\n      currentFrame = frames[i];\n      samples.push({\n        size: currentFrame.data.byteLength,\n        duration: 1024 // For AAC audio, all samples contain 1024 samples\n      });\n    }\n    return samples;\n  };\n\n  // generate the track's sample table from an array of frames\n  this.concatenateFrameData_ = function(frames) {\n    var\n      i,\n      currentFrame,\n      dataOffset = 0,\n      data = new Uint8Array(sumFrameByteLengths(frames));\n\n    for (i = 0; i < frames.length; i++) {\n      currentFrame = frames[i];\n\n      data.set(currentFrame.data, dataOffset);\n      dataOffset += currentFrame.data.byteLength;\n    }\n    return data;\n  };\n};\n\nAudioSegmentStream.prototype = new Stream();\n\n/**\n * Constructs a single-track, ISO BMFF media segment from H264 data\n * events. The output of this stream can be fed to a SourceBuffer\n * configured with a suitable initialization segment.\n * @param track {object} track metadata configuration\n * @param options {object} transmuxer options object\n * @param options.alignGopsAtEnd {boolean} If true, start from the end of the\n *        gopsToAlignWith list when attempting to align gop pts\n * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps\n *        in the source; false to adjust the first segment to start at 0.\n */\nVideoSegmentStream = function(track, options) {\n  var\n    sequenceNumber = 0,\n    nalUnits = [],\n    gopsToAlignWith = [],\n    config,\n    pps;\n\n  options = options || {};\n\n  VideoSegmentStream.prototype.init.call(this);\n\n  delete track.minPTS;\n\n  this.gopCache_ = [];\n\n  /**\n    * Constructs a ISO BMFF segment given H264 nalUnits\n    * @param {Object} nalUnit A data event representing a nalUnit\n    * @param {String} nalUnit.nalUnitType\n    * @param {Object} nalUnit.config Properties for a mp4 track\n    * @param {Uint8Array} nalUnit.data The nalUnit bytes\n    * @see lib/codecs/h264.js\n   **/\n  this.push = function(nalUnit) {\n    trackDecodeInfo.collectDtsInfo(track, nalUnit);\n\n    // record the track config\n    if (nalUnit.nalUnitType === 'seq_parameter_set_rbsp' && !config) {\n      config = nalUnit.config;\n      track.sps = [nalUnit.data];\n\n      VIDEO_PROPERTIES.forEach(function(prop) {\n        track[prop] = config[prop];\n      }, this);\n    }\n\n    if (nalUnit.nalUnitType === 'pic_parameter_set_rbsp' &&\n        !pps) {\n      pps = nalUnit.data;\n      track.pps = [nalUnit.data];\n    }\n\n    // buffer video until flush() is called\n    nalUnits.push(nalUnit);\n  };\n\n  /**\n    * Pass constructed ISO BMFF track and boxes on to the\n    * next stream in the pipeline\n   **/\n  this.flush = function() {\n    var\n      frames,\n      gopForFusion,\n      gops,\n      moof,\n      mdat,\n      boxes;\n\n    // Throw away nalUnits at the start of the byte stream until\n    // we find the first AUD\n    while (nalUnits.length) {\n      if (nalUnits[0].nalUnitType === 'access_unit_delimiter_rbsp') {\n        break;\n      }\n      nalUnits.shift();\n    }\n\n    // Return early if no video data has been observed\n    if (nalUnits.length === 0) {\n      this.resetStream_();\n      this.trigger('done', 'VideoSegmentStream');\n      return;\n    }\n\n    // Organize the raw nal-units into arrays that represent\n    // higher-level constructs such as frames and gops\n    // (group-of-pictures)\n    frames = frameUtils.groupNalsIntoFrames(nalUnits);\n    gops = frameUtils.groupFramesIntoGops(frames);\n\n    // If the first frame of this fragment is not a keyframe we have\n    // a problem since MSE (on Chrome) requires a leading keyframe.\n    //\n    // We have two approaches to repairing this situation:\n    // 1) GOP-FUSION:\n    //    This is where we keep track of the GOPS (group-of-pictures)\n    //    from previous fragments and attempt to find one that we can\n    //    prepend to the current fragment in order to create a valid\n    //    fragment.\n    // 2) KEYFRAME-PULLING:\n    //    Here we search for the first keyframe in the fragment and\n    //    throw away all the frames between the start of the fragment\n    //    and that keyframe. We then extend the duration and pull the\n    //    PTS of the keyframe forward so that it covers the time range\n    //    of the frames that were disposed of.\n    //\n    // #1 is far prefereable over #2 which can cause \"stuttering\" but\n    // requires more things to be just right.\n    if (!gops[0][0].keyFrame) {\n      // Search for a gop for fusion from our gopCache\n      gopForFusion = this.getGopForFusion_(nalUnits[0], track);\n\n      if (gopForFusion) {\n        gops.unshift(gopForFusion);\n        // Adjust Gops' metadata to account for the inclusion of the\n        // new gop at the beginning\n        gops.byteLength += gopForFusion.byteLength;\n        gops.nalCount += gopForFusion.nalCount;\n        gops.pts = gopForFusion.pts;\n        gops.dts = gopForFusion.dts;\n        gops.duration += gopForFusion.duration;\n      } else {\n        // If we didn't find a candidate gop fall back to keyframe-pulling\n        gops = frameUtils.extendFirstKeyFrame(gops);\n      }\n    }\n\n    // Trim gops to align with gopsToAlignWith\n    if (gopsToAlignWith.length) {\n      var alignedGops;\n\n      if (options.alignGopsAtEnd) {\n        alignedGops = this.alignGopsAtEnd_(gops);\n      } else {\n        alignedGops = this.alignGopsAtStart_(gops);\n      }\n\n      if (!alignedGops) {\n        // save all the nals in the last GOP into the gop cache\n        this.gopCache_.unshift({\n          gop: gops.pop(),\n          pps: track.pps,\n          sps: track.sps\n        });\n\n        // Keep a maximum of 6 GOPs in the cache\n        this.gopCache_.length = Math.min(6, this.gopCache_.length);\n\n        // Clear nalUnits\n        nalUnits = [];\n\n        // return early no gops can be aligned with desired gopsToAlignWith\n        this.resetStream_();\n        this.trigger('done', 'VideoSegmentStream');\n        return;\n      }\n\n      // Some gops were trimmed. clear dts info so minSegmentDts and pts are correct\n      // when recalculated before sending off to CoalesceStream\n      trackDecodeInfo.clearDtsInfo(track);\n\n      gops = alignedGops;\n    }\n\n    trackDecodeInfo.collectDtsInfo(track, gops);\n\n    // First, we have to build the index from byte locations to\n    // samples (that is, frames) in the video data\n    track.samples = frameUtils.generateSampleTable(gops);\n\n    // Concatenate the video data and construct the mdat\n    mdat = mp4.mdat(frameUtils.concatenateNalData(gops));\n\n    track.baseMediaDecodeTime = trackDecodeInfo.calculateTrackBaseMediaDecodeTime(\n      track, options.keepOriginalTimestamps);\n\n    this.trigger('processedGopsInfo', gops.map(function(gop) {\n      return {\n        pts: gop.pts,\n        dts: gop.dts,\n        byteLength: gop.byteLength\n      };\n    }));\n\n    // save all the nals in the last GOP into the gop cache\n    this.gopCache_.unshift({\n      gop: gops.pop(),\n      pps: track.pps,\n      sps: track.sps\n    });\n\n    // Keep a maximum of 6 GOPs in the cache\n    this.gopCache_.length = Math.min(6, this.gopCache_.length);\n\n    // Clear nalUnits\n    nalUnits = [];\n\n    this.trigger('baseMediaDecodeTime', track.baseMediaDecodeTime);\n    this.trigger('timelineStartInfo', track.timelineStartInfo);\n\n    moof = mp4.moof(sequenceNumber, [track]);\n\n    // it would be great to allocate this array up front instead of\n    // throwing away hundreds of media segment fragments\n    boxes = new Uint8Array(moof.byteLength + mdat.byteLength);\n\n    // Bump the sequence number for next time\n    sequenceNumber++;\n\n    boxes.set(moof);\n    boxes.set(mdat, moof.byteLength);\n\n    this.trigger('data', {track: track, boxes: boxes});\n\n    this.resetStream_();\n\n    // Continue with the flush process now\n    this.trigger('done', 'VideoSegmentStream');\n  };\n\n  this.resetStream_ = function() {\n    trackDecodeInfo.clearDtsInfo(track);\n\n    // reset config and pps because they may differ across segments\n    // for instance, when we are rendition switching\n    config = undefined;\n    pps = undefined;\n  };\n\n  // Search for a candidate Gop for gop-fusion from the gop cache and\n  // return it or return null if no good candidate was found\n  this.getGopForFusion_ = function(nalUnit) {\n    var\n      halfSecond = 45000, // Half-a-second in a 90khz clock\n      allowableOverlap = 10000, // About 3 frames @ 30fps\n      nearestDistance = Infinity,\n      dtsDistance,\n      nearestGopObj,\n      currentGop,\n      currentGopObj,\n      i;\n\n    // Search for the GOP nearest to the beginning of this nal unit\n    for (i = 0; i < this.gopCache_.length; i++) {\n      currentGopObj = this.gopCache_[i];\n      currentGop = currentGopObj.gop;\n\n      // Reject Gops with different SPS or PPS\n      if (!(track.pps && arrayEquals(track.pps[0], currentGopObj.pps[0])) ||\n          !(track.sps && arrayEquals(track.sps[0], currentGopObj.sps[0]))) {\n        continue;\n      }\n\n      // Reject Gops that would require a negative baseMediaDecodeTime\n      if (currentGop.dts < track.timelineStartInfo.dts) {\n        continue;\n      }\n\n      // The distance between the end of the gop and the start of the nalUnit\n      dtsDistance = (nalUnit.dts - currentGop.dts) - currentGop.duration;\n\n      // Only consider GOPS that start before the nal unit and end within\n      // a half-second of the nal unit\n      if (dtsDistance >= -allowableOverlap &&\n          dtsDistance <= halfSecond) {\n\n        // Always use the closest GOP we found if there is more than\n        // one candidate\n        if (!nearestGopObj ||\n            nearestDistance > dtsDistance) {\n          nearestGopObj = currentGopObj;\n          nearestDistance = dtsDistance;\n        }\n      }\n    }\n\n    if (nearestGopObj) {\n      return nearestGopObj.gop;\n    }\n    return null;\n  };\n\n  // trim gop list to the first gop found that has a matching pts with a gop in the list\n  // of gopsToAlignWith starting from the START of the list\n  this.alignGopsAtStart_ = function(gops) {\n    var alignIndex, gopIndex, align, gop, byteLength, nalCount, duration, alignedGops;\n\n    byteLength = gops.byteLength;\n    nalCount = gops.nalCount;\n    duration = gops.duration;\n    alignIndex = gopIndex = 0;\n\n    while (alignIndex < gopsToAlignWith.length && gopIndex < gops.length) {\n      align = gopsToAlignWith[alignIndex];\n      gop = gops[gopIndex];\n\n      if (align.pts === gop.pts) {\n        break;\n      }\n\n      if (gop.pts > align.pts) {\n        // this current gop starts after the current gop we want to align on, so increment\n        // align index\n        alignIndex++;\n        continue;\n      }\n\n      // current gop starts before the current gop we want to align on. so increment gop\n      // index\n      gopIndex++;\n      byteLength -= gop.byteLength;\n      nalCount -= gop.nalCount;\n      duration -= gop.duration;\n    }\n\n    if (gopIndex === 0) {\n      // no gops to trim\n      return gops;\n    }\n\n    if (gopIndex === gops.length) {\n      // all gops trimmed, skip appending all gops\n      return null;\n    }\n\n    alignedGops = gops.slice(gopIndex);\n    alignedGops.byteLength = byteLength;\n    alignedGops.duration = duration;\n    alignedGops.nalCount = nalCount;\n    alignedGops.pts = alignedGops[0].pts;\n    alignedGops.dts = alignedGops[0].dts;\n\n    return alignedGops;\n  };\n\n  // trim gop list to the first gop found that has a matching pts with a gop in the list\n  // of gopsToAlignWith starting from the END of the list\n  this.alignGopsAtEnd_ = function(gops) {\n    var alignIndex, gopIndex, align, gop, alignEndIndex, matchFound;\n\n    alignIndex = gopsToAlignWith.length - 1;\n    gopIndex = gops.length - 1;\n    alignEndIndex = null;\n    matchFound = false;\n\n    while (alignIndex >= 0 && gopIndex >= 0) {\n      align = gopsToAlignWith[alignIndex];\n      gop = gops[gopIndex];\n\n      if (align.pts === gop.pts) {\n        matchFound = true;\n        break;\n      }\n\n      if (align.pts > gop.pts) {\n        alignIndex--;\n        continue;\n      }\n\n      if (alignIndex === gopsToAlignWith.length - 1) {\n        // gop.pts is greater than the last alignment candidate. If no match is found\n        // by the end of this loop, we still want to append gops that come after this\n        // point\n        alignEndIndex = gopIndex;\n      }\n\n      gopIndex--;\n    }\n\n    if (!matchFound && alignEndIndex === null) {\n      return null;\n    }\n\n    var trimIndex;\n\n    if (matchFound) {\n      trimIndex = gopIndex;\n    } else {\n      trimIndex = alignEndIndex;\n    }\n\n    if (trimIndex === 0) {\n      return gops;\n    }\n\n    var alignedGops = gops.slice(trimIndex);\n    var metadata = alignedGops.reduce(function(total, gop) {\n      total.byteLength += gop.byteLength;\n      total.duration += gop.duration;\n      total.nalCount += gop.nalCount;\n      return total;\n    }, { byteLength: 0, duration: 0, nalCount: 0 });\n\n    alignedGops.byteLength = metadata.byteLength;\n    alignedGops.duration = metadata.duration;\n    alignedGops.nalCount = metadata.nalCount;\n    alignedGops.pts = alignedGops[0].pts;\n    alignedGops.dts = alignedGops[0].dts;\n\n    return alignedGops;\n  };\n\n  this.alignGopsWith = function(newGopsToAlignWith) {\n    gopsToAlignWith = newGopsToAlignWith;\n  };\n};\n\nVideoSegmentStream.prototype = new Stream();\n\n/**\n * A Stream that can combine multiple streams (ie. audio & video)\n * into a single output segment for MSE. Also supports audio-only\n * and video-only streams.\n */\nCoalesceStream = function(options, metadataStream) {\n  // Number of Tracks per output segment\n  // If greater than 1, we combine multiple\n  // tracks into a single segment\n  this.numberOfTracks = 0;\n  this.metadataStream = metadataStream;\n\n  if (typeof options.remux !== 'undefined') {\n    this.remuxTracks = !!options.remux;\n  } else {\n    this.remuxTracks = true;\n  }\n\n  this.pendingTracks = [];\n  this.videoTrack = null;\n  this.pendingBoxes = [];\n  this.pendingCaptions = [];\n  this.pendingMetadata = [];\n  this.pendingBytes = 0;\n  this.emittedTracks = 0;\n\n  CoalesceStream.prototype.init.call(this);\n\n  // Take output from multiple\n  this.push = function(output) {\n    // buffer incoming captions until the associated video segment\n    // finishes\n    if (output.text) {\n      return this.pendingCaptions.push(output);\n    }\n    // buffer incoming id3 tags until the final flush\n    if (output.frames) {\n      return this.pendingMetadata.push(output);\n    }\n\n    // Add this track to the list of pending tracks and store\n    // important information required for the construction of\n    // the final segment\n    this.pendingTracks.push(output.track);\n    this.pendingBoxes.push(output.boxes);\n    this.pendingBytes += output.boxes.byteLength;\n\n    if (output.track.type === 'video') {\n      this.videoTrack = output.track;\n    }\n    if (output.track.type === 'audio') {\n      this.audioTrack = output.track;\n    }\n  };\n};\n\nCoalesceStream.prototype = new Stream();\nCoalesceStream.prototype.flush = function(flushSource) {\n  var\n    offset = 0,\n    event = {\n      captions: [],\n      captionStreams: {},\n      metadata: [],\n      info: {}\n    },\n    caption,\n    id3,\n    initSegment,\n    timelineStartPts = 0,\n    i;\n\n  if (this.pendingTracks.length < this.numberOfTracks) {\n    if (flushSource !== 'VideoSegmentStream' &&\n        flushSource !== 'AudioSegmentStream') {\n      // Return because we haven't received a flush from a data-generating\n      // portion of the segment (meaning that we have only recieved meta-data\n      // or captions.)\n      return;\n    } else if (this.remuxTracks) {\n      // Return until we have enough tracks from the pipeline to remux (if we\n      // are remuxing audio and video into a single MP4)\n      return;\n    } else if (this.pendingTracks.length === 0) {\n      // In the case where we receive a flush without any data having been\n      // received we consider it an emitted track for the purposes of coalescing\n      // `done` events.\n      // We do this for the case where there is an audio and video track in the\n      // segment but no audio data. (seen in several playlists with alternate\n      // audio tracks and no audio present in the main TS segments.)\n      this.emittedTracks++;\n\n      if (this.emittedTracks >= this.numberOfTracks) {\n        this.trigger('done');\n        this.emittedTracks = 0;\n      }\n      return;\n    }\n  }\n\n  if (this.videoTrack) {\n    timelineStartPts = this.videoTrack.timelineStartInfo.pts;\n    VIDEO_PROPERTIES.forEach(function(prop) {\n      event.info[prop] = this.videoTrack[prop];\n    }, this);\n  } else if (this.audioTrack) {\n    timelineStartPts = this.audioTrack.timelineStartInfo.pts;\n    AUDIO_PROPERTIES.forEach(function(prop) {\n      event.info[prop] = this.audioTrack[prop];\n    }, this);\n  }\n\n  if (this.pendingTracks.length === 1) {\n    event.type = this.pendingTracks[0].type;\n  } else {\n    event.type = 'combined';\n  }\n\n  this.emittedTracks += this.pendingTracks.length;\n\n  initSegment = mp4.initSegment(this.pendingTracks);\n\n  // Create a new typed array to hold the init segment\n  event.initSegment = new Uint8Array(initSegment.byteLength);\n\n  // Create an init segment containing a moov\n  // and track definitions\n  event.initSegment.set(initSegment);\n\n  // Create a new typed array to hold the moof+mdats\n  event.data = new Uint8Array(this.pendingBytes);\n\n  // Append each moof+mdat (one per track) together\n  for (i = 0; i < this.pendingBoxes.length; i++) {\n    event.data.set(this.pendingBoxes[i], offset);\n    offset += this.pendingBoxes[i].byteLength;\n  }\n\n  // Translate caption PTS times into second offsets into the\n  // video timeline for the segment, and add track info\n  for (i = 0; i < this.pendingCaptions.length; i++) {\n    caption = this.pendingCaptions[i];\n    caption.startTime = (caption.startPts - timelineStartPts);\n    caption.startTime /= 90e3;\n    caption.endTime = (caption.endPts - timelineStartPts);\n    caption.endTime /= 90e3;\n    event.captionStreams[caption.stream] = true;\n    event.captions.push(caption);\n  }\n\n  // Translate ID3 frame PTS times into second offsets into the\n  // video timeline for the segment\n  for (i = 0; i < this.pendingMetadata.length; i++) {\n    id3 = this.pendingMetadata[i];\n    id3.cueTime = (id3.pts - timelineStartPts);\n    id3.cueTime /= 90e3;\n    event.metadata.push(id3);\n  }\n  // We add this to every single emitted segment even though we only need\n  // it for the first\n  event.metadata.dispatchType = this.metadataStream.dispatchType;\n\n  // Reset stream state\n  this.pendingTracks.length = 0;\n  this.videoTrack = null;\n  this.pendingBoxes.length = 0;\n  this.pendingCaptions.length = 0;\n  this.pendingBytes = 0;\n  this.pendingMetadata.length = 0;\n\n  // Emit the built segment\n  this.trigger('data', event);\n\n  // Only emit `done` if all tracks have been flushed and emitted\n  if (this.emittedTracks >= this.numberOfTracks) {\n    this.trigger('done');\n    this.emittedTracks = 0;\n  }\n};\n/**\n * A Stream that expects MP2T binary data as input and produces\n * corresponding media segments, suitable for use with Media Source\n * Extension (MSE) implementations that support the ISO BMFF byte\n * stream format, like Chrome.\n */\nTransmuxer = function(options) {\n  var\n    self = this,\n    hasFlushed = true,\n    videoTrack,\n    audioTrack;\n\n  Transmuxer.prototype.init.call(this);\n\n  options = options || {};\n  this.baseMediaDecodeTime = options.baseMediaDecodeTime || 0;\n  this.transmuxPipeline_ = {};\n\n  this.setupAacPipeline = function() {\n    var pipeline = {};\n    this.transmuxPipeline_ = pipeline;\n\n    pipeline.type = 'aac';\n    pipeline.metadataStream = new m2ts.MetadataStream();\n\n    // set up the parsing pipeline\n    pipeline.aacStream = new AacStream();\n    pipeline.audioTimestampRolloverStream = new m2ts.TimestampRolloverStream('audio');\n    pipeline.timedMetadataTimestampRolloverStream = new m2ts.TimestampRolloverStream('timed-metadata');\n    pipeline.adtsStream = new AdtsStream();\n    pipeline.coalesceStream = new CoalesceStream(options, pipeline.metadataStream);\n    pipeline.headOfPipeline = pipeline.aacStream;\n\n    pipeline.aacStream\n      .pipe(pipeline.audioTimestampRolloverStream)\n      .pipe(pipeline.adtsStream);\n    pipeline.aacStream\n      .pipe(pipeline.timedMetadataTimestampRolloverStream)\n      .pipe(pipeline.metadataStream)\n      .pipe(pipeline.coalesceStream);\n\n    pipeline.metadataStream.on('timestamp', function(frame) {\n      pipeline.aacStream.setTimestamp(frame.timeStamp);\n    });\n\n    pipeline.aacStream.on('data', function(data) {\n      if (data.type === 'timed-metadata' && !pipeline.audioSegmentStream) {\n        audioTrack = audioTrack || {\n          timelineStartInfo: {\n            baseMediaDecodeTime: self.baseMediaDecodeTime\n          },\n          codec: 'adts',\n          type: 'audio'\n        };\n        // hook up the audio segment stream to the first track with aac data\n        pipeline.coalesceStream.numberOfTracks++;\n        pipeline.audioSegmentStream = new AudioSegmentStream(audioTrack, options);\n        // Set up the final part of the audio pipeline\n        pipeline.adtsStream\n          .pipe(pipeline.audioSegmentStream)\n          .pipe(pipeline.coalesceStream);\n      }\n    });\n\n    // Re-emit any data coming from the coalesce stream to the outside world\n    pipeline.coalesceStream.on('data', this.trigger.bind(this, 'data'));\n    // Let the consumer know we have finished flushing the entire pipeline\n    pipeline.coalesceStream.on('done', this.trigger.bind(this, 'done'));\n  };\n\n  this.setupTsPipeline = function() {\n    var pipeline = {};\n    this.transmuxPipeline_ = pipeline;\n\n    pipeline.type = 'ts';\n    pipeline.metadataStream = new m2ts.MetadataStream();\n\n    // set up the parsing pipeline\n    pipeline.packetStream = new m2ts.TransportPacketStream();\n    pipeline.parseStream = new m2ts.TransportParseStream();\n    pipeline.elementaryStream = new m2ts.ElementaryStream();\n    pipeline.videoTimestampRolloverStream = new m2ts.TimestampRolloverStream('video');\n    pipeline.audioTimestampRolloverStream = new m2ts.TimestampRolloverStream('audio');\n    pipeline.timedMetadataTimestampRolloverStream = new m2ts.TimestampRolloverStream('timed-metadata');\n    pipeline.adtsStream = new AdtsStream();\n    pipeline.h264Stream = new H264Stream();\n    pipeline.captionStream = new m2ts.CaptionStream();\n    pipeline.coalesceStream = new CoalesceStream(options, pipeline.metadataStream);\n    pipeline.headOfPipeline = pipeline.packetStream;\n\n    // disassemble MPEG2-TS packets into elementary streams\n    pipeline.packetStream\n      .pipe(pipeline.parseStream)\n      .pipe(pipeline.elementaryStream);\n\n    // !!THIS ORDER IS IMPORTANT!!\n    // demux the streams\n    pipeline.elementaryStream\n      .pipe(pipeline.videoTimestampRolloverStream)\n      .pipe(pipeline.h264Stream);\n    pipeline.elementaryStream\n      .pipe(pipeline.audioTimestampRolloverStream)\n      .pipe(pipeline.adtsStream);\n\n    pipeline.elementaryStream\n      .pipe(pipeline.timedMetadataTimestampRolloverStream)\n      .pipe(pipeline.metadataStream)\n      .pipe(pipeline.coalesceStream);\n\n    // Hook up CEA-608/708 caption stream\n    pipeline.h264Stream.pipe(pipeline.captionStream)\n      .pipe(pipeline.coalesceStream);\n\n    pipeline.elementaryStream.on('data', function(data) {\n      var i;\n\n      if (data.type === 'metadata') {\n        i = data.tracks.length;\n\n        // scan the tracks listed in the metadata\n        while (i--) {\n          if (!videoTrack && data.tracks[i].type === 'video') {\n            videoTrack = data.tracks[i];\n            videoTrack.timelineStartInfo.baseMediaDecodeTime = self.baseMediaDecodeTime;\n          } else if (!audioTrack && data.tracks[i].type === 'audio') {\n            audioTrack = data.tracks[i];\n            audioTrack.timelineStartInfo.baseMediaDecodeTime = self.baseMediaDecodeTime;\n          }\n        }\n\n        // hook up the video segment stream to the first track with h264 data\n        if (videoTrack && !pipeline.videoSegmentStream) {\n          pipeline.coalesceStream.numberOfTracks++;\n          pipeline.videoSegmentStream = new VideoSegmentStream(videoTrack, options);\n\n          pipeline.videoSegmentStream.on('timelineStartInfo', function(timelineStartInfo) {\n          // When video emits timelineStartInfo data after a flush, we forward that\n          // info to the AudioSegmentStream, if it exists, because video timeline\n          // data takes precedence.\n            if (audioTrack) {\n              audioTrack.timelineStartInfo = timelineStartInfo;\n              // On the first segment we trim AAC frames that exist before the\n              // very earliest DTS we have seen in video because Chrome will\n              // interpret any video track with a baseMediaDecodeTime that is\n              // non-zero as a gap.\n              pipeline.audioSegmentStream.setEarliestDts(timelineStartInfo.dts);\n            }\n          });\n\n          pipeline.videoSegmentStream.on('processedGopsInfo',\n            self.trigger.bind(self, 'gopInfo'));\n\n          pipeline.videoSegmentStream.on('baseMediaDecodeTime', function(baseMediaDecodeTime) {\n            if (audioTrack) {\n              pipeline.audioSegmentStream.setVideoBaseMediaDecodeTime(baseMediaDecodeTime);\n            }\n          });\n\n          // Set up the final part of the video pipeline\n          pipeline.h264Stream\n            .pipe(pipeline.videoSegmentStream)\n            .pipe(pipeline.coalesceStream);\n        }\n\n        if (audioTrack && !pipeline.audioSegmentStream) {\n          // hook up the audio segment stream to the first track with aac data\n          pipeline.coalesceStream.numberOfTracks++;\n          pipeline.audioSegmentStream = new AudioSegmentStream(audioTrack, options);\n\n          // Set up the final part of the audio pipeline\n          pipeline.adtsStream\n            .pipe(pipeline.audioSegmentStream)\n            .pipe(pipeline.coalesceStream);\n        }\n      }\n    });\n\n    // Re-emit any data coming from the coalesce stream to the outside world\n    pipeline.coalesceStream.on('data', this.trigger.bind(this, 'data'));\n    // Let the consumer know we have finished flushing the entire pipeline\n    pipeline.coalesceStream.on('done', this.trigger.bind(this, 'done'));\n  };\n\n  // hook up the segment streams once track metadata is delivered\n  this.setBaseMediaDecodeTime = function(baseMediaDecodeTime) {\n    var pipeline = this.transmuxPipeline_;\n\n    this.baseMediaDecodeTime = baseMediaDecodeTime;\n    if (audioTrack) {\n      audioTrack.timelineStartInfo.dts = undefined;\n      audioTrack.timelineStartInfo.pts = undefined;\n      trackDecodeInfo.clearDtsInfo(audioTrack);\n      audioTrack.timelineStartInfo.baseMediaDecodeTime = baseMediaDecodeTime;\n      if (pipeline.audioTimestampRolloverStream) {\n        pipeline.audioTimestampRolloverStream.discontinuity();\n      }\n    }\n    if (videoTrack) {\n      if (pipeline.videoSegmentStream) {\n        pipeline.videoSegmentStream.gopCache_ = [];\n        pipeline.videoTimestampRolloverStream.discontinuity();\n      }\n      videoTrack.timelineStartInfo.dts = undefined;\n      videoTrack.timelineStartInfo.pts = undefined;\n      trackDecodeInfo.clearDtsInfo(videoTrack);\n      pipeline.captionStream.reset();\n      videoTrack.timelineStartInfo.baseMediaDecodeTime = baseMediaDecodeTime;\n    }\n\n    if (pipeline.timedMetadataTimestampRolloverStream) {\n      pipeline.timedMetadataTimestampRolloverStream.discontinuity();\n    }\n  };\n\n  this.setAudioAppendStart = function(timestamp) {\n    if (audioTrack) {\n      this.transmuxPipeline_.audioSegmentStream.setAudioAppendStart(timestamp);\n    }\n  };\n\n  this.alignGopsWith = function(gopsToAlignWith) {\n    if (videoTrack && this.transmuxPipeline_.videoSegmentStream) {\n      this.transmuxPipeline_.videoSegmentStream.alignGopsWith(gopsToAlignWith);\n    }\n  };\n\n  // feed incoming data to the front of the parsing pipeline\n  this.push = function(data) {\n    if (hasFlushed) {\n      var isAac = isLikelyAacData(data);\n\n      if (isAac && this.transmuxPipeline_.type !== 'aac') {\n        this.setupAacPipeline();\n      } else if (!isAac && this.transmuxPipeline_.type !== 'ts') {\n        this.setupTsPipeline();\n      }\n      hasFlushed = false;\n    }\n    this.transmuxPipeline_.headOfPipeline.push(data);\n  };\n\n  // flush any buffered data\n  this.flush = function() {\n      hasFlushed = true;\n    // Start at the top of the pipeline and flush all pending work\n    this.transmuxPipeline_.headOfPipeline.flush();\n  };\n\n  // Caption data has to be reset when seeking outside buffered range\n  this.resetCaptions = function() {\n    if (this.transmuxPipeline_.captionStream) {\n      this.transmuxPipeline_.captionStream.reset();\n    }\n  };\n\n};\nTransmuxer.prototype = new Stream();\n\nmodule.exports = {\n  Transmuxer: Transmuxer,\n  VideoSegmentStream: VideoSegmentStream,\n  AudioSegmentStream: AudioSegmentStream,\n  AUDIO_PROPERTIES: AUDIO_PROPERTIES,\n  VIDEO_PROPERTIES: VIDEO_PROPERTIES\n};\n","// see https://tools.ietf.org/html/rfc1808\n\n/* jshint ignore:start */\n(function(root) { \n/* jshint ignore:end */\n\n  var URL_REGEX = /^((?:[a-zA-Z0-9+\\-.]+:)?)(\\/\\/[^\\/?#]*)?((?:[^\\/\\?#]*\\/)*.*?)??(;.*?)?(\\?.*?)?(#.*?)?$/;\n  var FIRST_SEGMENT_REGEX = /^([^\\/?#]*)(.*)$/;\n  var SLASH_DOT_REGEX = /(?:\\/|^)\\.(?=\\/)/g;\n  var SLASH_DOT_DOT_REGEX = /(?:\\/|^)\\.\\.\\/(?!\\.\\.\\/).*?(?=\\/)/g;\n\n  var URLToolkit = { // jshint ignore:line\n    // If opts.alwaysNormalize is true then the path will always be normalized even when it starts with / or //\n    // E.g\n    // With opts.alwaysNormalize = false (default, spec compliant)\n    // http://a.com/b/cd + /e/f/../g => http://a.com/e/f/../g\n    // With opts.alwaysNormalize = true (not spec compliant)\n    // http://a.com/b/cd + /e/f/../g => http://a.com/e/g\n    buildAbsoluteURL: function(baseURL, relativeURL, opts) {\n      opts = opts || {};\n      // remove any remaining space and CRLF\n      baseURL = baseURL.trim();\n      relativeURL = relativeURL.trim();\n      if (!relativeURL) {\n        // 2a) If the embedded URL is entirely empty, it inherits the\n        // entire base URL (i.e., is set equal to the base URL)\n        // and we are done.\n        if (!opts.alwaysNormalize) {\n          return baseURL;\n        }\n        var basePartsForNormalise = URLToolkit.parseURL(baseURL);\n        if (!basePartsForNormalise) {\n          throw new Error('Error trying to parse base URL.');\n        }\n        basePartsForNormalise.path = URLToolkit.normalizePath(basePartsForNormalise.path);\n        return URLToolkit.buildURLFromParts(basePartsForNormalise);\n      }\n      var relativeParts = URLToolkit.parseURL(relativeURL);\n      if (!relativeParts) {\n        throw new Error('Error trying to parse relative URL.');\n      }\n      if (relativeParts.scheme) {\n        // 2b) If the embedded URL starts with a scheme name, it is\n        // interpreted as an absolute URL and we are done.\n        if (!opts.alwaysNormalize) {\n          return relativeURL;\n        }\n        relativeParts.path = URLToolkit.normalizePath(relativeParts.path);\n        return URLToolkit.buildURLFromParts(relativeParts);\n      }\n      var baseParts = URLToolkit.parseURL(baseURL);\n      if (!baseParts) {\n        throw new Error('Error trying to parse base URL.');\n      }\n      if (!baseParts.netLoc && baseParts.path && baseParts.path[0] !== '/') {\n        // If netLoc missing and path doesn't start with '/', assume everthing before the first '/' is the netLoc\n        // This causes 'example.com/a' to be handled as '//example.com/a' instead of '/example.com/a'\n        var pathParts = FIRST_SEGMENT_REGEX.exec(baseParts.path);\n        baseParts.netLoc = pathParts[1];\n        baseParts.path = pathParts[2];\n      }\n      if (baseParts.netLoc && !baseParts.path) {\n        baseParts.path = '/';\n      }\n      var builtParts = {\n        // 2c) Otherwise, the embedded URL inherits the scheme of\n        // the base URL.\n        scheme: baseParts.scheme,\n        netLoc: relativeParts.netLoc,\n        path: null,\n        params: relativeParts.params,\n        query: relativeParts.query,\n        fragment: relativeParts.fragment\n      };\n      if (!relativeParts.netLoc) {\n        // 3) If the embedded URL's <net_loc> is non-empty, we skip to\n        // Step 7.  Otherwise, the embedded URL inherits the <net_loc>\n        // (if any) of the base URL.\n        builtParts.netLoc = baseParts.netLoc;\n        // 4) If the embedded URL path is preceded by a slash \"/\", the\n        // path is not relative and we skip to Step 7.\n        if (relativeParts.path[0] !== '/') {\n          if (!relativeParts.path) {\n            // 5) If the embedded URL path is empty (and not preceded by a\n            // slash), then the embedded URL inherits the base URL path\n            builtParts.path = baseParts.path;\n            // 5a) if the embedded URL's <params> is non-empty, we skip to\n            // step 7; otherwise, it inherits the <params> of the base\n            // URL (if any) and\n            if (!relativeParts.params) {\n              builtParts.params = baseParts.params;\n              // 5b) if the embedded URL's <query> is non-empty, we skip to\n              // step 7; otherwise, it inherits the <query> of the base\n              // URL (if any) and we skip to step 7.\n              if (!relativeParts.query) {\n                builtParts.query = baseParts.query;\n              }\n            }\n          } else {\n            // 6) The last segment of the base URL's path (anything\n            // following the rightmost slash \"/\", or the entire path if no\n            // slash is present) is removed and the embedded URL's path is\n            // appended in its place.\n            var baseURLPath = baseParts.path;\n            var newPath = baseURLPath.substring(0, baseURLPath.lastIndexOf('/') + 1) + relativeParts.path;\n            builtParts.path = URLToolkit.normalizePath(newPath);\n          }\n        }\n      }\n      if (builtParts.path === null) {\n        builtParts.path = opts.alwaysNormalize ? URLToolkit.normalizePath(relativeParts.path) : relativeParts.path;\n      }\n      return URLToolkit.buildURLFromParts(builtParts);\n    },\n    parseURL: function(url) {\n      var parts = URL_REGEX.exec(url);\n      if (!parts) {\n        return null;\n      }\n      return {\n        scheme: parts[1] || '',\n        netLoc: parts[2] || '',\n        path: parts[3] || '',\n        params: parts[4] || '',\n        query: parts[5] || '',\n        fragment: parts[6] || ''\n      };\n    },\n    normalizePath: function(path) {\n      // The following operations are\n      // then applied, in order, to the new path:\n      // 6a) All occurrences of \"./\", where \".\" is a complete path\n      // segment, are removed.\n      // 6b) If the path ends with \".\" as a complete path segment,\n      // that \".\" is removed.\n      path = path.split('').reverse().join('').replace(SLASH_DOT_REGEX, '');\n      // 6c) All occurrences of \"<segment>/../\", where <segment> is a\n      // complete path segment not equal to \"..\", are removed.\n      // Removal of these path segments is performed iteratively,\n      // removing the leftmost matching pattern on each iteration,\n      // until no matching pattern remains.\n      // 6d) If the path ends with \"<segment>/..\", where <segment> is a\n      // complete path segment not equal to \"..\", that\n      // \"<segment>/..\" is removed.\n      while (path.length !== (path = path.replace(SLASH_DOT_DOT_REGEX, '')).length) {} // jshint ignore:line\n      return path.split('').reverse().join('');\n    },\n    buildURLFromParts: function(parts) {\n      return parts.scheme + parts.netLoc + parts.path + parts.params + parts.query + parts.fragment;\n    }\n  };\n\n/* jshint ignore:start */\n  if(typeof exports === 'object' && typeof module === 'object')\n    module.exports = URLToolkit;\n  else if(typeof define === 'function' && define.amd)\n    define([], function() { return URLToolkit; });\n  else if(typeof exports === 'object')\n    exports[\"URLToolkit\"] = URLToolkit;\n  else\n    root[\"URLToolkit\"] = URLToolkit;\n})(this);\n/* jshint ignore:end */\n","/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * Functions that generate fragmented MP4s suitable for use with Media\n * Source Extensions.\n */\n'use strict';\n\nvar UINT32_MAX = Math.pow(2, 32) - 1;\n\nvar box, dinf, esds, ftyp, mdat, mfhd, minf, moof, moov, mvex, mvhd,\n    trak, tkhd, mdia, mdhd, hdlr, sdtp, stbl, stsd, traf, trex,\n    trun, types, MAJOR_BRAND, MINOR_VERSION, AVC1_BRAND, VIDEO_HDLR,\n    AUDIO_HDLR, HDLR_TYPES, VMHD, SMHD, DREF, STCO, STSC, STSZ, STTS;\n\n// pre-calculate constants\n(function() {\n  var i;\n  types = {\n    avc1: [], // codingname\n    avcC: [],\n    btrt: [],\n    dinf: [],\n    dref: [],\n    esds: [],\n    ftyp: [],\n    hdlr: [],\n    mdat: [],\n    mdhd: [],\n    mdia: [],\n    mfhd: [],\n    minf: [],\n    moof: [],\n    moov: [],\n    mp4a: [], // codingname\n    mvex: [],\n    mvhd: [],\n    sdtp: [],\n    smhd: [],\n    stbl: [],\n    stco: [],\n    stsc: [],\n    stsd: [],\n    stsz: [],\n    stts: [],\n    styp: [],\n    tfdt: [],\n    tfhd: [],\n    traf: [],\n    trak: [],\n    trun: [],\n    trex: [],\n    tkhd: [],\n    vmhd: []\n  };\n\n  // In environments where Uint8Array is undefined (e.g., IE8), skip set up so that we\n  // don't throw an error\n  if (typeof Uint8Array === 'undefined') {\n    return;\n  }\n\n  for (i in types) {\n    if (types.hasOwnProperty(i)) {\n      types[i] = [\n        i.charCodeAt(0),\n        i.charCodeAt(1),\n        i.charCodeAt(2),\n        i.charCodeAt(3)\n      ];\n    }\n  }\n\n  MAJOR_BRAND = new Uint8Array([\n    'i'.charCodeAt(0),\n    's'.charCodeAt(0),\n    'o'.charCodeAt(0),\n    'm'.charCodeAt(0)\n  ]);\n  AVC1_BRAND = new Uint8Array([\n    'a'.charCodeAt(0),\n    'v'.charCodeAt(0),\n    'c'.charCodeAt(0),\n    '1'.charCodeAt(0)\n  ]);\n  MINOR_VERSION = new Uint8Array([0, 0, 0, 1]);\n  VIDEO_HDLR = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00, // pre_defined\n    0x76, 0x69, 0x64, 0x65, // handler_type: 'vide'\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x56, 0x69, 0x64, 0x65,\n    0x6f, 0x48, 0x61, 0x6e,\n    0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'VideoHandler'\n  ]);\n  AUDIO_HDLR = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00, // pre_defined\n    0x73, 0x6f, 0x75, 0x6e, // handler_type: 'soun'\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x53, 0x6f, 0x75, 0x6e,\n    0x64, 0x48, 0x61, 0x6e,\n    0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'SoundHandler'\n  ]);\n  HDLR_TYPES = {\n    video: VIDEO_HDLR,\n    audio: AUDIO_HDLR\n  };\n  DREF = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x01, // entry_count\n    0x00, 0x00, 0x00, 0x0c, // entry_size\n    0x75, 0x72, 0x6c, 0x20, // 'url' type\n    0x00, // version 0\n    0x00, 0x00, 0x01 // entry_flags\n  ]);\n  SMHD = new Uint8Array([\n    0x00,             // version\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00,       // balance, 0 means centered\n    0x00, 0x00        // reserved\n  ]);\n  STCO = new Uint8Array([\n    0x00, // version\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00 // entry_count\n  ]);\n  STSC = STCO;\n  STSZ = new Uint8Array([\n    0x00, // version\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00, // sample_size\n    0x00, 0x00, 0x00, 0x00 // sample_count\n  ]);\n  STTS = STCO;\n  VMHD = new Uint8Array([\n    0x00, // version\n    0x00, 0x00, 0x01, // flags\n    0x00, 0x00, // graphicsmode\n    0x00, 0x00,\n    0x00, 0x00,\n    0x00, 0x00 // opcolor\n  ]);\n}());\n\nbox = function(type) {\n  var\n    payload = [],\n    size = 0,\n    i,\n    result,\n    view;\n\n  for (i = 1; i < arguments.length; i++) {\n    payload.push(arguments[i]);\n  }\n\n  i = payload.length;\n\n  // calculate the total size we need to allocate\n  while (i--) {\n    size += payload[i].byteLength;\n  }\n  result = new Uint8Array(size + 8);\n  view = new DataView(result.buffer, result.byteOffset, result.byteLength);\n  view.setUint32(0, result.byteLength);\n  result.set(type, 4);\n\n  // copy the payload into the result\n  for (i = 0, size = 8; i < payload.length; i++) {\n    result.set(payload[i], size);\n    size += payload[i].byteLength;\n  }\n  return result;\n};\n\ndinf = function() {\n  return box(types.dinf, box(types.dref, DREF));\n};\n\nesds = function(track) {\n  return box(types.esds, new Uint8Array([\n    0x00, // version\n    0x00, 0x00, 0x00, // flags\n\n    // ES_Descriptor\n    0x03, // tag, ES_DescrTag\n    0x19, // length\n    0x00, 0x00, // ES_ID\n    0x00, // streamDependenceFlag, URL_flag, reserved, streamPriority\n\n    // DecoderConfigDescriptor\n    0x04, // tag, DecoderConfigDescrTag\n    0x11, // length\n    0x40, // object type\n    0x15,  // streamType\n    0x00, 0x06, 0x00, // bufferSizeDB\n    0x00, 0x00, 0xda, 0xc0, // maxBitrate\n    0x00, 0x00, 0xda, 0xc0, // avgBitrate\n\n    // DecoderSpecificInfo\n    0x05, // tag, DecoderSpecificInfoTag\n    0x02, // length\n    // ISO/IEC 14496-3, AudioSpecificConfig\n    // for samplingFrequencyIndex see ISO/IEC 13818-7:2006, 8.1.3.2.2, Table 35\n    (track.audioobjecttype << 3) | (track.samplingfrequencyindex >>> 1),\n    (track.samplingfrequencyindex << 7) | (track.channelcount << 3),\n    0x06, 0x01, 0x02 // GASpecificConfig\n  ]));\n};\n\nftyp = function() {\n  return box(types.ftyp, MAJOR_BRAND, MINOR_VERSION, MAJOR_BRAND, AVC1_BRAND);\n};\n\nhdlr = function(type) {\n  return box(types.hdlr, HDLR_TYPES[type]);\n};\nmdat = function(data) {\n  return box(types.mdat, data);\n};\nmdhd = function(track) {\n  var result = new Uint8Array([\n    0x00,                   // version 0\n    0x00, 0x00, 0x00,       // flags\n    0x00, 0x00, 0x00, 0x02, // creation_time\n    0x00, 0x00, 0x00, 0x03, // modification_time\n    0x00, 0x01, 0x5f, 0x90, // timescale, 90,000 \"ticks\" per second\n\n    (track.duration >>> 24) & 0xFF,\n    (track.duration >>> 16) & 0xFF,\n    (track.duration >>>  8) & 0xFF,\n    track.duration & 0xFF,  // duration\n    0x55, 0xc4,             // 'und' language (undetermined)\n    0x00, 0x00\n  ]);\n\n  // Use the sample rate from the track metadata, when it is\n  // defined. The sample rate can be parsed out of an ADTS header, for\n  // instance.\n  if (track.samplerate) {\n    result[12] = (track.samplerate >>> 24) & 0xFF;\n    result[13] = (track.samplerate >>> 16) & 0xFF;\n    result[14] = (track.samplerate >>>  8) & 0xFF;\n    result[15] = (track.samplerate)        & 0xFF;\n  }\n\n  return box(types.mdhd, result);\n};\nmdia = function(track) {\n  return box(types.mdia, mdhd(track), hdlr(track.type), minf(track));\n};\nmfhd = function(sequenceNumber) {\n  return box(types.mfhd, new Uint8Array([\n    0x00,\n    0x00, 0x00, 0x00, // flags\n    (sequenceNumber & 0xFF000000) >> 24,\n    (sequenceNumber & 0xFF0000) >> 16,\n    (sequenceNumber & 0xFF00) >> 8,\n    sequenceNumber & 0xFF // sequence_number\n  ]));\n};\nminf = function(track) {\n  return box(types.minf,\n             track.type === 'video' ? box(types.vmhd, VMHD) : box(types.smhd, SMHD),\n             dinf(),\n             stbl(track));\n};\nmoof = function(sequenceNumber, tracks) {\n  var\n    trackFragments = [],\n    i = tracks.length;\n  // build traf boxes for each track fragment\n  while (i--) {\n    trackFragments[i] = traf(tracks[i]);\n  }\n  return box.apply(null, [\n    types.moof,\n    mfhd(sequenceNumber)\n  ].concat(trackFragments));\n};\n/**\n * Returns a movie box.\n * @param tracks {array} the tracks associated with this movie\n * @see ISO/IEC 14496-12:2012(E), section 8.2.1\n */\nmoov = function(tracks) {\n  var\n    i = tracks.length,\n    boxes = [];\n\n  while (i--) {\n    boxes[i] = trak(tracks[i]);\n  }\n\n  return box.apply(null, [types.moov, mvhd(0xffffffff)].concat(boxes).concat(mvex(tracks)));\n};\nmvex = function(tracks) {\n  var\n    i = tracks.length,\n    boxes = [];\n\n  while (i--) {\n    boxes[i] = trex(tracks[i]);\n  }\n  return box.apply(null, [types.mvex].concat(boxes));\n};\nmvhd = function(duration) {\n  var\n    bytes = new Uint8Array([\n      0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x01, // creation_time\n      0x00, 0x00, 0x00, 0x02, // modification_time\n      0x00, 0x01, 0x5f, 0x90, // timescale, 90,000 \"ticks\" per second\n      (duration & 0xFF000000) >> 24,\n      (duration & 0xFF0000) >> 16,\n      (duration & 0xFF00) >> 8,\n      duration & 0xFF, // duration\n      0x00, 0x01, 0x00, 0x00, // 1.0 rate\n      0x01, 0x00, // 1.0 volume\n      0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x01, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, // pre_defined\n      0xff, 0xff, 0xff, 0xff // next_track_ID\n    ]);\n  return box(types.mvhd, bytes);\n};\n\nsdtp = function(track) {\n  var\n    samples = track.samples || [],\n    bytes = new Uint8Array(4 + samples.length),\n    flags,\n    i;\n\n  // leave the full box header (4 bytes) all zero\n\n  // write the sample table\n  for (i = 0; i < samples.length; i++) {\n    flags = samples[i].flags;\n\n    bytes[i + 4] = (flags.dependsOn << 4) |\n      (flags.isDependedOn << 2) |\n      (flags.hasRedundancy);\n  }\n\n  return box(types.sdtp,\n             bytes);\n};\n\nstbl = function(track) {\n  return box(types.stbl,\n             stsd(track),\n             box(types.stts, STTS),\n             box(types.stsc, STSC),\n             box(types.stsz, STSZ),\n             box(types.stco, STCO));\n};\n\n(function() {\n  var videoSample, audioSample;\n\n  stsd = function(track) {\n\n    return box(types.stsd, new Uint8Array([\n      0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x01\n    ]), track.type === 'video' ? videoSample(track) : audioSample(track));\n  };\n\n  videoSample = function(track) {\n    var\n      sps = track.sps || [],\n      pps = track.pps || [],\n      sequenceParameterSets = [],\n      pictureParameterSets = [],\n      i;\n\n    // assemble the SPSs\n    for (i = 0; i < sps.length; i++) {\n      sequenceParameterSets.push((sps[i].byteLength & 0xFF00) >>> 8);\n      sequenceParameterSets.push((sps[i].byteLength & 0xFF)); // sequenceParameterSetLength\n      sequenceParameterSets = sequenceParameterSets.concat(Array.prototype.slice.call(sps[i])); // SPS\n    }\n\n    // assemble the PPSs\n    for (i = 0; i < pps.length; i++) {\n      pictureParameterSets.push((pps[i].byteLength & 0xFF00) >>> 8);\n      pictureParameterSets.push((pps[i].byteLength & 0xFF));\n      pictureParameterSets = pictureParameterSets.concat(Array.prototype.slice.call(pps[i]));\n    }\n\n    return box(types.avc1, new Uint8Array([\n      0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, // data_reference_index\n      0x00, 0x00, // pre_defined\n      0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, // pre_defined\n      (track.width & 0xff00) >> 8,\n      track.width & 0xff, // width\n      (track.height & 0xff00) >> 8,\n      track.height & 0xff, // height\n      0x00, 0x48, 0x00, 0x00, // horizresolution\n      0x00, 0x48, 0x00, 0x00, // vertresolution\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, // frame_count\n      0x13,\n      0x76, 0x69, 0x64, 0x65,\n      0x6f, 0x6a, 0x73, 0x2d,\n      0x63, 0x6f, 0x6e, 0x74,\n      0x72, 0x69, 0x62, 0x2d,\n      0x68, 0x6c, 0x73, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, // compressorname\n      0x00, 0x18, // depth = 24\n      0x11, 0x11 // pre_defined = -1\n    ]), box(types.avcC, new Uint8Array([\n      0x01, // configurationVersion\n      track.profileIdc, // AVCProfileIndication\n      track.profileCompatibility, // profile_compatibility\n      track.levelIdc, // AVCLevelIndication\n      0xff // lengthSizeMinusOne, hard-coded to 4 bytes\n    ].concat([\n      sps.length // numOfSequenceParameterSets\n    ]).concat(sequenceParameterSets).concat([\n      pps.length // numOfPictureParameterSets\n    ]).concat(pictureParameterSets))), // \"PPS\"\n            box(types.btrt, new Uint8Array([\n              0x00, 0x1c, 0x9c, 0x80, // bufferSizeDB\n              0x00, 0x2d, 0xc6, 0xc0, // maxBitrate\n              0x00, 0x2d, 0xc6, 0xc0\n            ])) // avgBitrate\n              );\n  };\n\n  audioSample = function(track) {\n    return box(types.mp4a, new Uint8Array([\n\n      // SampleEntry, ISO/IEC 14496-12\n      0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, // data_reference_index\n\n      // AudioSampleEntry, ISO/IEC 14496-12\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      (track.channelcount & 0xff00) >> 8,\n      (track.channelcount & 0xff), // channelcount\n\n      (track.samplesize & 0xff00) >> 8,\n      (track.samplesize & 0xff), // samplesize\n      0x00, 0x00, // pre_defined\n      0x00, 0x00, // reserved\n\n      (track.samplerate & 0xff00) >> 8,\n      (track.samplerate & 0xff),\n      0x00, 0x00 // samplerate, 16.16\n\n      // MP4AudioSampleEntry, ISO/IEC 14496-14\n    ]), esds(track));\n  };\n}());\n\ntkhd = function(track) {\n  var result = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x07, // flags\n    0x00, 0x00, 0x00, 0x00, // creation_time\n    0x00, 0x00, 0x00, 0x00, // modification_time\n    (track.id & 0xFF000000) >> 24,\n    (track.id & 0xFF0000) >> 16,\n    (track.id & 0xFF00) >> 8,\n    track.id & 0xFF, // track_ID\n    0x00, 0x00, 0x00, 0x00, // reserved\n    (track.duration & 0xFF000000) >> 24,\n    (track.duration & 0xFF0000) >> 16,\n    (track.duration & 0xFF00) >> 8,\n    track.duration & 0xFF, // duration\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, // layer\n    0x00, 0x00, // alternate_group\n    0x01, 0x00, // non-audio track volume\n    0x00, 0x00, // reserved\n    0x00, 0x01, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x01, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\n    (track.width & 0xFF00) >> 8,\n    track.width & 0xFF,\n    0x00, 0x00, // width\n    (track.height & 0xFF00) >> 8,\n    track.height & 0xFF,\n    0x00, 0x00 // height\n  ]);\n\n  return box(types.tkhd, result);\n};\n\n/**\n * Generate a track fragment (traf) box. A traf box collects metadata\n * about tracks in a movie fragment (moof) box.\n */\ntraf = function(track) {\n  var trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun,\n      sampleDependencyTable, dataOffset,\n      upperWordBaseMediaDecodeTime, lowerWordBaseMediaDecodeTime;\n\n  trackFragmentHeader = box(types.tfhd, new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x3a, // flags\n    (track.id & 0xFF000000) >> 24,\n    (track.id & 0xFF0000) >> 16,\n    (track.id & 0xFF00) >> 8,\n    (track.id & 0xFF), // track_ID\n    0x00, 0x00, 0x00, 0x01, // sample_description_index\n    0x00, 0x00, 0x00, 0x00, // default_sample_duration\n    0x00, 0x00, 0x00, 0x00, // default_sample_size\n    0x00, 0x00, 0x00, 0x00  // default_sample_flags\n  ]));\n\n  upperWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime / (UINT32_MAX + 1));\n  lowerWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime % (UINT32_MAX + 1));\n\n  trackFragmentDecodeTime = box(types.tfdt, new Uint8Array([\n    0x01, // version 1\n    0x00, 0x00, 0x00, // flags\n    // baseMediaDecodeTime\n    (upperWordBaseMediaDecodeTime >>> 24) & 0xFF,\n    (upperWordBaseMediaDecodeTime >>> 16) & 0xFF,\n    (upperWordBaseMediaDecodeTime >>>  8) & 0xFF,\n    upperWordBaseMediaDecodeTime & 0xFF,\n    (lowerWordBaseMediaDecodeTime >>> 24) & 0xFF,\n    (lowerWordBaseMediaDecodeTime >>> 16) & 0xFF,\n    (lowerWordBaseMediaDecodeTime >>>  8) & 0xFF,\n    lowerWordBaseMediaDecodeTime & 0xFF\n  ]));\n\n  // the data offset specifies the number of bytes from the start of\n  // the containing moof to the first payload byte of the associated\n  // mdat\n  dataOffset = (32 + // tfhd\n                20 + // tfdt\n                8 +  // traf header\n                16 + // mfhd\n                8 +  // moof header\n                8);  // mdat header\n\n  // audio tracks require less metadata\n  if (track.type === 'audio') {\n    trackFragmentRun = trun(track, dataOffset);\n    return box(types.traf,\n               trackFragmentHeader,\n               trackFragmentDecodeTime,\n               trackFragmentRun);\n  }\n\n  // video tracks should contain an independent and disposable samples\n  // box (sdtp)\n  // generate one and adjust offsets to match\n  sampleDependencyTable = sdtp(track);\n  trackFragmentRun = trun(track,\n                          sampleDependencyTable.length + dataOffset);\n  return box(types.traf,\n             trackFragmentHeader,\n             trackFragmentDecodeTime,\n             trackFragmentRun,\n             sampleDependencyTable);\n};\n\n/**\n * Generate a track box.\n * @param track {object} a track definition\n * @return {Uint8Array} the track box\n */\ntrak = function(track) {\n  track.duration = track.duration || 0xffffffff;\n  return box(types.trak,\n             tkhd(track),\n             mdia(track));\n};\n\ntrex = function(track) {\n  var result = new Uint8Array([\n    0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    (track.id & 0xFF000000) >> 24,\n    (track.id & 0xFF0000) >> 16,\n    (track.id & 0xFF00) >> 8,\n    (track.id & 0xFF), // track_ID\n    0x00, 0x00, 0x00, 0x01, // default_sample_description_index\n    0x00, 0x00, 0x00, 0x00, // default_sample_duration\n    0x00, 0x00, 0x00, 0x00, // default_sample_size\n    0x00, 0x01, 0x00, 0x01 // default_sample_flags\n  ]);\n  // the last two bytes of default_sample_flags is the sample\n  // degradation priority, a hint about the importance of this sample\n  // relative to others. Lower the degradation priority for all sample\n  // types other than video.\n  if (track.type !== 'video') {\n    result[result.length - 1] = 0x00;\n  }\n\n  return box(types.trex, result);\n};\n\n(function() {\n  var audioTrun, videoTrun, trunHeader;\n\n  // This method assumes all samples are uniform. That is, if a\n  // duration is present for the first sample, it will be present for\n  // all subsequent samples.\n  // see ISO/IEC 14496-12:2012, Section 8.8.8.1\n  trunHeader = function(samples, offset) {\n    var durationPresent = 0, sizePresent = 0,\n        flagsPresent = 0, compositionTimeOffset = 0;\n\n    // trun flag constants\n    if (samples.length) {\n      if (samples[0].duration !== undefined) {\n        durationPresent = 0x1;\n      }\n      if (samples[0].size !== undefined) {\n        sizePresent = 0x2;\n      }\n      if (samples[0].flags !== undefined) {\n        flagsPresent = 0x4;\n      }\n      if (samples[0].compositionTimeOffset !== undefined) {\n        compositionTimeOffset = 0x8;\n      }\n    }\n\n    return [\n      0x00, // version 0\n      0x00,\n      durationPresent | sizePresent | flagsPresent | compositionTimeOffset,\n      0x01, // flags\n      (samples.length & 0xFF000000) >>> 24,\n      (samples.length & 0xFF0000) >>> 16,\n      (samples.length & 0xFF00) >>> 8,\n      samples.length & 0xFF, // sample_count\n      (offset & 0xFF000000) >>> 24,\n      (offset & 0xFF0000) >>> 16,\n      (offset & 0xFF00) >>> 8,\n      offset & 0xFF // data_offset\n    ];\n  };\n\n  videoTrun = function(track, offset) {\n    var bytes, samples, sample, i;\n\n    samples = track.samples || [];\n    offset += 8 + 12 + (16 * samples.length);\n\n    bytes = trunHeader(samples, offset);\n\n    for (i = 0; i < samples.length; i++) {\n      sample = samples[i];\n      bytes = bytes.concat([\n        (sample.duration & 0xFF000000) >>> 24,\n        (sample.duration & 0xFF0000) >>> 16,\n        (sample.duration & 0xFF00) >>> 8,\n        sample.duration & 0xFF, // sample_duration\n        (sample.size & 0xFF000000) >>> 24,\n        (sample.size & 0xFF0000) >>> 16,\n        (sample.size & 0xFF00) >>> 8,\n        sample.size & 0xFF, // sample_size\n        (sample.flags.isLeading << 2) | sample.flags.dependsOn,\n        (sample.flags.isDependedOn << 6) |\n          (sample.flags.hasRedundancy << 4) |\n          (sample.flags.paddingValue << 1) |\n          sample.flags.isNonSyncSample,\n        sample.flags.degradationPriority & 0xF0 << 8,\n        sample.flags.degradationPriority & 0x0F, // sample_flags\n        (sample.compositionTimeOffset & 0xFF000000) >>> 24,\n        (sample.compositionTimeOffset & 0xFF0000) >>> 16,\n        (sample.compositionTimeOffset & 0xFF00) >>> 8,\n        sample.compositionTimeOffset & 0xFF // sample_composition_time_offset\n      ]);\n    }\n    return box(types.trun, new Uint8Array(bytes));\n  };\n\n  audioTrun = function(track, offset) {\n    var bytes, samples, sample, i;\n\n    samples = track.samples || [];\n    offset += 8 + 12 + (8 * samples.length);\n\n    bytes = trunHeader(samples, offset);\n\n    for (i = 0; i < samples.length; i++) {\n      sample = samples[i];\n      bytes = bytes.concat([\n        (sample.duration & 0xFF000000) >>> 24,\n        (sample.duration & 0xFF0000) >>> 16,\n        (sample.duration & 0xFF00) >>> 8,\n        sample.duration & 0xFF, // sample_duration\n        (sample.size & 0xFF000000) >>> 24,\n        (sample.size & 0xFF0000) >>> 16,\n        (sample.size & 0xFF00) >>> 8,\n        sample.size & 0xFF]); // sample_size\n    }\n\n    return box(types.trun, new Uint8Array(bytes));\n  };\n\n  trun = function(track, offset) {\n    if (track.type === 'audio') {\n      return audioTrun(track, offset);\n    }\n\n    return videoTrun(track, offset);\n  };\n}());\n\nmodule.exports = {\n  ftyp: ftyp,\n  mdat: mdat,\n  moof: moof,\n  moov: moov,\n  initSegment: function(tracks) {\n    var\n      fileType = ftyp(),\n      movie = moov(tracks),\n      result;\n\n    result = new Uint8Array(fileType.byteLength + movie.byteLength);\n    result.set(fileType);\n    result.set(movie, fileType.byteLength);\n    return result;\n  }\n};\n","/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * Reads in-band caption information from a video elementary\n * stream. Captions must follow the CEA-708 standard for injection\n * into an MPEG-2 transport streams.\n * @see https://en.wikipedia.org/wiki/CEA-708\n * @see https://www.gpo.gov/fdsys/pkg/CFR-2007-title47-vol1/pdf/CFR-2007-title47-vol1-sec15-119.pdf\n */\n\n'use strict';\n\n// -----------------\n// Link To Transport\n// -----------------\n\nvar Stream = require('../utils/stream');\nvar cea708Parser = require('../tools/caption-packet-parser');\n\nvar CaptionStream = function() {\n\n  CaptionStream.prototype.init.call(this);\n\n  this.captionPackets_ = [];\n\n  this.ccStreams_ = [\n    new Cea608Stream(0, 0), // eslint-disable-line no-use-before-define\n    new Cea608Stream(0, 1), // eslint-disable-line no-use-before-define\n    new Cea608Stream(1, 0), // eslint-disable-line no-use-before-define\n    new Cea608Stream(1, 1) // eslint-disable-line no-use-before-define\n  ];\n\n  this.reset();\n\n  // forward data and done events from CCs to this CaptionStream\n  this.ccStreams_.forEach(function(cc) {\n    cc.on('data', this.trigger.bind(this, 'data'));\n    cc.on('done', this.trigger.bind(this, 'done'));\n  }, this);\n\n};\n\nCaptionStream.prototype = new Stream();\nCaptionStream.prototype.push = function(event) {\n  var sei, userData, newCaptionPackets;\n\n  // only examine SEI NALs\n  if (event.nalUnitType !== 'sei_rbsp') {\n    return;\n  }\n\n  // parse the sei\n  sei = cea708Parser.parseSei(event.escapedRBSP);\n\n  // ignore everything but user_data_registered_itu_t_t35\n  if (sei.payloadType !== cea708Parser.USER_DATA_REGISTERED_ITU_T_T35) {\n    return;\n  }\n\n  // parse out the user data payload\n  userData = cea708Parser.parseUserData(sei);\n\n  // ignore unrecognized userData\n  if (!userData) {\n    return;\n  }\n\n  // Sometimes, the same segment # will be downloaded twice. To stop the\n  // caption data from being processed twice, we track the latest dts we've\n  // received and ignore everything with a dts before that. However, since\n  // data for a specific dts can be split across packets on either side of\n  // a segment boundary, we need to make sure we *don't* ignore the packets\n  // from the *next* segment that have dts === this.latestDts_. By constantly\n  // tracking the number of packets received with dts === this.latestDts_, we\n  // know how many should be ignored once we start receiving duplicates.\n  if (event.dts < this.latestDts_) {\n    // We've started getting older data, so set the flag.\n    this.ignoreNextEqualDts_ = true;\n    return;\n  } else if ((event.dts === this.latestDts_) && (this.ignoreNextEqualDts_)) {\n    this.numSameDts_--;\n    if (!this.numSameDts_) {\n      // We've received the last duplicate packet, time to start processing again\n      this.ignoreNextEqualDts_ = false;\n    }\n    return;\n  }\n\n  // parse out CC data packets and save them for later\n  newCaptionPackets = cea708Parser.parseCaptionPackets(event.pts, userData);\n  this.captionPackets_ = this.captionPackets_.concat(newCaptionPackets);\n  if (this.latestDts_ !== event.dts) {\n    this.numSameDts_ = 0;\n  }\n  this.numSameDts_++;\n  this.latestDts_ = event.dts;\n};\n\nCaptionStream.prototype.flush = function() {\n  // make sure we actually parsed captions before proceeding\n  if (!this.captionPackets_.length) {\n    this.ccStreams_.forEach(function(cc) {\n      cc.flush();\n    }, this);\n    return;\n  }\n\n  // In Chrome, the Array#sort function is not stable so add a\n  // presortIndex that we can use to ensure we get a stable-sort\n  this.captionPackets_.forEach(function(elem, idx) {\n    elem.presortIndex = idx;\n  });\n\n  // sort caption byte-pairs based on their PTS values\n  this.captionPackets_.sort(function(a, b) {\n    if (a.pts === b.pts) {\n      return a.presortIndex - b.presortIndex;\n    }\n    return a.pts - b.pts;\n  });\n\n  this.captionPackets_.forEach(function(packet) {\n    if (packet.type < 2) {\n      // Dispatch packet to the right Cea608Stream\n      this.dispatchCea608Packet(packet);\n    }\n    // this is where an 'else' would go for a dispatching packets\n    // to a theoretical Cea708Stream that handles SERVICEn data\n  }, this);\n\n  this.captionPackets_.length = 0;\n  this.ccStreams_.forEach(function(cc) {\n    cc.flush();\n  }, this);\n  return;\n};\n\nCaptionStream.prototype.reset = function() {\n  this.latestDts_ = null;\n  this.ignoreNextEqualDts_ = false;\n  this.numSameDts_ = 0;\n  this.activeCea608Channel_ = [null, null];\n  this.ccStreams_.forEach(function(ccStream) {\n    ccStream.reset();\n  });\n};\n\nCaptionStream.prototype.dispatchCea608Packet = function(packet) {\n  // NOTE: packet.type is the CEA608 field\n  if (this.setsChannel1Active(packet)) {\n    this.activeCea608Channel_[packet.type] = 0;\n  } else if (this.setsChannel2Active(packet)) {\n    this.activeCea608Channel_[packet.type] = 1;\n  }\n  if (this.activeCea608Channel_[packet.type] === null) {\n    // If we haven't received anything to set the active channel, discard the\n    // data; we don't want jumbled captions\n    return;\n  }\n  this.ccStreams_[(packet.type << 1) + this.activeCea608Channel_[packet.type]].push(packet);\n};\n\nCaptionStream.prototype.setsChannel1Active = function(packet) {\n  return ((packet.ccData & 0x7800) === 0x1000);\n};\nCaptionStream.prototype.setsChannel2Active = function(packet) {\n  return ((packet.ccData & 0x7800) === 0x1800);\n};\n\n// ----------------------\n// Session to Application\n// ----------------------\n\n// This hash maps non-ASCII, special, and extended character codes to their\n// proper Unicode equivalent. The first keys that are only a single byte\n// are the non-standard ASCII characters, which simply map the CEA608 byte\n// to the standard ASCII/Unicode. The two-byte keys that follow are the CEA608\n// character codes, but have their MSB bitmasked with 0x03 so that a lookup\n// can be performed regardless of the field and data channel on which the\n// character code was received.\nvar CHARACTER_TRANSLATION = {\n  0x2a: 0xe1,     // á\n  0x5c: 0xe9,     // é\n  0x5e: 0xed,     // í\n  0x5f: 0xf3,     // ó\n  0x60: 0xfa,     // ú\n  0x7b: 0xe7,     // ç\n  0x7c: 0xf7,     // ÷\n  0x7d: 0xd1,     // Ñ\n  0x7e: 0xf1,     // ñ\n  0x7f: 0x2588,   // █\n  0x0130: 0xae,   // ®\n  0x0131: 0xb0,   // °\n  0x0132: 0xbd,   // ½\n  0x0133: 0xbf,   // ¿\n  0x0134: 0x2122, // ™\n  0x0135: 0xa2,   // ¢\n  0x0136: 0xa3,   // £\n  0x0137: 0x266a, // ♪\n  0x0138: 0xe0,   // à\n  0x0139: 0xa0,   //\n  0x013a: 0xe8,   // è\n  0x013b: 0xe2,   // â\n  0x013c: 0xea,   // ê\n  0x013d: 0xee,   // î\n  0x013e: 0xf4,   // ô\n  0x013f: 0xfb,   // û\n  0x0220: 0xc1,   // Á\n  0x0221: 0xc9,   // É\n  0x0222: 0xd3,   // Ó\n  0x0223: 0xda,   // Ú\n  0x0224: 0xdc,   // Ü\n  0x0225: 0xfc,   // ü\n  0x0226: 0x2018, // ‘\n  0x0227: 0xa1,   // ¡\n  0x0228: 0x2a,   // *\n  0x0229: 0x27,   // '\n  0x022a: 0x2014, // —\n  0x022b: 0xa9,   // ©\n  0x022c: 0x2120, // ℠\n  0x022d: 0x2022, // •\n  0x022e: 0x201c, // “\n  0x022f: 0x201d, // ”\n  0x0230: 0xc0,   // À\n  0x0231: 0xc2,   // Â\n  0x0232: 0xc7,   // Ç\n  0x0233: 0xc8,   // È\n  0x0234: 0xca,   // Ê\n  0x0235: 0xcb,   // Ë\n  0x0236: 0xeb,   // ë\n  0x0237: 0xce,   // Î\n  0x0238: 0xcf,   // Ï\n  0x0239: 0xef,   // ï\n  0x023a: 0xd4,   // Ô\n  0x023b: 0xd9,   // Ù\n  0x023c: 0xf9,   // ù\n  0x023d: 0xdb,   // Û\n  0x023e: 0xab,   // «\n  0x023f: 0xbb,   // »\n  0x0320: 0xc3,   // Ã\n  0x0321: 0xe3,   // ã\n  0x0322: 0xcd,   // Í\n  0x0323: 0xcc,   // Ì\n  0x0324: 0xec,   // ì\n  0x0325: 0xd2,   // Ò\n  0x0326: 0xf2,   // ò\n  0x0327: 0xd5,   // Õ\n  0x0328: 0xf5,   // õ\n  0x0329: 0x7b,   // {\n  0x032a: 0x7d,   // }\n  0x032b: 0x5c,   // \\\n  0x032c: 0x5e,   // ^\n  0x032d: 0x5f,   // _\n  0x032e: 0x7c,   // |\n  0x032f: 0x7e,   // ~\n  0x0330: 0xc4,   // Ä\n  0x0331: 0xe4,   // ä\n  0x0332: 0xd6,   // Ö\n  0x0333: 0xf6,   // ö\n  0x0334: 0xdf,   // ß\n  0x0335: 0xa5,   // ¥\n  0x0336: 0xa4,   // ¤\n  0x0337: 0x2502, // │\n  0x0338: 0xc5,   // Å\n  0x0339: 0xe5,   // å\n  0x033a: 0xd8,   // Ø\n  0x033b: 0xf8,   // ø\n  0x033c: 0x250c, // ┌\n  0x033d: 0x2510, // ┐\n  0x033e: 0x2514, // └\n  0x033f: 0x2518  // ┘\n};\n\nvar getCharFromCode = function(code) {\n  if (code === null) {\n    return '';\n  }\n  code = CHARACTER_TRANSLATION[code] || code;\n  return String.fromCharCode(code);\n};\n\n// the index of the last row in a CEA-608 display buffer\nvar BOTTOM_ROW = 14;\n\n// This array is used for mapping PACs -> row #, since there's no way of\n// getting it through bit logic.\nvar ROWS = [0x1100, 0x1120, 0x1200, 0x1220, 0x1500, 0x1520, 0x1600, 0x1620,\n            0x1700, 0x1720, 0x1000, 0x1300, 0x1320, 0x1400, 0x1420];\n\n// CEA-608 captions are rendered onto a 34x15 matrix of character\n// cells. The \"bottom\" row is the last element in the outer array.\nvar createDisplayBuffer = function() {\n  var result = [], i = BOTTOM_ROW + 1;\n  while (i--) {\n    result.push('');\n  }\n  return result;\n};\n\nvar Cea608Stream = function(field, dataChannel) {\n  Cea608Stream.prototype.init.call(this);\n\n  this.field_ = field || 0;\n  this.dataChannel_ = dataChannel || 0;\n\n  this.name_ = 'CC' + (((this.field_ << 1) | this.dataChannel_) + 1);\n\n  this.setConstants();\n  this.reset();\n\n  this.push = function(packet) {\n    var data, swap, char0, char1, text;\n    // remove the parity bits\n    data = packet.ccData & 0x7f7f;\n\n    // ignore duplicate control codes; the spec demands they're sent twice\n    if (data === this.lastControlCode_) {\n      this.lastControlCode_ = null;\n      return;\n    }\n\n    // Store control codes\n    if ((data & 0xf000) === 0x1000) {\n      this.lastControlCode_ = data;\n    } else if (data !== this.PADDING_) {\n      this.lastControlCode_ = null;\n    }\n\n    char0 = data >>> 8;\n    char1 = data & 0xff;\n\n    if (data === this.PADDING_) {\n      return;\n\n    } else if (data === this.RESUME_CAPTION_LOADING_) {\n      this.mode_ = 'popOn';\n\n    } else if (data === this.END_OF_CAPTION_) {\n      // If an EOC is received while in paint-on mode, the displayed caption\n      // text should be swapped to non-displayed memory as if it was a pop-on\n      // caption. Because of that, we should explicitly switch back to pop-on\n      // mode\n      this.mode_ = 'popOn';\n      this.clearFormatting(packet.pts);\n      // if a caption was being displayed, it's gone now\n      this.flushDisplayed(packet.pts);\n\n      // flip memory\n      swap = this.displayed_;\n      this.displayed_ = this.nonDisplayed_;\n      this.nonDisplayed_ = swap;\n\n      // start measuring the time to display the caption\n      this.startPts_ = packet.pts;\n\n    } else if (data === this.ROLL_UP_2_ROWS_) {\n      this.rollUpRows_ = 2;\n      this.setRollUp(packet.pts);\n    } else if (data === this.ROLL_UP_3_ROWS_) {\n      this.rollUpRows_ = 3;\n      this.setRollUp(packet.pts);\n    } else if (data === this.ROLL_UP_4_ROWS_) {\n      this.rollUpRows_ = 4;\n      this.setRollUp(packet.pts);\n    } else if (data === this.CARRIAGE_RETURN_) {\n      this.clearFormatting(packet.pts);\n      this.flushDisplayed(packet.pts);\n      this.shiftRowsUp_();\n      this.startPts_ = packet.pts;\n\n    } else if (data === this.BACKSPACE_) {\n      if (this.mode_ === 'popOn') {\n        this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);\n      } else {\n        this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1);\n      }\n    } else if (data === this.ERASE_DISPLAYED_MEMORY_) {\n      this.flushDisplayed(packet.pts);\n      this.displayed_ = createDisplayBuffer();\n    } else if (data === this.ERASE_NON_DISPLAYED_MEMORY_) {\n      this.nonDisplayed_ = createDisplayBuffer();\n\n    } else if (data === this.RESUME_DIRECT_CAPTIONING_) {\n      if (this.mode_ !== 'paintOn') {\n        // NOTE: This should be removed when proper caption positioning is\n        // implemented\n        this.flushDisplayed(packet.pts);\n        this.displayed_ = createDisplayBuffer();\n      }\n      this.mode_ = 'paintOn';\n      this.startPts_ = packet.pts;\n\n    // Append special characters to caption text\n    } else if (this.isSpecialCharacter(char0, char1)) {\n      // Bitmask char0 so that we can apply character transformations\n      // regardless of field and data channel.\n      // Then byte-shift to the left and OR with char1 so we can pass the\n      // entire character code to `getCharFromCode`.\n      char0 = (char0 & 0x03) << 8;\n      text = getCharFromCode(char0 | char1);\n      this[this.mode_](packet.pts, text);\n      this.column_++;\n\n    // Append extended characters to caption text\n    } else if (this.isExtCharacter(char0, char1)) {\n      // Extended characters always follow their \"non-extended\" equivalents.\n      // IE if a \"è\" is desired, you'll always receive \"eè\"; non-compliant\n      // decoders are supposed to drop the \"è\", while compliant decoders\n      // backspace the \"e\" and insert \"è\".\n\n      // Delete the previous character\n      if (this.mode_ === 'popOn') {\n        this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);\n      } else {\n        this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1);\n      }\n\n      // Bitmask char0 so that we can apply character transformations\n      // regardless of field and data channel.\n      // Then byte-shift to the left and OR with char1 so we can pass the\n      // entire character code to `getCharFromCode`.\n      char0 = (char0 & 0x03) << 8;\n      text = getCharFromCode(char0 | char1);\n      this[this.mode_](packet.pts, text);\n      this.column_++;\n\n    // Process mid-row codes\n    } else if (this.isMidRowCode(char0, char1)) {\n      // Attributes are not additive, so clear all formatting\n      this.clearFormatting(packet.pts);\n\n      // According to the standard, mid-row codes\n      // should be replaced with spaces, so add one now\n      this[this.mode_](packet.pts, ' ');\n      this.column_++;\n\n      if ((char1 & 0xe) === 0xe) {\n        this.addFormatting(packet.pts, ['i']);\n      }\n\n      if ((char1 & 0x1) === 0x1) {\n        this.addFormatting(packet.pts, ['u']);\n      }\n\n    // Detect offset control codes and adjust cursor\n    } else if (this.isOffsetControlCode(char0, char1)) {\n      // Cursor position is set by indent PAC (see below) in 4-column\n      // increments, with an additional offset code of 1-3 to reach any\n      // of the 32 columns specified by CEA-608. So all we need to do\n      // here is increment the column cursor by the given offset.\n      this.column_ += (char1 & 0x03);\n\n    // Detect PACs (Preamble Address Codes)\n    } else if (this.isPAC(char0, char1)) {\n\n      // There's no logic for PAC -> row mapping, so we have to just\n      // find the row code in an array and use its index :(\n      var row = ROWS.indexOf(data & 0x1f20);\n\n      // Configure the caption window if we're in roll-up mode\n      if (this.mode_ === 'rollUp') {\n        this.setRollUp(packet.pts, row);\n      }\n\n      if (row !== this.row_) {\n        // formatting is only persistent for current row\n        this.clearFormatting(packet.pts);\n        this.row_ = row;\n      }\n      // All PACs can apply underline, so detect and apply\n      // (All odd-numbered second bytes set underline)\n      if ((char1 & 0x1) && (this.formatting_.indexOf('u') === -1)) {\n          this.addFormatting(packet.pts, ['u']);\n      }\n\n      if ((data & 0x10) === 0x10) {\n        // We've got an indent level code. Each successive even number\n        // increments the column cursor by 4, so we can get the desired\n        // column position by bit-shifting to the right (to get n/2)\n        // and multiplying by 4.\n        this.column_ = ((data & 0xe) >> 1) * 4;\n      }\n\n      if (this.isColorPAC(char1)) {\n        // it's a color code, though we only support white, which\n        // can be either normal or italicized. white italics can be\n        // either 0x4e or 0x6e depending on the row, so we just\n        // bitwise-and with 0xe to see if italics should be turned on\n        if ((char1 & 0xe) === 0xe) {\n          this.addFormatting(packet.pts, ['i']);\n        }\n      }\n\n    // We have a normal character in char0, and possibly one in char1\n    } else if (this.isNormalChar(char0)) {\n      if (char1 === 0x00) {\n        char1 = null;\n      }\n      text = getCharFromCode(char0);\n      text += getCharFromCode(char1);\n      this[this.mode_](packet.pts, text);\n      this.column_ += text.length;\n\n    } // finish data processing\n\n  };\n};\nCea608Stream.prototype = new Stream();\n// Trigger a cue point that captures the current state of the\n// display buffer\nCea608Stream.prototype.flushDisplayed = function(pts) {\n  var content = this.displayed_\n    // remove spaces from the start and end of the string\n    .map(function(row) {\n      return row.trim();\n    })\n    // combine all text rows to display in one cue\n    .join('\\n')\n    // and remove blank rows from the start and end, but not the middle\n    .replace(/^\\n+|\\n+$/g, '');\n\n  if (content.length) {\n    this.trigger('data', {\n      startPts: this.startPts_,\n      endPts: pts,\n      text: content,\n      stream: this.name_\n    });\n  }\n};\n\n/**\n * Zero out the data, used for startup and on seek\n */\nCea608Stream.prototype.reset = function() {\n  this.mode_ = 'popOn';\n  // When in roll-up mode, the index of the last row that will\n  // actually display captions. If a caption is shifted to a row\n  // with a lower index than this, it is cleared from the display\n  // buffer\n  this.topRow_ = 0;\n  this.startPts_ = 0;\n  this.displayed_ = createDisplayBuffer();\n  this.nonDisplayed_ = createDisplayBuffer();\n  this.lastControlCode_ = null;\n\n  // Track row and column for proper line-breaking and spacing\n  this.column_ = 0;\n  this.row_ = BOTTOM_ROW;\n  this.rollUpRows_ = 2;\n\n  // This variable holds currently-applied formatting\n  this.formatting_ = [];\n};\n\n/**\n * Sets up control code and related constants for this instance\n */\nCea608Stream.prototype.setConstants = function() {\n  // The following attributes have these uses:\n  // ext_ :    char0 for mid-row codes, and the base for extended\n  //           chars (ext_+0, ext_+1, and ext_+2 are char0s for\n  //           extended codes)\n  // control_: char0 for control codes, except byte-shifted to the\n  //           left so that we can do this.control_ | CONTROL_CODE\n  // offset_:  char0 for tab offset codes\n  //\n  // It's also worth noting that control codes, and _only_ control codes,\n  // differ between field 1 and field2. Field 2 control codes are always\n  // their field 1 value plus 1. That's why there's the \"| field\" on the\n  // control value.\n  if (this.dataChannel_ === 0) {\n    this.BASE_     = 0x10;\n    this.EXT_      = 0x11;\n    this.CONTROL_  = (0x14 | this.field_) << 8;\n    this.OFFSET_   = 0x17;\n  } else if (this.dataChannel_ === 1) {\n    this.BASE_     = 0x18;\n    this.EXT_      = 0x19;\n    this.CONTROL_  = (0x1c | this.field_) << 8;\n    this.OFFSET_   = 0x1f;\n  }\n\n  // Constants for the LSByte command codes recognized by Cea608Stream. This\n  // list is not exhaustive. For a more comprehensive listing and semantics see\n  // http://www.gpo.gov/fdsys/pkg/CFR-2010-title47-vol1/pdf/CFR-2010-title47-vol1-sec15-119.pdf\n  // Padding\n  this.PADDING_                    = 0x0000;\n  // Pop-on Mode\n  this.RESUME_CAPTION_LOADING_     = this.CONTROL_ | 0x20;\n  this.END_OF_CAPTION_             = this.CONTROL_ | 0x2f;\n  // Roll-up Mode\n  this.ROLL_UP_2_ROWS_             = this.CONTROL_ | 0x25;\n  this.ROLL_UP_3_ROWS_             = this.CONTROL_ | 0x26;\n  this.ROLL_UP_4_ROWS_             = this.CONTROL_ | 0x27;\n  this.CARRIAGE_RETURN_            = this.CONTROL_ | 0x2d;\n  // paint-on mode\n  this.RESUME_DIRECT_CAPTIONING_   = this.CONTROL_ | 0x29;\n  // Erasure\n  this.BACKSPACE_                  = this.CONTROL_ | 0x21;\n  this.ERASE_DISPLAYED_MEMORY_     = this.CONTROL_ | 0x2c;\n  this.ERASE_NON_DISPLAYED_MEMORY_ = this.CONTROL_ | 0x2e;\n};\n\n/**\n * Detects if the 2-byte packet data is a special character\n *\n * Special characters have a second byte in the range 0x30 to 0x3f,\n * with the first byte being 0x11 (for data channel 1) or 0x19 (for\n * data channel 2).\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are an special character\n */\nCea608Stream.prototype.isSpecialCharacter = function(char0, char1) {\n  return (char0 === this.EXT_ && char1 >= 0x30 && char1 <= 0x3f);\n};\n\n/**\n * Detects if the 2-byte packet data is an extended character\n *\n * Extended characters have a second byte in the range 0x20 to 0x3f,\n * with the first byte being 0x12 or 0x13 (for data channel 1) or\n * 0x1a or 0x1b (for data channel 2).\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are an extended character\n */\nCea608Stream.prototype.isExtCharacter = function(char0, char1) {\n  return ((char0 === (this.EXT_ + 1) || char0 === (this.EXT_ + 2)) &&\n    (char1 >= 0x20 && char1 <= 0x3f));\n};\n\n/**\n * Detects if the 2-byte packet is a mid-row code\n *\n * Mid-row codes have a second byte in the range 0x20 to 0x2f, with\n * the first byte being 0x11 (for data channel 1) or 0x19 (for data\n * channel 2).\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are a mid-row code\n */\nCea608Stream.prototype.isMidRowCode = function(char0, char1) {\n  return (char0 === this.EXT_ && (char1 >= 0x20 && char1 <= 0x2f));\n};\n\n/**\n * Detects if the 2-byte packet is an offset control code\n *\n * Offset control codes have a second byte in the range 0x21 to 0x23,\n * with the first byte being 0x17 (for data channel 1) or 0x1f (for\n * data channel 2).\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are an offset control code\n */\nCea608Stream.prototype.isOffsetControlCode = function(char0, char1) {\n  return (char0 === this.OFFSET_ && (char1 >= 0x21 && char1 <= 0x23));\n};\n\n/**\n * Detects if the 2-byte packet is a Preamble Address Code\n *\n * PACs have a first byte in the range 0x10 to 0x17 (for data channel 1)\n * or 0x18 to 0x1f (for data channel 2), with the second byte in the\n * range 0x40 to 0x7f.\n *\n * @param  {Integer} char0 The first byte\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the 2 bytes are a PAC\n */\nCea608Stream.prototype.isPAC = function(char0, char1) {\n  return (char0 >= this.BASE_ && char0 < (this.BASE_ + 8) &&\n    (char1 >= 0x40 && char1 <= 0x7f));\n};\n\n/**\n * Detects if a packet's second byte is in the range of a PAC color code\n *\n * PAC color codes have the second byte be in the range 0x40 to 0x4f, or\n * 0x60 to 0x6f.\n *\n * @param  {Integer} char1 The second byte\n * @return {Boolean}       Whether the byte is a color PAC\n */\nCea608Stream.prototype.isColorPAC = function(char1) {\n  return ((char1 >= 0x40 && char1 <= 0x4f) || (char1 >= 0x60 && char1 <= 0x7f));\n};\n\n/**\n * Detects if a single byte is in the range of a normal character\n *\n * Normal text bytes are in the range 0x20 to 0x7f.\n *\n * @param  {Integer} char  The byte\n * @return {Boolean}       Whether the byte is a normal character\n */\nCea608Stream.prototype.isNormalChar = function(char) {\n  return (char >= 0x20 && char <= 0x7f);\n};\n\n/**\n * Configures roll-up\n *\n * @param  {Integer} pts         Current PTS\n * @param  {Integer} newBaseRow  Used by PACs to slide the current window to\n *                               a new position\n */\nCea608Stream.prototype.setRollUp = function(pts, newBaseRow) {\n  // Reset the base row to the bottom row when switching modes\n  if (this.mode_ !== 'rollUp') {\n    this.row_ = BOTTOM_ROW;\n    this.mode_ = 'rollUp';\n    // Spec says to wipe memories when switching to roll-up\n    this.flushDisplayed(pts);\n    this.nonDisplayed_ = createDisplayBuffer();\n    this.displayed_ = createDisplayBuffer();\n  }\n\n  if (newBaseRow !== undefined && newBaseRow !== this.row_) {\n    // move currently displayed captions (up or down) to the new base row\n    for (var i = 0; i < this.rollUpRows_; i++) {\n      this.displayed_[newBaseRow - i] = this.displayed_[this.row_ - i];\n      this.displayed_[this.row_ - i] = '';\n    }\n  }\n\n  if (newBaseRow === undefined) {\n    newBaseRow = this.row_;\n  }\n  this.topRow_ = newBaseRow - this.rollUpRows_ + 1;\n};\n\n// Adds the opening HTML tag for the passed character to the caption text,\n// and keeps track of it for later closing\nCea608Stream.prototype.addFormatting = function(pts, format) {\n  this.formatting_ = this.formatting_.concat(format);\n  var text = format.reduce(function(text, format) {\n    return text + '<' + format + '>';\n  }, '');\n  this[this.mode_](pts, text);\n};\n\n// Adds HTML closing tags for current formatting to caption text and\n// clears remembered formatting\nCea608Stream.prototype.clearFormatting = function(pts) {\n  if (!this.formatting_.length) {\n    return;\n  }\n  var text = this.formatting_.reverse().reduce(function(text, format) {\n    return text + '</' + format + '>';\n  }, '');\n  this.formatting_ = [];\n  this[this.mode_](pts, text);\n};\n\n// Mode Implementations\nCea608Stream.prototype.popOn = function(pts, text) {\n  var baseRow = this.nonDisplayed_[this.row_];\n\n  // buffer characters\n  baseRow += text;\n  this.nonDisplayed_[this.row_] = baseRow;\n};\n\nCea608Stream.prototype.rollUp = function(pts, text) {\n  var baseRow = this.displayed_[this.row_];\n\n  baseRow += text;\n  this.displayed_[this.row_] = baseRow;\n\n};\n\nCea608Stream.prototype.shiftRowsUp_ = function() {\n  var i;\n  // clear out inactive rows\n  for (i = 0; i < this.topRow_; i++) {\n    this.displayed_[i] = '';\n  }\n  for (i = this.row_ + 1; i < BOTTOM_ROW + 1; i++) {\n    this.displayed_[i] = '';\n  }\n  // shift displayed rows up\n  for (i = this.topRow_; i < this.row_; i++) {\n    this.displayed_[i] = this.displayed_[i + 1];\n  }\n  // clear out the bottom row\n  this.displayed_[this.row_] = '';\n};\n\nCea608Stream.prototype.paintOn = function(pts, text) {\n  var baseRow = this.displayed_[this.row_];\n\n  baseRow += text;\n  this.displayed_[this.row_] = baseRow;\n};\n\n// exports\nmodule.exports = {\n  CaptionStream: CaptionStream,\n  Cea608Stream: Cea608Stream\n};\n","/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * Reads in-band caption information from a video elementary\n * stream. Captions must follow the CEA-708 standard for injection\n * into an MPEG-2 transport streams.\n * @see https://en.wikipedia.org/wiki/CEA-708\n * @see https://www.gpo.gov/fdsys/pkg/CFR-2007-title47-vol1/pdf/CFR-2007-title47-vol1-sec15-119.pdf\n */\n\n'use strict';\n\n// Supplemental enhancement information (SEI) NAL units have a\n// payload type field to indicate how they are to be\n// interpreted. CEAS-708 caption content is always transmitted with\n// payload type 0x04.\nvar USER_DATA_REGISTERED_ITU_T_T35 = 4,\n    RBSP_TRAILING_BITS = 128;\n\n/**\n  * Parse a supplemental enhancement information (SEI) NAL unit.\n  * Stops parsing once a message of type ITU T T35 has been found.\n  *\n  * @param bytes {Uint8Array} the bytes of a SEI NAL unit\n  * @return {object} the parsed SEI payload\n  * @see Rec. ITU-T H.264, 7.3.2.3.1\n  */\nvar parseSei = function(bytes) {\n  var\n    i = 0,\n    result = {\n      payloadType: -1,\n      payloadSize: 0\n    },\n    payloadType = 0,\n    payloadSize = 0;\n\n  // go through the sei_rbsp parsing each each individual sei_message\n  while (i < bytes.byteLength) {\n    // stop once we have hit the end of the sei_rbsp\n    if (bytes[i] === RBSP_TRAILING_BITS) {\n      break;\n    }\n\n    // Parse payload type\n    while (bytes[i] === 0xFF) {\n      payloadType += 255;\n      i++;\n    }\n    payloadType += bytes[i++];\n\n    // Parse payload size\n    while (bytes[i] === 0xFF) {\n      payloadSize += 255;\n      i++;\n    }\n    payloadSize += bytes[i++];\n\n    // this sei_message is a 608/708 caption so save it and break\n    // there can only ever be one caption message in a frame's sei\n    if (!result.payload && payloadType === USER_DATA_REGISTERED_ITU_T_T35) {\n      result.payloadType = payloadType;\n      result.payloadSize = payloadSize;\n      result.payload = bytes.subarray(i, i + payloadSize);\n      break;\n    }\n\n    // skip the payload and parse the next message\n    i += payloadSize;\n    payloadType = 0;\n    payloadSize = 0;\n  }\n\n  return result;\n};\n\n// see ANSI/SCTE 128-1 (2013), section 8.1\nvar parseUserData = function(sei) {\n  // itu_t_t35_contry_code must be 181 (United States) for\n  // captions\n  if (sei.payload[0] !== 181) {\n    return null;\n  }\n\n  // itu_t_t35_provider_code should be 49 (ATSC) for captions\n  if (((sei.payload[1] << 8) | sei.payload[2]) !== 49) {\n    return null;\n  }\n\n  // the user_identifier should be \"GA94\" to indicate ATSC1 data\n  if (String.fromCharCode(sei.payload[3],\n                          sei.payload[4],\n                          sei.payload[5],\n                          sei.payload[6]) !== 'GA94') {\n    return null;\n  }\n\n  // finally, user_data_type_code should be 0x03 for caption data\n  if (sei.payload[7] !== 0x03) {\n    return null;\n  }\n\n  // return the user_data_type_structure and strip the trailing\n  // marker bits\n  return sei.payload.subarray(8, sei.payload.length - 1);\n};\n\n// see CEA-708-D, section 4.4\nvar parseCaptionPackets = function(pts, userData) {\n  var results = [], i, count, offset, data;\n\n  // if this is just filler, return immediately\n  if (!(userData[0] & 0x40)) {\n    return results;\n  }\n\n  // parse out the cc_data_1 and cc_data_2 fields\n  count = userData[0] & 0x1f;\n  for (i = 0; i < count; i++) {\n    offset = i * 3;\n    data = {\n      type: userData[offset + 2] & 0x03,\n      pts: pts\n    };\n\n    // capture cc data when cc_valid is 1\n    if (userData[offset + 2] & 0x04) {\n      data.ccData = (userData[offset + 3] << 8) | userData[offset + 4];\n      results.push(data);\n    }\n  }\n  return results;\n};\n\nvar discardEmulationPreventionBytes = function(data) {\n    var\n      length = data.byteLength,\n      emulationPreventionBytesPositions = [],\n      i = 1,\n      newLength, newData;\n\n    // Find all `Emulation Prevention Bytes`\n    while (i < length - 2) {\n      if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {\n        emulationPreventionBytesPositions.push(i + 2);\n        i += 2;\n      } else {\n        i++;\n      }\n    }\n\n    // If no Emulation Prevention Bytes were found just return the original\n    // array\n    if (emulationPreventionBytesPositions.length === 0) {\n      return data;\n    }\n\n    // Create a new array to hold the NAL unit data\n    newLength = length - emulationPreventionBytesPositions.length;\n    newData = new Uint8Array(newLength);\n    var sourceIndex = 0;\n\n    for (i = 0; i < newLength; sourceIndex++, i++) {\n      if (sourceIndex === emulationPreventionBytesPositions[0]) {\n        // Skip this byte\n        sourceIndex++;\n        // Remove this position index\n        emulationPreventionBytesPositions.shift();\n      }\n      newData[i] = data[sourceIndex];\n    }\n\n    return newData;\n};\n\n// exports\nmodule.exports = {\n  parseSei: parseSei,\n  parseUserData: parseUserData,\n  parseCaptionPackets: parseCaptionPackets,\n  discardEmulationPreventionBytes: discardEmulationPreventionBytes,\n  USER_DATA_REGISTERED_ITU_T_T35: USER_DATA_REGISTERED_ITU_T_T35\n};\n","/**\n * mux.js\n *\n * Copyright (c) 2016 Brightcove\n * All rights reserved.\n *\n * Accepts program elementary stream (PES) data events and corrects\n * decode and presentation time stamps to account for a rollover\n * of the 33 bit value.\n */\n\n'use strict';\n\nvar Stream = require('../utils/stream');\n\nvar MAX_TS = 8589934592;\n\nvar RO_THRESH = 4294967296;\n\nvar handleRollover = function(value, reference) {\n  var direction = 1;\n\n  if (value > reference) {\n    // If the current timestamp value is greater than our reference timestamp and we detect a\n    // timestamp rollover, this means the roll over is happening in the opposite direction.\n    // Example scenario: Enter a long stream/video just after a rollover occurred. The reference\n    // point will be set to a small number, e.g. 1. The user then seeks backwards over the\n    // rollover point. In loading this segment, the timestamp values will be very large,\n    // e.g. 2^33 - 1. Since this comes before the data we loaded previously, we want to adjust\n    // the time stamp to be `value - 2^33`.\n    direction = -1;\n  }\n\n  // Note: A seek forwards or back that is greater than the RO_THRESH (2^32, ~13 hours) will\n  // cause an incorrect adjustment.\n  while (Math.abs(reference - value) > RO_THRESH) {\n    value += (direction * MAX_TS);\n  }\n\n  return value;\n};\n\nvar TimestampRolloverStream = function(type) {\n  var lastDTS, referenceDTS;\n\n  TimestampRolloverStream.prototype.init.call(this);\n\n  this.type_ = type;\n\n  this.push = function(data) {\n    if (data.type !== this.type_) {\n      return;\n    }\n\n    if (referenceDTS === undefined) {\n      referenceDTS = data.dts;\n    }\n\n    data.dts = handleRollover(data.dts, referenceDTS);\n    data.pts = handleRollover(data.pts, referenceDTS);\n\n    lastDTS = data.dts;\n\n    this.trigger('data', data);\n  };\n\n  this.flush = function() {\n    referenceDTS = lastDTS;\n    this.trigger('done');\n  };\n\n  this.discontinuity = function() {\n    referenceDTS = void 0;\n    lastDTS = void 0;\n  };\n\n};\n\nTimestampRolloverStream.prototype = new Stream();\n\nmodule.exports = {\n  TimestampRolloverStream: TimestampRolloverStream,\n  handleRollover: handleRollover\n};\n","var topLevel = typeof global !== 'undefined' ? global :\n    typeof window !== 'undefined' ? window : {}\nvar minDoc = require('min-document');\n\nvar doccy;\n\nif (typeof document !== 'undefined') {\n    doccy = document;\n} else {\n    doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];\n\n    if (!doccy) {\n        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;\n    }\n}\n\nmodule.exports = doccy;\n","function clean (s) {\n  return s.replace(/\\n\\r?\\s*/g, '')\n}\n\n\nmodule.exports = function tsml (sa) {\n  var s = ''\n    , i = 0\n\n  for (; i < arguments.length; i++)\n    s += clean(sa[i]) + (arguments[i + 1] || '')\n\n  return s\n}","\"use strict\";\nvar window = require(\"global/window\")\nvar isFunction = require(\"is-function\")\nvar parseHeaders = require(\"parse-headers\")\nvar xtend = require(\"xtend\")\n\nmodule.exports = createXHR\ncreateXHR.XMLHttpRequest = window.XMLHttpRequest || noop\ncreateXHR.XDomainRequest = \"withCredentials\" in (new createXHR.XMLHttpRequest()) ? createXHR.XMLHttpRequest : window.XDomainRequest\n\nforEachArray([\"get\", \"put\", \"post\", \"patch\", \"head\", \"delete\"], function(method) {\n    createXHR[method === \"delete\" ? \"del\" : method] = function(uri, options, callback) {\n        options = initParams(uri, options, callback)\n        options.method = method.toUpperCase()\n        return _createXHR(options)\n    }\n})\n\nfunction forEachArray(array, iterator) {\n    for (var i = 0; i < array.length; i++) {\n        iterator(array[i])\n    }\n}\n\nfunction isEmpty(obj){\n    for(var i in obj){\n        if(obj.hasOwnProperty(i)) return false\n    }\n    return true\n}\n\nfunction initParams(uri, options, callback) {\n    var params = uri\n\n    if (isFunction(options)) {\n        callback = options\n        if (typeof uri === \"string\") {\n            params = {uri:uri}\n        }\n    } else {\n        params = xtend(options, {uri: uri})\n    }\n\n    params.callback = callback\n    return params\n}\n\nfunction createXHR(uri, options, callback) {\n    options = initParams(uri, options, callback)\n    return _createXHR(options)\n}\n\nfunction _createXHR(options) {\n    if(typeof options.callback === \"undefined\"){\n        throw new Error(\"callback argument missing\")\n    }\n\n    var called = false\n    var callback = function cbOnce(err, response, body){\n        if(!called){\n            called = true\n            options.callback(err, response, body)\n        }\n    }\n\n    function readystatechange() {\n        if (xhr.readyState === 4) {\n            setTimeout(loadFunc, 0)\n        }\n    }\n\n    function getBody() {\n        // Chrome with requestType=blob throws errors arround when even testing access to responseText\n        var body = undefined\n\n        if (xhr.response) {\n            body = xhr.response\n        } else {\n            body = xhr.responseText || getXml(xhr)\n        }\n\n        if (isJson) {\n            try {\n                body = JSON.parse(body)\n            } catch (e) {}\n        }\n\n        return body\n    }\n\n    function errorFunc(evt) {\n        clearTimeout(timeoutTimer)\n        if(!(evt instanceof Error)){\n            evt = new Error(\"\" + (evt || \"Unknown XMLHttpRequest Error\") )\n        }\n        evt.statusCode = 0\n        return callback(evt, failureResponse)\n    }\n\n    // will load the data & process the response in a special response object\n    function loadFunc() {\n        if (aborted) return\n        var status\n        clearTimeout(timeoutTimer)\n        if(options.useXDR && xhr.status===undefined) {\n            //IE8 CORS GET successful response doesn't have a status field, but body is fine\n            status = 200\n        } else {\n            status = (xhr.status === 1223 ? 204 : xhr.status)\n        }\n        var response = failureResponse\n        var err = null\n\n        if (status !== 0){\n            response = {\n                body: getBody(),\n                statusCode: status,\n                method: method,\n                headers: {},\n                url: uri,\n                rawRequest: xhr\n            }\n            if(xhr.getAllResponseHeaders){ //remember xhr can in fact be XDR for CORS in IE\n                response.headers = parseHeaders(xhr.getAllResponseHeaders())\n            }\n        } else {\n            err = new Error(\"Internal XMLHttpRequest Error\")\n        }\n        return callback(err, response, response.body)\n    }\n\n    var xhr = options.xhr || null\n\n    if (!xhr) {\n        if (options.cors || options.useXDR) {\n            xhr = new createXHR.XDomainRequest()\n        }else{\n            xhr = new createXHR.XMLHttpRequest()\n        }\n    }\n\n    var key\n    var aborted\n    var uri = xhr.url = options.uri || options.url\n    var method = xhr.method = options.method || \"GET\"\n    var body = options.body || options.data\n    var headers = xhr.headers = options.headers || {}\n    var sync = !!options.sync\n    var isJson = false\n    var timeoutTimer\n    var failureResponse = {\n        body: undefined,\n        headers: {},\n        statusCode: 0,\n        method: method,\n        url: uri,\n        rawRequest: xhr\n    }\n\n    if (\"json\" in options && options.json !== false) {\n        isJson = true\n        headers[\"accept\"] || headers[\"Accept\"] || (headers[\"Accept\"] = \"application/json\") //Don't override existing accept header declared by user\n        if (method !== \"GET\" && method !== \"HEAD\") {\n            headers[\"content-type\"] || headers[\"Content-Type\"] || (headers[\"Content-Type\"] = \"application/json\") //Don't override existing accept header declared by user\n            body = JSON.stringify(options.json === true ? body : options.json)\n        }\n    }\n\n    xhr.onreadystatechange = readystatechange\n    xhr.onload = loadFunc\n    xhr.onerror = errorFunc\n    // IE9 must have onprogress be set to a unique function.\n    xhr.onprogress = function () {\n        // IE must die\n    }\n    xhr.onabort = function(){\n        aborted = true;\n    }\n    xhr.ontimeout = errorFunc\n    xhr.open(method, uri, !sync, options.username, options.password)\n    //has to be after open\n    if(!sync) {\n        xhr.withCredentials = !!options.withCredentials\n    }\n    // Cannot set timeout with sync request\n    // not setting timeout on the xhr object, because of old webkits etc. not handling that correctly\n    // both npm's request and jquery 1.x use this kind of timeout, so this is being consistent\n    if (!sync && options.timeout > 0 ) {\n        timeoutTimer = setTimeout(function(){\n            if (aborted) return\n            aborted = true//IE9 may still call readystatechange\n            xhr.abort(\"timeout\")\n            var e = new Error(\"XMLHttpRequest timeout\")\n            e.code = \"ETIMEDOUT\"\n            errorFunc(e)\n        }, options.timeout )\n    }\n\n    if (xhr.setRequestHeader) {\n        for(key in headers){\n            if(headers.hasOwnProperty(key)){\n                xhr.setRequestHeader(key, headers[key])\n            }\n        }\n    } else if (options.headers && !isEmpty(options.headers)) {\n        throw new Error(\"Headers cannot be set on an XDomainRequest object\")\n    }\n\n    if (\"responseType\" in options) {\n        xhr.responseType = options.responseType\n    }\n\n    if (\"beforeSend\" in options &&\n        typeof options.beforeSend === \"function\"\n    ) {\n        options.beforeSend(xhr)\n    }\n\n    // Microsoft Edge browser sends \"undefined\" when send is called with undefined value.\n    // XMLHttpRequest spec says to pass null as body to indicate no body\n    // See https://github.com/naugtur/xhr/issues/100.\n    xhr.send(body || null)\n\n    return xhr\n\n\n}\n\nfunction getXml(xhr) {\n    if (xhr.responseType === \"document\") {\n        return xhr.responseXML\n    }\n    var firefoxBugTakenEffect = xhr.responseXML && xhr.responseXML.documentElement.nodeName === \"parsererror\"\n    if (xhr.responseType === \"\" && !firefoxBugTakenEffect) {\n        return xhr.responseXML\n    }\n\n    return null\n}\n\nfunction noop() {}\n","module.exports = isFunction\n\nvar toString = Object.prototype.toString\n\nfunction isFunction (fn) {\n  var string = toString.call(fn)\n  return string === '[object Function]' ||\n    (typeof fn === 'function' && string !== '[object RegExp]') ||\n    (typeof window !== 'undefined' &&\n     // IE8 and below\n     (fn === window.setTimeout ||\n      fn === window.alert ||\n      fn === window.confirm ||\n      fn === window.prompt))\n};\n","var trim = require('trim')\n  , forEach = require('for-each')\n  , isArray = function(arg) {\n      return Object.prototype.toString.call(arg) === '[object Array]';\n    }\n\nmodule.exports = function (headers) {\n  if (!headers)\n    return {}\n\n  var result = {}\n\n  forEach(\n      trim(headers).split('\\n')\n    , function (row) {\n        var index = row.indexOf(':')\n          , key = trim(row.slice(0, index)).toLowerCase()\n          , value = trim(row.slice(index + 1))\n\n        if (typeof(result[key]) === 'undefined') {\n          result[key] = value\n        } else if (isArray(result[key])) {\n          result[key].push(value)\n        } else {\n          result[key] = [ result[key], value ]\n        }\n      }\n  )\n\n  return result\n}","\nexports = module.exports = trim;\n\nfunction trim(str){\n  return str.replace(/^\\s*|\\s*$/g, '');\n}\n\nexports.left = function(str){\n  return str.replace(/^\\s*/, '');\n};\n\nexports.right = function(str){\n  return str.replace(/\\s*$/, '');\n};\n","'use strict';\n\nvar isCallable = require('is-callable');\n\nvar toStr = Object.prototype.toString;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar forEachArray = function forEachArray(array, iterator, receiver) {\n    for (var i = 0, len = array.length; i < len; i++) {\n        if (hasOwnProperty.call(array, i)) {\n            if (receiver == null) {\n                iterator(array[i], i, array);\n            } else {\n                iterator.call(receiver, array[i], i, array);\n            }\n        }\n    }\n};\n\nvar forEachString = function forEachString(string, iterator, receiver) {\n    for (var i = 0, len = string.length; i < len; i++) {\n        // no such thing as a sparse string.\n        if (receiver == null) {\n            iterator(string.charAt(i), i, string);\n        } else {\n            iterator.call(receiver, string.charAt(i), i, string);\n        }\n    }\n};\n\nvar forEachObject = function forEachObject(object, iterator, receiver) {\n    for (var k in object) {\n        if (hasOwnProperty.call(object, k)) {\n            if (receiver == null) {\n                iterator(object[k], k, object);\n            } else {\n                iterator.call(receiver, object[k], k, object);\n            }\n        }\n    }\n};\n\nvar forEach = function forEach(list, iterator, thisArg) {\n    if (!isCallable(iterator)) {\n        throw new TypeError('iterator must be a function');\n    }\n\n    var receiver;\n    if (arguments.length >= 3) {\n        receiver = thisArg;\n    }\n\n    if (toStr.call(list) === '[object Array]') {\n        forEachArray(list, iterator, receiver);\n    } else if (typeof list === 'string') {\n        forEachString(list, iterator, receiver);\n    } else {\n        forEachObject(list, iterator, receiver);\n    }\n};\n\nmodule.exports = forEach;\n","'use strict';\n\nvar fnToStr = Function.prototype.toString;\n\nvar constructorRegex = /^\\s*class\\b/;\nvar isES6ClassFn = function isES6ClassFunction(value) {\n\ttry {\n\t\tvar fnStr = fnToStr.call(value);\n\t\treturn constructorRegex.test(fnStr);\n\t} catch (e) {\n\t\treturn false; // not a function\n\t}\n};\n\nvar tryFunctionObject = function tryFunctionToStr(value) {\n\ttry {\n\t\tif (isES6ClassFn(value)) { return false; }\n\t\tfnToStr.call(value);\n\t\treturn true;\n\t} catch (e) {\n\t\treturn false;\n\t}\n};\nvar toStr = Object.prototype.toString;\nvar fnClass = '[object Function]';\nvar genClass = '[object GeneratorFunction]';\nvar hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';\n\nmodule.exports = function isCallable(value) {\n\tif (!value) { return false; }\n\tif (typeof value !== 'function' && typeof value !== 'object') { return false; }\n\tif (typeof value === 'function' && !value.prototype) { return true; }\n\tif (hasToStringTag) { return tryFunctionObject(value); }\n\tif (isES6ClassFn(value)) { return false; }\n\tvar strClass = toStr.call(value);\n\treturn strClass === fnClass || strClass === genClass;\n};\n","module.exports = extend\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction extend() {\n    var target = {}\n\n    for (var i = 0; i < arguments.length; i++) {\n        var source = arguments[i]\n\n        for (var key in source) {\n            if (hasOwnProperty.call(source, key)) {\n                target[key] = source[key]\n            }\n        }\n    }\n\n    return target\n}\n","/**\n * Copyright 2013 vtt.js Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Default exports for Node. Export the extended versions of VTTCue and\n// VTTRegion in Node since we likely want the capability to convert back and\n// forth between JSON. If we don't then it's not that big of a deal since we're\n// off browser.\n\nvar window = require('global/window');\n\nvar vttjs = module.exports = {\n  WebVTT: require(\"./vtt.js\"),\n  VTTCue: require(\"./vttcue.js\"),\n  VTTRegion: require(\"./vttregion.js\")\n};\n\nwindow.vttjs = vttjs;\nwindow.WebVTT = vttjs.WebVTT;\n\nvar cueShim = vttjs.VTTCue;\nvar regionShim = vttjs.VTTRegion;\nvar nativeVTTCue = window.VTTCue;\nvar nativeVTTRegion = window.VTTRegion;\n\nvttjs.shim = function() {\n  window.VTTCue = cueShim;\n  window.VTTRegion = regionShim;\n};\n\nvttjs.restore = function() {\n  window.VTTCue = nativeVTTCue;\n  window.VTTRegion = nativeVTTRegion;\n};\n\nif (!window.VTTCue) {\n  vttjs.shim();\n}\n","/**\n * Copyright 2013 vtt.js Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */\nvar _objCreate = Object.create || (function() {\n  function F() {}\n  return function(o) {\n    if (arguments.length !== 1) {\n      throw new Error('Object.create shim only accepts one parameter.');\n    }\n    F.prototype = o;\n    return new F();\n  };\n})();\n\n// Creates a new ParserError object from an errorData object. The errorData\n// object should have default code and message properties. The default message\n// property can be overriden by passing in a message parameter.\n// See ParsingError.Errors below for acceptable errors.\nfunction ParsingError(errorData, message) {\n  this.name = \"ParsingError\";\n  this.code = errorData.code;\n  this.message = message || errorData.message;\n}\nParsingError.prototype = _objCreate(Error.prototype);\nParsingError.prototype.constructor = ParsingError;\n\n// ParsingError metadata for acceptable ParsingErrors.\nParsingError.Errors = {\n  BadSignature: {\n    code: 0,\n    message: \"Malformed WebVTT signature.\"\n  },\n  BadTimeStamp: {\n    code: 1,\n    message: \"Malformed time stamp.\"\n  }\n};\n\n// Try to parse input as a time stamp.\nfunction parseTimeStamp(input) {\n\n  function computeSeconds(h, m, s, f) {\n    return (h | 0) * 3600 + (m | 0) * 60 + (s | 0) + (f | 0) / 1000;\n  }\n\n  var m = input.match(/^(\\d+):(\\d{2})(:\\d{2})?\\.(\\d{3})/);\n  if (!m) {\n    return null;\n  }\n\n  if (m[3]) {\n    // Timestamp takes the form of [hours]:[minutes]:[seconds].[milliseconds]\n    return computeSeconds(m[1], m[2], m[3].replace(\":\", \"\"), m[4]);\n  } else if (m[1] > 59) {\n    // Timestamp takes the form of [hours]:[minutes].[milliseconds]\n    // First position is hours as it's over 59.\n    return computeSeconds(m[1], m[2], 0,  m[4]);\n  } else {\n    // Timestamp takes the form of [minutes]:[seconds].[milliseconds]\n    return computeSeconds(0, m[1], m[2], m[4]);\n  }\n}\n\n// A settings object holds key/value pairs and will ignore anything but the first\n// assignment to a specific key.\nfunction Settings() {\n  this.values = _objCreate(null);\n}\n\nSettings.prototype = {\n  // Only accept the first assignment to any key.\n  set: function(k, v) {\n    if (!this.get(k) && v !== \"\") {\n      this.values[k] = v;\n    }\n  },\n  // Return the value for a key, or a default value.\n  // If 'defaultKey' is passed then 'dflt' is assumed to be an object with\n  // a number of possible default values as properties where 'defaultKey' is\n  // the key of the property that will be chosen; otherwise it's assumed to be\n  // a single value.\n  get: function(k, dflt, defaultKey) {\n    if (defaultKey) {\n      return this.has(k) ? this.values[k] : dflt[defaultKey];\n    }\n    return this.has(k) ? this.values[k] : dflt;\n  },\n  // Check whether we have a value for a key.\n  has: function(k) {\n    return k in this.values;\n  },\n  // Accept a setting if its one of the given alternatives.\n  alt: function(k, v, a) {\n    for (var n = 0; n < a.length; ++n) {\n      if (v === a[n]) {\n        this.set(k, v);\n        break;\n      }\n    }\n  },\n  // Accept a setting if its a valid (signed) integer.\n  integer: function(k, v) {\n    if (/^-?\\d+$/.test(v)) { // integer\n      this.set(k, parseInt(v, 10));\n    }\n  },\n  // Accept a setting if its a valid percentage.\n  percent: function(k, v) {\n    var m;\n    if ((m = v.match(/^([\\d]{1,3})(\\.[\\d]*)?%$/))) {\n      v = parseFloat(v);\n      if (v >= 0 && v <= 100) {\n        this.set(k, v);\n        return true;\n      }\n    }\n    return false;\n  }\n};\n\n// Helper function to parse input into groups separated by 'groupDelim', and\n// interprete each group as a key/value pair separated by 'keyValueDelim'.\nfunction parseOptions(input, callback, keyValueDelim, groupDelim) {\n  var groups = groupDelim ? input.split(groupDelim) : [input];\n  for (var i in groups) {\n    if (typeof groups[i] !== \"string\") {\n      continue;\n    }\n    var kv = groups[i].split(keyValueDelim);\n    if (kv.length !== 2) {\n      continue;\n    }\n    var k = kv[0];\n    var v = kv[1];\n    callback(k, v);\n  }\n}\n\nfunction parseCue(input, cue, regionList) {\n  // Remember the original input if we need to throw an error.\n  var oInput = input;\n  // 4.1 WebVTT timestamp\n  function consumeTimeStamp() {\n    var ts = parseTimeStamp(input);\n    if (ts === null) {\n      throw new ParsingError(ParsingError.Errors.BadTimeStamp,\n                            \"Malformed timestamp: \" + oInput);\n    }\n    // Remove time stamp from input.\n    input = input.replace(/^[^\\sa-zA-Z-]+/, \"\");\n    return ts;\n  }\n\n  // 4.4.2 WebVTT cue settings\n  function consumeCueSettings(input, cue) {\n    var settings = new Settings();\n\n    parseOptions(input, function (k, v) {\n      switch (k) {\n      case \"region\":\n        // Find the last region we parsed with the same region id.\n        for (var i = regionList.length - 1; i >= 0; i--) {\n          if (regionList[i].id === v) {\n            settings.set(k, regionList[i].region);\n            break;\n          }\n        }\n        break;\n      case \"vertical\":\n        settings.alt(k, v, [\"rl\", \"lr\"]);\n        break;\n      case \"line\":\n        var vals = v.split(\",\"),\n            vals0 = vals[0];\n        settings.integer(k, vals0);\n        settings.percent(k, vals0) ? settings.set(\"snapToLines\", false) : null;\n        settings.alt(k, vals0, [\"auto\"]);\n        if (vals.length === 2) {\n          settings.alt(\"lineAlign\", vals[1], [\"start\", \"middle\", \"end\"]);\n        }\n        break;\n      case \"position\":\n        vals = v.split(\",\");\n        settings.percent(k, vals[0]);\n        if (vals.length === 2) {\n          settings.alt(\"positionAlign\", vals[1], [\"start\", \"middle\", \"end\"]);\n        }\n        break;\n      case \"size\":\n        settings.percent(k, v);\n        break;\n      case \"align\":\n        settings.alt(k, v, [\"start\", \"middle\", \"end\", \"left\", \"right\"]);\n        break;\n      }\n    }, /:/, /\\s/);\n\n    // Apply default values for any missing fields.\n    cue.region = settings.get(\"region\", null);\n    cue.vertical = settings.get(\"vertical\", \"\");\n    cue.line = settings.get(\"line\", \"auto\");\n    cue.lineAlign = settings.get(\"lineAlign\", \"start\");\n    cue.snapToLines = settings.get(\"snapToLines\", true);\n    cue.size = settings.get(\"size\", 100);\n    cue.align = settings.get(\"align\", \"middle\");\n    cue.position = settings.get(\"position\", {\n      start: 0,\n      left: 0,\n      middle: 50,\n      end: 100,\n      right: 100\n    }, cue.align);\n    cue.positionAlign = settings.get(\"positionAlign\", {\n      start: \"start\",\n      left: \"start\",\n      middle: \"middle\",\n      end: \"end\",\n      right: \"end\"\n    }, cue.align);\n  }\n\n  function skipWhitespace() {\n    input = input.replace(/^\\s+/, \"\");\n  }\n\n  // 4.1 WebVTT cue timings.\n  skipWhitespace();\n  cue.startTime = consumeTimeStamp();   // (1) collect cue start time\n  skipWhitespace();\n  if (input.substr(0, 3) !== \"-->\") {     // (3) next characters must match \"-->\"\n    throw new ParsingError(ParsingError.Errors.BadTimeStamp,\n                           \"Malformed time stamp (time stamps must be separated by '-->'): \" +\n                           oInput);\n  }\n  input = input.substr(3);\n  skipWhitespace();\n  cue.endTime = consumeTimeStamp();     // (5) collect cue end time\n\n  // 4.1 WebVTT cue settings list.\n  skipWhitespace();\n  consumeCueSettings(input, cue);\n}\n\nvar ESCAPE = {\n  \"&amp;\": \"&\",\n  \"&lt;\": \"<\",\n  \"&gt;\": \">\",\n  \"&lrm;\": \"\\u200e\",\n  \"&rlm;\": \"\\u200f\",\n  \"&nbsp;\": \"\\u00a0\"\n};\n\nvar TAG_NAME = {\n  c: \"span\",\n  i: \"i\",\n  b: \"b\",\n  u: \"u\",\n  ruby: \"ruby\",\n  rt: \"rt\",\n  v: \"span\",\n  lang: \"span\"\n};\n\nvar TAG_ANNOTATION = {\n  v: \"title\",\n  lang: \"lang\"\n};\n\nvar NEEDS_PARENT = {\n  rt: \"ruby\"\n};\n\n// Parse content into a document fragment.\nfunction parseContent(window, input) {\n  function nextToken() {\n    // Check for end-of-string.\n    if (!input) {\n      return null;\n    }\n\n    // Consume 'n' characters from the input.\n    function consume(result) {\n      input = input.substr(result.length);\n      return result;\n    }\n\n    var m = input.match(/^([^<]*)(<[^>]*>?)?/);\n    // If there is some text before the next tag, return it, otherwise return\n    // the tag.\n    return consume(m[1] ? m[1] : m[2]);\n  }\n\n  // Unescape a string 's'.\n  function unescape1(e) {\n    return ESCAPE[e];\n  }\n  function unescape(s) {\n    while ((m = s.match(/&(amp|lt|gt|lrm|rlm|nbsp);/))) {\n      s = s.replace(m[0], unescape1);\n    }\n    return s;\n  }\n\n  function shouldAdd(current, element) {\n    return !NEEDS_PARENT[element.localName] ||\n           NEEDS_PARENT[element.localName] === current.localName;\n  }\n\n  // Create an element for this tag.\n  function createElement(type, annotation) {\n    var tagName = TAG_NAME[type];\n    if (!tagName) {\n      return null;\n    }\n    var element = window.document.createElement(tagName);\n    element.localName = tagName;\n    var name = TAG_ANNOTATION[type];\n    if (name && annotation) {\n      element[name] = annotation.trim();\n    }\n    return element;\n  }\n\n  var rootDiv = window.document.createElement(\"div\"),\n      current = rootDiv,\n      t,\n      tagStack = [];\n\n  while ((t = nextToken()) !== null) {\n    if (t[0] === '<') {\n      if (t[1] === \"/\") {\n        // If the closing tag matches, move back up to the parent node.\n        if (tagStack.length &&\n            tagStack[tagStack.length - 1] === t.substr(2).replace(\">\", \"\")) {\n          tagStack.pop();\n          current = current.parentNode;\n        }\n        // Otherwise just ignore the end tag.\n        continue;\n      }\n      var ts = parseTimeStamp(t.substr(1, t.length - 2));\n      var node;\n      if (ts) {\n        // Timestamps are lead nodes as well.\n        node = window.document.createProcessingInstruction(\"timestamp\", ts);\n        current.appendChild(node);\n        continue;\n      }\n      var m = t.match(/^<([^.\\s/0-9>]+)(\\.[^\\s\\\\>]+)?([^>\\\\]+)?(\\\\?)>?$/);\n      // If we can't parse the tag, skip to the next tag.\n      if (!m) {\n        continue;\n      }\n      // Try to construct an element, and ignore the tag if we couldn't.\n      node = createElement(m[1], m[3]);\n      if (!node) {\n        continue;\n      }\n      // Determine if the tag should be added based on the context of where it\n      // is placed in the cuetext.\n      if (!shouldAdd(current, node)) {\n        continue;\n      }\n      // Set the class list (as a list of classes, separated by space).\n      if (m[2]) {\n        node.className = m[2].substr(1).replace('.', ' ');\n      }\n      // Append the node to the current node, and enter the scope of the new\n      // node.\n      tagStack.push(m[1]);\n      current.appendChild(node);\n      current = node;\n      continue;\n    }\n\n    // Text nodes are leaf nodes.\n    current.appendChild(window.document.createTextNode(unescape(t)));\n  }\n\n  return rootDiv;\n}\n\n// This is a list of all the Unicode characters that have a strong\n// right-to-left category. What this means is that these characters are\n// written right-to-left for sure. It was generated by pulling all the strong\n// right-to-left characters out of the Unicode data table. That table can\n// found at: http://www.unicode.org/Public/UNIDATA/UnicodeData.txt\nvar strongRTLRanges = [[0x5be, 0x5be], [0x5c0, 0x5c0], [0x5c3, 0x5c3], [0x5c6, 0x5c6],\n [0x5d0, 0x5ea], [0x5f0, 0x5f4], [0x608, 0x608], [0x60b, 0x60b], [0x60d, 0x60d],\n [0x61b, 0x61b], [0x61e, 0x64a], [0x66d, 0x66f], [0x671, 0x6d5], [0x6e5, 0x6e6],\n [0x6ee, 0x6ef], [0x6fa, 0x70d], [0x70f, 0x710], [0x712, 0x72f], [0x74d, 0x7a5],\n [0x7b1, 0x7b1], [0x7c0, 0x7ea], [0x7f4, 0x7f5], [0x7fa, 0x7fa], [0x800, 0x815],\n [0x81a, 0x81a], [0x824, 0x824], [0x828, 0x828], [0x830, 0x83e], [0x840, 0x858],\n [0x85e, 0x85e], [0x8a0, 0x8a0], [0x8a2, 0x8ac], [0x200f, 0x200f],\n [0xfb1d, 0xfb1d], [0xfb1f, 0xfb28], [0xfb2a, 0xfb36], [0xfb38, 0xfb3c],\n [0xfb3e, 0xfb3e], [0xfb40, 0xfb41], [0xfb43, 0xfb44], [0xfb46, 0xfbc1],\n [0xfbd3, 0xfd3d], [0xfd50, 0xfd8f], [0xfd92, 0xfdc7], [0xfdf0, 0xfdfc],\n [0xfe70, 0xfe74], [0xfe76, 0xfefc], [0x10800, 0x10805], [0x10808, 0x10808],\n [0x1080a, 0x10835], [0x10837, 0x10838], [0x1083c, 0x1083c], [0x1083f, 0x10855],\n [0x10857, 0x1085f], [0x10900, 0x1091b], [0x10920, 0x10939], [0x1093f, 0x1093f],\n [0x10980, 0x109b7], [0x109be, 0x109bf], [0x10a00, 0x10a00], [0x10a10, 0x10a13],\n [0x10a15, 0x10a17], [0x10a19, 0x10a33], [0x10a40, 0x10a47], [0x10a50, 0x10a58],\n [0x10a60, 0x10a7f], [0x10b00, 0x10b35], [0x10b40, 0x10b55], [0x10b58, 0x10b72],\n [0x10b78, 0x10b7f], [0x10c00, 0x10c48], [0x1ee00, 0x1ee03], [0x1ee05, 0x1ee1f],\n [0x1ee21, 0x1ee22], [0x1ee24, 0x1ee24], [0x1ee27, 0x1ee27], [0x1ee29, 0x1ee32],\n [0x1ee34, 0x1ee37], [0x1ee39, 0x1ee39], [0x1ee3b, 0x1ee3b], [0x1ee42, 0x1ee42],\n [0x1ee47, 0x1ee47], [0x1ee49, 0x1ee49], [0x1ee4b, 0x1ee4b], [0x1ee4d, 0x1ee4f],\n [0x1ee51, 0x1ee52], [0x1ee54, 0x1ee54], [0x1ee57, 0x1ee57], [0x1ee59, 0x1ee59],\n [0x1ee5b, 0x1ee5b], [0x1ee5d, 0x1ee5d], [0x1ee5f, 0x1ee5f], [0x1ee61, 0x1ee62],\n [0x1ee64, 0x1ee64], [0x1ee67, 0x1ee6a], [0x1ee6c, 0x1ee72], [0x1ee74, 0x1ee77],\n [0x1ee79, 0x1ee7c], [0x1ee7e, 0x1ee7e], [0x1ee80, 0x1ee89], [0x1ee8b, 0x1ee9b],\n [0x1eea1, 0x1eea3], [0x1eea5, 0x1eea9], [0x1eeab, 0x1eebb], [0x10fffd, 0x10fffd]];\n\nfunction isStrongRTLChar(charCode) {\n  for (var i = 0; i < strongRTLRanges.length; i++) {\n    var currentRange = strongRTLRanges[i];\n    if (charCode >= currentRange[0] && charCode <= currentRange[1]) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction determineBidi(cueDiv) {\n  var nodeStack = [],\n      text = \"\",\n      charCode;\n\n  if (!cueDiv || !cueDiv.childNodes) {\n    return \"ltr\";\n  }\n\n  function pushNodes(nodeStack, node) {\n    for (var i = node.childNodes.length - 1; i >= 0; i--) {\n      nodeStack.push(node.childNodes[i]);\n    }\n  }\n\n  function nextTextNode(nodeStack) {\n    if (!nodeStack || !nodeStack.length) {\n      return null;\n    }\n\n    var node = nodeStack.pop(),\n        text = node.textContent || node.innerText;\n    if (text) {\n      // TODO: This should match all unicode type B characters (paragraph\n      // separator characters). See issue #115.\n      var m = text.match(/^.*(\\n|\\r)/);\n      if (m) {\n        nodeStack.length = 0;\n        return m[0];\n      }\n      return text;\n    }\n    if (node.tagName === \"ruby\") {\n      return nextTextNode(nodeStack);\n    }\n    if (node.childNodes) {\n      pushNodes(nodeStack, node);\n      return nextTextNode(nodeStack);\n    }\n  }\n\n  pushNodes(nodeStack, cueDiv);\n  while ((text = nextTextNode(nodeStack))) {\n    for (var i = 0; i < text.length; i++) {\n      charCode = text.charCodeAt(i);\n      if (isStrongRTLChar(charCode)) {\n        return \"rtl\";\n      }\n    }\n  }\n  return \"ltr\";\n}\n\nfunction computeLinePos(cue) {\n  if (typeof cue.line === \"number\" &&\n      (cue.snapToLines || (cue.line >= 0 && cue.line <= 100))) {\n    return cue.line;\n  }\n  if (!cue.track || !cue.track.textTrackList ||\n      !cue.track.textTrackList.mediaElement) {\n    return -1;\n  }\n  var track = cue.track,\n      trackList = track.textTrackList,\n      count = 0;\n  for (var i = 0; i < trackList.length && trackList[i] !== track; i++) {\n    if (trackList[i].mode === \"showing\") {\n      count++;\n    }\n  }\n  return ++count * -1;\n}\n\nfunction StyleBox() {\n}\n\n// Apply styles to a div. If there is no div passed then it defaults to the\n// div on 'this'.\nStyleBox.prototype.applyStyles = function(styles, div) {\n  div = div || this.div;\n  for (var prop in styles) {\n    if (styles.hasOwnProperty(prop)) {\n      div.style[prop] = styles[prop];\n    }\n  }\n};\n\nStyleBox.prototype.formatStyle = function(val, unit) {\n  return val === 0 ? 0 : val + unit;\n};\n\n// Constructs the computed display state of the cue (a div). Places the div\n// into the overlay which should be a block level element (usually a div).\nfunction CueStyleBox(window, cue, styleOptions) {\n  StyleBox.call(this);\n  this.cue = cue;\n\n  // Parse our cue's text into a DOM tree rooted at 'cueDiv'. This div will\n  // have inline positioning and will function as the cue background box.\n  this.cueDiv = parseContent(window, cue.text);\n  var styles = {\n    color: \"rgba(255, 255, 255, 1)\",\n    backgroundColor:  \"rgba(0, 0, 0, 0.8)\",\n    position: \"relative\",\n    left: 0,\n    right: 0,\n    top: 0,\n    bottom: 0,\n    display: \"inline\",\n    writingMode: cue.vertical === \"\" ? \"horizontal-tb\"\n                                     : cue.vertical === \"lr\" ? \"vertical-lr\"\n                                                             : \"vertical-rl\",\n    unicodeBidi: \"plaintext\"\n  };\n\n  this.applyStyles(styles, this.cueDiv);\n\n  // Create an absolutely positioned div that will be used to position the cue\n  // div. Note, all WebVTT cue-setting alignments are equivalent to the CSS\n  // mirrors of them except \"middle\" which is \"center\" in CSS.\n  this.div = window.document.createElement(\"div\");\n  styles = {\n    direction: determineBidi(this.cueDiv),\n    writingMode: cue.vertical === \"\" ? \"horizontal-tb\"\n                                     : cue.vertical === \"lr\" ? \"vertical-lr\"\n                                                             : \"vertical-rl\",\n    unicodeBidi: \"plaintext\",\n    textAlign: cue.align === \"middle\" ? \"center\" : cue.align,\n    font: styleOptions.font,\n    whiteSpace: \"pre-line\",\n    position: \"absolute\"\n  };\n\n  this.applyStyles(styles);\n  this.div.appendChild(this.cueDiv);\n\n  // Calculate the distance from the reference edge of the viewport to the text\n  // position of the cue box. The reference edge will be resolved later when\n  // the box orientation styles are applied.\n  var textPos = 0;\n  switch (cue.positionAlign) {\n  case \"start\":\n    textPos = cue.position;\n    break;\n  case \"middle\":\n    textPos = cue.position - (cue.size / 2);\n    break;\n  case \"end\":\n    textPos = cue.position - cue.size;\n    break;\n  }\n\n  // Horizontal box orientation; textPos is the distance from the left edge of the\n  // area to the left edge of the box and cue.size is the distance extending to\n  // the right from there.\n  if (cue.vertical === \"\") {\n    this.applyStyles({\n      left:  this.formatStyle(textPos, \"%\"),\n      width: this.formatStyle(cue.size, \"%\")\n    });\n  // Vertical box orientation; textPos is the distance from the top edge of the\n  // area to the top edge of the box and cue.size is the height extending\n  // downwards from there.\n  } else {\n    this.applyStyles({\n      top: this.formatStyle(textPos, \"%\"),\n      height: this.formatStyle(cue.size, \"%\")\n    });\n  }\n\n  this.move = function(box) {\n    this.applyStyles({\n      top: this.formatStyle(box.top, \"px\"),\n      bottom: this.formatStyle(box.bottom, \"px\"),\n      left: this.formatStyle(box.left, \"px\"),\n      right: this.formatStyle(box.right, \"px\"),\n      height: this.formatStyle(box.height, \"px\"),\n      width: this.formatStyle(box.width, \"px\")\n    });\n  };\n}\nCueStyleBox.prototype = _objCreate(StyleBox.prototype);\nCueStyleBox.prototype.constructor = CueStyleBox;\n\n// Represents the co-ordinates of an Element in a way that we can easily\n// compute things with such as if it overlaps or intersects with another Element.\n// Can initialize it with either a StyleBox or another BoxPosition.\nfunction BoxPosition(obj) {\n  // Either a BoxPosition was passed in and we need to copy it, or a StyleBox\n  // was passed in and we need to copy the results of 'getBoundingClientRect'\n  // as the object returned is readonly. All co-ordinate values are in reference\n  // to the viewport origin (top left).\n  var lh, height, width, top;\n  if (obj.div) {\n    height = obj.div.offsetHeight;\n    width = obj.div.offsetWidth;\n    top = obj.div.offsetTop;\n\n    var rects = (rects = obj.div.childNodes) && (rects = rects[0]) &&\n                rects.getClientRects && rects.getClientRects();\n    obj = obj.div.getBoundingClientRect();\n    // In certain cases the outter div will be slightly larger then the sum of\n    // the inner div's lines. This could be due to bold text, etc, on some platforms.\n    // In this case we should get the average line height and use that. This will\n    // result in the desired behaviour.\n    lh = rects ? Math.max((rects[0] && rects[0].height) || 0, obj.height / rects.length)\n               : 0;\n\n  }\n  this.left = obj.left;\n  this.right = obj.right;\n  this.top = obj.top || top;\n  this.height = obj.height || height;\n  this.bottom = obj.bottom || (top + (obj.height || height));\n  this.width = obj.width || width;\n  this.lineHeight = lh !== undefined ? lh : obj.lineHeight;\n}\n\n// Move the box along a particular axis. Optionally pass in an amount to move\n// the box. If no amount is passed then the default is the line height of the\n// box.\nBoxPosition.prototype.move = function(axis, toMove) {\n  toMove = toMove !== undefined ? toMove : this.lineHeight;\n  switch (axis) {\n  case \"+x\":\n    this.left += toMove;\n    this.right += toMove;\n    break;\n  case \"-x\":\n    this.left -= toMove;\n    this.right -= toMove;\n    break;\n  case \"+y\":\n    this.top += toMove;\n    this.bottom += toMove;\n    break;\n  case \"-y\":\n    this.top -= toMove;\n    this.bottom -= toMove;\n    break;\n  }\n};\n\n// Check if this box overlaps another box, b2.\nBoxPosition.prototype.overlaps = function(b2) {\n  return this.left < b2.right &&\n         this.right > b2.left &&\n         this.top < b2.bottom &&\n         this.bottom > b2.top;\n};\n\n// Check if this box overlaps any other boxes in boxes.\nBoxPosition.prototype.overlapsAny = function(boxes) {\n  for (var i = 0; i < boxes.length; i++) {\n    if (this.overlaps(boxes[i])) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Check if this box is within another box.\nBoxPosition.prototype.within = function(container) {\n  return this.top >= container.top &&\n         this.bottom <= container.bottom &&\n         this.left >= container.left &&\n         this.right <= container.right;\n};\n\n// Check if this box is entirely within the container or it is overlapping\n// on the edge opposite of the axis direction passed. For example, if \"+x\" is\n// passed and the box is overlapping on the left edge of the container, then\n// return true.\nBoxPosition.prototype.overlapsOppositeAxis = function(container, axis) {\n  switch (axis) {\n  case \"+x\":\n    return this.left < container.left;\n  case \"-x\":\n    return this.right > container.right;\n  case \"+y\":\n    return this.top < container.top;\n  case \"-y\":\n    return this.bottom > container.bottom;\n  }\n};\n\n// Find the percentage of the area that this box is overlapping with another\n// box.\nBoxPosition.prototype.intersectPercentage = function(b2) {\n  var x = Math.max(0, Math.min(this.right, b2.right) - Math.max(this.left, b2.left)),\n      y = Math.max(0, Math.min(this.bottom, b2.bottom) - Math.max(this.top, b2.top)),\n      intersectArea = x * y;\n  return intersectArea / (this.height * this.width);\n};\n\n// Convert the positions from this box to CSS compatible positions using\n// the reference container's positions. This has to be done because this\n// box's positions are in reference to the viewport origin, whereas, CSS\n// values are in referecne to their respective edges.\nBoxPosition.prototype.toCSSCompatValues = function(reference) {\n  return {\n    top: this.top - reference.top,\n    bottom: reference.bottom - this.bottom,\n    left: this.left - reference.left,\n    right: reference.right - this.right,\n    height: this.height,\n    width: this.width\n  };\n};\n\n// Get an object that represents the box's position without anything extra.\n// Can pass a StyleBox, HTMLElement, or another BoxPositon.\nBoxPosition.getSimpleBoxPosition = function(obj) {\n  var height = obj.div ? obj.div.offsetHeight : obj.tagName ? obj.offsetHeight : 0;\n  var width = obj.div ? obj.div.offsetWidth : obj.tagName ? obj.offsetWidth : 0;\n  var top = obj.div ? obj.div.offsetTop : obj.tagName ? obj.offsetTop : 0;\n\n  obj = obj.div ? obj.div.getBoundingClientRect() :\n                obj.tagName ? obj.getBoundingClientRect() : obj;\n  var ret = {\n    left: obj.left,\n    right: obj.right,\n    top: obj.top || top,\n    height: obj.height || height,\n    bottom: obj.bottom || (top + (obj.height || height)),\n    width: obj.width || width\n  };\n  return ret;\n};\n\n// Move a StyleBox to its specified, or next best, position. The containerBox\n// is the box that contains the StyleBox, such as a div. boxPositions are\n// a list of other boxes that the styleBox can't overlap with.\nfunction moveBoxToLinePosition(window, styleBox, containerBox, boxPositions) {\n\n  // Find the best position for a cue box, b, on the video. The axis parameter\n  // is a list of axis, the order of which, it will move the box along. For example:\n  // Passing [\"+x\", \"-x\"] will move the box first along the x axis in the positive\n  // direction. If it doesn't find a good position for it there it will then move\n  // it along the x axis in the negative direction.\n  function findBestPosition(b, axis) {\n    var bestPosition,\n        specifiedPosition = new BoxPosition(b),\n        percentage = 1; // Highest possible so the first thing we get is better.\n\n    for (var i = 0; i < axis.length; i++) {\n      while (b.overlapsOppositeAxis(containerBox, axis[i]) ||\n             (b.within(containerBox) && b.overlapsAny(boxPositions))) {\n        b.move(axis[i]);\n      }\n      // We found a spot where we aren't overlapping anything. This is our\n      // best position.\n      if (b.within(containerBox)) {\n        return b;\n      }\n      var p = b.intersectPercentage(containerBox);\n      // If we're outside the container box less then we were on our last try\n      // then remember this position as the best position.\n      if (percentage > p) {\n        bestPosition = new BoxPosition(b);\n        percentage = p;\n      }\n      // Reset the box position to the specified position.\n      b = new BoxPosition(specifiedPosition);\n    }\n    return bestPosition || specifiedPosition;\n  }\n\n  var boxPosition = new BoxPosition(styleBox),\n      cue = styleBox.cue,\n      linePos = computeLinePos(cue),\n      axis = [];\n\n  // If we have a line number to align the cue to.\n  if (cue.snapToLines) {\n    var size;\n    switch (cue.vertical) {\n    case \"\":\n      axis = [ \"+y\", \"-y\" ];\n      size = \"height\";\n      break;\n    case \"rl\":\n      axis = [ \"+x\", \"-x\" ];\n      size = \"width\";\n      break;\n    case \"lr\":\n      axis = [ \"-x\", \"+x\" ];\n      size = \"width\";\n      break;\n    }\n\n    var step = boxPosition.lineHeight,\n        position = step * Math.round(linePos),\n        maxPosition = containerBox[size] + step,\n        initialAxis = axis[0];\n\n    // If the specified intial position is greater then the max position then\n    // clamp the box to the amount of steps it would take for the box to\n    // reach the max position.\n    if (Math.abs(position) > maxPosition) {\n      position = position < 0 ? -1 : 1;\n      position *= Math.ceil(maxPosition / step) * step;\n    }\n\n    // If computed line position returns negative then line numbers are\n    // relative to the bottom of the video instead of the top. Therefore, we\n    // need to increase our initial position by the length or width of the\n    // video, depending on the writing direction, and reverse our axis directions.\n    if (linePos < 0) {\n      position += cue.vertical === \"\" ? containerBox.height : containerBox.width;\n      axis = axis.reverse();\n    }\n\n    // Move the box to the specified position. This may not be its best\n    // position.\n    boxPosition.move(initialAxis, position);\n\n  } else {\n    // If we have a percentage line value for the cue.\n    var calculatedPercentage = (boxPosition.lineHeight / containerBox.height) * 100;\n\n    switch (cue.lineAlign) {\n    case \"middle\":\n      linePos -= (calculatedPercentage / 2);\n      break;\n    case \"end\":\n      linePos -= calculatedPercentage;\n      break;\n    }\n\n    // Apply initial line position to the cue box.\n    switch (cue.vertical) {\n    case \"\":\n      styleBox.applyStyles({\n        top: styleBox.formatStyle(linePos, \"%\")\n      });\n      break;\n    case \"rl\":\n      styleBox.applyStyles({\n        left: styleBox.formatStyle(linePos, \"%\")\n      });\n      break;\n    case \"lr\":\n      styleBox.applyStyles({\n        right: styleBox.formatStyle(linePos, \"%\")\n      });\n      break;\n    }\n\n    axis = [ \"+y\", \"-x\", \"+x\", \"-y\" ];\n\n    // Get the box position again after we've applied the specified positioning\n    // to it.\n    boxPosition = new BoxPosition(styleBox);\n  }\n\n  var bestPosition = findBestPosition(boxPosition, axis);\n  styleBox.move(bestPosition.toCSSCompatValues(containerBox));\n}\n\nfunction WebVTT() {\n  // Nothing\n}\n\n// Helper to allow strings to be decoded instead of the default binary utf8 data.\nWebVTT.StringDecoder = function() {\n  return {\n    decode: function(data) {\n      if (!data) {\n        return \"\";\n      }\n      if (typeof data !== \"string\") {\n        throw new Error(\"Error - expected string data.\");\n      }\n      return decodeURIComponent(encodeURIComponent(data));\n    }\n  };\n};\n\nWebVTT.convertCueToDOMTree = function(window, cuetext) {\n  if (!window || !cuetext) {\n    return null;\n  }\n  return parseContent(window, cuetext);\n};\n\nvar FONT_SIZE_PERCENT = 0.05;\nvar FONT_STYLE = \"sans-serif\";\nvar CUE_BACKGROUND_PADDING = \"1.5%\";\n\n// Runs the processing model over the cues and regions passed to it.\n// @param overlay A block level element (usually a div) that the computed cues\n//                and regions will be placed into.\nWebVTT.processCues = function(window, cues, overlay) {\n  if (!window || !cues || !overlay) {\n    return null;\n  }\n\n  // Remove all previous children.\n  while (overlay.firstChild) {\n    overlay.removeChild(overlay.firstChild);\n  }\n\n  var paddedOverlay = window.document.createElement(\"div\");\n  paddedOverlay.style.position = \"absolute\";\n  paddedOverlay.style.left = \"0\";\n  paddedOverlay.style.right = \"0\";\n  paddedOverlay.style.top = \"0\";\n  paddedOverlay.style.bottom = \"0\";\n  paddedOverlay.style.margin = CUE_BACKGROUND_PADDING;\n  overlay.appendChild(paddedOverlay);\n\n  // Determine if we need to compute the display states of the cues. This could\n  // be the case if a cue's state has been changed since the last computation or\n  // if it has not been computed yet.\n  function shouldCompute(cues) {\n    for (var i = 0; i < cues.length; i++) {\n      if (cues[i].hasBeenReset || !cues[i].displayState) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // We don't need to recompute the cues' display states. Just reuse them.\n  if (!shouldCompute(cues)) {\n    for (var i = 0; i < cues.length; i++) {\n      paddedOverlay.appendChild(cues[i].displayState);\n    }\n    return;\n  }\n\n  var boxPositions = [],\n      containerBox = BoxPosition.getSimpleBoxPosition(paddedOverlay),\n      fontSize = Math.round(containerBox.height * FONT_SIZE_PERCENT * 100) / 100;\n  var styleOptions = {\n    font: fontSize + \"px \" + FONT_STYLE\n  };\n\n  (function() {\n    var styleBox, cue;\n\n    for (var i = 0; i < cues.length; i++) {\n      cue = cues[i];\n\n      // Compute the intial position and styles of the cue div.\n      styleBox = new CueStyleBox(window, cue, styleOptions);\n      paddedOverlay.appendChild(styleBox.div);\n\n      // Move the cue div to it's correct line position.\n      moveBoxToLinePosition(window, styleBox, containerBox, boxPositions);\n\n      // Remember the computed div so that we don't have to recompute it later\n      // if we don't have too.\n      cue.displayState = styleBox.div;\n\n      boxPositions.push(BoxPosition.getSimpleBoxPosition(styleBox));\n    }\n  })();\n};\n\nWebVTT.Parser = function(window, vttjs, decoder) {\n  if (!decoder) {\n    decoder = vttjs;\n    vttjs = {};\n  }\n  if (!vttjs) {\n    vttjs = {};\n  }\n\n  this.window = window;\n  this.vttjs = vttjs;\n  this.state = \"INITIAL\";\n  this.buffer = \"\";\n  this.decoder = decoder || new TextDecoder(\"utf8\");\n  this.regionList = [];\n};\n\nWebVTT.Parser.prototype = {\n  // If the error is a ParsingError then report it to the consumer if\n  // possible. If it's not a ParsingError then throw it like normal.\n  reportOrThrowError: function(e) {\n    if (e instanceof ParsingError) {\n      this.onparsingerror && this.onparsingerror(e);\n    } else {\n      throw e;\n    }\n  },\n  parse: function (data) {\n    var self = this;\n\n    // If there is no data then we won't decode it, but will just try to parse\n    // whatever is in buffer already. This may occur in circumstances, for\n    // example when flush() is called.\n    if (data) {\n      // Try to decode the data that we received.\n      self.buffer += self.decoder.decode(data, {stream: true});\n    }\n\n    function collectNextLine() {\n      var buffer = self.buffer;\n      var pos = 0;\n      while (pos < buffer.length && buffer[pos] !== '\\r' && buffer[pos] !== '\\n') {\n        ++pos;\n      }\n      var line = buffer.substr(0, pos);\n      // Advance the buffer early in case we fail below.\n      if (buffer[pos] === '\\r') {\n        ++pos;\n      }\n      if (buffer[pos] === '\\n') {\n        ++pos;\n      }\n      self.buffer = buffer.substr(pos);\n      return line;\n    }\n\n    // 3.4 WebVTT region and WebVTT region settings syntax\n    function parseRegion(input) {\n      var settings = new Settings();\n\n      parseOptions(input, function (k, v) {\n        switch (k) {\n        case \"id\":\n          settings.set(k, v);\n          break;\n        case \"width\":\n          settings.percent(k, v);\n          break;\n        case \"lines\":\n          settings.integer(k, v);\n          break;\n        case \"regionanchor\":\n        case \"viewportanchor\":\n          var xy = v.split(',');\n          if (xy.length !== 2) {\n            break;\n          }\n          // We have to make sure both x and y parse, so use a temporary\n          // settings object here.\n          var anchor = new Settings();\n          anchor.percent(\"x\", xy[0]);\n          anchor.percent(\"y\", xy[1]);\n          if (!anchor.has(\"x\") || !anchor.has(\"y\")) {\n            break;\n          }\n          settings.set(k + \"X\", anchor.get(\"x\"));\n          settings.set(k + \"Y\", anchor.get(\"y\"));\n          break;\n        case \"scroll\":\n          settings.alt(k, v, [\"up\"]);\n          break;\n        }\n      }, /=/, /\\s/);\n\n      // Create the region, using default values for any values that were not\n      // specified.\n      if (settings.has(\"id\")) {\n        var region = new (self.vttjs.VTTRegion || self.window.VTTRegion)();\n        region.width = settings.get(\"width\", 100);\n        region.lines = settings.get(\"lines\", 3);\n        region.regionAnchorX = settings.get(\"regionanchorX\", 0);\n        region.regionAnchorY = settings.get(\"regionanchorY\", 100);\n        region.viewportAnchorX = settings.get(\"viewportanchorX\", 0);\n        region.viewportAnchorY = settings.get(\"viewportanchorY\", 100);\n        region.scroll = settings.get(\"scroll\", \"\");\n        // Register the region.\n        self.onregion && self.onregion(region);\n        // Remember the VTTRegion for later in case we parse any VTTCues that\n        // reference it.\n        self.regionList.push({\n          id: settings.get(\"id\"),\n          region: region\n        });\n      }\n    }\n\n    // draft-pantos-http-live-streaming-20\n    // https://tools.ietf.org/html/draft-pantos-http-live-streaming-20#section-3.5\n    // 3.5 WebVTT\n    function parseTimestampMap(input) {\n      var settings = new Settings();\n\n      parseOptions(input, function(k, v) {\n        switch(k) {\n        case \"MPEGT\":\n          settings.integer(k + 'S', v);\n          break;\n        case \"LOCA\":\n          settings.set(k + 'L', parseTimeStamp(v));\n          break;\n        }\n      }, /[^\\d]:/, /,/);\n\n      self.ontimestampmap && self.ontimestampmap({\n        \"MPEGTS\": settings.get(\"MPEGTS\"),\n        \"LOCAL\": settings.get(\"LOCAL\")\n      });\n    }\n\n    // 3.2 WebVTT metadata header syntax\n    function parseHeader(input) {\n      if (input.match(/X-TIMESTAMP-MAP/)) {\n        // This line contains HLS X-TIMESTAMP-MAP metadata\n        parseOptions(input, function(k, v) {\n          switch(k) {\n          case \"X-TIMESTAMP-MAP\":\n            parseTimestampMap(v);\n            break;\n          }\n        }, /=/);\n      } else {\n        parseOptions(input, function (k, v) {\n          switch (k) {\n          case \"Region\":\n            // 3.3 WebVTT region metadata header syntax\n            parseRegion(v);\n            break;\n          }\n        }, /:/);\n      }\n\n    }\n\n    // 5.1 WebVTT file parsing.\n    try {\n      var line;\n      if (self.state === \"INITIAL\") {\n        // We can't start parsing until we have the first line.\n        if (!/\\r\\n|\\n/.test(self.buffer)) {\n          return this;\n        }\n\n        line = collectNextLine();\n\n        var m = line.match(/^WEBVTT([ \\t].*)?$/);\n        if (!m || !m[0]) {\n          throw new ParsingError(ParsingError.Errors.BadSignature);\n        }\n\n        self.state = \"HEADER\";\n      }\n\n      var alreadyCollectedLine = false;\n      while (self.buffer) {\n        // We can't parse a line until we have the full line.\n        if (!/\\r\\n|\\n/.test(self.buffer)) {\n          return this;\n        }\n\n        if (!alreadyCollectedLine) {\n          line = collectNextLine();\n        } else {\n          alreadyCollectedLine = false;\n        }\n\n        switch (self.state) {\n        case \"HEADER\":\n          // 13-18 - Allow a header (metadata) under the WEBVTT line.\n          if (/:/.test(line)) {\n            parseHeader(line);\n          } else if (!line) {\n            // An empty line terminates the header and starts the body (cues).\n            self.state = \"ID\";\n          }\n          continue;\n        case \"NOTE\":\n          // Ignore NOTE blocks.\n          if (!line) {\n            self.state = \"ID\";\n          }\n          continue;\n        case \"ID\":\n          // Check for the start of NOTE blocks.\n          if (/^NOTE($|[ \\t])/.test(line)) {\n            self.state = \"NOTE\";\n            break;\n          }\n          // 19-29 - Allow any number of line terminators, then initialize new cue values.\n          if (!line) {\n            continue;\n          }\n          self.cue = new (self.vttjs.VTTCue || self.window.VTTCue)(0, 0, \"\");\n          self.state = \"CUE\";\n          // 30-39 - Check if self line contains an optional identifier or timing data.\n          if (line.indexOf(\"-->\") === -1) {\n            self.cue.id = line;\n            continue;\n          }\n          // Process line as start of a cue.\n          /*falls through*/\n        case \"CUE\":\n          // 40 - Collect cue timings and settings.\n          try {\n            parseCue(line, self.cue, self.regionList);\n          } catch (e) {\n            self.reportOrThrowError(e);\n            // In case of an error ignore rest of the cue.\n            self.cue = null;\n            self.state = \"BADCUE\";\n            continue;\n          }\n          self.state = \"CUETEXT\";\n          continue;\n        case \"CUETEXT\":\n          var hasSubstring = line.indexOf(\"-->\") !== -1;\n          // 34 - If we have an empty line then report the cue.\n          // 35 - If we have the special substring '-->' then report the cue,\n          // but do not collect the line as we need to process the current\n          // one as a new cue.\n          if (!line || hasSubstring && (alreadyCollectedLine = true)) {\n            // We are done parsing self cue.\n            self.oncue && self.oncue(self.cue);\n            self.cue = null;\n            self.state = \"ID\";\n            continue;\n          }\n          if (self.cue.text) {\n            self.cue.text += \"\\n\";\n          }\n          self.cue.text += line;\n          continue;\n        case \"BADCUE\": // BADCUE\n          // 54-62 - Collect and discard the remaining cue.\n          if (!line) {\n            self.state = \"ID\";\n          }\n          continue;\n        }\n      }\n    } catch (e) {\n      self.reportOrThrowError(e);\n\n      // If we are currently parsing a cue, report what we have.\n      if (self.state === \"CUETEXT\" && self.cue && self.oncue) {\n        self.oncue(self.cue);\n      }\n      self.cue = null;\n      // Enter BADWEBVTT state if header was not parsed correctly otherwise\n      // another exception occurred so enter BADCUE state.\n      self.state = self.state === \"INITIAL\" ? \"BADWEBVTT\" : \"BADCUE\";\n    }\n    return this;\n  },\n  flush: function () {\n    var self = this;\n    try {\n      // Finish decoding the stream.\n      self.buffer += self.decoder.decode();\n      // Synthesize the end of the current cue or region.\n      if (self.cue || self.state === \"HEADER\") {\n        self.buffer += \"\\n\\n\";\n        self.parse();\n      }\n      // If we've flushed, parsed, and we're still on the INITIAL state then\n      // that means we don't have enough of the stream to parse the first\n      // line.\n      if (self.state === \"INITIAL\") {\n        throw new ParsingError(ParsingError.Errors.BadSignature);\n      }\n    } catch(e) {\n      self.reportOrThrowError(e);\n    }\n    self.onflush && self.onflush();\n    return this;\n  }\n};\n\nmodule.exports = WebVTT;\n","/**\n * Copyright 2013 vtt.js Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar autoKeyword = \"auto\";\nvar directionSetting = {\n  \"\": 1,\n  \"lr\": 1,\n  \"rl\": 1\n};\nvar alignSetting = {\n  \"start\": 1,\n  \"middle\": 1,\n  \"end\": 1,\n  \"left\": 1,\n  \"right\": 1\n};\n\nfunction findDirectionSetting(value) {\n  if (typeof value !== \"string\") {\n    return false;\n  }\n  var dir = directionSetting[value.toLowerCase()];\n  return dir ? value.toLowerCase() : false;\n}\n\nfunction findAlignSetting(value) {\n  if (typeof value !== \"string\") {\n    return false;\n  }\n  var align = alignSetting[value.toLowerCase()];\n  return align ? value.toLowerCase() : false;\n}\n\nfunction VTTCue(startTime, endTime, text) {\n  /**\n   * Shim implementation specific properties. These properties are not in\n   * the spec.\n   */\n\n  // Lets us know when the VTTCue's data has changed in such a way that we need\n  // to recompute its display state. This lets us compute its display state\n  // lazily.\n  this.hasBeenReset = false;\n\n  /**\n   * VTTCue and TextTrackCue properties\n   * http://dev.w3.org/html5/webvtt/#vttcue-interface\n   */\n\n  var _id = \"\";\n  var _pauseOnExit = false;\n  var _startTime = startTime;\n  var _endTime = endTime;\n  var _text = text;\n  var _region = null;\n  var _vertical = \"\";\n  var _snapToLines = true;\n  var _line = \"auto\";\n  var _lineAlign = \"start\";\n  var _position = 50;\n  var _positionAlign = \"middle\";\n  var _size = 50;\n  var _align = \"middle\";\n\n  Object.defineProperties(this, {\n    \"id\": {\n      enumerable: true,\n      get: function() {\n        return _id;\n      },\n      set: function(value) {\n        _id = \"\" + value;\n      }\n    },\n\n    \"pauseOnExit\": {\n      enumerable: true,\n      get: function() {\n        return _pauseOnExit;\n      },\n      set: function(value) {\n        _pauseOnExit = !!value;\n      }\n    },\n\n    \"startTime\": {\n      enumerable: true,\n      get: function() {\n        return _startTime;\n      },\n      set: function(value) {\n        if (typeof value !== \"number\") {\n          throw new TypeError(\"Start time must be set to a number.\");\n        }\n        _startTime = value;\n        this.hasBeenReset = true;\n      }\n    },\n\n    \"endTime\": {\n      enumerable: true,\n      get: function() {\n        return _endTime;\n      },\n      set: function(value) {\n        if (typeof value !== \"number\") {\n          throw new TypeError(\"End time must be set to a number.\");\n        }\n        _endTime = value;\n        this.hasBeenReset = true;\n      }\n    },\n\n    \"text\": {\n      enumerable: true,\n      get: function() {\n        return _text;\n      },\n      set: function(value) {\n        _text = \"\" + value;\n        this.hasBeenReset = true;\n      }\n    },\n\n    \"region\": {\n      enumerable: true,\n      get: function() {\n        return _region;\n      },\n      set: function(value) {\n        _region = value;\n        this.hasBeenReset = true;\n      }\n    },\n\n    \"vertical\": {\n      enumerable: true,\n      get: function() {\n        return _vertical;\n      },\n      set: function(value) {\n        var setting = findDirectionSetting(value);\n        // Have to check for false because the setting an be an empty string.\n        if (setting === false) {\n          throw new SyntaxError(\"An invalid or illegal string was specified.\");\n        }\n        _vertical = setting;\n        this.hasBeenReset = true;\n      }\n    },\n\n    \"snapToLines\": {\n      enumerable: true,\n      get: function() {\n        return _snapToLines;\n      },\n      set: function(value) {\n        _snapToLines = !!value;\n        this.hasBeenReset = true;\n      }\n    },\n\n    \"line\": {\n      enumerable: true,\n      get: function() {\n        return _line;\n      },\n      set: function(value) {\n        if (typeof value !== \"number\" && value !== autoKeyword) {\n          throw new SyntaxError(\"An invalid number or illegal string was specified.\");\n        }\n        _line = value;\n        this.hasBeenReset = true;\n      }\n    },\n\n    \"lineAlign\": {\n      enumerable: true,\n      get: function() {\n        return _lineAlign;\n      },\n      set: function(value) {\n        var setting = findAlignSetting(value);\n        if (!setting) {\n          throw new SyntaxError(\"An invalid or illegal string was specified.\");\n        }\n        _lineAlign = setting;\n        this.hasBeenReset = true;\n      }\n    },\n\n    \"position\": {\n      enumerable: true,\n      get: function() {\n        return _position;\n      },\n      set: function(value) {\n        if (value < 0 || value > 100) {\n          throw new Error(\"Position must be between 0 and 100.\");\n        }\n        _position = value;\n        this.hasBeenReset = true;\n      }\n    },\n\n    \"positionAlign\": {\n      enumerable: true,\n      get: function() {\n        return _positionAlign;\n      },\n      set: function(value) {\n        var setting = findAlignSetting(value);\n        if (!setting) {\n          throw new SyntaxError(\"An invalid or illegal string was specified.\");\n        }\n        _positionAlign = setting;\n        this.hasBeenReset = true;\n      }\n    },\n\n    \"size\": {\n      enumerable: true,\n      get: function() {\n        return _size;\n      },\n      set: function(value) {\n        if (value < 0 || value > 100) {\n          throw new Error(\"Size must be between 0 and 100.\");\n        }\n        _size = value;\n        this.hasBeenReset = true;\n      }\n    },\n\n    \"align\": {\n      enumerable: true,\n      get: function() {\n        return _align;\n      },\n      set: function(value) {\n        var setting = findAlignSetting(value);\n        if (!setting) {\n          throw new SyntaxError(\"An invalid or illegal string was specified.\");\n        }\n        _align = setting;\n        this.hasBeenReset = true;\n      }\n    }\n  });\n\n  /**\n   * Other <track> spec defined properties\n   */\n\n  // http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html#text-track-cue-display-state\n  this.displayState = undefined;\n}\n\n/**\n * VTTCue methods\n */\n\nVTTCue.prototype.getCueAsHTML = function() {\n  // Assume WebVTT.convertCueToDOMTree is on the global.\n  return WebVTT.convertCueToDOMTree(window, this.text);\n};\n\nmodule.exports = VTTCue;\n","/**\n * Copyright 2013 vtt.js Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar scrollSetting = {\n  \"\": true,\n  \"up\": true\n};\n\nfunction findScrollSetting(value) {\n  if (typeof value !== \"string\") {\n    return false;\n  }\n  var scroll = scrollSetting[value.toLowerCase()];\n  return scroll ? value.toLowerCase() : false;\n}\n\nfunction isValidPercentValue(value) {\n  return typeof value === \"number\" && (value >= 0 && value <= 100);\n}\n\n// VTTRegion shim http://dev.w3.org/html5/webvtt/#vttregion-interface\nfunction VTTRegion() {\n  var _width = 100;\n  var _lines = 3;\n  var _regionAnchorX = 0;\n  var _regionAnchorY = 100;\n  var _viewportAnchorX = 0;\n  var _viewportAnchorY = 100;\n  var _scroll = \"\";\n\n  Object.defineProperties(this, {\n    \"width\": {\n      enumerable: true,\n      get: function() {\n        return _width;\n      },\n      set: function(value) {\n        if (!isValidPercentValue(value)) {\n          throw new Error(\"Width must be between 0 and 100.\");\n        }\n        _width = value;\n      }\n    },\n    \"lines\": {\n      enumerable: true,\n      get: function() {\n        return _lines;\n      },\n      set: function(value) {\n        if (typeof value !== \"number\") {\n          throw new TypeError(\"Lines must be set to a number.\");\n        }\n        _lines = value;\n      }\n    },\n    \"regionAnchorY\": {\n      enumerable: true,\n      get: function() {\n        return _regionAnchorY;\n      },\n      set: function(value) {\n        if (!isValidPercentValue(value)) {\n          throw new Error(\"RegionAnchorX must be between 0 and 100.\");\n        }\n        _regionAnchorY = value;\n      }\n    },\n    \"regionAnchorX\": {\n      enumerable: true,\n      get: function() {\n        return _regionAnchorX;\n      },\n      set: function(value) {\n        if(!isValidPercentValue(value)) {\n          throw new Error(\"RegionAnchorY must be between 0 and 100.\");\n        }\n        _regionAnchorX = value;\n      }\n    },\n    \"viewportAnchorY\": {\n      enumerable: true,\n      get: function() {\n        return _viewportAnchorY;\n      },\n      set: function(value) {\n        if (!isValidPercentValue(value)) {\n          throw new Error(\"ViewportAnchorY must be between 0 and 100.\");\n        }\n        _viewportAnchorY = value;\n      }\n    },\n    \"viewportAnchorX\": {\n      enumerable: true,\n      get: function() {\n        return _viewportAnchorX;\n      },\n      set: function(value) {\n        if (!isValidPercentValue(value)) {\n          throw new Error(\"ViewportAnchorX must be between 0 and 100.\");\n        }\n        _viewportAnchorX = value;\n      }\n    },\n    \"scroll\": {\n      enumerable: true,\n      get: function() {\n        return _scroll;\n      },\n      set: function(value) {\n        var setting = findScrollSetting(value);\n        // Have to check for false as an empty string is a legal value.\n        if (setting === false) {\n          throw new SyntaxError(\"An invalid or illegal string was specified.\");\n        }\n        _scroll = setting;\n      }\n    }\n  });\n}\n\nmodule.exports = VTTRegion;\n","module.exports = SafeParseTuple\n\nfunction SafeParseTuple(obj, reviver) {\n    var json\n    var error = null\n\n    try {\n        json = JSON.parse(obj, reviver)\n    } catch (err) {\n        error = err\n    }\n\n    return [error, json]\n}\n","var toUnsigned = function(value) {\n  return value >>> 0;\n};\n\nmodule.exports = {\n  toUnsigned: toUnsigned\n};\n","module.exports = {\n  generator: require('./mp4-generator'),\n  probe: require('./probe'),\n  Transmuxer: require('./transmuxer').Transmuxer,\n  AudioSegmentStream: require('./transmuxer').AudioSegmentStream,\n  VideoSegmentStream: require('./transmuxer').VideoSegmentStream,\n  CaptionParser: require('./caption-parser')\n};\n","// Convert an array of nal units into an array of frames with each frame being\n// composed of the nal units that make up that frame\n// Also keep track of cummulative data about the frame from the nal units such\n// as the frame duration, starting pts, etc.\nvar groupNalsIntoFrames = function(nalUnits) {\n  var\n    i,\n    currentNal,\n    currentFrame = [],\n    frames = [];\n\n  currentFrame.byteLength = 0;\n\n  for (i = 0; i < nalUnits.length; i++) {\n    currentNal = nalUnits[i];\n\n    // Split on 'aud'-type nal units\n    if (currentNal.nalUnitType === 'access_unit_delimiter_rbsp') {\n      // Since the very first nal unit is expected to be an AUD\n      // only push to the frames array when currentFrame is not empty\n      if (currentFrame.length) {\n        currentFrame.duration = currentNal.dts - currentFrame.dts;\n        frames.push(currentFrame);\n      }\n      currentFrame = [currentNal];\n      currentFrame.byteLength = currentNal.data.byteLength;\n      currentFrame.pts = currentNal.pts;\n      currentFrame.dts = currentNal.dts;\n    } else {\n      // Specifically flag key frames for ease of use later\n      if (currentNal.nalUnitType === 'slice_layer_without_partitioning_rbsp_idr') {\n        currentFrame.keyFrame = true;\n      }\n      currentFrame.duration = currentNal.dts - currentFrame.dts;\n      currentFrame.byteLength += currentNal.data.byteLength;\n      currentFrame.push(currentNal);\n    }\n  }\n\n  // For the last frame, use the duration of the previous frame if we\n  // have nothing better to go on\n  if (frames.length &&\n      (!currentFrame.duration ||\n       currentFrame.duration <= 0)) {\n    currentFrame.duration = frames[frames.length - 1].duration;\n  }\n\n  // Push the final frame\n  frames.push(currentFrame);\n  return frames;\n};\n\n// Convert an array of frames into an array of Gop with each Gop being composed\n// of the frames that make up that Gop\n// Also keep track of cummulative data about the Gop from the frames such as the\n// Gop duration, starting pts, etc.\nvar groupFramesIntoGops = function(frames) {\n  var\n    i,\n    currentFrame,\n    currentGop = [],\n    gops = [];\n\n  // We must pre-set some of the values on the Gop since we\n  // keep running totals of these values\n  currentGop.byteLength = 0;\n  currentGop.nalCount = 0;\n  currentGop.duration = 0;\n  currentGop.pts = frames[0].pts;\n  currentGop.dts = frames[0].dts;\n\n  // store some metadata about all the Gops\n  gops.byteLength = 0;\n  gops.nalCount = 0;\n  gops.duration = 0;\n  gops.pts = frames[0].pts;\n  gops.dts = frames[0].dts;\n\n  for (i = 0; i < frames.length; i++) {\n    currentFrame = frames[i];\n\n    if (currentFrame.keyFrame) {\n      // Since the very first frame is expected to be an keyframe\n      // only push to the gops array when currentGop is not empty\n      if (currentGop.length) {\n        gops.push(currentGop);\n        gops.byteLength += currentGop.byteLength;\n        gops.nalCount += currentGop.nalCount;\n        gops.duration += currentGop.duration;\n      }\n\n      currentGop = [currentFrame];\n      currentGop.nalCount = currentFrame.length;\n      currentGop.byteLength = currentFrame.byteLength;\n      currentGop.pts = currentFrame.pts;\n      currentGop.dts = currentFrame.dts;\n      currentGop.duration = currentFrame.duration;\n    } else {\n      currentGop.duration += currentFrame.duration;\n      currentGop.nalCount += currentFrame.length;\n      currentGop.byteLength += currentFrame.byteLength;\n      currentGop.push(currentFrame);\n    }\n  }\n\n  if (gops.length && currentGop.duration <= 0) {\n    currentGop.duration = gops[gops.length - 1].duration;\n  }\n  gops.byteLength += currentGop.byteLength;\n  gops.nalCount += currentGop.nalCount;\n  gops.duration += currentGop.duration;\n\n  // push the final Gop\n  gops.push(currentGop);\n  return gops;\n};\n\n/*\n * Search for the first keyframe in the GOPs and throw away all frames\n * until that keyframe. Then extend the duration of the pulled keyframe\n * and pull the PTS and DTS of the keyframe so that it covers the time\n * range of the frames that were disposed.\n *\n * @param {Array} gops video GOPs\n * @returns {Array} modified video GOPs\n */\nvar extendFirstKeyFrame = function(gops) {\n  var currentGop;\n\n  if (!gops[0][0].keyFrame && gops.length > 1) {\n    // Remove the first GOP\n    currentGop = gops.shift();\n\n    gops.byteLength -= currentGop.byteLength;\n    gops.nalCount -= currentGop.nalCount;\n\n    // Extend the first frame of what is now the\n    // first gop to cover the time period of the\n    // frames we just removed\n    gops[0][0].dts = currentGop.dts;\n    gops[0][0].pts = currentGop.pts;\n    gops[0][0].duration += currentGop.duration;\n  }\n\n  return gops;\n};\n\n/**\n * Default sample object\n * see ISO/IEC 14496-12:2012, section 8.6.4.3\n */\nvar createDefaultSample = function() {\n  return {\n    size: 0,\n    flags: {\n      isLeading: 0,\n      dependsOn: 1,\n      isDependedOn: 0,\n      hasRedundancy: 0,\n      degradationPriority: 0,\n      isNonSyncSample: 1\n    }\n  };\n};\n\n/*\n * Collates information from a video frame into an object for eventual\n * entry into an MP4 sample table.\n *\n * @param {Object} frame the video frame\n * @param {Number} dataOffset the byte offset to position the sample\n * @return {Object} object containing sample table info for a frame\n */\nvar sampleForFrame = function(frame, dataOffset) {\n  var sample = createDefaultSample();\n\n  sample.dataOffset = dataOffset;\n  sample.compositionTimeOffset = frame.pts - frame.dts;\n  sample.duration = frame.duration;\n  sample.size = 4 * frame.length; // Space for nal unit size\n  sample.size += frame.byteLength;\n\n  if (frame.keyFrame) {\n    sample.flags.dependsOn = 2;\n    sample.flags.isNonSyncSample = 0;\n  }\n\n  return sample;\n};\n\n// generate the track's sample table from an array of gops\nvar generateSampleTable = function(gops, baseDataOffset) {\n  var\n    h, i,\n    sample,\n    currentGop,\n    currentFrame,\n    dataOffset = baseDataOffset || 0,\n    samples = [];\n\n  for (h = 0; h < gops.length; h++) {\n    currentGop = gops[h];\n\n    for (i = 0; i < currentGop.length; i++) {\n      currentFrame = currentGop[i];\n\n      sample = sampleForFrame(currentFrame, dataOffset);\n\n      dataOffset += sample.size;\n\n      samples.push(sample);\n    }\n  }\n  return samples;\n};\n\n// generate the track's raw mdat data from an array of gops\nvar concatenateNalData = function(gops) {\n  var\n    h, i, j,\n    currentGop,\n    currentFrame,\n    currentNal,\n    dataOffset = 0,\n    nalsByteLength = gops.byteLength,\n    numberOfNals = gops.nalCount,\n    totalByteLength = nalsByteLength + 4 * numberOfNals,\n    data = new Uint8Array(totalByteLength),\n    view = new DataView(data.buffer);\n\n  // For each Gop..\n  for (h = 0; h < gops.length; h++) {\n    currentGop = gops[h];\n\n    // For each Frame..\n    for (i = 0; i < currentGop.length; i++) {\n      currentFrame = currentGop[i];\n\n      // For each NAL..\n      for (j = 0; j < currentFrame.length; j++) {\n        currentNal = currentFrame[j];\n\n        view.setUint32(dataOffset, currentNal.data.byteLength);\n        dataOffset += 4;\n        data.set(currentNal.data, dataOffset);\n        dataOffset += currentNal.data.byteLength;\n      }\n    }\n  }\n  return data;\n};\n\nmodule.exports = {\n  groupNalsIntoFrames: groupNalsIntoFrames,\n  groupFramesIntoGops: groupFramesIntoGops,\n  extendFirstKeyFrame: extendFirstKeyFrame,\n  generateSampleTable: generateSampleTable,\n  concatenateNalData: concatenateNalData\n};\n","var ONE_SECOND_IN_TS = 90000; // 90kHz clock\n\n/**\n * Store information about the start and end of the track and the\n * duration for each frame/sample we process in order to calculate\n * the baseMediaDecodeTime\n */\nvar collectDtsInfo = function(track, data) {\n  if (typeof data.pts === 'number') {\n    if (track.timelineStartInfo.pts === undefined) {\n      track.timelineStartInfo.pts = data.pts;\n    }\n\n    if (track.minSegmentPts === undefined) {\n      track.minSegmentPts = data.pts;\n    } else {\n      track.minSegmentPts = Math.min(track.minSegmentPts, data.pts);\n    }\n\n    if (track.maxSegmentPts === undefined) {\n      track.maxSegmentPts = data.pts;\n    } else {\n      track.maxSegmentPts = Math.max(track.maxSegmentPts, data.pts);\n    }\n  }\n\n  if (typeof data.dts === 'number') {\n    if (track.timelineStartInfo.dts === undefined) {\n      track.timelineStartInfo.dts = data.dts;\n    }\n\n    if (track.minSegmentDts === undefined) {\n      track.minSegmentDts = data.dts;\n    } else {\n      track.minSegmentDts = Math.min(track.minSegmentDts, data.dts);\n    }\n\n    if (track.maxSegmentDts === undefined) {\n      track.maxSegmentDts = data.dts;\n    } else {\n      track.maxSegmentDts = Math.max(track.maxSegmentDts, data.dts);\n    }\n  }\n};\n\n/**\n * Clear values used to calculate the baseMediaDecodeTime between\n * tracks\n */\nvar clearDtsInfo = function(track) {\n  delete track.minSegmentDts;\n  delete track.maxSegmentDts;\n  delete track.minSegmentPts;\n  delete track.maxSegmentPts;\n};\n\n/**\n * Calculate the track's baseMediaDecodeTime based on the earliest\n * DTS the transmuxer has ever seen and the minimum DTS for the\n * current track\n * @param track {object} track metadata configuration\n * @param keepOriginalTimestamps {boolean} If true, keep the timestamps\n *        in the source; false to adjust the first segment to start at 0.\n */\nvar calculateTrackBaseMediaDecodeTime = function(track, keepOriginalTimestamps) {\n  var\n    baseMediaDecodeTime,\n    scale,\n    minSegmentDts = track.minSegmentDts;\n\n  // Optionally adjust the time so the first segment starts at zero.\n  if (!keepOriginalTimestamps) {\n    minSegmentDts -= track.timelineStartInfo.dts;\n  }\n\n  // track.timelineStartInfo.baseMediaDecodeTime is the location, in time, where\n  // we want the start of the first segment to be placed\n  baseMediaDecodeTime = track.timelineStartInfo.baseMediaDecodeTime;\n\n  // Add to that the distance this segment is from the very first\n  baseMediaDecodeTime += minSegmentDts;\n\n  // baseMediaDecodeTime must not become negative\n  baseMediaDecodeTime = Math.max(0, baseMediaDecodeTime);\n\n  if (track.type === 'audio') {\n    // Audio has a different clock equal to the sampling_rate so we need to\n    // scale the PTS values into the clock rate of the track\n    scale = track.samplerate / ONE_SECOND_IN_TS;\n    baseMediaDecodeTime *= scale;\n    baseMediaDecodeTime = Math.floor(baseMediaDecodeTime);\n  }\n\n  return baseMediaDecodeTime;\n};\n\nmodule.exports = {\n  clearDtsInfo: clearDtsInfo,\n  calculateTrackBaseMediaDecodeTime: calculateTrackBaseMediaDecodeTime,\n  collectDtsInfo: collectDtsInfo\n};\n","/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * A stream-based mp2t to mp4 converter. This utility can be used to\n * deliver mp4s to a SourceBuffer on platforms that support native\n * Media Source Extensions.\n */\n'use strict';\nvar Stream = require('../utils/stream.js'),\n  CaptionStream = require('./caption-stream'),\n  StreamTypes = require('./stream-types'),\n  TimestampRolloverStream = require('./timestamp-rollover-stream').TimestampRolloverStream;\n\nvar m2tsStreamTypes = require('./stream-types.js');\n\n// object types\nvar TransportPacketStream, TransportParseStream, ElementaryStream;\n\n// constants\nvar\n  MP2T_PACKET_LENGTH = 188, // bytes\n  SYNC_BYTE = 0x47;\n\n/**\n * Splits an incoming stream of binary data into MPEG-2 Transport\n * Stream packets.\n */\nTransportPacketStream = function() {\n  var\n    buffer = new Uint8Array(MP2T_PACKET_LENGTH),\n    bytesInBuffer = 0;\n\n  TransportPacketStream.prototype.init.call(this);\n\n   // Deliver new bytes to the stream.\n\n  /**\n   * Split a stream of data into M2TS packets\n  **/\n  this.push = function(bytes) {\n    var\n      startIndex = 0,\n      endIndex = MP2T_PACKET_LENGTH,\n      everything;\n\n    // If there are bytes remaining from the last segment, prepend them to the\n    // bytes that were pushed in\n    if (bytesInBuffer) {\n      everything = new Uint8Array(bytes.byteLength + bytesInBuffer);\n      everything.set(buffer.subarray(0, bytesInBuffer));\n      everything.set(bytes, bytesInBuffer);\n      bytesInBuffer = 0;\n    } else {\n      everything = bytes;\n    }\n\n    // While we have enough data for a packet\n    while (endIndex < everything.byteLength) {\n      // Look for a pair of start and end sync bytes in the data..\n      if (everything[startIndex] === SYNC_BYTE && everything[endIndex] === SYNC_BYTE) {\n        // We found a packet so emit it and jump one whole packet forward in\n        // the stream\n        this.trigger('data', everything.subarray(startIndex, endIndex));\n        startIndex += MP2T_PACKET_LENGTH;\n        endIndex += MP2T_PACKET_LENGTH;\n        continue;\n      }\n      // If we get here, we have somehow become de-synchronized and we need to step\n      // forward one byte at a time until we find a pair of sync bytes that denote\n      // a packet\n      startIndex++;\n      endIndex++;\n    }\n\n    // If there was some data left over at the end of the segment that couldn't\n    // possibly be a whole packet, keep it because it might be the start of a packet\n    // that continues in the next segment\n    if (startIndex < everything.byteLength) {\n      buffer.set(everything.subarray(startIndex), 0);\n      bytesInBuffer = everything.byteLength - startIndex;\n    }\n  };\n\n  /**\n   * Passes identified M2TS packets to the TransportParseStream to be parsed\n  **/\n  this.flush = function() {\n    // If the buffer contains a whole packet when we are being flushed, emit it\n    // and empty the buffer. Otherwise hold onto the data because it may be\n    // important for decoding the next segment\n    if (bytesInBuffer === MP2T_PACKET_LENGTH && buffer[0] === SYNC_BYTE) {\n      this.trigger('data', buffer);\n      bytesInBuffer = 0;\n    }\n    this.trigger('done');\n  };\n};\nTransportPacketStream.prototype = new Stream();\n\n/**\n * Accepts an MP2T TransportPacketStream and emits data events with parsed\n * forms of the individual transport stream packets.\n */\nTransportParseStream = function() {\n  var parsePsi, parsePat, parsePmt, self;\n  TransportParseStream.prototype.init.call(this);\n  self = this;\n\n  this.packetsWaitingForPmt = [];\n  this.programMapTable = undefined;\n\n  parsePsi = function(payload, psi) {\n    var offset = 0;\n\n    // PSI packets may be split into multiple sections and those\n    // sections may be split into multiple packets. If a PSI\n    // section starts in this packet, the payload_unit_start_indicator\n    // will be true and the first byte of the payload will indicate\n    // the offset from the current position to the start of the\n    // section.\n    if (psi.payloadUnitStartIndicator) {\n      offset += payload[offset] + 1;\n    }\n\n    if (psi.type === 'pat') {\n      parsePat(payload.subarray(offset), psi);\n    } else {\n      parsePmt(payload.subarray(offset), psi);\n    }\n  };\n\n  parsePat = function(payload, pat) {\n    pat.section_number = payload[7]; // eslint-disable-line camelcase\n    pat.last_section_number = payload[8]; // eslint-disable-line camelcase\n\n    // skip the PSI header and parse the first PMT entry\n    self.pmtPid = (payload[10] & 0x1F) << 8 | payload[11];\n    pat.pmtPid = self.pmtPid;\n  };\n\n  /**\n   * Parse out the relevant fields of a Program Map Table (PMT).\n   * @param payload {Uint8Array} the PMT-specific portion of an MP2T\n   * packet. The first byte in this array should be the table_id\n   * field.\n   * @param pmt {object} the object that should be decorated with\n   * fields parsed from the PMT.\n   */\n  parsePmt = function(payload, pmt) {\n    var sectionLength, tableEnd, programInfoLength, offset;\n\n    // PMTs can be sent ahead of the time when they should actually\n    // take effect. We don't believe this should ever be the case\n    // for HLS but we'll ignore \"forward\" PMT declarations if we see\n    // them. Future PMT declarations have the current_next_indicator\n    // set to zero.\n    if (!(payload[5] & 0x01)) {\n      return;\n    }\n\n    // overwrite any existing program map table\n    self.programMapTable = {\n      video: null,\n      audio: null,\n      'timed-metadata': {}\n    };\n\n    // the mapping table ends at the end of the current section\n    sectionLength = (payload[1] & 0x0f) << 8 | payload[2];\n    tableEnd = 3 + sectionLength - 4;\n\n    // to determine where the table is, we have to figure out how\n    // long the program info descriptors are\n    programInfoLength = (payload[10] & 0x0f) << 8 | payload[11];\n\n    // advance the offset to the first entry in the mapping table\n    offset = 12 + programInfoLength;\n    while (offset < tableEnd) {\n      var streamType = payload[offset];\n      var pid = (payload[offset + 1] & 0x1F) << 8 | payload[offset + 2];\n\n      // only map a single elementary_pid for audio and video stream types\n      // TODO: should this be done for metadata too? for now maintain behavior of\n      //       multiple metadata streams\n      if (streamType === StreamTypes.H264_STREAM_TYPE &&\n          self.programMapTable.video === null) {\n        self.programMapTable.video = pid;\n      } else if (streamType === StreamTypes.ADTS_STREAM_TYPE &&\n                 self.programMapTable.audio === null) {\n        self.programMapTable.audio = pid;\n      } else if (streamType === StreamTypes.METADATA_STREAM_TYPE) {\n        // map pid to stream type for metadata streams\n        self.programMapTable['timed-metadata'][pid] = streamType;\n      }\n\n      // move to the next table entry\n      // skip past the elementary stream descriptors, if present\n      offset += ((payload[offset + 3] & 0x0F) << 8 | payload[offset + 4]) + 5;\n    }\n\n    // record the map on the packet as well\n    pmt.programMapTable = self.programMapTable;\n  };\n\n  /**\n   * Deliver a new MP2T packet to the next stream in the pipeline.\n   */\n  this.push = function(packet) {\n    var\n      result = {},\n      offset = 4;\n\n    result.payloadUnitStartIndicator = !!(packet[1] & 0x40);\n\n    // pid is a 13-bit field starting at the last bit of packet[1]\n    result.pid = packet[1] & 0x1f;\n    result.pid <<= 8;\n    result.pid |= packet[2];\n\n    // if an adaption field is present, its length is specified by the\n    // fifth byte of the TS packet header. The adaptation field is\n    // used to add stuffing to PES packets that don't fill a complete\n    // TS packet, and to specify some forms of timing and control data\n    // that we do not currently use.\n    if (((packet[3] & 0x30) >>> 4) > 0x01) {\n      offset += packet[offset] + 1;\n    }\n\n    // parse the rest of the packet based on the type\n    if (result.pid === 0) {\n      result.type = 'pat';\n      parsePsi(packet.subarray(offset), result);\n      this.trigger('data', result);\n    } else if (result.pid === this.pmtPid) {\n      result.type = 'pmt';\n      parsePsi(packet.subarray(offset), result);\n      this.trigger('data', result);\n\n      // if there are any packets waiting for a PMT to be found, process them now\n      while (this.packetsWaitingForPmt.length) {\n        this.processPes_.apply(this, this.packetsWaitingForPmt.shift());\n      }\n    } else if (this.programMapTable === undefined) {\n      // When we have not seen a PMT yet, defer further processing of\n      // PES packets until one has been parsed\n      this.packetsWaitingForPmt.push([packet, offset, result]);\n    } else {\n      this.processPes_(packet, offset, result);\n    }\n  };\n\n  this.processPes_ = function(packet, offset, result) {\n    // set the appropriate stream type\n    if (result.pid === this.programMapTable.video) {\n      result.streamType = StreamTypes.H264_STREAM_TYPE;\n    } else if (result.pid === this.programMapTable.audio) {\n      result.streamType = StreamTypes.ADTS_STREAM_TYPE;\n    } else {\n      // if not video or audio, it is timed-metadata or unknown\n      // if unknown, streamType will be undefined\n      result.streamType = this.programMapTable['timed-metadata'][result.pid];\n    }\n\n    result.type = 'pes';\n    result.data = packet.subarray(offset);\n\n    this.trigger('data', result);\n  };\n\n};\nTransportParseStream.prototype = new Stream();\nTransportParseStream.STREAM_TYPES  = {\n  h264: 0x1b,\n  adts: 0x0f\n};\n\n/**\n * Reconsistutes program elementary stream (PES) packets from parsed\n * transport stream packets. That is, if you pipe an\n * mp2t.TransportParseStream into a mp2t.ElementaryStream, the output\n * events will be events which capture the bytes for individual PES\n * packets plus relevant metadata that has been extracted from the\n * container.\n */\nElementaryStream = function() {\n  var\n    self = this,\n    // PES packet fragments\n    video = {\n      data: [],\n      size: 0\n    },\n    audio = {\n      data: [],\n      size: 0\n    },\n    timedMetadata = {\n      data: [],\n      size: 0\n    },\n    parsePes = function(payload, pes) {\n      var ptsDtsFlags;\n\n      // get the packet length, this will be 0 for video\n      pes.packetLength = 6 + ((payload[4] << 8) | payload[5]);\n\n      // find out if this packets starts a new keyframe\n      pes.dataAlignmentIndicator = (payload[6] & 0x04) !== 0;\n      // PES packets may be annotated with a PTS value, or a PTS value\n      // and a DTS value. Determine what combination of values is\n      // available to work with.\n      ptsDtsFlags = payload[7];\n\n      // PTS and DTS are normally stored as a 33-bit number.  Javascript\n      // performs all bitwise operations on 32-bit integers but javascript\n      // supports a much greater range (52-bits) of integer using standard\n      // mathematical operations.\n      // We construct a 31-bit value using bitwise operators over the 31\n      // most significant bits and then multiply by 4 (equal to a left-shift\n      // of 2) before we add the final 2 least significant bits of the\n      // timestamp (equal to an OR.)\n      if (ptsDtsFlags & 0xC0) {\n        // the PTS and DTS are not written out directly. For information\n        // on how they are encoded, see\n        // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n        pes.pts = (payload[9] & 0x0E) << 27 |\n          (payload[10] & 0xFF) << 20 |\n          (payload[11] & 0xFE) << 12 |\n          (payload[12] & 0xFF) <<  5 |\n          (payload[13] & 0xFE) >>>  3;\n        pes.pts *= 4; // Left shift by 2\n        pes.pts += (payload[13] & 0x06) >>> 1; // OR by the two LSBs\n        pes.dts = pes.pts;\n        if (ptsDtsFlags & 0x40) {\n          pes.dts = (payload[14] & 0x0E) << 27 |\n            (payload[15] & 0xFF) << 20 |\n            (payload[16] & 0xFE) << 12 |\n            (payload[17] & 0xFF) << 5 |\n            (payload[18] & 0xFE) >>> 3;\n          pes.dts *= 4; // Left shift by 2\n          pes.dts += (payload[18] & 0x06) >>> 1; // OR by the two LSBs\n        }\n      }\n      // the data section starts immediately after the PES header.\n      // pes_header_data_length specifies the number of header bytes\n      // that follow the last byte of the field.\n      pes.data = payload.subarray(9 + payload[8]);\n    },\n    /**\n      * Pass completely parsed PES packets to the next stream in the pipeline\n     **/\n    flushStream = function(stream, type, forceFlush) {\n      var\n        packetData = new Uint8Array(stream.size),\n        event = {\n          type: type\n        },\n        i = 0,\n        offset = 0,\n        packetFlushable = false,\n        fragment;\n\n      // do nothing if there is not enough buffered data for a complete\n      // PES header\n      if (!stream.data.length || stream.size < 9) {\n        return;\n      }\n      event.trackId = stream.data[0].pid;\n\n      // reassemble the packet\n      for (i = 0; i < stream.data.length; i++) {\n        fragment = stream.data[i];\n\n        packetData.set(fragment.data, offset);\n        offset += fragment.data.byteLength;\n      }\n\n      // parse assembled packet's PES header\n      parsePes(packetData, event);\n\n      // non-video PES packets MUST have a non-zero PES_packet_length\n      // check that there is enough stream data to fill the packet\n      packetFlushable = type === 'video' || event.packetLength <= stream.size;\n\n      // flush pending packets if the conditions are right\n      if (forceFlush || packetFlushable) {\n        stream.size = 0;\n        stream.data.length = 0;\n      }\n\n      // only emit packets that are complete. this is to avoid assembling\n      // incomplete PES packets due to poor segmentation\n      if (packetFlushable) {\n        self.trigger('data', event);\n      }\n    };\n\n  ElementaryStream.prototype.init.call(this);\n\n  /**\n   * Identifies M2TS packet types and parses PES packets using metadata\n   * parsed from the PMT\n   **/\n  this.push = function(data) {\n    ({\n      pat: function() {\n        // we have to wait for the PMT to arrive as well before we\n        // have any meaningful metadata\n      },\n      pes: function() {\n        var stream, streamType;\n\n        switch (data.streamType) {\n        case StreamTypes.H264_STREAM_TYPE:\n        case m2tsStreamTypes.H264_STREAM_TYPE:\n          stream = video;\n          streamType = 'video';\n          break;\n        case StreamTypes.ADTS_STREAM_TYPE:\n          stream = audio;\n          streamType = 'audio';\n          break;\n        case StreamTypes.METADATA_STREAM_TYPE:\n          stream = timedMetadata;\n          streamType = 'timed-metadata';\n          break;\n        default:\n          // ignore unknown stream types\n          return;\n        }\n\n        // if a new packet is starting, we can flush the completed\n        // packet\n        if (data.payloadUnitStartIndicator) {\n          flushStream(stream, streamType, true);\n        }\n\n        // buffer this fragment until we are sure we've received the\n        // complete payload\n        stream.data.push(data);\n        stream.size += data.data.byteLength;\n      },\n      pmt: function() {\n        var\n          event = {\n            type: 'metadata',\n            tracks: []\n          },\n          programMapTable = data.programMapTable;\n\n        // translate audio and video streams to tracks\n        if (programMapTable.video !== null) {\n          event.tracks.push({\n            timelineStartInfo: {\n              baseMediaDecodeTime: 0\n            },\n            id: +programMapTable.video,\n            codec: 'avc',\n            type: 'video'\n          });\n        }\n        if (programMapTable.audio !== null) {\n          event.tracks.push({\n            timelineStartInfo: {\n              baseMediaDecodeTime: 0\n            },\n            id: +programMapTable.audio,\n            codec: 'adts',\n            type: 'audio'\n          });\n        }\n\n        self.trigger('data', event);\n      }\n    })[data.type]();\n  };\n\n  /**\n   * Flush any remaining input. Video PES packets may be of variable\n   * length. Normally, the start of a new video packet can trigger the\n   * finalization of the previous packet. That is not possible if no\n   * more video is forthcoming, however. In that case, some other\n   * mechanism (like the end of the file) has to be employed. When it is\n   * clear that no additional data is forthcoming, calling this method\n   * will flush the buffered packets.\n   */\n  this.flush = function() {\n    // !!THIS ORDER IS IMPORTANT!!\n    // video first then audio\n    flushStream(video, 'video');\n    flushStream(audio, 'audio');\n    flushStream(timedMetadata, 'timed-metadata');\n    this.trigger('done');\n  };\n};\nElementaryStream.prototype = new Stream();\n\nvar m2ts = {\n  PAT_PID: 0x0000,\n  MP2T_PACKET_LENGTH: MP2T_PACKET_LENGTH,\n  TransportPacketStream: TransportPacketStream,\n  TransportParseStream: TransportParseStream,\n  ElementaryStream: ElementaryStream,\n  TimestampRolloverStream: TimestampRolloverStream,\n  CaptionStream: CaptionStream.CaptionStream,\n  Cea608Stream: CaptionStream.Cea608Stream,\n  MetadataStream: require('./metadata-stream')\n};\n\nfor (var type in StreamTypes) {\n  if (StreamTypes.hasOwnProperty(type)) {\n    m2ts[type] = StreamTypes[type];\n  }\n}\n\nmodule.exports = m2ts;\n","/**\n * Accepts program elementary stream (PES) data events and parses out\n * ID3 metadata from them, if present.\n * @see http://id3.org/id3v2.3.0\n */\n'use strict';\nvar\n  Stream = require('../utils/stream'),\n  StreamTypes = require('./stream-types'),\n  // return a percent-encoded representation of the specified byte range\n  // @see http://en.wikipedia.org/wiki/Percent-encoding\n  percentEncode = function(bytes, start, end) {\n    var i, result = '';\n    for (i = start; i < end; i++) {\n      result += '%' + ('00' + bytes[i].toString(16)).slice(-2);\n    }\n    return result;\n  },\n  // return the string representation of the specified byte range,\n  // interpreted as UTf-8.\n  parseUtf8 = function(bytes, start, end) {\n    return decodeURIComponent(percentEncode(bytes, start, end));\n  },\n  // return the string representation of the specified byte range,\n  // interpreted as ISO-8859-1.\n  parseIso88591 = function(bytes, start, end) {\n    return unescape(percentEncode(bytes, start, end)); // jshint ignore:line\n  },\n  parseSyncSafeInteger = function(data) {\n    return (data[0] << 21) |\n            (data[1] << 14) |\n            (data[2] << 7) |\n            (data[3]);\n  },\n  tagParsers = {\n    TXXX: function(tag) {\n      var i;\n      if (tag.data[0] !== 3) {\n        // ignore frames with unrecognized character encodings\n        return;\n      }\n\n      for (i = 1; i < tag.data.length; i++) {\n        if (tag.data[i] === 0) {\n          // parse the text fields\n          tag.description = parseUtf8(tag.data, 1, i);\n          // do not include the null terminator in the tag value\n          tag.value = parseUtf8(tag.data, i + 1, tag.data.length).replace(/\\0*$/, '');\n          break;\n        }\n      }\n      tag.data = tag.value;\n    },\n    WXXX: function(tag) {\n      var i;\n      if (tag.data[0] !== 3) {\n        // ignore frames with unrecognized character encodings\n        return;\n      }\n\n      for (i = 1; i < tag.data.length; i++) {\n        if (tag.data[i] === 0) {\n          // parse the description and URL fields\n          tag.description = parseUtf8(tag.data, 1, i);\n          tag.url = parseUtf8(tag.data, i + 1, tag.data.length);\n          break;\n        }\n      }\n    },\n    PRIV: function(tag) {\n      var i;\n\n      for (i = 0; i < tag.data.length; i++) {\n        if (tag.data[i] === 0) {\n          // parse the description and URL fields\n          tag.owner = parseIso88591(tag.data, 0, i);\n          break;\n        }\n      }\n      tag.privateData = tag.data.subarray(i + 1);\n      tag.data = tag.privateData;\n    }\n  },\n  MetadataStream;\n\nMetadataStream = function(options) {\n  var\n    settings = {\n      debug: !!(options && options.debug),\n\n      // the bytes of the program-level descriptor field in MP2T\n      // see ISO/IEC 13818-1:2013 (E), section 2.6 \"Program and\n      // program element descriptors\"\n      descriptor: options && options.descriptor\n    },\n    // the total size in bytes of the ID3 tag being parsed\n    tagSize = 0,\n    // tag data that is not complete enough to be parsed\n    buffer = [],\n    // the total number of bytes currently in the buffer\n    bufferSize = 0,\n    i;\n\n  MetadataStream.prototype.init.call(this);\n\n  // calculate the text track in-band metadata track dispatch type\n  // https://html.spec.whatwg.org/multipage/embedded-content.html#steps-to-expose-a-media-resource-specific-text-track\n  this.dispatchType = StreamTypes.METADATA_STREAM_TYPE.toString(16);\n  if (settings.descriptor) {\n    for (i = 0; i < settings.descriptor.length; i++) {\n      this.dispatchType += ('00' + settings.descriptor[i].toString(16)).slice(-2);\n    }\n  }\n\n  this.push = function(chunk) {\n    var tag, frameStart, frameSize, frame, i, frameHeader;\n    if (chunk.type !== 'timed-metadata') {\n      return;\n    }\n\n    // if data_alignment_indicator is set in the PES header,\n    // we must have the start of a new ID3 tag. Assume anything\n    // remaining in the buffer was malformed and throw it out\n    if (chunk.dataAlignmentIndicator) {\n      bufferSize = 0;\n      buffer.length = 0;\n    }\n\n    // ignore events that don't look like ID3 data\n    if (buffer.length === 0 &&\n        (chunk.data.length < 10 ||\n          chunk.data[0] !== 'I'.charCodeAt(0) ||\n          chunk.data[1] !== 'D'.charCodeAt(0) ||\n          chunk.data[2] !== '3'.charCodeAt(0))) {\n      if (settings.debug) {\n        // eslint-disable-next-line no-console\n        console.log('Skipping unrecognized metadata packet');\n      }\n      return;\n    }\n\n    // add this chunk to the data we've collected so far\n\n    buffer.push(chunk);\n    bufferSize += chunk.data.byteLength;\n\n    // grab the size of the entire frame from the ID3 header\n    if (buffer.length === 1) {\n      // the frame size is transmitted as a 28-bit integer in the\n      // last four bytes of the ID3 header.\n      // The most significant bit of each byte is dropped and the\n      // results concatenated to recover the actual value.\n      tagSize = parseSyncSafeInteger(chunk.data.subarray(6, 10));\n\n      // ID3 reports the tag size excluding the header but it's more\n      // convenient for our comparisons to include it\n      tagSize += 10;\n    }\n\n    // if the entire frame has not arrived, wait for more data\n    if (bufferSize < tagSize) {\n      return;\n    }\n\n    // collect the entire frame so it can be parsed\n    tag = {\n      data: new Uint8Array(tagSize),\n      frames: [],\n      pts: buffer[0].pts,\n      dts: buffer[0].dts\n    };\n    for (i = 0; i < tagSize;) {\n      tag.data.set(buffer[0].data.subarray(0, tagSize - i), i);\n      i += buffer[0].data.byteLength;\n      bufferSize -= buffer[0].data.byteLength;\n      buffer.shift();\n    }\n\n    // find the start of the first frame and the end of the tag\n    frameStart = 10;\n    if (tag.data[5] & 0x40) {\n      // advance the frame start past the extended header\n      frameStart += 4; // header size field\n      frameStart += parseSyncSafeInteger(tag.data.subarray(10, 14));\n\n      // clip any padding off the end\n      tagSize -= parseSyncSafeInteger(tag.data.subarray(16, 20));\n    }\n\n    // parse one or more ID3 frames\n    // http://id3.org/id3v2.3.0#ID3v2_frame_overview\n    do {\n      // determine the number of bytes in this frame\n      frameSize = parseSyncSafeInteger(tag.data.subarray(frameStart + 4, frameStart + 8));\n      if (frameSize < 1) {\n         // eslint-disable-next-line no-console\n        return console.log('Malformed ID3 frame encountered. Skipping metadata parsing.');\n      }\n      frameHeader = String.fromCharCode(tag.data[frameStart],\n                                        tag.data[frameStart + 1],\n                                        tag.data[frameStart + 2],\n                                        tag.data[frameStart + 3]);\n\n\n      frame = {\n        id: frameHeader,\n        data: tag.data.subarray(frameStart + 10, frameStart + frameSize + 10)\n      };\n      frame.key = frame.id;\n      if (tagParsers[frame.id]) {\n        tagParsers[frame.id](frame);\n\n        // handle the special PRIV frame used to indicate the start\n        // time for raw AAC data\n        if (frame.owner === 'com.apple.streaming.transportStreamTimestamp') {\n          var\n            d = frame.data,\n            size = ((d[3] & 0x01)  << 30) |\n                   (d[4]  << 22) |\n                   (d[5] << 14) |\n                   (d[6] << 6) |\n                   (d[7] >>> 2);\n\n          size *= 4;\n          size += d[7] & 0x03;\n          frame.timeStamp = size;\n          // in raw AAC, all subsequent data will be timestamped based\n          // on the value of this frame\n          // we couldn't have known the appropriate pts and dts before\n          // parsing this ID3 tag so set those values now\n          if (tag.pts === undefined && tag.dts === undefined) {\n            tag.pts = frame.timeStamp;\n            tag.dts = frame.timeStamp;\n          }\n          this.trigger('timestamp', frame);\n        }\n      }\n      tag.frames.push(frame);\n\n      frameStart += 10; // advance past the frame header\n      frameStart += frameSize; // advance past the frame body\n    } while (frameStart < tagSize);\n    this.trigger('data', tag);\n  };\n};\nMetadataStream.prototype = new Stream();\n\nmodule.exports = MetadataStream;\n","'use strict';\n\nvar Stream = require('../utils/stream.js');\n\nvar AdtsStream;\n\nvar\n  ADTS_SAMPLING_FREQUENCIES = [\n    96000,\n    88200,\n    64000,\n    48000,\n    44100,\n    32000,\n    24000,\n    22050,\n    16000,\n    12000,\n    11025,\n    8000,\n    7350\n  ];\n\n/*\n * Accepts a ElementaryStream and emits data events with parsed\n * AAC Audio Frames of the individual packets. Input audio in ADTS\n * format is unpacked and re-emitted as AAC frames.\n *\n * @see http://wiki.multimedia.cx/index.php?title=ADTS\n * @see http://wiki.multimedia.cx/?title=Understanding_AAC\n */\nAdtsStream = function() {\n  var buffer;\n\n  AdtsStream.prototype.init.call(this);\n\n  this.push = function(packet) {\n    var\n      i = 0,\n      frameNum = 0,\n      frameLength,\n      protectionSkipBytes,\n      frameEnd,\n      oldBuffer,\n      sampleCount,\n      adtsFrameDuration;\n\n    if (packet.type !== 'audio') {\n      // ignore non-audio data\n      return;\n    }\n\n    // Prepend any data in the buffer to the input data so that we can parse\n    // aac frames the cross a PES packet boundary\n    if (buffer) {\n      oldBuffer = buffer;\n      buffer = new Uint8Array(oldBuffer.byteLength + packet.data.byteLength);\n      buffer.set(oldBuffer);\n      buffer.set(packet.data, oldBuffer.byteLength);\n    } else {\n      buffer = packet.data;\n    }\n\n    // unpack any ADTS frames which have been fully received\n    // for details on the ADTS header, see http://wiki.multimedia.cx/index.php?title=ADTS\n    while (i + 5 < buffer.length) {\n\n      // Loook for the start of an ADTS header..\n      if (buffer[i] !== 0xFF || (buffer[i + 1] & 0xF6) !== 0xF0) {\n        // If a valid header was not found,  jump one forward and attempt to\n        // find a valid ADTS header starting at the next byte\n        i++;\n        continue;\n      }\n\n      // The protection skip bit tells us if we have 2 bytes of CRC data at the\n      // end of the ADTS header\n      protectionSkipBytes = (~buffer[i + 1] & 0x01) * 2;\n\n      // Frame length is a 13 bit integer starting 16 bits from the\n      // end of the sync sequence\n      frameLength = ((buffer[i + 3] & 0x03) << 11) |\n        (buffer[i + 4] << 3) |\n        ((buffer[i + 5] & 0xe0) >> 5);\n\n      sampleCount = ((buffer[i + 6] & 0x03) + 1) * 1024;\n      adtsFrameDuration = (sampleCount * 90000) /\n        ADTS_SAMPLING_FREQUENCIES[(buffer[i + 2] & 0x3c) >>> 2];\n\n      frameEnd = i + frameLength;\n\n      // If we don't have enough data to actually finish this ADTS frame, return\n      // and wait for more data\n      if (buffer.byteLength < frameEnd) {\n        return;\n      }\n\n      // Otherwise, deliver the complete AAC frame\n      this.trigger('data', {\n        pts: packet.pts + (frameNum * adtsFrameDuration),\n        dts: packet.dts + (frameNum * adtsFrameDuration),\n        sampleCount: sampleCount,\n        audioobjecttype: ((buffer[i + 2] >>> 6) & 0x03) + 1,\n        channelcount: ((buffer[i + 2] & 1) << 2) |\n          ((buffer[i + 3] & 0xc0) >>> 6),\n        samplerate: ADTS_SAMPLING_FREQUENCIES[(buffer[i + 2] & 0x3c) >>> 2],\n        samplingfrequencyindex: (buffer[i + 2] & 0x3c) >>> 2,\n        // assume ISO/IEC 14496-12 AudioSampleEntry default of 16\n        samplesize: 16,\n        data: buffer.subarray(i + 7 + protectionSkipBytes, frameEnd)\n      });\n\n      // If the buffer is empty, clear it and return\n      if (buffer.byteLength === frameEnd) {\n        buffer = undefined;\n        return;\n      }\n\n      frameNum++;\n\n      // Remove the finished frame from the buffer and start the process again\n      buffer = buffer.subarray(frameEnd);\n    }\n  };\n  this.flush = function() {\n    this.trigger('done');\n  };\n};\n\nAdtsStream.prototype = new Stream();\n\nmodule.exports = AdtsStream;\n","'use strict';\n\nvar Stream = require('../utils/stream.js');\nvar ExpGolomb = require('../utils/exp-golomb.js');\n\nvar H264Stream, NalByteStream;\nvar PROFILES_WITH_OPTIONAL_SPS_DATA;\n\n/**\n * Accepts a NAL unit byte stream and unpacks the embedded NAL units.\n */\nNalByteStream = function() {\n  var\n    syncPoint = 0,\n    i,\n    buffer;\n  NalByteStream.prototype.init.call(this);\n\n  /*\n   * Scans a byte stream and triggers a data event with the NAL units found.\n   * @param {Object} data Event received from H264Stream\n   * @param {Uint8Array} data.data The h264 byte stream to be scanned\n   *\n   * @see H264Stream.push\n   */\n  this.push = function(data) {\n    var swapBuffer;\n\n    if (!buffer) {\n      buffer = data.data;\n    } else {\n      swapBuffer = new Uint8Array(buffer.byteLength + data.data.byteLength);\n      swapBuffer.set(buffer);\n      swapBuffer.set(data.data, buffer.byteLength);\n      buffer = swapBuffer;\n    }\n\n    // Rec. ITU-T H.264, Annex B\n    // scan for NAL unit boundaries\n\n    // a match looks like this:\n    // 0 0 1 .. NAL .. 0 0 1\n    // ^ sync point        ^ i\n    // or this:\n    // 0 0 1 .. NAL .. 0 0 0\n    // ^ sync point        ^ i\n\n    // advance the sync point to a NAL start, if necessary\n    for (; syncPoint < buffer.byteLength - 3; syncPoint++) {\n      if (buffer[syncPoint + 2] === 1) {\n        // the sync point is properly aligned\n        i = syncPoint + 5;\n        break;\n      }\n    }\n\n    while (i < buffer.byteLength) {\n      // look at the current byte to determine if we've hit the end of\n      // a NAL unit boundary\n      switch (buffer[i]) {\n      case 0:\n        // skip past non-sync sequences\n        if (buffer[i - 1] !== 0) {\n          i += 2;\n          break;\n        } else if (buffer[i - 2] !== 0) {\n          i++;\n          break;\n        }\n\n        // deliver the NAL unit if it isn't empty\n        if (syncPoint + 3 !== i - 2) {\n          this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));\n        }\n\n        // drop trailing zeroes\n        do {\n          i++;\n        } while (buffer[i] !== 1 && i < buffer.length);\n        syncPoint = i - 2;\n        i += 3;\n        break;\n      case 1:\n        // skip past non-sync sequences\n        if (buffer[i - 1] !== 0 ||\n            buffer[i - 2] !== 0) {\n          i += 3;\n          break;\n        }\n\n        // deliver the NAL unit\n        this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));\n        syncPoint = i - 2;\n        i += 3;\n        break;\n      default:\n        // the current byte isn't a one or zero, so it cannot be part\n        // of a sync sequence\n        i += 3;\n        break;\n      }\n    }\n    // filter out the NAL units that were delivered\n    buffer = buffer.subarray(syncPoint);\n    i -= syncPoint;\n    syncPoint = 0;\n  };\n\n  this.flush = function() {\n    // deliver the last buffered NAL unit\n    if (buffer && buffer.byteLength > 3) {\n      this.trigger('data', buffer.subarray(syncPoint + 3));\n    }\n    // reset the stream state\n    buffer = null;\n    syncPoint = 0;\n    this.trigger('done');\n  };\n};\nNalByteStream.prototype = new Stream();\n\n// values of profile_idc that indicate additional fields are included in the SPS\n// see Recommendation ITU-T H.264 (4/2013),\n// 7.3.2.1.1 Sequence parameter set data syntax\nPROFILES_WITH_OPTIONAL_SPS_DATA = {\n  100: true,\n  110: true,\n  122: true,\n  244: true,\n  44: true,\n  83: true,\n  86: true,\n  118: true,\n  128: true,\n  138: true,\n  139: true,\n  134: true\n};\n\n/**\n * Accepts input from a ElementaryStream and produces H.264 NAL unit data\n * events.\n */\nH264Stream = function() {\n  var\n    nalByteStream = new NalByteStream(),\n    self,\n    trackId,\n    currentPts,\n    currentDts,\n\n    discardEmulationPreventionBytes,\n    readSequenceParameterSet,\n    skipScalingList;\n\n  H264Stream.prototype.init.call(this);\n  self = this;\n\n  /*\n   * Pushes a packet from a stream onto the NalByteStream\n   *\n   * @param {Object} packet - A packet received from a stream\n   * @param {Uint8Array} packet.data - The raw bytes of the packet\n   * @param {Number} packet.dts - Decode timestamp of the packet\n   * @param {Number} packet.pts - Presentation timestamp of the packet\n   * @param {Number} packet.trackId - The id of the h264 track this packet came from\n   * @param {('video'|'audio')} packet.type - The type of packet\n   *\n   */\n  this.push = function(packet) {\n    if (packet.type !== 'video') {\n      return;\n    }\n    trackId = packet.trackId;\n    currentPts = packet.pts;\n    currentDts = packet.dts;\n\n    nalByteStream.push(packet);\n  };\n\n  /*\n   * Identify NAL unit types and pass on the NALU, trackId, presentation and decode timestamps\n   * for the NALUs to the next stream component.\n   * Also, preprocess caption and sequence parameter NALUs.\n   *\n   * @param {Uint8Array} data - A NAL unit identified by `NalByteStream.push`\n   * @see NalByteStream.push\n   */\n  nalByteStream.on('data', function(data) {\n    var\n      event = {\n        trackId: trackId,\n        pts: currentPts,\n        dts: currentDts,\n        data: data\n      };\n\n    switch (data[0] & 0x1f) {\n    case 0x05:\n      event.nalUnitType = 'slice_layer_without_partitioning_rbsp_idr';\n      break;\n    case 0x06:\n      event.nalUnitType = 'sei_rbsp';\n      event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));\n      break;\n    case 0x07:\n      event.nalUnitType = 'seq_parameter_set_rbsp';\n      event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));\n      event.config = readSequenceParameterSet(event.escapedRBSP);\n      break;\n    case 0x08:\n      event.nalUnitType = 'pic_parameter_set_rbsp';\n      break;\n    case 0x09:\n      event.nalUnitType = 'access_unit_delimiter_rbsp';\n      break;\n\n    default:\n      break;\n    }\n    // This triggers data on the H264Stream\n    self.trigger('data', event);\n  });\n  nalByteStream.on('done', function() {\n    self.trigger('done');\n  });\n\n  this.flush = function() {\n    nalByteStream.flush();\n  };\n\n  /**\n   * Advance the ExpGolomb decoder past a scaling list. The scaling\n   * list is optionally transmitted as part of a sequence parameter\n   * set and is not relevant to transmuxing.\n   * @param count {number} the number of entries in this scaling list\n   * @param expGolombDecoder {object} an ExpGolomb pointed to the\n   * start of a scaling list\n   * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1\n   */\n  skipScalingList = function(count, expGolombDecoder) {\n    var\n      lastScale = 8,\n      nextScale = 8,\n      j,\n      deltaScale;\n\n    for (j = 0; j < count; j++) {\n      if (nextScale !== 0) {\n        deltaScale = expGolombDecoder.readExpGolomb();\n        nextScale = (lastScale + deltaScale + 256) % 256;\n      }\n\n      lastScale = (nextScale === 0) ? lastScale : nextScale;\n    }\n  };\n\n  /**\n   * Expunge any \"Emulation Prevention\" bytes from a \"Raw Byte\n   * Sequence Payload\"\n   * @param data {Uint8Array} the bytes of a RBSP from a NAL\n   * unit\n   * @return {Uint8Array} the RBSP without any Emulation\n   * Prevention Bytes\n   */\n  discardEmulationPreventionBytes = function(data) {\n    var\n      length = data.byteLength,\n      emulationPreventionBytesPositions = [],\n      i = 1,\n      newLength, newData;\n\n    // Find all `Emulation Prevention Bytes`\n    while (i < length - 2) {\n      if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {\n        emulationPreventionBytesPositions.push(i + 2);\n        i += 2;\n      } else {\n        i++;\n      }\n    }\n\n    // If no Emulation Prevention Bytes were found just return the original\n    // array\n    if (emulationPreventionBytesPositions.length === 0) {\n      return data;\n    }\n\n    // Create a new array to hold the NAL unit data\n    newLength = length - emulationPreventionBytesPositions.length;\n    newData = new Uint8Array(newLength);\n    var sourceIndex = 0;\n\n    for (i = 0; i < newLength; sourceIndex++, i++) {\n      if (sourceIndex === emulationPreventionBytesPositions[0]) {\n        // Skip this byte\n        sourceIndex++;\n        // Remove this position index\n        emulationPreventionBytesPositions.shift();\n      }\n      newData[i] = data[sourceIndex];\n    }\n\n    return newData;\n  };\n\n  /**\n   * Read a sequence parameter set and return some interesting video\n   * properties. A sequence parameter set is the H264 metadata that\n   * describes the properties of upcoming video frames.\n   * @param data {Uint8Array} the bytes of a sequence parameter set\n   * @return {object} an object with configuration parsed from the\n   * sequence parameter set, including the dimensions of the\n   * associated video frames.\n   */\n  readSequenceParameterSet = function(data) {\n    var\n      frameCropLeftOffset = 0,\n      frameCropRightOffset = 0,\n      frameCropTopOffset = 0,\n      frameCropBottomOffset = 0,\n      sarScale = 1,\n      expGolombDecoder, profileIdc, levelIdc, profileCompatibility,\n      chromaFormatIdc, picOrderCntType,\n      numRefFramesInPicOrderCntCycle, picWidthInMbsMinus1,\n      picHeightInMapUnitsMinus1,\n      frameMbsOnlyFlag,\n      scalingListCount,\n      sarRatio,\n      aspectRatioIdc,\n      i;\n\n    expGolombDecoder = new ExpGolomb(data);\n    profileIdc = expGolombDecoder.readUnsignedByte(); // profile_idc\n    profileCompatibility = expGolombDecoder.readUnsignedByte(); // constraint_set[0-5]_flag\n    levelIdc = expGolombDecoder.readUnsignedByte(); // level_idc u(8)\n    expGolombDecoder.skipUnsignedExpGolomb(); // seq_parameter_set_id\n\n    // some profiles have more optional data we don't need\n    if (PROFILES_WITH_OPTIONAL_SPS_DATA[profileIdc]) {\n      chromaFormatIdc = expGolombDecoder.readUnsignedExpGolomb();\n      if (chromaFormatIdc === 3) {\n        expGolombDecoder.skipBits(1); // separate_colour_plane_flag\n      }\n      expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_luma_minus8\n      expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_chroma_minus8\n      expGolombDecoder.skipBits(1); // qpprime_y_zero_transform_bypass_flag\n      if (expGolombDecoder.readBoolean()) { // seq_scaling_matrix_present_flag\n        scalingListCount = (chromaFormatIdc !== 3) ? 8 : 12;\n        for (i = 0; i < scalingListCount; i++) {\n          if (expGolombDecoder.readBoolean()) { // seq_scaling_list_present_flag[ i ]\n            if (i < 6) {\n              skipScalingList(16, expGolombDecoder);\n            } else {\n              skipScalingList(64, expGolombDecoder);\n            }\n          }\n        }\n      }\n    }\n\n    expGolombDecoder.skipUnsignedExpGolomb(); // log2_max_frame_num_minus4\n    picOrderCntType = expGolombDecoder.readUnsignedExpGolomb();\n\n    if (picOrderCntType === 0) {\n      expGolombDecoder.readUnsignedExpGolomb(); // log2_max_pic_order_cnt_lsb_minus4\n    } else if (picOrderCntType === 1) {\n      expGolombDecoder.skipBits(1); // delta_pic_order_always_zero_flag\n      expGolombDecoder.skipExpGolomb(); // offset_for_non_ref_pic\n      expGolombDecoder.skipExpGolomb(); // offset_for_top_to_bottom_field\n      numRefFramesInPicOrderCntCycle = expGolombDecoder.readUnsignedExpGolomb();\n      for (i = 0; i < numRefFramesInPicOrderCntCycle; i++) {\n        expGolombDecoder.skipExpGolomb(); // offset_for_ref_frame[ i ]\n      }\n    }\n\n    expGolombDecoder.skipUnsignedExpGolomb(); // max_num_ref_frames\n    expGolombDecoder.skipBits(1); // gaps_in_frame_num_value_allowed_flag\n\n    picWidthInMbsMinus1 = expGolombDecoder.readUnsignedExpGolomb();\n    picHeightInMapUnitsMinus1 = expGolombDecoder.readUnsignedExpGolomb();\n\n    frameMbsOnlyFlag = expGolombDecoder.readBits(1);\n    if (frameMbsOnlyFlag === 0) {\n      expGolombDecoder.skipBits(1); // mb_adaptive_frame_field_flag\n    }\n\n    expGolombDecoder.skipBits(1); // direct_8x8_inference_flag\n    if (expGolombDecoder.readBoolean()) { // frame_cropping_flag\n      frameCropLeftOffset = expGolombDecoder.readUnsignedExpGolomb();\n      frameCropRightOffset = expGolombDecoder.readUnsignedExpGolomb();\n      frameCropTopOffset = expGolombDecoder.readUnsignedExpGolomb();\n      frameCropBottomOffset = expGolombDecoder.readUnsignedExpGolomb();\n    }\n    if (expGolombDecoder.readBoolean()) {\n      // vui_parameters_present_flag\n      if (expGolombDecoder.readBoolean()) {\n        // aspect_ratio_info_present_flag\n        aspectRatioIdc = expGolombDecoder.readUnsignedByte();\n        switch (aspectRatioIdc) {\n          case 1: sarRatio = [1, 1]; break;\n          case 2: sarRatio = [12, 11]; break;\n          case 3: sarRatio = [10, 11]; break;\n          case 4: sarRatio = [16, 11]; break;\n          case 5: sarRatio = [40, 33]; break;\n          case 6: sarRatio = [24, 11]; break;\n          case 7: sarRatio = [20, 11]; break;\n          case 8: sarRatio = [32, 11]; break;\n          case 9: sarRatio = [80, 33]; break;\n          case 10: sarRatio = [18, 11]; break;\n          case 11: sarRatio = [15, 11]; break;\n          case 12: sarRatio = [64, 33]; break;\n          case 13: sarRatio = [160, 99]; break;\n          case 14: sarRatio = [4, 3]; break;\n          case 15: sarRatio = [3, 2]; break;\n          case 16: sarRatio = [2, 1]; break;\n          case 255: {\n            sarRatio = [expGolombDecoder.readUnsignedByte() << 8 |\n                        expGolombDecoder.readUnsignedByte(),\n                        expGolombDecoder.readUnsignedByte() << 8 |\n                        expGolombDecoder.readUnsignedByte() ];\n            break;\n          }\n        }\n        if (sarRatio) {\n          sarScale = sarRatio[0] / sarRatio[1];\n        }\n      }\n    }\n    return {\n      profileIdc: profileIdc,\n      levelIdc: levelIdc,\n      profileCompatibility: profileCompatibility,\n      width: Math.ceil((((picWidthInMbsMinus1 + 1) * 16) - frameCropLeftOffset * 2 - frameCropRightOffset * 2) * sarScale),\n      height: ((2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16) - (frameCropTopOffset * 2) - (frameCropBottomOffset * 2)\n    };\n  };\n\n};\nH264Stream.prototype = new Stream();\n\nmodule.exports = {\n  H264Stream: H264Stream,\n  NalByteStream: NalByteStream\n};\n","'use strict';\n\nvar ExpGolomb;\n\n/**\n * Parser for exponential Golomb codes, a variable-bitwidth number encoding\n * scheme used by h264.\n */\nExpGolomb = function(workingData) {\n  var\n    // the number of bytes left to examine in workingData\n    workingBytesAvailable = workingData.byteLength,\n\n    // the current word being examined\n    workingWord = 0, // :uint\n\n    // the number of bits left to examine in the current word\n    workingBitsAvailable = 0; // :uint;\n\n  // ():uint\n  this.length = function() {\n    return (8 * workingBytesAvailable);\n  };\n\n  // ():uint\n  this.bitsAvailable = function() {\n    return (8 * workingBytesAvailable) + workingBitsAvailable;\n  };\n\n  // ():void\n  this.loadWord = function() {\n    var\n      position = workingData.byteLength - workingBytesAvailable,\n      workingBytes = new Uint8Array(4),\n      availableBytes = Math.min(4, workingBytesAvailable);\n\n    if (availableBytes === 0) {\n      throw new Error('no bytes available');\n    }\n\n    workingBytes.set(workingData.subarray(position,\n                                          position + availableBytes));\n    workingWord = new DataView(workingBytes.buffer).getUint32(0);\n\n    // track the amount of workingData that has been processed\n    workingBitsAvailable = availableBytes * 8;\n    workingBytesAvailable -= availableBytes;\n  };\n\n  // (count:int):void\n  this.skipBits = function(count) {\n    var skipBytes; // :int\n    if (workingBitsAvailable > count) {\n      workingWord          <<= count;\n      workingBitsAvailable -= count;\n    } else {\n      count -= workingBitsAvailable;\n      skipBytes = Math.floor(count / 8);\n\n      count -= (skipBytes * 8);\n      workingBytesAvailable -= skipBytes;\n\n      this.loadWord();\n\n      workingWord <<= count;\n      workingBitsAvailable -= count;\n    }\n  };\n\n  // (size:int):uint\n  this.readBits = function(size) {\n    var\n      bits = Math.min(workingBitsAvailable, size), // :uint\n      valu = workingWord >>> (32 - bits); // :uint\n    // if size > 31, handle error\n    workingBitsAvailable -= bits;\n    if (workingBitsAvailable > 0) {\n      workingWord <<= bits;\n    } else if (workingBytesAvailable > 0) {\n      this.loadWord();\n    }\n\n    bits = size - bits;\n    if (bits > 0) {\n      return valu << bits | this.readBits(bits);\n    }\n    return valu;\n  };\n\n  // ():uint\n  this.skipLeadingZeros = function() {\n    var leadingZeroCount; // :uint\n    for (leadingZeroCount = 0; leadingZeroCount < workingBitsAvailable; ++leadingZeroCount) {\n      if ((workingWord & (0x80000000 >>> leadingZeroCount)) !== 0) {\n        // the first bit of working word is 1\n        workingWord <<= leadingZeroCount;\n        workingBitsAvailable -= leadingZeroCount;\n        return leadingZeroCount;\n      }\n    }\n\n    // we exhausted workingWord and still have not found a 1\n    this.loadWord();\n    return leadingZeroCount + this.skipLeadingZeros();\n  };\n\n  // ():void\n  this.skipUnsignedExpGolomb = function() {\n    this.skipBits(1 + this.skipLeadingZeros());\n  };\n\n  // ():void\n  this.skipExpGolomb = function() {\n    this.skipBits(1 + this.skipLeadingZeros());\n  };\n\n  // ():uint\n  this.readUnsignedExpGolomb = function() {\n    var clz = this.skipLeadingZeros(); // :uint\n    return this.readBits(clz + 1) - 1;\n  };\n\n  // ():int\n  this.readExpGolomb = function() {\n    var valu = this.readUnsignedExpGolomb(); // :int\n    if (0x01 & valu) {\n      // the number is odd if the low order bit is set\n      return (1 + valu) >>> 1; // add 1 to make it even, and divide by 2\n    }\n    return -1 * (valu >>> 1); // divide by two then make it negative\n  };\n\n  // Some convenience functions\n  // :Boolean\n  this.readBoolean = function() {\n    return this.readBits(1) === 1;\n  };\n\n  // ():int\n  this.readUnsignedByte = function() {\n    return this.readBits(8);\n  };\n\n  this.loadWord();\n};\n\nmodule.exports = ExpGolomb;\n","/**\n * mux.js\n *\n * Copyright (c) 2016 Brightcove\n * All rights reserved.\n *\n * A stream-based aac to mp4 converter. This utility can be used to\n * deliver mp4s to a SourceBuffer on platforms that support native\n * Media Source Extensions.\n */\n'use strict';\nvar Stream = require('../utils/stream.js');\n\n// Constants\nvar AacStream;\n\n/**\n * Splits an incoming stream of binary data into ADTS and ID3 Frames.\n */\n\nAacStream = function() {\n  var\n    everything = new Uint8Array(),\n    timeStamp = 0;\n\n  AacStream.prototype.init.call(this);\n\n  this.setTimestamp = function(timestamp) {\n    timeStamp = timestamp;\n  };\n\n  this.parseId3TagSize = function(header, byteIndex) {\n    var\n      returnSize = (header[byteIndex + 6] << 21) |\n                   (header[byteIndex + 7] << 14) |\n                   (header[byteIndex + 8] << 7) |\n                   (header[byteIndex + 9]),\n      flags = header[byteIndex + 5],\n      footerPresent = (flags & 16) >> 4;\n\n    if (footerPresent) {\n      return returnSize + 20;\n    }\n    return returnSize + 10;\n  };\n\n  this.parseAdtsSize = function(header, byteIndex) {\n    var\n      lowThree = (header[byteIndex + 5] & 0xE0) >> 5,\n      middle = header[byteIndex + 4] << 3,\n      highTwo = header[byteIndex + 3] & 0x3 << 11;\n\n    return (highTwo | middle) | lowThree;\n  };\n\n  this.push = function(bytes) {\n    var\n      frameSize = 0,\n      byteIndex = 0,\n      bytesLeft,\n      chunk,\n      packet,\n      tempLength;\n\n    // If there are bytes remaining from the last segment, prepend them to the\n    // bytes that were pushed in\n    if (everything.length) {\n      tempLength = everything.length;\n      everything = new Uint8Array(bytes.byteLength + tempLength);\n      everything.set(everything.subarray(0, tempLength));\n      everything.set(bytes, tempLength);\n    } else {\n      everything = bytes;\n    }\n\n    while (everything.length - byteIndex >= 3) {\n      if ((everything[byteIndex] === 'I'.charCodeAt(0)) &&\n          (everything[byteIndex + 1] === 'D'.charCodeAt(0)) &&\n          (everything[byteIndex + 2] === '3'.charCodeAt(0))) {\n\n        // Exit early because we don't have enough to parse\n        // the ID3 tag header\n        if (everything.length - byteIndex < 10) {\n          break;\n        }\n\n        // check framesize\n        frameSize = this.parseId3TagSize(everything, byteIndex);\n\n        // Exit early if we don't have enough in the buffer\n        // to emit a full packet\n        if (frameSize > everything.length) {\n          break;\n        }\n        chunk = {\n          type: 'timed-metadata',\n          data: everything.subarray(byteIndex, byteIndex + frameSize)\n        };\n        this.trigger('data', chunk);\n        byteIndex += frameSize;\n        continue;\n      } else if ((everything[byteIndex] & 0xff === 0xff) &&\n                 ((everything[byteIndex + 1] & 0xf0) === 0xf0)) {\n\n        // Exit early because we don't have enough to parse\n        // the ADTS frame header\n        if (everything.length - byteIndex < 7) {\n          break;\n        }\n\n        frameSize = this.parseAdtsSize(everything, byteIndex);\n\n        // Exit early if we don't have enough in the buffer\n        // to emit a full packet\n        if (frameSize > everything.length) {\n          break;\n        }\n\n        packet = {\n          type: 'audio',\n          data: everything.subarray(byteIndex, byteIndex + frameSize),\n          pts: timeStamp,\n          dts: timeStamp\n        };\n        this.trigger('data', packet);\n        byteIndex += frameSize;\n        continue;\n      }\n      byteIndex++;\n    }\n    bytesLeft = everything.length - byteIndex;\n\n    if (bytesLeft > 0) {\n      everything = everything.subarray(byteIndex);\n    } else {\n      everything = new Uint8Array();\n    }\n  };\n};\n\nAacStream.prototype = new Stream();\n\nmodule.exports = AacStream;\n","var highPrefix = [33, 16, 5, 32, 164, 27];\nvar lowPrefix = [33, 65, 108, 84, 1, 2, 4, 8, 168, 2, 4, 8, 17, 191, 252];\nvar zeroFill = function(count) {\n  var a = [];\n  while (count--) {\n    a.push(0);\n  }\n  return a;\n};\n\nvar makeTable = function(metaTable) {\n  return Object.keys(metaTable).reduce(function(obj, key) {\n    obj[key] = new Uint8Array(metaTable[key].reduce(function(arr, part) {\n      return arr.concat(part);\n    }, []));\n    return obj;\n  }, {});\n};\n\n// Frames-of-silence to use for filling in missing AAC frames\nvar coneOfSilence = {\n  96000: [highPrefix, [227, 64], zeroFill(154), [56]],\n  88200: [highPrefix, [231], zeroFill(170), [56]],\n  64000: [highPrefix, [248, 192], zeroFill(240), [56]],\n  48000: [highPrefix, [255, 192], zeroFill(268), [55, 148, 128], zeroFill(54), [112]],\n  44100: [highPrefix, [255, 192], zeroFill(268), [55, 163, 128], zeroFill(84), [112]],\n  32000: [highPrefix, [255, 192], zeroFill(268), [55, 234], zeroFill(226), [112]],\n  24000: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 112], zeroFill(126), [224]],\n  16000: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 255], zeroFill(269), [223, 108], zeroFill(195), [1, 192]],\n  12000: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 253, 128], zeroFill(259), [56]],\n  11025: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 255, 192], zeroFill(268), [55, 175, 128], zeroFill(108), [112]],\n  8000: [lowPrefix, zeroFill(268), [3, 121, 16], zeroFill(47), [7]]\n};\n\nmodule.exports = makeTable(coneOfSilence);\n","var\n  ONE_SECOND_IN_TS = 90000, // 90kHz clock\n  secondsToVideoTs,\n  secondsToAudioTs,\n  videoTsToSeconds,\n  audioTsToSeconds,\n  audioTsToVideoTs,\n  videoTsToAudioTs;\n\nsecondsToVideoTs = function(seconds) {\n  return seconds * ONE_SECOND_IN_TS;\n};\n\nsecondsToAudioTs = function(seconds, sampleRate) {\n  return seconds * sampleRate;\n};\n\nvideoTsToSeconds = function(timestamp) {\n  return timestamp / ONE_SECOND_IN_TS;\n};\n\naudioTsToSeconds = function(timestamp, sampleRate) {\n  return timestamp / sampleRate;\n};\n\naudioTsToVideoTs = function(timestamp, sampleRate) {\n  return secondsToVideoTs(audioTsToSeconds(timestamp, sampleRate));\n};\n\nvideoTsToAudioTs = function(timestamp, sampleRate) {\n  return secondsToAudioTs(videoTsToSeconds(timestamp), sampleRate);\n};\n\nmodule.exports = {\n  secondsToVideoTs: secondsToVideoTs,\n  secondsToAudioTs: secondsToAudioTs,\n  videoTsToSeconds: videoTsToSeconds,\n  audioTsToSeconds: audioTsToSeconds,\n  audioTsToVideoTs: audioTsToVideoTs,\n  videoTsToAudioTs: videoTsToAudioTs\n};\n","/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * Reads in-band CEA-708 captions out of FMP4 segments.\n * @see https://en.wikipedia.org/wiki/CEA-708\n */\n'use strict';\n\nvar discardEmulationPreventionBytes = require('../tools/caption-packet-parser').discardEmulationPreventionBytes;\nvar CaptionStream = require('../m2ts/caption-stream').CaptionStream;\nvar probe = require('./probe');\nvar inspect = require('../tools/mp4-inspector');\n\n/**\n  * Maps an offset in the mdat to a sample based on the the size of the samples.\n  * Assumes that `parseSamples` has been called first.\n  *\n  * @param {Number} offset - The offset into the mdat\n  * @param {Object[]} samples - An array of samples, parsed using `parseSamples`\n  * @return {?Object} The matching sample, or null if no match was found.\n  *\n  * @see ISO-BMFF-12/2015, Section 8.8.8\n **/\nvar mapToSample = function(offset, samples) {\n  var approximateOffset = offset;\n\n  for (var i = 0; i < samples.length; i++) {\n    var sample = samples[i];\n\n    if (approximateOffset < sample.size) {\n      return sample;\n    }\n\n    approximateOffset -= sample.size;\n  }\n\n  return null;\n};\n\n/**\n  * Finds SEI nal units contained in a Media Data Box.\n  * Assumes that `parseSamples` has been called first.\n  *\n  * @param {Uint8Array} avcStream - The bytes of the mdat\n  * @param {Object[]} samples - The samples parsed out by `parseSamples`\n  * @param {Number} trackId - The trackId of this video track\n  * @return {Object[]} seiNals - the parsed SEI NALUs found.\n  *   The contents of the seiNal should match what is expected by\n  *   CaptionStream.push (nalUnitType, size, data, escapedRBSP, pts, dts)\n  *\n  * @see ISO-BMFF-12/2015, Section 8.1.1\n  * @see Rec. ITU-T H.264, 7.3.2.3.1\n **/\nvar findSeiNals = function(avcStream, samples, trackId) {\n  var\n    avcView = new DataView(avcStream.buffer, avcStream.byteOffset, avcStream.byteLength),\n    result = [],\n    seiNal,\n    i,\n    length,\n    lastMatchedSample;\n\n  for (i = 0; i + 4 < avcStream.length; i += length) {\n    length = avcView.getUint32(i);\n    i += 4;\n\n    // Bail if this doesn't appear to be an H264 stream\n    if (length <= 0) {\n      continue;\n    }\n\n    switch (avcStream[i] & 0x1F) {\n    case 0x06:\n      var data = avcStream.subarray(i + 1, i + 1 + length);\n      var matchingSample = mapToSample(i, samples);\n\n      seiNal = {\n        nalUnitType: 'sei_rbsp',\n        size: length,\n        data: data,\n        escapedRBSP: discardEmulationPreventionBytes(data),\n        trackId: trackId\n      };\n\n      if (matchingSample) {\n        seiNal.pts = matchingSample.pts;\n        seiNal.dts = matchingSample.dts;\n        lastMatchedSample = matchingSample;\n      } else {\n        // If a matching sample cannot be found, use the last\n        // sample's values as they should be as close as possible\n        seiNal.pts = lastMatchedSample.pts;\n        seiNal.dts = lastMatchedSample.dts;\n      }\n\n      result.push(seiNal);\n      break;\n    default:\n      break;\n    }\n  }\n\n  return result;\n};\n\n/**\n  * Parses sample information out of Track Run Boxes and calculates\n  * the absolute presentation and decode timestamps of each sample.\n  *\n  * @param {Array<Uint8Array>} truns - The Trun Run boxes to be parsed\n  * @param {Number} baseMediaDecodeTime - base media decode time from tfdt\n      @see ISO-BMFF-12/2015, Section 8.8.12\n  * @param {Object} tfhd - The parsed Track Fragment Header\n  *   @see inspect.parseTfhd\n  * @return {Object[]} the parsed samples\n  *\n  * @see ISO-BMFF-12/2015, Section 8.8.8\n **/\nvar parseSamples = function(truns, baseMediaDecodeTime, tfhd) {\n  var currentDts = baseMediaDecodeTime;\n  var defaultSampleDuration = tfhd.defaultSampleDuration || 0;\n  var defaultSampleSize = tfhd.defaultSampleSize || 0;\n  var trackId = tfhd.trackId;\n  var allSamples = [];\n\n  truns.forEach(function(trun) {\n    // Note: We currently do not parse the sample table as well\n    // as the trun. It's possible some sources will require this.\n    // moov > trak > mdia > minf > stbl\n    var trackRun = inspect.parseTrun(trun);\n    var samples = trackRun.samples;\n\n    samples.forEach(function(sample) {\n      if (sample.duration === undefined) {\n        sample.duration = defaultSampleDuration;\n      }\n      if (sample.size === undefined) {\n        sample.size = defaultSampleSize;\n      }\n      sample.trackId = trackId;\n      sample.dts = currentDts;\n      if (sample.compositionTimeOffset === undefined) {\n        sample.compositionTimeOffset = 0;\n      }\n      sample.pts = currentDts + sample.compositionTimeOffset;\n\n      currentDts += sample.duration;\n    });\n\n    allSamples = allSamples.concat(samples);\n  });\n\n  return allSamples;\n};\n\n/**\n  * Parses out caption nals from an FMP4 segment's video tracks.\n  *\n  * @param {Uint8Array} segment - The bytes of a single segment\n  * @param {Number} videoTrackId - The trackId of a video track in the segment\n  * @return {Object.<Number, Object[]>} A mapping of video trackId to\n  *   a list of seiNals found in that track\n **/\nvar parseCaptionNals = function(segment, videoTrackId) {\n  // To get the samples\n  var trafs = probe.findBox(segment, ['moof', 'traf']);\n  // To get SEI NAL units\n  var mdats = probe.findBox(segment, ['mdat']);\n  var captionNals = {};\n  var mdatTrafPairs = [];\n\n  // Pair up each traf with a mdat as moofs and mdats are in pairs\n  mdats.forEach(function(mdat, index) {\n    var matchingTraf = trafs[index];\n    mdatTrafPairs.push({\n      mdat: mdat,\n      traf: matchingTraf\n    });\n  });\n\n  mdatTrafPairs.forEach(function(pair) {\n    var mdat = pair.mdat;\n    var traf = pair.traf;\n    var tfhd = probe.findBox(traf, ['tfhd']);\n    // Exactly 1 tfhd per traf\n    var headerInfo = inspect.parseTfhd(tfhd[0]);\n    var trackId = headerInfo.trackId;\n    var tfdt = probe.findBox(traf, ['tfdt']);\n    // Either 0 or 1 tfdt per traf\n    var baseMediaDecodeTime = (tfdt.length > 0) ? inspect.parseTfdt(tfdt[0]).baseMediaDecodeTime : 0;\n    var truns = probe.findBox(traf, ['trun']);\n    var samples;\n    var seiNals;\n\n    // Only parse video data for the chosen video track\n    if (videoTrackId === trackId && truns.length > 0) {\n      samples = parseSamples(truns, baseMediaDecodeTime, headerInfo);\n\n      seiNals = findSeiNals(mdat, samples, trackId);\n\n      if (!captionNals[trackId]) {\n        captionNals[trackId] = [];\n      }\n\n      captionNals[trackId] = captionNals[trackId].concat(seiNals);\n    }\n  });\n\n  return captionNals;\n};\n\n/**\n  * Parses out inband captions from an MP4 container and returns\n  * caption objects that can be used by WebVTT and the TextTrack API.\n  * @see https://developer.mozilla.org/en-US/docs/Web/API/VTTCue\n  * @see https://developer.mozilla.org/en-US/docs/Web/API/TextTrack\n  * Assumes that `probe.getVideoTrackIds` and `probe.timescale` have been called first\n  *\n  * @param {Uint8Array} segment - The fmp4 segment containing embedded captions\n  * @param {Number} trackId - The id of the video track to parse\n  * @param {Number} timescale - The timescale for the video track from the init segment\n  *\n  * @return {?Object[]} parsedCaptions - A list of captions or null if no video tracks\n  * @return {Number} parsedCaptions[].startTime - The time to show the caption in seconds\n  * @return {Number} parsedCaptions[].endTime - The time to stop showing the caption in seconds\n  * @return {String} parsedCaptions[].text - The visible content of the caption\n **/\nvar parseEmbeddedCaptions = function(segment, trackId, timescale) {\n  var seiNals;\n\n  if (!trackId) {\n    return null;\n  }\n\n  seiNals = parseCaptionNals(segment, trackId);\n\n  return {\n    seiNals: seiNals[trackId],\n    timescale: timescale\n  };\n};\n\n/**\n  * Converts SEI NALUs into captions that can be used by video.js\n **/\nvar CaptionParser = function() {\n  var isInitialized = false;\n  var captionStream;\n\n  // Stores segments seen before trackId and timescale are set\n  var segmentCache;\n  // Stores video track ID of the track being parsed\n  var trackId;\n  // Stores the timescale of the track being parsed\n  var timescale;\n  // Stores captions parsed so far\n  var parsedCaptions;\n\n  /**\n    * A method to indicate whether a CaptionParser has been initalized\n    * @returns {Boolean}\n   **/\n  this.isInitialized = function() {\n    return isInitialized;\n  };\n\n  /**\n    * Initializes the underlying CaptionStream, SEI NAL parsing\n    * and management, and caption collection\n   **/\n  this.init = function() {\n    captionStream = new CaptionStream();\n    isInitialized = true;\n\n    // Collect dispatched captions\n    captionStream.on('data', function(event) {\n      // Convert to seconds in the source's timescale\n      event.startTime = event.startPts / timescale;\n      event.endTime = event.endPts / timescale;\n\n      parsedCaptions.captions.push(event);\n      parsedCaptions.captionStreams[event.stream] = true;\n    });\n  };\n\n  /**\n    * Determines if a new video track will be selected\n    * or if the timescale changed\n    * @return {Boolean}\n   **/\n  this.isNewInit = function(videoTrackIds, timescales) {\n    if ((videoTrackIds && videoTrackIds.length === 0) ||\n        (timescales && typeof timescales === 'object' &&\n          Object.keys(timescales).length === 0)) {\n      return false;\n    }\n\n    return trackId !== videoTrackIds[0] ||\n      timescale !== timescales[trackId];\n  };\n\n  /**\n    * Parses out SEI captions and interacts with underlying\n    * CaptionStream to return dispatched captions\n    *\n    * @param {Uint8Array} segment - The fmp4 segment containing embedded captions\n    * @param {Number[]} videoTrackIds - A list of video tracks found in the init segment\n    * @param {Object.<Number, Number>} timescales - The timescales found in the init segment\n    * @see parseEmbeddedCaptions\n    * @see m2ts/caption-stream.js\n   **/\n  this.parse = function(segment, videoTrackIds, timescales) {\n    var parsedData;\n\n    if (!this.isInitialized()) {\n      return null;\n\n    // This is not likely to be a video segment\n    } else if (!videoTrackIds || !timescales) {\n      return null;\n\n    } else if (this.isNewInit(videoTrackIds, timescales)) {\n      // Use the first video track only as there is no\n      // mechanism to switch to other video tracks\n      trackId = videoTrackIds[0];\n      timescale = timescales[trackId];\n\n    // If an init segment has not been seen yet, hold onto segment\n    // data until we have one\n    } else if (!trackId || !timescale) {\n      segmentCache.push(segment);\n      return null;\n    }\n\n    // Now that a timescale and trackId is set, parse cached segments\n    while (segmentCache.length > 0) {\n      var cachedSegment = segmentCache.shift();\n\n      this.parse(cachedSegment, videoTrackIds, timescales);\n    }\n\n    parsedData = parseEmbeddedCaptions(segment, trackId, timescale);\n\n    if (parsedData === null || !parsedData.seiNals) {\n      return null;\n    }\n\n    this.pushNals(parsedData.seiNals);\n    // Force the parsed captions to be dispatched\n    this.flushStream();\n\n    return parsedCaptions;\n  };\n\n  /**\n    * Pushes SEI NALUs onto CaptionStream\n    * @param {Object[]} nals - A list of SEI nals parsed using `parseCaptionNals`\n    * Assumes that `parseCaptionNals` has been called first\n    * @see m2ts/caption-stream.js\n    **/\n  this.pushNals = function(nals) {\n    if (!this.isInitialized() || !nals || nals.length === 0) {\n      return null;\n    }\n\n    nals.forEach(function(nal) {\n      captionStream.push(nal);\n    });\n  };\n\n  /**\n    * Flushes underlying CaptionStream to dispatch processed, displayable captions\n    * @see m2ts/caption-stream.js\n   **/\n  this.flushStream = function() {\n    if (!this.isInitialized()) {\n      return null;\n    }\n\n    captionStream.flush();\n  };\n\n  /**\n    * Reset caption buckets for new data\n   **/\n  this.clearParsedCaptions = function() {\n    parsedCaptions.captions = [];\n    parsedCaptions.captionStreams = {};\n  };\n\n  /**\n    * Resets underlying CaptionStream\n    * @see m2ts/caption-stream.js\n   **/\n  this.resetCaptionStream = function() {\n    if (!this.isInitialized()) {\n      return null;\n    }\n\n    captionStream.reset();\n  };\n\n  /**\n    * Convenience method to clear all captions flushed from the\n    * CaptionStream and still being parsed\n    * @see m2ts/caption-stream.js\n   **/\n  this.clearAllCaptions = function() {\n    this.clearParsedCaptions();\n    this.resetCaptionStream();\n  };\n\n  /**\n    * Reset caption parser\n   **/\n  this.reset = function() {\n    segmentCache = [];\n    trackId = null;\n    timescale = null;\n\n    if (!parsedCaptions) {\n      parsedCaptions = {\n        captions: [],\n        // CC1, CC2, CC3, CC4\n        captionStreams: {}\n      };\n    } else {\n      this.clearParsedCaptions();\n    }\n\n    this.resetCaptionStream();\n  };\n\n  this.reset();\n};\n\nmodule.exports = CaptionParser;\n","/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * Parse the internal MP4 structure into an equivalent javascript\n * object.\n */\n'use strict';\n\nvar\n  inspectMp4,\n  textifyMp4,\n\n  parseType = require('../mp4/probe').parseType,\n  parseMp4Date = function(seconds) {\n    return new Date(seconds * 1000 - 2082844800000);\n  },\n  parseSampleFlags = function(flags) {\n    return {\n      isLeading: (flags[0] & 0x0c) >>> 2,\n      dependsOn: flags[0] & 0x03,\n      isDependedOn: (flags[1] & 0xc0) >>> 6,\n      hasRedundancy: (flags[1] & 0x30) >>> 4,\n      paddingValue: (flags[1] & 0x0e) >>> 1,\n      isNonSyncSample: flags[1] & 0x01,\n      degradationPriority: (flags[2] << 8) | flags[3]\n    };\n  },\n  nalParse = function(avcStream) {\n    var\n      avcView = new DataView(avcStream.buffer, avcStream.byteOffset, avcStream.byteLength),\n      result = [],\n      i,\n      length;\n    for (i = 0; i + 4 < avcStream.length; i += length) {\n      length = avcView.getUint32(i);\n      i += 4;\n\n      // bail if this doesn't appear to be an H264 stream\n      if (length <= 0) {\n        result.push('<span style=\\'color:red;\\'>MALFORMED DATA</span>');\n        continue;\n      }\n\n      switch (avcStream[i] & 0x1F) {\n      case 0x01:\n        result.push('slice_layer_without_partitioning_rbsp');\n        break;\n      case 0x05:\n        result.push('slice_layer_without_partitioning_rbsp_idr');\n        break;\n      case 0x06:\n        result.push('sei_rbsp');\n        break;\n      case 0x07:\n        result.push('seq_parameter_set_rbsp');\n        break;\n      case 0x08:\n        result.push('pic_parameter_set_rbsp');\n        break;\n      case 0x09:\n        result.push('access_unit_delimiter_rbsp');\n        break;\n      default:\n        result.push('UNKNOWN NAL - ' + avcStream[i] & 0x1F);\n        break;\n      }\n    }\n    return result;\n  },\n\n  // registry of handlers for individual mp4 box types\n  parse = {\n    // codingname, not a first-class box type. stsd entries share the\n    // same format as real boxes so the parsing infrastructure can be\n    // shared\n    avc1: function(data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n      return {\n        dataReferenceIndex: view.getUint16(6),\n        width: view.getUint16(24),\n        height: view.getUint16(26),\n        horizresolution: view.getUint16(28) + (view.getUint16(30) / 16),\n        vertresolution: view.getUint16(32) + (view.getUint16(34) / 16),\n        frameCount: view.getUint16(40),\n        depth: view.getUint16(74),\n        config: inspectMp4(data.subarray(78, data.byteLength))\n      };\n    },\n    avcC: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n          configurationVersion: data[0],\n          avcProfileIndication: data[1],\n          profileCompatibility: data[2],\n          avcLevelIndication: data[3],\n          lengthSizeMinusOne: data[4] & 0x03,\n          sps: [],\n          pps: []\n        },\n        numOfSequenceParameterSets = data[5] & 0x1f,\n        numOfPictureParameterSets,\n        nalSize,\n        offset,\n        i;\n\n      // iterate past any SPSs\n      offset = 6;\n      for (i = 0; i < numOfSequenceParameterSets; i++) {\n        nalSize = view.getUint16(offset);\n        offset += 2;\n        result.sps.push(new Uint8Array(data.subarray(offset, offset + nalSize)));\n        offset += nalSize;\n      }\n      // iterate past any PPSs\n      numOfPictureParameterSets = data[offset];\n      offset++;\n      for (i = 0; i < numOfPictureParameterSets; i++) {\n        nalSize = view.getUint16(offset);\n        offset += 2;\n        result.pps.push(new Uint8Array(data.subarray(offset, offset + nalSize)));\n        offset += nalSize;\n      }\n      return result;\n    },\n    btrt: function(data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n      return {\n        bufferSizeDB: view.getUint32(0),\n        maxBitrate: view.getUint32(4),\n        avgBitrate: view.getUint32(8)\n      };\n    },\n    esds: function(data) {\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        esId: (data[6] << 8) | data[7],\n        streamPriority: data[8] & 0x1f,\n        decoderConfig: {\n          objectProfileIndication: data[11],\n          streamType: (data[12] >>> 2) & 0x3f,\n          bufferSize: (data[13] << 16) | (data[14] << 8) | data[15],\n          maxBitrate: (data[16] << 24) |\n            (data[17] << 16) |\n            (data[18] <<  8) |\n            data[19],\n          avgBitrate: (data[20] << 24) |\n            (data[21] << 16) |\n            (data[22] <<  8) |\n            data[23],\n          decoderConfigDescriptor: {\n            tag: data[24],\n            length: data[25],\n            audioObjectType: (data[26] >>> 3) & 0x1f,\n            samplingFrequencyIndex: ((data[26] & 0x07) << 1) |\n              ((data[27] >>> 7) & 0x01),\n            channelConfiguration: (data[27] >>> 3) & 0x0f\n          }\n        }\n      };\n    },\n    ftyp: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n          majorBrand: parseType(data.subarray(0, 4)),\n          minorVersion: view.getUint32(4),\n          compatibleBrands: []\n        },\n        i = 8;\n      while (i < data.byteLength) {\n        result.compatibleBrands.push(parseType(data.subarray(i, i + 4)));\n        i += 4;\n      }\n      return result;\n    },\n    dinf: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    dref: function(data) {\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        dataReferences: inspectMp4(data.subarray(8))\n      };\n    },\n    hdlr: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4)),\n          handlerType: parseType(data.subarray(8, 12)),\n          name: ''\n        },\n        i = 8;\n\n      // parse out the name field\n      for (i = 24; i < data.byteLength; i++) {\n        if (data[i] === 0x00) {\n          // the name field is null-terminated\n          i++;\n          break;\n        }\n        result.name += String.fromCharCode(data[i]);\n      }\n      // decode UTF-8 to javascript's internal representation\n      // see http://ecmanaut.blogspot.com/2006/07/encoding-decoding-utf8-in-javascript.html\n      result.name = decodeURIComponent(escape(result.name));\n\n      return result;\n    },\n    mdat: function(data) {\n      return {\n        byteLength: data.byteLength,\n        nals: nalParse(data)\n      };\n    },\n    mdhd: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        i = 4,\n        language,\n        result = {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4)),\n          language: ''\n        };\n      if (result.version === 1) {\n        i += 4;\n        result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n        i += 8;\n        result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n        i += 4;\n        result.timescale = view.getUint32(i);\n        i += 8;\n        result.duration = view.getUint32(i); // truncating top 4 bytes\n      } else {\n        result.creationTime = parseMp4Date(view.getUint32(i));\n        i += 4;\n        result.modificationTime = parseMp4Date(view.getUint32(i));\n        i += 4;\n        result.timescale = view.getUint32(i);\n        i += 4;\n        result.duration = view.getUint32(i);\n      }\n      i += 4;\n      // language is stored as an ISO-639-2/T code in an array of three 5-bit fields\n      // each field is the packed difference between its ASCII value and 0x60\n      language = view.getUint16(i);\n      result.language += String.fromCharCode((language >> 10) + 0x60);\n      result.language += String.fromCharCode(((language & 0x03e0) >> 5) + 0x60);\n      result.language += String.fromCharCode((language & 0x1f) + 0x60);\n\n      return result;\n    },\n    mdia: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    mfhd: function(data) {\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        sequenceNumber: (data[4] << 24) |\n          (data[5] << 16) |\n          (data[6] << 8) |\n          (data[7])\n      };\n    },\n    minf: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    // codingname, not a first-class box type. stsd entries share the\n    // same format as real boxes so the parsing infrastructure can be\n    // shared\n    mp4a: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n          // 6 bytes reserved\n          dataReferenceIndex: view.getUint16(6),\n          // 4 + 4 bytes reserved\n          channelcount: view.getUint16(16),\n          samplesize: view.getUint16(18),\n          // 2 bytes pre_defined\n          // 2 bytes reserved\n          samplerate: view.getUint16(24) + (view.getUint16(26) / 65536)\n        };\n\n      // if there are more bytes to process, assume this is an ISO/IEC\n      // 14496-14 MP4AudioSampleEntry and parse the ESDBox\n      if (data.byteLength > 28) {\n        result.streamDescriptor = inspectMp4(data.subarray(28))[0];\n      }\n      return result;\n    },\n    moof: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    moov: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    mvex: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    mvhd: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        i = 4,\n        result = {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4))\n        };\n\n      if (result.version === 1) {\n        i += 4;\n        result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n        i += 8;\n        result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n        i += 4;\n        result.timescale = view.getUint32(i);\n        i += 8;\n        result.duration = view.getUint32(i); // truncating top 4 bytes\n      } else {\n        result.creationTime = parseMp4Date(view.getUint32(i));\n        i += 4;\n        result.modificationTime = parseMp4Date(view.getUint32(i));\n        i += 4;\n        result.timescale = view.getUint32(i);\n        i += 4;\n        result.duration = view.getUint32(i);\n      }\n      i += 4;\n\n      // convert fixed-point, base 16 back to a number\n      result.rate = view.getUint16(i) + (view.getUint16(i + 2) / 16);\n      i += 4;\n      result.volume = view.getUint8(i) + (view.getUint8(i + 1) / 8);\n      i += 2;\n      i += 2;\n      i += 2 * 4;\n      result.matrix = new Uint32Array(data.subarray(i, i + (9 * 4)));\n      i += 9 * 4;\n      i += 6 * 4;\n      result.nextTrackId = view.getUint32(i);\n      return result;\n    },\n    pdin: function(data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n      return {\n        version: view.getUint8(0),\n        flags: new Uint8Array(data.subarray(1, 4)),\n        rate: view.getUint32(4),\n        initialDelay: view.getUint32(8)\n      };\n    },\n    sdtp: function(data) {\n      var\n        result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          samples: []\n        }, i;\n\n      for (i = 4; i < data.byteLength; i++) {\n        result.samples.push({\n          dependsOn: (data[i] & 0x30) >> 4,\n          isDependedOn: (data[i] & 0x0c) >> 2,\n          hasRedundancy: data[i] & 0x03\n        });\n      }\n      return result;\n    },\n    sidx: function(data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n          result = {\n            version: data[0],\n            flags: new Uint8Array(data.subarray(1, 4)),\n            references: [],\n            referenceId: view.getUint32(4),\n            timescale: view.getUint32(8),\n            earliestPresentationTime: view.getUint32(12),\n            firstOffset: view.getUint32(16)\n          },\n          referenceCount = view.getUint16(22),\n          i;\n\n      for (i = 24; referenceCount; i += 12, referenceCount--) {\n        result.references.push({\n          referenceType: (data[i] & 0x80) >>> 7,\n          referencedSize: view.getUint32(i) & 0x7FFFFFFF,\n          subsegmentDuration: view.getUint32(i + 4),\n          startsWithSap: !!(data[i + 8] & 0x80),\n          sapType: (data[i + 8] & 0x70) >>> 4,\n          sapDeltaTime: view.getUint32(i + 8) & 0x0FFFFFFF\n        });\n      }\n\n      return result;\n    },\n    smhd: function(data) {\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        balance: data[4] + (data[5] / 256)\n      };\n    },\n    stbl: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    stco: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          chunkOffsets: []\n        },\n        entryCount = view.getUint32(4),\n        i;\n      for (i = 8; entryCount; i += 4, entryCount--) {\n        result.chunkOffsets.push(view.getUint32(i));\n      }\n      return result;\n    },\n    stsc: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        entryCount = view.getUint32(4),\n        result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          sampleToChunks: []\n        },\n        i;\n      for (i = 8; entryCount; i += 12, entryCount--) {\n        result.sampleToChunks.push({\n          firstChunk: view.getUint32(i),\n          samplesPerChunk: view.getUint32(i + 4),\n          sampleDescriptionIndex: view.getUint32(i + 8)\n        });\n      }\n      return result;\n    },\n    stsd: function(data) {\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        sampleDescriptions: inspectMp4(data.subarray(8))\n      };\n    },\n    stsz: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          sampleSize: view.getUint32(4),\n          entries: []\n        },\n        i;\n      for (i = 12; i < data.byteLength; i += 4) {\n        result.entries.push(view.getUint32(i));\n      }\n      return result;\n    },\n    stts: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          timeToSamples: []\n        },\n        entryCount = view.getUint32(4),\n        i;\n\n      for (i = 8; entryCount; i += 8, entryCount--) {\n        result.timeToSamples.push({\n          sampleCount: view.getUint32(i),\n          sampleDelta: view.getUint32(i + 4)\n        });\n      }\n      return result;\n    },\n    styp: function(data) {\n      return parse.ftyp(data);\n    },\n    tfdt: function(data) {\n      var result = {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        baseMediaDecodeTime: data[4] << 24 | data[5] << 16 | data[6] << 8 | data[7]\n      };\n      if (result.version === 1) {\n        result.baseMediaDecodeTime *= Math.pow(2, 32);\n        result.baseMediaDecodeTime += data[8] << 24 | data[9] << 16 | data[10] << 8 | data[11];\n      }\n      return result;\n    },\n    tfhd: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          trackId: view.getUint32(4)\n        },\n        baseDataOffsetPresent = result.flags[2] & 0x01,\n        sampleDescriptionIndexPresent = result.flags[2] & 0x02,\n        defaultSampleDurationPresent = result.flags[2] & 0x08,\n        defaultSampleSizePresent = result.flags[2] & 0x10,\n        defaultSampleFlagsPresent = result.flags[2] & 0x20,\n        durationIsEmpty = result.flags[0] & 0x010000,\n        defaultBaseIsMoof =  result.flags[0] & 0x020000,\n        i;\n\n      i = 8;\n      if (baseDataOffsetPresent) {\n        i += 4; // truncate top 4 bytes\n        // FIXME: should we read the full 64 bits?\n        result.baseDataOffset = view.getUint32(12);\n        i += 4;\n      }\n      if (sampleDescriptionIndexPresent) {\n        result.sampleDescriptionIndex = view.getUint32(i);\n        i += 4;\n      }\n      if (defaultSampleDurationPresent) {\n        result.defaultSampleDuration = view.getUint32(i);\n        i += 4;\n      }\n      if (defaultSampleSizePresent) {\n        result.defaultSampleSize = view.getUint32(i);\n        i += 4;\n      }\n      if (defaultSampleFlagsPresent) {\n        result.defaultSampleFlags = view.getUint32(i);\n      }\n      if (durationIsEmpty) {\n        result.durationIsEmpty = true;\n      }\n      if (!baseDataOffsetPresent && defaultBaseIsMoof) {\n        result.baseDataOffsetIsMoof = true;\n      }\n      return result;\n    },\n    tkhd: function(data) {\n      var\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        i = 4,\n        result = {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4))\n        };\n      if (result.version === 1) {\n        i += 4;\n        result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n        i += 8;\n        result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n        i += 4;\n        result.trackId = view.getUint32(i);\n        i += 4;\n        i += 8;\n        result.duration = view.getUint32(i); // truncating top 4 bytes\n      } else {\n        result.creationTime = parseMp4Date(view.getUint32(i));\n        i += 4;\n        result.modificationTime = parseMp4Date(view.getUint32(i));\n        i += 4;\n        result.trackId = view.getUint32(i);\n        i += 4;\n        i += 4;\n        result.duration = view.getUint32(i);\n      }\n      i += 4;\n      i += 2 * 4;\n      result.layer = view.getUint16(i);\n      i += 2;\n      result.alternateGroup = view.getUint16(i);\n      i += 2;\n      // convert fixed-point, base 16 back to a number\n      result.volume = view.getUint8(i) + (view.getUint8(i + 1) / 8);\n      i += 2;\n      i += 2;\n      result.matrix = new Uint32Array(data.subarray(i, i + (9 * 4)));\n      i += 9 * 4;\n      result.width = view.getUint16(i) + (view.getUint16(i + 2) / 16);\n      i += 4;\n      result.height = view.getUint16(i) + (view.getUint16(i + 2) / 16);\n      return result;\n    },\n    traf: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    trak: function(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    trex: function(data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        trackId: view.getUint32(4),\n        defaultSampleDescriptionIndex: view.getUint32(8),\n        defaultSampleDuration: view.getUint32(12),\n        defaultSampleSize: view.getUint32(16),\n        sampleDependsOn: data[20] & 0x03,\n        sampleIsDependedOn: (data[21] & 0xc0) >> 6,\n        sampleHasRedundancy: (data[21] & 0x30) >> 4,\n        samplePaddingValue: (data[21] & 0x0e) >> 1,\n        sampleIsDifferenceSample: !!(data[21] & 0x01),\n        sampleDegradationPriority: view.getUint16(22)\n      };\n    },\n    trun: function(data) {\n      var\n        result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          samples: []\n        },\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        // Flag interpretation\n        dataOffsetPresent = result.flags[2] & 0x01, // compare with 2nd byte of 0x1\n        firstSampleFlagsPresent = result.flags[2] & 0x04, // compare with 2nd byte of 0x4\n        sampleDurationPresent = result.flags[1] & 0x01, // compare with 2nd byte of 0x100\n        sampleSizePresent = result.flags[1] & 0x02, // compare with 2nd byte of 0x200\n        sampleFlagsPresent = result.flags[1] & 0x04, // compare with 2nd byte of 0x400\n        sampleCompositionTimeOffsetPresent = result.flags[1] & 0x08, // compare with 2nd byte of 0x800\n        sampleCount = view.getUint32(4),\n        offset = 8,\n        sample;\n\n      if (dataOffsetPresent) {\n        // 32 bit signed integer\n        result.dataOffset = view.getInt32(offset);\n        offset += 4;\n      }\n\n      // Overrides the flags for the first sample only. The order of\n      // optional values will be: duration, size, compositionTimeOffset\n      if (firstSampleFlagsPresent && sampleCount) {\n        sample = {\n          flags: parseSampleFlags(data.subarray(offset, offset + 4))\n        };\n        offset += 4;\n        if (sampleDurationPresent) {\n          sample.duration = view.getUint32(offset);\n          offset += 4;\n        }\n        if (sampleSizePresent) {\n          sample.size = view.getUint32(offset);\n          offset += 4;\n        }\n        if (sampleCompositionTimeOffsetPresent) {\n          // Note: this should be a signed int if version is 1\n          sample.compositionTimeOffset = view.getUint32(offset);\n          offset += 4;\n        }\n        result.samples.push(sample);\n        sampleCount--;\n      }\n\n      while (sampleCount--) {\n        sample = {};\n        if (sampleDurationPresent) {\n          sample.duration = view.getUint32(offset);\n          offset += 4;\n        }\n        if (sampleSizePresent) {\n          sample.size = view.getUint32(offset);\n          offset += 4;\n        }\n        if (sampleFlagsPresent) {\n          sample.flags = parseSampleFlags(data.subarray(offset, offset + 4));\n          offset += 4;\n        }\n        if (sampleCompositionTimeOffsetPresent) {\n          // Note: this should be a signed int if version is 1\n          sample.compositionTimeOffset = view.getUint32(offset);\n          offset += 4;\n        }\n        result.samples.push(sample);\n      }\n      return result;\n    },\n    'url ': function(data) {\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4))\n      };\n    },\n    vmhd: function(data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        graphicsmode: view.getUint16(4),\n        opcolor: new Uint16Array([view.getUint16(6),\n                                  view.getUint16(8),\n                                  view.getUint16(10)])\n      };\n    }\n  };\n\n\n/**\n * Return a javascript array of box objects parsed from an ISO base\n * media file.\n * @param data {Uint8Array} the binary data of the media to be inspected\n * @return {array} a javascript array of potentially nested box objects\n */\ninspectMp4 = function(data) {\n  var\n    i = 0,\n    result = [],\n    view,\n    size,\n    type,\n    end,\n    box;\n\n  // Convert data from Uint8Array to ArrayBuffer, to follow Dataview API\n  var ab = new ArrayBuffer(data.length);\n  var v = new Uint8Array(ab);\n  for (var z = 0; z < data.length; ++z) {\n      v[z] = data[z];\n  }\n  view = new DataView(ab);\n\n  while (i < data.byteLength) {\n    // parse box data\n    size = view.getUint32(i);\n    type =  parseType(data.subarray(i + 4, i + 8));\n    end = size > 1 ? i + size : data.byteLength;\n\n    // parse type-specific data\n    box = (parse[type] || function(data) {\n      return {\n        data: data\n      };\n    })(data.subarray(i + 8, end));\n    box.size = size;\n    box.type = type;\n\n    // store this box and move to the next\n    result.push(box);\n    i = end;\n  }\n  return result;\n};\n\n/**\n * Returns a textual representation of the javascript represtentation\n * of an MP4 file. You can use it as an alternative to\n * JSON.stringify() to compare inspected MP4s.\n * @param inspectedMp4 {array} the parsed array of boxes in an MP4\n * file\n * @param depth {number} (optional) the number of ancestor boxes of\n * the elements of inspectedMp4. Assumed to be zero if unspecified.\n * @return {string} a text representation of the parsed MP4\n */\ntextifyMp4 = function(inspectedMp4, depth) {\n  var indent;\n  depth = depth || 0;\n  indent = new Array(depth * 2 + 1).join(' ');\n\n  // iterate over all the boxes\n  return inspectedMp4.map(function(box, index) {\n\n    // list the box type first at the current indentation level\n    return indent + box.type + '\\n' +\n\n      // the type is already included and handle child boxes separately\n      Object.keys(box).filter(function(key) {\n        return key !== 'type' && key !== 'boxes';\n\n      // output all the box properties\n      }).map(function(key) {\n        var prefix = indent + '  ' + key + ': ',\n            value = box[key];\n\n        // print out raw bytes as hexademical\n        if (value instanceof Uint8Array || value instanceof Uint32Array) {\n          var bytes = Array.prototype.slice.call(new Uint8Array(value.buffer, value.byteOffset, value.byteLength))\n              .map(function(byte) {\n                return ' ' + ('00' + byte.toString(16)).slice(-2);\n              }).join('').match(/.{1,24}/g);\n          if (!bytes) {\n            return prefix + '<>';\n          }\n          if (bytes.length === 1) {\n            return prefix + '<' + bytes.join('').slice(1) + '>';\n          }\n          return prefix + '<\\n' + bytes.map(function(line) {\n            return indent + '  ' + line;\n          }).join('\\n') + '\\n' + indent + '  >';\n        }\n\n        // stringify generic objects\n        return prefix +\n            JSON.stringify(value, null, 2)\n              .split('\\n').map(function(line, index) {\n                if (index === 0) {\n                  return line;\n                }\n                return indent + '  ' + line;\n              }).join('\\n');\n      }).join('\\n') +\n\n    // recursively textify the child boxes\n    (box.boxes ? '\\n' + textifyMp4(box.boxes, depth + 1) : '');\n  }).join('\\n');\n};\n\nmodule.exports = {\n  inspect: inspectMp4,\n  textify: textifyMp4,\n  parseTfdt: parse.tfdt,\n  parseHdlr: parse.hdlr,\n  parseTfhd: parse.tfhd,\n  parseTrun: parse.trun\n};\n","/**\n * mux.js\n *\n * Copyright (c) 2016 Brightcove\n * All rights reserved.\n *\n * Parse mpeg2 transport stream packets to extract basic timing information\n */\n'use strict';\n\nvar StreamTypes = require('../m2ts/stream-types.js');\nvar handleRollover = require('../m2ts/timestamp-rollover-stream.js').handleRollover;\nvar probe = {};\nprobe.ts = require('../m2ts/probe.js');\nprobe.aac = require('../aac/probe.js');\n\n\nvar\n  PES_TIMESCALE = 90000,\n  MP2T_PACKET_LENGTH = 188, // bytes\n  SYNC_BYTE = 0x47;\n\nvar isLikelyAacData = function(data) {\n  if ((data[0] === 'I'.charCodeAt(0)) &&\n      (data[1] === 'D'.charCodeAt(0)) &&\n      (data[2] === '3'.charCodeAt(0))) {\n    return true;\n  }\n  return false;\n};\n\n/**\n * walks through segment data looking for pat and pmt packets to parse out\n * program map table information\n */\nvar parsePsi_ = function(bytes, pmt) {\n  var\n    startIndex = 0,\n    endIndex = MP2T_PACKET_LENGTH,\n    packet, type;\n\n  while (endIndex < bytes.byteLength) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pat':\n          if (!pmt.pid) {\n            pmt.pid = probe.ts.parsePat(packet);\n          }\n          break;\n        case 'pmt':\n          if (!pmt.table) {\n            pmt.table = probe.ts.parsePmt(packet);\n          }\n          break;\n        default:\n          break;\n      }\n\n      // Found the pat and pmt, we can stop walking the segment\n      if (pmt.pid && pmt.table) {\n        return;\n      }\n\n      startIndex += MP2T_PACKET_LENGTH;\n      endIndex += MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex++;\n    endIndex++;\n  }\n};\n\n/**\n * walks through the segment data from the start and end to get timing information\n * for the first and last audio pes packets\n */\nvar parseAudioPes_ = function(bytes, pmt, result) {\n  var\n    startIndex = 0,\n    endIndex = MP2T_PACKET_LENGTH,\n    packet, type, pesType, pusi, parsed;\n\n  var endLoop = false;\n\n  // Start walking from start of segment to get first audio packet\n  while (endIndex < bytes.byteLength) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pes':\n          pesType = probe.ts.parsePesType(packet, pmt.table);\n          pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n          if (pesType === 'audio' && pusi) {\n            parsed = probe.ts.parsePesTime(packet);\n            if (parsed) {\n              parsed.type = 'audio';\n              result.audio.push(parsed);\n              endLoop = true;\n            }\n          }\n          break;\n        default:\n          break;\n      }\n\n      if (endLoop) {\n        break;\n      }\n\n      startIndex += MP2T_PACKET_LENGTH;\n      endIndex += MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex++;\n    endIndex++;\n  }\n\n  // Start walking from end of segment to get last audio packet\n  endIndex = bytes.byteLength;\n  startIndex = endIndex - MP2T_PACKET_LENGTH;\n  endLoop = false;\n  while (startIndex >= 0) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pes':\n          pesType = probe.ts.parsePesType(packet, pmt.table);\n          pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n          if (pesType === 'audio' && pusi) {\n            parsed = probe.ts.parsePesTime(packet);\n            if (parsed) {\n              parsed.type = 'audio';\n              result.audio.push(parsed);\n              endLoop = true;\n            }\n          }\n          break;\n        default:\n          break;\n      }\n\n      if (endLoop) {\n        break;\n      }\n\n      startIndex -= MP2T_PACKET_LENGTH;\n      endIndex -= MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex--;\n    endIndex--;\n  }\n};\n\n/**\n * walks through the segment data from the start and end to get timing information\n * for the first and last video pes packets as well as timing information for the first\n * key frame.\n */\nvar parseVideoPes_ = function(bytes, pmt, result) {\n  var\n    startIndex = 0,\n    endIndex = MP2T_PACKET_LENGTH,\n    packet, type, pesType, pusi, parsed, frame, i, pes;\n\n  var endLoop = false;\n\n  var currentFrame = {\n    data: [],\n    size: 0\n  };\n\n  // Start walking from start of segment to get first video packet\n  while (endIndex < bytes.byteLength) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pes':\n          pesType = probe.ts.parsePesType(packet, pmt.table);\n          pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n          if (pesType === 'video') {\n            if (pusi && !endLoop) {\n              parsed = probe.ts.parsePesTime(packet);\n              if (parsed) {\n                parsed.type = 'video';\n                result.video.push(parsed);\n                endLoop = true;\n              }\n            }\n            if (!result.firstKeyFrame) {\n              if (pusi) {\n                if (currentFrame.size !== 0) {\n                  frame = new Uint8Array(currentFrame.size);\n                  i = 0;\n                  while (currentFrame.data.length) {\n                    pes = currentFrame.data.shift();\n                    frame.set(pes, i);\n                    i += pes.byteLength;\n                  }\n                  if (probe.ts.videoPacketContainsKeyFrame(frame)) {\n                    result.firstKeyFrame = probe.ts.parsePesTime(frame);\n                    result.firstKeyFrame.type = 'video';\n                  }\n                  currentFrame.size = 0;\n                }\n              }\n              currentFrame.data.push(packet);\n              currentFrame.size += packet.byteLength;\n            }\n          }\n          break;\n        default:\n          break;\n      }\n\n      if (endLoop && result.firstKeyFrame) {\n        break;\n      }\n\n      startIndex += MP2T_PACKET_LENGTH;\n      endIndex += MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex++;\n    endIndex++;\n  }\n\n  // Start walking from end of segment to get last video packet\n  endIndex = bytes.byteLength;\n  startIndex = endIndex - MP2T_PACKET_LENGTH;\n  endLoop = false;\n  while (startIndex >= 0) {\n    // Look for a pair of start and end sync bytes in the data..\n    if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n      // We found a packet\n      packet = bytes.subarray(startIndex, endIndex);\n      type = probe.ts.parseType(packet, pmt.pid);\n\n      switch (type) {\n        case 'pes':\n          pesType = probe.ts.parsePesType(packet, pmt.table);\n          pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n          if (pesType === 'video' && pusi) {\n              parsed = probe.ts.parsePesTime(packet);\n              if (parsed) {\n                parsed.type = 'video';\n                result.video.push(parsed);\n                endLoop = true;\n              }\n          }\n          break;\n        default:\n          break;\n      }\n\n      if (endLoop) {\n        break;\n      }\n\n      startIndex -= MP2T_PACKET_LENGTH;\n      endIndex -= MP2T_PACKET_LENGTH;\n      continue;\n    }\n\n    // If we get here, we have somehow become de-synchronized and we need to step\n    // forward one byte at a time until we find a pair of sync bytes that denote\n    // a packet\n    startIndex--;\n    endIndex--;\n  }\n};\n\n/**\n * Adjusts the timestamp information for the segment to account for\n * rollover and convert to seconds based on pes packet timescale (90khz clock)\n */\nvar adjustTimestamp_ = function(segmentInfo, baseTimestamp) {\n  if (segmentInfo.audio && segmentInfo.audio.length) {\n    var audioBaseTimestamp = baseTimestamp;\n    if (typeof audioBaseTimestamp === 'undefined') {\n      audioBaseTimestamp = segmentInfo.audio[0].dts;\n    }\n    segmentInfo.audio.forEach(function(info) {\n      info.dts = handleRollover(info.dts, audioBaseTimestamp);\n      info.pts = handleRollover(info.pts, audioBaseTimestamp);\n      // time in seconds\n      info.dtsTime = info.dts / PES_TIMESCALE;\n      info.ptsTime = info.pts / PES_TIMESCALE;\n    });\n  }\n\n  if (segmentInfo.video && segmentInfo.video.length) {\n    var videoBaseTimestamp = baseTimestamp;\n    if (typeof videoBaseTimestamp === 'undefined') {\n      videoBaseTimestamp = segmentInfo.video[0].dts;\n    }\n    segmentInfo.video.forEach(function(info) {\n      info.dts = handleRollover(info.dts, videoBaseTimestamp);\n      info.pts = handleRollover(info.pts, videoBaseTimestamp);\n      // time in seconds\n      info.dtsTime = info.dts / PES_TIMESCALE;\n      info.ptsTime = info.pts / PES_TIMESCALE;\n    });\n    if (segmentInfo.firstKeyFrame) {\n      var frame = segmentInfo.firstKeyFrame;\n      frame.dts = handleRollover(frame.dts, videoBaseTimestamp);\n      frame.pts = handleRollover(frame.pts, videoBaseTimestamp);\n      // time in seconds\n      frame.dtsTime = frame.dts / PES_TIMESCALE;\n      frame.ptsTime = frame.dts / PES_TIMESCALE;\n    }\n  }\n};\n\n/**\n * inspects the aac data stream for start and end time information\n */\nvar inspectAac_ = function(bytes) {\n  var\n    endLoop = false,\n    audioCount = 0,\n    sampleRate = null,\n    timestamp = null,\n    frameSize = 0,\n    byteIndex = 0,\n    packet;\n\n  while (bytes.length - byteIndex >= 3) {\n    var type = probe.aac.parseType(bytes, byteIndex);\n    switch (type) {\n      case 'timed-metadata':\n        // Exit early because we don't have enough to parse\n        // the ID3 tag header\n        if (bytes.length - byteIndex < 10) {\n          endLoop = true;\n          break;\n        }\n\n        frameSize = probe.aac.parseId3TagSize(bytes, byteIndex);\n\n        // Exit early if we don't have enough in the buffer\n        // to emit a full packet\n        if (frameSize > bytes.length) {\n          endLoop = true;\n          break;\n        }\n        if (timestamp === null) {\n          packet = bytes.subarray(byteIndex, byteIndex + frameSize);\n          timestamp = probe.aac.parseAacTimestamp(packet);\n        }\n        byteIndex += frameSize;\n        break;\n      case 'audio':\n        // Exit early because we don't have enough to parse\n        // the ADTS frame header\n        if (bytes.length - byteIndex < 7) {\n          endLoop = true;\n          break;\n        }\n\n        frameSize = probe.aac.parseAdtsSize(bytes, byteIndex);\n\n        // Exit early if we don't have enough in the buffer\n        // to emit a full packet\n        if (frameSize > bytes.length) {\n          endLoop = true;\n          break;\n        }\n        if (sampleRate === null) {\n          packet = bytes.subarray(byteIndex, byteIndex + frameSize);\n          sampleRate = probe.aac.parseSampleRate(packet);\n        }\n        audioCount++;\n        byteIndex += frameSize;\n        break;\n      default:\n        byteIndex++;\n        break;\n    }\n    if (endLoop) {\n      return null;\n    }\n  }\n  if (sampleRate === null || timestamp === null) {\n    return null;\n  }\n\n  var audioTimescale = PES_TIMESCALE / sampleRate;\n\n  var result = {\n    audio: [\n      {\n        type: 'audio',\n        dts: timestamp,\n        pts: timestamp\n      },\n      {\n        type: 'audio',\n        dts: timestamp + (audioCount * 1024 * audioTimescale),\n        pts: timestamp + (audioCount * 1024 * audioTimescale)\n      }\n    ]\n  };\n\n  return result;\n};\n\n/**\n * inspects the transport stream segment data for start and end time information\n * of the audio and video tracks (when present) as well as the first key frame's\n * start time.\n */\nvar inspectTs_ = function(bytes) {\n  var pmt = {\n    pid: null,\n    table: null\n  };\n\n  var result = {};\n\n  parsePsi_(bytes, pmt);\n\n  for (var pid in pmt.table) {\n    if (pmt.table.hasOwnProperty(pid)) {\n      var type = pmt.table[pid];\n      switch (type) {\n        case StreamTypes.H264_STREAM_TYPE:\n          result.video = [];\n          parseVideoPes_(bytes, pmt, result);\n          if (result.video.length === 0) {\n            delete result.video;\n          }\n          break;\n        case StreamTypes.ADTS_STREAM_TYPE:\n          result.audio = [];\n          parseAudioPes_(bytes, pmt, result);\n          if (result.audio.length === 0) {\n            delete result.audio;\n          }\n          break;\n        default:\n          break;\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Inspects segment byte data and returns an object with start and end timing information\n *\n * @param {Uint8Array} bytes The segment byte data\n * @param {Number} baseTimestamp Relative reference timestamp used when adjusting frame\n *  timestamps for rollover. This value must be in 90khz clock.\n * @return {Object} Object containing start and end frame timing info of segment.\n */\nvar inspect = function(bytes, baseTimestamp) {\n  var isAacData = isLikelyAacData(bytes);\n\n  var result;\n\n  if (isAacData) {\n    result = inspectAac_(bytes);\n  } else {\n    result = inspectTs_(bytes);\n  }\n\n  if (!result || (!result.audio && !result.video)) {\n    return null;\n  }\n\n  adjustTimestamp_(result, baseTimestamp);\n\n  return result;\n};\n\nmodule.exports = {\n  inspect: inspect\n};\n","/**\n * mux.js\n *\n * Copyright (c) 2016 Brightcove\n * All rights reserved.\n *\n * Utilities to detect basic properties and metadata about TS Segments.\n */\n'use strict';\n\nvar StreamTypes = require('./stream-types.js');\n\nvar parsePid = function(packet) {\n  var pid = packet[1] & 0x1f;\n  pid <<= 8;\n  pid |= packet[2];\n  return pid;\n};\n\nvar parsePayloadUnitStartIndicator = function(packet) {\n  return !!(packet[1] & 0x40);\n};\n\nvar parseAdaptionField = function(packet) {\n  var offset = 0;\n  // if an adaption field is present, its length is specified by the\n  // fifth byte of the TS packet header. The adaptation field is\n  // used to add stuffing to PES packets that don't fill a complete\n  // TS packet, and to specify some forms of timing and control data\n  // that we do not currently use.\n  if (((packet[3] & 0x30) >>> 4) > 0x01) {\n    offset += packet[4] + 1;\n  }\n  return offset;\n};\n\nvar parseType = function(packet, pmtPid) {\n  var pid = parsePid(packet);\n  if (pid === 0) {\n    return 'pat';\n  } else if (pid === pmtPid) {\n    return 'pmt';\n  } else if (pmtPid) {\n    return 'pes';\n  }\n  return null;\n};\n\nvar parsePat = function(packet) {\n  var pusi = parsePayloadUnitStartIndicator(packet);\n  var offset = 4 + parseAdaptionField(packet);\n\n  if (pusi) {\n    offset += packet[offset] + 1;\n  }\n\n  return (packet[offset + 10] & 0x1f) << 8 | packet[offset + 11];\n};\n\nvar parsePmt = function(packet) {\n  var programMapTable = {};\n  var pusi = parsePayloadUnitStartIndicator(packet);\n  var payloadOffset = 4 + parseAdaptionField(packet);\n\n  if (pusi) {\n    payloadOffset += packet[payloadOffset] + 1;\n  }\n\n  // PMTs can be sent ahead of the time when they should actually\n  // take effect. We don't believe this should ever be the case\n  // for HLS but we'll ignore \"forward\" PMT declarations if we see\n  // them. Future PMT declarations have the current_next_indicator\n  // set to zero.\n  if (!(packet[payloadOffset + 5] & 0x01)) {\n    return;\n  }\n\n  var sectionLength, tableEnd, programInfoLength;\n  // the mapping table ends at the end of the current section\n  sectionLength = (packet[payloadOffset + 1] & 0x0f) << 8 | packet[payloadOffset + 2];\n  tableEnd = 3 + sectionLength - 4;\n\n  // to determine where the table is, we have to figure out how\n  // long the program info descriptors are\n  programInfoLength = (packet[payloadOffset + 10] & 0x0f) << 8 | packet[payloadOffset + 11];\n\n  // advance the offset to the first entry in the mapping table\n  var offset = 12 + programInfoLength;\n  while (offset < tableEnd) {\n    var i = payloadOffset + offset;\n    // add an entry that maps the elementary_pid to the stream_type\n    programMapTable[(packet[i + 1] & 0x1F) << 8 | packet[i + 2]] = packet[i];\n\n    // move to the next table entry\n    // skip past the elementary stream descriptors, if present\n    offset += ((packet[i + 3] & 0x0F) << 8 | packet[i + 4]) + 5;\n  }\n  return programMapTable;\n};\n\nvar parsePesType = function(packet, programMapTable) {\n  var pid = parsePid(packet);\n  var type = programMapTable[pid];\n  switch (type) {\n    case StreamTypes.H264_STREAM_TYPE:\n      return 'video';\n    case StreamTypes.ADTS_STREAM_TYPE:\n      return 'audio';\n    case StreamTypes.METADATA_STREAM_TYPE:\n      return 'timed-metadata';\n    default:\n      return null;\n  }\n};\n\nvar parsePesTime = function(packet) {\n  var pusi = parsePayloadUnitStartIndicator(packet);\n  if (!pusi) {\n    return null;\n  }\n\n  var offset = 4 + parseAdaptionField(packet);\n\n  if (offset >= packet.byteLength) {\n    // From the H 222.0 MPEG-TS spec\n    // \"For transport stream packets carrying PES packets, stuffing is needed when there\n    //  is insufficient PES packet data to completely fill the transport stream packet\n    //  payload bytes. Stuffing is accomplished by defining an adaptation field longer than\n    //  the sum of the lengths of the data elements in it, so that the payload bytes\n    //  remaining after the adaptation field exactly accommodates the available PES packet\n    //  data.\"\n    //\n    // If the offset is >= the length of the packet, then the packet contains no data\n    // and instead is just adaption field stuffing bytes\n    return null;\n  }\n\n  var pes = null;\n  var ptsDtsFlags;\n\n  // PES packets may be annotated with a PTS value, or a PTS value\n  // and a DTS value. Determine what combination of values is\n  // available to work with.\n  ptsDtsFlags = packet[offset + 7];\n\n  // PTS and DTS are normally stored as a 33-bit number.  Javascript\n  // performs all bitwise operations on 32-bit integers but javascript\n  // supports a much greater range (52-bits) of integer using standard\n  // mathematical operations.\n  // We construct a 31-bit value using bitwise operators over the 31\n  // most significant bits and then multiply by 4 (equal to a left-shift\n  // of 2) before we add the final 2 least significant bits of the\n  // timestamp (equal to an OR.)\n  if (ptsDtsFlags & 0xC0) {\n    pes = {};\n    // the PTS and DTS are not written out directly. For information\n    // on how they are encoded, see\n    // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n    pes.pts = (packet[offset + 9] & 0x0E) << 27 |\n      (packet[offset + 10] & 0xFF) << 20 |\n      (packet[offset + 11] & 0xFE) << 12 |\n      (packet[offset + 12] & 0xFF) <<  5 |\n      (packet[offset + 13] & 0xFE) >>>  3;\n    pes.pts *= 4; // Left shift by 2\n    pes.pts += (packet[offset + 13] & 0x06) >>> 1; // OR by the two LSBs\n    pes.dts = pes.pts;\n    if (ptsDtsFlags & 0x40) {\n      pes.dts = (packet[offset + 14] & 0x0E) << 27 |\n        (packet[offset + 15] & 0xFF) << 20 |\n        (packet[offset + 16] & 0xFE) << 12 |\n        (packet[offset + 17] & 0xFF) << 5 |\n        (packet[offset + 18] & 0xFE) >>> 3;\n      pes.dts *= 4; // Left shift by 2\n      pes.dts += (packet[offset + 18] & 0x06) >>> 1; // OR by the two LSBs\n    }\n  }\n  return pes;\n};\n\nvar parseNalUnitType = function(type) {\n  switch (type) {\n    case 0x05:\n      return 'slice_layer_without_partitioning_rbsp_idr';\n    case 0x06:\n      return 'sei_rbsp';\n    case 0x07:\n      return 'seq_parameter_set_rbsp';\n    case 0x08:\n      return 'pic_parameter_set_rbsp';\n    case 0x09:\n      return 'access_unit_delimiter_rbsp';\n    default:\n      return null;\n  }\n};\n\nvar videoPacketContainsKeyFrame = function(packet) {\n  var offset = 4 + parseAdaptionField(packet);\n  var frameBuffer = packet.subarray(offset);\n  var frameI = 0;\n  var frameSyncPoint = 0;\n  var foundKeyFrame = false;\n  var nalType;\n\n  // advance the sync point to a NAL start, if necessary\n  for (; frameSyncPoint < frameBuffer.byteLength - 3; frameSyncPoint++) {\n    if (frameBuffer[frameSyncPoint + 2] === 1) {\n      // the sync point is properly aligned\n      frameI = frameSyncPoint + 5;\n      break;\n    }\n  }\n\n  while (frameI < frameBuffer.byteLength) {\n    // look at the current byte to determine if we've hit the end of\n    // a NAL unit boundary\n    switch (frameBuffer[frameI]) {\n    case 0:\n      // skip past non-sync sequences\n      if (frameBuffer[frameI - 1] !== 0) {\n        frameI += 2;\n        break;\n      } else if (frameBuffer[frameI - 2] !== 0) {\n        frameI++;\n        break;\n      }\n\n      if (frameSyncPoint + 3 !== frameI - 2) {\n        nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n        if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n          foundKeyFrame = true;\n        }\n      }\n\n      // drop trailing zeroes\n      do {\n        frameI++;\n      } while (frameBuffer[frameI] !== 1 && frameI < frameBuffer.length);\n      frameSyncPoint = frameI - 2;\n      frameI += 3;\n      break;\n    case 1:\n      // skip past non-sync sequences\n      if (frameBuffer[frameI - 1] !== 0 ||\n          frameBuffer[frameI - 2] !== 0) {\n        frameI += 3;\n        break;\n      }\n\n      nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n      if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n        foundKeyFrame = true;\n      }\n      frameSyncPoint = frameI - 2;\n      frameI += 3;\n      break;\n    default:\n      // the current byte isn't a one or zero, so it cannot be part\n      // of a sync sequence\n      frameI += 3;\n      break;\n    }\n  }\n  frameBuffer = frameBuffer.subarray(frameSyncPoint);\n  frameI -= frameSyncPoint;\n  frameSyncPoint = 0;\n  // parse the final nal\n  if (frameBuffer && frameBuffer.byteLength > 3) {\n    nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n    if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n      foundKeyFrame = true;\n    }\n  }\n\n  return foundKeyFrame;\n};\n\n\nmodule.exports = {\n  parseType: parseType,\n  parsePat: parsePat,\n  parsePmt: parsePmt,\n  parsePayloadUnitStartIndicator: parsePayloadUnitStartIndicator,\n  parsePesType: parsePesType,\n  parsePesTime: parsePesTime,\n  videoPacketContainsKeyFrame: videoPacketContainsKeyFrame\n};\n","/**\n * mux.js\n *\n * Copyright (c) 2016 Brightcove\n * All rights reserved.\n *\n * Utilities to detect basic properties and metadata about Aac data.\n */\n'use strict';\n\nvar ADTS_SAMPLING_FREQUENCIES = [\n  96000,\n  88200,\n  64000,\n  48000,\n  44100,\n  32000,\n  24000,\n  22050,\n  16000,\n  12000,\n  11025,\n  8000,\n  7350\n];\n\nvar parseSyncSafeInteger = function(data) {\n  return (data[0] << 21) |\n          (data[1] << 14) |\n          (data[2] << 7) |\n          (data[3]);\n};\n\n// return a percent-encoded representation of the specified byte range\n// @see http://en.wikipedia.org/wiki/Percent-encoding\nvar percentEncode = function(bytes, start, end) {\n  var i, result = '';\n  for (i = start; i < end; i++) {\n    result += '%' + ('00' + bytes[i].toString(16)).slice(-2);\n  }\n  return result;\n};\n\n// return the string representation of the specified byte range,\n// interpreted as ISO-8859-1.\nvar parseIso88591 = function(bytes, start, end) {\n  return unescape(percentEncode(bytes, start, end)); // jshint ignore:line\n};\n\nvar parseId3TagSize = function(header, byteIndex) {\n  var\n    returnSize = (header[byteIndex + 6] << 21) |\n                 (header[byteIndex + 7] << 14) |\n                 (header[byteIndex + 8] << 7) |\n                 (header[byteIndex + 9]),\n    flags = header[byteIndex + 5],\n    footerPresent = (flags & 16) >> 4;\n\n  if (footerPresent) {\n    return returnSize + 20;\n  }\n  return returnSize + 10;\n};\n\nvar parseAdtsSize = function(header, byteIndex) {\n  var\n    lowThree = (header[byteIndex + 5] & 0xE0) >> 5,\n    middle = header[byteIndex + 4] << 3,\n    highTwo = header[byteIndex + 3] & 0x3 << 11;\n\n  return (highTwo | middle) | lowThree;\n};\n\nvar parseType = function(header, byteIndex) {\n  if ((header[byteIndex] === 'I'.charCodeAt(0)) &&\n      (header[byteIndex + 1] === 'D'.charCodeAt(0)) &&\n      (header[byteIndex + 2] === '3'.charCodeAt(0))) {\n    return 'timed-metadata';\n  } else if ((header[byteIndex] & 0xff === 0xff) &&\n             ((header[byteIndex + 1] & 0xf0) === 0xf0)) {\n    return 'audio';\n  }\n  return null;\n};\n\nvar parseSampleRate = function(packet) {\n  var i = 0;\n\n  while (i + 5 < packet.length) {\n    if (packet[i] !== 0xFF || (packet[i + 1] & 0xF6) !== 0xF0) {\n      // If a valid header was not found,  jump one forward and attempt to\n      // find a valid ADTS header starting at the next byte\n      i++;\n      continue;\n    }\n    return ADTS_SAMPLING_FREQUENCIES[(packet[i + 2] & 0x3c) >>> 2];\n  }\n\n  return null;\n};\n\nvar parseAacTimestamp = function(packet) {\n  var frameStart, frameSize, frame, frameHeader;\n\n  // find the start of the first frame and the end of the tag\n  frameStart = 10;\n  if (packet[5] & 0x40) {\n    // advance the frame start past the extended header\n    frameStart += 4; // header size field\n    frameStart += parseSyncSafeInteger(packet.subarray(10, 14));\n  }\n\n  // parse one or more ID3 frames\n  // http://id3.org/id3v2.3.0#ID3v2_frame_overview\n  do {\n    // determine the number of bytes in this frame\n    frameSize = parseSyncSafeInteger(packet.subarray(frameStart + 4, frameStart + 8));\n    if (frameSize < 1) {\n      return null;\n    }\n    frameHeader = String.fromCharCode(packet[frameStart],\n                                      packet[frameStart + 1],\n                                      packet[frameStart + 2],\n                                      packet[frameStart + 3]);\n\n    if (frameHeader === 'PRIV') {\n      frame = packet.subarray(frameStart + 10, frameStart + frameSize + 10);\n\n      for (var i = 0; i < frame.byteLength; i++) {\n        if (frame[i] === 0) {\n          var owner = parseIso88591(frame, 0, i);\n          if (owner === 'com.apple.streaming.transportStreamTimestamp') {\n            var d = frame.subarray(i + 1);\n            var size = ((d[3] & 0x01)  << 30) |\n                       (d[4]  << 22) |\n                       (d[5] << 14) |\n                       (d[6] << 6) |\n                       (d[7] >>> 2);\n            size *= 4;\n            size += d[7] & 0x03;\n\n            return size;\n          }\n          break;\n        }\n      }\n    }\n\n    frameStart += 10; // advance past the frame header\n    frameStart += frameSize; // advance past the frame body\n  } while (frameStart < packet.byteLength);\n  return null;\n};\n\nmodule.exports = {\n  parseId3TagSize: parseId3TagSize,\n  parseAdtsSize: parseAdtsSize,\n  parseType: parseType,\n  parseSampleRate: parseSampleRate,\n  parseAacTimestamp: parseAacTimestamp\n};\n","var classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\n\n\n\n\n\n\n\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\n\n\n\n\n\n\n\n\n\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\n/**\n * @file stream.js\n */\n/**\n * A lightweight readable stream implemention that handles event dispatching.\n *\n * @class Stream\n */\nvar Stream = function () {\n  function Stream() {\n    classCallCheck(this, Stream);\n\n    this.listeners = {};\n  }\n\n  /**\n   * Add a listener for a specified event type.\n   *\n   * @param {String} type the event name\n   * @param {Function} listener the callback to be invoked when an event of\n   * the specified type occurs\n   */\n\n\n  Stream.prototype.on = function on(type, listener) {\n    if (!this.listeners[type]) {\n      this.listeners[type] = [];\n    }\n    this.listeners[type].push(listener);\n  };\n\n  /**\n   * Remove a listener for a specified event type.\n   *\n   * @param {String} type the event name\n   * @param {Function} listener  a function previously registered for this\n   * type of event through `on`\n   * @return {Boolean} if we could turn it off or not\n   */\n\n\n  Stream.prototype.off = function off(type, listener) {\n    if (!this.listeners[type]) {\n      return false;\n    }\n\n    var index = this.listeners[type].indexOf(listener);\n\n    this.listeners[type].splice(index, 1);\n    return index > -1;\n  };\n\n  /**\n   * Trigger an event of the specified type on this stream. Any additional\n   * arguments to this function are passed as parameters to event listeners.\n   *\n   * @param {String} type the event name\n   */\n\n\n  Stream.prototype.trigger = function trigger(type) {\n    var callbacks = this.listeners[type];\n    var i = void 0;\n    var length = void 0;\n    var args = void 0;\n\n    if (!callbacks) {\n      return;\n    }\n    // Slicing the arguments on every invocation of this method\n    // can add a significant amount of overhead. Avoid the\n    // intermediate object creation for the common case of a\n    // single callback argument\n    if (arguments.length === 2) {\n      length = callbacks.length;\n      for (i = 0; i < length; ++i) {\n        callbacks[i].call(this, arguments[1]);\n      }\n    } else {\n      args = Array.prototype.slice.call(arguments, 1);\n      length = callbacks.length;\n      for (i = 0; i < length; ++i) {\n        callbacks[i].apply(this, args);\n      }\n    }\n  };\n\n  /**\n   * Destroys the stream and cleans up.\n   */\n\n\n  Stream.prototype.dispose = function dispose() {\n    this.listeners = {};\n  };\n  /**\n   * Forwards all `data` events on this stream to the destination stream. The\n   * destination stream should provide a method `push` to receive the data\n   * events as they arrive.\n   *\n   * @param {Stream} destination the stream that will receive all `data` events\n   * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n   */\n\n\n  Stream.prototype.pipe = function pipe(destination) {\n    this.on('data', function (data) {\n      destination.push(data);\n    });\n  };\n\n  return Stream;\n}();\n\n/**\n * @file m3u8/line-stream.js\n */\n/**\n * A stream that buffers string input and generates a `data` event for each\n * line.\n *\n * @class LineStream\n * @extends Stream\n */\n\nvar LineStream = function (_Stream) {\n  inherits(LineStream, _Stream);\n\n  function LineStream() {\n    classCallCheck(this, LineStream);\n\n    var _this = possibleConstructorReturn(this, _Stream.call(this));\n\n    _this.buffer = '';\n    return _this;\n  }\n\n  /**\n   * Add new data to be parsed.\n   *\n   * @param {String} data the text to process\n   */\n\n\n  LineStream.prototype.push = function push(data) {\n    var nextNewline = void 0;\n\n    this.buffer += data;\n    nextNewline = this.buffer.indexOf('\\n');\n\n    for (; nextNewline > -1; nextNewline = this.buffer.indexOf('\\n')) {\n      this.trigger('data', this.buffer.substring(0, nextNewline));\n      this.buffer = this.buffer.substring(nextNewline + 1);\n    }\n  };\n\n  return LineStream;\n}(Stream);\n\n/**\n * @file m3u8/parse-stream.js\n */\n/**\n * \"forgiving\" attribute list psuedo-grammar:\n * attributes -> keyvalue (',' keyvalue)*\n * keyvalue   -> key '=' value\n * key        -> [^=]*\n * value      -> '\"' [^\"]* '\"' | [^,]*\n */\nvar attributeSeparator = function attributeSeparator() {\n  var key = '[^=]*';\n  var value = '\"[^\"]*\"|[^,]*';\n  var keyvalue = '(?:' + key + ')=(?:' + value + ')';\n\n  return new RegExp('(?:^|,)(' + keyvalue + ')');\n};\n\n/**\n * Parse attributes from a line given the seperator\n *\n * @param {String} attributes the attibute line to parse\n */\nvar parseAttributes = function parseAttributes(attributes) {\n  // split the string using attributes as the separator\n  var attrs = attributes.split(attributeSeparator());\n  var result = {};\n  var i = attrs.length;\n  var attr = void 0;\n\n  while (i--) {\n    // filter out unmatched portions of the string\n    if (attrs[i] === '') {\n      continue;\n    }\n\n    // split the key and value\n    attr = /([^=]*)=(.*)/.exec(attrs[i]).slice(1);\n    // trim whitespace and remove optional quotes around the value\n    attr[0] = attr[0].replace(/^\\s+|\\s+$/g, '');\n    attr[1] = attr[1].replace(/^\\s+|\\s+$/g, '');\n    attr[1] = attr[1].replace(/^['\"](.*)['\"]$/g, '$1');\n    result[attr[0]] = attr[1];\n  }\n  return result;\n};\n\n/**\n * A line-level M3U8 parser event stream. It expects to receive input one\n * line at a time and performs a context-free parse of its contents. A stream\n * interpretation of a manifest can be useful if the manifest is expected to\n * be too large to fit comfortably into memory or the entirety of the input\n * is not immediately available. Otherwise, it's probably much easier to work\n * with a regular `Parser` object.\n *\n * Produces `data` events with an object that captures the parser's\n * interpretation of the input. That object has a property `tag` that is one\n * of `uri`, `comment`, or `tag`. URIs only have a single additional\n * property, `line`, which captures the entirety of the input without\n * interpretation. Comments similarly have a single additional property\n * `text` which is the input without the leading `#`.\n *\n * Tags always have a property `tagType` which is the lower-cased version of\n * the M3U8 directive without the `#EXT` or `#EXT-X-` prefix. For instance,\n * `#EXT-X-MEDIA-SEQUENCE` becomes `media-sequence` when parsed. Unrecognized\n * tags are given the tag type `unknown` and a single additional property\n * `data` with the remainder of the input.\n *\n * @class ParseStream\n * @extends Stream\n */\n\nvar ParseStream = function (_Stream) {\n  inherits(ParseStream, _Stream);\n\n  function ParseStream() {\n    classCallCheck(this, ParseStream);\n\n    var _this = possibleConstructorReturn(this, _Stream.call(this));\n\n    _this.customParsers = [];\n    return _this;\n  }\n\n  /**\n   * Parses an additional line of input.\n   *\n   * @param {String} line a single line of an M3U8 file to parse\n   */\n\n\n  ParseStream.prototype.push = function push(line) {\n    var match = void 0;\n    var event = void 0;\n\n    // strip whitespace\n    line = line.replace(/^[\\u0000\\s]+|[\\u0000\\s]+$/g, '');\n    if (line.length === 0) {\n      // ignore empty lines\n      return;\n    }\n\n    // URIs\n    if (line[0] !== '#') {\n      this.trigger('data', {\n        type: 'uri',\n        uri: line\n      });\n      return;\n    }\n\n    for (var i = 0; i < this.customParsers.length; i++) {\n      if (this.customParsers[i].call(this, line)) {\n        return;\n      }\n    }\n\n    // Comments\n    if (line.indexOf('#EXT') !== 0) {\n      this.trigger('data', {\n        type: 'comment',\n        text: line.slice(1)\n      });\n      return;\n    }\n\n    // strip off any carriage returns here so the regex matching\n    // doesn't have to account for them.\n    line = line.replace('\\r', '');\n\n    // Tags\n    match = /^#EXTM3U/.exec(line);\n    if (match) {\n      this.trigger('data', {\n        type: 'tag',\n        tagType: 'm3u'\n      });\n      return;\n    }\n    match = /^#EXTINF:?([0-9\\.]*)?,?(.*)?$/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'inf'\n      };\n      if (match[1]) {\n        event.duration = parseFloat(match[1]);\n      }\n      if (match[2]) {\n        event.title = match[2];\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-TARGETDURATION:?([0-9.]*)?/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'targetduration'\n      };\n      if (match[1]) {\n        event.duration = parseInt(match[1], 10);\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#ZEN-TOTAL-DURATION:?([0-9.]*)?/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'totalduration'\n      };\n      if (match[1]) {\n        event.duration = parseInt(match[1], 10);\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-VERSION:?([0-9.]*)?/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'version'\n      };\n      if (match[1]) {\n        event.version = parseInt(match[1], 10);\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-MEDIA-SEQUENCE:?(\\-?[0-9.]*)?/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'media-sequence'\n      };\n      if (match[1]) {\n        event.number = parseInt(match[1], 10);\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-DISCONTINUITY-SEQUENCE:?(\\-?[0-9.]*)?/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'discontinuity-sequence'\n      };\n      if (match[1]) {\n        event.number = parseInt(match[1], 10);\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-PLAYLIST-TYPE:?(.*)?$/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'playlist-type'\n      };\n      if (match[1]) {\n        event.playlistType = match[1];\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-BYTERANGE:?([0-9.]*)?@?([0-9.]*)?/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'byterange'\n      };\n      if (match[1]) {\n        event.length = parseInt(match[1], 10);\n      }\n      if (match[2]) {\n        event.offset = parseInt(match[2], 10);\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-ALLOW-CACHE:?(YES|NO)?/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'allow-cache'\n      };\n      if (match[1]) {\n        event.allowed = !/NO/.test(match[1]);\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-MAP:?(.*)$/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'map'\n      };\n\n      if (match[1]) {\n        var attributes = parseAttributes(match[1]);\n\n        if (attributes.URI) {\n          event.uri = attributes.URI;\n        }\n        if (attributes.BYTERANGE) {\n          var _attributes$BYTERANGE = attributes.BYTERANGE.split('@'),\n              length = _attributes$BYTERANGE[0],\n              offset = _attributes$BYTERANGE[1];\n\n          event.byterange = {};\n          if (length) {\n            event.byterange.length = parseInt(length, 10);\n          }\n          if (offset) {\n            event.byterange.offset = parseInt(offset, 10);\n          }\n        }\n      }\n\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-STREAM-INF:?(.*)$/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'stream-inf'\n      };\n      if (match[1]) {\n        event.attributes = parseAttributes(match[1]);\n\n        if (event.attributes.RESOLUTION) {\n          var split = event.attributes.RESOLUTION.split('x');\n          var resolution = {};\n\n          if (split[0]) {\n            resolution.width = parseInt(split[0], 10);\n          }\n          if (split[1]) {\n            resolution.height = parseInt(split[1], 10);\n          }\n          event.attributes.RESOLUTION = resolution;\n        }\n        if (event.attributes.BANDWIDTH) {\n          event.attributes.BANDWIDTH = parseInt(event.attributes.BANDWIDTH, 10);\n        }\n        if (event.attributes['PROGRAM-ID']) {\n          event.attributes['PROGRAM-ID'] = parseInt(event.attributes['PROGRAM-ID'], 10);\n        }\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-MEDIA:?(.*)$/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'media'\n      };\n      if (match[1]) {\n        event.attributes = parseAttributes(match[1]);\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-ENDLIST/.exec(line);\n    if (match) {\n      this.trigger('data', {\n        type: 'tag',\n        tagType: 'endlist'\n      });\n      return;\n    }\n    match = /^#EXT-X-DISCONTINUITY/.exec(line);\n    if (match) {\n      this.trigger('data', {\n        type: 'tag',\n        tagType: 'discontinuity'\n      });\n      return;\n    }\n    match = /^#EXT-X-PROGRAM-DATE-TIME:?(.*)$/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'program-date-time'\n      };\n      if (match[1]) {\n        event.dateTimeString = match[1];\n        event.dateTimeObject = new Date(match[1]);\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-KEY:?(.*)$/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'key'\n      };\n      if (match[1]) {\n        event.attributes = parseAttributes(match[1]);\n        // parse the IV string into a Uint32Array\n        if (event.attributes.IV) {\n          if (event.attributes.IV.substring(0, 2).toLowerCase() === '0x') {\n            event.attributes.IV = event.attributes.IV.substring(2);\n          }\n\n          event.attributes.IV = event.attributes.IV.match(/.{8}/g);\n          event.attributes.IV[0] = parseInt(event.attributes.IV[0], 16);\n          event.attributes.IV[1] = parseInt(event.attributes.IV[1], 16);\n          event.attributes.IV[2] = parseInt(event.attributes.IV[2], 16);\n          event.attributes.IV[3] = parseInt(event.attributes.IV[3], 16);\n          event.attributes.IV = new Uint32Array(event.attributes.IV);\n        }\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-START:?(.*)$/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'start'\n      };\n      if (match[1]) {\n        event.attributes = parseAttributes(match[1]);\n\n        event.attributes['TIME-OFFSET'] = parseFloat(event.attributes['TIME-OFFSET']);\n        event.attributes.PRECISE = /YES/.test(event.attributes.PRECISE);\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-CUE-OUT-CONT:?(.*)?$/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'cue-out-cont'\n      };\n      if (match[1]) {\n        event.data = match[1];\n      } else {\n        event.data = '';\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-CUE-OUT:?(.*)?$/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'cue-out'\n      };\n      if (match[1]) {\n        event.data = match[1];\n      } else {\n        event.data = '';\n      }\n      this.trigger('data', event);\n      return;\n    }\n    match = /^#EXT-X-CUE-IN:?(.*)?$/.exec(line);\n    if (match) {\n      event = {\n        type: 'tag',\n        tagType: 'cue-in'\n      };\n      if (match[1]) {\n        event.data = match[1];\n      } else {\n        event.data = '';\n      }\n      this.trigger('data', event);\n      return;\n    }\n\n    // unknown tag type\n    this.trigger('data', {\n      type: 'tag',\n      data: line.slice(4)\n    });\n  };\n\n  /**\n   * Add a parser for custom headers\n   *\n   * @param {Object}   options              a map of options for the added parser\n   * @param {RegExp}   options.expression   a regular expression to match the custom header\n   * @param {string}   options.customType   the custom type to register to the output\n   * @param {Function} [options.dataParser] function to parse the line into an object\n   * @param {boolean}  [options.segment]    should tag data be attached to the segment object\n   */\n\n\n  ParseStream.prototype.addParser = function addParser(_ref) {\n    var _this2 = this;\n\n    var expression = _ref.expression,\n        customType = _ref.customType,\n        dataParser = _ref.dataParser,\n        segment = _ref.segment;\n\n    if (typeof dataParser !== 'function') {\n      dataParser = function dataParser(line) {\n        return line;\n      };\n    }\n    this.customParsers.push(function (line) {\n      var match = expression.exec(line);\n\n      if (match) {\n        _this2.trigger('data', {\n          type: 'custom',\n          data: dataParser(line),\n          customType: customType,\n          segment: segment\n        });\n        return true;\n      }\n    });\n  };\n\n  return ParseStream;\n}(Stream);\n\n/**\n * @file m3u8/parser.js\n */\n/**\n * A parser for M3U8 files. The current interpretation of the input is\n * exposed as a property `manifest` on parser objects. It's just two lines to\n * create and parse a manifest once you have the contents available as a string:\n *\n * ```js\n * var parser = new m3u8.Parser();\n * parser.push(xhr.responseText);\n * ```\n *\n * New input can later be applied to update the manifest object by calling\n * `push` again.\n *\n * The parser attempts to create a usable manifest object even if the\n * underlying input is somewhat nonsensical. It emits `info` and `warning`\n * events during the parse if it encounters input that seems invalid or\n * requires some property of the manifest object to be defaulted.\n *\n * @class Parser\n * @extends Stream\n */\n\nvar Parser = function (_Stream) {\n  inherits(Parser, _Stream);\n\n  function Parser() {\n    classCallCheck(this, Parser);\n\n    var _this = possibleConstructorReturn(this, _Stream.call(this));\n\n    _this.lineStream = new LineStream();\n    _this.parseStream = new ParseStream();\n    _this.lineStream.pipe(_this.parseStream);\n\n    /* eslint-disable consistent-this */\n    var self = _this;\n    /* eslint-enable consistent-this */\n    var uris = [];\n    var currentUri = {};\n    // if specified, the active EXT-X-MAP definition\n    var currentMap = void 0;\n    // if specified, the active decryption key\n    var _key = void 0;\n    var noop = function noop() {};\n    var defaultMediaGroups = {\n      'AUDIO': {},\n      'VIDEO': {},\n      'CLOSED-CAPTIONS': {},\n      'SUBTITLES': {}\n    };\n    // group segments into numbered timelines delineated by discontinuities\n    var currentTimeline = 0;\n\n    // the manifest is empty until the parse stream begins delivering data\n    _this.manifest = {\n      allowCache: true,\n      discontinuityStarts: [],\n      segments: []\n    };\n\n    // update the manifest with the m3u8 entry from the parse stream\n    _this.parseStream.on('data', function (entry) {\n      var mediaGroup = void 0;\n      var rendition = void 0;\n\n      ({\n        tag: function tag() {\n          // switch based on the tag type\n          (({\n            'allow-cache': function allowCache() {\n              this.manifest.allowCache = entry.allowed;\n              if (!('allowed' in entry)) {\n                this.trigger('info', {\n                  message: 'defaulting allowCache to YES'\n                });\n                this.manifest.allowCache = true;\n              }\n            },\n            byterange: function byterange() {\n              var byterange = {};\n\n              if ('length' in entry) {\n                currentUri.byterange = byterange;\n                byterange.length = entry.length;\n\n                if (!('offset' in entry)) {\n                  this.trigger('info', {\n                    message: 'defaulting offset to zero'\n                  });\n                  entry.offset = 0;\n                }\n              }\n              if ('offset' in entry) {\n                currentUri.byterange = byterange;\n                byterange.offset = entry.offset;\n              }\n            },\n            endlist: function endlist() {\n              this.manifest.endList = true;\n            },\n            inf: function inf() {\n              if (!('mediaSequence' in this.manifest)) {\n                this.manifest.mediaSequence = 0;\n                this.trigger('info', {\n                  message: 'defaulting media sequence to zero'\n                });\n              }\n              if (!('discontinuitySequence' in this.manifest)) {\n                this.manifest.discontinuitySequence = 0;\n                this.trigger('info', {\n                  message: 'defaulting discontinuity sequence to zero'\n                });\n              }\n              if (entry.duration > 0) {\n                currentUri.duration = entry.duration;\n              }\n\n              if (entry.duration === 0) {\n                currentUri.duration = 0.01;\n                this.trigger('info', {\n                  message: 'updating zero segment duration to a small value'\n                });\n              }\n\n              this.manifest.segments = uris;\n            },\n            key: function key() {\n              if (!entry.attributes) {\n                this.trigger('warn', {\n                  message: 'ignoring key declaration without attribute list'\n                });\n                return;\n              }\n              // clear the active encryption key\n              if (entry.attributes.METHOD === 'NONE') {\n                _key = null;\n                return;\n              }\n              if (!entry.attributes.URI) {\n                this.trigger('warn', {\n                  message: 'ignoring key declaration without URI'\n                });\n                return;\n              }\n              if (!entry.attributes.METHOD) {\n                this.trigger('warn', {\n                  message: 'defaulting key method to AES-128'\n                });\n              }\n\n              // setup an encryption key for upcoming segments\n              _key = {\n                method: entry.attributes.METHOD || 'AES-128',\n                uri: entry.attributes.URI\n              };\n\n              if (typeof entry.attributes.IV !== 'undefined') {\n                _key.iv = entry.attributes.IV;\n              }\n            },\n            'media-sequence': function mediaSequence() {\n              if (!isFinite(entry.number)) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid media sequence: ' + entry.number\n                });\n                return;\n              }\n              this.manifest.mediaSequence = entry.number;\n            },\n            'discontinuity-sequence': function discontinuitySequence() {\n              if (!isFinite(entry.number)) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid discontinuity sequence: ' + entry.number\n                });\n                return;\n              }\n              this.manifest.discontinuitySequence = entry.number;\n              currentTimeline = entry.number;\n            },\n            'playlist-type': function playlistType() {\n              if (!/VOD|EVENT/.test(entry.playlistType)) {\n                this.trigger('warn', {\n                  message: 'ignoring unknown playlist type: ' + entry.playlist\n                });\n                return;\n              }\n              this.manifest.playlistType = entry.playlistType;\n            },\n            map: function map() {\n              currentMap = {};\n              if (entry.uri) {\n                currentMap.uri = entry.uri;\n              }\n              if (entry.byterange) {\n                currentMap.byterange = entry.byterange;\n              }\n            },\n            'stream-inf': function streamInf() {\n              this.manifest.playlists = uris;\n              this.manifest.mediaGroups = this.manifest.mediaGroups || defaultMediaGroups;\n\n              if (!entry.attributes) {\n                this.trigger('warn', {\n                  message: 'ignoring empty stream-inf attributes'\n                });\n                return;\n              }\n\n              if (!currentUri.attributes) {\n                currentUri.attributes = {};\n              }\n              _extends(currentUri.attributes, entry.attributes);\n            },\n            media: function media() {\n              this.manifest.mediaGroups = this.manifest.mediaGroups || defaultMediaGroups;\n\n              if (!(entry.attributes && entry.attributes.TYPE && entry.attributes['GROUP-ID'] && entry.attributes.NAME)) {\n                this.trigger('warn', {\n                  message: 'ignoring incomplete or missing media group'\n                });\n                return;\n              }\n\n              // find the media group, creating defaults as necessary\n              var mediaGroupType = this.manifest.mediaGroups[entry.attributes.TYPE];\n\n              mediaGroupType[entry.attributes['GROUP-ID']] = mediaGroupType[entry.attributes['GROUP-ID']] || {};\n              mediaGroup = mediaGroupType[entry.attributes['GROUP-ID']];\n\n              // collect the rendition metadata\n              rendition = {\n                'default': /yes/i.test(entry.attributes.DEFAULT)\n              };\n              if (rendition['default']) {\n                rendition.autoselect = true;\n              } else {\n                rendition.autoselect = /yes/i.test(entry.attributes.AUTOSELECT);\n              }\n              if (entry.attributes.LANGUAGE) {\n                rendition.language = entry.attributes.LANGUAGE;\n              }\n              if (entry.attributes.URI) {\n                rendition.uri = entry.attributes.URI;\n              }\n              if (entry.attributes['INSTREAM-ID']) {\n                rendition.instreamId = entry.attributes['INSTREAM-ID'];\n              }\n              if (entry.attributes.CHARACTERISTICS) {\n                rendition.characteristics = entry.attributes.CHARACTERISTICS;\n              }\n              if (entry.attributes.FORCED) {\n                rendition.forced = /yes/i.test(entry.attributes.FORCED);\n              }\n\n              // insert the new rendition\n              mediaGroup[entry.attributes.NAME] = rendition;\n            },\n            discontinuity: function discontinuity() {\n              currentTimeline += 1;\n              currentUri.discontinuity = true;\n              this.manifest.discontinuityStarts.push(uris.length);\n            },\n            'program-date-time': function programDateTime() {\n              if (typeof this.manifest.dateTimeString === 'undefined') {\n                // PROGRAM-DATE-TIME is a media-segment tag, but for backwards\n                // compatibility, we add the first occurence of the PROGRAM-DATE-TIME tag\n                // to the manifest object\n                // TODO: Consider removing this in future major version\n                this.manifest.dateTimeString = entry.dateTimeString;\n                this.manifest.dateTimeObject = entry.dateTimeObject;\n              }\n\n              currentUri.dateTimeString = entry.dateTimeString;\n              currentUri.dateTimeObject = entry.dateTimeObject;\n            },\n            targetduration: function targetduration() {\n              if (!isFinite(entry.duration) || entry.duration < 0) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid target duration: ' + entry.duration\n                });\n                return;\n              }\n              this.manifest.targetDuration = entry.duration;\n            },\n            totalduration: function totalduration() {\n              if (!isFinite(entry.duration) || entry.duration < 0) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid total duration: ' + entry.duration\n                });\n                return;\n              }\n              this.manifest.totalDuration = entry.duration;\n            },\n            start: function start() {\n              if (!entry.attributes || isNaN(entry.attributes['TIME-OFFSET'])) {\n                this.trigger('warn', {\n                  message: 'ignoring start declaration without appropriate attribute list'\n                });\n                return;\n              }\n              this.manifest.start = {\n                timeOffset: entry.attributes['TIME-OFFSET'],\n                precise: entry.attributes.PRECISE\n              };\n            },\n            'cue-out': function cueOut() {\n              currentUri.cueOut = entry.data;\n            },\n            'cue-out-cont': function cueOutCont() {\n              currentUri.cueOutCont = entry.data;\n            },\n            'cue-in': function cueIn() {\n              currentUri.cueIn = entry.data;\n            }\n          })[entry.tagType] || noop).call(self);\n        },\n        uri: function uri() {\n          currentUri.uri = entry.uri;\n          uris.push(currentUri);\n\n          // if no explicit duration was declared, use the target duration\n          if (this.manifest.targetDuration && !('duration' in currentUri)) {\n            this.trigger('warn', {\n              message: 'defaulting segment duration to the target duration'\n            });\n            currentUri.duration = this.manifest.targetDuration;\n          }\n          // annotate with encryption information, if necessary\n          if (_key) {\n            currentUri.key = _key;\n          }\n          currentUri.timeline = currentTimeline;\n          // annotate with initialization segment information, if necessary\n          if (currentMap) {\n            currentUri.map = currentMap;\n          }\n\n          // prepare for the next URI\n          currentUri = {};\n        },\n        comment: function comment() {\n          // comments are not important for playback\n        },\n        custom: function custom() {\n          // if this is segment-level data attach the output to the segment\n          if (entry.segment) {\n            currentUri.custom = currentUri.custom || {};\n            currentUri.custom[entry.customType] = entry.data;\n            // if this is manifest-level data attach to the top level manifest object\n          } else {\n            this.manifest.custom = this.manifest.custom || {};\n            this.manifest.custom[entry.customType] = entry.data;\n          }\n        }\n      })[entry.type].call(self);\n    });\n    return _this;\n  }\n\n  /**\n   * Parse the input string and update the manifest object.\n   *\n   * @param {String} chunk a potentially incomplete portion of the manifest\n   */\n\n\n  Parser.prototype.push = function push(chunk) {\n    this.lineStream.push(chunk);\n  };\n\n  /**\n   * Flush any remaining input. This can be handy if the last line of an M3U8\n   * manifest did not contain a trailing newline but the file has been\n   * completely received.\n   */\n\n\n  Parser.prototype.end = function end() {\n    // flush any buffered input\n    this.lineStream.push('\\n');\n  };\n  /**\n   * Add an additional parser for non-standard tags\n   *\n   * @param {Object}   options              a map of options for the added parser\n   * @param {RegExp}   options.expression   a regular expression to match the custom header\n   * @param {string}   options.type         the type to register to the output\n   * @param {Function} [options.dataParser] function to parse the line into an object\n   * @param {boolean}  [options.segment]    should tag data be attached to the segment object\n   */\n\n\n  Parser.prototype.addParser = function addParser(options) {\n    this.parseStream.addParser(options);\n  };\n\n  return Parser;\n}(Stream);\n\n/**\n * @file m3u8/index.js\n *\n * Utilities for parsing M3U8 files. If the entire manifest is available,\n * `Parser` will create an object representation with enough detail for managing\n * playback. `ParseStream` and `LineStream` are lower-level parsing primitives\n * that do not assume the entirety of the manifest is ready and expose a\n * ReadableStream-like interface.\n */\n\nexport { LineStream, ParseStream, Parser };\n","/**\n * mpd-parser\n * @version 0.6.1\n * @copyright 2018 Brightcove, Inc\n * @license Apache-2.0\n */\nimport URLToolkit from 'url-toolkit';\nimport window from 'global/window';\n\nvar version = \"0.6.1\";\n\nvar formatAudioPlaylist = function formatAudioPlaylist(_ref) {\n  var _attributes;\n\n  var attributes = _ref.attributes,\n      segments = _ref.segments;\n\n  var playlist = {\n    attributes: (_attributes = {\n      NAME: attributes.id,\n      BANDWIDTH: attributes.bandwidth,\n      CODECS: attributes.codecs\n    }, _attributes['PROGRAM-ID'] = 1, _attributes),\n    uri: '',\n    endList: (attributes.type || 'static') === 'static',\n    timeline: attributes.periodIndex,\n    resolvedUri: '',\n    targetDuration: attributes.duration,\n    segments: segments,\n    mediaSequence: segments.length ? segments[0].number : 1\n  };\n\n  if (attributes.contentProtection) {\n    playlist.contentProtection = attributes.contentProtection;\n  }\n\n  return playlist;\n};\n\nvar formatVttPlaylist = function formatVttPlaylist(_ref2) {\n  var _attributes2;\n\n  var attributes = _ref2.attributes,\n      segments = _ref2.segments;\n\n  if (typeof segments === 'undefined') {\n    // vtt tracks may use single file in BaseURL\n    segments = [{\n      uri: attributes.baseUrl,\n      timeline: attributes.periodIndex,\n      resolvedUri: attributes.baseUrl || '',\n      duration: attributes.sourceDuration,\n      number: 0\n    }];\n    // targetDuration should be the same duration as the only segment\n    attributes.duration = attributes.sourceDuration;\n  }\n  return {\n    attributes: (_attributes2 = {\n      NAME: attributes.id,\n      BANDWIDTH: attributes.bandwidth\n    }, _attributes2['PROGRAM-ID'] = 1, _attributes2),\n    uri: '',\n    endList: (attributes.type || 'static') === 'static',\n    timeline: attributes.periodIndex,\n    resolvedUri: attributes.baseUrl || '',\n    targetDuration: attributes.duration,\n    segments: segments,\n    mediaSequence: segments.length ? segments[0].number : 1\n  };\n};\n\nvar organizeAudioPlaylists = function organizeAudioPlaylists(playlists) {\n  return playlists.reduce(function (a, playlist) {\n    var role = playlist.attributes.role && playlist.attributes.role.value || 'main';\n    var language = playlist.attributes.lang || '';\n\n    var label = 'main';\n\n    if (language) {\n      label = playlist.attributes.lang + ' (' + role + ')';\n    }\n\n    // skip if we already have the highest quality audio for a language\n    if (a[label] && a[label].playlists[0].attributes.BANDWIDTH > playlist.attributes.bandwidth) {\n      return a;\n    }\n\n    a[label] = {\n      language: language,\n      autoselect: true,\n      'default': role === 'main',\n      playlists: [formatAudioPlaylist(playlist)],\n      uri: ''\n    };\n\n    return a;\n  }, {});\n};\n\nvar organizeVttPlaylists = function organizeVttPlaylists(playlists) {\n  return playlists.reduce(function (a, playlist) {\n    var label = playlist.attributes.lang || 'text';\n\n    // skip if we already have subtitles\n    if (a[label]) {\n      return a;\n    }\n\n    a[label] = {\n      language: label,\n      'default': false,\n      autoselect: false,\n      playlists: [formatVttPlaylist(playlist)],\n      uri: ''\n    };\n\n    return a;\n  }, {});\n};\n\nvar formatVideoPlaylist = function formatVideoPlaylist(_ref3) {\n  var _attributes3;\n\n  var attributes = _ref3.attributes,\n      segments = _ref3.segments;\n\n  var playlist = {\n    attributes: (_attributes3 = {\n      NAME: attributes.id,\n      AUDIO: 'audio',\n      SUBTITLES: 'subs',\n      RESOLUTION: {\n        width: attributes.width,\n        height: attributes.height\n      },\n      CODECS: attributes.codecs,\n      BANDWIDTH: attributes.bandwidth\n    }, _attributes3['PROGRAM-ID'] = 1, _attributes3),\n    uri: '',\n    endList: (attributes.type || 'static') === 'static',\n    timeline: attributes.periodIndex,\n    resolvedUri: '',\n    targetDuration: attributes.duration,\n    segments: segments,\n    mediaSequence: segments.length ? segments[0].number : 1\n  };\n\n  if (attributes.contentProtection) {\n    playlist.contentProtection = attributes.contentProtection;\n  }\n\n  return playlist;\n};\n\nvar toM3u8 = function toM3u8(dashPlaylists) {\n  var _mediaGroups;\n\n  if (!dashPlaylists.length) {\n    return {};\n  }\n\n  // grab all master attributes\n  var _dashPlaylists$0$attr = dashPlaylists[0].attributes,\n      duration = _dashPlaylists$0$attr.sourceDuration,\n      _dashPlaylists$0$attr2 = _dashPlaylists$0$attr.minimumUpdatePeriod,\n      minimumUpdatePeriod = _dashPlaylists$0$attr2 === undefined ? 0 : _dashPlaylists$0$attr2;\n\n\n  var videoOnly = function videoOnly(_ref4) {\n    var attributes = _ref4.attributes;\n    return attributes.mimeType === 'video/mp4' || attributes.contentType === 'video';\n  };\n  var audioOnly = function audioOnly(_ref5) {\n    var attributes = _ref5.attributes;\n    return attributes.mimeType === 'audio/mp4' || attributes.contentType === 'audio';\n  };\n  var vttOnly = function vttOnly(_ref6) {\n    var attributes = _ref6.attributes;\n    return attributes.mimeType === 'text/vtt' || attributes.contentType === 'text';\n  };\n\n  var videoPlaylists = dashPlaylists.filter(videoOnly).map(formatVideoPlaylist);\n  var audioPlaylists = dashPlaylists.filter(audioOnly);\n  var vttPlaylists = dashPlaylists.filter(vttOnly);\n\n  var master = {\n    allowCache: true,\n    discontinuityStarts: [],\n    segments: [],\n    endList: true,\n    mediaGroups: (_mediaGroups = {\n      AUDIO: {},\n      VIDEO: {}\n    }, _mediaGroups['CLOSED-CAPTIONS'] = {}, _mediaGroups.SUBTITLES = {}, _mediaGroups),\n    uri: '',\n    duration: duration,\n    playlists: videoPlaylists,\n    minimumUpdatePeriod: minimumUpdatePeriod * 1000\n  };\n\n  if (audioPlaylists.length) {\n    master.mediaGroups.AUDIO.audio = organizeAudioPlaylists(audioPlaylists);\n  }\n\n  if (vttPlaylists.length) {\n    master.mediaGroups.SUBTITLES.subs = organizeVttPlaylists(vttPlaylists);\n  }\n\n  return master;\n};\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar isObject = function isObject(obj) {\n  return !!obj && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object';\n};\n\nvar merge = function merge() {\n  for (var _len = arguments.length, objects = Array(_len), _key = 0; _key < _len; _key++) {\n    objects[_key] = arguments[_key];\n  }\n\n  return objects.reduce(function (result, source) {\n\n    Object.keys(source).forEach(function (key) {\n\n      if (Array.isArray(result[key]) && Array.isArray(source[key])) {\n        result[key] = result[key].concat(source[key]);\n      } else if (isObject(result[key]) && isObject(source[key])) {\n        result[key] = merge(result[key], source[key]);\n      } else {\n        result[key] = source[key];\n      }\n    });\n    return result;\n  }, {});\n};\n\nvar resolveUrl = function resolveUrl(baseUrl, relativeUrl) {\n  // return early if we don't need to resolve\n  if (/^[a-z]+:/i.test(relativeUrl)) {\n    return relativeUrl;\n  }\n\n  // if the base URL is relative then combine with the current location\n  if (!/\\/\\//i.test(baseUrl)) {\n    baseUrl = URLToolkit.buildAbsoluteURL(window.location.href, baseUrl);\n  }\n\n  return URLToolkit.buildAbsoluteURL(baseUrl, relativeUrl);\n};\n\n/**\n * @typedef {Object} SingleUri\n * @property {string} uri - relative location of segment\n * @property {string} resolvedUri - resolved location of segment\n * @property {Object} byterange - Object containing information on how to make byte range\n *   requests following byte-range-spec per RFC2616.\n * @property {String} byterange.length - length of range request\n * @property {String} byterange.offset - byte offset of range request\n *\n * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.1\n */\n\n/**\n * Converts a URLType node (5.3.9.2.3 Table 13) to a segment object\n * that conforms to how m3u8-parser is structured\n *\n * @see https://github.com/videojs/m3u8-parser\n *\n * @param {string} baseUrl - baseUrl provided by <BaseUrl> nodes\n * @param {string} source - source url for segment\n * @param {string} range - optional range used for range calls, follows\n * @return {SingleUri} full segment information transformed into a format similar\n *   to m3u8-parser\n */\nvar urlTypeToSegment = function urlTypeToSegment(_ref) {\n  var _ref$baseUrl = _ref.baseUrl,\n      baseUrl = _ref$baseUrl === undefined ? '' : _ref$baseUrl,\n      _ref$source = _ref.source,\n      source = _ref$source === undefined ? '' : _ref$source,\n      _ref$range = _ref.range,\n      range = _ref$range === undefined ? '' : _ref$range;\n\n  var init = {\n    uri: source,\n    resolvedUri: resolveUrl(baseUrl || '', source)\n  };\n\n  if (range) {\n    var ranges = range.split('-');\n    var startRange = parseInt(ranges[0], 10);\n    var endRange = parseInt(ranges[1], 10);\n\n    init.byterange = {\n      length: endRange - startRange,\n      offset: startRange\n    };\n  }\n\n  return init;\n};\n\n/**\n * Calculates the R (repetition) value for a live stream (for the final segment\n * in a manifest where the r value is negative 1)\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {number} time\n *        current time (typically the total time up until the final segment)\n * @param {number} duration\n *        duration property for the given <S />\n *\n * @return {number}\n *        R value to reach the end of the given period\n */\nvar getLiveRValue = function getLiveRValue(attributes, time, duration) {\n  var NOW = attributes.NOW,\n      clientOffset = attributes.clientOffset,\n      availabilityStartTime = attributes.availabilityStartTime,\n      _attributes$timescale = attributes.timescale,\n      timescale = _attributes$timescale === undefined ? 1 : _attributes$timescale,\n      _attributes$start = attributes.start,\n      start = _attributes$start === undefined ? 0 : _attributes$start,\n      _attributes$minimumUp = attributes.minimumUpdatePeriod,\n      minimumUpdatePeriod = _attributes$minimumUp === undefined ? 0 : _attributes$minimumUp;\n\n  var now = (NOW + clientOffset) / 1000;\n  var periodStartWC = availabilityStartTime + start;\n  var periodEndWC = now + minimumUpdatePeriod;\n  var periodDuration = periodEndWC - periodStartWC;\n\n  return Math.ceil((periodDuration * timescale - time) / duration);\n};\n\n/**\n * Uses information provided by SegmentTemplate.SegmentTimeline to determine segment\n * timing and duration\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */\nvar parseByTimeline = function parseByTimeline(attributes, segmentTimeline) {\n  var _attributes$type = attributes.type,\n      type = _attributes$type === undefined ? 'static' : _attributes$type,\n      _attributes$minimumUp2 = attributes.minimumUpdatePeriod,\n      minimumUpdatePeriod = _attributes$minimumUp2 === undefined ? 0 : _attributes$minimumUp2,\n      _attributes$media = attributes.media,\n      media = _attributes$media === undefined ? '' : _attributes$media,\n      sourceDuration = attributes.sourceDuration,\n      _attributes$timescale2 = attributes.timescale,\n      timescale = _attributes$timescale2 === undefined ? 1 : _attributes$timescale2,\n      _attributes$startNumb = attributes.startNumber,\n      startNumber = _attributes$startNumb === undefined ? 1 : _attributes$startNumb,\n      timeline = attributes.periodIndex;\n\n  var segments = [];\n  var time = -1;\n\n  for (var sIndex = 0; sIndex < segmentTimeline.length; sIndex++) {\n    var S = segmentTimeline[sIndex];\n    var duration = S.d;\n    var repeat = S.r || 0;\n    var segmentTime = S.t || 0;\n\n    if (time < 0) {\n      // first segment\n      time = segmentTime;\n    }\n\n    if (segmentTime && segmentTime > time) {\n      // discontinuity\n\n      // TODO: How to handle this type of discontinuity\n      // timeline++ here would treat it like HLS discontuity and content would\n      // get appended without gap\n      // E.G.\n      //  <S t=\"0\" d=\"1\" />\n      //  <S d=\"1\" />\n      //  <S d=\"1\" />\n      //  <S t=\"5\" d=\"1\" />\n      // would have $Time$ values of [0, 1, 2, 5]\n      // should this be appened at time positions [0, 1, 2, 3],(#EXT-X-DISCONTINUITY)\n      // or [0, 1, 2, gap, gap, 5]? (#EXT-X-GAP)\n      // does the value of sourceDuration consider this when calculating arbitrary\n      // negative @r repeat value?\n      // E.G. Same elements as above with this added at the end\n      //  <S d=\"1\" r=\"-1\" />\n      //  with a sourceDuration of 10\n      // Would the 2 gaps be included in the time duration calculations resulting in\n      // 8 segments with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9] or 10 segments\n      // with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9, 10, 11] ?\n\n      time = segmentTime;\n    }\n\n    var count = void 0;\n\n    if (repeat < 0) {\n      var nextS = sIndex + 1;\n\n      if (nextS === segmentTimeline.length) {\n        // last segment\n        if (type === 'dynamic' && minimumUpdatePeriod > 0 && media.indexOf('$Number$') > 0) {\n          count = getLiveRValue(attributes, time, duration);\n        } else {\n          // TODO: This may be incorrect depending on conclusion of TODO above\n          count = (sourceDuration * timescale - time) / duration;\n        }\n      } else {\n        count = (segmentTimeline[nextS].t - time) / duration;\n      }\n    } else {\n      count = repeat + 1;\n    }\n\n    var end = startNumber + segments.length + count;\n    var number = startNumber + segments.length;\n\n    while (number < end) {\n      segments.push({ number: number, duration: duration / timescale, time: time, timeline: timeline });\n      time += duration;\n      number++;\n    }\n  }\n\n  return segments;\n};\n\nvar range = function range(start, end) {\n  var result = [];\n\n  for (var i = start; i < end; i++) {\n    result.push(i);\n  }\n\n  return result;\n};\n\nvar flatten = function flatten(lists) {\n  return lists.reduce(function (x, y) {\n    return x.concat(y);\n  }, []);\n};\n\nvar from = function from(list) {\n  if (!list.length) {\n    return [];\n  }\n\n  var result = [];\n\n  for (var i = 0; i < list.length; i++) {\n    result.push(list[i]);\n  }\n\n  return result;\n};\n\n/**\n * Functions for calculating the range of available segments in static and dynamic\n * manifests.\n */\nvar segmentRange = {\n  /**\n   * Returns the entire range of available segments for a static MPD\n   *\n   * @param {Object} attributes\n   *        Inheritied MPD attributes\n   * @return {{ start: number, end: number }}\n   *         The start and end numbers for available segments\n   */\n  'static': function _static(attributes) {\n    var duration = attributes.duration,\n        _attributes$timescale = attributes.timescale,\n        timescale = _attributes$timescale === undefined ? 1 : _attributes$timescale,\n        sourceDuration = attributes.sourceDuration;\n\n\n    return {\n      start: 0,\n      end: Math.ceil(sourceDuration / (duration / timescale))\n    };\n  },\n\n\n  /**\n   * Returns the current live window range of available segments for a dynamic MPD\n   *\n   * @param {Object} attributes\n   *        Inheritied MPD attributes\n   * @return {{ start: number, end: number }}\n   *         The start and end numbers for available segments\n   */\n  dynamic: function dynamic(attributes) {\n    var NOW = attributes.NOW,\n        clientOffset = attributes.clientOffset,\n        availabilityStartTime = attributes.availabilityStartTime,\n        _attributes$timescale2 = attributes.timescale,\n        timescale = _attributes$timescale2 === undefined ? 1 : _attributes$timescale2,\n        duration = attributes.duration,\n        _attributes$start = attributes.start,\n        start = _attributes$start === undefined ? 0 : _attributes$start,\n        _attributes$minimumUp = attributes.minimumUpdatePeriod,\n        minimumUpdatePeriod = _attributes$minimumUp === undefined ? 0 : _attributes$minimumUp,\n        _attributes$timeShift = attributes.timeShiftBufferDepth,\n        timeShiftBufferDepth = _attributes$timeShift === undefined ? Infinity : _attributes$timeShift;\n\n    var now = (NOW + clientOffset) / 1000;\n    var periodStartWC = availabilityStartTime + start;\n    var periodEndWC = now + minimumUpdatePeriod;\n    var periodDuration = periodEndWC - periodStartWC;\n    var segmentCount = Math.ceil(periodDuration * timescale / duration);\n    var availableStart = Math.floor((now - periodStartWC - timeShiftBufferDepth) * timescale / duration);\n    var availableEnd = Math.floor((now - periodStartWC) * timescale / duration);\n\n    return {\n      start: Math.max(0, availableStart),\n      end: Math.min(segmentCount, availableEnd)\n    };\n  }\n};\n\n/**\n * Maps a range of numbers to objects with information needed to build the corresponding\n * segment list\n *\n * @name toSegmentsCallback\n * @function\n * @param {number} number\n *        Number of the segment\n * @param {number} index\n *        Index of the number in the range list\n * @return {{ number: Number, duration: Number, timeline: Number, time: Number }}\n *         Object with segment timing and duration info\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping a range of numbers to\n * information needed to build the segment list.\n *\n * @param {Object} attributes\n *        Inherited MPD attributes\n * @return {toSegmentsCallback}\n *         Callback map function\n */\nvar toSegments = function toSegments(attributes) {\n  return function (number, index) {\n    var duration = attributes.duration,\n        _attributes$timescale3 = attributes.timescale,\n        timescale = _attributes$timescale3 === undefined ? 1 : _attributes$timescale3,\n        periodIndex = attributes.periodIndex,\n        _attributes$startNumb = attributes.startNumber,\n        startNumber = _attributes$startNumb === undefined ? 1 : _attributes$startNumb;\n\n\n    return {\n      number: startNumber + number,\n      duration: duration / timescale,\n      timeline: periodIndex,\n      time: index * duration\n    };\n  };\n};\n\n/**\n * Returns a list of objects containing segment timing and duration info used for\n * building the list of segments. This uses the @duration attribute specified\n * in the MPD manifest to derive the range of segments.\n *\n * @param {Object} attributes\n *        Inherited MPD attributes\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */\nvar parseByDuration = function parseByDuration(attributes) {\n  var _attributes$type = attributes.type,\n      type = _attributes$type === undefined ? 'static' : _attributes$type,\n      duration = attributes.duration,\n      _attributes$timescale4 = attributes.timescale,\n      timescale = _attributes$timescale4 === undefined ? 1 : _attributes$timescale4,\n      sourceDuration = attributes.sourceDuration;\n\n  var _segmentRange$type = segmentRange[type](attributes),\n      start = _segmentRange$type.start,\n      end = _segmentRange$type.end;\n\n  var segments = range(start, end).map(toSegments(attributes));\n\n  if (type === 'static') {\n    var index = segments.length - 1;\n\n    // final segment may be less than full segment duration\n    segments[index].duration = sourceDuration - duration / timescale * index;\n  }\n\n  return segments;\n};\n\nvar identifierPattern = /\\$([A-z]*)(?:(%0)([0-9]+)d)?\\$/g;\n\n/**\n * Replaces template identifiers with corresponding values. To be used as the callback\n * for String.prototype.replace\n *\n * @name replaceCallback\n * @function\n * @param {string} match\n *        Entire match of identifier\n * @param {string} identifier\n *        Name of matched identifier\n * @param {string} format\n *        Format tag string. Its presence indicates that padding is expected\n * @param {string} width\n *        Desired length of the replaced value. Values less than this width shall be left\n *        zero padded\n * @return {string}\n *         Replacement for the matched identifier\n */\n\n/**\n * Returns a function to be used as a callback for String.prototype.replace to replace\n * template identifiers\n *\n * @param {Obect} values\n *        Object containing values that shall be used to replace known identifiers\n * @param {number} values.RepresentationID\n *        Value of the Representation@id attribute\n * @param {number} values.Number\n *        Number of the corresponding segment\n * @param {number} values.Bandwidth\n *        Value of the Representation@bandwidth attribute.\n * @param {number} values.Time\n *        Timestamp value of the corresponding segment\n * @return {replaceCallback}\n *         Callback to be used with String.prototype.replace to replace identifiers\n */\nvar identifierReplacement = function identifierReplacement(values) {\n  return function (match, identifier, format, width) {\n    if (match === '$$') {\n      // escape sequence\n      return '$';\n    }\n\n    if (typeof values[identifier] === 'undefined') {\n      return match;\n    }\n\n    var value = '' + values[identifier];\n\n    if (identifier === 'RepresentationID') {\n      // Format tag shall not be present with RepresentationID\n      return value;\n    }\n\n    if (!format) {\n      width = 1;\n    } else {\n      width = parseInt(width, 10);\n    }\n\n    if (value.length >= width) {\n      return value;\n    }\n\n    return '' + new Array(width - value.length + 1).join('0') + value;\n  };\n};\n\n/**\n * Constructs a segment url from a template string\n *\n * @param {string} url\n *        Template string to construct url from\n * @param {Obect} values\n *        Object containing values that shall be used to replace known identifiers\n * @param {number} values.RepresentationID\n *        Value of the Representation@id attribute\n * @param {number} values.Number\n *        Number of the corresponding segment\n * @param {number} values.Bandwidth\n *        Value of the Representation@bandwidth attribute.\n * @param {number} values.Time\n *        Timestamp value of the corresponding segment\n * @return {string}\n *         Segment url with identifiers replaced\n */\nvar constructTemplateUrl = function constructTemplateUrl(url, values) {\n  return url.replace(identifierPattern, identifierReplacement(values));\n};\n\n/**\n * Generates a list of objects containing timing and duration information about each\n * segment needed to generate segment uris and the complete segment object\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */\nvar parseTemplateInfo = function parseTemplateInfo(attributes, segmentTimeline) {\n  if (!attributes.duration && !segmentTimeline) {\n    // if neither @duration or SegmentTimeline are present, then there shall be exactly\n    // one media segment\n    return [{\n      number: attributes.startNumber || 1,\n      duration: attributes.sourceDuration,\n      time: 0,\n      timeline: attributes.periodIndex\n    }];\n  }\n\n  if (attributes.duration) {\n    return parseByDuration(attributes);\n  }\n\n  return parseByTimeline(attributes, segmentTimeline);\n};\n\n/**\n * Generates a list of segments using information provided by the SegmentTemplate element\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {Object[]}\n *         List of segment objects\n */\nvar segmentsFromTemplate = function segmentsFromTemplate(attributes, segmentTimeline) {\n  var templateValues = {\n    RepresentationID: attributes.id,\n    Bandwidth: attributes.bandwidth || 0\n  };\n\n  var _attributes$initializ = attributes.initialization,\n      initialization = _attributes$initializ === undefined ? { sourceURL: '', range: '' } : _attributes$initializ;\n\n\n  var mapSegment = urlTypeToSegment({\n    baseUrl: attributes.baseUrl,\n    source: constructTemplateUrl(initialization.sourceURL, templateValues),\n    range: initialization.range\n  });\n\n  var segments = parseTemplateInfo(attributes, segmentTimeline);\n\n  return segments.map(function (segment) {\n    templateValues.Number = segment.number;\n    templateValues.Time = segment.time;\n\n    var uri = constructTemplateUrl(attributes.media || '', templateValues);\n\n    return {\n      uri: uri,\n      timeline: segment.timeline,\n      duration: segment.duration,\n      resolvedUri: resolveUrl(attributes.baseUrl || '', uri),\n      map: mapSegment,\n      number: segment.number\n    };\n  });\n};\n\nvar errors = {\n  INVALID_NUMBER_OF_PERIOD: 'INVALID_NUMBER_OF_PERIOD',\n  DASH_EMPTY_MANIFEST: 'DASH_EMPTY_MANIFEST',\n  DASH_INVALID_XML: 'DASH_INVALID_XML',\n  NO_BASE_URL: 'NO_BASE_URL',\n  MISSING_SEGMENT_INFORMATION: 'MISSING_SEGMENT_INFORMATION',\n  SEGMENT_TIME_UNSPECIFIED: 'SEGMENT_TIME_UNSPECIFIED',\n  UNSUPPORTED_UTC_TIMING_SCHEME: 'UNSUPPORTED_UTC_TIMING_SCHEME'\n};\n\n/**\n * Converts a <SegmentUrl> (of type URLType from the DASH spec 5.3.9.2 Table 14)\n * to an object that matches the output of a segment in videojs/mpd-parser\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @param {Object} segmentUrl\n *   <SegmentURL> node to translate into a segment object\n * @return {Object} translated segment object\n */\nvar SegmentURLToSegmentObject = function SegmentURLToSegmentObject(attributes, segmentUrl) {\n  var baseUrl = attributes.baseUrl,\n      _attributes$initializ = attributes.initialization,\n      initialization = _attributes$initializ === undefined ? {} : _attributes$initializ;\n\n\n  var initSegment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: initialization.sourceURL,\n    range: initialization.range\n  });\n\n  var segment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: segmentUrl.media,\n    range: segmentUrl.mediaRange\n  });\n\n  segment.map = initSegment;\n\n  return segment;\n};\n\n/**\n * Generates a list of segments using information provided by the SegmentList element\n * SegmentList (DASH SPEC Section 5.3.9.3.2) contains a set of <SegmentURL> nodes.  Each\n * node should be translated into segment.\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {Object.<Array>} list of segments\n */\nvar segmentsFromList = function segmentsFromList(attributes, segmentTimeline) {\n  var duration = attributes.duration,\n      _attributes$segmentUr = attributes.segmentUrls,\n      segmentUrls = _attributes$segmentUr === undefined ? [] : _attributes$segmentUr;\n\n  // Per spec (5.3.9.2.1) no way to determine segment duration OR\n  // if both SegmentTimeline and @duration are defined, it is outside of spec.\n\n  if (!duration && !segmentTimeline || duration && segmentTimeline) {\n    throw new Error(errors.SEGMENT_TIME_UNSPECIFIED);\n  }\n\n  var segmentUrlMap = segmentUrls.map(function (segmentUrlObject) {\n    return SegmentURLToSegmentObject(attributes, segmentUrlObject);\n  });\n  var segmentTimeInfo = void 0;\n\n  if (duration) {\n    segmentTimeInfo = parseByDuration(attributes);\n  }\n\n  if (segmentTimeline) {\n    segmentTimeInfo = parseByTimeline(attributes, segmentTimeline);\n  }\n\n  var segments = segmentTimeInfo.map(function (segmentTime, index) {\n    if (segmentUrlMap[index]) {\n      var segment = segmentUrlMap[index];\n\n      segment.timeline = segmentTime.timeline;\n      segment.duration = segmentTime.duration;\n      segment.number = segmentTime.number;\n      return segment;\n    }\n    // Since we're mapping we should get rid of any blank segments (in case\n    // the given SegmentTimeline is handling for more elements than we have\n    // SegmentURLs for).\n  }).filter(function (segment) {\n    return segment;\n  });\n\n  return segments;\n};\n\n/**\n * Translates SegmentBase into a set of segments.\n * (DASH SPEC Section 5.3.9.3.2) contains a set of <SegmentURL> nodes.  Each\n * node should be translated into segment.\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @return {Object.<Array>} list of segments\n */\nvar segmentsFromBase = function segmentsFromBase(attributes) {\n  var baseUrl = attributes.baseUrl,\n      _attributes$initializ = attributes.initialization,\n      initialization = _attributes$initializ === undefined ? {} : _attributes$initializ,\n      sourceDuration = attributes.sourceDuration,\n      _attributes$timescale = attributes.timescale,\n      timescale = _attributes$timescale === undefined ? 1 : _attributes$timescale,\n      _attributes$indexRang = attributes.indexRange,\n      indexRange = _attributes$indexRang === undefined ? '' : _attributes$indexRang,\n      duration = attributes.duration;\n\n  // base url is required for SegmentBase to work, per spec (Section 5.3.9.2.1)\n\n  if (!baseUrl) {\n    throw new Error(errors.NO_BASE_URL);\n  }\n\n  var initSegment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: initialization.sourceURL,\n    range: initialization.range\n  });\n  var segment = urlTypeToSegment({ baseUrl: baseUrl, source: baseUrl, range: indexRange });\n\n  segment.map = initSegment;\n\n  // If there is a duration, use it, otherwise use the given duration of the source\n  // (since SegmentBase is only for one total segment)\n  if (duration) {\n    var segmentTimeInfo = parseByDuration(attributes);\n\n    if (segmentTimeInfo.length) {\n      segment.duration = segmentTimeInfo[0].duration;\n      segment.timeline = segmentTimeInfo[0].timeline;\n    }\n  } else if (sourceDuration) {\n    segment.duration = sourceDuration / timescale;\n    segment.timeline = 0;\n  }\n\n  // This is used for mediaSequence\n  segment.number = 0;\n\n  return [segment];\n};\n\nvar generateSegments = function generateSegments(_ref) {\n  var attributes = _ref.attributes,\n      segmentInfo = _ref.segmentInfo;\n\n  var segmentAttributes = void 0;\n  var segmentsFn = void 0;\n\n  if (segmentInfo.template) {\n    segmentsFn = segmentsFromTemplate;\n    segmentAttributes = merge(attributes, segmentInfo.template);\n  } else if (segmentInfo.base) {\n    segmentsFn = segmentsFromBase;\n    segmentAttributes = merge(attributes, segmentInfo.base);\n  } else if (segmentInfo.list) {\n    segmentsFn = segmentsFromList;\n    segmentAttributes = merge(attributes, segmentInfo.list);\n  }\n\n  if (!segmentsFn) {\n    return { attributes: attributes };\n  }\n\n  var segments = segmentsFn(segmentAttributes, segmentInfo.timeline);\n\n  // The @duration attribute will be used to determin the playlist's targetDuration which\n  // must be in seconds. Since we've generated the segment list, we no longer need\n  // @duration to be in @timescale units, so we can convert it here.\n  if (segmentAttributes.duration) {\n    var _segmentAttributes = segmentAttributes,\n        duration = _segmentAttributes.duration,\n        _segmentAttributes$ti = _segmentAttributes.timescale,\n        timescale = _segmentAttributes$ti === undefined ? 1 : _segmentAttributes$ti;\n\n\n    segmentAttributes.duration = duration / timescale;\n  } else if (segments.length) {\n    // if there is no @duration attribute, use the largest segment duration as\n    // as target duration\n    segmentAttributes.duration = segments.reduce(function (max, segment) {\n      return Math.max(max, Math.ceil(segment.duration));\n    }, 0);\n  } else {\n    segmentAttributes.duration = 0;\n  }\n\n  return {\n    attributes: segmentAttributes,\n    segments: segments\n  };\n};\n\nvar toPlaylists = function toPlaylists(representations) {\n  return representations.map(generateSegments);\n};\n\nvar findChildren = function findChildren(element, name) {\n  return from(element.childNodes).filter(function (_ref) {\n    var tagName = _ref.tagName;\n    return tagName === name;\n  });\n};\n\nvar getContent = function getContent(element) {\n  return element.textContent.trim();\n};\n\nvar parseDuration = function parseDuration(str) {\n  var SECONDS_IN_YEAR = 365 * 24 * 60 * 60;\n  var SECONDS_IN_MONTH = 30 * 24 * 60 * 60;\n  var SECONDS_IN_DAY = 24 * 60 * 60;\n  var SECONDS_IN_HOUR = 60 * 60;\n  var SECONDS_IN_MIN = 60;\n\n  // P10Y10M10DT10H10M10.1S\n  var durationRegex = /P(?:(\\d*)Y)?(?:(\\d*)M)?(?:(\\d*)D)?(?:T(?:(\\d*)H)?(?:(\\d*)M)?(?:([\\d.]*)S)?)?/;\n  var match = durationRegex.exec(str);\n\n  if (!match) {\n    return 0;\n  }\n\n  var _match$slice = match.slice(1),\n      year = _match$slice[0],\n      month = _match$slice[1],\n      day = _match$slice[2],\n      hour = _match$slice[3],\n      minute = _match$slice[4],\n      second = _match$slice[5];\n\n  return parseFloat(year || 0) * SECONDS_IN_YEAR + parseFloat(month || 0) * SECONDS_IN_MONTH + parseFloat(day || 0) * SECONDS_IN_DAY + parseFloat(hour || 0) * SECONDS_IN_HOUR + parseFloat(minute || 0) * SECONDS_IN_MIN + parseFloat(second || 0);\n};\n\nvar parseDate = function parseDate(str) {\n  // Date format without timezone according to ISO 8601\n  // YYY-MM-DDThh:mm:ss.ssssss\n  var dateRegex = /^\\d+-\\d+-\\d+T\\d+:\\d+:\\d+(\\.\\d+)?$/;\n\n  // If the date string does not specifiy a timezone, we must specifiy UTC. This is\n  // expressed by ending with 'Z'\n  if (dateRegex.test(str)) {\n    str += 'Z';\n  }\n\n  return Date.parse(str);\n};\n\n// TODO: maybe order these in some way that makes it easy to find specific attributes\nvar parsers = {\n  /**\n   * Specifies the duration of the entire Media Presentation. Format is a duration string\n   * as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  mediaPresentationDuration: function mediaPresentationDuration(value) {\n    return parseDuration(value);\n  },\n\n\n  /**\n   * Specifies the Segment availability start time for all Segments referred to in this\n   * MPD. For a dynamic manifest, it specifies the anchor for the earliest availability\n   * time. Format is a date string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The date as seconds from unix epoch\n   */\n  availabilityStartTime: function availabilityStartTime(value) {\n    return parseDate(value) / 1000;\n  },\n\n\n  /**\n   * Specifies the smallest period between potential changes to the MPD. Format is a\n   * duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  minimumUpdatePeriod: function minimumUpdatePeriod(value) {\n    return parseDuration(value);\n  },\n\n\n  /**\n   * Specifies the duration of the smallest time shifting buffer for any Representation\n   * in the MPD. Format is a duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  timeShiftBufferDepth: function timeShiftBufferDepth(value) {\n    return parseDuration(value);\n  },\n\n\n  /**\n   * Specifies the PeriodStart time of the Period relative to the availabilityStarttime.\n   * Format is a duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  start: function start(value) {\n    return parseDuration(value);\n  },\n\n\n  /**\n   * Specifies the width of the visual presentation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed width\n   */\n  width: function width(value) {\n    return parseInt(value, 10);\n  },\n\n\n  /**\n   * Specifies the height of the visual presentation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed height\n   */\n  height: function height(value) {\n    return parseInt(value, 10);\n  },\n\n\n  /**\n   * Specifies the bitrate of the representation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed bandwidth\n   */\n  bandwidth: function bandwidth(value) {\n    return parseInt(value, 10);\n  },\n\n\n  /**\n   * Specifies the number of the first Media Segment in this Representation in the Period\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed number\n   */\n  startNumber: function startNumber(value) {\n    return parseInt(value, 10);\n  },\n\n\n  /**\n   * Specifies the timescale in units per seconds\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The aprsed timescale\n   */\n  timescale: function timescale(value) {\n    return parseInt(value, 10);\n  },\n\n\n  /**\n   * Specifies the constant approximate Segment duration\n   * NOTE: The <Period> element also contains an @duration attribute. This duration\n   *       specifies the duration of the Period. This attribute is currently not\n   *       supported by the rest of the parser, however we still check for it to prevent\n   *       errors.\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed duration\n   */\n  duration: function duration(value) {\n    var parsedValue = parseInt(value, 10);\n\n    if (isNaN(parsedValue)) {\n      return parseDuration(value);\n    }\n\n    return parsedValue;\n  },\n\n\n  /**\n   * Specifies the Segment duration, in units of the value of the @timescale.\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed duration\n   */\n  d: function d(value) {\n    return parseInt(value, 10);\n  },\n\n\n  /**\n   * Specifies the MPD start time, in @timescale units, the first Segment in the series\n   * starts relative to the beginning of the Period\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed time\n   */\n  t: function t(value) {\n    return parseInt(value, 10);\n  },\n\n\n  /**\n   * Specifies the repeat count of the number of following contiguous Segments with the\n   * same duration expressed by the value of @d\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed number\n   */\n  r: function r(value) {\n    return parseInt(value, 10);\n  },\n\n\n  /**\n   * Default parser for all other attributes. Acts as a no-op and just returns the value\n   * as a string\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {string}\n   *         Unparsed value\n   */\n  DEFAULT: function DEFAULT(value) {\n    return value;\n  }\n};\n\n/**\n * Gets all the attributes and values of the provided node, parses attributes with known\n * types, and returns an object with attribute names mapped to values.\n *\n * @param {Node} el\n *        The node to parse attributes from\n * @return {Object}\n *         Object with all attributes of el parsed\n */\nvar parseAttributes = function parseAttributes(el) {\n  if (!(el && el.attributes)) {\n    return {};\n  }\n\n  return from(el.attributes).reduce(function (a, e) {\n    var parseFn = parsers[e.name] || parsers.DEFAULT;\n\n    a[e.name] = parseFn(e.value);\n\n    return a;\n  }, {});\n};\n\nfunction decodeB64ToUint8Array(b64Text) {\n  var decodedString = window.atob(b64Text);\n  var array = new Uint8Array(decodedString.length);\n\n  for (var i = 0; i < decodedString.length; i++) {\n    array[i] = decodedString.charCodeAt(i);\n  }\n  return array;\n}\n\nvar keySystemsMap = {\n  'urn:uuid:1077efec-c0b2-4d02-ace3-3c1e52e2fb4b': 'org.w3.clearkey',\n  'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed': 'com.widevine.alpha',\n  'urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95': 'com.microsoft.playready',\n  'urn:uuid:f239e769-efa3-4850-9c16-a903c6932efb': 'com.adobe.primetime'\n};\n\n/**\n * Builds a list of urls that is the product of the reference urls and BaseURL values\n *\n * @param {string[]} referenceUrls\n *        List of reference urls to resolve to\n * @param {Node[]} baseUrlElements\n *        List of BaseURL nodes from the mpd\n * @return {string[]}\n *         List of resolved urls\n */\nvar buildBaseUrls = function buildBaseUrls(referenceUrls, baseUrlElements) {\n  if (!baseUrlElements.length) {\n    return referenceUrls;\n  }\n\n  return flatten(referenceUrls.map(function (reference) {\n    return baseUrlElements.map(function (baseUrlElement) {\n      return resolveUrl(reference, getContent(baseUrlElement));\n    });\n  }));\n};\n\n/**\n * Contains all Segment information for its containing AdaptationSet\n *\n * @typedef {Object} SegmentInformation\n * @property {Object|undefined} template\n *           Contains the attributes for the SegmentTemplate node\n * @property {Object[]|undefined} timeline\n *           Contains a list of atrributes for each S node within the SegmentTimeline node\n * @property {Object|undefined} list\n *           Contains the attributes for the SegmentList node\n * @property {Object|undefined} base\n *           Contains the attributes for the SegmentBase node\n */\n\n/**\n * Returns all available Segment information contained within the AdaptationSet node\n *\n * @param {Node} adaptationSet\n *        The AdaptationSet node to get Segment information from\n * @return {SegmentInformation}\n *         The Segment information contained within the provided AdaptationSet\n */\nvar getSegmentInformation = function getSegmentInformation(adaptationSet) {\n  var segmentTemplate = findChildren(adaptationSet, 'SegmentTemplate')[0];\n  var segmentList = findChildren(adaptationSet, 'SegmentList')[0];\n  var segmentUrls = segmentList && findChildren(segmentList, 'SegmentURL').map(function (s) {\n    return merge({ tag: 'SegmentURL' }, parseAttributes(s));\n  });\n  var segmentBase = findChildren(adaptationSet, 'SegmentBase')[0];\n  var segmentTimelineParentNode = segmentList || segmentTemplate;\n  var segmentTimeline = segmentTimelineParentNode && findChildren(segmentTimelineParentNode, 'SegmentTimeline')[0];\n  var segmentInitializationParentNode = segmentList || segmentBase || segmentTemplate;\n  var segmentInitialization = segmentInitializationParentNode && findChildren(segmentInitializationParentNode, 'Initialization')[0];\n\n  // SegmentTemplate is handled slightly differently, since it can have both\n  // @initialization and an <Initialization> node.  @initialization can be templated,\n  // while the node can have a url and range specified.  If the <SegmentTemplate> has\n  // both @initialization and an <Initialization> subelement we opt to override with\n  // the node, as this interaction is not defined in the spec.\n  var template = segmentTemplate && parseAttributes(segmentTemplate);\n\n  if (template && segmentInitialization) {\n    template.initialization = segmentInitialization && parseAttributes(segmentInitialization);\n  } else if (template && template.initialization) {\n    // If it is @initialization we convert it to an object since this is the format that\n    // later functions will rely on for the initialization segment.  This is only valid\n    // for <SegmentTemplate>\n    template.initialization = { sourceURL: template.initialization };\n  }\n\n  var segmentInfo = {\n    template: template,\n    timeline: segmentTimeline && findChildren(segmentTimeline, 'S').map(function (s) {\n      return parseAttributes(s);\n    }),\n    list: segmentList && merge(parseAttributes(segmentList), {\n      segmentUrls: segmentUrls,\n      initialization: parseAttributes(segmentInitialization)\n    }),\n    base: segmentBase && merge(parseAttributes(segmentBase), {\n      initialization: parseAttributes(segmentInitialization)\n    })\n  };\n\n  Object.keys(segmentInfo).forEach(function (key) {\n    if (!segmentInfo[key]) {\n      delete segmentInfo[key];\n    }\n  });\n\n  return segmentInfo;\n};\n\n/**\n * Contains Segment information and attributes needed to construct a Playlist object\n * from a Representation\n *\n * @typedef {Object} RepresentationInformation\n * @property {SegmentInformation} segmentInfo\n *           Segment information for this Representation\n * @property {Object} attributes\n *           Inherited attributes for this Representation\n */\n\n/**\n * Maps a Representation node to an object containing Segment information and attributes\n *\n * @name inheritBaseUrlsCallback\n * @function\n * @param {Node} representation\n *        Representation node from the mpd\n * @return {RepresentationInformation}\n *         Representation information needed to construct a Playlist object\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping Representation nodes to\n * Segment information and attributes using inherited BaseURL nodes.\n *\n * @param {Object} adaptationSetAttributes\n *        Contains attributes inherited by the AdaptationSet\n * @param {string[]} adaptationSetBaseUrls\n *        Contains list of resolved base urls inherited by the AdaptationSet\n * @param {SegmentInformation} adaptationSetSegmentInfo\n *        Contains Segment information for the AdaptationSet\n * @return {inheritBaseUrlsCallback}\n *         Callback map function\n */\nvar inheritBaseUrls = function inheritBaseUrls(adaptationSetAttributes, adaptationSetBaseUrls, adaptationSetSegmentInfo) {\n  return function (representation) {\n    var repBaseUrlElements = findChildren(representation, 'BaseURL');\n    var repBaseUrls = buildBaseUrls(adaptationSetBaseUrls, repBaseUrlElements);\n    var attributes = merge(adaptationSetAttributes, parseAttributes(representation));\n    var representationSegmentInfo = getSegmentInformation(representation);\n\n    return repBaseUrls.map(function (baseUrl) {\n      return {\n        segmentInfo: merge(adaptationSetSegmentInfo, representationSegmentInfo),\n        attributes: merge(attributes, { baseUrl: baseUrl })\n      };\n    });\n  };\n};\n\n/**\n * Tranforms a series of content protection nodes to\n * an object containing pssh data by key system\n *\n * @param {Node[]} contentProtectionNodes\n *        Content protection nodes\n * @return {Object}\n *        Object containing pssh data by key system\n */\nvar generateKeySystemInformation = function generateKeySystemInformation(contentProtectionNodes) {\n  return contentProtectionNodes.reduce(function (acc, node) {\n    var attributes = parseAttributes(node);\n    var keySystem = keySystemsMap[attributes.schemeIdUri];\n\n    if (keySystem) {\n      acc[keySystem] = { attributes: attributes };\n\n      var psshNode = findChildren(node, 'cenc:pssh')[0];\n\n      if (psshNode) {\n        var pssh = getContent(psshNode);\n        var psshBuffer = pssh && decodeB64ToUint8Array(pssh);\n\n        acc[keySystem].pssh = psshBuffer;\n      }\n    }\n\n    return acc;\n  }, {});\n};\n\n/**\n * Maps an AdaptationSet node to a list of Representation information objects\n *\n * @name toRepresentationsCallback\n * @function\n * @param {Node} adaptationSet\n *        AdaptationSet node from the mpd\n * @return {RepresentationInformation[]}\n *         List of objects containing Representaion information\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping AdaptationSet nodes to a list of\n * Representation information objects\n *\n * @param {Object} periodAttributes\n *        Contains attributes inherited by the Period\n * @param {string[]} periodBaseUrls\n *        Contains list of resolved base urls inherited by the Period\n * @param {string[]} periodSegmentInfo\n *        Contains Segment Information at the period level\n * @return {toRepresentationsCallback}\n *         Callback map function\n */\nvar toRepresentations = function toRepresentations(periodAttributes, periodBaseUrls, periodSegmentInfo) {\n  return function (adaptationSet) {\n    var adaptationSetAttributes = parseAttributes(adaptationSet);\n    var adaptationSetBaseUrls = buildBaseUrls(periodBaseUrls, findChildren(adaptationSet, 'BaseURL'));\n    var role = findChildren(adaptationSet, 'Role')[0];\n    var roleAttributes = { role: parseAttributes(role) };\n\n    var attrs = merge(periodAttributes, adaptationSetAttributes, roleAttributes);\n\n    var contentProtection = generateKeySystemInformation(findChildren(adaptationSet, 'ContentProtection'));\n\n    if (Object.keys(contentProtection).length) {\n      attrs = merge(attrs, { contentProtection: contentProtection });\n    }\n\n    var segmentInfo = getSegmentInformation(adaptationSet);\n    var representations = findChildren(adaptationSet, 'Representation');\n    var adaptationSetSegmentInfo = merge(periodSegmentInfo, segmentInfo);\n\n    return flatten(representations.map(inheritBaseUrls(attrs, adaptationSetBaseUrls, adaptationSetSegmentInfo)));\n  };\n};\n\n/**\n * Maps an Period node to a list of Representation inforamtion objects for all\n * AdaptationSet nodes contained within the Period\n *\n * @name toAdaptationSetsCallback\n * @function\n * @param {Node} period\n *        Period node from the mpd\n * @param {number} periodIndex\n *        Index of the Period within the mpd\n * @return {RepresentationInformation[]}\n *         List of objects containing Representaion information\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping Period nodes to a list of\n * Representation information objects\n *\n * @param {Object} mpdAttributes\n *        Contains attributes inherited by the mpd\n * @param {string[]} mpdBaseUrls\n *        Contains list of resolved base urls inherited by the mpd\n * @return {toAdaptationSetsCallback}\n *         Callback map function\n */\nvar toAdaptationSets = function toAdaptationSets(mpdAttributes, mpdBaseUrls) {\n  return function (period, periodIndex) {\n    var periodBaseUrls = buildBaseUrls(mpdBaseUrls, findChildren(period, 'BaseURL'));\n    var periodAtt = parseAttributes(period);\n    var periodAttributes = merge(mpdAttributes, periodAtt, { periodIndex: periodIndex });\n    var adaptationSets = findChildren(period, 'AdaptationSet');\n    var periodSegmentInfo = getSegmentInformation(period);\n\n    return flatten(adaptationSets.map(toRepresentations(periodAttributes, periodBaseUrls, periodSegmentInfo)));\n  };\n};\n\n/**\n * Traverses the mpd xml tree to generate a list of Representation information objects\n * that have inherited attributes from parent nodes\n *\n * @param {Node} mpd\n *        The root node of the mpd\n * @param {Object} options\n *        Available options for inheritAttributes\n * @param {string} options.manifestUri\n *        The uri source of the mpd\n * @param {number} options.NOW\n *        Current time per DASH IOP.  Default is current time in ms since epoch\n * @param {number} options.clientOffset\n *        Client time difference from NOW (in milliseconds)\n * @return {RepresentationInformation[]}\n *         List of objects containing Representation information\n */\nvar inheritAttributes = function inheritAttributes(mpd) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$manifestUri = options.manifestUri,\n      manifestUri = _options$manifestUri === undefined ? '' : _options$manifestUri,\n      _options$NOW = options.NOW,\n      NOW = _options$NOW === undefined ? Date.now() : _options$NOW,\n      _options$clientOffset = options.clientOffset,\n      clientOffset = _options$clientOffset === undefined ? 0 : _options$clientOffset;\n\n  var periods = findChildren(mpd, 'Period');\n\n  if (periods.length !== 1) {\n    // TODO add support for multiperiod\n    throw new Error(errors.INVALID_NUMBER_OF_PERIOD);\n  }\n\n  var mpdAttributes = parseAttributes(mpd);\n  var mpdBaseUrls = buildBaseUrls([manifestUri], findChildren(mpd, 'BaseURL'));\n\n  mpdAttributes.sourceDuration = mpdAttributes.mediaPresentationDuration || 0;\n  mpdAttributes.NOW = NOW;\n  mpdAttributes.clientOffset = clientOffset;\n\n  return flatten(periods.map(toAdaptationSets(mpdAttributes, mpdBaseUrls)));\n};\n\nvar stringToMpdXml = function stringToMpdXml(manifestString) {\n  if (manifestString === '') {\n    throw new Error(errors.DASH_EMPTY_MANIFEST);\n  }\n\n  var parser = new window.DOMParser();\n  var xml = parser.parseFromString(manifestString, 'application/xml');\n  var mpd = xml && xml.documentElement.tagName === 'MPD' ? xml.documentElement : null;\n\n  if (!mpd || mpd && mpd.getElementsByTagName('parsererror').length > 0) {\n    throw new Error(errors.DASH_INVALID_XML);\n  }\n\n  return mpd;\n};\n\n/**\n * Parses the manifest for a UTCTiming node, returning the nodes attributes if found\n *\n * @param {string} mpd\n *        XML string of the MPD manifest\n * @return {Object|null}\n *         Attributes of UTCTiming node specified in the manifest. Null if none found\n */\nvar parseUTCTimingScheme = function parseUTCTimingScheme(mpd) {\n  var UTCTimingNode = findChildren(mpd, 'UTCTiming')[0];\n\n  if (!UTCTimingNode) {\n    return null;\n  }\n\n  var attributes = parseAttributes(UTCTimingNode);\n\n  switch (attributes.schemeIdUri) {\n    case 'urn:mpeg:dash:utc:http-head:2014':\n    case 'urn:mpeg:dash:utc:http-head:2012':\n      attributes.method = 'HEAD';\n      break;\n    case 'urn:mpeg:dash:utc:http-xsdate:2014':\n    case 'urn:mpeg:dash:utc:http-iso:2014':\n    case 'urn:mpeg:dash:utc:http-xsdate:2012':\n    case 'urn:mpeg:dash:utc:http-iso:2012':\n      attributes.method = 'GET';\n      break;\n    case 'urn:mpeg:dash:utc:direct:2014':\n    case 'urn:mpeg:dash:utc:direct:2012':\n      attributes.method = 'DIRECT';\n      attributes.value = Date.parse(attributes.value);\n      break;\n    case 'urn:mpeg:dash:utc:http-ntp:2014':\n    case 'urn:mpeg:dash:utc:ntp:2014':\n    case 'urn:mpeg:dash:utc:sntp:2014':\n    default:\n      throw new Error(errors.UNSUPPORTED_UTC_TIMING_SCHEME);\n  }\n\n  return attributes;\n};\n\nvar VERSION = version;\n\nvar parse = function parse(manifestString, options) {\n  return toM3u8(toPlaylists(inheritAttributes(stringToMpdXml(manifestString), options)));\n};\n\n/**\n * Parses the manifest for a UTCTiming node, returning the nodes attributes if found\n *\n * @param {string} manifestString\n *        XML string of the MPD manifest\n * @return {Object|null}\n *         Attributes of UTCTiming node specified in the manifest. Null if none found\n */\nvar parseUTCTiming = function parseUTCTiming(manifestString) {\n  return parseUTCTimingScheme(stringToMpdXml(manifestString));\n};\n\nexport { VERSION, parse, parseUTCTiming };\n","/*\n * pkcs7.pad\n * https://github.com/brightcove/pkcs7\n *\n * Copyright (c) 2014 Brightcove\n * Licensed under the apache2 license.\n */\n\nvar PADDING = void 0;\n\n/**\n * Returns a new Uint8Array that is padded with PKCS#7 padding.\n * @param plaintext {Uint8Array} the input bytes before encryption\n * @return {Uint8Array} the padded bytes\n * @see http://tools.ietf.org/html/rfc5652\n */\nfunction pad(plaintext) {\n  var padding = PADDING[plaintext.byteLength % 16 || 0];\n  var result = new Uint8Array(plaintext.byteLength + padding.length);\n\n  result.set(plaintext);\n  result.set(padding, plaintext.byteLength);\n\n  return result;\n}\n\n// pre-define the padding values\nPADDING = [[16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16], [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15], [14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14], [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13], [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12], [11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11], [10, 10, 10, 10, 10, 10, 10, 10, 10, 10], [9, 9, 9, 9, 9, 9, 9, 9, 9], [8, 8, 8, 8, 8, 8, 8, 8], [7, 7, 7, 7, 7, 7, 7], [6, 6, 6, 6, 6, 6], [5, 5, 5, 5, 5], [4, 4, 4, 4], [3, 3, 3], [2, 2], [1]];\n\n/**\n * Returns the subarray of a Uint8Array without PKCS#7 padding.\n * @param padded {Uint8Array} unencrypted bytes that have been padded\n * @return {Uint8Array} the unpadded bytes\n * @see http://tools.ietf.org/html/rfc5652\n */\nfunction unpad(padded) {\n  return padded.subarray(0, padded.byteLength - padded[padded.byteLength - 1]);\n}\n\nvar version = \"1.0.2\";\n\nexport { pad, unpad, version as VERSION };\n","import { unpad } from 'pkcs7';\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\n\n\n\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\n\n\n\n\n\n\n\n\n\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\n/**\n * @file aes.js\n *\n * This file contains an adaptation of the AES decryption algorithm\n * from the Standford Javascript Cryptography Library. That work is\n * covered by the following copyright and permissions notice:\n *\n * Copyright 2009-2010 Emily Stark, Mike Hamburg, Dan Boneh.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR\n * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\n * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN\n * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * The views and conclusions contained in the software and documentation\n * are those of the authors and should not be interpreted as representing\n * official policies, either expressed or implied, of the authors.\n */\n\n/**\n * Expand the S-box tables.\n *\n * @private\n */\nvar precompute = function precompute() {\n  var tables = [[[], [], [], [], []], [[], [], [], [], []]];\n  var encTable = tables[0];\n  var decTable = tables[1];\n  var sbox = encTable[4];\n  var sboxInv = decTable[4];\n  var i = void 0;\n  var x = void 0;\n  var xInv = void 0;\n  var d = [];\n  var th = [];\n  var x2 = void 0;\n  var x4 = void 0;\n  var x8 = void 0;\n  var s = void 0;\n  var tEnc = void 0;\n  var tDec = void 0;\n\n  // Compute double and third tables\n  for (i = 0; i < 256; i++) {\n    th[(d[i] = i << 1 ^ (i >> 7) * 283) ^ i] = i;\n  }\n\n  for (x = xInv = 0; !sbox[x]; x ^= x2 || 1, xInv = th[xInv] || 1) {\n    // Compute sbox\n    s = xInv ^ xInv << 1 ^ xInv << 2 ^ xInv << 3 ^ xInv << 4;\n    s = s >> 8 ^ s & 255 ^ 99;\n    sbox[x] = s;\n    sboxInv[s] = x;\n\n    // Compute MixColumns\n    x8 = d[x4 = d[x2 = d[x]]];\n    tDec = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;\n    tEnc = d[s] * 0x101 ^ s * 0x1010100;\n\n    for (i = 0; i < 4; i++) {\n      encTable[i][x] = tEnc = tEnc << 24 ^ tEnc >>> 8;\n      decTable[i][s] = tDec = tDec << 24 ^ tDec >>> 8;\n    }\n  }\n\n  // Compactify. Considerable speedup on Firefox.\n  for (i = 0; i < 5; i++) {\n    encTable[i] = encTable[i].slice(0);\n    decTable[i] = decTable[i].slice(0);\n  }\n  return tables;\n};\nvar aesTables = null;\n\n/**\n * Schedule out an AES key for both encryption and decryption. This\n * is a low-level class. Use a cipher mode to do bulk encryption.\n *\n * @class AES\n * @param key {Array} The key as an array of 4, 6 or 8 words.\n */\n\nvar AES = function () {\n  function AES(key) {\n    classCallCheck(this, AES);\n\n    /**\n     * The expanded S-box and inverse S-box tables. These will be computed\n     * on the client so that we don't have to send them down the wire.\n     *\n     * There are two tables, _tables[0] is for encryption and\n     * _tables[1] is for decryption.\n     *\n     * The first 4 sub-tables are the expanded S-box with MixColumns. The\n     * last (_tables[01][4]) is the S-box itself.\n     *\n     * @private\n     */\n    // if we have yet to precompute the S-box tables\n    // do so now\n    if (!aesTables) {\n      aesTables = precompute();\n    }\n    // then make a copy of that object for use\n    this._tables = [[aesTables[0][0].slice(), aesTables[0][1].slice(), aesTables[0][2].slice(), aesTables[0][3].slice(), aesTables[0][4].slice()], [aesTables[1][0].slice(), aesTables[1][1].slice(), aesTables[1][2].slice(), aesTables[1][3].slice(), aesTables[1][4].slice()]];\n    var i = void 0;\n    var j = void 0;\n    var tmp = void 0;\n    var encKey = void 0;\n    var decKey = void 0;\n    var sbox = this._tables[0][4];\n    var decTable = this._tables[1];\n    var keyLen = key.length;\n    var rcon = 1;\n\n    if (keyLen !== 4 && keyLen !== 6 && keyLen !== 8) {\n      throw new Error('Invalid aes key size');\n    }\n\n    encKey = key.slice(0);\n    decKey = [];\n    this._key = [encKey, decKey];\n\n    // schedule encryption keys\n    for (i = keyLen; i < 4 * keyLen + 28; i++) {\n      tmp = encKey[i - 1];\n\n      // apply sbox\n      if (i % keyLen === 0 || keyLen === 8 && i % keyLen === 4) {\n        tmp = sbox[tmp >>> 24] << 24 ^ sbox[tmp >> 16 & 255] << 16 ^ sbox[tmp >> 8 & 255] << 8 ^ sbox[tmp & 255];\n\n        // shift rows and add rcon\n        if (i % keyLen === 0) {\n          tmp = tmp << 8 ^ tmp >>> 24 ^ rcon << 24;\n          rcon = rcon << 1 ^ (rcon >> 7) * 283;\n        }\n      }\n\n      encKey[i] = encKey[i - keyLen] ^ tmp;\n    }\n\n    // schedule decryption keys\n    for (j = 0; i; j++, i--) {\n      tmp = encKey[j & 3 ? i : i - 4];\n      if (i <= 4 || j < 4) {\n        decKey[j] = tmp;\n      } else {\n        decKey[j] = decTable[0][sbox[tmp >>> 24]] ^ decTable[1][sbox[tmp >> 16 & 255]] ^ decTable[2][sbox[tmp >> 8 & 255]] ^ decTable[3][sbox[tmp & 255]];\n      }\n    }\n  }\n\n  /**\n   * Decrypt 16 bytes, specified as four 32-bit words.\n   *\n   * @param {Number} encrypted0 the first word to decrypt\n   * @param {Number} encrypted1 the second word to decrypt\n   * @param {Number} encrypted2 the third word to decrypt\n   * @param {Number} encrypted3 the fourth word to decrypt\n   * @param {Int32Array} out the array to write the decrypted words\n   * into\n   * @param {Number} offset the offset into the output array to start\n   * writing results\n   * @return {Array} The plaintext.\n   */\n\n\n  AES.prototype.decrypt = function decrypt(encrypted0, encrypted1, encrypted2, encrypted3, out, offset) {\n    var key = this._key[1];\n    // state variables a,b,c,d are loaded with pre-whitened data\n    var a = encrypted0 ^ key[0];\n    var b = encrypted3 ^ key[1];\n    var c = encrypted2 ^ key[2];\n    var d = encrypted1 ^ key[3];\n    var a2 = void 0;\n    var b2 = void 0;\n    var c2 = void 0;\n\n    // key.length === 2 ?\n    var nInnerRounds = key.length / 4 - 2;\n    var i = void 0;\n    var kIndex = 4;\n    var table = this._tables[1];\n\n    // load up the tables\n    var table0 = table[0];\n    var table1 = table[1];\n    var table2 = table[2];\n    var table3 = table[3];\n    var sbox = table[4];\n\n    // Inner rounds. Cribbed from OpenSSL.\n    for (i = 0; i < nInnerRounds; i++) {\n      a2 = table0[a >>> 24] ^ table1[b >> 16 & 255] ^ table2[c >> 8 & 255] ^ table3[d & 255] ^ key[kIndex];\n      b2 = table0[b >>> 24] ^ table1[c >> 16 & 255] ^ table2[d >> 8 & 255] ^ table3[a & 255] ^ key[kIndex + 1];\n      c2 = table0[c >>> 24] ^ table1[d >> 16 & 255] ^ table2[a >> 8 & 255] ^ table3[b & 255] ^ key[kIndex + 2];\n      d = table0[d >>> 24] ^ table1[a >> 16 & 255] ^ table2[b >> 8 & 255] ^ table3[c & 255] ^ key[kIndex + 3];\n      kIndex += 4;\n      a = a2;b = b2;c = c2;\n    }\n\n    // Last round.\n    for (i = 0; i < 4; i++) {\n      out[(3 & -i) + offset] = sbox[a >>> 24] << 24 ^ sbox[b >> 16 & 255] << 16 ^ sbox[c >> 8 & 255] << 8 ^ sbox[d & 255] ^ key[kIndex++];\n      a2 = a;a = b;b = c;c = d;d = a2;\n    }\n  };\n\n  return AES;\n}();\n\n/**\n * @file stream.js\n */\n/**\n * A lightweight readable stream implemention that handles event dispatching.\n *\n * @class Stream\n */\nvar Stream = function () {\n  function Stream() {\n    classCallCheck(this, Stream);\n\n    this.listeners = {};\n  }\n\n  /**\n   * Add a listener for a specified event type.\n   *\n   * @param {String} type the event name\n   * @param {Function} listener the callback to be invoked when an event of\n   * the specified type occurs\n   */\n\n\n  Stream.prototype.on = function on(type, listener) {\n    if (!this.listeners[type]) {\n      this.listeners[type] = [];\n    }\n    this.listeners[type].push(listener);\n  };\n\n  /**\n   * Remove a listener for a specified event type.\n   *\n   * @param {String} type the event name\n   * @param {Function} listener  a function previously registered for this\n   * type of event through `on`\n   * @return {Boolean} if we could turn it off or not\n   */\n\n\n  Stream.prototype.off = function off(type, listener) {\n    if (!this.listeners[type]) {\n      return false;\n    }\n\n    var index = this.listeners[type].indexOf(listener);\n\n    this.listeners[type].splice(index, 1);\n    return index > -1;\n  };\n\n  /**\n   * Trigger an event of the specified type on this stream. Any additional\n   * arguments to this function are passed as parameters to event listeners.\n   *\n   * @param {String} type the event name\n   */\n\n\n  Stream.prototype.trigger = function trigger(type) {\n    var callbacks = this.listeners[type];\n\n    if (!callbacks) {\n      return;\n    }\n\n    // Slicing the arguments on every invocation of this method\n    // can add a significant amount of overhead. Avoid the\n    // intermediate object creation for the common case of a\n    // single callback argument\n    if (arguments.length === 2) {\n      var length = callbacks.length;\n\n      for (var i = 0; i < length; ++i) {\n        callbacks[i].call(this, arguments[1]);\n      }\n    } else {\n      var args = Array.prototype.slice.call(arguments, 1);\n      var _length = callbacks.length;\n\n      for (var _i = 0; _i < _length; ++_i) {\n        callbacks[_i].apply(this, args);\n      }\n    }\n  };\n\n  /**\n   * Destroys the stream and cleans up.\n   */\n\n\n  Stream.prototype.dispose = function dispose() {\n    this.listeners = {};\n  };\n  /**\n   * Forwards all `data` events on this stream to the destination stream. The\n   * destination stream should provide a method `push` to receive the data\n   * events as they arrive.\n   *\n   * @param {Stream} destination the stream that will receive all `data` events\n   * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n   */\n\n\n  Stream.prototype.pipe = function pipe(destination) {\n    this.on('data', function (data) {\n      destination.push(data);\n    });\n  };\n\n  return Stream;\n}();\n\n/**\n * @file async-stream.js\n */\n/**\n * A wrapper around the Stream class to use setTiemout\n * and run stream \"jobs\" Asynchronously\n *\n * @class AsyncStream\n * @extends Stream\n */\n\nvar AsyncStream = function (_Stream) {\n  inherits(AsyncStream, _Stream);\n\n  function AsyncStream() {\n    classCallCheck(this, AsyncStream);\n\n    var _this = possibleConstructorReturn(this, _Stream.call(this, Stream));\n\n    _this.jobs = [];\n    _this.delay = 1;\n    _this.timeout_ = null;\n    return _this;\n  }\n\n  /**\n   * process an async job\n   *\n   * @private\n   */\n\n\n  AsyncStream.prototype.processJob_ = function processJob_() {\n    this.jobs.shift()();\n    if (this.jobs.length) {\n      this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);\n    } else {\n      this.timeout_ = null;\n    }\n  };\n\n  /**\n   * push a job into the stream\n   *\n   * @param {Function} job the job to push into the stream\n   */\n\n\n  AsyncStream.prototype.push = function push(job) {\n    this.jobs.push(job);\n    if (!this.timeout_) {\n      this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);\n    }\n  };\n\n  return AsyncStream;\n}(Stream);\n\n/**\n * @file decrypter.js\n *\n * An asynchronous implementation of AES-128 CBC decryption with\n * PKCS#7 padding.\n */\n\n/**\n * Convert network-order (big-endian) bytes into their little-endian\n * representation.\n */\nvar ntoh = function ntoh(word) {\n  return word << 24 | (word & 0xff00) << 8 | (word & 0xff0000) >> 8 | word >>> 24;\n};\n\n/**\n * Decrypt bytes using AES-128 with CBC and PKCS#7 padding.\n *\n * @param {Uint8Array} encrypted the encrypted bytes\n * @param {Uint32Array} key the bytes of the decryption key\n * @param {Uint32Array} initVector the initialization vector (IV) to\n * use for the first round of CBC.\n * @return {Uint8Array} the decrypted bytes\n *\n * @see http://en.wikipedia.org/wiki/Advanced_Encryption_Standard\n * @see http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_.28CBC.29\n * @see https://tools.ietf.org/html/rfc2315\n */\nvar decrypt = function decrypt(encrypted, key, initVector) {\n  // word-level access to the encrypted bytes\n  var encrypted32 = new Int32Array(encrypted.buffer, encrypted.byteOffset, encrypted.byteLength >> 2);\n\n  var decipher = new AES(Array.prototype.slice.call(key));\n\n  // byte and word-level access for the decrypted output\n  var decrypted = new Uint8Array(encrypted.byteLength);\n  var decrypted32 = new Int32Array(decrypted.buffer);\n\n  // temporary variables for working with the IV, encrypted, and\n  // decrypted data\n  var init0 = void 0;\n  var init1 = void 0;\n  var init2 = void 0;\n  var init3 = void 0;\n  var encrypted0 = void 0;\n  var encrypted1 = void 0;\n  var encrypted2 = void 0;\n  var encrypted3 = void 0;\n\n  // iteration variable\n  var wordIx = void 0;\n\n  // pull out the words of the IV to ensure we don't modify the\n  // passed-in reference and easier access\n  init0 = initVector[0];\n  init1 = initVector[1];\n  init2 = initVector[2];\n  init3 = initVector[3];\n\n  // decrypt four word sequences, applying cipher-block chaining (CBC)\n  // to each decrypted block\n  for (wordIx = 0; wordIx < encrypted32.length; wordIx += 4) {\n    // convert big-endian (network order) words into little-endian\n    // (javascript order)\n    encrypted0 = ntoh(encrypted32[wordIx]);\n    encrypted1 = ntoh(encrypted32[wordIx + 1]);\n    encrypted2 = ntoh(encrypted32[wordIx + 2]);\n    encrypted3 = ntoh(encrypted32[wordIx + 3]);\n\n    // decrypt the block\n    decipher.decrypt(encrypted0, encrypted1, encrypted2, encrypted3, decrypted32, wordIx);\n\n    // XOR with the IV, and restore network byte-order to obtain the\n    // plaintext\n    decrypted32[wordIx] = ntoh(decrypted32[wordIx] ^ init0);\n    decrypted32[wordIx + 1] = ntoh(decrypted32[wordIx + 1] ^ init1);\n    decrypted32[wordIx + 2] = ntoh(decrypted32[wordIx + 2] ^ init2);\n    decrypted32[wordIx + 3] = ntoh(decrypted32[wordIx + 3] ^ init3);\n\n    // setup the IV for the next round\n    init0 = encrypted0;\n    init1 = encrypted1;\n    init2 = encrypted2;\n    init3 = encrypted3;\n  }\n\n  return decrypted;\n};\n\n/**\n * The `Decrypter` class that manages decryption of AES\n * data through `AsyncStream` objects and the `decrypt`\n * function\n *\n * @param {Uint8Array} encrypted the encrypted bytes\n * @param {Uint32Array} key the bytes of the decryption key\n * @param {Uint32Array} initVector the initialization vector (IV) to\n * @param {Function} done the function to run when done\n * @class Decrypter\n */\n\nvar Decrypter = function () {\n  function Decrypter(encrypted, key, initVector, done) {\n    classCallCheck(this, Decrypter);\n\n    var step = Decrypter.STEP;\n    var encrypted32 = new Int32Array(encrypted.buffer);\n    var decrypted = new Uint8Array(encrypted.byteLength);\n    var i = 0;\n\n    this.asyncStream_ = new AsyncStream();\n\n    // split up the encryption job and do the individual chunks asynchronously\n    this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));\n    for (i = step; i < encrypted32.length; i += step) {\n      initVector = new Uint32Array([ntoh(encrypted32[i - 4]), ntoh(encrypted32[i - 3]), ntoh(encrypted32[i - 2]), ntoh(encrypted32[i - 1])]);\n      this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));\n    }\n    // invoke the done() callback when everything is finished\n    this.asyncStream_.push(function () {\n      // remove pkcs#7 padding from the decrypted bytes\n      done(null, unpad(decrypted));\n    });\n  }\n\n  /**\n   * a getter for step the maximum number of bytes to process at one time\n   *\n   * @return {Number} the value of step 32000\n   */\n\n\n  /**\n   * @private\n   */\n  Decrypter.prototype.decryptChunk_ = function decryptChunk_(encrypted, key, initVector, decrypted) {\n    return function () {\n      var bytes = decrypt(encrypted, key, initVector);\n\n      decrypted.set(bytes, encrypted.byteOffset);\n    };\n  };\n\n  createClass(Decrypter, null, [{\n    key: 'STEP',\n    get: function get$$1() {\n      // 4 * 8000;\n      return 32000;\n    }\n  }]);\n  return Decrypter;\n}();\n\n/**\n * @file index.js\n *\n * Index module to easily import the primary components of AES-128\n * decryption. Like this:\n *\n * ```js\n * import {Decrypter, decrypt, AsyncStream} from 'aes-decrypter';\n * ```\n */\n\nexport { decrypt, Decrypter, AsyncStream };\n","/**\n * @license\n * Video.js 7.2.3 <http://videojs.com/>\n * Copyright Brightcove, Inc. <https://www.brightcove.com/>\n * Available under Apache License Version 2.0\n * <https://github.com/videojs/video.js/blob/master/LICENSE>\n *\n * Includes vtt.js <https://github.com/mozilla/vtt.js>\n * Available under Apache License Version 2.0\n * <https://github.com/mozilla/vtt.js/blob/master/LICENSE>\n */\n\nimport window$1 from 'global/window';\nimport document from 'global/document';\nimport tsml from 'tsml';\nimport xhr from 'xhr';\nimport vtt from 'videojs-vtt.js';\nimport safeParseTuple from 'safe-json-parse/tuple';\nimport URLToolkit from 'url-toolkit';\nimport { Parser } from 'm3u8-parser';\nimport { parse, parseUTCTiming } from 'mpd-parser';\nimport mp4probe from 'mux.js/lib/mp4/probe';\nimport { CaptionParser } from 'mux.js/lib/mp4';\nimport tsInspector from 'mux.js/lib/tools/ts-inspector.js';\nimport { Decrypter, AsyncStream, decrypt } from 'aes-decrypter';\n\nvar version = \"7.2.3\";\n\n/**\n * @file log.js\n * @module log\n */\n\nvar log = void 0;\n\n// This is the private tracking variable for logging level.\nvar level = 'info';\n\n// This is the private tracking variable for the logging history.\nvar history = [];\n\n/**\n * Log messages to the console and history based on the type of message\n *\n * @private\n * @param  {string} type\n *         The name of the console method to use.\n *\n * @param  {Array} args\n *         The arguments to be passed to the matching console method.\n */\nvar logByType = function logByType(type, args) {\n  var lvl = log.levels[level];\n  var lvlRegExp = new RegExp('^(' + lvl + ')$');\n\n  if (type !== 'log') {\n\n    // Add the type to the front of the message when it's not \"log\".\n    args.unshift(type.toUpperCase() + ':');\n  }\n\n  // Add a clone of the args at this point to history.\n  if (history) {\n    history.push([].concat(args));\n  }\n\n  // Add console prefix after adding to history.\n  args.unshift('VIDEOJS:');\n\n  // If there's no console then don't try to output messages, but they will\n  // still be stored in history.\n  if (!window$1.console) {\n    return;\n  }\n\n  // Was setting these once outside of this function, but containing them\n  // in the function makes it easier to test cases where console doesn't exist\n  // when the module is executed.\n  var fn = window$1.console[type];\n\n  if (!fn && type === 'debug') {\n    // Certain browsers don't have support for console.debug. For those, we\n    // should default to the closest comparable log.\n    fn = window$1.console.info || window$1.console.log;\n  }\n\n  // Bail out if there's no console or if this type is not allowed by the\n  // current logging level.\n  if (!fn || !lvl || !lvlRegExp.test(type)) {\n    return;\n  }\n\n  fn[Array.isArray(args) ? 'apply' : 'call'](window$1.console, args);\n};\n\n/**\n * Logs plain debug messages. Similar to `console.log`.\n *\n * @class\n * @param    {Mixed[]} args\n *           One or more messages or objects that should be logged.\n */\nlog = function log() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  logByType('log', args);\n};\n\n/**\n * Enumeration of available logging levels, where the keys are the level names\n * and the values are `|`-separated strings containing logging methods allowed\n * in that logging level. These strings are used to create a regular expression\n * matching the function name being called.\n *\n * Levels provided by video.js are:\n *\n * - `off`: Matches no calls. Any value that can be cast to `false` will have\n *   this effect. The most restrictive.\n * - `all`: Matches only Video.js-provided functions (`debug`, `log`,\n *   `log.warn`, and `log.error`).\n * - `debug`: Matches `log.debug`, `log`, `log.warn`, and `log.error` calls.\n * - `info` (default): Matches `log`, `log.warn`, and `log.error` calls.\n * - `warn`: Matches `log.warn` and `log.error` calls.\n * - `error`: Matches only `log.error` calls.\n *\n * @type {Object}\n */\nlog.levels = {\n  all: 'debug|log|warn|error',\n  off: '',\n  debug: 'debug|log|warn|error',\n  info: 'log|warn|error',\n  warn: 'warn|error',\n  error: 'error',\n  DEFAULT: level\n};\n\n/**\n * Get or set the current logging level. If a string matching a key from\n * {@link log.levels} is provided, acts as a setter. Regardless of argument,\n * returns the current logging level.\n *\n * @param  {string} [lvl]\n *         Pass to set a new logging level.\n *\n * @return {string}\n *         The current logging level.\n */\nlog.level = function (lvl) {\n  if (typeof lvl === 'string') {\n    if (!log.levels.hasOwnProperty(lvl)) {\n      throw new Error('\"' + lvl + '\" in not a valid log level');\n    }\n    level = lvl;\n  }\n  return level;\n};\n\n/**\n * Returns an array containing everything that has been logged to the history.\n *\n * This array is a shallow clone of the internal history record. However, its\n * contents are _not_ cloned; so, mutating objects inside this array will\n * mutate them in history.\n *\n * @return {Array}\n */\nlog.history = function () {\n  return history ? [].concat(history) : [];\n};\n\n/**\n * Clears the internal history tracking, but does not prevent further history\n * tracking.\n */\nlog.history.clear = function () {\n  if (history) {\n    history.length = 0;\n  }\n};\n\n/**\n * Disable history tracking if it is currently enabled.\n */\nlog.history.disable = function () {\n  if (history !== null) {\n    history.length = 0;\n    history = null;\n  }\n};\n\n/**\n * Enable history tracking if it is currently disabled.\n */\nlog.history.enable = function () {\n  if (history === null) {\n    history = [];\n  }\n};\n\n/**\n * Logs error messages. Similar to `console.error`.\n *\n * @param {Mixed[]} args\n *        One or more messages or objects that should be logged as an error\n */\nlog.error = function () {\n  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  return logByType('error', args);\n};\n\n/**\n * Logs warning messages. Similar to `console.warn`.\n *\n * @param {Mixed[]} args\n *        One or more messages or objects that should be logged as a warning.\n */\nlog.warn = function () {\n  for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    args[_key3] = arguments[_key3];\n  }\n\n  return logByType('warn', args);\n};\n\n/**\n * Logs debug messages. Similar to `console.debug`, but may also act as a comparable\n * log if `console.debug` is not available\n *\n * @param {Mixed[]} args\n *        One or more messages or objects that should be logged as debug.\n */\nlog.debug = function () {\n  for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    args[_key4] = arguments[_key4];\n  }\n\n  return logByType('debug', args);\n};\n\nvar log$1 = log;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar taggedTemplateLiteralLoose = function (strings, raw) {\n  strings.raw = raw;\n  return strings;\n};\n\n/**\n * @file obj.js\n * @module obj\n */\n\n/**\n * @callback obj:EachCallback\n *\n * @param {Mixed} value\n *        The current key for the object that is being iterated over.\n *\n * @param {string} key\n *        The current key-value for object that is being iterated over\n */\n\n/**\n * @callback obj:ReduceCallback\n *\n * @param {Mixed} accum\n *        The value that is accumulating over the reduce loop.\n *\n * @param {Mixed} value\n *        The current key for the object that is being iterated over.\n *\n * @param {string} key\n *        The current key-value for object that is being iterated over\n *\n * @return {Mixed}\n *         The new accumulated value.\n */\nvar toString = Object.prototype.toString;\n\n/**\n * Get the keys of an Object\n *\n * @param {Object}\n *        The Object to get the keys from\n *\n * @return {string[]}\n *         An array of the keys from the object. Returns an empty array if the\n *         object passed in was invalid or had no keys.\n *\n * @private\n */\nvar keys = function keys(object) {\n  return isObject(object) ? Object.keys(object) : [];\n};\n\n/**\n * Array-like iteration for objects.\n *\n * @param {Object} object\n *        The object to iterate over\n *\n * @param {obj:EachCallback} fn\n *        The callback function which is called for each key in the object.\n */\nfunction each(object, fn) {\n  keys(object).forEach(function (key) {\n    return fn(object[key], key);\n  });\n}\n\n/**\n * Array-like reduce for objects.\n *\n * @param {Object} object\n *        The Object that you want to reduce.\n *\n * @param {Function} fn\n *         A callback function which is called for each key in the object. It\n *         receives the accumulated value and the per-iteration value and key\n *         as arguments.\n *\n * @param {Mixed} [initial = 0]\n *        Starting value\n *\n * @return {Mixed}\n *         The final accumulated value.\n */\nfunction reduce(object, fn) {\n  var initial = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  return keys(object).reduce(function (accum, key) {\n    return fn(accum, object[key], key);\n  }, initial);\n}\n\n/**\n * Object.assign-style object shallow merge/extend.\n *\n * @param  {Object} target\n * @param  {Object} ...sources\n * @return {Object}\n */\nfunction assign(target) {\n  for (var _len = arguments.length, sources = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    sources[_key - 1] = arguments[_key];\n  }\n\n  if (Object.assign) {\n    return Object.assign.apply(Object, [target].concat(sources));\n  }\n\n  sources.forEach(function (source) {\n    if (!source) {\n      return;\n    }\n\n    each(source, function (value, key) {\n      target[key] = value;\n    });\n  });\n\n  return target;\n}\n\n/**\n * Returns whether a value is an object of any kind - including DOM nodes,\n * arrays, regular expressions, etc. Not functions, though.\n *\n * This avoids the gotcha where using `typeof` on a `null` value\n * results in `'object'`.\n *\n * @param  {Object} value\n * @return {Boolean}\n */\nfunction isObject(value) {\n  return !!value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object';\n}\n\n/**\n * Returns whether an object appears to be a \"plain\" object - that is, a\n * direct instance of `Object`.\n *\n * @param  {Object} value\n * @return {Boolean}\n */\nfunction isPlain(value) {\n  return isObject(value) && toString.call(value) === '[object Object]' && value.constructor === Object;\n}\n\n/**\n * @file computed-style.js\n * @module computed-style\n */\n\n/**\n * A safe getComputedStyle.\n *\n * This is needed because in Firefox, if the player is loaded in an iframe with\n * `display:none`, then `getComputedStyle` returns `null`, so, we do a null-check to\n * make sure  that the player doesn't break in these cases.\n *\n * @param {Element} el\n *        The element you want the computed style of\n *\n * @param {string} prop\n *        The property name you want\n *\n * @see https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n *\n * @static\n * @const\n */\nfunction computedStyle(el, prop) {\n  if (!el || !prop) {\n    return '';\n  }\n\n  if (typeof window$1.getComputedStyle === 'function') {\n    var cs = window$1.getComputedStyle(el);\n\n    return cs ? cs[prop] : '';\n  }\n\n  return '';\n}\n\nvar _templateObject = taggedTemplateLiteralLoose(['Setting attributes in the second argument of createEl()\\n                has been deprecated. Use the third argument instead.\\n                createEl(type, properties, attributes). Attempting to set ', ' to ', '.'], ['Setting attributes in the second argument of createEl()\\n                has been deprecated. Use the third argument instead.\\n                createEl(type, properties, attributes). Attempting to set ', ' to ', '.']);\n\n/**\n * Detect if a value is a string with any non-whitespace characters.\n *\n * @param {string} str\n *        The string to check\n *\n * @return {boolean}\n *         - True if the string is non-blank\n *         - False otherwise\n *\n */\nfunction isNonBlankString(str) {\n  return typeof str === 'string' && /\\S/.test(str);\n}\n\n/**\n * Throws an error if the passed string has whitespace. This is used by\n * class methods to be relatively consistent with the classList API.\n *\n * @param {string} str\n *         The string to check for whitespace.\n *\n * @throws {Error}\n *         Throws an error if there is whitespace in the string.\n *\n */\nfunction throwIfWhitespace(str) {\n  if (/\\s/.test(str)) {\n    throw new Error('class has illegal whitespace characters');\n  }\n}\n\n/**\n * Produce a regular expression for matching a className within an elements className.\n *\n * @param {string} className\n *         The className to generate the RegExp for.\n *\n * @return {RegExp}\n *         The RegExp that will check for a specific `className` in an elements\n *         className.\n */\nfunction classRegExp(className) {\n  return new RegExp('(^|\\\\s)' + className + '($|\\\\s)');\n}\n\n/**\n * Whether the current DOM interface appears to be real.\n *\n * @return {Boolean}\n */\nfunction isReal() {\n  // Both document and window will never be undefined thanks to `global`.\n  return document === window$1.document;\n}\n\n/**\n * Determines, via duck typing, whether or not a value is a DOM element.\n *\n * @param {Mixed} value\n *        The thing to check\n *\n * @return {boolean}\n *         - True if it is a DOM element\n *         - False otherwise\n */\nfunction isEl(value) {\n  return isObject(value) && value.nodeType === 1;\n}\n\n/**\n * Determines if the current DOM is embedded in an iframe.\n *\n * @return {boolean}\n *\n */\nfunction isInFrame() {\n\n  // We need a try/catch here because Safari will throw errors when attempting\n  // to get either `parent` or `self`\n  try {\n    return window$1.parent !== window$1.self;\n  } catch (x) {\n    return true;\n  }\n}\n\n/**\n * Creates functions to query the DOM using a given method.\n *\n * @param {string} method\n *         The method to create the query with.\n *\n * @return {Function}\n *         The query method\n */\nfunction createQuerier(method) {\n  return function (selector, context) {\n    if (!isNonBlankString(selector)) {\n      return document[method](null);\n    }\n    if (isNonBlankString(context)) {\n      context = document.querySelector(context);\n    }\n\n    var ctx = isEl(context) ? context : document;\n\n    return ctx[method] && ctx[method](selector);\n  };\n}\n\n/**\n * Creates an element and applies properties.\n *\n * @param {string} [tagName='div']\n *         Name of tag to be created.\n *\n * @param {Object} [properties={}]\n *         Element properties to be applied.\n *\n * @param {Object} [attributes={}]\n *         Element attributes to be applied.\n *\n * @param {String|Element|TextNode|Array|Function} [content]\n *         Contents for the element (see: {@link dom:normalizeContent})\n *\n * @return {Element}\n *         The element that was created.\n */\nfunction createEl() {\n  var tagName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'div';\n  var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var content = arguments[3];\n\n  var el = document.createElement(tagName);\n\n  Object.getOwnPropertyNames(properties).forEach(function (propName) {\n    var val = properties[propName];\n\n    // See #2176\n    // We originally were accepting both properties and attributes in the\n    // same object, but that doesn't work so well.\n    if (propName.indexOf('aria-') !== -1 || propName === 'role' || propName === 'type') {\n      log$1.warn(tsml(_templateObject, propName, val));\n      el.setAttribute(propName, val);\n\n      // Handle textContent since it's not supported everywhere and we have a\n      // method for it.\n    } else if (propName === 'textContent') {\n      textContent(el, val);\n    } else {\n      el[propName] = val;\n    }\n  });\n\n  Object.getOwnPropertyNames(attributes).forEach(function (attrName) {\n    el.setAttribute(attrName, attributes[attrName]);\n  });\n\n  if (content) {\n    appendContent(el, content);\n  }\n\n  return el;\n}\n\n/**\n * Injects text into an element, replacing any existing contents entirely.\n *\n * @param {Element} el\n *        The element to add text content into\n *\n * @param {string} text\n *        The text content to add.\n *\n * @return {Element}\n *         The element with added text content.\n */\nfunction textContent(el, text) {\n  if (typeof el.textContent === 'undefined') {\n    el.innerText = text;\n  } else {\n    el.textContent = text;\n  }\n  return el;\n}\n\n/**\n * Insert an element as the first child node of another\n *\n * @param {Element} child\n *        Element to insert\n *\n * @param {Element} parent\n *        Element to insert child into\n */\nfunction prependTo(child, parent) {\n  if (parent.firstChild) {\n    parent.insertBefore(child, parent.firstChild);\n  } else {\n    parent.appendChild(child);\n  }\n}\n\n/**\n * Check if an element has a CSS class\n *\n * @param {Element} element\n *        Element to check\n *\n * @param {string} classToCheck\n *        Class name to check for\n *\n * @return {boolean}\n *         - True if the element had the class\n *         - False otherwise.\n *\n * @throws {Error}\n *         Throws an error if `classToCheck` has white space.\n */\nfunction hasClass(element, classToCheck) {\n  throwIfWhitespace(classToCheck);\n  if (element.classList) {\n    return element.classList.contains(classToCheck);\n  }\n  return classRegExp(classToCheck).test(element.className);\n}\n\n/**\n * Add a CSS class name to an element\n *\n * @param {Element} element\n *        Element to add class name to.\n *\n * @param {string} classToAdd\n *        Class name to add.\n *\n * @return {Element}\n *         The dom element with the added class name.\n */\nfunction addClass(element, classToAdd) {\n  if (element.classList) {\n    element.classList.add(classToAdd);\n\n    // Don't need to `throwIfWhitespace` here because `hasElClass` will do it\n    // in the case of classList not being supported.\n  } else if (!hasClass(element, classToAdd)) {\n    element.className = (element.className + ' ' + classToAdd).trim();\n  }\n\n  return element;\n}\n\n/**\n * Remove a CSS class name from an element\n *\n * @param {Element} element\n *        Element to remove a class name from.\n *\n * @param {string} classToRemove\n *        Class name to remove\n *\n * @return {Element}\n *         The dom element with class name removed.\n */\nfunction removeClass(element, classToRemove) {\n  if (element.classList) {\n    element.classList.remove(classToRemove);\n  } else {\n    throwIfWhitespace(classToRemove);\n    element.className = element.className.split(/\\s+/).filter(function (c) {\n      return c !== classToRemove;\n    }).join(' ');\n  }\n\n  return element;\n}\n\n/**\n * The callback definition for toggleElClass.\n *\n * @callback Dom~PredicateCallback\n * @param {Element} element\n *        The DOM element of the Component.\n *\n * @param {string} classToToggle\n *        The `className` that wants to be toggled\n *\n * @return {boolean|undefined}\n *         - If true the `classToToggle` will get added to `element`.\n *         - If false the `classToToggle` will get removed from `element`.\n *         - If undefined this callback will be ignored\n */\n\n/**\n * Adds or removes a CSS class name on an element depending on an optional\n * condition or the presence/absence of the class name.\n *\n * @param {Element} element\n *        The element to toggle a class name on.\n *\n * @param {string} classToToggle\n *        The class that should be toggled\n *\n * @param {boolean|PredicateCallback} [predicate]\n *        See the return value for {@link Dom~PredicateCallback}\n *\n * @return {Element}\n *         The element with a class that has been toggled.\n */\nfunction toggleClass(element, classToToggle, predicate) {\n\n  // This CANNOT use `classList` internally because IE11 does not support the\n  // second parameter to the `classList.toggle()` method! Which is fine because\n  // `classList` will be used by the add/remove functions.\n  var has = hasClass(element, classToToggle);\n\n  if (typeof predicate === 'function') {\n    predicate = predicate(element, classToToggle);\n  }\n\n  if (typeof predicate !== 'boolean') {\n    predicate = !has;\n  }\n\n  // If the necessary class operation matches the current state of the\n  // element, no action is required.\n  if (predicate === has) {\n    return;\n  }\n\n  if (predicate) {\n    addClass(element, classToToggle);\n  } else {\n    removeClass(element, classToToggle);\n  }\n\n  return element;\n}\n\n/**\n * Apply attributes to an HTML element.\n *\n * @param {Element} el\n *        Element to add attributes to.\n *\n * @param {Object} [attributes]\n *        Attributes to be applied.\n */\nfunction setAttributes(el, attributes) {\n  Object.getOwnPropertyNames(attributes).forEach(function (attrName) {\n    var attrValue = attributes[attrName];\n\n    if (attrValue === null || typeof attrValue === 'undefined' || attrValue === false) {\n      el.removeAttribute(attrName);\n    } else {\n      el.setAttribute(attrName, attrValue === true ? '' : attrValue);\n    }\n  });\n}\n\n/**\n * Get an element's attribute values, as defined on the HTML tag\n * Attributes are not the same as properties. They're defined on the tag\n * or with setAttribute (which shouldn't be used with HTML)\n * This will return true or false for boolean attributes.\n *\n * @param {Element} tag\n *        Element from which to get tag attributes.\n *\n * @return {Object}\n *         All attributes of the element.\n */\nfunction getAttributes(tag) {\n  var obj = {};\n\n  // known boolean attributes\n  // we can check for matching boolean properties, but not all browsers\n  // and not all tags know about these attributes, so, we still want to check them manually\n  var knownBooleans = ',' + 'autoplay,controls,playsinline,loop,muted,default,defaultMuted' + ',';\n\n  if (tag && tag.attributes && tag.attributes.length > 0) {\n    var attrs = tag.attributes;\n\n    for (var i = attrs.length - 1; i >= 0; i--) {\n      var attrName = attrs[i].name;\n      var attrVal = attrs[i].value;\n\n      // check for known booleans\n      // the matching element property will return a value for typeof\n      if (typeof tag[attrName] === 'boolean' || knownBooleans.indexOf(',' + attrName + ',') !== -1) {\n        // the value of an included boolean attribute is typically an empty\n        // string ('') which would equal false if we just check for a false value.\n        // we also don't want support bad code like autoplay='false'\n        attrVal = attrVal !== null ? true : false;\n      }\n\n      obj[attrName] = attrVal;\n    }\n  }\n\n  return obj;\n}\n\n/**\n * Get the value of an element's attribute\n *\n * @param {Element} el\n *        A DOM element\n *\n * @param {string} attribute\n *        Attribute to get the value of\n *\n * @return {string}\n *         value of the attribute\n */\nfunction getAttribute(el, attribute) {\n  return el.getAttribute(attribute);\n}\n\n/**\n * Set the value of an element's attribute\n *\n * @param {Element} el\n *        A DOM element\n *\n * @param {string} attribute\n *        Attribute to set\n *\n * @param {string} value\n *        Value to set the attribute to\n */\nfunction setAttribute(el, attribute, value) {\n  el.setAttribute(attribute, value);\n}\n\n/**\n * Remove an element's attribute\n *\n * @param {Element} el\n *        A DOM element\n *\n * @param {string} attribute\n *        Attribute to remove\n */\nfunction removeAttribute(el, attribute) {\n  el.removeAttribute(attribute);\n}\n\n/**\n * Attempt to block the ability to select text while dragging controls\n */\nfunction blockTextSelection() {\n  document.body.focus();\n  document.onselectstart = function () {\n    return false;\n  };\n}\n\n/**\n * Turn off text selection blocking\n */\nfunction unblockTextSelection() {\n  document.onselectstart = function () {\n    return true;\n  };\n}\n\n/**\n * Identical to the native `getBoundingClientRect` function, but ensures that\n * the method is supported at all (it is in all browsers we claim to support)\n * and that the element is in the DOM before continuing.\n *\n * This wrapper function also shims properties which are not provided by some\n * older browsers (namely, IE8).\n *\n * Additionally, some browsers do not support adding properties to a\n * `ClientRect`/`DOMRect` object; so, we shallow-copy it with the standard\n * properties (except `x` and `y` which are not widely supported). This helps\n * avoid implementations where keys are non-enumerable.\n *\n * @param  {Element} el\n *         Element whose `ClientRect` we want to calculate.\n *\n * @return {Object|undefined}\n *         Always returns a plain\n */\nfunction getBoundingClientRect(el) {\n  if (el && el.getBoundingClientRect && el.parentNode) {\n    var rect = el.getBoundingClientRect();\n    var result = {};\n\n    ['bottom', 'height', 'left', 'right', 'top', 'width'].forEach(function (k) {\n      if (rect[k] !== undefined) {\n        result[k] = rect[k];\n      }\n    });\n\n    if (!result.height) {\n      result.height = parseFloat(computedStyle(el, 'height'));\n    }\n\n    if (!result.width) {\n      result.width = parseFloat(computedStyle(el, 'width'));\n    }\n\n    return result;\n  }\n}\n\n/**\n * The postion of a DOM element on the page.\n *\n * @typedef {Object} module:dom~Position\n *\n * @property {number} left\n *           Pixels to the left\n *\n * @property {number} top\n *           Pixels on top\n */\n\n/**\n * Offset Left.\n * getBoundingClientRect technique from\n * John Resig\n *\n * @see http://ejohn.org/blog/getboundingclientrect-is-awesome/\n *\n * @param {Element} el\n *        Element from which to get offset\n *\n * @return {module:dom~Position}\n *         The position of the element that was passed in.\n */\nfunction findPosition(el) {\n  var box = void 0;\n\n  if (el.getBoundingClientRect && el.parentNode) {\n    box = el.getBoundingClientRect();\n  }\n\n  if (!box) {\n    return {\n      left: 0,\n      top: 0\n    };\n  }\n\n  var docEl = document.documentElement;\n  var body = document.body;\n\n  var clientLeft = docEl.clientLeft || body.clientLeft || 0;\n  var scrollLeft = window$1.pageXOffset || body.scrollLeft;\n  var left = box.left + scrollLeft - clientLeft;\n\n  var clientTop = docEl.clientTop || body.clientTop || 0;\n  var scrollTop = window$1.pageYOffset || body.scrollTop;\n  var top = box.top + scrollTop - clientTop;\n\n  // Android sometimes returns slightly off decimal values, so need to round\n  return {\n    left: Math.round(left),\n    top: Math.round(top)\n  };\n}\n\n/**\n * x and y coordinates for a dom element or mouse pointer\n *\n * @typedef {Object} Dom~Coordinates\n *\n * @property {number} x\n *           x coordinate in pixels\n *\n * @property {number} y\n *           y coordinate in pixels\n */\n\n/**\n * Get pointer position in element\n * Returns an object with x and y coordinates.\n * The base on the coordinates are the bottom left of the element.\n *\n * @param {Element} el\n *        Element on which to get the pointer position on\n *\n * @param {EventTarget~Event} event\n *        Event object\n *\n * @return {Dom~Coordinates}\n *         A Coordinates object corresponding to the mouse position.\n *\n */\nfunction getPointerPosition(el, event) {\n  var position = {};\n  var box = findPosition(el);\n  var boxW = el.offsetWidth;\n  var boxH = el.offsetHeight;\n\n  var boxY = box.top;\n  var boxX = box.left;\n  var pageY = event.pageY;\n  var pageX = event.pageX;\n\n  if (event.changedTouches) {\n    pageX = event.changedTouches[0].pageX;\n    pageY = event.changedTouches[0].pageY;\n  }\n\n  position.y = Math.max(0, Math.min(1, (boxY - pageY + boxH) / boxH));\n  position.x = Math.max(0, Math.min(1, (pageX - boxX) / boxW));\n\n  return position;\n}\n\n/**\n * Determines, via duck typing, whether or not a value is a text node.\n *\n * @param {Mixed} value\n *        Check if this value is a text node.\n *\n * @return {boolean}\n *         - True if it is a text node\n *         - False otherwise\n */\nfunction isTextNode(value) {\n  return isObject(value) && value.nodeType === 3;\n}\n\n/**\n * Empties the contents of an element.\n *\n * @param {Element} el\n *        The element to empty children from\n *\n * @return {Element}\n *         The element with no children\n */\nfunction emptyEl(el) {\n  while (el.firstChild) {\n    el.removeChild(el.firstChild);\n  }\n  return el;\n}\n\n/**\n * Normalizes content for eventual insertion into the DOM.\n *\n * This allows a wide range of content definition methods, but protects\n * from falling into the trap of simply writing to `innerHTML`, which is\n * an XSS concern.\n *\n * The content for an element can be passed in multiple types and\n * combinations, whose behavior is as follows:\n *\n * @param {String|Element|TextNode|Array|Function} content\n *        - String: Normalized into a text node.\n *        - Element/TextNode: Passed through.\n *        - Array: A one-dimensional array of strings, elements, nodes, or functions\n *          (which return single strings, elements, or nodes).\n *        - Function: If the sole argument, is expected to produce a string, element,\n *          node, or array as defined above.\n *\n * @return {Array}\n *         All of the content that was passed in normalized.\n */\nfunction normalizeContent(content) {\n\n  // First, invoke content if it is a function. If it produces an array,\n  // that needs to happen before normalization.\n  if (typeof content === 'function') {\n    content = content();\n  }\n\n  // Next up, normalize to an array, so one or many items can be normalized,\n  // filtered, and returned.\n  return (Array.isArray(content) ? content : [content]).map(function (value) {\n\n    // First, invoke value if it is a function to produce a new value,\n    // which will be subsequently normalized to a Node of some kind.\n    if (typeof value === 'function') {\n      value = value();\n    }\n\n    if (isEl(value) || isTextNode(value)) {\n      return value;\n    }\n\n    if (typeof value === 'string' && /\\S/.test(value)) {\n      return document.createTextNode(value);\n    }\n  }).filter(function (value) {\n    return value;\n  });\n}\n\n/**\n * Normalizes and appends content to an element.\n *\n * @param {Element} el\n *        Element to append normalized content to.\n *\n *\n * @param {String|Element|TextNode|Array|Function} content\n *        See the `content` argument of {@link dom:normalizeContent}\n *\n * @return {Element}\n *         The element with appended normalized content.\n */\nfunction appendContent(el, content) {\n  normalizeContent(content).forEach(function (node) {\n    return el.appendChild(node);\n  });\n  return el;\n}\n\n/**\n * Normalizes and inserts content into an element; this is identical to\n * `appendContent()`, except it empties the element first.\n *\n * @param {Element} el\n *        Element to insert normalized content into.\n *\n * @param {String|Element|TextNode|Array|Function} content\n *        See the `content` argument of {@link dom:normalizeContent}\n *\n * @return {Element}\n *         The element with inserted normalized content.\n *\n */\nfunction insertContent(el, content) {\n  return appendContent(emptyEl(el), content);\n}\n\n/**\n * Check if event was a single left click\n *\n * @param {EventTarget~Event} event\n *        Event object\n *\n * @return {boolean}\n *         - True if a left click\n *         - False if not a left click\n */\nfunction isSingleLeftClick(event) {\n  // Note: if you create something draggable, be sure to\n  // call it on both `mousedown` and `mousemove` event,\n  // otherwise `mousedown` should be enough for a button\n\n  if (event.button === undefined && event.buttons === undefined) {\n    // Why do we need `buttons` ?\n    // Because, middle mouse sometimes have this:\n    // e.button === 0 and e.buttons === 4\n    // Furthermore, we want to prevent combination click, something like\n    // HOLD middlemouse then left click, that would be\n    // e.button === 0, e.buttons === 5\n    // just `button` is not gonna work\n\n    // Alright, then what this block does ?\n    // this is for chrome `simulate mobile devices`\n    // I want to support this as well\n\n    return true;\n  }\n\n  if (event.button === 0 && event.buttons === undefined) {\n    // Touch screen, sometimes on some specific device, `buttons`\n    // doesn't have anything (safari on ios, blackberry...)\n\n    return true;\n  }\n\n  if (event.button !== 0 || event.buttons !== 1) {\n    // This is the reason we have those if else block above\n    // if any special case we can catch and let it slide\n    // we do it above, when get to here, this definitely\n    // is-not-left-click\n\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Finds a single DOM element matching `selector` within the optional\n * `context` of another DOM element (defaulting to `document`).\n *\n * @param {string} selector\n *        A valid CSS selector, which will be passed to `querySelector`.\n *\n * @param {Element|String} [context=document]\n *        A DOM element within which to query. Can also be a selector\n *        string in which case the first matching element will be used\n *        as context. If missing (or no element matches selector), falls\n *        back to `document`.\n *\n * @return {Element|null}\n *         The element that was found or null.\n */\nvar $ = createQuerier('querySelector');\n\n/**\n * Finds a all DOM elements matching `selector` within the optional\n * `context` of another DOM element (defaulting to `document`).\n *\n * @param {string} selector\n *           A valid CSS selector, which will be passed to `querySelectorAll`.\n *\n * @param {Element|String} [context=document]\n *           A DOM element within which to query. Can also be a selector\n *           string in which case the first matching element will be used\n *           as context. If missing (or no element matches selector), falls\n *           back to `document`.\n *\n * @return {NodeList}\n *         A element list of elements that were found. Will be empty if none were found.\n *\n */\nvar $$ = createQuerier('querySelectorAll');\n\nvar Dom = /*#__PURE__*/Object.freeze({\n  isReal: isReal,\n  isEl: isEl,\n  isInFrame: isInFrame,\n  createEl: createEl,\n  textContent: textContent,\n  prependTo: prependTo,\n  hasClass: hasClass,\n  addClass: addClass,\n  removeClass: removeClass,\n  toggleClass: toggleClass,\n  setAttributes: setAttributes,\n  getAttributes: getAttributes,\n  getAttribute: getAttribute,\n  setAttribute: setAttribute,\n  removeAttribute: removeAttribute,\n  blockTextSelection: blockTextSelection,\n  unblockTextSelection: unblockTextSelection,\n  getBoundingClientRect: getBoundingClientRect,\n  findPosition: findPosition,\n  getPointerPosition: getPointerPosition,\n  isTextNode: isTextNode,\n  emptyEl: emptyEl,\n  normalizeContent: normalizeContent,\n  appendContent: appendContent,\n  insertContent: insertContent,\n  isSingleLeftClick: isSingleLeftClick,\n  $: $,\n  $$: $$\n});\n\n/**\n * @file guid.js\n * @module guid\n */\n\n/**\n * Unique ID for an element or function\n * @type {Number}\n */\nvar _guid = 1;\n\n/**\n * Get a unique auto-incrementing ID by number that has not been returned before.\n *\n * @return {number}\n *         A new unique ID.\n */\nfunction newGUID() {\n  return _guid++;\n}\n\n/**\n * @file dom-data.js\n * @module dom-data\n */\n\n/**\n * Element Data Store.\n *\n * Allows for binding data to an element without putting it directly on the\n * element. Ex. Event listeners are stored here.\n * (also from jsninja.com, slightly modified and updated for closure compiler)\n *\n * @type {Object}\n * @private\n */\nvar elData = {};\n\n/*\n * Unique attribute name to store an element's guid in\n *\n * @type {String}\n * @constant\n * @private\n */\nvar elIdAttr = 'vdata' + new Date().getTime();\n\n/**\n * Returns the cache object where data for an element is stored\n *\n * @param {Element} el\n *        Element to store data for.\n *\n * @return {Object}\n *         The cache object for that el that was passed in.\n */\nfunction getData(el) {\n  var id = el[elIdAttr];\n\n  if (!id) {\n    id = el[elIdAttr] = newGUID();\n  }\n\n  if (!elData[id]) {\n    elData[id] = {};\n  }\n\n  return elData[id];\n}\n\n/**\n * Returns whether or not an element has cached data\n *\n * @param {Element} el\n *        Check if this element has cached data.\n *\n * @return {boolean}\n *         - True if the DOM element has cached data.\n *         - False otherwise.\n */\nfunction hasData(el) {\n  var id = el[elIdAttr];\n\n  if (!id) {\n    return false;\n  }\n\n  return !!Object.getOwnPropertyNames(elData[id]).length;\n}\n\n/**\n * Delete data for the element from the cache and the guid attr from getElementById\n *\n * @param {Element} el\n *        Remove cached data for this element.\n */\nfunction removeData(el) {\n  var id = el[elIdAttr];\n\n  if (!id) {\n    return;\n  }\n\n  // Remove all stored data\n  delete elData[id];\n\n  // Remove the elIdAttr property from the DOM node\n  try {\n    delete el[elIdAttr];\n  } catch (e) {\n    if (el.removeAttribute) {\n      el.removeAttribute(elIdAttr);\n    } else {\n      // IE doesn't appear to support removeAttribute on the document element\n      el[elIdAttr] = null;\n    }\n  }\n}\n\n/**\n * @file events.js. An Event System (John Resig - Secrets of a JS Ninja http://jsninja.com/)\n * (Original book version wasn't completely usable, so fixed some things and made Closure Compiler compatible)\n * This should work very similarly to jQuery's events, however it's based off the book version which isn't as\n * robust as jquery's, so there's probably some differences.\n *\n * @module events\n */\n\n/**\n * Clean up the listener cache and dispatchers\n *\n * @param {Element|Object} elem\n *        Element to clean up\n *\n * @param {string} type\n *        Type of event to clean up\n */\nfunction _cleanUpEvents(elem, type) {\n  var data = getData(elem);\n\n  // Remove the events of a particular type if there are none left\n  if (data.handlers[type].length === 0) {\n    delete data.handlers[type];\n    // data.handlers[type] = null;\n    // Setting to null was causing an error with data.handlers\n\n    // Remove the meta-handler from the element\n    if (elem.removeEventListener) {\n      elem.removeEventListener(type, data.dispatcher, false);\n    } else if (elem.detachEvent) {\n      elem.detachEvent('on' + type, data.dispatcher);\n    }\n  }\n\n  // Remove the events object if there are no types left\n  if (Object.getOwnPropertyNames(data.handlers).length <= 0) {\n    delete data.handlers;\n    delete data.dispatcher;\n    delete data.disabled;\n  }\n\n  // Finally remove the element data if there is no data left\n  if (Object.getOwnPropertyNames(data).length === 0) {\n    removeData(elem);\n  }\n}\n\n/**\n * Loops through an array of event types and calls the requested method for each type.\n *\n * @param {Function} fn\n *        The event method we want to use.\n *\n * @param {Element|Object} elem\n *        Element or object to bind listeners to\n *\n * @param {string} type\n *        Type of event to bind to.\n *\n * @param {EventTarget~EventListener} callback\n *        Event listener.\n */\nfunction _handleMultipleEvents(fn, elem, types, callback) {\n  types.forEach(function (type) {\n    // Call the event method for each one of the types\n    fn(elem, type, callback);\n  });\n}\n\n/**\n * Fix a native event to have standard property values\n *\n * @param {Object} event\n *        Event object to fix.\n *\n * @return {Object}\n *         Fixed event object.\n */\nfunction fixEvent(event) {\n\n  function returnTrue() {\n    return true;\n  }\n\n  function returnFalse() {\n    return false;\n  }\n\n  // Test if fixing up is needed\n  // Used to check if !event.stopPropagation instead of isPropagationStopped\n  // But native events return true for stopPropagation, but don't have\n  // other expected methods like isPropagationStopped. Seems to be a problem\n  // with the Javascript Ninja code. So we're just overriding all events now.\n  if (!event || !event.isPropagationStopped) {\n    var old = event || window$1.event;\n\n    event = {};\n    // Clone the old object so that we can modify the values event = {};\n    // IE8 Doesn't like when you mess with native event properties\n    // Firefox returns false for event.hasOwnProperty('type') and other props\n    //  which makes copying more difficult.\n    // TODO: Probably best to create a whitelist of event props\n    for (var key in old) {\n      // Safari 6.0.3 warns you if you try to copy deprecated layerX/Y\n      // Chrome warns you if you try to copy deprecated keyboardEvent.keyLocation\n      // and webkitMovementX/Y\n      if (key !== 'layerX' && key !== 'layerY' && key !== 'keyLocation' && key !== 'webkitMovementX' && key !== 'webkitMovementY') {\n        // Chrome 32+ warns if you try to copy deprecated returnValue, but\n        // we still want to if preventDefault isn't supported (IE8).\n        if (!(key === 'returnValue' && old.preventDefault)) {\n          event[key] = old[key];\n        }\n      }\n    }\n\n    // The event occurred on this element\n    if (!event.target) {\n      event.target = event.srcElement || document;\n    }\n\n    // Handle which other element the event is related to\n    if (!event.relatedTarget) {\n      event.relatedTarget = event.fromElement === event.target ? event.toElement : event.fromElement;\n    }\n\n    // Stop the default browser action\n    event.preventDefault = function () {\n      if (old.preventDefault) {\n        old.preventDefault();\n      }\n      event.returnValue = false;\n      old.returnValue = false;\n      event.defaultPrevented = true;\n    };\n\n    event.defaultPrevented = false;\n\n    // Stop the event from bubbling\n    event.stopPropagation = function () {\n      if (old.stopPropagation) {\n        old.stopPropagation();\n      }\n      event.cancelBubble = true;\n      old.cancelBubble = true;\n      event.isPropagationStopped = returnTrue;\n    };\n\n    event.isPropagationStopped = returnFalse;\n\n    // Stop the event from bubbling and executing other handlers\n    event.stopImmediatePropagation = function () {\n      if (old.stopImmediatePropagation) {\n        old.stopImmediatePropagation();\n      }\n      event.isImmediatePropagationStopped = returnTrue;\n      event.stopPropagation();\n    };\n\n    event.isImmediatePropagationStopped = returnFalse;\n\n    // Handle mouse position\n    if (event.clientX !== null && event.clientX !== undefined) {\n      var doc = document.documentElement;\n      var body = document.body;\n\n      event.pageX = event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);\n      event.pageY = event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);\n    }\n\n    // Handle key presses\n    event.which = event.charCode || event.keyCode;\n\n    // Fix button for mouse clicks:\n    // 0 == left; 1 == middle; 2 == right\n    if (event.button !== null && event.button !== undefined) {\n\n      // The following is disabled because it does not pass videojs-standard\n      // and... yikes.\n      /* eslint-disable */\n      event.button = event.button & 1 ? 0 : event.button & 4 ? 1 : event.button & 2 ? 2 : 0;\n      /* eslint-enable */\n    }\n  }\n\n  // Returns fixed-up instance\n  return event;\n}\n\n/**\n * Whether passive event listeners are supported\n */\nvar _supportsPassive = false;\n\n(function () {\n  try {\n    var opts = Object.defineProperty({}, 'passive', {\n      get: function get() {\n        _supportsPassive = true;\n      }\n    });\n\n    window$1.addEventListener('test', null, opts);\n    window$1.removeEventListener('test', null, opts);\n  } catch (e) {\n    // disregard\n  }\n})();\n\n/**\n * Touch events Chrome expects to be passive\n */\nvar passiveEvents = ['touchstart', 'touchmove'];\n\n/**\n * Add an event listener to element\n * It stores the handler function in a separate cache object\n * and adds a generic handler to the element's event,\n * along with a unique id (guid) to the element.\n *\n * @param {Element|Object} elem\n *        Element or object to bind listeners to\n *\n * @param {string|string[]} type\n *        Type of event to bind to.\n *\n * @param {EventTarget~EventListener} fn\n *        Event listener.\n */\nfunction on(elem, type, fn) {\n  if (Array.isArray(type)) {\n    return _handleMultipleEvents(on, elem, type, fn);\n  }\n\n  var data = getData(elem);\n\n  // We need a place to store all our handler data\n  if (!data.handlers) {\n    data.handlers = {};\n  }\n\n  if (!data.handlers[type]) {\n    data.handlers[type] = [];\n  }\n\n  if (!fn.guid) {\n    fn.guid = newGUID();\n  }\n\n  data.handlers[type].push(fn);\n\n  if (!data.dispatcher) {\n    data.disabled = false;\n\n    data.dispatcher = function (event, hash) {\n\n      if (data.disabled) {\n        return;\n      }\n\n      event = fixEvent(event);\n\n      var handlers = data.handlers[event.type];\n\n      if (handlers) {\n        // Copy handlers so if handlers are added/removed during the process it doesn't throw everything off.\n        var handlersCopy = handlers.slice(0);\n\n        for (var m = 0, n = handlersCopy.length; m < n; m++) {\n          if (event.isImmediatePropagationStopped()) {\n            break;\n          } else {\n            try {\n              handlersCopy[m].call(elem, event, hash);\n            } catch (e) {\n              log$1.error(e);\n            }\n          }\n        }\n      }\n    };\n  }\n\n  if (data.handlers[type].length === 1) {\n    if (elem.addEventListener) {\n      var options = false;\n\n      if (_supportsPassive && passiveEvents.indexOf(type) > -1) {\n        options = { passive: true };\n      }\n      elem.addEventListener(type, data.dispatcher, options);\n    } else if (elem.attachEvent) {\n      elem.attachEvent('on' + type, data.dispatcher);\n    }\n  }\n}\n\n/**\n * Removes event listeners from an element\n *\n * @param {Element|Object} elem\n *        Object to remove listeners from.\n *\n * @param {string|string[]} [type]\n *        Type of listener to remove. Don't include to remove all events from element.\n *\n * @param {EventTarget~EventListener} [fn]\n *        Specific listener to remove. Don't include to remove listeners for an event\n *        type.\n */\nfunction off(elem, type, fn) {\n  // Don't want to add a cache object through getElData if not needed\n  if (!hasData(elem)) {\n    return;\n  }\n\n  var data = getData(elem);\n\n  // If no events exist, nothing to unbind\n  if (!data.handlers) {\n    return;\n  }\n\n  if (Array.isArray(type)) {\n    return _handleMultipleEvents(off, elem, type, fn);\n  }\n\n  // Utility function\n  var removeType = function removeType(el, t) {\n    data.handlers[t] = [];\n    _cleanUpEvents(el, t);\n  };\n\n  // Are we removing all bound events?\n  if (type === undefined) {\n    for (var t in data.handlers) {\n      if (Object.prototype.hasOwnProperty.call(data.handlers || {}, t)) {\n        removeType(elem, t);\n      }\n    }\n    return;\n  }\n\n  var handlers = data.handlers[type];\n\n  // If no handlers exist, nothing to unbind\n  if (!handlers) {\n    return;\n  }\n\n  // If no listener was provided, remove all listeners for type\n  if (!fn) {\n    removeType(elem, type);\n    return;\n  }\n\n  // We're only removing a single handler\n  if (fn.guid) {\n    for (var n = 0; n < handlers.length; n++) {\n      if (handlers[n].guid === fn.guid) {\n        handlers.splice(n--, 1);\n      }\n    }\n  }\n\n  _cleanUpEvents(elem, type);\n}\n\n/**\n * Trigger an event for an element\n *\n * @param {Element|Object} elem\n *        Element to trigger an event on\n *\n * @param {EventTarget~Event|string} event\n *        A string (the type) or an event object with a type attribute\n *\n * @param {Object} [hash]\n *        data hash to pass along with the event\n *\n * @return {boolean|undefined}\n *         - Returns the opposite of `defaultPrevented` if default was prevented\n *         - Otherwise returns undefined\n */\nfunction trigger(elem, event, hash) {\n  // Fetches element data and a reference to the parent (for bubbling).\n  // Don't want to add a data object to cache for every parent,\n  // so checking hasElData first.\n  var elemData = hasData(elem) ? getData(elem) : {};\n  var parent = elem.parentNode || elem.ownerDocument;\n  // type = event.type || event,\n  // handler;\n\n  // If an event name was passed as a string, creates an event out of it\n  if (typeof event === 'string') {\n    event = { type: event, target: elem };\n  } else if (!event.target) {\n    event.target = elem;\n  }\n\n  // Normalizes the event properties.\n  event = fixEvent(event);\n\n  // If the passed element has a dispatcher, executes the established handlers.\n  if (elemData.dispatcher) {\n    elemData.dispatcher.call(elem, event, hash);\n  }\n\n  // Unless explicitly stopped or the event does not bubble (e.g. media events)\n  // recursively calls this function to bubble the event up the DOM.\n  if (parent && !event.isPropagationStopped() && event.bubbles === true) {\n    trigger.call(null, parent, event, hash);\n\n    // If at the top of the DOM, triggers the default action unless disabled.\n  } else if (!parent && !event.defaultPrevented) {\n    var targetData = getData(event.target);\n\n    // Checks if the target has a default action for this event.\n    if (event.target[event.type]) {\n      // Temporarily disables event dispatching on the target as we have already executed the handler.\n      targetData.disabled = true;\n      // Executes the default action.\n      if (typeof event.target[event.type] === 'function') {\n        event.target[event.type]();\n      }\n      // Re-enables event dispatching.\n      targetData.disabled = false;\n    }\n  }\n\n  // Inform the triggerer if the default was prevented by returning false\n  return !event.defaultPrevented;\n}\n\n/**\n * Trigger a listener only once for an event\n *\n * @param {Element|Object} elem\n *        Element or object to bind to.\n *\n * @param {string|string[]} type\n *        Name/type of event\n *\n * @param {Event~EventListener} fn\n *        Event Listener function\n */\nfunction one(elem, type, fn) {\n  if (Array.isArray(type)) {\n    return _handleMultipleEvents(one, elem, type, fn);\n  }\n  var func = function func() {\n    off(elem, type, func);\n    fn.apply(this, arguments);\n  };\n\n  // copy the guid to the new function so it can removed using the original function's ID\n  func.guid = fn.guid = fn.guid || newGUID();\n  on(elem, type, func);\n}\n\nvar Events = /*#__PURE__*/Object.freeze({\n  fixEvent: fixEvent,\n  on: on,\n  off: off,\n  trigger: trigger,\n  one: one\n});\n\n/**\n * @file setup.js - Functions for setting up a player without\n * user interaction based on the data-setup `attribute` of the video tag.\n *\n * @module setup\n */\n\nvar _windowLoaded = false;\nvar videojs = void 0;\n\n/**\n * Set up any tags that have a data-setup `attribute` when the player is started.\n */\nvar autoSetup = function autoSetup() {\n\n  // Protect against breakage in non-browser environments and check global autoSetup option.\n  if (!isReal() || videojs.options.autoSetup === false) {\n    return;\n  }\n\n  var vids = Array.prototype.slice.call(document.getElementsByTagName('video'));\n  var audios = Array.prototype.slice.call(document.getElementsByTagName('audio'));\n  var divs = Array.prototype.slice.call(document.getElementsByTagName('video-js'));\n  var mediaEls = vids.concat(audios, divs);\n\n  // Check if any media elements exist\n  if (mediaEls && mediaEls.length > 0) {\n\n    for (var i = 0, e = mediaEls.length; i < e; i++) {\n      var mediaEl = mediaEls[i];\n\n      // Check if element exists, has getAttribute func.\n      if (mediaEl && mediaEl.getAttribute) {\n\n        // Make sure this player hasn't already been set up.\n        if (mediaEl.player === undefined) {\n          var options = mediaEl.getAttribute('data-setup');\n\n          // Check if data-setup attr exists.\n          // We only auto-setup if they've added the data-setup attr.\n          if (options !== null) {\n            // Create new video.js instance.\n            videojs(mediaEl);\n          }\n        }\n\n        // If getAttribute isn't defined, we need to wait for the DOM.\n      } else {\n        autoSetupTimeout(1);\n        break;\n      }\n    }\n\n    // No videos were found, so keep looping unless page is finished loading.\n  } else if (!_windowLoaded) {\n    autoSetupTimeout(1);\n  }\n};\n\n/**\n * Wait until the page is loaded before running autoSetup. This will be called in\n * autoSetup if `hasLoaded` returns false.\n *\n * @param {number} wait\n *        How long to wait in ms\n *\n * @param {module:videojs} [vjs]\n *        The videojs library function\n */\nfunction autoSetupTimeout(wait, vjs) {\n  if (vjs) {\n    videojs = vjs;\n  }\n\n  window$1.setTimeout(autoSetup, wait);\n}\n\nif (isReal() && document.readyState === 'complete') {\n  _windowLoaded = true;\n} else {\n  /**\n   * Listen for the load event on window, and set _windowLoaded to true.\n   *\n   * @listens load\n   */\n  one(window$1, 'load', function () {\n    _windowLoaded = true;\n  });\n}\n\n/**\n * @file stylesheet.js\n * @module stylesheet\n */\n\n/**\n * Create a DOM syle element given a className for it.\n *\n * @param {string} className\n *        The className to add to the created style element.\n *\n * @return {Element}\n *         The element that was created.\n */\nvar createStyleElement = function createStyleElement(className) {\n  var style = document.createElement('style');\n\n  style.className = className;\n\n  return style;\n};\n\n/**\n * Add text to a DOM element.\n *\n * @param {Element} el\n *        The Element to add text content to.\n *\n * @param {string} content\n *        The text to add to the element.\n */\nvar setTextContent = function setTextContent(el, content) {\n  if (el.styleSheet) {\n    el.styleSheet.cssText = content;\n  } else {\n    el.textContent = content;\n  }\n};\n\n/**\n * @file fn.js\n * @module fn\n */\n\n/**\n * Bind (a.k.a proxy or Context). A simple method for changing the context of a function\n * It also stores a unique id on the function so it can be easily removed from events.\n *\n * @param {Mixed} context\n *        The object to bind as scope.\n *\n * @param {Function} fn\n *        The function to be bound to a scope.\n *\n * @param {number} [uid]\n *        An optional unique ID for the function to be set\n *\n * @return {Function}\n *         The new function that will be bound into the context given\n */\nvar bind = function bind(context, fn, uid) {\n  // Make sure the function has a unique ID\n  if (!fn.guid) {\n    fn.guid = newGUID();\n  }\n\n  // Create the new function that changes the context\n  var bound = function bound() {\n    return fn.apply(context, arguments);\n  };\n\n  // Allow for the ability to individualize this function\n  // Needed in the case where multiple objects might share the same prototype\n  // IF both items add an event listener with the same function, then you try to remove just one\n  // it will remove both because they both have the same guid.\n  // when using this, you need to use the bind method when you remove the listener as well.\n  // currently used in text tracks\n  bound.guid = uid ? uid + '_' + fn.guid : fn.guid;\n\n  return bound;\n};\n\n/**\n * Wraps the given function, `fn`, with a new function that only invokes `fn`\n * at most once per every `wait` milliseconds.\n *\n * @param  {Function} fn\n *         The function to be throttled.\n *\n * @param  {Number}   wait\n *         The number of milliseconds by which to throttle.\n *\n * @return {Function}\n */\nvar throttle = function throttle(fn, wait) {\n  var last = Date.now();\n\n  var throttled = function throttled() {\n    var now = Date.now();\n\n    if (now - last >= wait) {\n      fn.apply(undefined, arguments);\n      last = now;\n    }\n  };\n\n  return throttled;\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked.\n *\n * Inspired by lodash and underscore implementations.\n *\n * @param  {Function} func\n *         The function to wrap with debounce behavior.\n *\n * @param  {number} wait\n *         The number of milliseconds to wait after the last invocation.\n *\n * @param  {boolean} [immediate]\n *         Whether or not to invoke the function immediately upon creation.\n *\n * @param  {Object} [context=window]\n *         The \"context\" in which the debounced function should debounce. For\n *         example, if this function should be tied to a Video.js player,\n *         the player can be passed here. Alternatively, defaults to the\n *         global `window` object.\n *\n * @return {Function}\n *         A debounced function.\n */\nvar debounce = function debounce(func, wait, immediate) {\n  var context = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : window$1;\n\n  var timeout = void 0;\n\n  var cancel = function cancel() {\n    context.clearTimeout(timeout);\n    timeout = null;\n  };\n\n  /* eslint-disable consistent-this */\n  var debounced = function debounced() {\n    var self = this;\n    var args = arguments;\n\n    var _later = function later() {\n      timeout = null;\n      _later = null;\n      if (!immediate) {\n        func.apply(self, args);\n      }\n    };\n\n    if (!timeout && immediate) {\n      func.apply(self, args);\n    }\n\n    context.clearTimeout(timeout);\n    timeout = context.setTimeout(_later, wait);\n  };\n  /* eslint-enable consistent-this */\n\n  debounced.cancel = cancel;\n\n  return debounced;\n};\n\n/**\n * @file src/js/event-target.js\n */\n\n/**\n * `EventTarget` is a class that can have the same API as the DOM `EventTarget`. It\n * adds shorthand functions that wrap around lengthy functions. For example:\n * the `on` function is a wrapper around `addEventListener`.\n *\n * @see [EventTarget Spec]{@link https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget}\n * @class EventTarget\n */\nvar EventTarget = function EventTarget() {};\n\n/**\n * A Custom DOM event.\n *\n * @typedef {Object} EventTarget~Event\n * @see [Properties]{@link https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent}\n */\n\n/**\n * All event listeners should follow the following format.\n *\n * @callback EventTarget~EventListener\n * @this {EventTarget}\n *\n * @param {EventTarget~Event} event\n *        the event that triggered this function\n *\n * @param {Object} [hash]\n *        hash of data sent during the event\n */\n\n/**\n * An object containing event names as keys and booleans as values.\n *\n * > NOTE: If an event name is set to a true value here {@link EventTarget#trigger}\n *         will have extra functionality. See that function for more information.\n *\n * @property EventTarget.prototype.allowedEvents_\n * @private\n */\nEventTarget.prototype.allowedEvents_ = {};\n\n/**\n * Adds an `event listener` to an instance of an `EventTarget`. An `event listener` is a\n * function that will get called when an event with a certain name gets triggered.\n *\n * @param {string|string[]} type\n *        An event name or an array of event names.\n *\n * @param {EventTarget~EventListener} fn\n *        The function to call with `EventTarget`s\n */\nEventTarget.prototype.on = function (type, fn) {\n  // Remove the addEventListener alias before calling Events.on\n  // so we don't get into an infinite type loop\n  var ael = this.addEventListener;\n\n  this.addEventListener = function () {};\n  on(this, type, fn);\n  this.addEventListener = ael;\n};\n\n/**\n * An alias of {@link EventTarget#on}. Allows `EventTarget` to mimic\n * the standard DOM API.\n *\n * @function\n * @see {@link EventTarget#on}\n */\nEventTarget.prototype.addEventListener = EventTarget.prototype.on;\n\n/**\n * Removes an `event listener` for a specific event from an instance of `EventTarget`.\n * This makes it so that the `event listener` will no longer get called when the\n * named event happens.\n *\n * @param {string|string[]} type\n *        An event name or an array of event names.\n *\n * @param {EventTarget~EventListener} fn\n *        The function to remove.\n */\nEventTarget.prototype.off = function (type, fn) {\n  off(this, type, fn);\n};\n\n/**\n * An alias of {@link EventTarget#off}. Allows `EventTarget` to mimic\n * the standard DOM API.\n *\n * @function\n * @see {@link EventTarget#off}\n */\nEventTarget.prototype.removeEventListener = EventTarget.prototype.off;\n\n/**\n * This function will add an `event listener` that gets triggered only once. After the\n * first trigger it will get removed. This is like adding an `event listener`\n * with {@link EventTarget#on} that calls {@link EventTarget#off} on itself.\n *\n * @param {string|string[]} type\n *        An event name or an array of event names.\n *\n * @param {EventTarget~EventListener} fn\n *        The function to be called once for each event name.\n */\nEventTarget.prototype.one = function (type, fn) {\n  // Remove the addEventListener alialing Events.on\n  // so we don't get into an infinite type loop\n  var ael = this.addEventListener;\n\n  this.addEventListener = function () {};\n  one(this, type, fn);\n  this.addEventListener = ael;\n};\n\n/**\n * This function causes an event to happen. This will then cause any `event listeners`\n * that are waiting for that event, to get called. If there are no `event listeners`\n * for an event then nothing will happen.\n *\n * If the name of the `Event` that is being triggered is in `EventTarget.allowedEvents_`.\n * Trigger will also call the `on` + `uppercaseEventName` function.\n *\n * Example:\n * 'click' is in `EventTarget.allowedEvents_`, so, trigger will attempt to call\n * `onClick` if it exists.\n *\n * @param {string|EventTarget~Event|Object} event\n *        The name of the event, an `Event`, or an object with a key of type set to\n *        an event name.\n */\nEventTarget.prototype.trigger = function (event) {\n  var type = event.type || event;\n\n  if (typeof event === 'string') {\n    event = { type: type };\n  }\n  event = fixEvent(event);\n\n  if (this.allowedEvents_[type] && this['on' + type]) {\n    this['on' + type](event);\n  }\n\n  trigger(this, event);\n};\n\n/**\n * An alias of {@link EventTarget#trigger}. Allows `EventTarget` to mimic\n * the standard DOM API.\n *\n * @function\n * @see {@link EventTarget#trigger}\n */\nEventTarget.prototype.dispatchEvent = EventTarget.prototype.trigger;\n\nvar EVENT_MAP = void 0;\n\nEventTarget.prototype.queueTrigger = function (event) {\n  var _this = this;\n\n  // only set up EVENT_MAP if it'll be used\n  if (!EVENT_MAP) {\n    EVENT_MAP = new Map();\n  }\n\n  var type = event.type || event;\n  var map = EVENT_MAP.get(this);\n\n  if (!map) {\n    map = new Map();\n    EVENT_MAP.set(this, map);\n  }\n\n  var oldTimeout = map.get(type);\n\n  map.delete(type);\n  window$1.clearTimeout(oldTimeout);\n\n  var timeout = window$1.setTimeout(function () {\n    // if we cleared out all timeouts for the current target, delete its map\n    if (map.size === 0) {\n      map = null;\n      EVENT_MAP.delete(_this);\n    }\n\n    _this.trigger(event);\n  }, 0);\n\n  map.set(type, timeout);\n};\n\n/**\n * @file mixins/evented.js\n * @module evented\n */\n\n/**\n * Returns whether or not an object has had the evented mixin applied.\n *\n * @param  {Object} object\n *         An object to test.\n *\n * @return {boolean}\n *         Whether or not the object appears to be evented.\n */\nvar isEvented = function isEvented(object) {\n  return object instanceof EventTarget || !!object.eventBusEl_ && ['on', 'one', 'off', 'trigger'].every(function (k) {\n    return typeof object[k] === 'function';\n  });\n};\n\n/**\n * Whether a value is a valid event type - non-empty string or array.\n *\n * @private\n * @param  {string|Array} type\n *         The type value to test.\n *\n * @return {boolean}\n *         Whether or not the type is a valid event type.\n */\nvar isValidEventType = function isValidEventType(type) {\n  return (\n    // The regex here verifies that the `type` contains at least one non-\n    // whitespace character.\n    typeof type === 'string' && /\\S/.test(type) || Array.isArray(type) && !!type.length\n  );\n};\n\n/**\n * Validates a value to determine if it is a valid event target. Throws if not.\n *\n * @private\n * @throws {Error}\n *         If the target does not appear to be a valid event target.\n *\n * @param  {Object} target\n *         The object to test.\n */\nvar validateTarget = function validateTarget(target) {\n  if (!target.nodeName && !isEvented(target)) {\n    throw new Error('Invalid target; must be a DOM node or evented object.');\n  }\n};\n\n/**\n * Validates a value to determine if it is a valid event target. Throws if not.\n *\n * @private\n * @throws {Error}\n *         If the type does not appear to be a valid event type.\n *\n * @param  {string|Array} type\n *         The type to test.\n */\nvar validateEventType = function validateEventType(type) {\n  if (!isValidEventType(type)) {\n    throw new Error('Invalid event type; must be a non-empty string or array.');\n  }\n};\n\n/**\n * Validates a value to determine if it is a valid listener. Throws if not.\n *\n * @private\n * @throws {Error}\n *         If the listener is not a function.\n *\n * @param  {Function} listener\n *         The listener to test.\n */\nvar validateListener = function validateListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new Error('Invalid listener; must be a function.');\n  }\n};\n\n/**\n * Takes an array of arguments given to `on()` or `one()`, validates them, and\n * normalizes them into an object.\n *\n * @private\n * @param  {Object} self\n *         The evented object on which `on()` or `one()` was called. This\n *         object will be bound as the `this` value for the listener.\n *\n * @param  {Array} args\n *         An array of arguments passed to `on()` or `one()`.\n *\n * @return {Object}\n *         An object containing useful values for `on()` or `one()` calls.\n */\nvar normalizeListenArgs = function normalizeListenArgs(self, args) {\n\n  // If the number of arguments is less than 3, the target is always the\n  // evented object itself.\n  var isTargetingSelf = args.length < 3 || args[0] === self || args[0] === self.eventBusEl_;\n  var target = void 0;\n  var type = void 0;\n  var listener = void 0;\n\n  if (isTargetingSelf) {\n    target = self.eventBusEl_;\n\n    // Deal with cases where we got 3 arguments, but we are still listening to\n    // the evented object itself.\n    if (args.length >= 3) {\n      args.shift();\n    }\n\n    type = args[0];\n    listener = args[1];\n  } else {\n    target = args[0];\n    type = args[1];\n    listener = args[2];\n  }\n\n  validateTarget(target);\n  validateEventType(type);\n  validateListener(listener);\n\n  listener = bind(self, listener);\n\n  return { isTargetingSelf: isTargetingSelf, target: target, type: type, listener: listener };\n};\n\n/**\n * Adds the listener to the event type(s) on the target, normalizing for\n * the type of target.\n *\n * @private\n * @param  {Element|Object} target\n *         A DOM node or evented object.\n *\n * @param  {string} method\n *         The event binding method to use (\"on\" or \"one\").\n *\n * @param  {string|Array} type\n *         One or more event type(s).\n *\n * @param  {Function} listener\n *         A listener function.\n */\nvar listen = function listen(target, method, type, listener) {\n  validateTarget(target);\n\n  if (target.nodeName) {\n    Events[method](target, type, listener);\n  } else {\n    target[method](type, listener);\n  }\n};\n\n/**\n * Contains methods that provide event capabilities to an object which is passed\n * to {@link module:evented|evented}.\n *\n * @mixin EventedMixin\n */\nvar EventedMixin = {\n\n  /**\n   * Add a listener to an event (or events) on this object or another evented\n   * object.\n   *\n   * @param  {string|Array|Element|Object} targetOrType\n   *         If this is a string or array, it represents the event type(s)\n   *         that will trigger the listener.\n   *\n   *         Another evented object can be passed here instead, which will\n   *         cause the listener to listen for events on _that_ object.\n   *\n   *         In either case, the listener's `this` value will be bound to\n   *         this object.\n   *\n   * @param  {string|Array|Function} typeOrListener\n   *         If the first argument was a string or array, this should be the\n   *         listener function. Otherwise, this is a string or array of event\n   *         type(s).\n   *\n   * @param  {Function} [listener]\n   *         If the first argument was another evented object, this will be\n   *         the listener function.\n   */\n  on: function on$$1() {\n    var _this = this;\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var _normalizeListenArgs = normalizeListenArgs(this, args),\n        isTargetingSelf = _normalizeListenArgs.isTargetingSelf,\n        target = _normalizeListenArgs.target,\n        type = _normalizeListenArgs.type,\n        listener = _normalizeListenArgs.listener;\n\n    listen(target, 'on', type, listener);\n\n    // If this object is listening to another evented object.\n    if (!isTargetingSelf) {\n\n      // If this object is disposed, remove the listener.\n      var removeListenerOnDispose = function removeListenerOnDispose() {\n        return _this.off(target, type, listener);\n      };\n\n      // Use the same function ID as the listener so we can remove it later it\n      // using the ID of the original listener.\n      removeListenerOnDispose.guid = listener.guid;\n\n      // Add a listener to the target's dispose event as well. This ensures\n      // that if the target is disposed BEFORE this object, we remove the\n      // removal listener that was just added. Otherwise, we create a memory leak.\n      var removeRemoverOnTargetDispose = function removeRemoverOnTargetDispose() {\n        return _this.off('dispose', removeListenerOnDispose);\n      };\n\n      // Use the same function ID as the listener so we can remove it later\n      // it using the ID of the original listener.\n      removeRemoverOnTargetDispose.guid = listener.guid;\n\n      listen(this, 'on', 'dispose', removeListenerOnDispose);\n      listen(target, 'on', 'dispose', removeRemoverOnTargetDispose);\n    }\n  },\n\n\n  /**\n   * Add a listener to an event (or events) on this object or another evented\n   * object. The listener will only be called once and then removed.\n   *\n   * @param  {string|Array|Element|Object} targetOrType\n   *         If this is a string or array, it represents the event type(s)\n   *         that will trigger the listener.\n   *\n   *         Another evented object can be passed here instead, which will\n   *         cause the listener to listen for events on _that_ object.\n   *\n   *         In either case, the listener's `this` value will be bound to\n   *         this object.\n   *\n   * @param  {string|Array|Function} typeOrListener\n   *         If the first argument was a string or array, this should be the\n   *         listener function. Otherwise, this is a string or array of event\n   *         type(s).\n   *\n   * @param  {Function} [listener]\n   *         If the first argument was another evented object, this will be\n   *         the listener function.\n   */\n  one: function one$$1() {\n    var _this2 = this;\n\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    var _normalizeListenArgs2 = normalizeListenArgs(this, args),\n        isTargetingSelf = _normalizeListenArgs2.isTargetingSelf,\n        target = _normalizeListenArgs2.target,\n        type = _normalizeListenArgs2.type,\n        listener = _normalizeListenArgs2.listener;\n\n    // Targeting this evented object.\n\n\n    if (isTargetingSelf) {\n      listen(target, 'one', type, listener);\n\n      // Targeting another evented object.\n    } else {\n      var wrapper = function wrapper() {\n        for (var _len3 = arguments.length, largs = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          largs[_key3] = arguments[_key3];\n        }\n\n        _this2.off(target, type, wrapper);\n        listener.apply(null, largs);\n      };\n\n      // Use the same function ID as the listener so we can remove it later\n      // it using the ID of the original listener.\n      wrapper.guid = listener.guid;\n      listen(target, 'one', type, wrapper);\n    }\n  },\n\n\n  /**\n   * Removes listener(s) from event(s) on an evented object.\n   *\n   * @param  {string|Array|Element|Object} [targetOrType]\n   *         If this is a string or array, it represents the event type(s).\n   *\n   *         Another evented object can be passed here instead, in which case\n   *         ALL 3 arguments are _required_.\n   *\n   * @param  {string|Array|Function} [typeOrListener]\n   *         If the first argument was a string or array, this may be the\n   *         listener function. Otherwise, this is a string or array of event\n   *         type(s).\n   *\n   * @param  {Function} [listener]\n   *         If the first argument was another evented object, this will be\n   *         the listener function; otherwise, _all_ listeners bound to the\n   *         event type(s) will be removed.\n   */\n  off: function off$$1(targetOrType, typeOrListener, listener) {\n\n    // Targeting this evented object.\n    if (!targetOrType || isValidEventType(targetOrType)) {\n      off(this.eventBusEl_, targetOrType, typeOrListener);\n\n      // Targeting another evented object.\n    } else {\n      var target = targetOrType;\n      var type = typeOrListener;\n\n      // Fail fast and in a meaningful way!\n      validateTarget(target);\n      validateEventType(type);\n      validateListener(listener);\n\n      // Ensure there's at least a guid, even if the function hasn't been used\n      listener = bind(this, listener);\n\n      // Remove the dispose listener on this evented object, which was given\n      // the same guid as the event listener in on().\n      this.off('dispose', listener);\n\n      if (target.nodeName) {\n        off(target, type, listener);\n        off(target, 'dispose', listener);\n      } else if (isEvented(target)) {\n        target.off(type, listener);\n        target.off('dispose', listener);\n      }\n    }\n  },\n\n\n  /**\n   * Fire an event on this evented object, causing its listeners to be called.\n   *\n   * @param   {string|Object} event\n   *          An event type or an object with a type property.\n   *\n   * @param   {Object} [hash]\n   *          An additional object to pass along to listeners.\n   *\n   * @returns {boolean}\n   *          Whether or not the default behavior was prevented.\n   */\n  trigger: function trigger$$1(event, hash) {\n    return trigger(this.eventBusEl_, event, hash);\n  }\n};\n\n/**\n * Applies {@link module:evented~EventedMixin|EventedMixin} to a target object.\n *\n * @param  {Object} target\n *         The object to which to add event methods.\n *\n * @param  {Object} [options={}]\n *         Options for customizing the mixin behavior.\n *\n * @param  {String} [options.eventBusKey]\n *         By default, adds a `eventBusEl_` DOM element to the target object,\n *         which is used as an event bus. If the target object already has a\n *         DOM element that should be used, pass its key here.\n *\n * @return {Object}\n *         The target object.\n */\nfunction evented(target) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var eventBusKey = options.eventBusKey;\n\n  // Set or create the eventBusEl_.\n\n  if (eventBusKey) {\n    if (!target[eventBusKey].nodeName) {\n      throw new Error('The eventBusKey \"' + eventBusKey + '\" does not refer to an element.');\n    }\n    target.eventBusEl_ = target[eventBusKey];\n  } else {\n    target.eventBusEl_ = createEl('span', { className: 'vjs-event-bus' });\n  }\n\n  assign(target, EventedMixin);\n\n  // When any evented object is disposed, it removes all its listeners.\n  target.on('dispose', function () {\n    target.off();\n    window$1.setTimeout(function () {\n      target.eventBusEl_ = null;\n    }, 0);\n  });\n\n  return target;\n}\n\n/**\n * @file mixins/stateful.js\n * @module stateful\n */\n\n/**\n * Contains methods that provide statefulness to an object which is passed\n * to {@link module:stateful}.\n *\n * @mixin StatefulMixin\n */\nvar StatefulMixin = {\n\n  /**\n   * A hash containing arbitrary keys and values representing the state of\n   * the object.\n   *\n   * @type {Object}\n   */\n  state: {},\n\n  /**\n   * Set the state of an object by mutating its\n   * {@link module:stateful~StatefulMixin.state|state} object in place.\n   *\n   * @fires   module:stateful~StatefulMixin#statechanged\n   * @param   {Object|Function} stateUpdates\n   *          A new set of properties to shallow-merge into the plugin state.\n   *          Can be a plain object or a function returning a plain object.\n   *\n   * @returns {Object|undefined}\n   *          An object containing changes that occurred. If no changes\n   *          occurred, returns `undefined`.\n   */\n  setState: function setState(stateUpdates) {\n    var _this = this;\n\n    // Support providing the `stateUpdates` state as a function.\n    if (typeof stateUpdates === 'function') {\n      stateUpdates = stateUpdates();\n    }\n\n    var changes = void 0;\n\n    each(stateUpdates, function (value, key) {\n\n      // Record the change if the value is different from what's in the\n      // current state.\n      if (_this.state[key] !== value) {\n        changes = changes || {};\n        changes[key] = {\n          from: _this.state[key],\n          to: value\n        };\n      }\n\n      _this.state[key] = value;\n    });\n\n    // Only trigger \"statechange\" if there were changes AND we have a trigger\n    // function. This allows us to not require that the target object be an\n    // evented object.\n    if (changes && isEvented(this)) {\n\n      /**\n       * An event triggered on an object that is both\n       * {@link module:stateful|stateful} and {@link module:evented|evented}\n       * indicating that its state has changed.\n       *\n       * @event    module:stateful~StatefulMixin#statechanged\n       * @type     {Object}\n       * @property {Object} changes\n       *           A hash containing the properties that were changed and\n       *           the values they were changed `from` and `to`.\n       */\n      this.trigger({\n        changes: changes,\n        type: 'statechanged'\n      });\n    }\n\n    return changes;\n  }\n};\n\n/**\n * Applies {@link module:stateful~StatefulMixin|StatefulMixin} to a target\n * object.\n *\n * If the target object is {@link module:evented|evented} and has a\n * `handleStateChanged` method, that method will be automatically bound to the\n * `statechanged` event on itself.\n *\n * @param   {Object} target\n *          The object to be made stateful.\n *\n * @param   {Object} [defaultState]\n *          A default set of properties to populate the newly-stateful object's\n *          `state` property.\n *\n * @returns {Object}\n *          Returns the `target`.\n */\nfunction stateful(target, defaultState) {\n  assign(target, StatefulMixin);\n\n  // This happens after the mixing-in because we need to replace the `state`\n  // added in that step.\n  target.state = assign({}, target.state, defaultState);\n\n  // Auto-bind the `handleStateChanged` method of the target object if it exists.\n  if (typeof target.handleStateChanged === 'function' && isEvented(target)) {\n    target.on('statechanged', target.handleStateChanged);\n  }\n\n  return target;\n}\n\n/**\n * @file to-title-case.js\n * @module to-title-case\n */\n\n/**\n * Uppercase the first letter of a string.\n *\n * @param {string} string\n *        String to be uppercased\n *\n * @return {string}\n *         The string with an uppercased first letter\n */\nfunction toTitleCase(string) {\n  if (typeof string !== 'string') {\n    return string;\n  }\n\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n/**\n * Compares the TitleCase versions of the two strings for equality.\n *\n * @param {string} str1\n *        The first string to compare\n *\n * @param {string} str2\n *        The second string to compare\n *\n * @return {boolean}\n *         Whether the TitleCase versions of the strings are equal\n */\nfunction titleCaseEquals(str1, str2) {\n  return toTitleCase(str1) === toTitleCase(str2);\n}\n\n/**\n * @file merge-options.js\n * @module merge-options\n */\n\n/**\n * Deep-merge one or more options objects, recursively merging **only** plain\n * object properties.\n *\n * @param   {Object[]} sources\n *          One or more objects to merge into a new object.\n *\n * @returns {Object}\n *          A new object that is the merged result of all sources.\n */\nfunction mergeOptions() {\n  var result = {};\n\n  for (var _len = arguments.length, sources = Array(_len), _key = 0; _key < _len; _key++) {\n    sources[_key] = arguments[_key];\n  }\n\n  sources.forEach(function (source) {\n    if (!source) {\n      return;\n    }\n\n    each(source, function (value, key) {\n      if (!isPlain(value)) {\n        result[key] = value;\n        return;\n      }\n\n      if (!isPlain(result[key])) {\n        result[key] = {};\n      }\n\n      result[key] = mergeOptions(result[key], value);\n    });\n  });\n\n  return result;\n}\n\n/**\n * Player Component - Base class for all UI objects\n *\n * @file component.js\n */\n\n/**\n * Base class for all UI Components.\n * Components are UI objects which represent both a javascript object and an element\n * in the DOM. They can be children of other components, and can have\n * children themselves.\n *\n * Components can also use methods from {@link EventTarget}\n */\n\nvar Component = function () {\n\n  /**\n   * A callback that is called when a component is ready. Does not have any\n   * paramters and any callback value will be ignored.\n   *\n   * @callback Component~ReadyCallback\n   * @this Component\n   */\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Object[]} [options.children]\n   *        An array of children objects to intialize this component with. Children objects have\n   *        a name property that will be used if more than one component of the same type needs to be\n   *        added.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        Function that gets called when the `Component` is ready.\n   */\n  function Component(player, options, ready) {\n    classCallCheck(this, Component);\n\n\n    // The component might be the player itself and we can't pass `this` to super\n    if (!player && this.play) {\n      this.player_ = player = this; // eslint-disable-line\n    } else {\n      this.player_ = player;\n    }\n\n    // Make a copy of prototype.options_ to protect against overriding defaults\n    this.options_ = mergeOptions({}, this.options_);\n\n    // Updated options with supplied options\n    options = this.options_ = mergeOptions(this.options_, options);\n\n    // Get ID from options or options element if one is supplied\n    this.id_ = options.id || options.el && options.el.id;\n\n    // If there was no ID from the options, generate one\n    if (!this.id_) {\n      // Don't require the player ID function in the case of mock players\n      var id = player && player.id && player.id() || 'no_player';\n\n      this.id_ = id + '_component_' + newGUID();\n    }\n\n    this.name_ = options.name || null;\n\n    // Create element if one wasn't provided in options\n    if (options.el) {\n      this.el_ = options.el;\n    } else if (options.createEl !== false) {\n      this.el_ = this.createEl();\n    }\n\n    // if evented is anything except false, we want to mixin in evented\n    if (options.evented !== false) {\n      // Make this an evented object and use `el_`, if available, as its event bus\n      evented(this, { eventBusKey: this.el_ ? 'el_' : null });\n    }\n    stateful(this, this.constructor.defaultState);\n\n    this.children_ = [];\n    this.childIndex_ = {};\n    this.childNameIndex_ = {};\n\n    // Add any child components in options\n    if (options.initChildren !== false) {\n      this.initChildren();\n    }\n\n    this.ready(ready);\n    // Don't want to trigger ready here or it will before init is actually\n    // finished for all children that run this constructor\n\n    if (options.reportTouchActivity !== false) {\n      this.enableTouchActivity();\n    }\n  }\n\n  /**\n   * Dispose of the `Component` and all child components.\n   *\n   * @fires Component#dispose\n   */\n\n\n  Component.prototype.dispose = function dispose() {\n\n    /**\n     * Triggered when a `Component` is disposed.\n     *\n     * @event Component#dispose\n     * @type {EventTarget~Event}\n     *\n     * @property {boolean} [bubbles=false]\n     *           set to false so that the close event does not\n     *           bubble up\n     */\n    this.trigger({ type: 'dispose', bubbles: false });\n\n    // Dispose all children.\n    if (this.children_) {\n      for (var i = this.children_.length - 1; i >= 0; i--) {\n        if (this.children_[i].dispose) {\n          this.children_[i].dispose();\n        }\n      }\n    }\n\n    // Delete child references\n    this.children_ = null;\n    this.childIndex_ = null;\n    this.childNameIndex_ = null;\n\n    if (this.el_) {\n      // Remove element from DOM\n      if (this.el_.parentNode) {\n        this.el_.parentNode.removeChild(this.el_);\n      }\n\n      removeData(this.el_);\n      this.el_ = null;\n    }\n\n    // remove reference to the player after disposing of the element\n    this.player_ = null;\n  };\n\n  /**\n   * Return the {@link Player} that the `Component` has attached to.\n   *\n   * @return {Player}\n   *         The player that this `Component` has attached to.\n   */\n\n\n  Component.prototype.player = function player() {\n    return this.player_;\n  };\n\n  /**\n   * Deep merge of options objects with new options.\n   * > Note: When both `obj` and `options` contain properties whose values are objects.\n   *         The two properties get merged using {@link module:mergeOptions}\n   *\n   * @param {Object} obj\n   *        The object that contains new options.\n   *\n   * @return {Object}\n   *         A new object of `this.options_` and `obj` merged together.\n   *\n   * @deprecated since version 5\n   */\n\n\n  Component.prototype.options = function options(obj) {\n    log$1.warn('this.options() has been deprecated and will be moved to the constructor in 6.0');\n\n    if (!obj) {\n      return this.options_;\n    }\n\n    this.options_ = mergeOptions(this.options_, obj);\n    return this.options_;\n  };\n\n  /**\n   * Get the `Component`s DOM element\n   *\n   * @return {Element}\n   *         The DOM element for this `Component`.\n   */\n\n\n  Component.prototype.el = function el() {\n    return this.el_;\n  };\n\n  /**\n   * Create the `Component`s DOM element.\n   *\n   * @param {string} [tagName]\n   *        Element's DOM node type. e.g. 'div'\n   *\n   * @param {Object} [properties]\n   *        An object of properties that should be set.\n   *\n   * @param {Object} [attributes]\n   *        An object of attributes that should be set.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n\n\n  Component.prototype.createEl = function createEl$$1(tagName, properties, attributes) {\n    return createEl(tagName, properties, attributes);\n  };\n\n  /**\n   * Localize a string given the string in english.\n   *\n   * If tokens are provided, it'll try and run a simple token replacement on the provided string.\n   * The tokens it looks for look like `{1}` with the index being 1-indexed into the tokens array.\n   *\n   * If a `defaultValue` is provided, it'll use that over `string`,\n   * if a value isn't found in provided language files.\n   * This is useful if you want to have a descriptive key for token replacement\n   * but have a succinct localized string and not require `en.json` to be included.\n   *\n   * Currently, it is used for the progress bar timing.\n   * ```js\n   * {\n   *   \"progress bar timing: currentTime={1} duration={2}\": \"{1} of {2}\"\n   * }\n   * ```\n   * It is then used like so:\n   * ```js\n   * this.localize('progress bar timing: currentTime={1} duration{2}',\n   *               [this.player_.currentTime(), this.player_.duration()],\n   *               '{1} of {2}');\n   * ```\n   *\n   * Which outputs something like: `01:23 of 24:56`.\n   *\n   *\n   * @param {string} string\n   *        The string to localize and the key to lookup in the language files.\n   * @param {string[]} [tokens]\n   *        If the current item has token replacements, provide the tokens here.\n   * @param {string} [defaultValue]\n   *        Defaults to `string`. Can be a default value to use for token replacement\n   *        if the lookup key is needed to be separate.\n   *\n   * @return {string}\n   *         The localized string or if no localization exists the english string.\n   */\n\n\n  Component.prototype.localize = function localize(string, tokens) {\n    var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : string;\n\n    var code = this.player_.language && this.player_.language();\n    var languages = this.player_.languages && this.player_.languages();\n    var language = languages && languages[code];\n    var primaryCode = code && code.split('-')[0];\n    var primaryLang = languages && languages[primaryCode];\n\n    var localizedString = defaultValue;\n\n    if (language && language[string]) {\n      localizedString = language[string];\n    } else if (primaryLang && primaryLang[string]) {\n      localizedString = primaryLang[string];\n    }\n\n    if (tokens) {\n      localizedString = localizedString.replace(/\\{(\\d+)\\}/g, function (match, index) {\n        var value = tokens[index - 1];\n        var ret = value;\n\n        if (typeof value === 'undefined') {\n          ret = match;\n        }\n\n        return ret;\n      });\n    }\n\n    return localizedString;\n  };\n\n  /**\n   * Return the `Component`s DOM element. This is where children get inserted.\n   * This will usually be the the same as the element returned in {@link Component#el}.\n   *\n   * @return {Element}\n   *         The content element for this `Component`.\n   */\n\n\n  Component.prototype.contentEl = function contentEl() {\n    return this.contentEl_ || this.el_;\n  };\n\n  /**\n   * Get this `Component`s ID\n   *\n   * @return {string}\n   *         The id of this `Component`\n   */\n\n\n  Component.prototype.id = function id() {\n    return this.id_;\n  };\n\n  /**\n   * Get the `Component`s name. The name gets used to reference the `Component`\n   * and is set during registration.\n   *\n   * @return {string}\n   *         The name of this `Component`.\n   */\n\n\n  Component.prototype.name = function name() {\n    return this.name_;\n  };\n\n  /**\n   * Get an array of all child components\n   *\n   * @return {Array}\n   *         The children\n   */\n\n\n  Component.prototype.children = function children() {\n    return this.children_;\n  };\n\n  /**\n   * Returns the child `Component` with the given `id`.\n   *\n   * @param {string} id\n   *        The id of the child `Component` to get.\n   *\n   * @return {Component|undefined}\n   *         The child `Component` with the given `id` or undefined.\n   */\n\n\n  Component.prototype.getChildById = function getChildById(id) {\n    return this.childIndex_[id];\n  };\n\n  /**\n   * Returns the child `Component` with the given `name`.\n   *\n   * @param {string} name\n   *        The name of the child `Component` to get.\n   *\n   * @return {Component|undefined}\n   *         The child `Component` with the given `name` or undefined.\n   */\n\n\n  Component.prototype.getChild = function getChild(name) {\n    if (!name) {\n      return;\n    }\n\n    name = toTitleCase(name);\n\n    return this.childNameIndex_[name];\n  };\n\n  /**\n   * Add a child `Component` inside the current `Component`.\n   *\n   *\n   * @param {string|Component} child\n   *        The name or instance of a child to add.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of options that will get passed to children of\n   *        the child.\n   *\n   * @param {number} [index=this.children_.length]\n   *        The index to attempt to add a child into.\n   *\n   * @return {Component}\n   *         The `Component` that gets added as a child. When using a string the\n   *         `Component` will get created by this process.\n   */\n\n\n  Component.prototype.addChild = function addChild(child) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.children_.length;\n\n    var component = void 0;\n    var componentName = void 0;\n\n    // If child is a string, create component with options\n    if (typeof child === 'string') {\n      componentName = toTitleCase(child);\n\n      var componentClassName = options.componentClass || componentName;\n\n      // Set name through options\n      options.name = componentName;\n\n      // Create a new object & element for this controls set\n      // If there's no .player_, this is a player\n      var ComponentClass = Component.getComponent(componentClassName);\n\n      if (!ComponentClass) {\n        throw new Error('Component ' + componentClassName + ' does not exist');\n      }\n\n      // data stored directly on the videojs object may be\n      // misidentified as a component to retain\n      // backwards-compatibility with 4.x. check to make sure the\n      // component class can be instantiated.\n      if (typeof ComponentClass !== 'function') {\n        return null;\n      }\n\n      component = new ComponentClass(this.player_ || this, options);\n\n      // child is a component instance\n    } else {\n      component = child;\n    }\n\n    this.children_.splice(index, 0, component);\n\n    if (typeof component.id === 'function') {\n      this.childIndex_[component.id()] = component;\n    }\n\n    // If a name wasn't used to create the component, check if we can use the\n    // name function of the component\n    componentName = componentName || component.name && toTitleCase(component.name());\n\n    if (componentName) {\n      this.childNameIndex_[componentName] = component;\n    }\n\n    // Add the UI object's element to the container div (box)\n    // Having an element is not required\n    if (typeof component.el === 'function' && component.el()) {\n      var childNodes = this.contentEl().children;\n      var refNode = childNodes[index] || null;\n\n      this.contentEl().insertBefore(component.el(), refNode);\n    }\n\n    // Return so it can stored on parent object if desired.\n    return component;\n  };\n\n  /**\n   * Remove a child `Component` from this `Component`s list of children. Also removes\n   * the child `Component`s element from this `Component`s element.\n   *\n   * @param {Component} component\n   *        The child `Component` to remove.\n   */\n\n\n  Component.prototype.removeChild = function removeChild(component) {\n    if (typeof component === 'string') {\n      component = this.getChild(component);\n    }\n\n    if (!component || !this.children_) {\n      return;\n    }\n\n    var childFound = false;\n\n    for (var i = this.children_.length - 1; i >= 0; i--) {\n      if (this.children_[i] === component) {\n        childFound = true;\n        this.children_.splice(i, 1);\n        break;\n      }\n    }\n\n    if (!childFound) {\n      return;\n    }\n\n    this.childIndex_[component.id()] = null;\n    this.childNameIndex_[component.name()] = null;\n\n    var compEl = component.el();\n\n    if (compEl && compEl.parentNode === this.contentEl()) {\n      this.contentEl().removeChild(component.el());\n    }\n  };\n\n  /**\n   * Add and initialize default child `Component`s based upon options.\n   */\n\n\n  Component.prototype.initChildren = function initChildren() {\n    var _this = this;\n\n    var children = this.options_.children;\n\n    if (children) {\n      // `this` is `parent`\n      var parentOptions = this.options_;\n\n      var handleAdd = function handleAdd(child) {\n        var name = child.name;\n        var opts = child.opts;\n\n        // Allow options for children to be set at the parent options\n        // e.g. videojs(id, { controlBar: false });\n        // instead of videojs(id, { children: { controlBar: false });\n        if (parentOptions[name] !== undefined) {\n          opts = parentOptions[name];\n        }\n\n        // Allow for disabling default components\n        // e.g. options['children']['posterImage'] = false\n        if (opts === false) {\n          return;\n        }\n\n        // Allow options to be passed as a simple boolean if no configuration\n        // is necessary.\n        if (opts === true) {\n          opts = {};\n        }\n\n        // We also want to pass the original player options\n        // to each component as well so they don't need to\n        // reach back into the player for options later.\n        opts.playerOptions = _this.options_.playerOptions;\n\n        // Create and add the child component.\n        // Add a direct reference to the child by name on the parent instance.\n        // If two of the same component are used, different names should be supplied\n        // for each\n        var newChild = _this.addChild(name, opts);\n\n        if (newChild) {\n          _this[name] = newChild;\n        }\n      };\n\n      // Allow for an array of children details to passed in the options\n      var workingChildren = void 0;\n      var Tech = Component.getComponent('Tech');\n\n      if (Array.isArray(children)) {\n        workingChildren = children;\n      } else {\n        workingChildren = Object.keys(children);\n      }\n\n      workingChildren\n      // children that are in this.options_ but also in workingChildren  would\n      // give us extra children we do not want. So, we want to filter them out.\n      .concat(Object.keys(this.options_).filter(function (child) {\n        return !workingChildren.some(function (wchild) {\n          if (typeof wchild === 'string') {\n            return child === wchild;\n          }\n          return child === wchild.name;\n        });\n      })).map(function (child) {\n        var name = void 0;\n        var opts = void 0;\n\n        if (typeof child === 'string') {\n          name = child;\n          opts = children[name] || _this.options_[name] || {};\n        } else {\n          name = child.name;\n          opts = child;\n        }\n\n        return { name: name, opts: opts };\n      }).filter(function (child) {\n        // we have to make sure that child.name isn't in the techOrder since\n        // techs are registerd as Components but can't aren't compatible\n        // See https://github.com/videojs/video.js/issues/2772\n        var c = Component.getComponent(child.opts.componentClass || toTitleCase(child.name));\n\n        return c && !Tech.isTech(c);\n      }).forEach(handleAdd);\n    }\n  };\n\n  /**\n   * Builds the default DOM class name. Should be overriden by sub-components.\n   *\n   * @return {string}\n   *         The DOM class name for this object.\n   *\n   * @abstract\n   */\n\n\n  Component.prototype.buildCSSClass = function buildCSSClass() {\n    // Child classes can include a function that does:\n    // return 'CLASS NAME' + this._super();\n    return '';\n  };\n\n  /**\n   * Bind a listener to the component's ready state.\n   * Different from event listeners in that if the ready event has already happened\n   * it will trigger the function immediately.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n\n\n  Component.prototype.ready = function ready(fn) {\n    var sync = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (!fn) {\n      return;\n    }\n\n    if (!this.isReady_) {\n      this.readyQueue_ = this.readyQueue_ || [];\n      this.readyQueue_.push(fn);\n      return;\n    }\n\n    if (sync) {\n      fn.call(this);\n    } else {\n      // Call the function asynchronously by default for consistency\n      this.setTimeout(fn, 1);\n    }\n  };\n\n  /**\n   * Trigger all the ready listeners for this `Component`.\n   *\n   * @fires Component#ready\n   */\n\n\n  Component.prototype.triggerReady = function triggerReady() {\n    this.isReady_ = true;\n\n    // Ensure ready is triggered asynchronously\n    this.setTimeout(function () {\n      var readyQueue = this.readyQueue_;\n\n      // Reset Ready Queue\n      this.readyQueue_ = [];\n\n      if (readyQueue && readyQueue.length > 0) {\n        readyQueue.forEach(function (fn) {\n          fn.call(this);\n        }, this);\n      }\n\n      // Allow for using event listeners also\n      /**\n       * Triggered when a `Component` is ready.\n       *\n       * @event Component#ready\n       * @type {EventTarget~Event}\n       */\n      this.trigger('ready');\n    }, 1);\n  };\n\n  /**\n   * Find a single DOM element matching a `selector`. This can be within the `Component`s\n   * `contentEl()` or another custom context.\n   *\n   * @param {string} selector\n   *        A valid CSS selector, which will be passed to `querySelector`.\n   *\n   * @param {Element|string} [context=this.contentEl()]\n   *        A DOM element within which to query. Can also be a selector string in\n   *        which case the first matching element will get used as context. If\n   *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns\n   *        nothing it falls back to `document`.\n   *\n   * @return {Element|null}\n   *         the dom element that was found, or null\n   *\n   * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)\n   */\n\n\n  Component.prototype.$ = function $$$1(selector, context) {\n    return $(selector, context || this.contentEl());\n  };\n\n  /**\n   * Finds all DOM element matching a `selector`. This can be within the `Component`s\n   * `contentEl()` or another custom context.\n   *\n   * @param {string} selector\n   *        A valid CSS selector, which will be passed to `querySelectorAll`.\n   *\n   * @param {Element|string} [context=this.contentEl()]\n   *        A DOM element within which to query. Can also be a selector string in\n   *        which case the first matching element will get used as context. If\n   *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns\n   *        nothing it falls back to `document`.\n   *\n   * @return {NodeList}\n   *         a list of dom elements that were found\n   *\n   * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)\n   */\n\n\n  Component.prototype.$$ = function $$$$1(selector, context) {\n    return $$(selector, context || this.contentEl());\n  };\n\n  /**\n   * Check if a component's element has a CSS class name.\n   *\n   * @param {string} classToCheck\n   *        CSS class name to check.\n   *\n   * @return {boolean}\n   *         - True if the `Component` has the class.\n   *         - False if the `Component` does not have the class`\n   */\n\n\n  Component.prototype.hasClass = function hasClass$$1(classToCheck) {\n    return hasClass(this.el_, classToCheck);\n  };\n\n  /**\n   * Add a CSS class name to the `Component`s element.\n   *\n   * @param {string} classToAdd\n   *        CSS class name to add\n   */\n\n\n  Component.prototype.addClass = function addClass$$1(classToAdd) {\n    addClass(this.el_, classToAdd);\n  };\n\n  /**\n   * Remove a CSS class name from the `Component`s element.\n   *\n   * @param {string} classToRemove\n   *        CSS class name to remove\n   */\n\n\n  Component.prototype.removeClass = function removeClass$$1(classToRemove) {\n    removeClass(this.el_, classToRemove);\n  };\n\n  /**\n   * Add or remove a CSS class name from the component's element.\n   * - `classToToggle` gets added when {@link Component#hasClass} would return false.\n   * - `classToToggle` gets removed when {@link Component#hasClass} would return true.\n   *\n   * @param  {string} classToToggle\n   *         The class to add or remove based on (@link Component#hasClass}\n   *\n   * @param  {boolean|Dom~predicate} [predicate]\n   *         An {@link Dom~predicate} function or a boolean\n   */\n\n\n  Component.prototype.toggleClass = function toggleClass$$1(classToToggle, predicate) {\n    toggleClass(this.el_, classToToggle, predicate);\n  };\n\n  /**\n   * Show the `Component`s element if it is hidden by removing the\n   * 'vjs-hidden' class name from it.\n   */\n\n\n  Component.prototype.show = function show() {\n    this.removeClass('vjs-hidden');\n  };\n\n  /**\n   * Hide the `Component`s element if it is currently showing by adding the\n   * 'vjs-hidden` class name to it.\n   */\n\n\n  Component.prototype.hide = function hide() {\n    this.addClass('vjs-hidden');\n  };\n\n  /**\n   * Lock a `Component`s element in its visible state by adding the 'vjs-lock-showing'\n   * class name to it. Used during fadeIn/fadeOut.\n   *\n   * @private\n   */\n\n\n  Component.prototype.lockShowing = function lockShowing() {\n    this.addClass('vjs-lock-showing');\n  };\n\n  /**\n   * Unlock a `Component`s element from its visible state by removing the 'vjs-lock-showing'\n   * class name from it. Used during fadeIn/fadeOut.\n   *\n   * @private\n   */\n\n\n  Component.prototype.unlockShowing = function unlockShowing() {\n    this.removeClass('vjs-lock-showing');\n  };\n\n  /**\n   * Get the value of an attribute on the `Component`s element.\n   *\n   * @param {string} attribute\n   *        Name of the attribute to get the value from.\n   *\n   * @return {string|null}\n   *         - The value of the attribute that was asked for.\n   *         - Can be an empty string on some browsers if the attribute does not exist\n   *           or has no value\n   *         - Most browsers will return null if the attibute does not exist or has\n   *           no value.\n   *\n   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute}\n   */\n\n\n  Component.prototype.getAttribute = function getAttribute$$1(attribute) {\n    return getAttribute(this.el_, attribute);\n  };\n\n  /**\n   * Set the value of an attribute on the `Component`'s element\n   *\n   * @param {string} attribute\n   *        Name of the attribute to set.\n   *\n   * @param {string} value\n   *        Value to set the attribute to.\n   *\n   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute}\n   */\n\n\n  Component.prototype.setAttribute = function setAttribute$$1(attribute, value) {\n    setAttribute(this.el_, attribute, value);\n  };\n\n  /**\n   * Remove an attribute from the `Component`s element.\n   *\n   * @param {string} attribute\n   *        Name of the attribute to remove.\n   *\n   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute}\n   */\n\n\n  Component.prototype.removeAttribute = function removeAttribute$$1(attribute) {\n    removeAttribute(this.el_, attribute);\n  };\n\n  /**\n   * Get or set the width of the component based upon the CSS styles.\n   * See {@link Component#dimension} for more detailed information.\n   *\n   * @param {number|string} [num]\n   *        The width that you want to set postfixed with '%', 'px' or nothing.\n   *\n   * @param {boolean} [skipListeners]\n   *        Skip the componentresize event trigger\n   *\n   * @return {number|string}\n   *         The width when getting, zero if there is no width. Can be a string\n   *           postpixed with '%' or 'px'.\n   */\n\n\n  Component.prototype.width = function width(num, skipListeners) {\n    return this.dimension('width', num, skipListeners);\n  };\n\n  /**\n   * Get or set the height of the component based upon the CSS styles.\n   * See {@link Component#dimension} for more detailed information.\n   *\n   * @param {number|string} [num]\n   *        The height that you want to set postfixed with '%', 'px' or nothing.\n   *\n   * @param {boolean} [skipListeners]\n   *        Skip the componentresize event trigger\n   *\n   * @return {number|string}\n   *         The width when getting, zero if there is no width. Can be a string\n   *         postpixed with '%' or 'px'.\n   */\n\n\n  Component.prototype.height = function height(num, skipListeners) {\n    return this.dimension('height', num, skipListeners);\n  };\n\n  /**\n   * Set both the width and height of the `Component` element at the same time.\n   *\n   * @param  {number|string} width\n   *         Width to set the `Component`s element to.\n   *\n   * @param  {number|string} height\n   *         Height to set the `Component`s element to.\n   */\n\n\n  Component.prototype.dimensions = function dimensions(width, height) {\n    // Skip componentresize listeners on width for optimization\n    this.width(width, true);\n    this.height(height);\n  };\n\n  /**\n   * Get or set width or height of the `Component` element. This is the shared code\n   * for the {@link Component#width} and {@link Component#height}.\n   *\n   * Things to know:\n   * - If the width or height in an number this will return the number postfixed with 'px'.\n   * - If the width/height is a percent this will return the percent postfixed with '%'\n   * - Hidden elements have a width of 0 with `window.getComputedStyle`. This function\n   *   defaults to the `Component`s `style.width` and falls back to `window.getComputedStyle`.\n   *   See [this]{@link http://www.foliotek.com/devblog/getting-the-width-of-a-hidden-element-with-jquery-using-width/}\n   *   for more information\n   * - If you want the computed style of the component, use {@link Component#currentWidth}\n   *   and {@link {Component#currentHeight}\n   *\n   * @fires Component#componentresize\n   *\n   * @param {string} widthOrHeight\n   8        'width' or 'height'\n   *\n   * @param  {number|string} [num]\n   8         New dimension\n   *\n   * @param  {boolean} [skipListeners]\n   *         Skip componentresize event trigger\n   *\n   * @return {number}\n   *         The dimension when getting or 0 if unset\n   */\n\n\n  Component.prototype.dimension = function dimension(widthOrHeight, num, skipListeners) {\n    if (num !== undefined) {\n      // Set to zero if null or literally NaN (NaN !== NaN)\n      if (num === null || num !== num) {\n        num = 0;\n      }\n\n      // Check if using css width/height (% or px) and adjust\n      if (('' + num).indexOf('%') !== -1 || ('' + num).indexOf('px') !== -1) {\n        this.el_.style[widthOrHeight] = num;\n      } else if (num === 'auto') {\n        this.el_.style[widthOrHeight] = '';\n      } else {\n        this.el_.style[widthOrHeight] = num + 'px';\n      }\n\n      // skipListeners allows us to avoid triggering the resize event when setting both width and height\n      if (!skipListeners) {\n        /**\n         * Triggered when a component is resized.\n         *\n         * @event Component#componentresize\n         * @type {EventTarget~Event}\n         */\n        this.trigger('componentresize');\n      }\n\n      return;\n    }\n\n    // Not setting a value, so getting it\n    // Make sure element exists\n    if (!this.el_) {\n      return 0;\n    }\n\n    // Get dimension value from style\n    var val = this.el_.style[widthOrHeight];\n    var pxIndex = val.indexOf('px');\n\n    if (pxIndex !== -1) {\n      // Return the pixel value with no 'px'\n      return parseInt(val.slice(0, pxIndex), 10);\n    }\n\n    // No px so using % or no style was set, so falling back to offsetWidth/height\n    // If component has display:none, offset will return 0\n    // TODO: handle display:none and no dimension style using px\n    return parseInt(this.el_['offset' + toTitleCase(widthOrHeight)], 10);\n  };\n\n  /**\n   * Get the width or the height of the `Component` elements computed style. Uses\n   * `window.getComputedStyle`.\n   *\n   * @param {string} widthOrHeight\n   *        A string containing 'width' or 'height'. Whichever one you want to get.\n   *\n   * @return {number}\n   *         The dimension that gets asked for or 0 if nothing was set\n   *         for that dimension.\n   */\n\n\n  Component.prototype.currentDimension = function currentDimension(widthOrHeight) {\n    var computedWidthOrHeight = 0;\n\n    if (widthOrHeight !== 'width' && widthOrHeight !== 'height') {\n      throw new Error('currentDimension only accepts width or height value');\n    }\n\n    if (typeof window$1.getComputedStyle === 'function') {\n      var computedStyle = window$1.getComputedStyle(this.el_);\n\n      computedWidthOrHeight = computedStyle.getPropertyValue(widthOrHeight) || computedStyle[widthOrHeight];\n    }\n\n    // remove 'px' from variable and parse as integer\n    computedWidthOrHeight = parseFloat(computedWidthOrHeight);\n\n    // if the computed value is still 0, it's possible that the browser is lying\n    // and we want to check the offset values.\n    // This code also runs wherever getComputedStyle doesn't exist.\n    if (computedWidthOrHeight === 0) {\n      var rule = 'offset' + toTitleCase(widthOrHeight);\n\n      computedWidthOrHeight = this.el_[rule];\n    }\n\n    return computedWidthOrHeight;\n  };\n\n  /**\n   * An object that contains width and height values of the `Component`s\n   * computed style. Uses `window.getComputedStyle`.\n   *\n   * @typedef {Object} Component~DimensionObject\n   *\n   * @property {number} width\n   *           The width of the `Component`s computed style.\n   *\n   * @property {number} height\n   *           The height of the `Component`s computed style.\n   */\n\n  /**\n   * Get an object that contains width and height values of the `Component`s\n   * computed style.\n   *\n   * @return {Component~DimensionObject}\n   *         The dimensions of the components element\n   */\n\n\n  Component.prototype.currentDimensions = function currentDimensions() {\n    return {\n      width: this.currentDimension('width'),\n      height: this.currentDimension('height')\n    };\n  };\n\n  /**\n   * Get the width of the `Component`s computed style. Uses `window.getComputedStyle`.\n   *\n   * @return {number} width\n   *           The width of the `Component`s computed style.\n   */\n\n\n  Component.prototype.currentWidth = function currentWidth() {\n    return this.currentDimension('width');\n  };\n\n  /**\n   * Get the height of the `Component`s computed style. Uses `window.getComputedStyle`.\n   *\n   * @return {number} height\n   *           The height of the `Component`s computed style.\n   */\n\n\n  Component.prototype.currentHeight = function currentHeight() {\n    return this.currentDimension('height');\n  };\n\n  /**\n   * Set the focus to this component\n   */\n\n\n  Component.prototype.focus = function focus() {\n    this.el_.focus();\n  };\n\n  /**\n   * Remove the focus from this component\n   */\n\n\n  Component.prototype.blur = function blur() {\n    this.el_.blur();\n  };\n\n  /**\n   * Emit a 'tap' events when touch event support gets detected. This gets used to\n   * support toggling the controls through a tap on the video. They get enabled\n   * because every sub-component would have extra overhead otherwise.\n   *\n   * @private\n   * @fires Component#tap\n   * @listens Component#touchstart\n   * @listens Component#touchmove\n   * @listens Component#touchleave\n   * @listens Component#touchcancel\n   * @listens Component#touchend\n    */\n\n\n  Component.prototype.emitTapEvents = function emitTapEvents() {\n    // Track the start time so we can determine how long the touch lasted\n    var touchStart = 0;\n    var firstTouch = null;\n\n    // Maximum movement allowed during a touch event to still be considered a tap\n    // Other popular libs use anywhere from 2 (hammer.js) to 15,\n    // so 10 seems like a nice, round number.\n    var tapMovementThreshold = 10;\n\n    // The maximum length a touch can be while still being considered a tap\n    var touchTimeThreshold = 200;\n\n    var couldBeTap = void 0;\n\n    this.on('touchstart', function (event) {\n      // If more than one finger, don't consider treating this as a click\n      if (event.touches.length === 1) {\n        // Copy pageX/pageY from the object\n        firstTouch = {\n          pageX: event.touches[0].pageX,\n          pageY: event.touches[0].pageY\n        };\n        // Record start time so we can detect a tap vs. \"touch and hold\"\n        touchStart = new Date().getTime();\n        // Reset couldBeTap tracking\n        couldBeTap = true;\n      }\n    });\n\n    this.on('touchmove', function (event) {\n      // If more than one finger, don't consider treating this as a click\n      if (event.touches.length > 1) {\n        couldBeTap = false;\n      } else if (firstTouch) {\n        // Some devices will throw touchmoves for all but the slightest of taps.\n        // So, if we moved only a small distance, this could still be a tap\n        var xdiff = event.touches[0].pageX - firstTouch.pageX;\n        var ydiff = event.touches[0].pageY - firstTouch.pageY;\n        var touchDistance = Math.sqrt(xdiff * xdiff + ydiff * ydiff);\n\n        if (touchDistance > tapMovementThreshold) {\n          couldBeTap = false;\n        }\n      }\n    });\n\n    var noTap = function noTap() {\n      couldBeTap = false;\n    };\n\n    // TODO: Listen to the original target. http://youtu.be/DujfpXOKUp8?t=13m8s\n    this.on('touchleave', noTap);\n    this.on('touchcancel', noTap);\n\n    // When the touch ends, measure how long it took and trigger the appropriate\n    // event\n    this.on('touchend', function (event) {\n      firstTouch = null;\n      // Proceed only if the touchmove/leave/cancel event didn't happen\n      if (couldBeTap === true) {\n        // Measure how long the touch lasted\n        var touchTime = new Date().getTime() - touchStart;\n\n        // Make sure the touch was less than the threshold to be considered a tap\n        if (touchTime < touchTimeThreshold) {\n          // Don't let browser turn this into a click\n          event.preventDefault();\n          /**\n           * Triggered when a `Component` is tapped.\n           *\n           * @event Component#tap\n           * @type {EventTarget~Event}\n           */\n          this.trigger('tap');\n          // It may be good to copy the touchend event object and change the\n          // type to tap, if the other event properties aren't exact after\n          // Events.fixEvent runs (e.g. event.target)\n        }\n      }\n    });\n  };\n\n  /**\n   * This function reports user activity whenever touch events happen. This can get\n   * turned off by any sub-components that wants touch events to act another way.\n   *\n   * Report user touch activity when touch events occur. User activity gets used to\n   * determine when controls should show/hide. It is simple when it comes to mouse\n   * events, because any mouse event should show the controls. So we capture mouse\n   * events that bubble up to the player and report activity when that happens.\n   * With touch events it isn't as easy as `touchstart` and `touchend` toggle player\n   * controls. So touch events can't help us at the player level either.\n   *\n   * User activity gets checked asynchronously. So what could happen is a tap event\n   * on the video turns the controls off. Then the `touchend` event bubbles up to\n   * the player. Which, if it reported user activity, would turn the controls right\n   * back on. We also don't want to completely block touch events from bubbling up.\n   * Furthermore a `touchmove` event and anything other than a tap, should not turn\n   * controls back on.\n   *\n   * @listens Component#touchstart\n   * @listens Component#touchmove\n   * @listens Component#touchend\n   * @listens Component#touchcancel\n   */\n\n\n  Component.prototype.enableTouchActivity = function enableTouchActivity() {\n    // Don't continue if the root player doesn't support reporting user activity\n    if (!this.player() || !this.player().reportUserActivity) {\n      return;\n    }\n\n    // listener for reporting that the user is active\n    var report = bind(this.player(), this.player().reportUserActivity);\n\n    var touchHolding = void 0;\n\n    this.on('touchstart', function () {\n      report();\n      // For as long as the they are touching the device or have their mouse down,\n      // we consider them active even if they're not moving their finger or mouse.\n      // So we want to continue to update that they are active\n      this.clearInterval(touchHolding);\n      // report at the same interval as activityCheck\n      touchHolding = this.setInterval(report, 250);\n    });\n\n    var touchEnd = function touchEnd(event) {\n      report();\n      // stop the interval that maintains activity if the touch is holding\n      this.clearInterval(touchHolding);\n    };\n\n    this.on('touchmove', report);\n    this.on('touchend', touchEnd);\n    this.on('touchcancel', touchEnd);\n  };\n\n  /**\n   * A callback that has no parameters and is bound into `Component`s context.\n   *\n   * @callback Component~GenericCallback\n   * @this Component\n   */\n\n  /**\n   * Creates a function that runs after an `x` millisecond timeout. This function is a\n   * wrapper around `window.setTimeout`. There are a few reasons to use this one\n   * instead though:\n   * 1. It gets cleared via  {@link Component#clearTimeout} when\n   *    {@link Component#dispose} gets called.\n   * 2. The function callback will gets turned into a {@link Component~GenericCallback}\n   *\n   * > Note: You can't use `window.clearTimeout` on the id returned by this function. This\n   *         will cause its dispose listener not to get cleaned up! Please use\n   *         {@link Component#clearTimeout} or {@link Component#dispose} instead.\n   *\n   * @param {Component~GenericCallback} fn\n   *        The function that will be run after `timeout`.\n   *\n   * @param {number} timeout\n   *        Timeout in milliseconds to delay before executing the specified function.\n   *\n   * @return {number}\n   *         Returns a timeout ID that gets used to identify the timeout. It can also\n   *         get used in {@link Component#clearTimeout} to clear the timeout that\n   *         was set.\n   *\n   * @listens Component#dispose\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout}\n   */\n\n\n  Component.prototype.setTimeout = function setTimeout(fn, timeout) {\n    var _this2 = this;\n\n    // declare as variables so they are properly available in timeout function\n    // eslint-disable-next-line\n    var timeoutId, disposeFn;\n\n    fn = bind(this, fn);\n\n    timeoutId = window$1.setTimeout(function () {\n      _this2.off('dispose', disposeFn);\n      fn();\n    }, timeout);\n\n    disposeFn = function disposeFn() {\n      return _this2.clearTimeout(timeoutId);\n    };\n\n    disposeFn.guid = 'vjs-timeout-' + timeoutId;\n\n    this.on('dispose', disposeFn);\n\n    return timeoutId;\n  };\n\n  /**\n   * Clears a timeout that gets created via `window.setTimeout` or\n   * {@link Component#setTimeout}. If you set a timeout via {@link Component#setTimeout}\n   * use this function instead of `window.clearTimout`. If you don't your dispose\n   * listener will not get cleaned up until {@link Component#dispose}!\n   *\n   * @param {number} timeoutId\n   *        The id of the timeout to clear. The return value of\n   *        {@link Component#setTimeout} or `window.setTimeout`.\n   *\n   * @return {number}\n   *         Returns the timeout id that was cleared.\n   *\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearTimeout}\n   */\n\n\n  Component.prototype.clearTimeout = function clearTimeout(timeoutId) {\n    window$1.clearTimeout(timeoutId);\n\n    var disposeFn = function disposeFn() {};\n\n    disposeFn.guid = 'vjs-timeout-' + timeoutId;\n\n    this.off('dispose', disposeFn);\n\n    return timeoutId;\n  };\n\n  /**\n   * Creates a function that gets run every `x` milliseconds. This function is a wrapper\n   * around `window.setInterval`. There are a few reasons to use this one instead though.\n   * 1. It gets cleared via  {@link Component#clearInterval} when\n   *    {@link Component#dispose} gets called.\n   * 2. The function callback will be a {@link Component~GenericCallback}\n   *\n   * @param {Component~GenericCallback} fn\n   *        The function to run every `x` seconds.\n   *\n   * @param {number} interval\n   *        Execute the specified function every `x` milliseconds.\n   *\n   * @return {number}\n   *         Returns an id that can be used to identify the interval. It can also be be used in\n   *         {@link Component#clearInterval} to clear the interval.\n   *\n   * @listens Component#dispose\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval}\n   */\n\n\n  Component.prototype.setInterval = function setInterval(fn, interval) {\n    var _this3 = this;\n\n    fn = bind(this, fn);\n\n    var intervalId = window$1.setInterval(fn, interval);\n\n    var disposeFn = function disposeFn() {\n      return _this3.clearInterval(intervalId);\n    };\n\n    disposeFn.guid = 'vjs-interval-' + intervalId;\n\n    this.on('dispose', disposeFn);\n\n    return intervalId;\n  };\n\n  /**\n   * Clears an interval that gets created via `window.setInterval` or\n   * {@link Component#setInterval}. If you set an inteval via {@link Component#setInterval}\n   * use this function instead of `window.clearInterval`. If you don't your dispose\n   * listener will not get cleaned up until {@link Component#dispose}!\n   *\n   * @param {number} intervalId\n   *        The id of the interval to clear. The return value of\n   *        {@link Component#setInterval} or `window.setInterval`.\n   *\n   * @return {number}\n   *         Returns the interval id that was cleared.\n   *\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearInterval}\n   */\n\n\n  Component.prototype.clearInterval = function clearInterval(intervalId) {\n    window$1.clearInterval(intervalId);\n\n    var disposeFn = function disposeFn() {};\n\n    disposeFn.guid = 'vjs-interval-' + intervalId;\n\n    this.off('dispose', disposeFn);\n\n    return intervalId;\n  };\n\n  /**\n   * Queues up a callback to be passed to requestAnimationFrame (rAF), but\n   * with a few extra bonuses:\n   *\n   * - Supports browsers that do not support rAF by falling back to\n   *   {@link Component#setTimeout}.\n   *\n   * - The callback is turned into a {@link Component~GenericCallback} (i.e.\n   *   bound to the component).\n   *\n   * - Automatic cancellation of the rAF callback is handled if the component\n   *   is disposed before it is called.\n   *\n   * @param  {Component~GenericCallback} fn\n   *         A function that will be bound to this component and executed just\n   *         before the browser's next repaint.\n   *\n   * @return {number}\n   *         Returns an rAF ID that gets used to identify the timeout. It can\n   *         also be used in {@link Component#cancelAnimationFrame} to cancel\n   *         the animation frame callback.\n   *\n   * @listens Component#dispose\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame}\n   */\n\n\n  Component.prototype.requestAnimationFrame = function requestAnimationFrame(fn) {\n    var _this4 = this;\n\n    // declare as variables so they are properly available in rAF function\n    // eslint-disable-next-line\n    var id, disposeFn;\n\n    if (this.supportsRaf_) {\n      fn = bind(this, fn);\n\n      id = window$1.requestAnimationFrame(function () {\n        _this4.off('dispose', disposeFn);\n        fn();\n      });\n\n      disposeFn = function disposeFn() {\n        return _this4.cancelAnimationFrame(id);\n      };\n\n      disposeFn.guid = 'vjs-raf-' + id;\n      this.on('dispose', disposeFn);\n\n      return id;\n    }\n\n    // Fall back to using a timer.\n    return this.setTimeout(fn, 1000 / 60);\n  };\n\n  /**\n   * Cancels a queued callback passed to {@link Component#requestAnimationFrame}\n   * (rAF).\n   *\n   * If you queue an rAF callback via {@link Component#requestAnimationFrame},\n   * use this function instead of `window.cancelAnimationFrame`. If you don't,\n   * your dispose listener will not get cleaned up until {@link Component#dispose}!\n   *\n   * @param {number} id\n   *        The rAF ID to clear. The return value of {@link Component#requestAnimationFrame}.\n   *\n   * @return {number}\n   *         Returns the rAF ID that was cleared.\n   *\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/window/cancelAnimationFrame}\n   */\n\n\n  Component.prototype.cancelAnimationFrame = function cancelAnimationFrame(id) {\n    if (this.supportsRaf_) {\n      window$1.cancelAnimationFrame(id);\n\n      var disposeFn = function disposeFn() {};\n\n      disposeFn.guid = 'vjs-raf-' + id;\n\n      this.off('dispose', disposeFn);\n\n      return id;\n    }\n\n    // Fall back to using a timer.\n    return this.clearTimeout(id);\n  };\n\n  /**\n   * Register a `Component` with `videojs` given the name and the component.\n   *\n   * > NOTE: {@link Tech}s should not be registered as a `Component`. {@link Tech}s\n   *         should be registered using {@link Tech.registerTech} or\n   *         {@link videojs:videojs.registerTech}.\n   *\n   * > NOTE: This function can also be seen on videojs as\n   *         {@link videojs:videojs.registerComponent}.\n   *\n   * @param {string} name\n   *        The name of the `Component` to register.\n   *\n   * @param {Component} ComponentToRegister\n   *        The `Component` class to register.\n   *\n   * @return {Component}\n   *         The `Component` that was registered.\n   */\n\n\n  Component.registerComponent = function registerComponent(name, ComponentToRegister) {\n    if (typeof name !== 'string' || !name) {\n      throw new Error('Illegal component name, \"' + name + '\"; must be a non-empty string.');\n    }\n\n    var Tech = Component.getComponent('Tech');\n\n    // We need to make sure this check is only done if Tech has been registered.\n    var isTech = Tech && Tech.isTech(ComponentToRegister);\n    var isComp = Component === ComponentToRegister || Component.prototype.isPrototypeOf(ComponentToRegister.prototype);\n\n    if (isTech || !isComp) {\n      var reason = void 0;\n\n      if (isTech) {\n        reason = 'techs must be registered using Tech.registerTech()';\n      } else {\n        reason = 'must be a Component subclass';\n      }\n\n      throw new Error('Illegal component, \"' + name + '\"; ' + reason + '.');\n    }\n\n    name = toTitleCase(name);\n\n    if (!Component.components_) {\n      Component.components_ = {};\n    }\n\n    var Player = Component.getComponent('Player');\n\n    if (name === 'Player' && Player && Player.players) {\n      var players = Player.players;\n      var playerNames = Object.keys(players);\n\n      // If we have players that were disposed, then their name will still be\n      // in Players.players. So, we must loop through and verify that the value\n      // for each item is not null. This allows registration of the Player component\n      // after all players have been disposed or before any were created.\n      if (players && playerNames.length > 0 && playerNames.map(function (pname) {\n        return players[pname];\n      }).every(Boolean)) {\n        throw new Error('Can not register Player component after player has been created.');\n      }\n    }\n\n    Component.components_[name] = ComponentToRegister;\n\n    return ComponentToRegister;\n  };\n\n  /**\n   * Get a `Component` based on the name it was registered with.\n   *\n   * @param {string} name\n   *        The Name of the component to get.\n   *\n   * @return {Component}\n   *         The `Component` that got registered under the given name.\n   *\n   * @deprecated In `videojs` 6 this will not return `Component`s that were not\n   *             registered using {@link Component.registerComponent}. Currently we\n   *             check the global `videojs` object for a `Component` name and\n   *             return that if it exists.\n   */\n\n\n  Component.getComponent = function getComponent(name) {\n    if (!name) {\n      return;\n    }\n\n    name = toTitleCase(name);\n\n    if (Component.components_ && Component.components_[name]) {\n      return Component.components_[name];\n    }\n  };\n\n  return Component;\n}();\n\n/**\n * Whether or not this component supports `requestAnimationFrame`.\n *\n * This is exposed primarily for testing purposes.\n *\n * @private\n * @type {Boolean}\n */\n\n\nComponent.prototype.supportsRaf_ = typeof window$1.requestAnimationFrame === 'function' && typeof window$1.cancelAnimationFrame === 'function';\n\nComponent.registerComponent('Component', Component);\n\n/**\n * @file browser.js\n * @module browser\n */\n\nvar USER_AGENT = window$1.navigator && window$1.navigator.userAgent || '';\nvar webkitVersionMap = /AppleWebKit\\/([\\d.]+)/i.exec(USER_AGENT);\nvar appleWebkitVersion = webkitVersionMap ? parseFloat(webkitVersionMap.pop()) : null;\n\n/*\n * Device is an iPhone\n *\n * @type {Boolean}\n * @constant\n * @private\n */\nvar IS_IPAD = /iPad/i.test(USER_AGENT);\n\n// The Facebook app's UIWebView identifies as both an iPhone and iPad, so\n// to identify iPhones, we need to exclude iPads.\n// http://artsy.github.io/blog/2012/10/18/the-perils-of-ios-user-agent-sniffing/\nvar IS_IPHONE = /iPhone/i.test(USER_AGENT) && !IS_IPAD;\nvar IS_IPOD = /iPod/i.test(USER_AGENT);\nvar IS_IOS = IS_IPHONE || IS_IPAD || IS_IPOD;\n\nvar IOS_VERSION = function () {\n  var match = USER_AGENT.match(/OS (\\d+)_/i);\n\n  if (match && match[1]) {\n    return match[1];\n  }\n  return null;\n}();\n\nvar IS_ANDROID = /Android/i.test(USER_AGENT);\nvar ANDROID_VERSION = function () {\n  // This matches Android Major.Minor.Patch versions\n  // ANDROID_VERSION is Major.Minor as a Number, if Minor isn't available, then only Major is returned\n  var match = USER_AGENT.match(/Android (\\d+)(?:\\.(\\d+))?(?:\\.(\\d+))*/i);\n\n  if (!match) {\n    return null;\n  }\n\n  var major = match[1] && parseFloat(match[1]);\n  var minor = match[2] && parseFloat(match[2]);\n\n  if (major && minor) {\n    return parseFloat(match[1] + '.' + match[2]);\n  } else if (major) {\n    return major;\n  }\n  return null;\n}();\n\nvar IS_NATIVE_ANDROID = IS_ANDROID && ANDROID_VERSION < 5 && appleWebkitVersion < 537;\n\nvar IS_FIREFOX = /Firefox/i.test(USER_AGENT);\nvar IS_EDGE = /Edge/i.test(USER_AGENT);\nvar IS_CHROME = !IS_EDGE && (/Chrome/i.test(USER_AGENT) || /CriOS/i.test(USER_AGENT));\nvar CHROME_VERSION = function () {\n  var match = USER_AGENT.match(/(Chrome|CriOS)\\/(\\d+)/);\n\n  if (match && match[2]) {\n    return parseFloat(match[2]);\n  }\n  return null;\n}();\nvar IE_VERSION = function () {\n  var result = /MSIE\\s(\\d+)\\.\\d/.exec(USER_AGENT);\n  var version = result && parseFloat(result[1]);\n\n  if (!version && /Trident\\/7.0/i.test(USER_AGENT) && /rv:11.0/.test(USER_AGENT)) {\n    // IE 11 has a different user agent string than other IE versions\n    version = 11.0;\n  }\n\n  return version;\n}();\n\nvar IS_SAFARI = /Safari/i.test(USER_AGENT) && !IS_CHROME && !IS_ANDROID && !IS_EDGE;\nvar IS_ANY_SAFARI = (IS_SAFARI || IS_IOS) && !IS_CHROME;\n\nvar TOUCH_ENABLED = isReal() && ('ontouchstart' in window$1 || window$1.navigator.maxTouchPoints || window$1.DocumentTouch && window$1.document instanceof window$1.DocumentTouch);\n\nvar browser = /*#__PURE__*/Object.freeze({\n  IS_IPAD: IS_IPAD,\n  IS_IPHONE: IS_IPHONE,\n  IS_IPOD: IS_IPOD,\n  IS_IOS: IS_IOS,\n  IOS_VERSION: IOS_VERSION,\n  IS_ANDROID: IS_ANDROID,\n  ANDROID_VERSION: ANDROID_VERSION,\n  IS_NATIVE_ANDROID: IS_NATIVE_ANDROID,\n  IS_FIREFOX: IS_FIREFOX,\n  IS_EDGE: IS_EDGE,\n  IS_CHROME: IS_CHROME,\n  CHROME_VERSION: CHROME_VERSION,\n  IE_VERSION: IE_VERSION,\n  IS_SAFARI: IS_SAFARI,\n  IS_ANY_SAFARI: IS_ANY_SAFARI,\n  TOUCH_ENABLED: TOUCH_ENABLED\n});\n\n/**\n * @file time-ranges.js\n * @module time-ranges\n */\n\n/**\n * Returns the time for the specified index at the start or end\n * of a TimeRange object.\n *\n * @function time-ranges:indexFunction\n *\n * @param {number} [index=0]\n *        The range number to return the time for.\n *\n * @return {number}\n *         The time that offset at the specified index.\n *\n * @depricated index must be set to a value, in the future this will throw an error.\n */\n\n/**\n * An object that contains ranges of time for various reasons.\n *\n * @typedef {Object} TimeRange\n *\n * @property {number} length\n *           The number of time ranges represented by this Object\n *\n * @property {time-ranges:indexFunction} start\n *           Returns the time offset at which a specified time range begins.\n *\n * @property {time-ranges:indexFunction} end\n *           Returns the time offset at which a specified time range ends.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges\n */\n\n/**\n * Check if any of the time ranges are over the maximum index.\n *\n * @param {string} fnName\n *        The function name to use for logging\n *\n * @param {number} index\n *        The index to check\n *\n * @param {number} maxIndex\n *        The maximum possible index\n *\n * @throws {Error} if the timeRanges provided are over the maxIndex\n */\nfunction rangeCheck(fnName, index, maxIndex) {\n  if (typeof index !== 'number' || index < 0 || index > maxIndex) {\n    throw new Error('Failed to execute \\'' + fnName + '\\' on \\'TimeRanges\\': The index provided (' + index + ') is non-numeric or out of bounds (0-' + maxIndex + ').');\n  }\n}\n\n/**\n * Get the time for the specified index at the start or end\n * of a TimeRange object.\n *\n * @param {string} fnName\n *        The function name to use for logging\n *\n * @param {string} valueIndex\n *        The property that should be used to get the time. should be 'start' or 'end'\n *\n * @param {Array} ranges\n *        An array of time ranges\n *\n * @param {Array} [rangeIndex=0]\n *        The index to start the search at\n *\n * @return {number}\n *         The time that offset at the specified index.\n *\n *\n * @depricated rangeIndex must be set to a value, in the future this will throw an error.\n * @throws {Error} if rangeIndex is more than the length of ranges\n */\nfunction getRange(fnName, valueIndex, ranges, rangeIndex) {\n  rangeCheck(fnName, rangeIndex, ranges.length - 1);\n  return ranges[rangeIndex][valueIndex];\n}\n\n/**\n * Create a time range object given ranges of time.\n *\n * @param {Array} [ranges]\n *        An array of time ranges.\n */\nfunction createTimeRangesObj(ranges) {\n  if (ranges === undefined || ranges.length === 0) {\n    return {\n      length: 0,\n      start: function start() {\n        throw new Error('This TimeRanges object is empty');\n      },\n      end: function end() {\n        throw new Error('This TimeRanges object is empty');\n      }\n    };\n  }\n  return {\n    length: ranges.length,\n    start: getRange.bind(null, 'start', 0, ranges),\n    end: getRange.bind(null, 'end', 1, ranges)\n  };\n}\n\n/**\n * Should create a fake `TimeRange` object which mimics an HTML5 time range instance.\n *\n * @param {number|Array} start\n *        The start of a single range or an array of ranges\n *\n * @param {number} end\n *        The end of a single range.\n *\n * @private\n */\nfunction createTimeRanges(start, end) {\n  if (Array.isArray(start)) {\n    return createTimeRangesObj(start);\n  } else if (start === undefined || end === undefined) {\n    return createTimeRangesObj();\n  }\n  return createTimeRangesObj([[start, end]]);\n}\n\n/**\n * @file buffer.js\n * @module buffer\n */\n\n/**\n * Compute the percentage of the media that has been buffered.\n *\n * @param {TimeRange} buffered\n *        The current `TimeRange` object representing buffered time ranges\n *\n * @param {number} duration\n *        Total duration of the media\n *\n * @return {number}\n *         Percent buffered of the total duration in decimal form.\n */\nfunction bufferedPercent(buffered, duration) {\n  var bufferedDuration = 0;\n  var start = void 0;\n  var end = void 0;\n\n  if (!duration) {\n    return 0;\n  }\n\n  if (!buffered || !buffered.length) {\n    buffered = createTimeRanges(0, 0);\n  }\n\n  for (var i = 0; i < buffered.length; i++) {\n    start = buffered.start(i);\n    end = buffered.end(i);\n\n    // buffered end can be bigger than duration by a very small fraction\n    if (end > duration) {\n      end = duration;\n    }\n\n    bufferedDuration += end - start;\n  }\n\n  return bufferedDuration / duration;\n}\n\n/**\n * @file fullscreen-api.js\n * @module fullscreen-api\n * @private\n */\n\n/**\n * Store the browser-specific methods for the fullscreen API.\n *\n * @type {Object}\n * @see [Specification]{@link https://fullscreen.spec.whatwg.org}\n * @see [Map Approach From Screenfull.js]{@link https://github.com/sindresorhus/screenfull.js}\n */\nvar FullscreenApi = {};\n\n// browser API methods\nvar apiMap = [['requestFullscreen', 'exitFullscreen', 'fullscreenElement', 'fullscreenEnabled', 'fullscreenchange', 'fullscreenerror'],\n// WebKit\n['webkitRequestFullscreen', 'webkitExitFullscreen', 'webkitFullscreenElement', 'webkitFullscreenEnabled', 'webkitfullscreenchange', 'webkitfullscreenerror'],\n// Old WebKit (Safari 5.1)\n['webkitRequestFullScreen', 'webkitCancelFullScreen', 'webkitCurrentFullScreenElement', 'webkitCancelFullScreen', 'webkitfullscreenchange', 'webkitfullscreenerror'],\n// Mozilla\n['mozRequestFullScreen', 'mozCancelFullScreen', 'mozFullScreenElement', 'mozFullScreenEnabled', 'mozfullscreenchange', 'mozfullscreenerror'],\n// Microsoft\n['msRequestFullscreen', 'msExitFullscreen', 'msFullscreenElement', 'msFullscreenEnabled', 'MSFullscreenChange', 'MSFullscreenError']];\n\nvar specApi = apiMap[0];\nvar browserApi = void 0;\n\n// determine the supported set of functions\nfor (var i = 0; i < apiMap.length; i++) {\n  // check for exitFullscreen function\n  if (apiMap[i][1] in document) {\n    browserApi = apiMap[i];\n    break;\n  }\n}\n\n// map the browser API names to the spec API names\nif (browserApi) {\n  for (var _i = 0; _i < browserApi.length; _i++) {\n    FullscreenApi[specApi[_i]] = browserApi[_i];\n  }\n}\n\n/**\n * @file media-error.js\n */\n\n/**\n * A Custom `MediaError` class which mimics the standard HTML5 `MediaError` class.\n *\n * @param {number|string|Object|MediaError} value\n *        This can be of multiple types:\n *        - number: should be a standard error code\n *        - string: an error message (the code will be 0)\n *        - Object: arbitrary properties\n *        - `MediaError` (native): used to populate a video.js `MediaError` object\n *        - `MediaError` (video.js): will return itself if it's already a\n *          video.js `MediaError` object.\n *\n * @see [MediaError Spec]{@link https://dev.w3.org/html5/spec-author-view/video.html#mediaerror}\n * @see [Encrypted MediaError Spec]{@link https://www.w3.org/TR/2013/WD-encrypted-media-20130510/#error-codes}\n *\n * @class MediaError\n */\nfunction MediaError(value) {\n\n  // Allow redundant calls to this constructor to avoid having `instanceof`\n  // checks peppered around the code.\n  if (value instanceof MediaError) {\n    return value;\n  }\n\n  if (typeof value === 'number') {\n    this.code = value;\n  } else if (typeof value === 'string') {\n    // default code is zero, so this is a custom error\n    this.message = value;\n  } else if (isObject(value)) {\n\n    // We assign the `code` property manually because native `MediaError` objects\n    // do not expose it as an own/enumerable property of the object.\n    if (typeof value.code === 'number') {\n      this.code = value.code;\n    }\n\n    assign(this, value);\n  }\n\n  if (!this.message) {\n    this.message = MediaError.defaultMessages[this.code] || '';\n  }\n}\n\n/**\n * The error code that refers two one of the defined `MediaError` types\n *\n * @type {Number}\n */\nMediaError.prototype.code = 0;\n\n/**\n * An optional message that to show with the error. Message is not part of the HTML5\n * video spec but allows for more informative custom errors.\n *\n * @type {String}\n */\nMediaError.prototype.message = '';\n\n/**\n * An optional status code that can be set by plugins to allow even more detail about\n * the error. For example a plugin might provide a specific HTTP status code and an\n * error message for that code. Then when the plugin gets that error this class will\n * know how to display an error message for it. This allows a custom message to show\n * up on the `Player` error overlay.\n *\n * @type {Array}\n */\nMediaError.prototype.status = null;\n\n/**\n * Errors indexed by the W3C standard. The order **CANNOT CHANGE**! See the\n * specification listed under {@link MediaError} for more information.\n *\n * @enum {array}\n * @readonly\n * @property {string} 0 - MEDIA_ERR_CUSTOM\n * @property {string} 1 - MEDIA_ERR_CUSTOM\n * @property {string} 2 - MEDIA_ERR_ABORTED\n * @property {string} 3 - MEDIA_ERR_NETWORK\n * @property {string} 4 - MEDIA_ERR_SRC_NOT_SUPPORTED\n * @property {string} 5 - MEDIA_ERR_ENCRYPTED\n */\nMediaError.errorTypes = ['MEDIA_ERR_CUSTOM', 'MEDIA_ERR_ABORTED', 'MEDIA_ERR_NETWORK', 'MEDIA_ERR_DECODE', 'MEDIA_ERR_SRC_NOT_SUPPORTED', 'MEDIA_ERR_ENCRYPTED'];\n\n/**\n * The default `MediaError` messages based on the {@link MediaError.errorTypes}.\n *\n * @type {Array}\n * @constant\n */\nMediaError.defaultMessages = {\n  1: 'You aborted the media playback',\n  2: 'A network error caused the media download to fail part-way.',\n  3: 'The media playback was aborted due to a corruption problem or because the media used features your browser did not support.',\n  4: 'The media could not be loaded, either because the server or network failed or because the format is not supported.',\n  5: 'The media is encrypted and we do not have the keys to decrypt it.'\n};\n\n// Add types as properties on MediaError\n// e.g. MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED = 4;\nfor (var errNum = 0; errNum < MediaError.errorTypes.length; errNum++) {\n  MediaError[MediaError.errorTypes[errNum]] = errNum;\n  // values should be accessible on both the class and instance\n  MediaError.prototype[MediaError.errorTypes[errNum]] = errNum;\n}\n\n/**\n * Returns whether an object is `Promise`-like (i.e. has a `then` method).\n *\n * @param  {Object}  value\n *         An object that may or may not be `Promise`-like.\n *\n * @return {Boolean}\n *         Whether or not the object is `Promise`-like.\n */\nfunction isPromise(value) {\n  return value !== undefined && value !== null && typeof value.then === 'function';\n}\n\n/**\n * Silence a Promise-like object.\n *\n * This is useful for avoiding non-harmful, but potentially confusing \"uncaught\n * play promise\" rejection error messages.\n *\n * @param  {Object} value\n *         An object that may or may not be `Promise`-like.\n */\nfunction silencePromise(value) {\n  if (isPromise(value)) {\n    value.then(null, function (e) {});\n  }\n}\n\n/**\n * @file text-track-list-converter.js Utilities for capturing text track state and\n * re-creating tracks based on a capture.\n *\n * @module text-track-list-converter\n */\n\n/**\n * Examine a single {@link TextTrack} and return a JSON-compatible javascript object that\n * represents the {@link TextTrack}'s state.\n *\n * @param {TextTrack} track\n *        The text track to query.\n *\n * @return {Object}\n *         A serializable javascript representation of the TextTrack.\n * @private\n */\nvar trackToJson_ = function trackToJson_(track) {\n  var ret = ['kind', 'label', 'language', 'id', 'inBandMetadataTrackDispatchType', 'mode', 'src'].reduce(function (acc, prop, i) {\n\n    if (track[prop]) {\n      acc[prop] = track[prop];\n    }\n\n    return acc;\n  }, {\n    cues: track.cues && Array.prototype.map.call(track.cues, function (cue) {\n      return {\n        startTime: cue.startTime,\n        endTime: cue.endTime,\n        text: cue.text,\n        id: cue.id\n      };\n    })\n  });\n\n  return ret;\n};\n\n/**\n * Examine a {@link Tech} and return a JSON-compatible javascript array that represents the\n * state of all {@link TextTrack}s currently configured. The return array is compatible with\n * {@link text-track-list-converter:jsonToTextTracks}.\n *\n * @param {Tech} tech\n *        The tech object to query\n *\n * @return {Array}\n *         A serializable javascript representation of the {@link Tech}s\n *         {@link TextTrackList}.\n */\nvar textTracksToJson = function textTracksToJson(tech) {\n\n  var trackEls = tech.$$('track');\n\n  var trackObjs = Array.prototype.map.call(trackEls, function (t) {\n    return t.track;\n  });\n  var tracks = Array.prototype.map.call(trackEls, function (trackEl) {\n    var json = trackToJson_(trackEl.track);\n\n    if (trackEl.src) {\n      json.src = trackEl.src;\n    }\n    return json;\n  });\n\n  return tracks.concat(Array.prototype.filter.call(tech.textTracks(), function (track) {\n    return trackObjs.indexOf(track) === -1;\n  }).map(trackToJson_));\n};\n\n/**\n * Create a set of remote {@link TextTrack}s on a {@link Tech} based on an array of javascript\n * object {@link TextTrack} representations.\n *\n * @param {Array} json\n *        An array of `TextTrack` representation objects, like those that would be\n *        produced by `textTracksToJson`.\n *\n * @param {Tech} tech\n *        The `Tech` to create the `TextTrack`s on.\n */\nvar jsonToTextTracks = function jsonToTextTracks(json, tech) {\n  json.forEach(function (track) {\n    var addedTrack = tech.addRemoteTextTrack(track).track;\n\n    if (!track.src && track.cues) {\n      track.cues.forEach(function (cue) {\n        return addedTrack.addCue(cue);\n      });\n    }\n  });\n\n  return tech.textTracks();\n};\n\nvar textTrackConverter = { textTracksToJson: textTracksToJson, jsonToTextTracks: jsonToTextTracks, trackToJson_: trackToJson_ };\n\n/**\n * @file modal-dialog.js\n */\n\nvar MODAL_CLASS_NAME = 'vjs-modal-dialog';\nvar ESC = 27;\n\n/**\n * The `ModalDialog` displays over the video and its controls, which blocks\n * interaction with the player until it is closed.\n *\n * Modal dialogs include a \"Close\" button and will close when that button\n * is activated - or when ESC is pressed anywhere.\n *\n * @extends Component\n */\n\nvar ModalDialog = function (_Component) {\n  inherits(ModalDialog, _Component);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Mixed} [options.content=undefined]\n   *        Provide customized content for this modal.\n   *\n   * @param {string} [options.description]\n   *        A text description for the modal, primarily for accessibility.\n   *\n   * @param {boolean} [options.fillAlways=false]\n   *        Normally, modals are automatically filled only the first time\n   *        they open. This tells the modal to refresh its content\n   *        every time it opens.\n   *\n   * @param {string} [options.label]\n   *        A text label for the modal, primarily for accessibility.\n   *\n   * @param {boolean} [options.temporary=true]\n   *        If `true`, the modal can only be opened once; it will be\n   *        disposed as soon as it's closed.\n   *\n   * @param {boolean} [options.uncloseable=false]\n   *        If `true`, the user will not be able to close the modal\n   *        through the UI in the normal ways. Programmatic closing is\n   *        still possible.\n   */\n  function ModalDialog(player, options) {\n    classCallCheck(this, ModalDialog);\n\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));\n\n    _this.opened_ = _this.hasBeenOpened_ = _this.hasBeenFilled_ = false;\n\n    _this.closeable(!_this.options_.uncloseable);\n    _this.content(_this.options_.content);\n\n    // Make sure the contentEl is defined AFTER any children are initialized\n    // because we only want the contents of the modal in the contentEl\n    // (not the UI elements like the close button).\n    _this.contentEl_ = createEl('div', {\n      className: MODAL_CLASS_NAME + '-content'\n    }, {\n      role: 'document'\n    });\n\n    _this.descEl_ = createEl('p', {\n      className: MODAL_CLASS_NAME + '-description vjs-control-text',\n      id: _this.el().getAttribute('aria-describedby')\n    });\n\n    textContent(_this.descEl_, _this.description());\n    _this.el_.appendChild(_this.descEl_);\n    _this.el_.appendChild(_this.contentEl_);\n    return _this;\n  }\n\n  /**\n   * Create the `ModalDialog`'s DOM element\n   *\n   * @return {Element}\n   *         The DOM element that gets created.\n   */\n\n\n  ModalDialog.prototype.createEl = function createEl$$1() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: this.buildCSSClass(),\n      tabIndex: -1\n    }, {\n      'aria-describedby': this.id() + '_description',\n      'aria-hidden': 'true',\n      'aria-label': this.label(),\n      'role': 'dialog'\n    });\n  };\n\n  ModalDialog.prototype.dispose = function dispose() {\n    this.contentEl_ = null;\n    this.descEl_ = null;\n    this.previouslyActiveEl_ = null;\n\n    _Component.prototype.dispose.call(this);\n  };\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  ModalDialog.prototype.buildCSSClass = function buildCSSClass() {\n    return MODAL_CLASS_NAME + ' vjs-hidden ' + _Component.prototype.buildCSSClass.call(this);\n  };\n\n  /**\n   * Handles `keydown` events on the document, looking for ESC, which closes\n   * the modal.\n   *\n   * @param {EventTarget~Event} e\n   *        The keypress that triggered this event.\n   *\n   * @listens keydown\n   */\n\n\n  ModalDialog.prototype.handleKeyPress = function handleKeyPress(e) {\n    if (e.which === ESC && this.closeable()) {\n      this.close();\n    }\n  };\n\n  /**\n   * Returns the label string for this modal. Primarily used for accessibility.\n   *\n   * @return {string}\n   *         the localized or raw label of this modal.\n   */\n\n\n  ModalDialog.prototype.label = function label() {\n    return this.localize(this.options_.label || 'Modal Window');\n  };\n\n  /**\n   * Returns the description string for this modal. Primarily used for\n   * accessibility.\n   *\n   * @return {string}\n   *         The localized or raw description of this modal.\n   */\n\n\n  ModalDialog.prototype.description = function description() {\n    var desc = this.options_.description || this.localize('This is a modal window.');\n\n    // Append a universal closeability message if the modal is closeable.\n    if (this.closeable()) {\n      desc += ' ' + this.localize('This modal can be closed by pressing the Escape key or activating the close button.');\n    }\n\n    return desc;\n  };\n\n  /**\n   * Opens the modal.\n   *\n   * @fires ModalDialog#beforemodalopen\n   * @fires ModalDialog#modalopen\n   */\n\n\n  ModalDialog.prototype.open = function open() {\n    if (!this.opened_) {\n      var player = this.player();\n\n      /**\n        * Fired just before a `ModalDialog` is opened.\n        *\n        * @event ModalDialog#beforemodalopen\n        * @type {EventTarget~Event}\n        */\n      this.trigger('beforemodalopen');\n      this.opened_ = true;\n\n      // Fill content if the modal has never opened before and\n      // never been filled.\n      if (this.options_.fillAlways || !this.hasBeenOpened_ && !this.hasBeenFilled_) {\n        this.fill();\n      }\n\n      // If the player was playing, pause it and take note of its previously\n      // playing state.\n      this.wasPlaying_ = !player.paused();\n\n      if (this.options_.pauseOnOpen && this.wasPlaying_) {\n        player.pause();\n      }\n\n      if (this.closeable()) {\n        this.on(this.el_.ownerDocument, 'keydown', bind(this, this.handleKeyPress));\n      }\n\n      // Hide controls and note if they were enabled.\n      this.hadControls_ = player.controls();\n      player.controls(false);\n\n      this.show();\n      this.conditionalFocus_();\n      this.el().setAttribute('aria-hidden', 'false');\n\n      /**\n        * Fired just after a `ModalDialog` is opened.\n        *\n        * @event ModalDialog#modalopen\n        * @type {EventTarget~Event}\n        */\n      this.trigger('modalopen');\n      this.hasBeenOpened_ = true;\n    }\n  };\n\n  /**\n   * If the `ModalDialog` is currently open or closed.\n   *\n   * @param  {boolean} [value]\n   *         If given, it will open (`true`) or close (`false`) the modal.\n   *\n   * @return {boolean}\n   *         the current open state of the modaldialog\n   */\n\n\n  ModalDialog.prototype.opened = function opened(value) {\n    if (typeof value === 'boolean') {\n      this[value ? 'open' : 'close']();\n    }\n    return this.opened_;\n  };\n\n  /**\n   * Closes the modal, does nothing if the `ModalDialog` is\n   * not open.\n   *\n   * @fires ModalDialog#beforemodalclose\n   * @fires ModalDialog#modalclose\n   */\n\n\n  ModalDialog.prototype.close = function close() {\n    if (!this.opened_) {\n      return;\n    }\n    var player = this.player();\n\n    /**\n      * Fired just before a `ModalDialog` is closed.\n      *\n      * @event ModalDialog#beforemodalclose\n      * @type {EventTarget~Event}\n      */\n    this.trigger('beforemodalclose');\n    this.opened_ = false;\n\n    if (this.wasPlaying_ && this.options_.pauseOnOpen) {\n      player.play();\n    }\n\n    if (this.closeable()) {\n      this.off(this.el_.ownerDocument, 'keydown', bind(this, this.handleKeyPress));\n    }\n\n    if (this.hadControls_) {\n      player.controls(true);\n    }\n\n    this.hide();\n    this.el().setAttribute('aria-hidden', 'true');\n\n    /**\n      * Fired just after a `ModalDialog` is closed.\n      *\n      * @event ModalDialog#modalclose\n      * @type {EventTarget~Event}\n      */\n    this.trigger('modalclose');\n    this.conditionalBlur_();\n\n    if (this.options_.temporary) {\n      this.dispose();\n    }\n  };\n\n  /**\n   * Check to see if the `ModalDialog` is closeable via the UI.\n   *\n   * @param  {boolean} [value]\n   *         If given as a boolean, it will set the `closeable` option.\n   *\n   * @return {boolean}\n   *         Returns the final value of the closable option.\n   */\n\n\n  ModalDialog.prototype.closeable = function closeable(value) {\n    if (typeof value === 'boolean') {\n      var closeable = this.closeable_ = !!value;\n      var close = this.getChild('closeButton');\n\n      // If this is being made closeable and has no close button, add one.\n      if (closeable && !close) {\n\n        // The close button should be a child of the modal - not its\n        // content element, so temporarily change the content element.\n        var temp = this.contentEl_;\n\n        this.contentEl_ = this.el_;\n        close = this.addChild('closeButton', { controlText: 'Close Modal Dialog' });\n        this.contentEl_ = temp;\n        this.on(close, 'close', this.close);\n      }\n\n      // If this is being made uncloseable and has a close button, remove it.\n      if (!closeable && close) {\n        this.off(close, 'close', this.close);\n        this.removeChild(close);\n        close.dispose();\n      }\n    }\n    return this.closeable_;\n  };\n\n  /**\n   * Fill the modal's content element with the modal's \"content\" option.\n   * The content element will be emptied before this change takes place.\n   */\n\n\n  ModalDialog.prototype.fill = function fill() {\n    this.fillWith(this.content());\n  };\n\n  /**\n   * Fill the modal's content element with arbitrary content.\n   * The content element will be emptied before this change takes place.\n   *\n   * @fires ModalDialog#beforemodalfill\n   * @fires ModalDialog#modalfill\n   *\n   * @param {Mixed} [content]\n   *        The same rules apply to this as apply to the `content` option.\n   */\n\n\n  ModalDialog.prototype.fillWith = function fillWith(content) {\n    var contentEl = this.contentEl();\n    var parentEl = contentEl.parentNode;\n    var nextSiblingEl = contentEl.nextSibling;\n\n    /**\n     * Fired just before a `ModalDialog` is filled with content.\n     *\n     * @event ModalDialog#beforemodalfill\n     * @type {EventTarget~Event}\n     */\n    this.trigger('beforemodalfill');\n    this.hasBeenFilled_ = true;\n\n    // Detach the content element from the DOM before performing\n    // manipulation to avoid modifying the live DOM multiple times.\n    parentEl.removeChild(contentEl);\n    this.empty();\n    insertContent(contentEl, content);\n    /**\n     * Fired just after a `ModalDialog` is filled with content.\n     *\n     * @event ModalDialog#modalfill\n     * @type {EventTarget~Event}\n     */\n    this.trigger('modalfill');\n\n    // Re-inject the re-filled content element.\n    if (nextSiblingEl) {\n      parentEl.insertBefore(contentEl, nextSiblingEl);\n    } else {\n      parentEl.appendChild(contentEl);\n    }\n\n    // make sure that the close button is last in the dialog DOM\n    var closeButton = this.getChild('closeButton');\n\n    if (closeButton) {\n      parentEl.appendChild(closeButton.el_);\n    }\n  };\n\n  /**\n   * Empties the content element. This happens anytime the modal is filled.\n   *\n   * @fires ModalDialog#beforemodalempty\n   * @fires ModalDialog#modalempty\n   */\n\n\n  ModalDialog.prototype.empty = function empty() {\n    /**\n     * Fired just before a `ModalDialog` is emptied.\n     *\n     * @event ModalDialog#beforemodalempty\n     * @type {EventTarget~Event}\n     */\n    this.trigger('beforemodalempty');\n    emptyEl(this.contentEl());\n\n    /**\n     * Fired just after a `ModalDialog` is emptied.\n     *\n     * @event ModalDialog#modalempty\n     * @type {EventTarget~Event}\n     */\n    this.trigger('modalempty');\n  };\n\n  /**\n   * Gets or sets the modal content, which gets normalized before being\n   * rendered into the DOM.\n   *\n   * This does not update the DOM or fill the modal, but it is called during\n   * that process.\n   *\n   * @param  {Mixed} [value]\n   *         If defined, sets the internal content value to be used on the\n   *         next call(s) to `fill`. This value is normalized before being\n   *         inserted. To \"clear\" the internal content value, pass `null`.\n   *\n   * @return {Mixed}\n   *         The current content of the modal dialog\n   */\n\n\n  ModalDialog.prototype.content = function content(value) {\n    if (typeof value !== 'undefined') {\n      this.content_ = value;\n    }\n    return this.content_;\n  };\n\n  /**\n   * conditionally focus the modal dialog if focus was previously on the player.\n   *\n   * @private\n   */\n\n\n  ModalDialog.prototype.conditionalFocus_ = function conditionalFocus_() {\n    var activeEl = document.activeElement;\n    var playerEl = this.player_.el_;\n\n    this.previouslyActiveEl_ = null;\n\n    if (playerEl.contains(activeEl) || playerEl === activeEl) {\n      this.previouslyActiveEl_ = activeEl;\n\n      this.focus();\n\n      this.on(document, 'keydown', this.handleKeyDown);\n    }\n  };\n\n  /**\n   * conditionally blur the element and refocus the last focused element\n   *\n   * @private\n   */\n\n\n  ModalDialog.prototype.conditionalBlur_ = function conditionalBlur_() {\n    if (this.previouslyActiveEl_) {\n      this.previouslyActiveEl_.focus();\n      this.previouslyActiveEl_ = null;\n    }\n\n    this.off(document, 'keydown', this.handleKeyDown);\n  };\n\n  /**\n   * Keydown handler. Attached when modal is focused.\n   *\n   * @listens keydown\n   */\n\n\n  ModalDialog.prototype.handleKeyDown = function handleKeyDown(event) {\n    // exit early if it isn't a tab key\n    if (event.which !== 9) {\n      return;\n    }\n\n    var focusableEls = this.focusableEls_();\n    var activeEl = this.el_.querySelector(':focus');\n    var focusIndex = void 0;\n\n    for (var i = 0; i < focusableEls.length; i++) {\n      if (activeEl === focusableEls[i]) {\n        focusIndex = i;\n        break;\n      }\n    }\n\n    if (document.activeElement === this.el_) {\n      focusIndex = 0;\n    }\n\n    if (event.shiftKey && focusIndex === 0) {\n      focusableEls[focusableEls.length - 1].focus();\n      event.preventDefault();\n    } else if (!event.shiftKey && focusIndex === focusableEls.length - 1) {\n      focusableEls[0].focus();\n      event.preventDefault();\n    }\n  };\n\n  /**\n   * get all focusable elements\n   *\n   * @private\n   */\n\n\n  ModalDialog.prototype.focusableEls_ = function focusableEls_() {\n    var allChildren = this.el_.querySelectorAll('*');\n\n    return Array.prototype.filter.call(allChildren, function (child) {\n      return (child instanceof window$1.HTMLAnchorElement || child instanceof window$1.HTMLAreaElement) && child.hasAttribute('href') || (child instanceof window$1.HTMLInputElement || child instanceof window$1.HTMLSelectElement || child instanceof window$1.HTMLTextAreaElement || child instanceof window$1.HTMLButtonElement) && !child.hasAttribute('disabled') || child instanceof window$1.HTMLIFrameElement || child instanceof window$1.HTMLObjectElement || child instanceof window$1.HTMLEmbedElement || child.hasAttribute('tabindex') && child.getAttribute('tabindex') !== -1 || child.hasAttribute('contenteditable');\n    });\n  };\n\n  return ModalDialog;\n}(Component);\n\n/**\n * Default options for `ModalDialog` default options.\n *\n * @type {Object}\n * @private\n */\n\n\nModalDialog.prototype.options_ = {\n  pauseOnOpen: true,\n  temporary: true\n};\n\nComponent.registerComponent('ModalDialog', ModalDialog);\n\n/**\n * @file track-list.js\n */\n\n/**\n * Common functionaliy between {@link TextTrackList}, {@link AudioTrackList}, and\n * {@link VideoTrackList}\n *\n * @extends EventTarget\n */\n\nvar TrackList = function (_EventTarget) {\n  inherits(TrackList, _EventTarget);\n\n  /**\n   * Create an instance of this class\n   *\n   * @param {Track[]} tracks\n   *        A list of tracks to initialize the list with.\n   *\n   * @abstract\n   */\n  function TrackList() {\n    var tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    classCallCheck(this, TrackList);\n\n    var _this = possibleConstructorReturn(this, _EventTarget.call(this));\n\n    _this.tracks_ = [];\n\n    /**\n     * @memberof TrackList\n     * @member {number} length\n     *         The current number of `Track`s in the this Trackist.\n     * @instance\n     */\n    Object.defineProperty(_this, 'length', {\n      get: function get$$1() {\n        return this.tracks_.length;\n      }\n    });\n\n    for (var i = 0; i < tracks.length; i++) {\n      _this.addTrack(tracks[i]);\n    }\n    return _this;\n  }\n\n  /**\n   * Add a {@link Track} to the `TrackList`\n   *\n   * @param {Track} track\n   *        The audio, video, or text track to add to the list.\n   *\n   * @fires TrackList#addtrack\n   */\n\n\n  TrackList.prototype.addTrack = function addTrack(track) {\n    var index = this.tracks_.length;\n\n    if (!('' + index in this)) {\n      Object.defineProperty(this, index, {\n        get: function get$$1() {\n          return this.tracks_[index];\n        }\n      });\n    }\n\n    // Do not add duplicate tracks\n    if (this.tracks_.indexOf(track) === -1) {\n      this.tracks_.push(track);\n      /**\n       * Triggered when a track is added to a track list.\n       *\n       * @event TrackList#addtrack\n       * @type {EventTarget~Event}\n       * @property {Track} track\n       *           A reference to track that was added.\n       */\n      this.trigger({\n        track: track,\n        type: 'addtrack'\n      });\n    }\n  };\n\n  /**\n   * Remove a {@link Track} from the `TrackList`\n   *\n   * @param {Track} rtrack\n   *        The audio, video, or text track to remove from the list.\n   *\n   * @fires TrackList#removetrack\n   */\n\n\n  TrackList.prototype.removeTrack = function removeTrack(rtrack) {\n    var track = void 0;\n\n    for (var i = 0, l = this.length; i < l; i++) {\n      if (this[i] === rtrack) {\n        track = this[i];\n        if (track.off) {\n          track.off();\n        }\n\n        this.tracks_.splice(i, 1);\n\n        break;\n      }\n    }\n\n    if (!track) {\n      return;\n    }\n\n    /**\n     * Triggered when a track is removed from track list.\n     *\n     * @event TrackList#removetrack\n     * @type {EventTarget~Event}\n     * @property {Track} track\n     *           A reference to track that was removed.\n     */\n    this.trigger({\n      track: track,\n      type: 'removetrack'\n    });\n  };\n\n  /**\n   * Get a Track from the TrackList by a tracks id\n   *\n   * @param {String} id - the id of the track to get\n   * @method getTrackById\n   * @return {Track}\n   * @private\n   */\n\n\n  TrackList.prototype.getTrackById = function getTrackById(id) {\n    var result = null;\n\n    for (var i = 0, l = this.length; i < l; i++) {\n      var track = this[i];\n\n      if (track.id === id) {\n        result = track;\n        break;\n      }\n    }\n\n    return result;\n  };\n\n  return TrackList;\n}(EventTarget);\n\n/**\n * Triggered when a different track is selected/enabled.\n *\n * @event TrackList#change\n * @type {EventTarget~Event}\n */\n\n/**\n * Events that can be called with on + eventName. See {@link EventHandler}.\n *\n * @property {Object} TrackList#allowedEvents_\n * @private\n */\n\n\nTrackList.prototype.allowedEvents_ = {\n  change: 'change',\n  addtrack: 'addtrack',\n  removetrack: 'removetrack'\n};\n\n// emulate attribute EventHandler support to allow for feature detection\nfor (var event in TrackList.prototype.allowedEvents_) {\n  TrackList.prototype['on' + event] = null;\n}\n\n/**\n * @file audio-track-list.js\n */\n\n/**\n * Anywhere we call this function we diverge from the spec\n * as we only support one enabled audiotrack at a time\n *\n * @param {AudioTrackList} list\n *        list to work on\n *\n * @param {AudioTrack} track\n *        The track to skip\n *\n * @private\n */\nvar disableOthers = function disableOthers(list, track) {\n  for (var i = 0; i < list.length; i++) {\n    if (!Object.keys(list[i]).length || track.id === list[i].id) {\n      continue;\n    }\n    // another audio track is enabled, disable it\n    list[i].enabled = false;\n  }\n};\n\n/**\n * The current list of {@link AudioTrack} for a media file.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist}\n * @extends TrackList\n */\n\nvar AudioTrackList = function (_TrackList) {\n  inherits(AudioTrackList, _TrackList);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {AudioTrack[]} [tracks=[]]\n   *        A list of `AudioTrack` to instantiate the list with.\n   */\n  function AudioTrackList() {\n    var tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    classCallCheck(this, AudioTrackList);\n\n    // make sure only 1 track is enabled\n    // sorted from last index to first index\n    for (var i = tracks.length - 1; i >= 0; i--) {\n      if (tracks[i].enabled) {\n        disableOthers(tracks, tracks[i]);\n        break;\n      }\n    }\n\n    var _this = possibleConstructorReturn(this, _TrackList.call(this, tracks));\n\n    _this.changing_ = false;\n    return _this;\n  }\n\n  /**\n   * Add an {@link AudioTrack} to the `AudioTrackList`.\n   *\n   * @param {AudioTrack} track\n   *        The AudioTrack to add to the list\n   *\n   * @fires TrackList#addtrack\n   */\n\n\n  AudioTrackList.prototype.addTrack = function addTrack(track) {\n    var _this2 = this;\n\n    if (track.enabled) {\n      disableOthers(this, track);\n    }\n\n    _TrackList.prototype.addTrack.call(this, track);\n    // native tracks don't have this\n    if (!track.addEventListener) {\n      return;\n    }\n\n    /**\n     * @listens AudioTrack#enabledchange\n     * @fires TrackList#change\n     */\n    track.addEventListener('enabledchange', function () {\n      // when we are disabling other tracks (since we don't support\n      // more than one track at a time) we will set changing_\n      // to true so that we don't trigger additional change events\n      if (_this2.changing_) {\n        return;\n      }\n      _this2.changing_ = true;\n      disableOthers(_this2, track);\n      _this2.changing_ = false;\n      _this2.trigger('change');\n    });\n  };\n\n  return AudioTrackList;\n}(TrackList);\n\n/**\n * @file video-track-list.js\n */\n\n/**\n * Un-select all other {@link VideoTrack}s that are selected.\n *\n * @param {VideoTrackList} list\n *        list to work on\n *\n * @param {VideoTrack} track\n *        The track to skip\n *\n * @private\n */\nvar disableOthers$1 = function disableOthers(list, track) {\n  for (var i = 0; i < list.length; i++) {\n    if (!Object.keys(list[i]).length || track.id === list[i].id) {\n      continue;\n    }\n    // another video track is enabled, disable it\n    list[i].selected = false;\n  }\n};\n\n/**\n * The current list of {@link VideoTrack} for a video.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist}\n * @extends TrackList\n */\n\nvar VideoTrackList = function (_TrackList) {\n  inherits(VideoTrackList, _TrackList);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {VideoTrack[]} [tracks=[]]\n   *        A list of `VideoTrack` to instantiate the list with.\n   */\n  function VideoTrackList() {\n    var tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    classCallCheck(this, VideoTrackList);\n\n    // make sure only 1 track is enabled\n    // sorted from last index to first index\n    for (var i = tracks.length - 1; i >= 0; i--) {\n      if (tracks[i].selected) {\n        disableOthers$1(tracks, tracks[i]);\n        break;\n      }\n    }\n\n    var _this = possibleConstructorReturn(this, _TrackList.call(this, tracks));\n\n    _this.changing_ = false;\n\n    /**\n     * @member {number} VideoTrackList#selectedIndex\n     *         The current index of the selected {@link VideoTrack`}.\n     */\n    Object.defineProperty(_this, 'selectedIndex', {\n      get: function get$$1() {\n        for (var _i = 0; _i < this.length; _i++) {\n          if (this[_i].selected) {\n            return _i;\n          }\n        }\n        return -1;\n      },\n      set: function set$$1() {}\n    });\n    return _this;\n  }\n\n  /**\n   * Add a {@link VideoTrack} to the `VideoTrackList`.\n   *\n   * @param {VideoTrack} track\n   *        The VideoTrack to add to the list\n   *\n   * @fires TrackList#addtrack\n   */\n\n\n  VideoTrackList.prototype.addTrack = function addTrack(track) {\n    var _this2 = this;\n\n    if (track.selected) {\n      disableOthers$1(this, track);\n    }\n\n    _TrackList.prototype.addTrack.call(this, track);\n    // native tracks don't have this\n    if (!track.addEventListener) {\n      return;\n    }\n\n    /**\n     * @listens VideoTrack#selectedchange\n     * @fires TrackList#change\n     */\n    track.addEventListener('selectedchange', function () {\n      if (_this2.changing_) {\n        return;\n      }\n      _this2.changing_ = true;\n      disableOthers$1(_this2, track);\n      _this2.changing_ = false;\n      _this2.trigger('change');\n    });\n  };\n\n  return VideoTrackList;\n}(TrackList);\n\n/**\n * @file text-track-list.js\n */\n\n/**\n * The current list of {@link TextTrack} for a media file.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttracklist}\n * @extends TrackList\n */\n\nvar TextTrackList = function (_TrackList) {\n  inherits(TextTrackList, _TrackList);\n\n  function TextTrackList() {\n    classCallCheck(this, TextTrackList);\n    return possibleConstructorReturn(this, _TrackList.apply(this, arguments));\n  }\n\n  /**\n   * Add a {@link TextTrack} to the `TextTrackList`\n   *\n   * @param {TextTrack} track\n   *        The text track to add to the list.\n   *\n   * @fires TrackList#addtrack\n   */\n  TextTrackList.prototype.addTrack = function addTrack(track) {\n    _TrackList.prototype.addTrack.call(this, track);\n\n    /**\n     * @listens TextTrack#modechange\n     * @fires TrackList#change\n     */\n    track.addEventListener('modechange', bind(this, function () {\n      this.queueTrigger('change');\n    }));\n\n    var nonLanguageTextTrackKind = ['metadata', 'chapters'];\n\n    if (nonLanguageTextTrackKind.indexOf(track.kind) === -1) {\n      track.addEventListener('modechange', bind(this, function () {\n        this.trigger('selectedlanguagechange');\n      }));\n    }\n  };\n\n  return TextTrackList;\n}(TrackList);\n\n/**\n * @file html-track-element-list.js\n */\n\n/**\n * The current list of {@link HtmlTrackElement}s.\n */\nvar HtmlTrackElementList = function () {\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {HtmlTrackElement[]} [tracks=[]]\n   *        A list of `HtmlTrackElement` to instantiate the list with.\n   */\n  function HtmlTrackElementList() {\n    var trackElements = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    classCallCheck(this, HtmlTrackElementList);\n\n    this.trackElements_ = [];\n\n    /**\n     * @memberof HtmlTrackElementList\n     * @member {number} length\n     *         The current number of `Track`s in the this Trackist.\n     * @instance\n     */\n    Object.defineProperty(this, 'length', {\n      get: function get$$1() {\n        return this.trackElements_.length;\n      }\n    });\n\n    for (var i = 0, length = trackElements.length; i < length; i++) {\n      this.addTrackElement_(trackElements[i]);\n    }\n  }\n\n  /**\n   * Add an {@link HtmlTrackElement} to the `HtmlTrackElementList`\n   *\n   * @param {HtmlTrackElement} trackElement\n   *        The track element to add to the list.\n   *\n   * @private\n   */\n\n\n  HtmlTrackElementList.prototype.addTrackElement_ = function addTrackElement_(trackElement) {\n    var index = this.trackElements_.length;\n\n    if (!('' + index in this)) {\n      Object.defineProperty(this, index, {\n        get: function get$$1() {\n          return this.trackElements_[index];\n        }\n      });\n    }\n\n    // Do not add duplicate elements\n    if (this.trackElements_.indexOf(trackElement) === -1) {\n      this.trackElements_.push(trackElement);\n    }\n  };\n\n  /**\n   * Get an {@link HtmlTrackElement} from the `HtmlTrackElementList` given an\n   * {@link TextTrack}.\n   *\n   * @param {TextTrack} track\n   *        The track associated with a track element.\n   *\n   * @return {HtmlTrackElement|undefined}\n   *         The track element that was found or undefined.\n   *\n   * @private\n   */\n\n\n  HtmlTrackElementList.prototype.getTrackElementByTrack_ = function getTrackElementByTrack_(track) {\n    var trackElement_ = void 0;\n\n    for (var i = 0, length = this.trackElements_.length; i < length; i++) {\n      if (track === this.trackElements_[i].track) {\n        trackElement_ = this.trackElements_[i];\n\n        break;\n      }\n    }\n\n    return trackElement_;\n  };\n\n  /**\n   * Remove a {@link HtmlTrackElement} from the `HtmlTrackElementList`\n   *\n   * @param {HtmlTrackElement} trackElement\n   *        The track element to remove from the list.\n   *\n   * @private\n   */\n\n\n  HtmlTrackElementList.prototype.removeTrackElement_ = function removeTrackElement_(trackElement) {\n    for (var i = 0, length = this.trackElements_.length; i < length; i++) {\n      if (trackElement === this.trackElements_[i]) {\n        this.trackElements_.splice(i, 1);\n\n        break;\n      }\n    }\n  };\n\n  return HtmlTrackElementList;\n}();\n\n/**\n * @file text-track-cue-list.js\n */\n\n/**\n * @typedef {Object} TextTrackCueList~TextTrackCue\n *\n * @property {string} id\n *           The unique id for this text track cue\n *\n * @property {number} startTime\n *           The start time for this text track cue\n *\n * @property {number} endTime\n *           The end time for this text track cue\n *\n * @property {boolean} pauseOnExit\n *           Pause when the end time is reached if true.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackcue}\n */\n\n/**\n * A List of TextTrackCues.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackcuelist}\n */\nvar TextTrackCueList = function () {\n\n  /**\n   * Create an instance of this class..\n   *\n   * @param {Array} cues\n   *        A list of cues to be initialized with\n   */\n  function TextTrackCueList(cues) {\n    classCallCheck(this, TextTrackCueList);\n\n    TextTrackCueList.prototype.setCues_.call(this, cues);\n\n    /**\n     * @memberof TextTrackCueList\n     * @member {number} length\n     *         The current number of `TextTrackCue`s in the TextTrackCueList.\n     * @instance\n     */\n    Object.defineProperty(this, 'length', {\n      get: function get$$1() {\n        return this.length_;\n      }\n    });\n  }\n\n  /**\n   * A setter for cues in this list. Creates getters\n   * an an index for the cues.\n   *\n   * @param {Array} cues\n   *        An array of cues to set\n   *\n   * @private\n   */\n\n\n  TextTrackCueList.prototype.setCues_ = function setCues_(cues) {\n    var oldLength = this.length || 0;\n    var i = 0;\n    var l = cues.length;\n\n    this.cues_ = cues;\n    this.length_ = cues.length;\n\n    var defineProp = function defineProp(index) {\n      if (!('' + index in this)) {\n        Object.defineProperty(this, '' + index, {\n          get: function get$$1() {\n            return this.cues_[index];\n          }\n        });\n      }\n    };\n\n    if (oldLength < l) {\n      i = oldLength;\n\n      for (; i < l; i++) {\n        defineProp.call(this, i);\n      }\n    }\n  };\n\n  /**\n   * Get a `TextTrackCue` that is currently in the `TextTrackCueList` by id.\n   *\n   * @param {string} id\n   *        The id of the cue that should be searched for.\n   *\n   * @return {TextTrackCueList~TextTrackCue|null}\n   *         A single cue or null if none was found.\n   */\n\n\n  TextTrackCueList.prototype.getCueById = function getCueById(id) {\n    var result = null;\n\n    for (var i = 0, l = this.length; i < l; i++) {\n      var cue = this[i];\n\n      if (cue.id === id) {\n        result = cue;\n        break;\n      }\n    }\n\n    return result;\n  };\n\n  return TextTrackCueList;\n}();\n\n/**\n * @file track-kinds.js\n */\n\n/**\n * All possible `VideoTrackKind`s\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-videotrack-kind\n * @typedef VideoTrack~Kind\n * @enum\n */\nvar VideoTrackKind = {\n  alternative: 'alternative',\n  captions: 'captions',\n  main: 'main',\n  sign: 'sign',\n  subtitles: 'subtitles',\n  commentary: 'commentary'\n};\n\n/**\n * All possible `AudioTrackKind`s\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-audiotrack-kind\n * @typedef AudioTrack~Kind\n * @enum\n */\nvar AudioTrackKind = {\n  'alternative': 'alternative',\n  'descriptions': 'descriptions',\n  'main': 'main',\n  'main-desc': 'main-desc',\n  'translation': 'translation',\n  'commentary': 'commentary'\n};\n\n/**\n * All possible `TextTrackKind`s\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-texttrack-kind\n * @typedef TextTrack~Kind\n * @enum\n */\nvar TextTrackKind = {\n  subtitles: 'subtitles',\n  captions: 'captions',\n  descriptions: 'descriptions',\n  chapters: 'chapters',\n  metadata: 'metadata'\n};\n\n/**\n * All possible `TextTrackMode`s\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackmode\n * @typedef TextTrack~Mode\n * @enum\n */\nvar TextTrackMode = {\n  disabled: 'disabled',\n  hidden: 'hidden',\n  showing: 'showing'\n};\n\n/**\n * @file track.js\n */\n\n/**\n * A Track class that contains all of the common functionality for {@link AudioTrack},\n * {@link VideoTrack}, and {@link TextTrack}.\n *\n * > Note: This class should not be used directly\n *\n * @see {@link https://html.spec.whatwg.org/multipage/embedded-content.html}\n * @extends EventTarget\n * @abstract\n */\n\nvar Track = function (_EventTarget) {\n  inherits(Track, _EventTarget);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Object} [options={}]\n   *        Object of option names and values\n   *\n   * @param {string} [options.kind='']\n   *        A valid kind for the track type you are creating.\n   *\n   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\n   *        A unique id for this AudioTrack.\n   *\n   * @param {string} [options.label='']\n   *        The menu label for this track.\n   *\n   * @param {string} [options.language='']\n   *        A valid two character language code.\n   *\n   * @abstract\n   */\n  function Track() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    classCallCheck(this, Track);\n\n    var _this = possibleConstructorReturn(this, _EventTarget.call(this));\n\n    var trackProps = {\n      id: options.id || 'vjs_track_' + newGUID(),\n      kind: options.kind || '',\n      label: options.label || '',\n      language: options.language || ''\n    };\n\n    /**\n     * @memberof Track\n     * @member {string} id\n     *         The id of this track. Cannot be changed after creation.\n     * @instance\n     *\n     * @readonly\n     */\n\n    /**\n     * @memberof Track\n     * @member {string} kind\n     *         The kind of track that this is. Cannot be changed after creation.\n     * @instance\n     *\n     * @readonly\n     */\n\n    /**\n     * @memberof Track\n     * @member {string} label\n     *         The label of this track. Cannot be changed after creation.\n     * @instance\n     *\n     * @readonly\n     */\n\n    /**\n     * @memberof Track\n     * @member {string} language\n     *         The two letter language code for this track. Cannot be changed after\n     *         creation.\n     * @instance\n     *\n     * @readonly\n     */\n\n    var _loop = function _loop(key) {\n      Object.defineProperty(_this, key, {\n        get: function get$$1() {\n          return trackProps[key];\n        },\n        set: function set$$1() {}\n      });\n    };\n\n    for (var key in trackProps) {\n      _loop(key);\n    }\n    return _this;\n  }\n\n  return Track;\n}(EventTarget);\n\n/**\n * @file url.js\n * @module url\n */\n\n/**\n * @typedef {Object} url:URLObject\n *\n * @property {string} protocol\n *           The protocol of the url that was parsed.\n *\n * @property {string} hostname\n *           The hostname of the url that was parsed.\n *\n * @property {string} port\n *           The port of the url that was parsed.\n *\n * @property {string} pathname\n *           The pathname of the url that was parsed.\n *\n * @property {string} search\n *           The search query of the url that was parsed.\n *\n * @property {string} hash\n *           The hash of the url that was parsed.\n *\n * @property {string} host\n *           The host of the url that was parsed.\n */\n\n/**\n * Resolve and parse the elements of a URL.\n *\n * @param  {String} url\n *         The url to parse\n *\n * @return {url:URLObject}\n *         An object of url details\n */\nvar parseUrl = function parseUrl(url) {\n  var props = ['protocol', 'hostname', 'port', 'pathname', 'search', 'hash', 'host'];\n\n  // add the url to an anchor and let the browser parse the URL\n  var a = document.createElement('a');\n\n  a.href = url;\n\n  // IE8 (and 9?) Fix\n  // ie8 doesn't parse the URL correctly until the anchor is actually\n  // added to the body, and an innerHTML is needed to trigger the parsing\n  var addToBody = a.host === '' && a.protocol !== 'file:';\n  var div = void 0;\n\n  if (addToBody) {\n    div = document.createElement('div');\n    div.innerHTML = '<a href=\"' + url + '\"></a>';\n    a = div.firstChild;\n    // prevent the div from affecting layout\n    div.setAttribute('style', 'display:none; position:absolute;');\n    document.body.appendChild(div);\n  }\n\n  // Copy the specific URL properties to a new object\n  // This is also needed for IE8 because the anchor loses its\n  // properties when it's removed from the dom\n  var details = {};\n\n  for (var i = 0; i < props.length; i++) {\n    details[props[i]] = a[props[i]];\n  }\n\n  // IE9 adds the port to the host property unlike everyone else. If\n  // a port identifier is added for standard ports, strip it.\n  if (details.protocol === 'http:') {\n    details.host = details.host.replace(/:80$/, '');\n  }\n\n  if (details.protocol === 'https:') {\n    details.host = details.host.replace(/:443$/, '');\n  }\n\n  if (!details.protocol) {\n    details.protocol = window$1.location.protocol;\n  }\n\n  if (addToBody) {\n    document.body.removeChild(div);\n  }\n\n  return details;\n};\n\n/**\n * Get absolute version of relative URL. Used to tell flash correct URL.\n *\n *\n * @param  {string} url\n *         URL to make absolute\n *\n * @return {string}\n *         Absolute URL\n *\n * @see http://stackoverflow.com/questions/470832/getting-an-absolute-url-from-a-relative-one-ie6-issue\n */\nvar getAbsoluteURL = function getAbsoluteURL(url) {\n  // Check if absolute URL\n  if (!url.match(/^https?:\\/\\//)) {\n    // Convert to absolute URL. Flash hosted off-site needs an absolute URL.\n    var div = document.createElement('div');\n\n    div.innerHTML = '<a href=\"' + url + '\">x</a>';\n    url = div.firstChild.href;\n  }\n\n  return url;\n};\n\n/**\n * Returns the extension of the passed file name. It will return an empty string\n * if passed an invalid path.\n *\n * @param {string} path\n *        The fileName path like '/path/to/file.mp4'\n *\n * @returns {string}\n *          The extension in lower case or an empty string if no\n *          extension could be found.\n */\nvar getFileExtension = function getFileExtension(path) {\n  if (typeof path === 'string') {\n    var splitPathRe = /^(\\/?)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?)(\\.([^\\.\\/\\?]+)))(?:[\\/]*|[\\?].*)$/i;\n    var pathParts = splitPathRe.exec(path);\n\n    if (pathParts) {\n      return pathParts.pop().toLowerCase();\n    }\n  }\n\n  return '';\n};\n\n/**\n * Returns whether the url passed is a cross domain request or not.\n *\n * @param {string} url\n *        The url to check.\n *\n * @return {boolean}\n *         Whether it is a cross domain request or not.\n */\nvar isCrossOrigin = function isCrossOrigin(url) {\n  var winLoc = window$1.location;\n  var urlInfo = parseUrl(url);\n\n  // IE8 protocol relative urls will return ':' for protocol\n  var srcProtocol = urlInfo.protocol === ':' ? winLoc.protocol : urlInfo.protocol;\n\n  // Check if url is for another domain/origin\n  // IE8 doesn't know location.origin, so we won't rely on it here\n  var crossOrigin = srcProtocol + urlInfo.host !== winLoc.protocol + winLoc.host;\n\n  return crossOrigin;\n};\n\nvar Url = /*#__PURE__*/Object.freeze({\n  parseUrl: parseUrl,\n  getAbsoluteURL: getAbsoluteURL,\n  getFileExtension: getFileExtension,\n  isCrossOrigin: isCrossOrigin\n});\n\n/**\n * @file text-track.js\n */\n\n/**\n * Takes a webvtt file contents and parses it into cues\n *\n * @param {string} srcContent\n *        webVTT file contents\n *\n * @param {TextTrack} track\n *        TextTrack to add cues to. Cues come from the srcContent.\n *\n * @private\n */\nvar parseCues = function parseCues(srcContent, track) {\n  var parser = new window$1.WebVTT.Parser(window$1, window$1.vttjs, window$1.WebVTT.StringDecoder());\n  var errors = [];\n\n  parser.oncue = function (cue) {\n    track.addCue(cue);\n  };\n\n  parser.onparsingerror = function (error) {\n    errors.push(error);\n  };\n\n  parser.onflush = function () {\n    track.trigger({\n      type: 'loadeddata',\n      target: track\n    });\n  };\n\n  parser.parse(srcContent);\n  if (errors.length > 0) {\n    if (window$1.console && window$1.console.groupCollapsed) {\n      window$1.console.groupCollapsed('Text Track parsing errors for ' + track.src);\n    }\n    errors.forEach(function (error) {\n      return log$1.error(error);\n    });\n    if (window$1.console && window$1.console.groupEnd) {\n      window$1.console.groupEnd();\n    }\n  }\n\n  parser.flush();\n};\n\n/**\n * Load a `TextTrack` from a specified url.\n *\n * @param {string} src\n *        Url to load track from.\n *\n * @param {TextTrack} track\n *        Track to add cues to. Comes from the content at the end of `url`.\n *\n * @private\n */\nvar loadTrack = function loadTrack(src, track) {\n  var opts = {\n    uri: src\n  };\n  var crossOrigin = isCrossOrigin(src);\n\n  if (crossOrigin) {\n    opts.cors = crossOrigin;\n  }\n\n  xhr(opts, bind(this, function (err, response, responseBody) {\n    if (err) {\n      return log$1.error(err, response);\n    }\n\n    track.loaded_ = true;\n\n    // Make sure that vttjs has loaded, otherwise, wait till it finished loading\n    // NOTE: this is only used for the alt/video.novtt.js build\n    if (typeof window$1.WebVTT !== 'function') {\n      if (track.tech_) {\n        var loadHandler = function loadHandler() {\n          return parseCues(responseBody, track);\n        };\n\n        track.tech_.on('vttjsloaded', loadHandler);\n        track.tech_.on('vttjserror', function () {\n          log$1.error('vttjs failed to load, stopping trying to process ' + track.src);\n          track.tech_.off('vttjsloaded', loadHandler);\n        });\n      }\n    } else {\n      parseCues(responseBody, track);\n    }\n  }));\n};\n\n/**\n * A representation of a single `TextTrack`.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrack}\n * @extends Track\n */\n\nvar TextTrack = function (_Track) {\n  inherits(TextTrack, _Track);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Object} options={}\n   *        Object of option names and values\n   *\n   * @param {Tech} options.tech\n   *        A reference to the tech that owns this TextTrack.\n   *\n   * @param {TextTrack~Kind} [options.kind='subtitles']\n   *        A valid text track kind.\n   *\n   * @param {TextTrack~Mode} [options.mode='disabled']\n   *        A valid text track mode.\n   *\n   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\n   *        A unique id for this TextTrack.\n   *\n   * @param {string} [options.label='']\n   *        The menu label for this track.\n   *\n   * @param {string} [options.language='']\n   *        A valid two character language code.\n   *\n   * @param {string} [options.srclang='']\n   *        A valid two character language code. An alternative, but deprioritized\n   *        version of `options.language`\n   *\n   * @param {string} [options.src]\n   *        A url to TextTrack cues.\n   *\n   * @param {boolean} [options.default]\n   *        If this track should default to on or off.\n   */\n  function TextTrack() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    classCallCheck(this, TextTrack);\n\n    if (!options.tech) {\n      throw new Error('A tech was not provided.');\n    }\n\n    var settings = mergeOptions(options, {\n      kind: TextTrackKind[options.kind] || 'subtitles',\n      language: options.language || options.srclang || ''\n    });\n    var mode = TextTrackMode[settings.mode] || 'disabled';\n    var default_ = settings.default;\n\n    if (settings.kind === 'metadata' || settings.kind === 'chapters') {\n      mode = 'hidden';\n    }\n\n    var _this = possibleConstructorReturn(this, _Track.call(this, settings));\n\n    _this.tech_ = settings.tech;\n\n    _this.cues_ = [];\n    _this.activeCues_ = [];\n\n    var cues = new TextTrackCueList(_this.cues_);\n    var activeCues = new TextTrackCueList(_this.activeCues_);\n    var changed = false;\n    var timeupdateHandler = bind(_this, function () {\n\n      // Accessing this.activeCues for the side-effects of updating itself\n      // due to it's nature as a getter function. Do not remove or cues will\n      // stop updating!\n      // Use the setter to prevent deletion from uglify (pure_getters rule)\n      this.activeCues = this.activeCues;\n      if (changed) {\n        this.trigger('cuechange');\n        changed = false;\n      }\n    });\n\n    if (mode !== 'disabled') {\n      _this.tech_.ready(function () {\n        _this.tech_.on('timeupdate', timeupdateHandler);\n      }, true);\n    }\n\n    Object.defineProperties(_this, {\n      /**\n       * @memberof TextTrack\n       * @member {boolean} default\n       *         If this track was set to be on or off by default. Cannot be changed after\n       *         creation.\n       * @instance\n       *\n       * @readonly\n       */\n      default: {\n        get: function get$$1() {\n          return default_;\n        },\n        set: function set$$1() {}\n      },\n\n      /**\n       * @memberof TextTrack\n       * @member {string} mode\n       *         Set the mode of this TextTrack to a valid {@link TextTrack~Mode}. Will\n       *         not be set if setting to an invalid mode.\n       * @instance\n       *\n       * @fires TextTrack#modechange\n       */\n      mode: {\n        get: function get$$1() {\n          return mode;\n        },\n        set: function set$$1(newMode) {\n          var _this2 = this;\n\n          if (!TextTrackMode[newMode]) {\n            return;\n          }\n          mode = newMode;\n          if (mode === 'showing') {\n\n            this.tech_.ready(function () {\n              _this2.tech_.on('timeupdate', timeupdateHandler);\n            }, true);\n          }\n          /**\n           * An event that fires when mode changes on this track. This allows\n           * the TextTrackList that holds this track to act accordingly.\n           *\n           * > Note: This is not part of the spec!\n           *\n           * @event TextTrack#modechange\n           * @type {EventTarget~Event}\n           */\n          this.trigger('modechange');\n        }\n      },\n\n      /**\n       * @memberof TextTrack\n       * @member {TextTrackCueList} cues\n       *         The text track cue list for this TextTrack.\n       * @instance\n       */\n      cues: {\n        get: function get$$1() {\n          if (!this.loaded_) {\n            return null;\n          }\n\n          return cues;\n        },\n        set: function set$$1() {}\n      },\n\n      /**\n       * @memberof TextTrack\n       * @member {TextTrackCueList} activeCues\n       *         The list text track cues that are currently active for this TextTrack.\n       * @instance\n       */\n      activeCues: {\n        get: function get$$1() {\n          if (!this.loaded_) {\n            return null;\n          }\n\n          // nothing to do\n          if (this.cues.length === 0) {\n            return activeCues;\n          }\n\n          var ct = this.tech_.currentTime();\n          var active = [];\n\n          for (var i = 0, l = this.cues.length; i < l; i++) {\n            var cue = this.cues[i];\n\n            if (cue.startTime <= ct && cue.endTime >= ct) {\n              active.push(cue);\n            } else if (cue.startTime === cue.endTime && cue.startTime <= ct && cue.startTime + 0.5 >= ct) {\n              active.push(cue);\n            }\n          }\n\n          changed = false;\n\n          if (active.length !== this.activeCues_.length) {\n            changed = true;\n          } else {\n            for (var _i = 0; _i < active.length; _i++) {\n              if (this.activeCues_.indexOf(active[_i]) === -1) {\n                changed = true;\n              }\n            }\n          }\n\n          this.activeCues_ = active;\n          activeCues.setCues_(this.activeCues_);\n\n          return activeCues;\n        },\n\n\n        // /!\\ Keep this setter empty (see the timeupdate handler above)\n        set: function set$$1() {}\n      }\n    });\n\n    if (settings.src) {\n      _this.src = settings.src;\n      loadTrack(settings.src, _this);\n    } else {\n      _this.loaded_ = true;\n    }\n    return _this;\n  }\n\n  /**\n   * Add a cue to the internal list of cues.\n   *\n   * @param {TextTrack~Cue} cue\n   *        The cue to add to our internal list\n   */\n\n\n  TextTrack.prototype.addCue = function addCue(originalCue) {\n    var cue = originalCue;\n\n    if (window$1.vttjs && !(originalCue instanceof window$1.vttjs.VTTCue)) {\n      cue = new window$1.vttjs.VTTCue(originalCue.startTime, originalCue.endTime, originalCue.text);\n\n      for (var prop in originalCue) {\n        if (!(prop in cue)) {\n          cue[prop] = originalCue[prop];\n        }\n      }\n\n      // make sure that `id` is copied over\n      cue.id = originalCue.id;\n      cue.originalCue_ = originalCue;\n    }\n\n    var tracks = this.tech_.textTracks();\n\n    for (var i = 0; i < tracks.length; i++) {\n      if (tracks[i] !== this) {\n        tracks[i].removeCue(cue);\n      }\n    }\n\n    this.cues_.push(cue);\n    this.cues.setCues_(this.cues_);\n  };\n\n  /**\n   * Remove a cue from our internal list\n   *\n   * @param {TextTrack~Cue} removeCue\n   *        The cue to remove from our internal list\n   */\n\n\n  TextTrack.prototype.removeCue = function removeCue(_removeCue) {\n    var i = this.cues_.length;\n\n    while (i--) {\n      var cue = this.cues_[i];\n\n      if (cue === _removeCue || cue.originalCue_ && cue.originalCue_ === _removeCue) {\n        this.cues_.splice(i, 1);\n        this.cues.setCues_(this.cues_);\n        break;\n      }\n    }\n  };\n\n  return TextTrack;\n}(Track);\n\n/**\n * cuechange - One or more cues in the track have become active or stopped being active.\n */\n\n\nTextTrack.prototype.allowedEvents_ = {\n  cuechange: 'cuechange'\n};\n\n/**\n * A representation of a single `AudioTrack`. If it is part of an {@link AudioTrackList}\n * only one `AudioTrack` in the list will be enabled at a time.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotrack}\n * @extends Track\n */\n\nvar AudioTrack = function (_Track) {\n  inherits(AudioTrack, _Track);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Object} [options={}]\n   *        Object of option names and values\n   *\n   * @param {AudioTrack~Kind} [options.kind='']\n   *        A valid audio track kind\n   *\n   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\n   *        A unique id for this AudioTrack.\n   *\n   * @param {string} [options.label='']\n   *        The menu label for this track.\n   *\n   * @param {string} [options.language='']\n   *        A valid two character language code.\n   *\n   * @param {boolean} [options.enabled]\n   *        If this track is the one that is currently playing. If this track is part of\n   *        an {@link AudioTrackList}, only one {@link AudioTrack} will be enabled.\n   */\n  function AudioTrack() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    classCallCheck(this, AudioTrack);\n\n    var settings = mergeOptions(options, {\n      kind: AudioTrackKind[options.kind] || ''\n    });\n\n    var _this = possibleConstructorReturn(this, _Track.call(this, settings));\n\n    var enabled = false;\n\n    /**\n     * @memberof AudioTrack\n     * @member {boolean} enabled\n     *         If this `AudioTrack` is enabled or not. When setting this will\n     *         fire {@link AudioTrack#enabledchange} if the state of enabled is changed.\n     * @instance\n     *\n     * @fires VideoTrack#selectedchange\n     */\n    Object.defineProperty(_this, 'enabled', {\n      get: function get$$1() {\n        return enabled;\n      },\n      set: function set$$1(newEnabled) {\n        // an invalid or unchanged value\n        if (typeof newEnabled !== 'boolean' || newEnabled === enabled) {\n          return;\n        }\n        enabled = newEnabled;\n\n        /**\n         * An event that fires when enabled changes on this track. This allows\n         * the AudioTrackList that holds this track to act accordingly.\n         *\n         * > Note: This is not part of the spec! Native tracks will do\n         *         this internally without an event.\n         *\n         * @event AudioTrack#enabledchange\n         * @type {EventTarget~Event}\n         */\n        this.trigger('enabledchange');\n      }\n    });\n\n    // if the user sets this track to selected then\n    // set selected to that true value otherwise\n    // we keep it false\n    if (settings.enabled) {\n      _this.enabled = settings.enabled;\n    }\n    _this.loaded_ = true;\n    return _this;\n  }\n\n  return AudioTrack;\n}(Track);\n\n/**\n * A representation of a single `VideoTrack`.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#videotrack}\n * @extends Track\n */\n\nvar VideoTrack = function (_Track) {\n  inherits(VideoTrack, _Track);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Object} [options={}]\n   *        Object of option names and values\n   *\n   * @param {string} [options.kind='']\n   *        A valid {@link VideoTrack~Kind}\n   *\n   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\n   *        A unique id for this AudioTrack.\n   *\n   * @param {string} [options.label='']\n   *        The menu label for this track.\n   *\n   * @param {string} [options.language='']\n   *        A valid two character language code.\n   *\n   * @param {boolean} [options.selected]\n   *        If this track is the one that is currently playing.\n   */\n  function VideoTrack() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    classCallCheck(this, VideoTrack);\n\n    var settings = mergeOptions(options, {\n      kind: VideoTrackKind[options.kind] || ''\n    });\n\n    var _this = possibleConstructorReturn(this, _Track.call(this, settings));\n\n    var selected = false;\n\n    /**\n     * @memberof VideoTrack\n     * @member {boolean} selected\n     *         If this `VideoTrack` is selected or not. When setting this will\n     *         fire {@link VideoTrack#selectedchange} if the state of selected changed.\n     * @instance\n     *\n     * @fires VideoTrack#selectedchange\n     */\n    Object.defineProperty(_this, 'selected', {\n      get: function get$$1() {\n        return selected;\n      },\n      set: function set$$1(newSelected) {\n        // an invalid or unchanged value\n        if (typeof newSelected !== 'boolean' || newSelected === selected) {\n          return;\n        }\n        selected = newSelected;\n\n        /**\n         * An event that fires when selected changes on this track. This allows\n         * the VideoTrackList that holds this track to act accordingly.\n         *\n         * > Note: This is not part of the spec! Native tracks will do\n         *         this internally without an event.\n         *\n         * @event VideoTrack#selectedchange\n         * @type {EventTarget~Event}\n         */\n        this.trigger('selectedchange');\n      }\n    });\n\n    // if the user sets this track to selected then\n    // set selected to that true value otherwise\n    // we keep it false\n    if (settings.selected) {\n      _this.selected = settings.selected;\n    }\n    return _this;\n  }\n\n  return VideoTrack;\n}(Track);\n\n/**\n * @file html-track-element.js\n */\n\n/**\n * @memberof HTMLTrackElement\n * @typedef {HTMLTrackElement~ReadyState}\n * @enum {number}\n */\nvar NONE = 0;\nvar LOADING = 1;\nvar LOADED = 2;\nvar ERROR = 3;\n\n/**\n * A single track represented in the DOM.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#htmltrackelement}\n * @extends EventTarget\n */\n\nvar HTMLTrackElement = function (_EventTarget) {\n  inherits(HTMLTrackElement, _EventTarget);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Object} options={}\n   *        Object of option names and values\n   *\n   * @param {Tech} options.tech\n   *        A reference to the tech that owns this HTMLTrackElement.\n   *\n   * @param {TextTrack~Kind} [options.kind='subtitles']\n   *        A valid text track kind.\n   *\n   * @param {TextTrack~Mode} [options.mode='disabled']\n   *        A valid text track mode.\n   *\n   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\n   *        A unique id for this TextTrack.\n   *\n   * @param {string} [options.label='']\n   *        The menu label for this track.\n   *\n   * @param {string} [options.language='']\n   *        A valid two character language code.\n   *\n   * @param {string} [options.srclang='']\n   *        A valid two character language code. An alternative, but deprioritized\n   *        vesion of `options.language`\n   *\n   * @param {string} [options.src]\n   *        A url to TextTrack cues.\n   *\n   * @param {boolean} [options.default]\n   *        If this track should default to on or off.\n   */\n  function HTMLTrackElement() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    classCallCheck(this, HTMLTrackElement);\n\n    var _this = possibleConstructorReturn(this, _EventTarget.call(this));\n\n    var readyState = void 0;\n\n    var track = new TextTrack(options);\n\n    _this.kind = track.kind;\n    _this.src = track.src;\n    _this.srclang = track.language;\n    _this.label = track.label;\n    _this.default = track.default;\n\n    Object.defineProperties(_this, {\n\n      /**\n       * @memberof HTMLTrackElement\n       * @member {HTMLTrackElement~ReadyState} readyState\n       *         The current ready state of the track element.\n       * @instance\n       */\n      readyState: {\n        get: function get$$1() {\n          return readyState;\n        }\n      },\n\n      /**\n       * @memberof HTMLTrackElement\n       * @member {TextTrack} track\n       *         The underlying TextTrack object.\n       * @instance\n       *\n       */\n      track: {\n        get: function get$$1() {\n          return track;\n        }\n      }\n    });\n\n    readyState = NONE;\n\n    /**\n     * @listens TextTrack#loadeddata\n     * @fires HTMLTrackElement#load\n     */\n    track.addEventListener('loadeddata', function () {\n      readyState = LOADED;\n\n      _this.trigger({\n        type: 'load',\n        target: _this\n      });\n    });\n    return _this;\n  }\n\n  return HTMLTrackElement;\n}(EventTarget);\n\nHTMLTrackElement.prototype.allowedEvents_ = {\n  load: 'load'\n};\n\nHTMLTrackElement.NONE = NONE;\nHTMLTrackElement.LOADING = LOADING;\nHTMLTrackElement.LOADED = LOADED;\nHTMLTrackElement.ERROR = ERROR;\n\n/*\n * This file contains all track properties that are used in\n * player.js, tech.js, html5.js and possibly other techs in the future.\n */\n\nvar NORMAL = {\n  audio: {\n    ListClass: AudioTrackList,\n    TrackClass: AudioTrack,\n    capitalName: 'Audio'\n  },\n  video: {\n    ListClass: VideoTrackList,\n    TrackClass: VideoTrack,\n    capitalName: 'Video'\n  },\n  text: {\n    ListClass: TextTrackList,\n    TrackClass: TextTrack,\n    capitalName: 'Text'\n  }\n};\n\nObject.keys(NORMAL).forEach(function (type) {\n  NORMAL[type].getterName = type + 'Tracks';\n  NORMAL[type].privateName = type + 'Tracks_';\n});\n\nvar REMOTE = {\n  remoteText: {\n    ListClass: TextTrackList,\n    TrackClass: TextTrack,\n    capitalName: 'RemoteText',\n    getterName: 'remoteTextTracks',\n    privateName: 'remoteTextTracks_'\n  },\n  remoteTextEl: {\n    ListClass: HtmlTrackElementList,\n    TrackClass: HTMLTrackElement,\n    capitalName: 'RemoteTextTrackEls',\n    getterName: 'remoteTextTrackEls',\n    privateName: 'remoteTextTrackEls_'\n  }\n};\n\nvar ALL = mergeOptions(NORMAL, REMOTE);\n\nREMOTE.names = Object.keys(REMOTE);\nNORMAL.names = Object.keys(NORMAL);\nALL.names = [].concat(REMOTE.names).concat(NORMAL.names);\n\n/**\n * @file tech.js\n */\n\n/**\n * An Object containing a structure like: `{src: 'url', type: 'mimetype'}` or string\n * that just contains the src url alone.\n * * `var SourceObject = {src: 'http://ex.com/video.mp4', type: 'video/mp4'};`\n   * `var SourceString = 'http://example.com/some-video.mp4';`\n *\n * @typedef {Object|string} Tech~SourceObject\n *\n * @property {string} src\n *           The url to the source\n *\n * @property {string} type\n *           The mime type of the source\n */\n\n/**\n * A function used by {@link Tech} to create a new {@link TextTrack}.\n *\n * @private\n *\n * @param {Tech} self\n *        An instance of the Tech class.\n *\n * @param {string} kind\n *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)\n *\n * @param {string} [label]\n *        Label to identify the text track\n *\n * @param {string} [language]\n *        Two letter language abbreviation\n *\n * @param {Object} [options={}]\n *        An object with additional text track options\n *\n * @return {TextTrack}\n *          The text track that was created.\n */\nfunction createTrackHelper(self, kind, label, language) {\n  var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n\n  var tracks = self.textTracks();\n\n  options.kind = kind;\n\n  if (label) {\n    options.label = label;\n  }\n  if (language) {\n    options.language = language;\n  }\n  options.tech = self;\n\n  var track = new ALL.text.TrackClass(options);\n\n  tracks.addTrack(track);\n\n  return track;\n}\n\n/**\n * This is the base class for media playback technology controllers, such as\n * {@link Flash} and {@link HTML5}\n *\n * @extends Component\n */\n\nvar Tech = function (_Component) {\n  inherits(Tech, _Component);\n\n  /**\n   * Create an instance of this Tech.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} ready\n   *        Callback function to call when the `HTML5` Tech is ready.\n   */\n  function Tech() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var ready = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\n    classCallCheck(this, Tech);\n\n    // we don't want the tech to report user activity automatically.\n    // This is done manually in addControlsListeners\n    options.reportTouchActivity = false;\n\n    // keep track of whether the current source has played at all to\n    // implement a very limited played()\n    var _this = possibleConstructorReturn(this, _Component.call(this, null, options, ready));\n\n    _this.hasStarted_ = false;\n    _this.on('playing', function () {\n      this.hasStarted_ = true;\n    });\n    _this.on('loadstart', function () {\n      this.hasStarted_ = false;\n    });\n\n    ALL.names.forEach(function (name) {\n      var props = ALL[name];\n\n      if (options && options[props.getterName]) {\n        _this[props.privateName] = options[props.getterName];\n      }\n    });\n\n    // Manually track progress in cases where the browser/flash player doesn't report it.\n    if (!_this.featuresProgressEvents) {\n      _this.manualProgressOn();\n    }\n\n    // Manually track timeupdates in cases where the browser/flash player doesn't report it.\n    if (!_this.featuresTimeupdateEvents) {\n      _this.manualTimeUpdatesOn();\n    }\n\n    ['Text', 'Audio', 'Video'].forEach(function (track) {\n      if (options['native' + track + 'Tracks'] === false) {\n        _this['featuresNative' + track + 'Tracks'] = false;\n      }\n    });\n\n    if (options.nativeCaptions === false || options.nativeTextTracks === false) {\n      _this.featuresNativeTextTracks = false;\n    } else if (options.nativeCaptions === true || options.nativeTextTracks === true) {\n      _this.featuresNativeTextTracks = true;\n    }\n\n    if (!_this.featuresNativeTextTracks) {\n      _this.emulateTextTracks();\n    }\n\n    _this.autoRemoteTextTracks_ = new ALL.text.ListClass();\n\n    _this.initTrackListeners();\n\n    // Turn on component tap events only if not using native controls\n    if (!options.nativeControlsForTouch) {\n      _this.emitTapEvents();\n    }\n\n    if (_this.constructor) {\n      _this.name_ = _this.constructor.name || 'Unknown Tech';\n    }\n    return _this;\n  }\n\n  /**\n   * A special function to trigger source set in a way that will allow player\n   * to re-trigger if the player or tech are not ready yet.\n   *\n   * @fires Tech#sourceset\n   * @param {string} src The source string at the time of the source changing.\n   */\n\n\n  Tech.prototype.triggerSourceset = function triggerSourceset(src) {\n    var _this2 = this;\n\n    if (!this.isReady_) {\n      // on initial ready we have to trigger source set\n      // 1ms after ready so that player can watch for it.\n      this.one('ready', function () {\n        return _this2.setTimeout(function () {\n          return _this2.triggerSourceset(src);\n        }, 1);\n      });\n    }\n\n    /**\n     * Fired when the source is set on the tech causing the media element\n     * to reload.\n     *\n     * @see {@link Player#event:sourceset}\n     * @event Tech#sourceset\n     * @type {EventTarget~Event}\n     */\n    this.trigger({\n      src: src,\n      type: 'sourceset'\n    });\n  };\n\n  /* Fallbacks for unsupported event types\n  ================================================================================ */\n\n  /**\n   * Polyfill the `progress` event for browsers that don't support it natively.\n   *\n   * @see {@link Tech#trackProgress}\n   */\n\n\n  Tech.prototype.manualProgressOn = function manualProgressOn() {\n    this.on('durationchange', this.onDurationChange);\n\n    this.manualProgress = true;\n\n    // Trigger progress watching when a source begins loading\n    this.one('ready', this.trackProgress);\n  };\n\n  /**\n   * Turn off the polyfill for `progress` events that was created in\n   * {@link Tech#manualProgressOn}\n   */\n\n\n  Tech.prototype.manualProgressOff = function manualProgressOff() {\n    this.manualProgress = false;\n    this.stopTrackingProgress();\n\n    this.off('durationchange', this.onDurationChange);\n  };\n\n  /**\n   * This is used to trigger a `progress` event when the buffered percent changes. It\n   * sets an interval function that will be called every 500 milliseconds to check if the\n   * buffer end percent has changed.\n   *\n   * > This function is called by {@link Tech#manualProgressOn}\n   *\n   * @param {EventTarget~Event} event\n   *        The `ready` event that caused this to run.\n   *\n   * @listens Tech#ready\n   * @fires Tech#progress\n   */\n\n\n  Tech.prototype.trackProgress = function trackProgress(event) {\n    this.stopTrackingProgress();\n    this.progressInterval = this.setInterval(bind(this, function () {\n      // Don't trigger unless buffered amount is greater than last time\n\n      var numBufferedPercent = this.bufferedPercent();\n\n      if (this.bufferedPercent_ !== numBufferedPercent) {\n        /**\n         * See {@link Player#progress}\n         *\n         * @event Tech#progress\n         * @type {EventTarget~Event}\n         */\n        this.trigger('progress');\n      }\n\n      this.bufferedPercent_ = numBufferedPercent;\n\n      if (numBufferedPercent === 1) {\n        this.stopTrackingProgress();\n      }\n    }), 500);\n  };\n\n  /**\n   * Update our internal duration on a `durationchange` event by calling\n   * {@link Tech#duration}.\n   *\n   * @param {EventTarget~Event} event\n   *        The `durationchange` event that caused this to run.\n   *\n   * @listens Tech#durationchange\n   */\n\n\n  Tech.prototype.onDurationChange = function onDurationChange(event) {\n    this.duration_ = this.duration();\n  };\n\n  /**\n   * Get and create a `TimeRange` object for buffering.\n   *\n   * @return {TimeRange}\n   *         The time range object that was created.\n   */\n\n\n  Tech.prototype.buffered = function buffered() {\n    return createTimeRanges(0, 0);\n  };\n\n  /**\n   * Get the percentage of the current video that is currently buffered.\n   *\n   * @return {number}\n   *         A number from 0 to 1 that represents the decimal percentage of the\n   *         video that is buffered.\n   *\n   */\n\n\n  Tech.prototype.bufferedPercent = function bufferedPercent$$1() {\n    return bufferedPercent(this.buffered(), this.duration_);\n  };\n\n  /**\n   * Turn off the polyfill for `progress` events that was created in\n   * {@link Tech#manualProgressOn}\n   * Stop manually tracking progress events by clearing the interval that was set in\n   * {@link Tech#trackProgress}.\n   */\n\n\n  Tech.prototype.stopTrackingProgress = function stopTrackingProgress() {\n    this.clearInterval(this.progressInterval);\n  };\n\n  /**\n   * Polyfill the `timeupdate` event for browsers that don't support it.\n   *\n   * @see {@link Tech#trackCurrentTime}\n   */\n\n\n  Tech.prototype.manualTimeUpdatesOn = function manualTimeUpdatesOn() {\n    this.manualTimeUpdates = true;\n\n    this.on('play', this.trackCurrentTime);\n    this.on('pause', this.stopTrackingCurrentTime);\n  };\n\n  /**\n   * Turn off the polyfill for `timeupdate` events that was created in\n   * {@link Tech#manualTimeUpdatesOn}\n   */\n\n\n  Tech.prototype.manualTimeUpdatesOff = function manualTimeUpdatesOff() {\n    this.manualTimeUpdates = false;\n    this.stopTrackingCurrentTime();\n    this.off('play', this.trackCurrentTime);\n    this.off('pause', this.stopTrackingCurrentTime);\n  };\n\n  /**\n   * Sets up an interval function to track current time and trigger `timeupdate` every\n   * 250 milliseconds.\n   *\n   * @listens Tech#play\n   * @triggers Tech#timeupdate\n   */\n\n\n  Tech.prototype.trackCurrentTime = function trackCurrentTime() {\n    if (this.currentTimeInterval) {\n      this.stopTrackingCurrentTime();\n    }\n    this.currentTimeInterval = this.setInterval(function () {\n      /**\n       * Triggered at an interval of 250ms to indicated that time is passing in the video.\n       *\n       * @event Tech#timeupdate\n       * @type {EventTarget~Event}\n       */\n      this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });\n\n      // 42 = 24 fps // 250 is what Webkit uses // FF uses 15\n    }, 250);\n  };\n\n  /**\n   * Stop the interval function created in {@link Tech#trackCurrentTime} so that the\n   * `timeupdate` event is no longer triggered.\n   *\n   * @listens {Tech#pause}\n   */\n\n\n  Tech.prototype.stopTrackingCurrentTime = function stopTrackingCurrentTime() {\n    this.clearInterval(this.currentTimeInterval);\n\n    // #1002 - if the video ends right before the next timeupdate would happen,\n    // the progress bar won't make it all the way to the end\n    this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });\n  };\n\n  /**\n   * Turn off all event polyfills, clear the `Tech`s {@link AudioTrackList},\n   * {@link VideoTrackList}, and {@link TextTrackList}, and dispose of this Tech.\n   *\n   * @fires Component#dispose\n   */\n\n\n  Tech.prototype.dispose = function dispose() {\n\n    // clear out all tracks because we can't reuse them between techs\n    this.clearTracks(NORMAL.names);\n\n    // Turn off any manual progress or timeupdate tracking\n    if (this.manualProgress) {\n      this.manualProgressOff();\n    }\n\n    if (this.manualTimeUpdates) {\n      this.manualTimeUpdatesOff();\n    }\n\n    _Component.prototype.dispose.call(this);\n  };\n\n  /**\n   * Clear out a single `TrackList` or an array of `TrackLists` given their names.\n   *\n   * > Note: Techs without source handlers should call this between sources for `video`\n   *         & `audio` tracks. You don't want to use them between tracks!\n   *\n   * @param {string[]|string} types\n   *        TrackList names to clear, valid names are `video`, `audio`, and\n   *        `text`.\n   */\n\n\n  Tech.prototype.clearTracks = function clearTracks(types) {\n    var _this3 = this;\n\n    types = [].concat(types);\n    // clear out all tracks because we can't reuse them between techs\n    types.forEach(function (type) {\n      var list = _this3[type + 'Tracks']() || [];\n      var i = list.length;\n\n      while (i--) {\n        var track = list[i];\n\n        if (type === 'text') {\n          _this3.removeRemoteTextTrack(track);\n        }\n        list.removeTrack(track);\n      }\n    });\n  };\n\n  /**\n   * Remove any TextTracks added via addRemoteTextTrack that are\n   * flagged for automatic garbage collection\n   */\n\n\n  Tech.prototype.cleanupAutoTextTracks = function cleanupAutoTextTracks() {\n    var list = this.autoRemoteTextTracks_ || [];\n    var i = list.length;\n\n    while (i--) {\n      var track = list[i];\n\n      this.removeRemoteTextTrack(track);\n    }\n  };\n\n  /**\n   * Reset the tech, which will removes all sources and reset the internal readyState.\n   *\n   * @abstract\n   */\n\n\n  Tech.prototype.reset = function reset() {};\n\n  /**\n   * Get or set an error on the Tech.\n   *\n   * @param {MediaError} [err]\n   *        Error to set on the Tech\n   *\n   * @return {MediaError|null}\n   *         The current error object on the tech, or null if there isn't one.\n   */\n\n\n  Tech.prototype.error = function error(err) {\n    if (err !== undefined) {\n      this.error_ = new MediaError(err);\n      this.trigger('error');\n    }\n    return this.error_;\n  };\n\n  /**\n   * Returns the `TimeRange`s that have been played through for the current source.\n   *\n   * > NOTE: This implementation is incomplete. It does not track the played `TimeRange`.\n   *         It only checks whether the source has played at all or not.\n   *\n   * @return {TimeRange}\n   *         - A single time range if this video has played\n   *         - An empty set of ranges if not.\n   */\n\n\n  Tech.prototype.played = function played() {\n    if (this.hasStarted_) {\n      return createTimeRanges(0, 0);\n    }\n    return createTimeRanges();\n  };\n\n  /**\n   * Causes a manual time update to occur if {@link Tech#manualTimeUpdatesOn} was\n   * previously called.\n   *\n   * @fires Tech#timeupdate\n   */\n\n\n  Tech.prototype.setCurrentTime = function setCurrentTime() {\n    // improve the accuracy of manual timeupdates\n    if (this.manualTimeUpdates) {\n      /**\n       * A manual `timeupdate` event.\n       *\n       * @event Tech#timeupdate\n       * @type {EventTarget~Event}\n       */\n      this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });\n    }\n  };\n\n  /**\n   * Turn on listeners for {@link VideoTrackList}, {@link {AudioTrackList}, and\n   * {@link TextTrackList} events.\n   *\n   * This adds {@link EventTarget~EventListeners} for `addtrack`, and  `removetrack`.\n   *\n   * @fires Tech#audiotrackchange\n   * @fires Tech#videotrackchange\n   * @fires Tech#texttrackchange\n   */\n\n\n  Tech.prototype.initTrackListeners = function initTrackListeners() {\n    var _this4 = this;\n\n    /**\n     * Triggered when tracks are added or removed on the Tech {@link AudioTrackList}\n     *\n     * @event Tech#audiotrackchange\n     * @type {EventTarget~Event}\n     */\n\n    /**\n     * Triggered when tracks are added or removed on the Tech {@link VideoTrackList}\n     *\n     * @event Tech#videotrackchange\n     * @type {EventTarget~Event}\n     */\n\n    /**\n     * Triggered when tracks are added or removed on the Tech {@link TextTrackList}\n     *\n     * @event Tech#texttrackchange\n     * @type {EventTarget~Event}\n     */\n    NORMAL.names.forEach(function (name) {\n      var props = NORMAL[name];\n      var trackListChanges = function trackListChanges() {\n        _this4.trigger(name + 'trackchange');\n      };\n\n      var tracks = _this4[props.getterName]();\n\n      tracks.addEventListener('removetrack', trackListChanges);\n      tracks.addEventListener('addtrack', trackListChanges);\n\n      _this4.on('dispose', function () {\n        tracks.removeEventListener('removetrack', trackListChanges);\n        tracks.removeEventListener('addtrack', trackListChanges);\n      });\n    });\n  };\n\n  /**\n   * Emulate TextTracks using vtt.js if necessary\n   *\n   * @fires Tech#vttjsloaded\n   * @fires Tech#vttjserror\n   */\n\n\n  Tech.prototype.addWebVttScript_ = function addWebVttScript_() {\n    var _this5 = this;\n\n    if (window$1.WebVTT) {\n      return;\n    }\n\n    // Initially, Tech.el_ is a child of a dummy-div wait until the Component system\n    // signals that the Tech is ready at which point Tech.el_ is part of the DOM\n    // before inserting the WebVTT script\n    if (document.body.contains(this.el())) {\n\n      // load via require if available and vtt.js script location was not passed in\n      // as an option. novtt builds will turn the above require call into an empty object\n      // which will cause this if check to always fail.\n      if (!this.options_['vtt.js'] && isPlain(vtt) && Object.keys(vtt).length > 0) {\n        this.trigger('vttjsloaded');\n        return;\n      }\n\n      // load vtt.js via the script location option or the cdn of no location was\n      // passed in\n      var script = document.createElement('script');\n\n      script.src = this.options_['vtt.js'] || 'https://vjs.zencdn.net/vttjs/0.14.1/vtt.min.js';\n      script.onload = function () {\n        /**\n         * Fired when vtt.js is loaded.\n         *\n         * @event Tech#vttjsloaded\n         * @type {EventTarget~Event}\n         */\n        _this5.trigger('vttjsloaded');\n      };\n      script.onerror = function () {\n        /**\n         * Fired when vtt.js was not loaded due to an error\n         *\n         * @event Tech#vttjsloaded\n         * @type {EventTarget~Event}\n         */\n        _this5.trigger('vttjserror');\n      };\n      this.on('dispose', function () {\n        script.onload = null;\n        script.onerror = null;\n      });\n      // but have not loaded yet and we set it to true before the inject so that\n      // we don't overwrite the injected window.WebVTT if it loads right away\n      window$1.WebVTT = true;\n      this.el().parentNode.appendChild(script);\n    } else {\n      this.ready(this.addWebVttScript_);\n    }\n  };\n\n  /**\n   * Emulate texttracks\n   *\n   */\n\n\n  Tech.prototype.emulateTextTracks = function emulateTextTracks() {\n    var _this6 = this;\n\n    var tracks = this.textTracks();\n    var remoteTracks = this.remoteTextTracks();\n    var handleAddTrack = function handleAddTrack(e) {\n      return tracks.addTrack(e.track);\n    };\n    var handleRemoveTrack = function handleRemoveTrack(e) {\n      return tracks.removeTrack(e.track);\n    };\n\n    remoteTracks.on('addtrack', handleAddTrack);\n    remoteTracks.on('removetrack', handleRemoveTrack);\n\n    this.addWebVttScript_();\n\n    var updateDisplay = function updateDisplay() {\n      return _this6.trigger('texttrackchange');\n    };\n\n    var textTracksChanges = function textTracksChanges() {\n      updateDisplay();\n\n      for (var i = 0; i < tracks.length; i++) {\n        var track = tracks[i];\n\n        track.removeEventListener('cuechange', updateDisplay);\n        if (track.mode === 'showing') {\n          track.addEventListener('cuechange', updateDisplay);\n        }\n      }\n    };\n\n    textTracksChanges();\n    tracks.addEventListener('change', textTracksChanges);\n    tracks.addEventListener('addtrack', textTracksChanges);\n    tracks.addEventListener('removetrack', textTracksChanges);\n\n    this.on('dispose', function () {\n      remoteTracks.off('addtrack', handleAddTrack);\n      remoteTracks.off('removetrack', handleRemoveTrack);\n      tracks.removeEventListener('change', textTracksChanges);\n      tracks.removeEventListener('addtrack', textTracksChanges);\n      tracks.removeEventListener('removetrack', textTracksChanges);\n\n      for (var i = 0; i < tracks.length; i++) {\n        var track = tracks[i];\n\n        track.removeEventListener('cuechange', updateDisplay);\n      }\n    });\n  };\n\n  /**\n   * Create and returns a remote {@link TextTrack} object.\n   *\n   * @param {string} kind\n   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)\n   *\n   * @param {string} [label]\n   *        Label to identify the text track\n   *\n   * @param {string} [language]\n   *        Two letter language abbreviation\n   *\n   * @return {TextTrack}\n   *         The TextTrack that gets created.\n   */\n\n\n  Tech.prototype.addTextTrack = function addTextTrack(kind, label, language) {\n    if (!kind) {\n      throw new Error('TextTrack kind is required but was not provided');\n    }\n\n    return createTrackHelper(this, kind, label, language);\n  };\n\n  /**\n   * Create an emulated TextTrack for use by addRemoteTextTrack\n   *\n   * This is intended to be overridden by classes that inherit from\n   * Tech in order to create native or custom TextTracks.\n   *\n   * @param {Object} options\n   *        The object should contain the options to initialize the TextTrack with.\n   *\n   * @param {string} [options.kind]\n   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).\n   *\n   * @param {string} [options.label].\n   *        Label to identify the text track\n   *\n   * @param {string} [options.language]\n   *        Two letter language abbreviation.\n   *\n   * @return {HTMLTrackElement}\n   *         The track element that gets created.\n   */\n\n\n  Tech.prototype.createRemoteTextTrack = function createRemoteTextTrack(options) {\n    var track = mergeOptions(options, {\n      tech: this\n    });\n\n    return new REMOTE.remoteTextEl.TrackClass(track);\n  };\n\n  /**\n   * Creates a remote text track object and returns an html track element.\n   *\n   * > Note: This can be an emulated {@link HTMLTrackElement} or a native one.\n   *\n   * @param {Object} options\n   *        See {@link Tech#createRemoteTextTrack} for more detailed properties.\n   *\n   * @param {boolean} [manualCleanup=true]\n   *        - When false: the TextTrack will be automatically removed from the video\n   *          element whenever the source changes\n   *        - When True: The TextTrack will have to be cleaned up manually\n   *\n   * @return {HTMLTrackElement}\n   *         An Html Track Element.\n   *\n   * @deprecated The default functionality for this function will be equivalent\n   *             to \"manualCleanup=false\" in the future. The manualCleanup parameter will\n   *             also be removed.\n   */\n\n\n  Tech.prototype.addRemoteTextTrack = function addRemoteTextTrack() {\n    var _this7 = this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var manualCleanup = arguments[1];\n\n    var htmlTrackElement = this.createRemoteTextTrack(options);\n\n    if (manualCleanup !== true && manualCleanup !== false) {\n      // deprecation warning\n      log$1.warn('Calling addRemoteTextTrack without explicitly setting the \"manualCleanup\" parameter to `true` is deprecated and default to `false` in future version of video.js');\n      manualCleanup = true;\n    }\n\n    // store HTMLTrackElement and TextTrack to remote list\n    this.remoteTextTrackEls().addTrackElement_(htmlTrackElement);\n    this.remoteTextTracks().addTrack(htmlTrackElement.track);\n\n    if (manualCleanup !== true) {\n      // create the TextTrackList if it doesn't exist\n      this.ready(function () {\n        return _this7.autoRemoteTextTracks_.addTrack(htmlTrackElement.track);\n      });\n    }\n\n    return htmlTrackElement;\n  };\n\n  /**\n   * Remove a remote text track from the remote `TextTrackList`.\n   *\n   * @param {TextTrack} track\n   *        `TextTrack` to remove from the `TextTrackList`\n   */\n\n\n  Tech.prototype.removeRemoteTextTrack = function removeRemoteTextTrack(track) {\n    var trackElement = this.remoteTextTrackEls().getTrackElementByTrack_(track);\n\n    // remove HTMLTrackElement and TextTrack from remote list\n    this.remoteTextTrackEls().removeTrackElement_(trackElement);\n    this.remoteTextTracks().removeTrack(track);\n    this.autoRemoteTextTracks_.removeTrack(track);\n  };\n\n  /**\n   * Gets available media playback quality metrics as specified by the W3C's Media\n   * Playback Quality API.\n   *\n   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}\n   *\n   * @return {Object}\n   *         An object with supported media playback quality metrics\n   *\n   * @abstract\n   */\n\n\n  Tech.prototype.getVideoPlaybackQuality = function getVideoPlaybackQuality() {\n    return {};\n  };\n\n  /**\n   * A method to set a poster from a `Tech`.\n   *\n   * @abstract\n   */\n\n\n  Tech.prototype.setPoster = function setPoster() {};\n\n  /**\n   * A method to check for the presence of the 'playsinline' <video> attribute.\n   *\n   * @abstract\n   */\n\n\n  Tech.prototype.playsinline = function playsinline() {};\n\n  /**\n   * A method to set or unset the 'playsinline' <video> attribute.\n   *\n   * @abstract\n   */\n\n\n  Tech.prototype.setPlaysinline = function setPlaysinline() {};\n\n  /**\n   * Attempt to force override of native audio tracks.\n   *\n   * @param {Boolean} override - If set to true native audio will be overridden,\n   * otherwise native audio will potentially be used.\n   *\n   * @abstract\n   */\n\n\n  Tech.prototype.overrideNativeAudioTracks = function overrideNativeAudioTracks() {};\n\n  /**\n   * Attempt to force override of native video tracks.\n   *\n   * @param {Boolean} override - If set to true native video will be overridden,\n   * otherwise native video will potentially be used.\n   *\n   * @abstract\n   */\n\n\n  Tech.prototype.overrideNativeVideoTracks = function overrideNativeVideoTracks() {};\n\n  /*\n   * Check if the tech can support the given mime-type.\n   *\n   * The base tech does not support any type, but source handlers might\n   * overwrite this.\n   *\n   * @param  {string} type\n   *         The mimetype to check for support\n   *\n   * @return {string}\n   *         'probably', 'maybe', or empty string\n   *\n   * @see [Spec]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canPlayType}\n   *\n   * @abstract\n   */\n\n\n  Tech.prototype.canPlayType = function canPlayType() {\n    return '';\n  };\n\n  /**\n   * Check if the type is supported by this tech.\n   *\n   * The base tech does not support any type, but source handlers might\n   * overwrite this.\n   *\n   * @param {string} type\n   *        The media type to check\n   * @return {string} Returns the native video element's response\n   */\n\n\n  Tech.canPlayType = function canPlayType() {\n    return '';\n  };\n\n  /**\n   * Check if the tech can support the given source\n   * @param {Object} srcObj\n   *        The source object\n   * @param {Object} options\n   *        The options passed to the tech\n   * @return {string} 'probably', 'maybe', or '' (empty string)\n   */\n\n\n  Tech.canPlaySource = function canPlaySource(srcObj, options) {\n    return Tech.canPlayType(srcObj.type);\n  };\n\n  /*\n   * Return whether the argument is a Tech or not.\n   * Can be passed either a Class like `Html5` or a instance like `player.tech_`\n   *\n   * @param {Object} component\n   *        The item to check\n   *\n   * @return {boolean}\n   *         Whether it is a tech or not\n   *         - True if it is a tech\n   *         - False if it is not\n   */\n\n\n  Tech.isTech = function isTech(component) {\n    return component.prototype instanceof Tech || component instanceof Tech || component === Tech;\n  };\n\n  /**\n   * Registers a `Tech` into a shared list for videojs.\n   *\n   * @param {string} name\n   *        Name of the `Tech` to register.\n   *\n   * @param {Object} tech\n   *        The `Tech` class to register.\n   */\n\n\n  Tech.registerTech = function registerTech(name, tech) {\n    if (!Tech.techs_) {\n      Tech.techs_ = {};\n    }\n\n    if (!Tech.isTech(tech)) {\n      throw new Error('Tech ' + name + ' must be a Tech');\n    }\n\n    if (!Tech.canPlayType) {\n      throw new Error('Techs must have a static canPlayType method on them');\n    }\n    if (!Tech.canPlaySource) {\n      throw new Error('Techs must have a static canPlaySource method on them');\n    }\n\n    name = toTitleCase(name);\n\n    Tech.techs_[name] = tech;\n    if (name !== 'Tech') {\n      // camel case the techName for use in techOrder\n      Tech.defaultTechOrder_.push(name);\n    }\n    return tech;\n  };\n\n  /**\n   * Get a `Tech` from the shared list by name.\n   *\n   * @param {string} name\n   *        `camelCase` or `TitleCase` name of the Tech to get\n   *\n   * @return {Tech|undefined}\n   *         The `Tech` or undefined if there was no tech with the name requested.\n   */\n\n\n  Tech.getTech = function getTech(name) {\n    if (!name) {\n      return;\n    }\n\n    name = toTitleCase(name);\n\n    if (Tech.techs_ && Tech.techs_[name]) {\n      return Tech.techs_[name];\n    }\n\n    if (window$1 && window$1.videojs && window$1.videojs[name]) {\n      log$1.warn('The ' + name + ' tech was added to the videojs object when it should be registered using videojs.registerTech(name, tech)');\n      return window$1.videojs[name];\n    }\n  };\n\n  return Tech;\n}(Component);\n\n/**\n * Get the {@link VideoTrackList}\n *\n * @returns {VideoTrackList}\n * @method Tech.prototype.videoTracks\n */\n\n/**\n * Get the {@link AudioTrackList}\n *\n * @returns {AudioTrackList}\n * @method Tech.prototype.audioTracks\n */\n\n/**\n * Get the {@link TextTrackList}\n *\n * @returns {TextTrackList}\n * @method Tech.prototype.textTracks\n */\n\n/**\n * Get the remote element {@link TextTrackList}\n *\n * @returns {TextTrackList}\n * @method Tech.prototype.remoteTextTracks\n */\n\n/**\n * Get the remote element {@link HtmlTrackElementList}\n *\n * @returns {HtmlTrackElementList}\n * @method Tech.prototype.remoteTextTrackEls\n */\n\nALL.names.forEach(function (name) {\n  var props = ALL[name];\n\n  Tech.prototype[props.getterName] = function () {\n    this[props.privateName] = this[props.privateName] || new props.ListClass();\n    return this[props.privateName];\n  };\n});\n\n/**\n * List of associated text tracks\n *\n * @type {TextTrackList}\n * @private\n * @property Tech#textTracks_\n */\n\n/**\n * List of associated audio tracks.\n *\n * @type {AudioTrackList}\n * @private\n * @property Tech#audioTracks_\n */\n\n/**\n * List of associated video tracks.\n *\n * @type {VideoTrackList}\n * @private\n * @property Tech#videoTracks_\n */\n\n/**\n * Boolean indicating whether the `Tech` supports volume control.\n *\n * @type {boolean}\n * @default\n */\nTech.prototype.featuresVolumeControl = true;\n\n/**\n * Boolean indicating whether the `Tech` supports muting volume.\n *\n * @type {bolean}\n * @default\n */\nTech.prototype.featuresMuteControl = true;\n\n/**\n * Boolean indicating whether the `Tech` supports fullscreen resize control.\n * Resizing plugins using request fullscreen reloads the plugin\n *\n * @type {boolean}\n * @default\n */\nTech.prototype.featuresFullscreenResize = false;\n\n/**\n * Boolean indicating whether the `Tech` supports changing the speed at which the video\n * plays. Examples:\n *   - Set player to play 2x (twice) as fast\n *   - Set player to play 0.5x (half) as fast\n *\n * @type {boolean}\n * @default\n */\nTech.prototype.featuresPlaybackRate = false;\n\n/**\n * Boolean indicating whether the `Tech` supports the `progress` event. This is currently\n * not triggered by video-js-swf. This will be used to determine if\n * {@link Tech#manualProgressOn} should be called.\n *\n * @type {boolean}\n * @default\n */\nTech.prototype.featuresProgressEvents = false;\n\n/**\n * Boolean indicating whether the `Tech` supports the `sourceset` event.\n *\n * A tech should set this to `true` and then use {@link Tech#triggerSourceset}\n * to trigger a {@link Tech#event:sourceset} at the earliest time after getting\n * a new source.\n *\n * @type {boolean}\n * @default\n */\nTech.prototype.featuresSourceset = false;\n\n/**\n * Boolean indicating whether the `Tech` supports the `timeupdate` event. This is currently\n * not triggered by video-js-swf. This will be used to determine if\n * {@link Tech#manualTimeUpdates} should be called.\n *\n * @type {boolean}\n * @default\n */\nTech.prototype.featuresTimeupdateEvents = false;\n\n/**\n * Boolean indicating whether the `Tech` supports the native `TextTrack`s.\n * This will help us integrate with native `TextTrack`s if the browser supports them.\n *\n * @type {boolean}\n * @default\n */\nTech.prototype.featuresNativeTextTracks = false;\n\n/**\n * A functional mixin for techs that want to use the Source Handler pattern.\n * Source handlers are scripts for handling specific formats.\n * The source handler pattern is used for adaptive formats (HLS, DASH) that\n * manually load video data and feed it into a Source Buffer (Media Source Extensions)\n * Example: `Tech.withSourceHandlers.call(MyTech);`\n *\n * @param {Tech} _Tech\n *        The tech to add source handler functions to.\n *\n * @mixes Tech~SourceHandlerAdditions\n */\nTech.withSourceHandlers = function (_Tech) {\n\n  /**\n   * Register a source handler\n   *\n   * @param {Function} handler\n   *        The source handler class\n   *\n   * @param {number} [index]\n   *        Register it at the following index\n   */\n  _Tech.registerSourceHandler = function (handler, index) {\n    var handlers = _Tech.sourceHandlers;\n\n    if (!handlers) {\n      handlers = _Tech.sourceHandlers = [];\n    }\n\n    if (index === undefined) {\n      // add to the end of the list\n      index = handlers.length;\n    }\n\n    handlers.splice(index, 0, handler);\n  };\n\n  /**\n   * Check if the tech can support the given type. Also checks the\n   * Techs sourceHandlers.\n   *\n   * @param {string} type\n   *         The mimetype to check.\n   *\n   * @return {string}\n   *         'probably', 'maybe', or '' (empty string)\n   */\n  _Tech.canPlayType = function (type) {\n    var handlers = _Tech.sourceHandlers || [];\n    var can = void 0;\n\n    for (var i = 0; i < handlers.length; i++) {\n      can = handlers[i].canPlayType(type);\n\n      if (can) {\n        return can;\n      }\n    }\n\n    return '';\n  };\n\n  /**\n   * Returns the first source handler that supports the source.\n   *\n   * TODO: Answer question: should 'probably' be prioritized over 'maybe'\n   *\n   * @param {Tech~SourceObject} source\n   *        The source object\n   *\n   * @param {Object} options\n   *        The options passed to the tech\n   *\n   * @return {SourceHandler|null}\n   *          The first source handler that supports the source or null if\n   *          no SourceHandler supports the source\n   */\n  _Tech.selectSourceHandler = function (source, options) {\n    var handlers = _Tech.sourceHandlers || [];\n    var can = void 0;\n\n    for (var i = 0; i < handlers.length; i++) {\n      can = handlers[i].canHandleSource(source, options);\n\n      if (can) {\n        return handlers[i];\n      }\n    }\n\n    return null;\n  };\n\n  /**\n   * Check if the tech can support the given source.\n   *\n   * @param {Tech~SourceObject} srcObj\n   *        The source object\n   *\n   * @param {Object} options\n   *        The options passed to the tech\n   *\n   * @return {string}\n   *         'probably', 'maybe', or '' (empty string)\n   */\n  _Tech.canPlaySource = function (srcObj, options) {\n    var sh = _Tech.selectSourceHandler(srcObj, options);\n\n    if (sh) {\n      return sh.canHandleSource(srcObj, options);\n    }\n\n    return '';\n  };\n\n  /**\n   * When using a source handler, prefer its implementation of\n   * any function normally provided by the tech.\n   */\n  var deferrable = ['seekable', 'seeking', 'duration'];\n\n  /**\n   * A wrapper around {@link Tech#seekable} that will call a `SourceHandler`s seekable\n   * function if it exists, with a fallback to the Techs seekable function.\n   *\n   * @method _Tech.seekable\n   */\n\n  /**\n   * A wrapper around {@link Tech#duration} that will call a `SourceHandler`s duration\n   * function if it exists, otherwise it will fallback to the techs duration function.\n   *\n   * @method _Tech.duration\n   */\n\n  deferrable.forEach(function (fnName) {\n    var originalFn = this[fnName];\n\n    if (typeof originalFn !== 'function') {\n      return;\n    }\n\n    this[fnName] = function () {\n      if (this.sourceHandler_ && this.sourceHandler_[fnName]) {\n        return this.sourceHandler_[fnName].apply(this.sourceHandler_, arguments);\n      }\n      return originalFn.apply(this, arguments);\n    };\n  }, _Tech.prototype);\n\n  /**\n   * Create a function for setting the source using a source object\n   * and source handlers.\n   * Should never be called unless a source handler was found.\n   *\n   * @param {Tech~SourceObject} source\n   *        A source object with src and type keys\n   */\n  _Tech.prototype.setSource = function (source) {\n    var sh = _Tech.selectSourceHandler(source, this.options_);\n\n    if (!sh) {\n      // Fall back to a native source hander when unsupported sources are\n      // deliberately set\n      if (_Tech.nativeSourceHandler) {\n        sh = _Tech.nativeSourceHandler;\n      } else {\n        log$1.error('No source handler found for the current source.');\n      }\n    }\n\n    // Dispose any existing source handler\n    this.disposeSourceHandler();\n    this.off('dispose', this.disposeSourceHandler);\n\n    if (sh !== _Tech.nativeSourceHandler) {\n      this.currentSource_ = source;\n    }\n\n    this.sourceHandler_ = sh.handleSource(source, this, this.options_);\n    this.on('dispose', this.disposeSourceHandler);\n  };\n\n  /**\n   * Clean up any existing SourceHandlers and listeners when the Tech is disposed.\n   *\n   * @listens Tech#dispose\n   */\n  _Tech.prototype.disposeSourceHandler = function () {\n    // if we have a source and get another one\n    // then we are loading something new\n    // than clear all of our current tracks\n    if (this.currentSource_) {\n      this.clearTracks(['audio', 'video']);\n      this.currentSource_ = null;\n    }\n\n    // always clean up auto-text tracks\n    this.cleanupAutoTextTracks();\n\n    if (this.sourceHandler_) {\n\n      if (this.sourceHandler_.dispose) {\n        this.sourceHandler_.dispose();\n      }\n\n      this.sourceHandler_ = null;\n    }\n  };\n};\n\n// The base Tech class needs to be registered as a Component. It is the only\n// Tech that can be registered as a Component.\nComponent.registerComponent('Tech', Tech);\nTech.registerTech('Tech', Tech);\n\n/**\n * A list of techs that should be added to techOrder on Players\n *\n * @private\n */\nTech.defaultTechOrder_ = [];\n\nvar middlewares = {};\nvar middlewareInstances = {};\n\nvar TERMINATOR = {};\n\nfunction use(type, middleware) {\n  middlewares[type] = middlewares[type] || [];\n  middlewares[type].push(middleware);\n}\n\nfunction setSource(player, src, next) {\n  player.setTimeout(function () {\n    return setSourceHelper(src, middlewares[src.type], next, player);\n  }, 1);\n}\n\nfunction setTech(middleware, tech) {\n  middleware.forEach(function (mw) {\n    return mw.setTech && mw.setTech(tech);\n  });\n}\n\n/**\n * Calls a getter on the tech first, through each middleware\n * from right to left to the player.\n */\nfunction get$1(middleware, tech, method) {\n  return middleware.reduceRight(middlewareIterator(method), tech[method]());\n}\n\n/**\n * Takes the argument given to the player and calls the setter method on each\n * middleware from left to right to the tech.\n */\nfunction set$1(middleware, tech, method, arg) {\n  return tech[method](middleware.reduce(middlewareIterator(method), arg));\n}\n\n/**\n * Takes the argument given to the player and calls the `call` version of the method\n * on each middleware from left to right.\n * Then, call the passed in method on the tech and return the result unchanged\n * back to the player, through middleware, this time from right to left.\n */\nfunction mediate(middleware, tech, method) {\n  var arg = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  var callMethod = 'call' + toTitleCase(method);\n  var middlewareValue = middleware.reduce(middlewareIterator(callMethod), arg);\n  var terminated = middlewareValue === TERMINATOR;\n  var returnValue = terminated ? null : tech[method](middlewareValue);\n\n  executeRight(middleware, method, returnValue, terminated);\n\n  return returnValue;\n}\n\nvar allowedGetters = {\n  buffered: 1,\n  currentTime: 1,\n  duration: 1,\n  seekable: 1,\n  played: 1,\n  paused: 1\n};\n\nvar allowedSetters = {\n  setCurrentTime: 1\n};\n\nvar allowedMediators = {\n  play: 1,\n  pause: 1\n};\n\nfunction middlewareIterator(method) {\n  return function (value, mw) {\n    // if the previous middleware terminated, pass along the termination\n    if (value === TERMINATOR) {\n      return TERMINATOR;\n    }\n\n    if (mw[method]) {\n      return mw[method](value);\n    }\n\n    return value;\n  };\n}\n\nfunction executeRight(mws, method, value, terminated) {\n  for (var i = mws.length - 1; i >= 0; i--) {\n    var mw = mws[i];\n\n    if (mw[method]) {\n      mw[method](terminated, value);\n    }\n  }\n}\n\nfunction clearCacheForPlayer(player) {\n  middlewareInstances[player.id()] = null;\n}\n\n/**\n * {\n *  [playerId]: [[mwFactory, mwInstance], ...]\n * }\n */\nfunction getOrCreateFactory(player, mwFactory) {\n  var mws = middlewareInstances[player.id()];\n  var mw = null;\n\n  if (mws === undefined || mws === null) {\n    mw = mwFactory(player);\n    middlewareInstances[player.id()] = [[mwFactory, mw]];\n    return mw;\n  }\n\n  for (var i = 0; i < mws.length; i++) {\n    var _mws$i = mws[i],\n        mwf = _mws$i[0],\n        mwi = _mws$i[1];\n\n\n    if (mwf !== mwFactory) {\n      continue;\n    }\n\n    mw = mwi;\n  }\n\n  if (mw === null) {\n    mw = mwFactory(player);\n    mws.push([mwFactory, mw]);\n  }\n\n  return mw;\n}\n\nfunction setSourceHelper() {\n  var src = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var middleware = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var next = arguments[2];\n  var player = arguments[3];\n  var acc = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  var lastRun = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n  var mwFactory = middleware[0],\n      mwrest = middleware.slice(1);\n\n  // if mwFactory is a string, then we're at a fork in the road\n\n  if (typeof mwFactory === 'string') {\n    setSourceHelper(src, middlewares[mwFactory], next, player, acc, lastRun);\n\n    // if we have an mwFactory, call it with the player to get the mw,\n    // then call the mw's setSource method\n  } else if (mwFactory) {\n    var mw = getOrCreateFactory(player, mwFactory);\n\n    // if setSource isn't present, implicitly select this middleware\n    if (!mw.setSource) {\n      acc.push(mw);\n      return setSourceHelper(src, mwrest, next, player, acc, lastRun);\n    }\n\n    mw.setSource(assign({}, src), function (err, _src) {\n\n      // something happened, try the next middleware on the current level\n      // make sure to use the old src\n      if (err) {\n        return setSourceHelper(src, mwrest, next, player, acc, lastRun);\n      }\n\n      // we've succeeded, now we need to go deeper\n      acc.push(mw);\n\n      // if it's the same type, continue down the current chain\n      // otherwise, we want to go down the new chain\n      setSourceHelper(_src, src.type === _src.type ? mwrest : middlewares[_src.type], next, player, acc, lastRun);\n    });\n  } else if (mwrest.length) {\n    setSourceHelper(src, mwrest, next, player, acc, lastRun);\n  } else if (lastRun) {\n    next(src, acc);\n  } else {\n    setSourceHelper(src, middlewares['*'], next, player, acc, true);\n  }\n}\n\n/**\n * Mimetypes\n *\n * @see http://hul.harvard.edu/ois/////systems/wax/wax-public-help/mimetypes.htm\n * @typedef Mimetypes~Kind\n * @enum\n */\nvar MimetypesKind = {\n  opus: 'video/ogg',\n  ogv: 'video/ogg',\n  mp4: 'video/mp4',\n  mov: 'video/mp4',\n  m4v: 'video/mp4',\n  mkv: 'video/x-matroska',\n  mp3: 'audio/mpeg',\n  aac: 'audio/aac',\n  oga: 'audio/ogg',\n  m3u8: 'application/x-mpegURL'\n};\n\n/**\n * Get the mimetype of a given src url if possible\n *\n * @param {string} src\n *        The url to the src\n *\n * @return {string}\n *         return the mimetype if it was known or empty string otherwise\n */\nvar getMimetype = function getMimetype() {\n  var src = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n  var ext = getFileExtension(src);\n  var mimetype = MimetypesKind[ext.toLowerCase()];\n\n  return mimetype || '';\n};\n\n/**\n * Find the mime type of a given source string if possible. Uses the player\n * source cache.\n *\n * @param {Player} player\n *        The player object\n *\n * @param {string} src\n *        The source string\n *\n * @return {string}\n *         The type that was found\n */\nvar findMimetype = function findMimetype(player, src) {\n  if (!src) {\n    return '';\n  }\n\n  // 1. check for the type in the `source` cache\n  if (player.cache_.source.src === src && player.cache_.source.type) {\n    return player.cache_.source.type;\n  }\n\n  // 2. see if we have this source in our `currentSources` cache\n  var matchingSources = player.cache_.sources.filter(function (s) {\n    return s.src === src;\n  });\n\n  if (matchingSources.length) {\n    return matchingSources[0].type;\n  }\n\n  // 3. look for the src url in source elements and use the type there\n  var sources = player.$$('source');\n\n  for (var i = 0; i < sources.length; i++) {\n    var s = sources[i];\n\n    if (s.type && s.src && s.src === src) {\n      return s.type;\n    }\n  }\n\n  // 4. finally fallback to our list of mime types based on src url extension\n  return getMimetype(src);\n};\n\n/**\n * @module filter-source\n */\n\n/**\n * Filter out single bad source objects or multiple source objects in an\n * array. Also flattens nested source object arrays into a 1 dimensional\n * array of source objects.\n *\n * @param {Tech~SourceObject|Tech~SourceObject[]} src\n *        The src object to filter\n *\n * @return {Tech~SourceObject[]}\n *         An array of sourceobjects containing only valid sources\n *\n * @private\n */\nvar filterSource = function filterSource(src) {\n  // traverse array\n  if (Array.isArray(src)) {\n    var newsrc = [];\n\n    src.forEach(function (srcobj) {\n      srcobj = filterSource(srcobj);\n\n      if (Array.isArray(srcobj)) {\n        newsrc = newsrc.concat(srcobj);\n      } else if (isObject(srcobj)) {\n        newsrc.push(srcobj);\n      }\n    });\n\n    src = newsrc;\n  } else if (typeof src === 'string' && src.trim()) {\n    // convert string into object\n    src = [fixSource({ src: src })];\n  } else if (isObject(src) && typeof src.src === 'string' && src.src && src.src.trim()) {\n    // src is already valid\n    src = [fixSource(src)];\n  } else {\n    // invalid source, turn it into an empty array\n    src = [];\n  }\n\n  return src;\n};\n\n/**\n * Checks src mimetype, adding it when possible\n *\n * @param {Tech~SourceObject} src\n *        The src object to check\n * @return {Tech~SourceObject}\n *        src Object with known type\n */\nfunction fixSource(src) {\n  var mimetype = getMimetype(src.src);\n\n  if (!src.type && mimetype) {\n    src.type = mimetype;\n  }\n\n  return src;\n}\n\n/**\n * @file loader.js\n */\n\n/**\n * The `MediaLoader` is the `Component` that decides which playback technology to load\n * when a player is initialized.\n *\n * @extends Component\n */\n\nvar MediaLoader = function (_Component) {\n  inherits(MediaLoader, _Component);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should attach to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        The function that is run when this component is ready.\n   */\n  function MediaLoader(player, options, ready) {\n    classCallCheck(this, MediaLoader);\n\n    // MediaLoader has no element\n    var options_ = mergeOptions({ createEl: false }, options);\n\n    // If there are no sources when the player is initialized,\n    // load the first supported playback technology.\n\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options_, ready));\n\n    if (!options.playerOptions.sources || options.playerOptions.sources.length === 0) {\n      for (var i = 0, j = options.playerOptions.techOrder; i < j.length; i++) {\n        var techName = toTitleCase(j[i]);\n        var tech = Tech.getTech(techName);\n\n        // Support old behavior of techs being registered as components.\n        // Remove once that deprecated behavior is removed.\n        if (!techName) {\n          tech = Component.getComponent(techName);\n        }\n\n        // Check if the browser supports this technology\n        if (tech && tech.isSupported()) {\n          player.loadTech_(techName);\n          break;\n        }\n      }\n    } else {\n      // Loop through playback technologies (HTML5, Flash) and check for support.\n      // Then load the best source.\n      // A few assumptions here:\n      //   All playback technologies respect preload false.\n      player.src(options.playerOptions.sources);\n    }\n    return _this;\n  }\n\n  return MediaLoader;\n}(Component);\n\nComponent.registerComponent('MediaLoader', MediaLoader);\n\n/**\n * @file clickable-component.js\n */\n\n/**\n * Clickable Component which is clickable or keyboard actionable,\n * but is not a native HTML button.\n *\n * @extends Component\n */\n\nvar ClickableComponent = function (_Component) {\n  inherits(ClickableComponent, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param  {Player} player\n   *         The `Player` that this class should be attached to.\n   *\n   * @param  {Object} [options]\n   *         The key/value store of player options.\n   */\n  function ClickableComponent(player, options) {\n    classCallCheck(this, ClickableComponent);\n\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));\n\n    _this.emitTapEvents();\n\n    _this.enable();\n    return _this;\n  }\n\n  /**\n   * Create the `Component`s DOM element.\n   *\n   * @param {string} [tag=div]\n   *        The element's node type.\n   *\n   * @param {Object} [props={}]\n   *        An object of properties that should be set on the element.\n   *\n   * @param {Object} [attributes={}]\n   *        An object of attributes that should be set on the element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n\n\n  ClickableComponent.prototype.createEl = function createEl$$1() {\n    var tag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'div';\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    props = assign({\n      innerHTML: '<span aria-hidden=\"true\" class=\"vjs-icon-placeholder\"></span>',\n      className: this.buildCSSClass(),\n      tabIndex: 0\n    }, props);\n\n    if (tag === 'button') {\n      log$1.error('Creating a ClickableComponent with an HTML element of ' + tag + ' is not supported; use a Button instead.');\n    }\n\n    // Add ARIA attributes for clickable element which is not a native HTML button\n    attributes = assign({\n      role: 'button'\n    }, attributes);\n\n    this.tabIndex_ = props.tabIndex;\n\n    var el = _Component.prototype.createEl.call(this, tag, props, attributes);\n\n    this.createControlTextEl(el);\n\n    return el;\n  };\n\n  ClickableComponent.prototype.dispose = function dispose() {\n    // remove controlTextEl_ on dispose\n    this.controlTextEl_ = null;\n\n    _Component.prototype.dispose.call(this);\n  };\n\n  /**\n   * Create a control text element on this `Component`\n   *\n   * @param {Element} [el]\n   *        Parent element for the control text.\n   *\n   * @return {Element}\n   *         The control text element that gets created.\n   */\n\n\n  ClickableComponent.prototype.createControlTextEl = function createControlTextEl(el) {\n    this.controlTextEl_ = createEl('span', {\n      className: 'vjs-control-text'\n    }, {\n      // let the screen reader user know that the text of the element may change\n      'aria-live': 'polite'\n    });\n\n    if (el) {\n      el.appendChild(this.controlTextEl_);\n    }\n\n    this.controlText(this.controlText_, el);\n\n    return this.controlTextEl_;\n  };\n\n  /**\n   * Get or set the localize text to use for the controls on the `Component`.\n   *\n   * @param {string} [text]\n   *        Control text for element.\n   *\n   * @param {Element} [el=this.el()]\n   *        Element to set the title on.\n   *\n   * @return {string}\n   *         - The control text when getting\n   */\n\n\n  ClickableComponent.prototype.controlText = function controlText(text) {\n    var el = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.el();\n\n    if (text === undefined) {\n      return this.controlText_ || 'Need Text';\n    }\n\n    var localizedText = this.localize(text);\n\n    this.controlText_ = text;\n    textContent(this.controlTextEl_, localizedText);\n    if (!this.nonIconControl) {\n      // Set title attribute if only an icon is shown\n      el.setAttribute('title', localizedText);\n    }\n  };\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  ClickableComponent.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-control vjs-button ' + _Component.prototype.buildCSSClass.call(this);\n  };\n\n  /**\n   * Enable this `Component`s element.\n   */\n\n\n  ClickableComponent.prototype.enable = function enable() {\n    if (!this.enabled_) {\n      this.enabled_ = true;\n      this.removeClass('vjs-disabled');\n      this.el_.setAttribute('aria-disabled', 'false');\n      if (typeof this.tabIndex_ !== 'undefined') {\n        this.el_.setAttribute('tabIndex', this.tabIndex_);\n      }\n      this.on(['tap', 'click'], this.handleClick);\n      this.on('focus', this.handleFocus);\n      this.on('blur', this.handleBlur);\n    }\n  };\n\n  /**\n   * Disable this `Component`s element.\n   */\n\n\n  ClickableComponent.prototype.disable = function disable() {\n    this.enabled_ = false;\n    this.addClass('vjs-disabled');\n    this.el_.setAttribute('aria-disabled', 'true');\n    if (typeof this.tabIndex_ !== 'undefined') {\n      this.el_.removeAttribute('tabIndex');\n    }\n    this.off(['tap', 'click'], this.handleClick);\n    this.off('focus', this.handleFocus);\n    this.off('blur', this.handleBlur);\n  };\n\n  /**\n   * This gets called when a `ClickableComponent` gets:\n   * - Clicked (via the `click` event, listening starts in the constructor)\n   * - Tapped (via the `tap` event, listening starts in the constructor)\n   * - The following things happen in order:\n   *   1. {@link ClickableComponent#handleFocus} is called via a `focus` event on the\n   *      `ClickableComponent`.\n   *   2. {@link ClickableComponent#handleFocus} adds a listener for `keydown` on using\n   *      {@link ClickableComponent#handleKeyPress}.\n   *   3. `ClickableComponent` has not had a `blur` event (`blur` means that focus was lost). The user presses\n   *      the space or enter key.\n   *   4. {@link ClickableComponent#handleKeyPress} calls this function with the `keydown`\n   *      event as a parameter.\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   * @abstract\n   */\n\n\n  ClickableComponent.prototype.handleClick = function handleClick(event) {};\n\n  /**\n   * This gets called when a `ClickableComponent` gains focus via a `focus` event.\n   * Turns on listening for `keydown` events. When they happen it\n   * calls `this.handleKeyPress`.\n   *\n   * @param {EventTarget~Event} event\n   *        The `focus` event that caused this function to be called.\n   *\n   * @listens focus\n   */\n\n\n  ClickableComponent.prototype.handleFocus = function handleFocus(event) {\n    on(document, 'keydown', bind(this, this.handleKeyPress));\n  };\n\n  /**\n   * Called when this ClickableComponent has focus and a key gets pressed down. By\n   * default it will call `this.handleClick` when the key is space or enter.\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown` event that caused this function to be called.\n   *\n   * @listens keydown\n   */\n\n\n  ClickableComponent.prototype.handleKeyPress = function handleKeyPress(event) {\n\n    // Support Space (32) or Enter (13) key operation to fire a click event\n    if (event.which === 32 || event.which === 13) {\n      event.preventDefault();\n      this.trigger('click');\n    } else if (_Component.prototype.handleKeyPress) {\n\n      // Pass keypress handling up for unsupported keys\n      _Component.prototype.handleKeyPress.call(this, event);\n    }\n  };\n\n  /**\n   * Called when a `ClickableComponent` loses focus. Turns off the listener for\n   * `keydown` events. Which Stops `this.handleKeyPress` from getting called.\n   *\n   * @param {EventTarget~Event} event\n   *        The `blur` event that caused this function to be called.\n   *\n   * @listens blur\n   */\n\n\n  ClickableComponent.prototype.handleBlur = function handleBlur(event) {\n    off(document, 'keydown', bind(this, this.handleKeyPress));\n  };\n\n  return ClickableComponent;\n}(Component);\n\nComponent.registerComponent('ClickableComponent', ClickableComponent);\n\n/**\n * @file poster-image.js\n */\n\n/**\n * A `ClickableComponent` that handles showing the poster image for the player.\n *\n * @extends ClickableComponent\n */\n\nvar PosterImage = function (_ClickableComponent) {\n  inherits(PosterImage, _ClickableComponent);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should attach to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function PosterImage(player, options) {\n    classCallCheck(this, PosterImage);\n\n    var _this = possibleConstructorReturn(this, _ClickableComponent.call(this, player, options));\n\n    _this.update();\n    player.on('posterchange', bind(_this, _this.update));\n    return _this;\n  }\n\n  /**\n   * Clean up and dispose of the `PosterImage`.\n   */\n\n\n  PosterImage.prototype.dispose = function dispose() {\n    this.player().off('posterchange', this.update);\n    _ClickableComponent.prototype.dispose.call(this);\n  };\n\n  /**\n   * Create the `PosterImage`s DOM element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n\n\n  PosterImage.prototype.createEl = function createEl$$1() {\n    var el = createEl('div', {\n      className: 'vjs-poster',\n\n      // Don't want poster to be tabbable.\n      tabIndex: -1\n    });\n\n    return el;\n  };\n\n  /**\n   * An {@link EventTarget~EventListener} for {@link Player#posterchange} events.\n   *\n   * @listens Player#posterchange\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `Player#posterchange` event that triggered this function.\n   */\n\n\n  PosterImage.prototype.update = function update(event) {\n    var url = this.player().poster();\n\n    this.setSrc(url);\n\n    // If there's no poster source we should display:none on this component\n    // so it's not still clickable or right-clickable\n    if (url) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  };\n\n  /**\n   * Set the source of the `PosterImage` depending on the display method.\n   *\n   * @param {string} url\n   *        The URL to the source for the `PosterImage`.\n   */\n\n\n  PosterImage.prototype.setSrc = function setSrc(url) {\n    var backgroundImage = '';\n\n    // Any falsy value should stay as an empty string, otherwise\n    // this will throw an extra error\n    if (url) {\n      backgroundImage = 'url(\"' + url + '\")';\n    }\n\n    this.el_.style.backgroundImage = backgroundImage;\n  };\n\n  /**\n   * An {@link EventTarget~EventListener} for clicks on the `PosterImage`. See\n   * {@link ClickableComponent#handleClick} for instances where this will be triggered.\n   *\n   * @listens tap\n   * @listens click\n   * @listens keydown\n   *\n   * @param {EventTarget~Event} event\n   +        The `click`, `tap` or `keydown` event that caused this function to be called.\n   */\n\n\n  PosterImage.prototype.handleClick = function handleClick(event) {\n    // We don't want a click to trigger playback when controls are disabled\n    if (!this.player_.controls()) {\n      return;\n    }\n\n    if (this.player_.paused()) {\n      silencePromise(this.player_.play());\n    } else {\n      this.player_.pause();\n    }\n  };\n\n  return PosterImage;\n}(ClickableComponent);\n\nComponent.registerComponent('PosterImage', PosterImage);\n\n/**\n * @file text-track-display.js\n */\n\nvar darkGray = '#222';\nvar lightGray = '#ccc';\nvar fontMap = {\n  monospace: 'monospace',\n  sansSerif: 'sans-serif',\n  serif: 'serif',\n  monospaceSansSerif: '\"Andale Mono\", \"Lucida Console\", monospace',\n  monospaceSerif: '\"Courier New\", monospace',\n  proportionalSansSerif: 'sans-serif',\n  proportionalSerif: 'serif',\n  casual: '\"Comic Sans MS\", Impact, fantasy',\n  script: '\"Monotype Corsiva\", cursive',\n  smallcaps: '\"Andale Mono\", \"Lucida Console\", monospace, sans-serif'\n};\n\n/**\n * Construct an rgba color from a given hex color code.\n *\n * @param {number} color\n *        Hex number for color, like #f0e or #f604e2.\n *\n * @param {number} opacity\n *        Value for opacity, 0.0 - 1.0.\n *\n * @return {string}\n *         The rgba color that was created, like 'rgba(255, 0, 0, 0.3)'.\n */\nfunction constructColor(color, opacity) {\n  var hex = void 0;\n\n  if (color.length === 4) {\n    // color looks like \"#f0e\"\n    hex = color[1] + color[1] + color[2] + color[2] + color[3] + color[3];\n  } else if (color.length === 7) {\n    // color looks like \"#f604e2\"\n    hex = color.slice(1);\n  } else {\n    throw new Error('Invalid color code provided, ' + color + '; must be formatted as e.g. #f0e or #f604e2.');\n  }\n  return 'rgba(' + parseInt(hex.slice(0, 2), 16) + ',' + parseInt(hex.slice(2, 4), 16) + ',' + parseInt(hex.slice(4, 6), 16) + ',' + opacity + ')';\n}\n\n/**\n * Try to update the style of a DOM element. Some style changes will throw an error,\n * particularly in IE8. Those should be noops.\n *\n * @param {Element} el\n *        The DOM element to be styled.\n *\n * @param {string} style\n *        The CSS property on the element that should be styled.\n *\n * @param {string} rule\n *        The style rule that should be applied to the property.\n *\n * @private\n */\nfunction tryUpdateStyle(el, style, rule) {\n  try {\n    el.style[style] = rule;\n  } catch (e) {\n\n    // Satisfies linter.\n    return;\n  }\n}\n\n/**\n * The component for displaying text track cues.\n *\n * @extends Component\n */\n\nvar TextTrackDisplay = function (_Component) {\n  inherits(TextTrackDisplay, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        The function to call when `TextTrackDisplay` is ready.\n   */\n  function TextTrackDisplay(player, options, ready) {\n    classCallCheck(this, TextTrackDisplay);\n\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options, ready));\n\n    player.on('loadstart', bind(_this, _this.toggleDisplay));\n    player.on('texttrackchange', bind(_this, _this.updateDisplay));\n    player.on('loadstart', bind(_this, _this.preselectTrack));\n\n    // This used to be called during player init, but was causing an error\n    // if a track should show by default and the display hadn't loaded yet.\n    // Should probably be moved to an external track loader when we support\n    // tracks that don't need a display.\n    player.ready(bind(_this, function () {\n      if (player.tech_ && player.tech_.featuresNativeTextTracks) {\n        this.hide();\n        return;\n      }\n\n      player.on('fullscreenchange', bind(this, this.updateDisplay));\n\n      var tracks = this.options_.playerOptions.tracks || [];\n\n      for (var i = 0; i < tracks.length; i++) {\n        this.player_.addRemoteTextTrack(tracks[i], true);\n      }\n\n      this.preselectTrack();\n    }));\n    return _this;\n  }\n\n  /**\n  * Preselect a track following this precedence:\n  * - matches the previously selected {@link TextTrack}'s language and kind\n  * - matches the previously selected {@link TextTrack}'s language only\n  * - is the first default captions track\n  * - is the first default descriptions track\n  *\n  * @listens Player#loadstart\n  */\n\n\n  TextTrackDisplay.prototype.preselectTrack = function preselectTrack() {\n    var modes = { captions: 1, subtitles: 1 };\n    var trackList = this.player_.textTracks();\n    var userPref = this.player_.cache_.selectedLanguage;\n    var firstDesc = void 0;\n    var firstCaptions = void 0;\n    var preferredTrack = void 0;\n\n    for (var i = 0; i < trackList.length; i++) {\n      var track = trackList[i];\n\n      if (userPref && userPref.enabled && userPref.language === track.language) {\n        // Always choose the track that matches both language and kind\n        if (track.kind === userPref.kind) {\n          preferredTrack = track;\n          // or choose the first track that matches language\n        } else if (!preferredTrack) {\n          preferredTrack = track;\n        }\n\n        // clear everything if offTextTrackMenuItem was clicked\n      } else if (userPref && !userPref.enabled) {\n        preferredTrack = null;\n        firstDesc = null;\n        firstCaptions = null;\n      } else if (track.default) {\n        if (track.kind === 'descriptions' && !firstDesc) {\n          firstDesc = track;\n        } else if (track.kind in modes && !firstCaptions) {\n          firstCaptions = track;\n        }\n      }\n    }\n\n    // The preferredTrack matches the user preference and takes\n    // precedence over all the other tracks.\n    // So, display the preferredTrack before the first default track\n    // and the subtitles/captions track before the descriptions track\n    if (preferredTrack) {\n      preferredTrack.mode = 'showing';\n    } else if (firstCaptions) {\n      firstCaptions.mode = 'showing';\n    } else if (firstDesc) {\n      firstDesc.mode = 'showing';\n    }\n  };\n\n  /**\n   * Turn display of {@link TextTrack}'s from the current state into the other state.\n   * There are only two states:\n   * - 'shown'\n   * - 'hidden'\n   *\n   * @listens Player#loadstart\n   */\n\n\n  TextTrackDisplay.prototype.toggleDisplay = function toggleDisplay() {\n    if (this.player_.tech_ && this.player_.tech_.featuresNativeTextTracks) {\n      this.hide();\n    } else {\n      this.show();\n    }\n  };\n\n  /**\n   * Create the {@link Component}'s DOM element.\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  TextTrackDisplay.prototype.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-text-track-display'\n    }, {\n      'aria-live': 'off',\n      'aria-atomic': 'true'\n    });\n  };\n\n  /**\n   * Clear all displayed {@link TextTrack}s.\n   */\n\n\n  TextTrackDisplay.prototype.clearDisplay = function clearDisplay() {\n    if (typeof window$1.WebVTT === 'function') {\n      window$1.WebVTT.processCues(window$1, [], this.el_);\n    }\n  };\n\n  /**\n   * Update the displayed TextTrack when a either a {@link Player#texttrackchange} or\n   * a {@link Player#fullscreenchange} is fired.\n   *\n   * @listens Player#texttrackchange\n   * @listens Player#fullscreenchange\n   */\n\n\n  TextTrackDisplay.prototype.updateDisplay = function updateDisplay() {\n    var tracks = this.player_.textTracks();\n\n    this.clearDisplay();\n\n    // Track display prioritization model: if multiple tracks are 'showing',\n    //  display the first 'subtitles' or 'captions' track which is 'showing',\n    //  otherwise display the first 'descriptions' track which is 'showing'\n\n    var descriptionsTrack = null;\n    var captionsSubtitlesTrack = null;\n    var i = tracks.length;\n\n    while (i--) {\n      var track = tracks[i];\n\n      if (track.mode === 'showing') {\n        if (track.kind === 'descriptions') {\n          descriptionsTrack = track;\n        } else {\n          captionsSubtitlesTrack = track;\n        }\n      }\n    }\n\n    if (captionsSubtitlesTrack) {\n      if (this.getAttribute('aria-live') !== 'off') {\n        this.setAttribute('aria-live', 'off');\n      }\n      this.updateForTrack(captionsSubtitlesTrack);\n    } else if (descriptionsTrack) {\n      if (this.getAttribute('aria-live') !== 'assertive') {\n        this.setAttribute('aria-live', 'assertive');\n      }\n      this.updateForTrack(descriptionsTrack);\n    }\n  };\n\n  /**\n   * Add an {@link TextTrack} to to the {@link Tech}s {@link TextTrackList}.\n   *\n   * @param {TextTrack} track\n   *        Text track object to be added to the list.\n   */\n\n\n  TextTrackDisplay.prototype.updateForTrack = function updateForTrack(track) {\n    if (typeof window$1.WebVTT !== 'function' || !track.activeCues) {\n      return;\n    }\n\n    var cues = [];\n\n    for (var _i = 0; _i < track.activeCues.length; _i++) {\n      cues.push(track.activeCues[_i]);\n    }\n\n    window$1.WebVTT.processCues(window$1, cues, this.el_);\n\n    if (!this.player_.textTrackSettings) {\n      return;\n    }\n\n    var overrides = this.player_.textTrackSettings.getValues();\n\n    var i = cues.length;\n\n    while (i--) {\n      var cue = cues[i];\n\n      if (!cue) {\n        continue;\n      }\n\n      var cueDiv = cue.displayState;\n\n      if (overrides.color) {\n        cueDiv.firstChild.style.color = overrides.color;\n      }\n      if (overrides.textOpacity) {\n        tryUpdateStyle(cueDiv.firstChild, 'color', constructColor(overrides.color || '#fff', overrides.textOpacity));\n      }\n      if (overrides.backgroundColor) {\n        cueDiv.firstChild.style.backgroundColor = overrides.backgroundColor;\n      }\n      if (overrides.backgroundOpacity) {\n        tryUpdateStyle(cueDiv.firstChild, 'backgroundColor', constructColor(overrides.backgroundColor || '#000', overrides.backgroundOpacity));\n      }\n      if (overrides.windowColor) {\n        if (overrides.windowOpacity) {\n          tryUpdateStyle(cueDiv, 'backgroundColor', constructColor(overrides.windowColor, overrides.windowOpacity));\n        } else {\n          cueDiv.style.backgroundColor = overrides.windowColor;\n        }\n      }\n      if (overrides.edgeStyle) {\n        if (overrides.edgeStyle === 'dropshadow') {\n          cueDiv.firstChild.style.textShadow = '2px 2px 3px ' + darkGray + ', 2px 2px 4px ' + darkGray + ', 2px 2px 5px ' + darkGray;\n        } else if (overrides.edgeStyle === 'raised') {\n          cueDiv.firstChild.style.textShadow = '1px 1px ' + darkGray + ', 2px 2px ' + darkGray + ', 3px 3px ' + darkGray;\n        } else if (overrides.edgeStyle === 'depressed') {\n          cueDiv.firstChild.style.textShadow = '1px 1px ' + lightGray + ', 0 1px ' + lightGray + ', -1px -1px ' + darkGray + ', 0 -1px ' + darkGray;\n        } else if (overrides.edgeStyle === 'uniform') {\n          cueDiv.firstChild.style.textShadow = '0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray;\n        }\n      }\n      if (overrides.fontPercent && overrides.fontPercent !== 1) {\n        var fontSize = window$1.parseFloat(cueDiv.style.fontSize);\n\n        cueDiv.style.fontSize = fontSize * overrides.fontPercent + 'px';\n        cueDiv.style.height = 'auto';\n        cueDiv.style.top = 'auto';\n        cueDiv.style.bottom = '2px';\n      }\n      if (overrides.fontFamily && overrides.fontFamily !== 'default') {\n        if (overrides.fontFamily === 'small-caps') {\n          cueDiv.firstChild.style.fontVariant = 'small-caps';\n        } else {\n          cueDiv.firstChild.style.fontFamily = fontMap[overrides.fontFamily];\n        }\n      }\n    }\n  };\n\n  return TextTrackDisplay;\n}(Component);\n\nComponent.registerComponent('TextTrackDisplay', TextTrackDisplay);\n\n/**\n * @file loading-spinner.js\n */\n\n/**\n * A loading spinner for use during waiting/loading events.\n *\n * @extends Component\n */\n\nvar LoadingSpinner = function (_Component) {\n  inherits(LoadingSpinner, _Component);\n\n  function LoadingSpinner() {\n    classCallCheck(this, LoadingSpinner);\n    return possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  /**\n   * Create the `LoadingSpinner`s DOM element.\n   *\n   * @return {Element}\n   *         The dom element that gets created.\n   */\n  LoadingSpinner.prototype.createEl = function createEl$$1() {\n    var isAudio = this.player_.isAudio();\n    var playerType = this.localize(isAudio ? 'Audio Player' : 'Video Player');\n    var controlText = createEl('span', {\n      className: 'vjs-control-text',\n      innerHTML: this.localize('{1} is loading.', [playerType])\n    });\n\n    var el = _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-loading-spinner',\n      dir: 'ltr'\n    });\n\n    el.appendChild(controlText);\n\n    return el;\n  };\n\n  return LoadingSpinner;\n}(Component);\n\nComponent.registerComponent('LoadingSpinner', LoadingSpinner);\n\n/**\n * @file button.js\n */\n\n/**\n * Base class for all buttons.\n *\n * @extends ClickableComponent\n */\n\nvar Button = function (_ClickableComponent) {\n  inherits(Button, _ClickableComponent);\n\n  function Button() {\n    classCallCheck(this, Button);\n    return possibleConstructorReturn(this, _ClickableComponent.apply(this, arguments));\n  }\n\n  /**\n   * Create the `Button`s DOM element.\n   *\n   * @param {string} [tag=\"button\"]\n   *        The element's node type. This argument is IGNORED: no matter what\n   *        is passed, it will always create a `button` element.\n   *\n   * @param {Object} [props={}]\n   *        An object of properties that should be set on the element.\n   *\n   * @param {Object} [attributes={}]\n   *        An object of attributes that should be set on the element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n  Button.prototype.createEl = function createEl(tag) {\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    tag = 'button';\n\n    props = assign({\n      innerHTML: '<span aria-hidden=\"true\" class=\"vjs-icon-placeholder\"></span>',\n      className: this.buildCSSClass()\n    }, props);\n\n    // Add attributes for button element\n    attributes = assign({\n\n      // Necessary since the default button type is \"submit\"\n      type: 'button'\n    }, attributes);\n\n    var el = Component.prototype.createEl.call(this, tag, props, attributes);\n\n    this.createControlTextEl(el);\n\n    return el;\n  };\n\n  /**\n   * Add a child `Component` inside of this `Button`.\n   *\n   * @param {string|Component} child\n   *        The name or instance of a child to add.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of options that will get passed to children of\n   *        the child.\n   *\n   * @return {Component}\n   *         The `Component` that gets added as a child. When using a string the\n   *         `Component` will get created by this process.\n   *\n   * @deprecated since version 5\n   */\n\n\n  Button.prototype.addChild = function addChild(child) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var className = this.constructor.name;\n\n    log$1.warn('Adding an actionable (user controllable) child to a Button (' + className + ') is not supported; use a ClickableComponent instead.');\n\n    // Avoid the error message generated by ClickableComponent's addChild method\n    return Component.prototype.addChild.call(this, child, options);\n  };\n\n  /**\n   * Enable the `Button` element so that it can be activated or clicked. Use this with\n   * {@link Button#disable}.\n   */\n\n\n  Button.prototype.enable = function enable() {\n    _ClickableComponent.prototype.enable.call(this);\n    this.el_.removeAttribute('disabled');\n  };\n\n  /**\n   * Disable the `Button` element so that it cannot be activated or clicked. Use this with\n   * {@link Button#enable}.\n   */\n\n\n  Button.prototype.disable = function disable() {\n    _ClickableComponent.prototype.disable.call(this);\n    this.el_.setAttribute('disabled', 'disabled');\n  };\n\n  /**\n   * This gets called when a `Button` has focus and `keydown` is triggered via a key\n   * press.\n   *\n   * @param {EventTarget~Event} event\n   *        The event that caused this function to get called.\n   *\n   * @listens keydown\n   */\n\n\n  Button.prototype.handleKeyPress = function handleKeyPress(event) {\n\n    // Ignore Space (32) or Enter (13) key operation, which is handled by the browser for a button.\n    if (event.which === 32 || event.which === 13) {\n      return;\n    }\n\n    // Pass keypress handling up for unsupported keys\n    _ClickableComponent.prototype.handleKeyPress.call(this, event);\n  };\n\n  return Button;\n}(ClickableComponent);\n\nComponent.registerComponent('Button', Button);\n\n/**\n * @file big-play-button.js\n */\n\n/**\n * The initial play button that shows before the video has played. The hiding of the\n * `BigPlayButton` get done via CSS and `Player` states.\n *\n * @extends Button\n */\n\nvar BigPlayButton = function (_Button) {\n  inherits(BigPlayButton, _Button);\n\n  function BigPlayButton(player, options) {\n    classCallCheck(this, BigPlayButton);\n\n    var _this = possibleConstructorReturn(this, _Button.call(this, player, options));\n\n    _this.mouseused_ = false;\n\n    _this.on('mousedown', _this.handleMouseDown);\n    return _this;\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object. Always returns 'vjs-big-play-button'.\n   */\n\n\n  BigPlayButton.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-big-play-button';\n  };\n\n  /**\n   * This gets called when a `BigPlayButton` \"clicked\". See {@link ClickableComponent}\n   * for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n\n\n  BigPlayButton.prototype.handleClick = function handleClick(event) {\n    var playPromise = this.player_.play();\n\n    // exit early if clicked via the mouse\n    if (this.mouseused_ && event.clientX && event.clientY) {\n      silencePromise(playPromise);\n      return;\n    }\n\n    var cb = this.player_.getChild('controlBar');\n    var playToggle = cb && cb.getChild('playToggle');\n\n    if (!playToggle) {\n      this.player_.focus();\n      return;\n    }\n\n    var playFocus = function playFocus() {\n      return playToggle.focus();\n    };\n\n    if (isPromise(playPromise)) {\n      playPromise.then(playFocus, function () {});\n    } else {\n      this.setTimeout(playFocus, 1);\n    }\n  };\n\n  BigPlayButton.prototype.handleKeyPress = function handleKeyPress(event) {\n    this.mouseused_ = false;\n\n    _Button.prototype.handleKeyPress.call(this, event);\n  };\n\n  BigPlayButton.prototype.handleMouseDown = function handleMouseDown(event) {\n    this.mouseused_ = true;\n  };\n\n  return BigPlayButton;\n}(Button);\n\n/**\n * The text that should display over the `BigPlayButton`s controls. Added to for localization.\n *\n * @type {string}\n * @private\n */\n\n\nBigPlayButton.prototype.controlText_ = 'Play Video';\n\nComponent.registerComponent('BigPlayButton', BigPlayButton);\n\n/**\n * @file close-button.js\n */\n\n/**\n * The `CloseButton` is a `{@link Button}` that fires a `close` event when\n * it gets clicked.\n *\n * @extends Button\n */\n\nvar CloseButton = function (_Button) {\n  inherits(CloseButton, _Button);\n\n  /**\n   * Creates an instance of the this class.\n   *\n   * @param  {Player} player\n   *         The `Player` that this class should be attached to.\n   *\n   * @param  {Object} [options]\n   *         The key/value store of player options.\n   */\n  function CloseButton(player, options) {\n    classCallCheck(this, CloseButton);\n\n    var _this = possibleConstructorReturn(this, _Button.call(this, player, options));\n\n    _this.controlText(options && options.controlText || _this.localize('Close'));\n    return _this;\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  CloseButton.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-close-button ' + _Button.prototype.buildCSSClass.call(this);\n  };\n\n  /**\n   * This gets called when a `CloseButton` gets clicked. See\n   * {@link ClickableComponent#handleClick} for more information on when this will be\n   * triggered\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   * @fires CloseButton#close\n   */\n\n\n  CloseButton.prototype.handleClick = function handleClick(event) {\n\n    /**\n     * Triggered when the a `CloseButton` is clicked.\n     *\n     * @event CloseButton#close\n     * @type {EventTarget~Event}\n     *\n     * @property {boolean} [bubbles=false]\n     *           set to false so that the close event does not\n     *           bubble up to parents if there is no listener\n     */\n    this.trigger({ type: 'close', bubbles: false });\n  };\n\n  return CloseButton;\n}(Button);\n\nComponent.registerComponent('CloseButton', CloseButton);\n\n/**\n * @file play-toggle.js\n */\n\n/**\n * Button to toggle between play and pause.\n *\n * @extends Button\n */\n\nvar PlayToggle = function (_Button) {\n  inherits(PlayToggle, _Button);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function PlayToggle(player, options) {\n    classCallCheck(this, PlayToggle);\n\n    var _this = possibleConstructorReturn(this, _Button.call(this, player, options));\n\n    _this.on(player, 'play', _this.handlePlay);\n    _this.on(player, 'pause', _this.handlePause);\n    _this.on(player, 'ended', _this.handleEnded);\n    return _this;\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  PlayToggle.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-play-control ' + _Button.prototype.buildCSSClass.call(this);\n  };\n\n  /**\n   * This gets called when an `PlayToggle` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n\n\n  PlayToggle.prototype.handleClick = function handleClick(event) {\n    if (this.player_.paused()) {\n      this.player_.play();\n    } else {\n      this.player_.pause();\n    }\n  };\n\n  /**\n   * This gets called once after the video has ended and the user seeks so that\n   * we can change the replay button back to a play button.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The event that caused this function to run.\n   *\n   * @listens Player#seeked\n   */\n\n\n  PlayToggle.prototype.handleSeeked = function handleSeeked(event) {\n    this.removeClass('vjs-ended');\n\n    if (this.player_.paused()) {\n      this.handlePause(event);\n    } else {\n      this.handlePlay(event);\n    }\n  };\n\n  /**\n   * Add the vjs-playing class to the element so it can change appearance.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The event that caused this function to run.\n   *\n   * @listens Player#play\n   */\n\n\n  PlayToggle.prototype.handlePlay = function handlePlay(event) {\n    this.removeClass('vjs-ended');\n    this.removeClass('vjs-paused');\n    this.addClass('vjs-playing');\n    // change the button text to \"Pause\"\n    this.controlText('Pause');\n  };\n\n  /**\n   * Add the vjs-paused class to the element so it can change appearance.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The event that caused this function to run.\n   *\n   * @listens Player#pause\n   */\n\n\n  PlayToggle.prototype.handlePause = function handlePause(event) {\n    this.removeClass('vjs-playing');\n    this.addClass('vjs-paused');\n    // change the button text to \"Play\"\n    this.controlText('Play');\n  };\n\n  /**\n   * Add the vjs-ended class to the element so it can change appearance\n   *\n   * @param {EventTarget~Event} [event]\n   *        The event that caused this function to run.\n   *\n   * @listens Player#ended\n   */\n\n\n  PlayToggle.prototype.handleEnded = function handleEnded(event) {\n    this.removeClass('vjs-playing');\n    this.addClass('vjs-ended');\n    // change the button text to \"Replay\"\n    this.controlText('Replay');\n\n    // on the next seek remove the replay button\n    this.one(this.player_, 'seeked', this.handleSeeked);\n  };\n\n  return PlayToggle;\n}(Button);\n\n/**\n * The text that should display over the `PlayToggle`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\n\n\nPlayToggle.prototype.controlText_ = 'Play';\n\nComponent.registerComponent('PlayToggle', PlayToggle);\n\n/**\n * @file format-time.js\n * @module format-time\n */\n\n/**\n* Format seconds as a time string, H:MM:SS or M:SS. Supplying a guide (in seconds)\n* will force a number of leading zeros to cover the length of the guide.\n*\n* @param {number} seconds\n*        Number of seconds to be turned into a string\n*\n* @param {number} guide\n*        Number (in seconds) to model the string after\n*\n* @return {string}\n*         Time formatted as H:MM:SS or M:SS\n*/\nvar defaultImplementation = function defaultImplementation(seconds, guide) {\n  seconds = seconds < 0 ? 0 : seconds;\n  var s = Math.floor(seconds % 60);\n  var m = Math.floor(seconds / 60 % 60);\n  var h = Math.floor(seconds / 3600);\n  var gm = Math.floor(guide / 60 % 60);\n  var gh = Math.floor(guide / 3600);\n\n  // handle invalid times\n  if (isNaN(seconds) || seconds === Infinity) {\n    // '-' is false for all relational operators (e.g. <, >=) so this setting\n    // will add the minimum number of fields specified by the guide\n    h = m = s = '-';\n  }\n\n  // Check if we need to show hours\n  h = h > 0 || gh > 0 ? h + ':' : '';\n\n  // If hours are showing, we may need to add a leading zero.\n  // Always show at least one digit of minutes.\n  m = ((h || gm >= 10) && m < 10 ? '0' + m : m) + ':';\n\n  // Check if leading zero is need for seconds\n  s = s < 10 ? '0' + s : s;\n\n  return h + m + s;\n};\n\nvar implementation = defaultImplementation;\n\n/**\n * Replaces the default formatTime implementation with a custom implementation.\n *\n * @param {Function} customImplementation\n *        A function which will be used in place of the default formatTime implementation.\n *        Will receive the current time in seconds and the guide (in seconds) as arguments.\n */\nfunction setFormatTime(customImplementation) {\n  implementation = customImplementation;\n}\n\n/**\n * Resets formatTime to the default implementation.\n */\nfunction resetFormatTime() {\n  implementation = defaultImplementation;\n}\n\nfunction formatTime (seconds) {\n  var guide = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : seconds;\n\n  return implementation(seconds, guide);\n}\n\n/**\n * @file time-display.js\n */\n\n/**\n * Displays the time left in the video\n *\n * @extends Component\n */\n\nvar TimeDisplay = function (_Component) {\n  inherits(TimeDisplay, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function TimeDisplay(player, options) {\n    classCallCheck(this, TimeDisplay);\n\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));\n\n    _this.throttledUpdateContent = throttle(bind(_this, _this.updateContent), 25);\n    _this.on(player, 'timeupdate', _this.throttledUpdateContent);\n    return _this;\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  TimeDisplay.prototype.createEl = function createEl$$1(plainName) {\n    var className = this.buildCSSClass();\n    var el = _Component.prototype.createEl.call(this, 'div', {\n      className: className + ' vjs-time-control vjs-control',\n      innerHTML: '<span class=\"vjs-control-text\">' + this.localize(this.labelText_) + '\\xA0</span>'\n    });\n\n    this.contentEl_ = createEl('span', {\n      className: className + '-display'\n    }, {\n      // tell screen readers not to automatically read the time as it changes\n      'aria-live': 'off'\n    });\n\n    this.updateTextNode_();\n    el.appendChild(this.contentEl_);\n    return el;\n  };\n\n  TimeDisplay.prototype.dispose = function dispose() {\n    this.contentEl_ = null;\n    this.textNode_ = null;\n\n    _Component.prototype.dispose.call(this);\n  };\n\n  /**\n   * Updates the \"remaining time\" text node with new content using the\n   * contents of the `formattedTime_` property.\n   *\n   * @private\n   */\n\n\n  TimeDisplay.prototype.updateTextNode_ = function updateTextNode_() {\n    if (!this.contentEl_) {\n      return;\n    }\n\n    while (this.contentEl_.firstChild) {\n      this.contentEl_.removeChild(this.contentEl_.firstChild);\n    }\n\n    this.textNode_ = document.createTextNode(this.formattedTime_ || this.formatTime_(0));\n    this.contentEl_.appendChild(this.textNode_);\n  };\n\n  /**\n   * Generates a formatted time for this component to use in display.\n   *\n   * @param  {number} time\n   *         A numeric time, in seconds.\n   *\n   * @return {string}\n   *         A formatted time\n   *\n   * @private\n   */\n\n\n  TimeDisplay.prototype.formatTime_ = function formatTime_(time) {\n    return formatTime(time);\n  };\n\n  /**\n   * Updates the time display text node if it has what was passed in changed\n   * the formatted time.\n   *\n   * @param {number} time\n   *        The time to update to\n   *\n   * @private\n   */\n\n\n  TimeDisplay.prototype.updateFormattedTime_ = function updateFormattedTime_(time) {\n    var formattedTime = this.formatTime_(time);\n\n    if (formattedTime === this.formattedTime_) {\n      return;\n    }\n\n    this.formattedTime_ = formattedTime;\n    this.requestAnimationFrame(this.updateTextNode_);\n  };\n\n  /**\n   * To be filled out in the child class, should update the displayed time\n   * in accordance with the fact that the current time has changed.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `timeupdate`  event that caused this to run.\n   *\n   * @listens Player#timeupdate\n   */\n\n\n  TimeDisplay.prototype.updateContent = function updateContent(event) {};\n\n  return TimeDisplay;\n}(Component);\n\n/**\n * The text that is added to the `TimeDisplay` for screen reader users.\n *\n * @type {string}\n * @private\n */\n\n\nTimeDisplay.prototype.labelText_ = 'Time';\n\n/**\n * The text that should display over the `TimeDisplay`s controls. Added to for localization.\n *\n * @type {string}\n * @private\n *\n * @deprecated in v7; controlText_ is not used in non-active display Components\n */\nTimeDisplay.prototype.controlText_ = 'Time';\n\nComponent.registerComponent('TimeDisplay', TimeDisplay);\n\n/**\n * @file current-time-display.js\n */\n\n/**\n * Displays the current time\n *\n * @extends Component\n */\n\nvar CurrentTimeDisplay = function (_TimeDisplay) {\n  inherits(CurrentTimeDisplay, _TimeDisplay);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function CurrentTimeDisplay(player, options) {\n    classCallCheck(this, CurrentTimeDisplay);\n\n    var _this = possibleConstructorReturn(this, _TimeDisplay.call(this, player, options));\n\n    _this.on(player, 'ended', _this.handleEnded);\n    return _this;\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  CurrentTimeDisplay.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-current-time';\n  };\n\n  /**\n   * Update current time display\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `timeupdate` event that caused this function to run.\n   *\n   * @listens Player#timeupdate\n   */\n\n\n  CurrentTimeDisplay.prototype.updateContent = function updateContent(event) {\n    // Allows for smooth scrubbing, when player can't keep up.\n    var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();\n\n    this.updateFormattedTime_(time);\n  };\n\n  /**\n   * When the player fires ended there should be no time left. Sadly\n   * this is not always the case, lets make it seem like that is the case\n   * for users.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `ended` event that caused this to run.\n   *\n   * @listens Player#ended\n   */\n\n\n  CurrentTimeDisplay.prototype.handleEnded = function handleEnded(event) {\n    if (!this.player_.duration()) {\n      return;\n    }\n    this.updateFormattedTime_(this.player_.duration());\n  };\n\n  return CurrentTimeDisplay;\n}(TimeDisplay);\n\n/**\n * The text that is added to the `CurrentTimeDisplay` for screen reader users.\n *\n * @type {string}\n * @private\n */\n\n\nCurrentTimeDisplay.prototype.labelText_ = 'Current Time';\n\n/**\n * The text that should display over the `CurrentTimeDisplay`s controls. Added to for localization.\n *\n * @type {string}\n * @private\n *\n * @deprecated in v7; controlText_ is not used in non-active display Components\n */\nCurrentTimeDisplay.prototype.controlText_ = 'Current Time';\n\nComponent.registerComponent('CurrentTimeDisplay', CurrentTimeDisplay);\n\n/**\n * @file duration-display.js\n */\n\n/**\n * Displays the duration\n *\n * @extends Component\n */\n\nvar DurationDisplay = function (_TimeDisplay) {\n  inherits(DurationDisplay, _TimeDisplay);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function DurationDisplay(player, options) {\n    classCallCheck(this, DurationDisplay);\n\n    // we do not want to/need to throttle duration changes,\n    // as they should always display the changed duration as\n    // it has changed\n    var _this = possibleConstructorReturn(this, _TimeDisplay.call(this, player, options));\n\n    _this.on(player, 'durationchange', _this.updateContent);\n\n    // Also listen for timeupdate (in the parent) and loadedmetadata because removing those\n    // listeners could have broken dependent applications/libraries. These\n    // can likely be removed for 7.0.\n    _this.on(player, 'loadedmetadata', _this.throttledUpdateContent);\n    return _this;\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  DurationDisplay.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-duration';\n  };\n\n  /**\n   * Update duration time display.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `durationchange`, `timeupdate`, or `loadedmetadata` event that caused\n   *        this function to be called.\n   *\n   * @listens Player#durationchange\n   * @listens Player#timeupdate\n   * @listens Player#loadedmetadata\n   */\n\n\n  DurationDisplay.prototype.updateContent = function updateContent(event) {\n    var duration = this.player_.duration();\n\n    if (duration && this.duration_ !== duration) {\n      this.duration_ = duration;\n      this.updateFormattedTime_(duration);\n    }\n  };\n\n  return DurationDisplay;\n}(TimeDisplay);\n\n/**\n * The text that is added to the `DurationDisplay` for screen reader users.\n *\n * @type {string}\n * @private\n */\n\n\nDurationDisplay.prototype.labelText_ = 'Duration';\n\n/**\n * The text that should display over the `DurationDisplay`s controls. Added to for localization.\n *\n * @type {string}\n * @private\n *\n * @deprecated in v7; controlText_ is not used in non-active display Components\n */\nDurationDisplay.prototype.controlText_ = 'Duration';\n\nComponent.registerComponent('DurationDisplay', DurationDisplay);\n\n/**\n * @file time-divider.js\n */\n\n/**\n * The separator between the current time and duration.\n * Can be hidden if it's not needed in the design.\n *\n * @extends Component\n */\n\nvar TimeDivider = function (_Component) {\n  inherits(TimeDivider, _Component);\n\n  function TimeDivider() {\n    classCallCheck(this, TimeDivider);\n    return possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  /**\n   * Create the component's DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  TimeDivider.prototype.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-time-control vjs-time-divider',\n      innerHTML: '<div><span>/</span></div>'\n    });\n  };\n\n  return TimeDivider;\n}(Component);\n\nComponent.registerComponent('TimeDivider', TimeDivider);\n\n/**\n * @file remaining-time-display.js\n */\n/**\n * Displays the time left in the video\n *\n * @extends Component\n */\n\nvar RemainingTimeDisplay = function (_TimeDisplay) {\n  inherits(RemainingTimeDisplay, _TimeDisplay);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function RemainingTimeDisplay(player, options) {\n    classCallCheck(this, RemainingTimeDisplay);\n\n    var _this = possibleConstructorReturn(this, _TimeDisplay.call(this, player, options));\n\n    _this.on(player, 'durationchange', _this.throttledUpdateContent);\n    _this.on(player, 'ended', _this.handleEnded);\n    return _this;\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  RemainingTimeDisplay.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-remaining-time';\n  };\n\n  /**\n   * The remaining time display prefixes numbers with a \"minus\" character.\n   *\n   * @param  {number} time\n   *         A numeric time, in seconds.\n   *\n   * @return {string}\n   *         A formatted time\n   *\n   * @private\n   */\n\n\n  RemainingTimeDisplay.prototype.formatTime_ = function formatTime_(time) {\n    // TODO: The \"-\" should be decorative, and not announced by a screen reader\n    return '-' + _TimeDisplay.prototype.formatTime_.call(this, time);\n  };\n\n  /**\n   * Update remaining time display.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `timeupdate` or `durationchange` event that caused this to run.\n   *\n   * @listens Player#timeupdate\n   * @listens Player#durationchange\n   */\n\n\n  RemainingTimeDisplay.prototype.updateContent = function updateContent(event) {\n    if (!this.player_.duration()) {\n      return;\n    }\n\n    // @deprecated We should only use remainingTimeDisplay\n    // as of video.js 7\n    if (this.player_.remainingTimeDisplay) {\n      this.updateFormattedTime_(this.player_.remainingTimeDisplay());\n    } else {\n      this.updateFormattedTime_(this.player_.remainingTime());\n    }\n  };\n\n  /**\n   * When the player fires ended there should be no time left. Sadly\n   * this is not always the case, lets make it seem like that is the case\n   * for users.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `ended` event that caused this to run.\n   *\n   * @listens Player#ended\n   */\n\n\n  RemainingTimeDisplay.prototype.handleEnded = function handleEnded(event) {\n    if (!this.player_.duration()) {\n      return;\n    }\n    this.updateFormattedTime_(0);\n  };\n\n  return RemainingTimeDisplay;\n}(TimeDisplay);\n\n/**\n * The text that is added to the `RemainingTimeDisplay` for screen reader users.\n *\n * @type {string}\n * @private\n */\n\n\nRemainingTimeDisplay.prototype.labelText_ = 'Remaining Time';\n\n/**\n * The text that should display over the `RemainingTimeDisplay`s controls. Added to for localization.\n *\n * @type {string}\n * @private\n *\n * @deprecated in v7; controlText_ is not used in non-active display Components\n */\nRemainingTimeDisplay.prototype.controlText_ = 'Remaining Time';\n\nComponent.registerComponent('RemainingTimeDisplay', RemainingTimeDisplay);\n\n/**\n * @file live-display.js\n */\n\n// TODO - Future make it click to snap to live\n\n/**\n * Displays the live indicator when duration is Infinity.\n *\n * @extends Component\n */\n\nvar LiveDisplay = function (_Component) {\n  inherits(LiveDisplay, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function LiveDisplay(player, options) {\n    classCallCheck(this, LiveDisplay);\n\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));\n\n    _this.updateShowing();\n    _this.on(_this.player(), 'durationchange', _this.updateShowing);\n    return _this;\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  LiveDisplay.prototype.createEl = function createEl$$1() {\n    var el = _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-live-control vjs-control'\n    });\n\n    this.contentEl_ = createEl('div', {\n      className: 'vjs-live-display',\n      innerHTML: '<span class=\"vjs-control-text\">' + this.localize('Stream Type') + '\\xA0</span>' + this.localize('LIVE')\n    }, {\n      'aria-live': 'off'\n    });\n\n    el.appendChild(this.contentEl_);\n    return el;\n  };\n\n  LiveDisplay.prototype.dispose = function dispose() {\n    this.contentEl_ = null;\n\n    _Component.prototype.dispose.call(this);\n  };\n\n  /**\n   * Check the duration to see if the LiveDisplay should be showing or not. Then show/hide\n   * it accordingly\n   *\n   * @param {EventTarget~Event} [event]\n   *        The {@link Player#durationchange} event that caused this function to run.\n   *\n   * @listens Player#durationchange\n   */\n\n\n  LiveDisplay.prototype.updateShowing = function updateShowing(event) {\n    if (this.player().duration() === Infinity) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  };\n\n  return LiveDisplay;\n}(Component);\n\nComponent.registerComponent('LiveDisplay', LiveDisplay);\n\n/**\n * @file slider.js\n */\n\n/**\n * The base functionality for a slider. Can be vertical or horizontal.\n * For instance the volume bar or the seek bar on a video is a slider.\n *\n * @extends Component\n */\n\nvar Slider = function (_Component) {\n  inherits(Slider, _Component);\n\n  /**\n   * Create an instance of this class\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function Slider(player, options) {\n    classCallCheck(this, Slider);\n\n    // Set property names to bar to match with the child Slider class is looking for\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));\n\n    _this.bar = _this.getChild(_this.options_.barName);\n\n    // Set a horizontal or vertical class on the slider depending on the slider type\n    _this.vertical(!!_this.options_.vertical);\n\n    _this.enable();\n    return _this;\n  }\n\n  /**\n   * Are controls are currently enabled for this slider or not.\n   *\n   * @return {boolean}\n   *         true if controls are enabled, false otherwise\n   */\n\n\n  Slider.prototype.enabled = function enabled() {\n    return this.enabled_;\n  };\n\n  /**\n   * Enable controls for this slider if they are disabled\n   */\n\n\n  Slider.prototype.enable = function enable() {\n    if (this.enabled()) {\n      return;\n    }\n\n    this.on('mousedown', this.handleMouseDown);\n    this.on('touchstart', this.handleMouseDown);\n    this.on('focus', this.handleFocus);\n    this.on('blur', this.handleBlur);\n    this.on('click', this.handleClick);\n\n    this.on(this.player_, 'controlsvisible', this.update);\n\n    if (this.playerEvent) {\n      this.on(this.player_, this.playerEvent, this.update);\n    }\n\n    this.removeClass('disabled');\n    this.setAttribute('tabindex', 0);\n\n    this.enabled_ = true;\n  };\n\n  /**\n   * Disable controls for this slider if they are enabled\n   */\n\n\n  Slider.prototype.disable = function disable() {\n    if (!this.enabled()) {\n      return;\n    }\n    var doc = this.bar.el_.ownerDocument;\n\n    this.off('mousedown', this.handleMouseDown);\n    this.off('touchstart', this.handleMouseDown);\n    this.off('focus', this.handleFocus);\n    this.off('blur', this.handleBlur);\n    this.off('click', this.handleClick);\n    this.off(this.player_, 'controlsvisible', this.update);\n    this.off(doc, 'mousemove', this.handleMouseMove);\n    this.off(doc, 'mouseup', this.handleMouseUp);\n    this.off(doc, 'touchmove', this.handleMouseMove);\n    this.off(doc, 'touchend', this.handleMouseUp);\n    this.removeAttribute('tabindex');\n\n    this.addClass('disabled');\n\n    if (this.playerEvent) {\n      this.off(this.player_, this.playerEvent, this.update);\n    }\n    this.enabled_ = false;\n  };\n\n  /**\n   * Create the `Slider`s DOM element.\n   *\n   * @param {string} type\n   *        Type of element to create.\n   *\n   * @param {Object} [props={}]\n   *        List of properties in Object form.\n   *\n   * @param {Object} [attributes={}]\n   *        list of attributes in Object form.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n\n\n  Slider.prototype.createEl = function createEl$$1(type) {\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    // Add the slider element class to all sub classes\n    props.className = props.className + ' vjs-slider';\n    props = assign({\n      tabIndex: 0\n    }, props);\n\n    attributes = assign({\n      'role': 'slider',\n      'aria-valuenow': 0,\n      'aria-valuemin': 0,\n      'aria-valuemax': 100,\n      'tabIndex': 0\n    }, attributes);\n\n    return _Component.prototype.createEl.call(this, type, props, attributes);\n  };\n\n  /**\n   * Handle `mousedown` or `touchstart` events on the `Slider`.\n   *\n   * @param {EventTarget~Event} event\n   *        `mousedown` or `touchstart` event that triggered this function\n   *\n   * @listens mousedown\n   * @listens touchstart\n   * @fires Slider#slideractive\n   */\n\n\n  Slider.prototype.handleMouseDown = function handleMouseDown(event) {\n    var doc = this.bar.el_.ownerDocument;\n\n    if (event.type === 'mousedown') {\n      event.preventDefault();\n    }\n    // Do not call preventDefault() on touchstart in Chrome\n    // to avoid console warnings. Use a 'touch-action: none' style\n    // instead to prevent unintented scrolling.\n    // https://developers.google.com/web/updates/2017/01/scrolling-intervention\n    if (event.type === 'touchstart' && !IS_CHROME) {\n      event.preventDefault();\n    }\n    blockTextSelection();\n\n    this.addClass('vjs-sliding');\n    /**\n     * Triggered when the slider is in an active state\n     *\n     * @event Slider#slideractive\n     * @type {EventTarget~Event}\n     */\n    this.trigger('slideractive');\n\n    this.on(doc, 'mousemove', this.handleMouseMove);\n    this.on(doc, 'mouseup', this.handleMouseUp);\n    this.on(doc, 'touchmove', this.handleMouseMove);\n    this.on(doc, 'touchend', this.handleMouseUp);\n\n    this.handleMouseMove(event);\n  };\n\n  /**\n   * Handle the `mousemove`, `touchmove`, and `mousedown` events on this `Slider`.\n   * The `mousemove` and `touchmove` events will only only trigger this function during\n   * `mousedown` and `touchstart`. This is due to {@link Slider#handleMouseDown} and\n   * {@link Slider#handleMouseUp}.\n   *\n   * @param {EventTarget~Event} event\n   *        `mousedown`, `mousemove`, `touchstart`, or `touchmove` event that triggered\n   *        this function\n   *\n   * @listens mousemove\n   * @listens touchmove\n   */\n\n\n  Slider.prototype.handleMouseMove = function handleMouseMove(event) {};\n\n  /**\n   * Handle `mouseup` or `touchend` events on the `Slider`.\n   *\n   * @param {EventTarget~Event} event\n   *        `mouseup` or `touchend` event that triggered this function.\n   *\n   * @listens touchend\n   * @listens mouseup\n   * @fires Slider#sliderinactive\n   */\n\n\n  Slider.prototype.handleMouseUp = function handleMouseUp() {\n    var doc = this.bar.el_.ownerDocument;\n\n    unblockTextSelection();\n\n    this.removeClass('vjs-sliding');\n    /**\n     * Triggered when the slider is no longer in an active state.\n     *\n     * @event Slider#sliderinactive\n     * @type {EventTarget~Event}\n     */\n    this.trigger('sliderinactive');\n\n    this.off(doc, 'mousemove', this.handleMouseMove);\n    this.off(doc, 'mouseup', this.handleMouseUp);\n    this.off(doc, 'touchmove', this.handleMouseMove);\n    this.off(doc, 'touchend', this.handleMouseUp);\n\n    this.update();\n  };\n\n  /**\n   * Update the progress bar of the `Slider`.\n   *\n   * @returns {number}\n   *          The percentage of progress the progress bar represents as a\n   *          number from 0 to 1.\n   */\n\n\n  Slider.prototype.update = function update() {\n\n    // In VolumeBar init we have a setTimeout for update that pops and update\n    // to the end of the execution stack. The player is destroyed before then\n    // update will cause an error\n    if (!this.el_) {\n      return;\n    }\n\n    // If scrubbing, we could use a cached value to make the handle keep up\n    // with the user's mouse. On HTML5 browsers scrubbing is really smooth, but\n    // some flash players are slow, so we might want to utilize this later.\n    // var progress =  (this.player_.scrubbing()) ? this.player_.getCache().currentTime / this.player_.duration() : this.player_.currentTime() / this.player_.duration();\n    var progress = this.getPercent();\n    var bar = this.bar;\n\n    // If there's no bar...\n    if (!bar) {\n      return;\n    }\n\n    // Protect against no duration and other division issues\n    if (typeof progress !== 'number' || progress !== progress || progress < 0 || progress === Infinity) {\n      progress = 0;\n    }\n\n    // Convert to a percentage for setting\n    var percentage = (progress * 100).toFixed(2) + '%';\n    var style = bar.el().style;\n\n    // Set the new bar width or height\n    if (this.vertical()) {\n      style.height = percentage;\n    } else {\n      style.width = percentage;\n    }\n\n    return progress;\n  };\n\n  /**\n   * Calculate distance for slider\n   *\n   * @param {EventTarget~Event} event\n   *        The event that caused this function to run.\n   *\n   * @return {number}\n   *         The current position of the Slider.\n   *         - position.x for vertical `Slider`s\n   *         - position.y for horizontal `Slider`s\n   */\n\n\n  Slider.prototype.calculateDistance = function calculateDistance(event) {\n    var position = getPointerPosition(this.el_, event);\n\n    if (this.vertical()) {\n      return position.y;\n    }\n    return position.x;\n  };\n\n  /**\n   * Handle a `focus` event on this `Slider`.\n   *\n   * @param {EventTarget~Event} event\n   *        The `focus` event that caused this function to run.\n   *\n   * @listens focus\n   */\n\n\n  Slider.prototype.handleFocus = function handleFocus() {\n    this.on(this.bar.el_.ownerDocument, 'keydown', this.handleKeyPress);\n  };\n\n  /**\n   * Handle a `keydown` event on the `Slider`. Watches for left, rigth, up, and down\n   * arrow keys. This function will only be called when the slider has focus. See\n   * {@link Slider#handleFocus} and {@link Slider#handleBlur}.\n   *\n   * @param {EventTarget~Event} event\n   *        the `keydown` event that caused this function to run.\n   *\n   * @listens keydown\n   */\n\n\n  Slider.prototype.handleKeyPress = function handleKeyPress(event) {\n    // Left and Down Arrows\n    if (event.which === 37 || event.which === 40) {\n      event.preventDefault();\n      this.stepBack();\n\n      // Up and Right Arrows\n    } else if (event.which === 38 || event.which === 39) {\n      event.preventDefault();\n      this.stepForward();\n    }\n  };\n\n  /**\n   * Handle a `blur` event on this `Slider`.\n   *\n   * @param {EventTarget~Event} event\n   *        The `blur` event that caused this function to run.\n   *\n   * @listens blur\n   */\n\n  Slider.prototype.handleBlur = function handleBlur() {\n    this.off(this.bar.el_.ownerDocument, 'keydown', this.handleKeyPress);\n  };\n\n  /**\n   * Listener for click events on slider, used to prevent clicks\n   *   from bubbling up to parent elements like button menus.\n   *\n   * @param {Object} event\n   *        Event that caused this object to run\n   */\n\n\n  Slider.prototype.handleClick = function handleClick(event) {\n    event.stopImmediatePropagation();\n    event.preventDefault();\n  };\n\n  /**\n   * Get/set if slider is horizontal for vertical\n   *\n   * @param {boolean} [bool]\n   *        - true if slider is vertical,\n   *        - false is horizontal\n   *\n   * @return {boolean}\n   *         - true if slider is vertical, and getting\n   *         - false if the slider is horizontal, and getting\n   */\n\n\n  Slider.prototype.vertical = function vertical(bool) {\n    if (bool === undefined) {\n      return this.vertical_ || false;\n    }\n\n    this.vertical_ = !!bool;\n\n    if (this.vertical_) {\n      this.addClass('vjs-slider-vertical');\n    } else {\n      this.addClass('vjs-slider-horizontal');\n    }\n  };\n\n  return Slider;\n}(Component);\n\nComponent.registerComponent('Slider', Slider);\n\n/**\n * @file load-progress-bar.js\n */\n\n/**\n * Shows loading progress\n *\n * @extends Component\n */\n\nvar LoadProgressBar = function (_Component) {\n  inherits(LoadProgressBar, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function LoadProgressBar(player, options) {\n    classCallCheck(this, LoadProgressBar);\n\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));\n\n    _this.partEls_ = [];\n    _this.on(player, 'progress', _this.update);\n    return _this;\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  LoadProgressBar.prototype.createEl = function createEl$$1() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-load-progress',\n      innerHTML: '<span class=\"vjs-control-text\"><span>' + this.localize('Loaded') + '</span>: 0%</span>'\n    });\n  };\n\n  LoadProgressBar.prototype.dispose = function dispose() {\n    this.partEls_ = null;\n\n    _Component.prototype.dispose.call(this);\n  };\n\n  /**\n   * Update progress bar\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `progress` event that caused this function to run.\n   *\n   * @listens Player#progress\n   */\n\n\n  LoadProgressBar.prototype.update = function update(event) {\n    var buffered = this.player_.buffered();\n    var duration = this.player_.duration();\n    var bufferedEnd = this.player_.bufferedEnd();\n    var children = this.partEls_;\n\n    // get the percent width of a time compared to the total end\n    var percentify = function percentify(time, end) {\n      // no NaN\n      var percent = time / end || 0;\n\n      return (percent >= 1 ? 1 : percent) * 100 + '%';\n    };\n\n    // update the width of the progress bar\n    this.el_.style.width = percentify(bufferedEnd, duration);\n\n    // add child elements to represent the individual buffered time ranges\n    for (var i = 0; i < buffered.length; i++) {\n      var start = buffered.start(i);\n      var end = buffered.end(i);\n      var part = children[i];\n\n      if (!part) {\n        part = this.el_.appendChild(createEl());\n        children[i] = part;\n      }\n\n      // set the percent based on the width of the progress bar (bufferedEnd)\n      part.style.left = percentify(start, bufferedEnd);\n      part.style.width = percentify(end - start, bufferedEnd);\n    }\n\n    // remove unused buffered range elements\n    for (var _i = children.length; _i > buffered.length; _i--) {\n      this.el_.removeChild(children[_i - 1]);\n    }\n    children.length = buffered.length;\n  };\n\n  return LoadProgressBar;\n}(Component);\n\nComponent.registerComponent('LoadProgressBar', LoadProgressBar);\n\n/**\n * @file time-tooltip.js\n */\n\n/**\n * Time tooltips display a time above the progress bar.\n *\n * @extends Component\n */\n\nvar TimeTooltip = function (_Component) {\n  inherits(TimeTooltip, _Component);\n\n  function TimeTooltip() {\n    classCallCheck(this, TimeTooltip);\n    return possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  /**\n   * Create the time tooltip DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  TimeTooltip.prototype.createEl = function createEl$$1() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-time-tooltip'\n    });\n  };\n\n  /**\n   * Updates the position of the time tooltip relative to the `SeekBar`.\n   *\n   * @param {Object} seekBarRect\n   *        The `ClientRect` for the {@link SeekBar} element.\n   *\n   * @param {number} seekBarPoint\n   *        A number from 0 to 1, representing a horizontal reference point\n   *        from the left edge of the {@link SeekBar}\n   */\n\n\n  TimeTooltip.prototype.update = function update(seekBarRect, seekBarPoint, content) {\n    var tooltipRect = getBoundingClientRect(this.el_);\n    var playerRect = getBoundingClientRect(this.player_.el());\n    var seekBarPointPx = seekBarRect.width * seekBarPoint;\n\n    // do nothing if either rect isn't available\n    // for example, if the player isn't in the DOM for testing\n    if (!playerRect || !tooltipRect) {\n      return;\n    }\n\n    // This is the space left of the `seekBarPoint` available within the bounds\n    // of the player. We calculate any gap between the left edge of the player\n    // and the left edge of the `SeekBar` and add the number of pixels in the\n    // `SeekBar` before hitting the `seekBarPoint`\n    var spaceLeftOfPoint = seekBarRect.left - playerRect.left + seekBarPointPx;\n\n    // This is the space right of the `seekBarPoint` available within the bounds\n    // of the player. We calculate the number of pixels from the `seekBarPoint`\n    // to the right edge of the `SeekBar` and add to that any gap between the\n    // right edge of the `SeekBar` and the player.\n    var spaceRightOfPoint = seekBarRect.width - seekBarPointPx + (playerRect.right - seekBarRect.right);\n\n    // This is the number of pixels by which the tooltip will need to be pulled\n    // further to the right to center it over the `seekBarPoint`.\n    var pullTooltipBy = tooltipRect.width / 2;\n\n    // Adjust the `pullTooltipBy` distance to the left or right depending on\n    // the results of the space calculations above.\n    if (spaceLeftOfPoint < pullTooltipBy) {\n      pullTooltipBy += pullTooltipBy - spaceLeftOfPoint;\n    } else if (spaceRightOfPoint < pullTooltipBy) {\n      pullTooltipBy = spaceRightOfPoint;\n    }\n\n    // Due to the imprecision of decimal/ratio based calculations and varying\n    // rounding behaviors, there are cases where the spacing adjustment is off\n    // by a pixel or two. This adds insurance to these calculations.\n    if (pullTooltipBy < 0) {\n      pullTooltipBy = 0;\n    } else if (pullTooltipBy > tooltipRect.width) {\n      pullTooltipBy = tooltipRect.width;\n    }\n\n    this.el_.style.right = '-' + pullTooltipBy + 'px';\n    textContent(this.el_, content);\n  };\n\n  return TimeTooltip;\n}(Component);\n\nComponent.registerComponent('TimeTooltip', TimeTooltip);\n\n/**\n * @file play-progress-bar.js\n */\n\n/**\n * Used by {@link SeekBar} to display media playback progress as part of the\n * {@link ProgressControl}.\n *\n * @extends Component\n */\n\nvar PlayProgressBar = function (_Component) {\n  inherits(PlayProgressBar, _Component);\n\n  function PlayProgressBar() {\n    classCallCheck(this, PlayProgressBar);\n    return possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  /**\n   * Create the the DOM element for this class.\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  PlayProgressBar.prototype.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-play-progress vjs-slider-bar',\n      innerHTML: '<span class=\"vjs-control-text\"><span>' + this.localize('Progress') + '</span>: 0%</span>'\n    });\n  };\n\n  /**\n   * Enqueues updates to its own DOM as well as the DOM of its\n   * {@link TimeTooltip} child.\n   *\n   * @param {Object} seekBarRect\n   *        The `ClientRect` for the {@link SeekBar} element.\n   *\n   * @param {number} seekBarPoint\n   *        A number from 0 to 1, representing a horizontal reference point\n   *        from the left edge of the {@link SeekBar}\n   */\n\n\n  PlayProgressBar.prototype.update = function update(seekBarRect, seekBarPoint) {\n    var _this2 = this;\n\n    // If there is an existing rAF ID, cancel it so we don't over-queue.\n    if (this.rafId_) {\n      this.cancelAnimationFrame(this.rafId_);\n    }\n\n    this.rafId_ = this.requestAnimationFrame(function () {\n      var time = _this2.player_.scrubbing() ? _this2.player_.getCache().currentTime : _this2.player_.currentTime();\n\n      var content = formatTime(time, _this2.player_.duration());\n      var timeTooltip = _this2.getChild('timeTooltip');\n\n      if (timeTooltip) {\n        timeTooltip.update(seekBarRect, seekBarPoint, content);\n      }\n    });\n  };\n\n  return PlayProgressBar;\n}(Component);\n\n/**\n * Default options for {@link PlayProgressBar}.\n *\n * @type {Object}\n * @private\n */\n\n\nPlayProgressBar.prototype.options_ = {\n  children: []\n};\n\n// Time tooltips should not be added to a player on mobile devices\nif (!IS_IOS && !IS_ANDROID) {\n  PlayProgressBar.prototype.options_.children.push('timeTooltip');\n}\n\nComponent.registerComponent('PlayProgressBar', PlayProgressBar);\n\n/**\n * @file mouse-time-display.js\n */\n\n/**\n * The {@link MouseTimeDisplay} component tracks mouse movement over the\n * {@link ProgressControl}. It displays an indicator and a {@link TimeTooltip}\n * indicating the time which is represented by a given point in the\n * {@link ProgressControl}.\n *\n * @extends Component\n */\n\nvar MouseTimeDisplay = function (_Component) {\n  inherits(MouseTimeDisplay, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The {@link Player} that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function MouseTimeDisplay(player, options) {\n    classCallCheck(this, MouseTimeDisplay);\n\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));\n\n    _this.update = throttle(bind(_this, _this.update), 25);\n    return _this;\n  }\n\n  /**\n   * Create the DOM element for this class.\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  MouseTimeDisplay.prototype.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-mouse-display'\n    });\n  };\n\n  /**\n   * Enqueues updates to its own DOM as well as the DOM of its\n   * {@link TimeTooltip} child.\n   *\n   * @param {Object} seekBarRect\n   *        The `ClientRect` for the {@link SeekBar} element.\n   *\n   * @param {number} seekBarPoint\n   *        A number from 0 to 1, representing a horizontal reference point\n   *        from the left edge of the {@link SeekBar}\n   */\n\n\n  MouseTimeDisplay.prototype.update = function update(seekBarRect, seekBarPoint) {\n    var _this2 = this;\n\n    // If there is an existing rAF ID, cancel it so we don't over-queue.\n    if (this.rafId_) {\n      this.cancelAnimationFrame(this.rafId_);\n    }\n\n    this.rafId_ = this.requestAnimationFrame(function () {\n      var duration = _this2.player_.duration();\n      var content = formatTime(seekBarPoint * duration, duration);\n\n      _this2.el_.style.left = seekBarRect.width * seekBarPoint + 'px';\n      _this2.getChild('timeTooltip').update(seekBarRect, seekBarPoint, content);\n    });\n  };\n\n  return MouseTimeDisplay;\n}(Component);\n\n/**\n * Default options for `MouseTimeDisplay`\n *\n * @type {Object}\n * @private\n */\n\n\nMouseTimeDisplay.prototype.options_ = {\n  children: ['timeTooltip']\n};\n\nComponent.registerComponent('MouseTimeDisplay', MouseTimeDisplay);\n\n/**\n * @file seek-bar.js\n */\n\n// The number of seconds the `step*` functions move the timeline.\nvar STEP_SECONDS = 5;\n\n// The interval at which the bar should update as it progresses.\nvar UPDATE_REFRESH_INTERVAL = 30;\n\n/**\n * Seek bar and container for the progress bars. Uses {@link PlayProgressBar}\n * as its `bar`.\n *\n * @extends Slider\n */\n\nvar SeekBar = function (_Slider) {\n  inherits(SeekBar, _Slider);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function SeekBar(player, options) {\n    classCallCheck(this, SeekBar);\n\n    var _this = possibleConstructorReturn(this, _Slider.call(this, player, options));\n\n    _this.setEventHandlers_();\n    return _this;\n  }\n\n  /**\n   * Sets the event handlers\n   *\n   * @private\n   */\n\n\n  SeekBar.prototype.setEventHandlers_ = function setEventHandlers_() {\n    var _this2 = this;\n\n    this.update = throttle(bind(this, this.update), UPDATE_REFRESH_INTERVAL);\n\n    this.on(this.player_, 'timeupdate', this.update);\n    this.on(this.player_, 'ended', this.handleEnded);\n\n    // when playing, let's ensure we smoothly update the play progress bar\n    // via an interval\n    this.updateInterval = null;\n\n    this.on(this.player_, ['playing'], function () {\n      _this2.clearInterval(_this2.updateInterval);\n\n      _this2.updateInterval = _this2.setInterval(function () {\n        _this2.requestAnimationFrame(function () {\n          _this2.update();\n        });\n      }, UPDATE_REFRESH_INTERVAL);\n    });\n\n    this.on(this.player_, ['ended', 'pause', 'waiting'], function () {\n      _this2.clearInterval(_this2.updateInterval);\n    });\n\n    this.on(this.player_, ['timeupdate', 'ended'], this.update);\n  };\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  SeekBar.prototype.createEl = function createEl$$1() {\n    return _Slider.prototype.createEl.call(this, 'div', {\n      className: 'vjs-progress-holder'\n    }, {\n      'aria-label': this.localize('Progress Bar')\n    });\n  };\n\n  /**\n   * This function updates the play progress bar and accessibility\n   * attributes to whatever is passed in.\n   *\n   * @param {number} currentTime\n   *        The currentTime value that should be used for accessibility\n   *\n   * @param {number} percent\n   *        The percentage as a decimal that the bar should be filled from 0-1.\n   *\n   * @private\n   */\n\n\n  SeekBar.prototype.update_ = function update_(currentTime, percent) {\n    var duration = this.player_.duration();\n\n    // machine readable value of progress bar (percentage complete)\n    this.el_.setAttribute('aria-valuenow', (percent * 100).toFixed(2));\n\n    // human readable value of progress bar (time complete)\n    this.el_.setAttribute('aria-valuetext', this.localize('progress bar timing: currentTime={1} duration={2}', [formatTime(currentTime, duration), formatTime(duration, duration)], '{1} of {2}'));\n\n    // Update the `PlayProgressBar`.\n    this.bar.update(getBoundingClientRect(this.el_), percent);\n  };\n\n  /**\n   * Update the seek bar's UI.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `timeupdate` or `ended` event that caused this to run.\n   *\n   * @listens Player#timeupdate\n   *\n   * @returns {number}\n   *          The current percent at a number from 0-1\n   */\n\n\n  SeekBar.prototype.update = function update(event) {\n    var percent = _Slider.prototype.update.call(this);\n\n    this.update_(this.getCurrentTime_(), percent);\n    return percent;\n  };\n\n  /**\n   * Get the value of current time but allows for smooth scrubbing,\n   * when player can't keep up.\n   *\n   * @return {number}\n   *         The current time value to display\n   *\n   * @private\n   */\n\n\n  SeekBar.prototype.getCurrentTime_ = function getCurrentTime_() {\n    return this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();\n  };\n\n  /**\n   * We want the seek bar to be full on ended\n   * no matter what the actual internal values are. so we force it.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `timeupdate` or `ended` event that caused this to run.\n   *\n   * @listens Player#ended\n   */\n\n\n  SeekBar.prototype.handleEnded = function handleEnded(event) {\n    this.update_(this.player_.duration(), 1);\n  };\n\n  /**\n   * Get the percentage of media played so far.\n   *\n   * @return {number}\n   *         The percentage of media played so far (0 to 1).\n   */\n\n\n  SeekBar.prototype.getPercent = function getPercent() {\n    var percent = this.getCurrentTime_() / this.player_.duration();\n\n    return percent >= 1 ? 1 : percent || 0;\n  };\n\n  /**\n   * Handle mouse down on seek bar\n   *\n   * @param {EventTarget~Event} event\n   *        The `mousedown` event that caused this to run.\n   *\n   * @listens mousedown\n   */\n\n\n  SeekBar.prototype.handleMouseDown = function handleMouseDown(event) {\n    if (!isSingleLeftClick(event)) {\n      return;\n    }\n\n    // Stop event propagation to prevent double fire in progress-control.js\n    event.stopPropagation();\n    this.player_.scrubbing(true);\n\n    this.videoWasPlaying = !this.player_.paused();\n    this.player_.pause();\n\n    _Slider.prototype.handleMouseDown.call(this, event);\n  };\n\n  /**\n   * Handle mouse move on seek bar\n   *\n   * @param {EventTarget~Event} event\n   *        The `mousemove` event that caused this to run.\n   *\n   * @listens mousemove\n   */\n\n\n  SeekBar.prototype.handleMouseMove = function handleMouseMove(event) {\n    if (!isSingleLeftClick(event)) {\n      return;\n    }\n\n    var newTime = this.calculateDistance(event) * this.player_.duration();\n\n    // Don't let video end while scrubbing.\n    if (newTime === this.player_.duration()) {\n      newTime = newTime - 0.1;\n    }\n\n    // Set new time (tell player to seek to new time)\n    this.player_.currentTime(newTime);\n  };\n\n  SeekBar.prototype.enable = function enable() {\n    _Slider.prototype.enable.call(this);\n    var mouseTimeDisplay = this.getChild('mouseTimeDisplay');\n\n    if (!mouseTimeDisplay) {\n      return;\n    }\n\n    mouseTimeDisplay.show();\n  };\n\n  SeekBar.prototype.disable = function disable() {\n    _Slider.prototype.disable.call(this);\n    var mouseTimeDisplay = this.getChild('mouseTimeDisplay');\n\n    if (!mouseTimeDisplay) {\n      return;\n    }\n\n    mouseTimeDisplay.hide();\n  };\n\n  /**\n   * Handle mouse up on seek bar\n   *\n   * @param {EventTarget~Event} event\n   *        The `mouseup` event that caused this to run.\n   *\n   * @listens mouseup\n   */\n\n\n  SeekBar.prototype.handleMouseUp = function handleMouseUp(event) {\n    _Slider.prototype.handleMouseUp.call(this, event);\n\n    // Stop event propagation to prevent double fire in progress-control.js\n    if (event) {\n      event.stopPropagation();\n    }\n    this.player_.scrubbing(false);\n\n    /**\n     * Trigger timeupdate because we're done seeking and the time has changed.\n     * This is particularly useful for if the player is paused to time the time displays.\n     *\n     * @event Tech#timeupdate\n     * @type {EventTarget~Event}\n     */\n    this.player_.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });\n    if (this.videoWasPlaying) {\n      silencePromise(this.player_.play());\n    }\n  };\n\n  /**\n   * Move more quickly fast forward for keyboard-only users\n   */\n\n\n  SeekBar.prototype.stepForward = function stepForward() {\n    this.player_.currentTime(this.player_.currentTime() + STEP_SECONDS);\n  };\n\n  /**\n   * Move more quickly rewind for keyboard-only users\n   */\n\n\n  SeekBar.prototype.stepBack = function stepBack() {\n    this.player_.currentTime(this.player_.currentTime() - STEP_SECONDS);\n  };\n\n  /**\n   * Toggles the playback state of the player\n   * This gets called when enter or space is used on the seekbar\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown` event that caused this function to be called\n   *\n   */\n\n\n  SeekBar.prototype.handleAction = function handleAction(event) {\n    if (this.player_.paused()) {\n      this.player_.play();\n    } else {\n      this.player_.pause();\n    }\n  };\n\n  /**\n   * Called when this SeekBar has focus and a key gets pressed down. By\n   * default it will call `this.handleAction` when the key is space or enter.\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown` event that caused this function to be called.\n   *\n   * @listens keydown\n   */\n\n\n  SeekBar.prototype.handleKeyPress = function handleKeyPress(event) {\n\n    // Support Space (32) or Enter (13) key operation to fire a click event\n    if (event.which === 32 || event.which === 13) {\n      event.preventDefault();\n      this.handleAction(event);\n    } else if (_Slider.prototype.handleKeyPress) {\n\n      // Pass keypress handling up for unsupported keys\n      _Slider.prototype.handleKeyPress.call(this, event);\n    }\n  };\n\n  return SeekBar;\n}(Slider);\n\n/**\n * Default options for the `SeekBar`\n *\n * @type {Object}\n * @private\n */\n\n\nSeekBar.prototype.options_ = {\n  children: ['loadProgressBar', 'playProgressBar'],\n  barName: 'playProgressBar'\n};\n\n// MouseTimeDisplay tooltips should not be added to a player on mobile devices\nif (!IS_IOS && !IS_ANDROID) {\n  SeekBar.prototype.options_.children.splice(1, 0, 'mouseTimeDisplay');\n}\n\n/**\n * Call the update event for this Slider when this event happens on the player.\n *\n * @type {string}\n */\nSeekBar.prototype.playerEvent = 'timeupdate';\n\nComponent.registerComponent('SeekBar', SeekBar);\n\n/**\n * @file progress-control.js\n */\n\n/**\n * The Progress Control component contains the seek bar, load progress,\n * and play progress.\n *\n * @extends Component\n */\n\nvar ProgressControl = function (_Component) {\n  inherits(ProgressControl, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function ProgressControl(player, options) {\n    classCallCheck(this, ProgressControl);\n\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));\n\n    _this.handleMouseMove = throttle(bind(_this, _this.handleMouseMove), 25);\n    _this.throttledHandleMouseSeek = throttle(bind(_this, _this.handleMouseSeek), 25);\n\n    _this.enable();\n    return _this;\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  ProgressControl.prototype.createEl = function createEl$$1() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-progress-control vjs-control'\n    });\n  };\n\n  /**\n   * When the mouse moves over the `ProgressControl`, the pointer position\n   * gets passed down to the `MouseTimeDisplay` component.\n   *\n   * @param {EventTarget~Event} event\n   *        The `mousemove` event that caused this function to run.\n   *\n   * @listen mousemove\n   */\n\n\n  ProgressControl.prototype.handleMouseMove = function handleMouseMove(event) {\n    var seekBar = this.getChild('seekBar');\n\n    if (seekBar) {\n      var mouseTimeDisplay = seekBar.getChild('mouseTimeDisplay');\n      var seekBarEl = seekBar.el();\n      var seekBarRect = getBoundingClientRect(seekBarEl);\n      var seekBarPoint = getPointerPosition(seekBarEl, event).x;\n\n      // The default skin has a gap on either side of the `SeekBar`. This means\n      // that it's possible to trigger this behavior outside the boundaries of\n      // the `SeekBar`. This ensures we stay within it at all times.\n      if (seekBarPoint > 1) {\n        seekBarPoint = 1;\n      } else if (seekBarPoint < 0) {\n        seekBarPoint = 0;\n      }\n\n      if (mouseTimeDisplay) {\n        mouseTimeDisplay.update(seekBarRect, seekBarPoint);\n      }\n    }\n  };\n\n  /**\n   * A throttled version of the {@link ProgressControl#handleMouseSeek} listener.\n   *\n   * @method ProgressControl#throttledHandleMouseSeek\n   * @param {EventTarget~Event} event\n   *        The `mousemove` event that caused this function to run.\n   *\n   * @listen mousemove\n   * @listen touchmove\n   */\n\n  /**\n   * Handle `mousemove` or `touchmove` events on the `ProgressControl`.\n   *\n   * @param {EventTarget~Event} event\n   *        `mousedown` or `touchstart` event that triggered this function\n   *\n   * @listens mousemove\n   * @listens touchmove\n   */\n\n\n  ProgressControl.prototype.handleMouseSeek = function handleMouseSeek(event) {\n    var seekBar = this.getChild('seekBar');\n\n    if (seekBar) {\n      seekBar.handleMouseMove(event);\n    }\n  };\n\n  /**\n   * Are controls are currently enabled for this progress control.\n   *\n   * @return {boolean}\n   *         true if controls are enabled, false otherwise\n   */\n\n\n  ProgressControl.prototype.enabled = function enabled() {\n    return this.enabled_;\n  };\n\n  /**\n   * Disable all controls on the progress control and its children\n   */\n\n\n  ProgressControl.prototype.disable = function disable() {\n    this.children().forEach(function (child) {\n      return child.disable && child.disable();\n    });\n\n    if (!this.enabled()) {\n      return;\n    }\n\n    this.off(['mousedown', 'touchstart'], this.handleMouseDown);\n    this.off(this.el_, 'mousemove', this.handleMouseMove);\n    this.handleMouseUp();\n\n    this.addClass('disabled');\n\n    this.enabled_ = false;\n  };\n\n  /**\n   * Enable all controls on the progress control and its children\n   */\n\n\n  ProgressControl.prototype.enable = function enable() {\n    this.children().forEach(function (child) {\n      return child.enable && child.enable();\n    });\n\n    if (this.enabled()) {\n      return;\n    }\n\n    this.on(['mousedown', 'touchstart'], this.handleMouseDown);\n    this.on(this.el_, 'mousemove', this.handleMouseMove);\n    this.removeClass('disabled');\n\n    this.enabled_ = true;\n  };\n\n  /**\n   * Handle `mousedown` or `touchstart` events on the `ProgressControl`.\n   *\n   * @param {EventTarget~Event} event\n   *        `mousedown` or `touchstart` event that triggered this function\n   *\n   * @listens mousedown\n   * @listens touchstart\n   */\n\n\n  ProgressControl.prototype.handleMouseDown = function handleMouseDown(event) {\n    var doc = this.el_.ownerDocument;\n    var seekBar = this.getChild('seekBar');\n\n    if (seekBar) {\n      seekBar.handleMouseDown(event);\n    }\n\n    this.on(doc, 'mousemove', this.throttledHandleMouseSeek);\n    this.on(doc, 'touchmove', this.throttledHandleMouseSeek);\n    this.on(doc, 'mouseup', this.handleMouseUp);\n    this.on(doc, 'touchend', this.handleMouseUp);\n  };\n\n  /**\n   * Handle `mouseup` or `touchend` events on the `ProgressControl`.\n   *\n   * @param {EventTarget~Event} event\n   *        `mouseup` or `touchend` event that triggered this function.\n   *\n   * @listens touchend\n   * @listens mouseup\n   */\n\n\n  ProgressControl.prototype.handleMouseUp = function handleMouseUp(event) {\n    var doc = this.el_.ownerDocument;\n    var seekBar = this.getChild('seekBar');\n\n    if (seekBar) {\n      seekBar.handleMouseUp(event);\n    }\n\n    this.off(doc, 'mousemove', this.throttledHandleMouseSeek);\n    this.off(doc, 'touchmove', this.throttledHandleMouseSeek);\n    this.off(doc, 'mouseup', this.handleMouseUp);\n    this.off(doc, 'touchend', this.handleMouseUp);\n  };\n\n  return ProgressControl;\n}(Component);\n\n/**\n * Default options for `ProgressControl`\n *\n * @type {Object}\n * @private\n */\n\n\nProgressControl.prototype.options_ = {\n  children: ['seekBar']\n};\n\nComponent.registerComponent('ProgressControl', ProgressControl);\n\n/**\n * @file fullscreen-toggle.js\n */\n\n/**\n * Toggle fullscreen video\n *\n * @extends Button\n */\n\nvar FullscreenToggle = function (_Button) {\n  inherits(FullscreenToggle, _Button);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function FullscreenToggle(player, options) {\n    classCallCheck(this, FullscreenToggle);\n\n    var _this = possibleConstructorReturn(this, _Button.call(this, player, options));\n\n    _this.on(player, 'fullscreenchange', _this.handleFullscreenChange);\n\n    if (document[FullscreenApi.fullscreenEnabled] === false) {\n      _this.disable();\n    }\n    return _this;\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  FullscreenToggle.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-fullscreen-control ' + _Button.prototype.buildCSSClass.call(this);\n  };\n\n  /**\n   * Handles fullscreenchange on the player and change control text accordingly.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The {@link Player#fullscreenchange} event that caused this function to be\n   *        called.\n   *\n   * @listens Player#fullscreenchange\n   */\n\n\n  FullscreenToggle.prototype.handleFullscreenChange = function handleFullscreenChange(event) {\n    if (this.player_.isFullscreen()) {\n      this.controlText('Non-Fullscreen');\n    } else {\n      this.controlText('Fullscreen');\n    }\n  };\n\n  /**\n   * This gets called when an `FullscreenToggle` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n\n\n  FullscreenToggle.prototype.handleClick = function handleClick(event) {\n    if (!this.player_.isFullscreen()) {\n      this.player_.requestFullscreen();\n    } else {\n      this.player_.exitFullscreen();\n    }\n  };\n\n  return FullscreenToggle;\n}(Button);\n\n/**\n * The text that should display over the `FullscreenToggle`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\n\n\nFullscreenToggle.prototype.controlText_ = 'Fullscreen';\n\nComponent.registerComponent('FullscreenToggle', FullscreenToggle);\n\n/**\n * Check if volume control is supported and if it isn't hide the\n * `Component` that was passed  using the `vjs-hidden` class.\n *\n * @param {Component} self\n *        The component that should be hidden if volume is unsupported\n *\n * @param {Player} player\n *        A reference to the player\n *\n * @private\n */\nvar checkVolumeSupport = function checkVolumeSupport(self, player) {\n  // hide volume controls when they're not supported by the current tech\n  if (player.tech_ && !player.tech_.featuresVolumeControl) {\n    self.addClass('vjs-hidden');\n  }\n\n  self.on(player, 'loadstart', function () {\n    if (!player.tech_.featuresVolumeControl) {\n      self.addClass('vjs-hidden');\n    } else {\n      self.removeClass('vjs-hidden');\n    }\n  });\n};\n\n/**\n * @file volume-level.js\n */\n\n/**\n * Shows volume level\n *\n * @extends Component\n */\n\nvar VolumeLevel = function (_Component) {\n  inherits(VolumeLevel, _Component);\n\n  function VolumeLevel() {\n    classCallCheck(this, VolumeLevel);\n    return possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  VolumeLevel.prototype.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-volume-level',\n      innerHTML: '<span class=\"vjs-control-text\"></span>'\n    });\n  };\n\n  return VolumeLevel;\n}(Component);\n\nComponent.registerComponent('VolumeLevel', VolumeLevel);\n\n/**\n * @file volume-bar.js\n */\n\n/**\n * The bar that contains the volume level and can be clicked on to adjust the level\n *\n * @extends Slider\n */\n\nvar VolumeBar = function (_Slider) {\n  inherits(VolumeBar, _Slider);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function VolumeBar(player, options) {\n    classCallCheck(this, VolumeBar);\n\n    var _this = possibleConstructorReturn(this, _Slider.call(this, player, options));\n\n    _this.on('slideractive', _this.updateLastVolume_);\n    _this.on(player, 'volumechange', _this.updateARIAAttributes);\n    player.ready(function () {\n      return _this.updateARIAAttributes();\n    });\n    return _this;\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  VolumeBar.prototype.createEl = function createEl$$1() {\n    return _Slider.prototype.createEl.call(this, 'div', {\n      className: 'vjs-volume-bar vjs-slider-bar'\n    }, {\n      'aria-label': this.localize('Volume Level'),\n      'aria-live': 'polite'\n    });\n  };\n\n  /**\n   * Handle mouse down on volume bar\n   *\n   * @param {EventTarget~Event} event\n   *        The `mousedown` event that caused this to run.\n   *\n   * @listens mousedown\n   */\n\n\n  VolumeBar.prototype.handleMouseDown = function handleMouseDown(event) {\n    if (!isSingleLeftClick(event)) {\n      return;\n    }\n\n    _Slider.prototype.handleMouseDown.call(this, event);\n  };\n\n  /**\n   * Handle movement events on the {@link VolumeMenuButton}.\n   *\n   * @param {EventTarget~Event} event\n   *        The event that caused this function to run.\n   *\n   * @listens mousemove\n   */\n\n\n  VolumeBar.prototype.handleMouseMove = function handleMouseMove(event) {\n    if (!isSingleLeftClick(event)) {\n      return;\n    }\n\n    this.checkMuted();\n    this.player_.volume(this.calculateDistance(event));\n  };\n\n  /**\n   * If the player is muted unmute it.\n   */\n\n\n  VolumeBar.prototype.checkMuted = function checkMuted() {\n    if (this.player_.muted()) {\n      this.player_.muted(false);\n    }\n  };\n\n  /**\n   * Get percent of volume level\n   *\n   * @return {number}\n   *         Volume level percent as a decimal number.\n   */\n\n\n  VolumeBar.prototype.getPercent = function getPercent() {\n    if (this.player_.muted()) {\n      return 0;\n    }\n    return this.player_.volume();\n  };\n\n  /**\n   * Increase volume level for keyboard users\n   */\n\n\n  VolumeBar.prototype.stepForward = function stepForward() {\n    this.checkMuted();\n    this.player_.volume(this.player_.volume() + 0.1);\n  };\n\n  /**\n   * Decrease volume level for keyboard users\n   */\n\n\n  VolumeBar.prototype.stepBack = function stepBack() {\n    this.checkMuted();\n    this.player_.volume(this.player_.volume() - 0.1);\n  };\n\n  /**\n   * Update ARIA accessibility attributes\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `volumechange` event that caused this function to run.\n   *\n   * @listens Player#volumechange\n   */\n\n\n  VolumeBar.prototype.updateARIAAttributes = function updateARIAAttributes(event) {\n    var ariaValue = this.player_.muted() ? 0 : this.volumeAsPercentage_();\n\n    this.el_.setAttribute('aria-valuenow', ariaValue);\n    this.el_.setAttribute('aria-valuetext', ariaValue + '%');\n  };\n\n  /**\n   * Returns the current value of the player volume as a percentage\n   *\n   * @private\n   */\n\n\n  VolumeBar.prototype.volumeAsPercentage_ = function volumeAsPercentage_() {\n    return Math.round(this.player_.volume() * 100);\n  };\n\n  /**\n   * When user starts dragging the VolumeBar, store the volume and listen for\n   * the end of the drag. When the drag ends, if the volume was set to zero,\n   * set lastVolume to the stored volume.\n   *\n   * @listens slideractive\n   * @private\n   */\n\n\n  VolumeBar.prototype.updateLastVolume_ = function updateLastVolume_() {\n    var _this2 = this;\n\n    var volumeBeforeDrag = this.player_.volume();\n\n    this.one('sliderinactive', function () {\n      if (_this2.player_.volume() === 0) {\n        _this2.player_.lastVolume_(volumeBeforeDrag);\n      }\n    });\n  };\n\n  return VolumeBar;\n}(Slider);\n\n/**\n * Default options for the `VolumeBar`\n *\n * @type {Object}\n * @private\n */\n\n\nVolumeBar.prototype.options_ = {\n  children: ['volumeLevel'],\n  barName: 'volumeLevel'\n};\n\n/**\n * Call the update event for this Slider when this event happens on the player.\n *\n * @type {string}\n */\nVolumeBar.prototype.playerEvent = 'volumechange';\n\nComponent.registerComponent('VolumeBar', VolumeBar);\n\n/**\n * @file volume-control.js\n */\n\n/**\n * The component for controlling the volume level\n *\n * @extends Component\n */\n\nvar VolumeControl = function (_Component) {\n  inherits(VolumeControl, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   */\n  function VolumeControl(player) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    classCallCheck(this, VolumeControl);\n\n    options.vertical = options.vertical || false;\n\n    // Pass the vertical option down to the VolumeBar if\n    // the VolumeBar is turned on.\n    if (typeof options.volumeBar === 'undefined' || isPlain(options.volumeBar)) {\n      options.volumeBar = options.volumeBar || {};\n      options.volumeBar.vertical = options.vertical;\n    }\n\n    // hide this control if volume support is missing\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));\n\n    checkVolumeSupport(_this, player);\n\n    _this.throttledHandleMouseMove = throttle(bind(_this, _this.handleMouseMove), 25);\n\n    _this.on('mousedown', _this.handleMouseDown);\n    _this.on('touchstart', _this.handleMouseDown);\n\n    // while the slider is active (the mouse has been pressed down and\n    // is dragging) or in focus we do not want to hide the VolumeBar\n    _this.on(_this.volumeBar, ['focus', 'slideractive'], function () {\n      _this.volumeBar.addClass('vjs-slider-active');\n      _this.addClass('vjs-slider-active');\n      _this.trigger('slideractive');\n    });\n\n    _this.on(_this.volumeBar, ['blur', 'sliderinactive'], function () {\n      _this.volumeBar.removeClass('vjs-slider-active');\n      _this.removeClass('vjs-slider-active');\n      _this.trigger('sliderinactive');\n    });\n    return _this;\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  VolumeControl.prototype.createEl = function createEl() {\n    var orientationClass = 'vjs-volume-horizontal';\n\n    if (this.options_.vertical) {\n      orientationClass = 'vjs-volume-vertical';\n    }\n\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-volume-control vjs-control ' + orientationClass\n    });\n  };\n\n  /**\n   * Handle `mousedown` or `touchstart` events on the `VolumeControl`.\n   *\n   * @param {EventTarget~Event} event\n   *        `mousedown` or `touchstart` event that triggered this function\n   *\n   * @listens mousedown\n   * @listens touchstart\n   */\n\n\n  VolumeControl.prototype.handleMouseDown = function handleMouseDown(event) {\n    var doc = this.el_.ownerDocument;\n\n    this.on(doc, 'mousemove', this.throttledHandleMouseMove);\n    this.on(doc, 'touchmove', this.throttledHandleMouseMove);\n    this.on(doc, 'mouseup', this.handleMouseUp);\n    this.on(doc, 'touchend', this.handleMouseUp);\n  };\n\n  /**\n   * Handle `mouseup` or `touchend` events on the `VolumeControl`.\n   *\n   * @param {EventTarget~Event} event\n   *        `mouseup` or `touchend` event that triggered this function.\n   *\n   * @listens touchend\n   * @listens mouseup\n   */\n\n\n  VolumeControl.prototype.handleMouseUp = function handleMouseUp(event) {\n    var doc = this.el_.ownerDocument;\n\n    this.off(doc, 'mousemove', this.throttledHandleMouseMove);\n    this.off(doc, 'touchmove', this.throttledHandleMouseMove);\n    this.off(doc, 'mouseup', this.handleMouseUp);\n    this.off(doc, 'touchend', this.handleMouseUp);\n  };\n\n  /**\n   * Handle `mousedown` or `touchstart` events on the `VolumeControl`.\n   *\n   * @param {EventTarget~Event} event\n   *        `mousedown` or `touchstart` event that triggered this function\n   *\n   * @listens mousedown\n   * @listens touchstart\n   */\n\n\n  VolumeControl.prototype.handleMouseMove = function handleMouseMove(event) {\n    this.volumeBar.handleMouseMove(event);\n  };\n\n  return VolumeControl;\n}(Component);\n\n/**\n * Default options for the `VolumeControl`\n *\n * @type {Object}\n * @private\n */\n\n\nVolumeControl.prototype.options_ = {\n  children: ['volumeBar']\n};\n\nComponent.registerComponent('VolumeControl', VolumeControl);\n\n/**\n * Check if muting volume is supported and if it isn't hide the mute toggle\n * button.\n *\n * @param {Component} self\n *        A reference to the mute toggle button\n *\n * @param {Player} player\n *        A reference to the player\n *\n * @private\n */\nvar checkMuteSupport = function checkMuteSupport(self, player) {\n  // hide mute toggle button if it's not supported by the current tech\n  if (player.tech_ && !player.tech_.featuresMuteControl) {\n    self.addClass('vjs-hidden');\n  }\n\n  self.on(player, 'loadstart', function () {\n    if (!player.tech_.featuresMuteControl) {\n      self.addClass('vjs-hidden');\n    } else {\n      self.removeClass('vjs-hidden');\n    }\n  });\n};\n\n/**\n * @file mute-toggle.js\n */\n\n/**\n * A button component for muting the audio.\n *\n * @extends Button\n */\n\nvar MuteToggle = function (_Button) {\n  inherits(MuteToggle, _Button);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function MuteToggle(player, options) {\n    classCallCheck(this, MuteToggle);\n\n    // hide this control if volume support is missing\n    var _this = possibleConstructorReturn(this, _Button.call(this, player, options));\n\n    checkMuteSupport(_this, player);\n\n    _this.on(player, ['loadstart', 'volumechange'], _this.update);\n    return _this;\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  MuteToggle.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-mute-control ' + _Button.prototype.buildCSSClass.call(this);\n  };\n\n  /**\n   * This gets called when an `MuteToggle` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n\n\n  MuteToggle.prototype.handleClick = function handleClick(event) {\n    var vol = this.player_.volume();\n    var lastVolume = this.player_.lastVolume_();\n\n    if (vol === 0) {\n      var volumeToSet = lastVolume < 0.1 ? 0.1 : lastVolume;\n\n      this.player_.volume(volumeToSet);\n      this.player_.muted(false);\n    } else {\n      this.player_.muted(this.player_.muted() ? false : true);\n    }\n  };\n\n  /**\n   * Update the `MuteToggle` button based on the state of `volume` and `muted`\n   * on the player.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The {@link Player#loadstart} event if this function was called\n   *        through an event.\n   *\n   * @listens Player#loadstart\n   * @listens Player#volumechange\n   */\n\n\n  MuteToggle.prototype.update = function update(event) {\n    this.updateIcon_();\n    this.updateControlText_();\n  };\n\n  /**\n   * Update the appearance of the `MuteToggle` icon.\n   *\n   * Possible states (given `level` variable below):\n   * - 0: crossed out\n   * - 1: zero bars of volume\n   * - 2: one bar of volume\n   * - 3: two bars of volume\n   *\n   * @private\n   */\n\n\n  MuteToggle.prototype.updateIcon_ = function updateIcon_() {\n    var vol = this.player_.volume();\n    var level = 3;\n\n    // in iOS when a player is loaded with muted attribute\n    // and volume is changed with a native mute button\n    // we want to make sure muted state is updated\n    if (IS_IOS) {\n      this.player_.muted(this.player_.tech_.el_.muted);\n    }\n\n    if (vol === 0 || this.player_.muted()) {\n      level = 0;\n    } else if (vol < 0.33) {\n      level = 1;\n    } else if (vol < 0.67) {\n      level = 2;\n    }\n\n    // TODO improve muted icon classes\n    for (var i = 0; i < 4; i++) {\n      removeClass(this.el_, 'vjs-vol-' + i);\n    }\n    addClass(this.el_, 'vjs-vol-' + level);\n  };\n\n  /**\n   * If `muted` has changed on the player, update the control text\n   * (`title` attribute on `vjs-mute-control` element and content of\n   * `vjs-control-text` element).\n   *\n   * @private\n   */\n\n\n  MuteToggle.prototype.updateControlText_ = function updateControlText_() {\n    var soundOff = this.player_.muted() || this.player_.volume() === 0;\n    var text = soundOff ? 'Unmute' : 'Mute';\n\n    if (this.controlText() !== text) {\n      this.controlText(text);\n    }\n  };\n\n  return MuteToggle;\n}(Button);\n\n/**\n * The text that should display over the `MuteToggle`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\n\n\nMuteToggle.prototype.controlText_ = 'Mute';\n\nComponent.registerComponent('MuteToggle', MuteToggle);\n\n/**\n * @file volume-control.js\n */\n\n/**\n * A Component to contain the MuteToggle and VolumeControl so that\n * they can work together.\n *\n * @extends Component\n */\n\nvar VolumePanel = function (_Component) {\n  inherits(VolumePanel, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   */\n  function VolumePanel(player) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    classCallCheck(this, VolumePanel);\n\n    if (typeof options.inline !== 'undefined') {\n      options.inline = options.inline;\n    } else {\n      options.inline = true;\n    }\n\n    // pass the inline option down to the VolumeControl as vertical if\n    // the VolumeControl is on.\n    if (typeof options.volumeControl === 'undefined' || isPlain(options.volumeControl)) {\n      options.volumeControl = options.volumeControl || {};\n      options.volumeControl.vertical = !options.inline;\n    }\n\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));\n\n    _this.on(player, ['loadstart'], _this.volumePanelState_);\n\n    // while the slider is active (the mouse has been pressed down and\n    // is dragging) we do not want to hide the VolumeBar\n    _this.on(_this.volumeControl, ['slideractive'], _this.sliderActive_);\n\n    _this.on(_this.volumeControl, ['sliderinactive'], _this.sliderInactive_);\n    return _this;\n  }\n\n  /**\n   * Add vjs-slider-active class to the VolumePanel\n   *\n   * @listens VolumeControl#slideractive\n   * @private\n   */\n\n\n  VolumePanel.prototype.sliderActive_ = function sliderActive_() {\n    this.addClass('vjs-slider-active');\n  };\n\n  /**\n   * Removes vjs-slider-active class to the VolumePanel\n   *\n   * @listens VolumeControl#sliderinactive\n   * @private\n   */\n\n\n  VolumePanel.prototype.sliderInactive_ = function sliderInactive_() {\n    this.removeClass('vjs-slider-active');\n  };\n\n  /**\n   * Adds vjs-hidden or vjs-mute-toggle-only to the VolumePanel\n   * depending on MuteToggle and VolumeControl state\n   *\n   * @listens Player#loadstart\n   * @private\n   */\n\n\n  VolumePanel.prototype.volumePanelState_ = function volumePanelState_() {\n    // hide volume panel if neither volume control or mute toggle\n    // are displayed\n    if (this.volumeControl.hasClass('vjs-hidden') && this.muteToggle.hasClass('vjs-hidden')) {\n      this.addClass('vjs-hidden');\n    }\n\n    // if only mute toggle is visible we don't want\n    // volume panel expanding when hovered or active\n    if (this.volumeControl.hasClass('vjs-hidden') && !this.muteToggle.hasClass('vjs-hidden')) {\n      this.addClass('vjs-mute-toggle-only');\n    }\n  };\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  VolumePanel.prototype.createEl = function createEl() {\n    var orientationClass = 'vjs-volume-panel-horizontal';\n\n    if (!this.options_.inline) {\n      orientationClass = 'vjs-volume-panel-vertical';\n    }\n\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-volume-panel vjs-control ' + orientationClass\n    });\n  };\n\n  return VolumePanel;\n}(Component);\n\n/**\n * Default options for the `VolumeControl`\n *\n * @type {Object}\n * @private\n */\n\n\nVolumePanel.prototype.options_ = {\n  children: ['muteToggle', 'volumeControl']\n};\n\nComponent.registerComponent('VolumePanel', VolumePanel);\n\n/**\n * @file menu.js\n */\n\n/**\n * The Menu component is used to build popup menus, including subtitle and\n * captions selection menus.\n *\n * @extends Component\n */\n\nvar Menu = function (_Component) {\n  inherits(Menu, _Component);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Player} player\n   *        the player that this component should attach to\n   *\n   * @param {Object} [options]\n   *        Object of option names and values\n   *\n   */\n  function Menu(player, options) {\n    classCallCheck(this, Menu);\n\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));\n\n    if (options) {\n      _this.menuButton_ = options.menuButton;\n    }\n\n    _this.focusedChild_ = -1;\n\n    _this.on('keydown', _this.handleKeyPress);\n    return _this;\n  }\n\n  /**\n   * Add a {@link MenuItem} to the menu.\n   *\n   * @param {Object|string} component\n   *        The name or instance of the `MenuItem` to add.\n   *\n   */\n\n\n  Menu.prototype.addItem = function addItem(component) {\n    this.addChild(component);\n    component.on('click', bind(this, function (event) {\n      // Unpress the associated MenuButton, and move focus back to it\n      if (this.menuButton_) {\n        this.menuButton_.unpressButton();\n\n        // don't focus menu button if item is a caption settings item\n        // because focus will move elsewhere\n        if (component.name() !== 'CaptionSettingsMenuItem') {\n          this.menuButton_.focus();\n        }\n      }\n    }));\n  };\n\n  /**\n   * Create the `Menu`s DOM element.\n   *\n   * @return {Element}\n   *         the element that was created\n   */\n\n\n  Menu.prototype.createEl = function createEl$$1() {\n    var contentElType = this.options_.contentElType || 'ul';\n\n    this.contentEl_ = createEl(contentElType, {\n      className: 'vjs-menu-content'\n    });\n\n    this.contentEl_.setAttribute('role', 'menu');\n\n    var el = _Component.prototype.createEl.call(this, 'div', {\n      append: this.contentEl_,\n      className: 'vjs-menu'\n    });\n\n    el.appendChild(this.contentEl_);\n\n    // Prevent clicks from bubbling up. Needed for Menu Buttons,\n    // where a click on the parent is significant\n    on(el, 'click', function (event) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    });\n\n    return el;\n  };\n\n  Menu.prototype.dispose = function dispose() {\n    this.contentEl_ = null;\n\n    _Component.prototype.dispose.call(this);\n  };\n\n  /**\n   * Handle a `keydown` event on this menu. This listener is added in the constructor.\n   *\n   * @param {EventTarget~Event} event\n   *        A `keydown` event that happened on the menu.\n   *\n   * @listens keydown\n   */\n\n\n  Menu.prototype.handleKeyPress = function handleKeyPress(event) {\n    // Left and Down Arrows\n    if (event.which === 37 || event.which === 40) {\n      event.preventDefault();\n      this.stepForward();\n\n      // Up and Right Arrows\n    } else if (event.which === 38 || event.which === 39) {\n      event.preventDefault();\n      this.stepBack();\n    }\n  };\n\n  /**\n   * Move to next (lower) menu item for keyboard users.\n   */\n\n\n  Menu.prototype.stepForward = function stepForward() {\n    var stepChild = 0;\n\n    if (this.focusedChild_ !== undefined) {\n      stepChild = this.focusedChild_ + 1;\n    }\n    this.focus(stepChild);\n  };\n\n  /**\n   * Move to previous (higher) menu item for keyboard users.\n   */\n\n\n  Menu.prototype.stepBack = function stepBack() {\n    var stepChild = 0;\n\n    if (this.focusedChild_ !== undefined) {\n      stepChild = this.focusedChild_ - 1;\n    }\n    this.focus(stepChild);\n  };\n\n  /**\n   * Set focus on a {@link MenuItem} in the `Menu`.\n   *\n   * @param {Object|string} [item=0]\n   *        Index of child item set focus on.\n   */\n\n\n  Menu.prototype.focus = function focus() {\n    var item = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n    var children = this.children().slice();\n    var haveTitle = children.length && children[0].className && /vjs-menu-title/.test(children[0].className);\n\n    if (haveTitle) {\n      children.shift();\n    }\n\n    if (children.length > 0) {\n      if (item < 0) {\n        item = 0;\n      } else if (item >= children.length) {\n        item = children.length - 1;\n      }\n\n      this.focusedChild_ = item;\n\n      children[item].el_.focus();\n    }\n  };\n\n  return Menu;\n}(Component);\n\nComponent.registerComponent('Menu', Menu);\n\n/**\n * @file menu-button.js\n */\n\n/**\n * A `MenuButton` class for any popup {@link Menu}.\n *\n * @extends Component\n */\n\nvar MenuButton = function (_Component) {\n  inherits(MenuButton, _Component);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   */\n  function MenuButton(player) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    classCallCheck(this, MenuButton);\n\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));\n\n    _this.menuButton_ = new Button(player, options);\n\n    _this.menuButton_.controlText(_this.controlText_);\n    _this.menuButton_.el_.setAttribute('aria-haspopup', 'true');\n\n    // Add buildCSSClass values to the button, not the wrapper\n    var buttonClass = Button.prototype.buildCSSClass();\n\n    _this.menuButton_.el_.className = _this.buildCSSClass() + ' ' + buttonClass;\n    _this.menuButton_.removeClass('vjs-control');\n\n    _this.addChild(_this.menuButton_);\n\n    _this.update();\n\n    _this.enabled_ = true;\n\n    _this.on(_this.menuButton_, 'tap', _this.handleClick);\n    _this.on(_this.menuButton_, 'click', _this.handleClick);\n    _this.on(_this.menuButton_, 'focus', _this.handleFocus);\n    _this.on(_this.menuButton_, 'blur', _this.handleBlur);\n\n    _this.on('keydown', _this.handleSubmenuKeyPress);\n    return _this;\n  }\n\n  /**\n   * Update the menu based on the current state of its items.\n   */\n\n\n  MenuButton.prototype.update = function update() {\n    var menu = this.createMenu();\n\n    if (this.menu) {\n      this.menu.dispose();\n      this.removeChild(this.menu);\n    }\n\n    this.menu = menu;\n    this.addChild(menu);\n\n    /**\n     * Track the state of the menu button\n     *\n     * @type {Boolean}\n     * @private\n     */\n    this.buttonPressed_ = false;\n    this.menuButton_.el_.setAttribute('aria-expanded', 'false');\n\n    if (this.items && this.items.length <= this.hideThreshold_) {\n      this.hide();\n    } else {\n      this.show();\n    }\n  };\n\n  /**\n   * Create the menu and add all items to it.\n   *\n   * @return {Menu}\n   *         The constructed menu\n   */\n\n\n  MenuButton.prototype.createMenu = function createMenu() {\n    var menu = new Menu(this.player_, { menuButton: this });\n\n    /**\n     * Hide the menu if the number of items is less than or equal to this threshold. This defaults\n     * to 0 and whenever we add items which can be hidden to the menu we'll increment it. We list\n     * it here because every time we run `createMenu` we need to reset the value.\n     *\n     * @protected\n     * @type {Number}\n     */\n    this.hideThreshold_ = 0;\n\n    // Add a title list item to the top\n    if (this.options_.title) {\n      var title = createEl('li', {\n        className: 'vjs-menu-title',\n        innerHTML: toTitleCase(this.options_.title),\n        tabIndex: -1\n      });\n\n      this.hideThreshold_ += 1;\n\n      menu.children_.unshift(title);\n      prependTo(title, menu.contentEl());\n    }\n\n    this.items = this.createItems();\n\n    if (this.items) {\n      // Add menu items to the menu\n      for (var i = 0; i < this.items.length; i++) {\n        menu.addItem(this.items[i]);\n      }\n    }\n\n    return menu;\n  };\n\n  /**\n   * Create the list of menu items. Specific to each subclass.\n   *\n   * @abstract\n   */\n\n\n  MenuButton.prototype.createItems = function createItems() {};\n\n  /**\n   * Create the `MenuButtons`s DOM element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n\n\n  MenuButton.prototype.createEl = function createEl$$1() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: this.buildWrapperCSSClass()\n    }, {});\n  };\n\n  /**\n   * Allow sub components to stack CSS class names for the wrapper element\n   *\n   * @return {string}\n   *         The constructed wrapper DOM `className`\n   */\n\n\n  MenuButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {\n    var menuButtonClass = 'vjs-menu-button';\n\n    // If the inline option is passed, we want to use different styles altogether.\n    if (this.options_.inline === true) {\n      menuButtonClass += '-inline';\n    } else {\n      menuButtonClass += '-popup';\n    }\n\n    // TODO: Fix the CSS so that this isn't necessary\n    var buttonClass = Button.prototype.buildCSSClass();\n\n    return 'vjs-menu-button ' + menuButtonClass + ' ' + buttonClass + ' ' + _Component.prototype.buildCSSClass.call(this);\n  };\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  MenuButton.prototype.buildCSSClass = function buildCSSClass() {\n    var menuButtonClass = 'vjs-menu-button';\n\n    // If the inline option is passed, we want to use different styles altogether.\n    if (this.options_.inline === true) {\n      menuButtonClass += '-inline';\n    } else {\n      menuButtonClass += '-popup';\n    }\n\n    return 'vjs-menu-button ' + menuButtonClass + ' ' + _Component.prototype.buildCSSClass.call(this);\n  };\n\n  /**\n   * Get or set the localized control text that will be used for accessibility.\n   *\n   * > NOTE: This will come from the internal `menuButton_` element.\n   *\n   * @param {string} [text]\n   *        Control text for element.\n   *\n   * @param {Element} [el=this.menuButton_.el()]\n   *        Element to set the title on.\n   *\n   * @return {string}\n   *         - The control text when getting\n   */\n\n\n  MenuButton.prototype.controlText = function controlText(text) {\n    var el = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.menuButton_.el();\n\n    return this.menuButton_.controlText(text, el);\n  };\n\n  /**\n   * Handle a click on a `MenuButton`.\n   * See {@link ClickableComponent#handleClick} for instances where this is called.\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n\n\n  MenuButton.prototype.handleClick = function handleClick(event) {\n    // When you click the button it adds focus, which will show the menu.\n    // So we'll remove focus when the mouse leaves the button. Focus is needed\n    // for tab navigation.\n\n    this.one(this.menu.contentEl(), 'mouseleave', bind(this, function (e) {\n      this.unpressButton();\n      this.el_.blur();\n    }));\n    if (this.buttonPressed_) {\n      this.unpressButton();\n    } else {\n      this.pressButton();\n    }\n  };\n\n  /**\n   * Set the focus to the actual button, not to this element\n   */\n\n\n  MenuButton.prototype.focus = function focus() {\n    this.menuButton_.focus();\n  };\n\n  /**\n   * Remove the focus from the actual button, not this element\n   */\n\n\n  MenuButton.prototype.blur = function blur() {\n    this.menuButton_.blur();\n  };\n\n  /**\n   * This gets called when a `MenuButton` gains focus via a `focus` event.\n   * Turns on listening for `keydown` events. When they happen it\n   * calls `this.handleKeyPress`.\n   *\n   * @param {EventTarget~Event} event\n   *        The `focus` event that caused this function to be called.\n   *\n   * @listens focus\n   */\n\n\n  MenuButton.prototype.handleFocus = function handleFocus() {\n    on(document, 'keydown', bind(this, this.handleKeyPress));\n  };\n\n  /**\n   * Called when a `MenuButton` loses focus. Turns off the listener for\n   * `keydown` events. Which Stops `this.handleKeyPress` from getting called.\n   *\n   * @param {EventTarget~Event} event\n   *        The `blur` event that caused this function to be called.\n   *\n   * @listens blur\n   */\n\n\n  MenuButton.prototype.handleBlur = function handleBlur() {\n    off(document, 'keydown', bind(this, this.handleKeyPress));\n  };\n\n  /**\n   * Handle tab, escape, down arrow, and up arrow keys for `MenuButton`. See\n   * {@link ClickableComponent#handleKeyPress} for instances where this is called.\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown` event that caused this function to be called.\n   *\n   * @listens keydown\n   */\n\n\n  MenuButton.prototype.handleKeyPress = function handleKeyPress(event) {\n\n    // Escape (27) key or Tab (9) key unpress the 'button'\n    if (event.which === 27 || event.which === 9) {\n      if (this.buttonPressed_) {\n        this.unpressButton();\n      }\n      // Don't preventDefault for Tab key - we still want to lose focus\n      if (event.which !== 9) {\n        event.preventDefault();\n        // Set focus back to the menu button's button\n        this.menuButton_.el_.focus();\n      }\n      // Up (38) key or Down (40) key press the 'button'\n    } else if (event.which === 38 || event.which === 40) {\n      if (!this.buttonPressed_) {\n        this.pressButton();\n        event.preventDefault();\n      }\n    }\n  };\n\n  /**\n   * Handle a `keydown` event on a sub-menu. The listener for this is added in\n   * the constructor.\n   *\n   * @param {EventTarget~Event} event\n   *        Key press event\n   *\n   * @listens keydown\n   */\n\n\n  MenuButton.prototype.handleSubmenuKeyPress = function handleSubmenuKeyPress(event) {\n\n    // Escape (27) key or Tab (9) key unpress the 'button'\n    if (event.which === 27 || event.which === 9) {\n      if (this.buttonPressed_) {\n        this.unpressButton();\n      }\n      // Don't preventDefault for Tab key - we still want to lose focus\n      if (event.which !== 9) {\n        event.preventDefault();\n        // Set focus back to the menu button's button\n        this.menuButton_.el_.focus();\n      }\n    }\n  };\n\n  /**\n   * Put the current `MenuButton` into a pressed state.\n   */\n\n\n  MenuButton.prototype.pressButton = function pressButton() {\n    if (this.enabled_) {\n      this.buttonPressed_ = true;\n      this.menu.lockShowing();\n      this.menuButton_.el_.setAttribute('aria-expanded', 'true');\n\n      // set the focus into the submenu, except on iOS where it is resulting in\n      // undesired scrolling behavior when the player is in an iframe\n      if (IS_IOS && isInFrame()) {\n        // Return early so that the menu isn't focused\n        return;\n      }\n\n      this.menu.focus();\n    }\n  };\n\n  /**\n   * Take the current `MenuButton` out of a pressed state.\n   */\n\n\n  MenuButton.prototype.unpressButton = function unpressButton() {\n    if (this.enabled_) {\n      this.buttonPressed_ = false;\n      this.menu.unlockShowing();\n      this.menuButton_.el_.setAttribute('aria-expanded', 'false');\n    }\n  };\n\n  /**\n   * Disable the `MenuButton`. Don't allow it to be clicked.\n   */\n\n\n  MenuButton.prototype.disable = function disable() {\n    this.unpressButton();\n\n    this.enabled_ = false;\n    this.addClass('vjs-disabled');\n\n    this.menuButton_.disable();\n  };\n\n  /**\n   * Enable the `MenuButton`. Allow it to be clicked.\n   */\n\n\n  MenuButton.prototype.enable = function enable() {\n    this.enabled_ = true;\n    this.removeClass('vjs-disabled');\n\n    this.menuButton_.enable();\n  };\n\n  return MenuButton;\n}(Component);\n\nComponent.registerComponent('MenuButton', MenuButton);\n\n/**\n * @file track-button.js\n */\n\n/**\n * The base class for buttons that toggle specific  track types (e.g. subtitles).\n *\n * @extends MenuButton\n */\n\nvar TrackButton = function (_MenuButton) {\n  inherits(TrackButton, _MenuButton);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function TrackButton(player, options) {\n    classCallCheck(this, TrackButton);\n\n    var tracks = options.tracks;\n\n    var _this = possibleConstructorReturn(this, _MenuButton.call(this, player, options));\n\n    if (_this.items.length <= 1) {\n      _this.hide();\n    }\n\n    if (!tracks) {\n      return possibleConstructorReturn(_this);\n    }\n\n    var updateHandler = bind(_this, _this.update);\n\n    tracks.addEventListener('removetrack', updateHandler);\n    tracks.addEventListener('addtrack', updateHandler);\n    _this.player_.on('ready', updateHandler);\n\n    _this.player_.on('dispose', function () {\n      tracks.removeEventListener('removetrack', updateHandler);\n      tracks.removeEventListener('addtrack', updateHandler);\n    });\n    return _this;\n  }\n\n  return TrackButton;\n}(MenuButton);\n\nComponent.registerComponent('TrackButton', TrackButton);\n\n/**\n * @file menu-item.js\n */\n\n/**\n * The component for a menu item. `<li>`\n *\n * @extends ClickableComponent\n */\n\nvar MenuItem = function (_ClickableComponent) {\n  inherits(MenuItem, _ClickableComponent);\n\n  /**\n   * Creates an instance of the this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   *\n   */\n  function MenuItem(player, options) {\n    classCallCheck(this, MenuItem);\n\n    var _this = possibleConstructorReturn(this, _ClickableComponent.call(this, player, options));\n\n    _this.selectable = options.selectable;\n    _this.isSelected_ = options.selected || false;\n    _this.multiSelectable = options.multiSelectable;\n\n    _this.selected(_this.isSelected_);\n\n    if (_this.selectable) {\n      if (_this.multiSelectable) {\n        _this.el_.setAttribute('role', 'menuitemcheckbox');\n      } else {\n        _this.el_.setAttribute('role', 'menuitemradio');\n      }\n    } else {\n      _this.el_.setAttribute('role', 'menuitem');\n    }\n    return _this;\n  }\n\n  /**\n   * Create the `MenuItem's DOM element\n   *\n   * @param {string} [type=li]\n   *        Element's node type, not actually used, always set to `li`.\n   *\n   * @param {Object} [props={}]\n   *        An object of properties that should be set on the element\n   *\n   * @param {Object} [attrs={}]\n   *        An object of attributes that should be set on the element\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n\n\n  MenuItem.prototype.createEl = function createEl(type, props, attrs) {\n    // The control is textual, not just an icon\n    this.nonIconControl = true;\n\n    return _ClickableComponent.prototype.createEl.call(this, 'li', assign({\n      className: 'vjs-menu-item',\n      innerHTML: '<span class=\"vjs-menu-item-text\">' + this.localize(this.options_.label) + '</span>',\n      tabIndex: -1\n    }, props), attrs);\n  };\n\n  /**\n   * Any click on a `MenuItem` puts it into the selected state.\n   * See {@link ClickableComponent#handleClick} for instances where this is called.\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n\n\n  MenuItem.prototype.handleClick = function handleClick(event) {\n    this.selected(true);\n  };\n\n  /**\n   * Set the state for this menu item as selected or not.\n   *\n   * @param {boolean} selected\n   *        if the menu item is selected or not\n   */\n\n\n  MenuItem.prototype.selected = function selected(_selected) {\n    if (this.selectable) {\n      if (_selected) {\n        this.addClass('vjs-selected');\n        this.el_.setAttribute('aria-checked', 'true');\n        // aria-checked isn't fully supported by browsers/screen readers,\n        // so indicate selected state to screen reader in the control text.\n        this.controlText(', selected');\n        this.isSelected_ = true;\n      } else {\n        this.removeClass('vjs-selected');\n        this.el_.setAttribute('aria-checked', 'false');\n        // Indicate un-selected state to screen reader\n        this.controlText('');\n        this.isSelected_ = false;\n      }\n    }\n  };\n\n  return MenuItem;\n}(ClickableComponent);\n\nComponent.registerComponent('MenuItem', MenuItem);\n\n/**\n * @file text-track-menu-item.js\n */\n\n/**\n * The specific menu item type for selecting a language within a text track kind\n *\n * @extends MenuItem\n */\n\nvar TextTrackMenuItem = function (_MenuItem) {\n  inherits(TextTrackMenuItem, _MenuItem);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function TextTrackMenuItem(player, options) {\n    classCallCheck(this, TextTrackMenuItem);\n\n    var track = options.track;\n    var tracks = player.textTracks();\n\n    // Modify options for parent MenuItem class's init.\n    options.label = track.label || track.language || 'Unknown';\n    options.selected = track.mode === 'showing';\n\n    var _this = possibleConstructorReturn(this, _MenuItem.call(this, player, options));\n\n    _this.track = track;\n    var changeHandler = function changeHandler() {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this.handleTracksChange.apply(_this, args);\n    };\n    var selectedLanguageChangeHandler = function selectedLanguageChangeHandler() {\n      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      _this.handleSelectedLanguageChange.apply(_this, args);\n    };\n\n    player.on(['loadstart', 'texttrackchange'], changeHandler);\n    tracks.addEventListener('change', changeHandler);\n    tracks.addEventListener('selectedlanguagechange', selectedLanguageChangeHandler);\n    _this.on('dispose', function () {\n      player.off(['loadstart', 'texttrackchange'], changeHandler);\n      tracks.removeEventListener('change', changeHandler);\n      tracks.removeEventListener('selectedlanguagechange', selectedLanguageChangeHandler);\n    });\n\n    // iOS7 doesn't dispatch change events to TextTrackLists when an\n    // associated track's mode changes. Without something like\n    // Object.observe() (also not present on iOS7), it's not\n    // possible to detect changes to the mode attribute and polyfill\n    // the change event. As a poor substitute, we manually dispatch\n    // change events whenever the controls modify the mode.\n    if (tracks.onchange === undefined) {\n      var event = void 0;\n\n      _this.on(['tap', 'click'], function () {\n        if (_typeof(window$1.Event) !== 'object') {\n          // Android 2.3 throws an Illegal Constructor error for window.Event\n          try {\n            event = new window$1.Event('change');\n          } catch (err) {\n            // continue regardless of error\n          }\n        }\n\n        if (!event) {\n          event = document.createEvent('Event');\n          event.initEvent('change', true, true);\n        }\n\n        tracks.dispatchEvent(event);\n      });\n    }\n\n    // set the default state based on current tracks\n    _this.handleTracksChange();\n    return _this;\n  }\n\n  /**\n   * This gets called when an `TextTrackMenuItem` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} event\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n\n\n  TextTrackMenuItem.prototype.handleClick = function handleClick(event) {\n    var kind = this.track.kind;\n    var kinds = this.track.kinds;\n    var tracks = this.player_.textTracks();\n\n    if (!kinds) {\n      kinds = [kind];\n    }\n\n    _MenuItem.prototype.handleClick.call(this, event);\n\n    if (!tracks) {\n      return;\n    }\n\n    for (var i = 0; i < tracks.length; i++) {\n      var track = tracks[i];\n\n      if (track === this.track && kinds.indexOf(track.kind) > -1) {\n        if (track.mode !== 'showing') {\n          track.mode = 'showing';\n        }\n      } else if (track.mode !== 'disabled') {\n        track.mode = 'disabled';\n      }\n    }\n  };\n\n  /**\n   * Handle text track list change\n   *\n   * @param {EventTarget~Event} event\n   *        The `change` event that caused this function to be called.\n   *\n   * @listens TextTrackList#change\n   */\n\n\n  TextTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {\n    var shouldBeSelected = this.track.mode === 'showing';\n\n    // Prevent redundant selected() calls because they may cause\n    // screen readers to read the appended control text unnecessarily\n    if (shouldBeSelected !== this.isSelected_) {\n      this.selected(shouldBeSelected);\n    }\n  };\n\n  TextTrackMenuItem.prototype.handleSelectedLanguageChange = function handleSelectedLanguageChange(event) {\n    if (this.track.mode === 'showing') {\n      var selectedLanguage = this.player_.cache_.selectedLanguage;\n\n      // Don't replace the kind of track across the same language\n      if (selectedLanguage && selectedLanguage.enabled && selectedLanguage.language === this.track.language && selectedLanguage.kind !== this.track.kind) {\n        return;\n      }\n\n      this.player_.cache_.selectedLanguage = {\n        enabled: true,\n        language: this.track.language,\n        kind: this.track.kind\n      };\n    }\n  };\n\n  TextTrackMenuItem.prototype.dispose = function dispose() {\n    // remove reference to track object on dispose\n    this.track = null;\n\n    _MenuItem.prototype.dispose.call(this);\n  };\n\n  return TextTrackMenuItem;\n}(MenuItem);\n\nComponent.registerComponent('TextTrackMenuItem', TextTrackMenuItem);\n\n/**\n * @file off-text-track-menu-item.js\n */\n\n/**\n * A special menu item for turning of a specific type of text track\n *\n * @extends TextTrackMenuItem\n */\n\nvar OffTextTrackMenuItem = function (_TextTrackMenuItem) {\n  inherits(OffTextTrackMenuItem, _TextTrackMenuItem);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function OffTextTrackMenuItem(player, options) {\n    classCallCheck(this, OffTextTrackMenuItem);\n\n    // Create pseudo track info\n    // Requires options['kind']\n    options.track = {\n      player: player,\n      kind: options.kind,\n      kinds: options.kinds,\n      default: false,\n      mode: 'disabled'\n    };\n\n    if (!options.kinds) {\n      options.kinds = [options.kind];\n    }\n\n    if (options.label) {\n      options.track.label = options.label;\n    } else {\n      options.track.label = options.kinds.join(' and ') + ' off';\n    }\n\n    // MenuItem is selectable\n    options.selectable = true;\n    // MenuItem is NOT multiSelectable (i.e. only one can be marked \"selected\" at a time)\n    options.multiSelectable = false;\n\n    return possibleConstructorReturn(this, _TextTrackMenuItem.call(this, player, options));\n  }\n\n  /**\n   * Handle text track change\n   *\n   * @param {EventTarget~Event} event\n   *        The event that caused this function to run\n   */\n\n\n  OffTextTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {\n    var tracks = this.player().textTracks();\n    var shouldBeSelected = true;\n\n    for (var i = 0, l = tracks.length; i < l; i++) {\n      var track = tracks[i];\n\n      if (this.options_.kinds.indexOf(track.kind) > -1 && track.mode === 'showing') {\n        shouldBeSelected = false;\n        break;\n      }\n    }\n\n    // Prevent redundant selected() calls because they may cause\n    // screen readers to read the appended control text unnecessarily\n    if (shouldBeSelected !== this.isSelected_) {\n      this.selected(shouldBeSelected);\n    }\n  };\n\n  OffTextTrackMenuItem.prototype.handleSelectedLanguageChange = function handleSelectedLanguageChange(event) {\n    var tracks = this.player().textTracks();\n    var allHidden = true;\n\n    for (var i = 0, l = tracks.length; i < l; i++) {\n      var track = tracks[i];\n\n      if (['captions', 'descriptions', 'subtitles'].indexOf(track.kind) > -1 && track.mode === 'showing') {\n        allHidden = false;\n        break;\n      }\n    }\n\n    if (allHidden) {\n      this.player_.cache_.selectedLanguage = {\n        enabled: false\n      };\n    }\n  };\n\n  return OffTextTrackMenuItem;\n}(TextTrackMenuItem);\n\nComponent.registerComponent('OffTextTrackMenuItem', OffTextTrackMenuItem);\n\n/**\n * @file text-track-button.js\n */\n\n/**\n * The base class for buttons that toggle specific text track types (e.g. subtitles)\n *\n * @extends MenuButton\n */\n\nvar TextTrackButton = function (_TrackButton) {\n  inherits(TextTrackButton, _TrackButton);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   */\n  function TextTrackButton(player) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    classCallCheck(this, TextTrackButton);\n\n    options.tracks = player.textTracks();\n\n    return possibleConstructorReturn(this, _TrackButton.call(this, player, options));\n  }\n\n  /**\n   * Create a menu item for each text track\n   *\n   * @param {TextTrackMenuItem[]} [items=[]]\n   *        Existing array of items to use during creation\n   *\n   * @return {TextTrackMenuItem[]}\n   *         Array of menu items that were created\n   */\n\n\n  TextTrackButton.prototype.createItems = function createItems() {\n    var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var TrackMenuItem = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TextTrackMenuItem;\n\n\n    // Label is an override for the [track] off label\n    // USed to localise captions/subtitles\n    var label = void 0;\n\n    if (this.label_) {\n      label = this.label_ + ' off';\n    }\n    // Add an OFF menu item to turn all tracks off\n    items.push(new OffTextTrackMenuItem(this.player_, {\n      kinds: this.kinds_,\n      kind: this.kind_,\n      label: label\n    }));\n\n    this.hideThreshold_ += 1;\n\n    var tracks = this.player_.textTracks();\n\n    if (!Array.isArray(this.kinds_)) {\n      this.kinds_ = [this.kind_];\n    }\n\n    for (var i = 0; i < tracks.length; i++) {\n      var track = tracks[i];\n\n      // only add tracks that are of an appropriate kind and have a label\n      if (this.kinds_.indexOf(track.kind) > -1) {\n\n        var item = new TrackMenuItem(this.player_, {\n          track: track,\n          // MenuItem is selectable\n          selectable: true,\n          // MenuItem is NOT multiSelectable (i.e. only one can be marked \"selected\" at a time)\n          multiSelectable: false\n        });\n\n        item.addClass('vjs-' + track.kind + '-menu-item');\n        items.push(item);\n      }\n    }\n\n    return items;\n  };\n\n  return TextTrackButton;\n}(TrackButton);\n\nComponent.registerComponent('TextTrackButton', TextTrackButton);\n\n/**\n * @file chapters-track-menu-item.js\n */\n\n/**\n * The chapter track menu item\n *\n * @extends MenuItem\n */\n\nvar ChaptersTrackMenuItem = function (_MenuItem) {\n  inherits(ChaptersTrackMenuItem, _MenuItem);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function ChaptersTrackMenuItem(player, options) {\n    classCallCheck(this, ChaptersTrackMenuItem);\n\n    var track = options.track;\n    var cue = options.cue;\n    var currentTime = player.currentTime();\n\n    // Modify options for parent MenuItem class's init.\n    options.selectable = true;\n    options.multiSelectable = false;\n    options.label = cue.text;\n    options.selected = cue.startTime <= currentTime && currentTime < cue.endTime;\n\n    var _this = possibleConstructorReturn(this, _MenuItem.call(this, player, options));\n\n    _this.track = track;\n    _this.cue = cue;\n    track.addEventListener('cuechange', bind(_this, _this.update));\n    return _this;\n  }\n\n  /**\n   * This gets called when an `ChaptersTrackMenuItem` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n\n\n  ChaptersTrackMenuItem.prototype.handleClick = function handleClick(event) {\n    _MenuItem.prototype.handleClick.call(this);\n    this.player_.currentTime(this.cue.startTime);\n    this.update(this.cue.startTime);\n  };\n\n  /**\n   * Update chapter menu item\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `cuechange` event that caused this function to run.\n   *\n   * @listens TextTrack#cuechange\n   */\n\n\n  ChaptersTrackMenuItem.prototype.update = function update(event) {\n    var cue = this.cue;\n    var currentTime = this.player_.currentTime();\n\n    // vjs.log(currentTime, cue.startTime);\n    this.selected(cue.startTime <= currentTime && currentTime < cue.endTime);\n  };\n\n  return ChaptersTrackMenuItem;\n}(MenuItem);\n\nComponent.registerComponent('ChaptersTrackMenuItem', ChaptersTrackMenuItem);\n\n/**\n * @file chapters-button.js\n */\n\n/**\n * The button component for toggling and selecting chapters\n * Chapters act much differently than other text tracks\n * Cues are navigation vs. other tracks of alternative languages\n *\n * @extends TextTrackButton\n */\n\nvar ChaptersButton = function (_TextTrackButton) {\n  inherits(ChaptersButton, _TextTrackButton);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        The function to call when this function is ready.\n   */\n  function ChaptersButton(player, options, ready) {\n    classCallCheck(this, ChaptersButton);\n    return possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  ChaptersButton.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-chapters-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);\n  };\n\n  ChaptersButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {\n    return 'vjs-chapters-button ' + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);\n  };\n\n  /**\n   * Update the menu based on the current state of its items.\n   *\n   * @param {EventTarget~Event} [event]\n   *        An event that triggered this function to run.\n   *\n   * @listens TextTrackList#addtrack\n   * @listens TextTrackList#removetrack\n   * @listens TextTrackList#change\n   */\n\n\n  ChaptersButton.prototype.update = function update(event) {\n    if (!this.track_ || event && (event.type === 'addtrack' || event.type === 'removetrack')) {\n      this.setTrack(this.findChaptersTrack());\n    }\n    _TextTrackButton.prototype.update.call(this);\n  };\n\n  /**\n   * Set the currently selected track for the chapters button.\n   *\n   * @param {TextTrack} track\n   *        The new track to select. Nothing will change if this is the currently selected\n   *        track.\n   */\n\n\n  ChaptersButton.prototype.setTrack = function setTrack(track) {\n    if (this.track_ === track) {\n      return;\n    }\n\n    if (!this.updateHandler_) {\n      this.updateHandler_ = this.update.bind(this);\n    }\n\n    // here this.track_ refers to the old track instance\n    if (this.track_) {\n      var remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);\n\n      if (remoteTextTrackEl) {\n        remoteTextTrackEl.removeEventListener('load', this.updateHandler_);\n      }\n\n      this.track_ = null;\n    }\n\n    this.track_ = track;\n\n    // here this.track_ refers to the new track instance\n    if (this.track_) {\n      this.track_.mode = 'hidden';\n\n      var _remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);\n\n      if (_remoteTextTrackEl) {\n        _remoteTextTrackEl.addEventListener('load', this.updateHandler_);\n      }\n    }\n  };\n\n  /**\n   * Find the track object that is currently in use by this ChaptersButton\n   *\n   * @return {TextTrack|undefined}\n   *         The current track or undefined if none was found.\n   */\n\n\n  ChaptersButton.prototype.findChaptersTrack = function findChaptersTrack() {\n    var tracks = this.player_.textTracks() || [];\n\n    for (var i = tracks.length - 1; i >= 0; i--) {\n      // We will always choose the last track as our chaptersTrack\n      var track = tracks[i];\n\n      if (track.kind === this.kind_) {\n        return track;\n      }\n    }\n  };\n\n  /**\n   * Get the caption for the ChaptersButton based on the track label. This will also\n   * use the current tracks localized kind as a fallback if a label does not exist.\n   *\n   * @return {string}\n   *         The tracks current label or the localized track kind.\n   */\n\n\n  ChaptersButton.prototype.getMenuCaption = function getMenuCaption() {\n    if (this.track_ && this.track_.label) {\n      return this.track_.label;\n    }\n    return this.localize(toTitleCase(this.kind_));\n  };\n\n  /**\n   * Create menu from chapter track\n   *\n   * @return {Menu}\n   *         New menu for the chapter buttons\n   */\n\n\n  ChaptersButton.prototype.createMenu = function createMenu() {\n    this.options_.title = this.getMenuCaption();\n    return _TextTrackButton.prototype.createMenu.call(this);\n  };\n\n  /**\n   * Create a menu item for each text track\n   *\n   * @return {TextTrackMenuItem[]}\n   *         Array of menu items\n   */\n\n\n  ChaptersButton.prototype.createItems = function createItems() {\n    var items = [];\n\n    if (!this.track_) {\n      return items;\n    }\n\n    var cues = this.track_.cues;\n\n    if (!cues) {\n      return items;\n    }\n\n    for (var i = 0, l = cues.length; i < l; i++) {\n      var cue = cues[i];\n      var mi = new ChaptersTrackMenuItem(this.player_, { track: this.track_, cue: cue });\n\n      items.push(mi);\n    }\n\n    return items;\n  };\n\n  return ChaptersButton;\n}(TextTrackButton);\n\n/**\n * `kind` of TextTrack to look for to associate it with this menu.\n *\n * @type {string}\n * @private\n */\n\n\nChaptersButton.prototype.kind_ = 'chapters';\n\n/**\n * The text that should display over the `ChaptersButton`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\nChaptersButton.prototype.controlText_ = 'Chapters';\n\nComponent.registerComponent('ChaptersButton', ChaptersButton);\n\n/**\n * @file descriptions-button.js\n */\n\n/**\n * The button component for toggling and selecting descriptions\n *\n * @extends TextTrackButton\n */\n\nvar DescriptionsButton = function (_TextTrackButton) {\n  inherits(DescriptionsButton, _TextTrackButton);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        The function to call when this component is ready.\n   */\n  function DescriptionsButton(player, options, ready) {\n    classCallCheck(this, DescriptionsButton);\n\n    var _this = possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));\n\n    var tracks = player.textTracks();\n    var changeHandler = bind(_this, _this.handleTracksChange);\n\n    tracks.addEventListener('change', changeHandler);\n    _this.on('dispose', function () {\n      tracks.removeEventListener('change', changeHandler);\n    });\n    return _this;\n  }\n\n  /**\n   * Handle text track change\n   *\n   * @param {EventTarget~Event} event\n   *        The event that caused this function to run\n   *\n   * @listens TextTrackList#change\n   */\n\n\n  DescriptionsButton.prototype.handleTracksChange = function handleTracksChange(event) {\n    var tracks = this.player().textTracks();\n    var disabled = false;\n\n    // Check whether a track of a different kind is showing\n    for (var i = 0, l = tracks.length; i < l; i++) {\n      var track = tracks[i];\n\n      if (track.kind !== this.kind_ && track.mode === 'showing') {\n        disabled = true;\n        break;\n      }\n    }\n\n    // If another track is showing, disable this menu button\n    if (disabled) {\n      this.disable();\n    } else {\n      this.enable();\n    }\n  };\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  DescriptionsButton.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-descriptions-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);\n  };\n\n  DescriptionsButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {\n    return 'vjs-descriptions-button ' + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);\n  };\n\n  return DescriptionsButton;\n}(TextTrackButton);\n\n/**\n * `kind` of TextTrack to look for to associate it with this menu.\n *\n * @type {string}\n * @private\n */\n\n\nDescriptionsButton.prototype.kind_ = 'descriptions';\n\n/**\n * The text that should display over the `DescriptionsButton`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\nDescriptionsButton.prototype.controlText_ = 'Descriptions';\n\nComponent.registerComponent('DescriptionsButton', DescriptionsButton);\n\n/**\n * @file subtitles-button.js\n */\n\n/**\n * The button component for toggling and selecting subtitles\n *\n * @extends TextTrackButton\n */\n\nvar SubtitlesButton = function (_TextTrackButton) {\n  inherits(SubtitlesButton, _TextTrackButton);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        The function to call when this component is ready.\n   */\n  function SubtitlesButton(player, options, ready) {\n    classCallCheck(this, SubtitlesButton);\n    return possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  SubtitlesButton.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-subtitles-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);\n  };\n\n  SubtitlesButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {\n    return 'vjs-subtitles-button ' + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);\n  };\n\n  return SubtitlesButton;\n}(TextTrackButton);\n\n/**\n * `kind` of TextTrack to look for to associate it with this menu.\n *\n * @type {string}\n * @private\n */\n\n\nSubtitlesButton.prototype.kind_ = 'subtitles';\n\n/**\n * The text that should display over the `SubtitlesButton`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\nSubtitlesButton.prototype.controlText_ = 'Subtitles';\n\nComponent.registerComponent('SubtitlesButton', SubtitlesButton);\n\n/**\n * @file caption-settings-menu-item.js\n */\n\n/**\n * The menu item for caption track settings menu\n *\n * @extends TextTrackMenuItem\n */\n\nvar CaptionSettingsMenuItem = function (_TextTrackMenuItem) {\n  inherits(CaptionSettingsMenuItem, _TextTrackMenuItem);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function CaptionSettingsMenuItem(player, options) {\n    classCallCheck(this, CaptionSettingsMenuItem);\n\n    options.track = {\n      player: player,\n      kind: options.kind,\n      label: options.kind + ' settings',\n      selectable: false,\n      default: false,\n      mode: 'disabled'\n    };\n\n    // CaptionSettingsMenuItem has no concept of 'selected'\n    options.selectable = false;\n\n    options.name = 'CaptionSettingsMenuItem';\n\n    var _this = possibleConstructorReturn(this, _TextTrackMenuItem.call(this, player, options));\n\n    _this.addClass('vjs-texttrack-settings');\n    _this.controlText(', opens ' + options.kind + ' settings dialog');\n    return _this;\n  }\n\n  /**\n   * This gets called when an `CaptionSettingsMenuItem` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n\n\n  CaptionSettingsMenuItem.prototype.handleClick = function handleClick(event) {\n    this.player().getChild('textTrackSettings').open();\n  };\n\n  return CaptionSettingsMenuItem;\n}(TextTrackMenuItem);\n\nComponent.registerComponent('CaptionSettingsMenuItem', CaptionSettingsMenuItem);\n\n/**\n * @file captions-button.js\n */\n\n/**\n * The button component for toggling and selecting captions\n *\n * @extends TextTrackButton\n */\n\nvar CaptionsButton = function (_TextTrackButton) {\n  inherits(CaptionsButton, _TextTrackButton);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        The function to call when this component is ready.\n   */\n  function CaptionsButton(player, options, ready) {\n    classCallCheck(this, CaptionsButton);\n    return possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  CaptionsButton.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-captions-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);\n  };\n\n  CaptionsButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {\n    return 'vjs-captions-button ' + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);\n  };\n\n  /**\n   * Create caption menu items\n   *\n   * @return {CaptionSettingsMenuItem[]}\n   *         The array of current menu items.\n   */\n\n\n  CaptionsButton.prototype.createItems = function createItems() {\n    var items = [];\n\n    if (!(this.player().tech_ && this.player().tech_.featuresNativeTextTracks) && this.player().getChild('textTrackSettings')) {\n      items.push(new CaptionSettingsMenuItem(this.player_, { kind: this.kind_ }));\n\n      this.hideThreshold_ += 1;\n    }\n\n    return _TextTrackButton.prototype.createItems.call(this, items);\n  };\n\n  return CaptionsButton;\n}(TextTrackButton);\n\n/**\n * `kind` of TextTrack to look for to associate it with this menu.\n *\n * @type {string}\n * @private\n */\n\n\nCaptionsButton.prototype.kind_ = 'captions';\n\n/**\n * The text that should display over the `CaptionsButton`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\nCaptionsButton.prototype.controlText_ = 'Captions';\n\nComponent.registerComponent('CaptionsButton', CaptionsButton);\n\n/**\n * @file subs-caps-menu-item.js\n */\n\n/**\n * SubsCapsMenuItem has an [cc] icon to distinguish captions from subtitles\n * in the SubsCapsMenu.\n *\n * @extends TextTrackMenuItem\n */\n\nvar SubsCapsMenuItem = function (_TextTrackMenuItem) {\n  inherits(SubsCapsMenuItem, _TextTrackMenuItem);\n\n  function SubsCapsMenuItem() {\n    classCallCheck(this, SubsCapsMenuItem);\n    return possibleConstructorReturn(this, _TextTrackMenuItem.apply(this, arguments));\n  }\n\n  SubsCapsMenuItem.prototype.createEl = function createEl(type, props, attrs) {\n    var innerHTML = '<span class=\"vjs-menu-item-text\">' + this.localize(this.options_.label);\n\n    if (this.options_.track.kind === 'captions') {\n      innerHTML += '\\n        <span aria-hidden=\"true\" class=\"vjs-icon-placeholder\"></span>\\n        <span class=\"vjs-control-text\"> ' + this.localize('Captions') + '</span>\\n      ';\n    }\n\n    innerHTML += '</span>';\n\n    var el = _TextTrackMenuItem.prototype.createEl.call(this, type, assign({\n      innerHTML: innerHTML\n    }, props), attrs);\n\n    return el;\n  };\n\n  return SubsCapsMenuItem;\n}(TextTrackMenuItem);\n\nComponent.registerComponent('SubsCapsMenuItem', SubsCapsMenuItem);\n\n/**\n * @file sub-caps-button.js\n */\n/**\n * The button component for toggling and selecting captions and/or subtitles\n *\n * @extends TextTrackButton\n */\n\nvar SubsCapsButton = function (_TextTrackButton) {\n  inherits(SubsCapsButton, _TextTrackButton);\n\n  function SubsCapsButton(player) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    classCallCheck(this, SubsCapsButton);\n\n    // Although North America uses \"captions\" in most cases for\n    // \"captions and subtitles\" other locales use \"subtitles\"\n    var _this = possibleConstructorReturn(this, _TextTrackButton.call(this, player, options));\n\n    _this.label_ = 'subtitles';\n    if (['en', 'en-us', 'en-ca', 'fr-ca'].indexOf(_this.player_.language_) > -1) {\n      _this.label_ = 'captions';\n    }\n    _this.menuButton_.controlText(toTitleCase(_this.label_));\n    return _this;\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  SubsCapsButton.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-subs-caps-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);\n  };\n\n  SubsCapsButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {\n    return 'vjs-subs-caps-button ' + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);\n  };\n\n  /**\n   * Create caption/subtitles menu items\n   *\n   * @return {CaptionSettingsMenuItem[]}\n   *         The array of current menu items.\n   */\n\n\n  SubsCapsButton.prototype.createItems = function createItems() {\n    var items = [];\n\n    if (!(this.player().tech_ && this.player().tech_.featuresNativeTextTracks) && this.player().getChild('textTrackSettings')) {\n      items.push(new CaptionSettingsMenuItem(this.player_, { kind: this.label_ }));\n\n      this.hideThreshold_ += 1;\n    }\n\n    items = _TextTrackButton.prototype.createItems.call(this, items, SubsCapsMenuItem);\n    return items;\n  };\n\n  return SubsCapsButton;\n}(TextTrackButton);\n\n/**\n * `kind`s of TextTrack to look for to associate it with this menu.\n *\n * @type {array}\n * @private\n */\n\n\nSubsCapsButton.prototype.kinds_ = ['captions', 'subtitles'];\n\n/**\n * The text that should display over the `SubsCapsButton`s controls.\n *\n *\n * @type {string}\n * @private\n */\nSubsCapsButton.prototype.controlText_ = 'Subtitles';\n\nComponent.registerComponent('SubsCapsButton', SubsCapsButton);\n\n/**\n * @file audio-track-menu-item.js\n */\n\n/**\n * An {@link AudioTrack} {@link MenuItem}\n *\n * @extends MenuItem\n */\n\nvar AudioTrackMenuItem = function (_MenuItem) {\n  inherits(AudioTrackMenuItem, _MenuItem);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function AudioTrackMenuItem(player, options) {\n    classCallCheck(this, AudioTrackMenuItem);\n\n    var track = options.track;\n    var tracks = player.audioTracks();\n\n    // Modify options for parent MenuItem class's init.\n    options.label = track.label || track.language || 'Unknown';\n    options.selected = track.enabled;\n\n    var _this = possibleConstructorReturn(this, _MenuItem.call(this, player, options));\n\n    _this.track = track;\n\n    _this.addClass('vjs-' + track.kind + '-menu-item');\n\n    var changeHandler = function changeHandler() {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this.handleTracksChange.apply(_this, args);\n    };\n\n    tracks.addEventListener('change', changeHandler);\n    _this.on('dispose', function () {\n      tracks.removeEventListener('change', changeHandler);\n    });\n    return _this;\n  }\n\n  AudioTrackMenuItem.prototype.createEl = function createEl(type, props, attrs) {\n    var innerHTML = '<span class=\"vjs-menu-item-text\">' + this.localize(this.options_.label);\n\n    if (this.options_.track.kind === 'main-desc') {\n      innerHTML += '\\n        <span aria-hidden=\"true\" class=\"vjs-icon-placeholder\"></span>\\n        <span class=\"vjs-control-text\"> ' + this.localize('Descriptions') + '</span>\\n      ';\n    }\n\n    innerHTML += '</span>';\n\n    var el = _MenuItem.prototype.createEl.call(this, type, assign({\n      innerHTML: innerHTML\n    }, props), attrs);\n\n    return el;\n  };\n\n  /**\n   * This gets called when an `AudioTrackMenuItem is \"clicked\". See {@link ClickableComponent}\n   * for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n\n\n  AudioTrackMenuItem.prototype.handleClick = function handleClick(event) {\n    var tracks = this.player_.audioTracks();\n\n    _MenuItem.prototype.handleClick.call(this, event);\n\n    for (var i = 0; i < tracks.length; i++) {\n      var track = tracks[i];\n\n      track.enabled = track === this.track;\n    }\n  };\n\n  /**\n   * Handle any {@link AudioTrack} change.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The {@link AudioTrackList#change} event that caused this to run.\n   *\n   * @listens AudioTrackList#change\n   */\n\n\n  AudioTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {\n    this.selected(this.track.enabled);\n  };\n\n  return AudioTrackMenuItem;\n}(MenuItem);\n\nComponent.registerComponent('AudioTrackMenuItem', AudioTrackMenuItem);\n\n/**\n * @file audio-track-button.js\n */\n\n/**\n * The base class for buttons that toggle specific {@link AudioTrack} types.\n *\n * @extends TrackButton\n */\n\nvar AudioTrackButton = function (_TrackButton) {\n  inherits(AudioTrackButton, _TrackButton);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   */\n  function AudioTrackButton(player) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    classCallCheck(this, AudioTrackButton);\n\n    options.tracks = player.audioTracks();\n\n    return possibleConstructorReturn(this, _TrackButton.call(this, player, options));\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  AudioTrackButton.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-audio-button ' + _TrackButton.prototype.buildCSSClass.call(this);\n  };\n\n  AudioTrackButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {\n    return 'vjs-audio-button ' + _TrackButton.prototype.buildWrapperCSSClass.call(this);\n  };\n\n  /**\n   * Create a menu item for each audio track\n   *\n   * @param {AudioTrackMenuItem[]} [items=[]]\n   *        An array of existing menu items to use.\n   *\n   * @return {AudioTrackMenuItem[]}\n   *         An array of menu items\n   */\n\n\n  AudioTrackButton.prototype.createItems = function createItems() {\n    var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n    // if there's only one audio track, there no point in showing it\n    this.hideThreshold_ = 1;\n\n    var tracks = this.player_.audioTracks();\n\n    for (var i = 0; i < tracks.length; i++) {\n      var track = tracks[i];\n\n      items.push(new AudioTrackMenuItem(this.player_, {\n        track: track,\n        // MenuItem is selectable\n        selectable: true,\n        // MenuItem is NOT multiSelectable (i.e. only one can be marked \"selected\" at a time)\n        multiSelectable: false\n      }));\n    }\n\n    return items;\n  };\n\n  return AudioTrackButton;\n}(TrackButton);\n\n/**\n * The text that should display over the `AudioTrackButton`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\n\n\nAudioTrackButton.prototype.controlText_ = 'Audio Track';\nComponent.registerComponent('AudioTrackButton', AudioTrackButton);\n\n/**\n * @file playback-rate-menu-item.js\n */\n\n/**\n * The specific menu item type for selecting a playback rate.\n *\n * @extends MenuItem\n */\n\nvar PlaybackRateMenuItem = function (_MenuItem) {\n  inherits(PlaybackRateMenuItem, _MenuItem);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function PlaybackRateMenuItem(player, options) {\n    classCallCheck(this, PlaybackRateMenuItem);\n\n    var label = options.rate;\n    var rate = parseFloat(label, 10);\n\n    // Modify options for parent MenuItem class's init.\n    options.label = label;\n    options.selected = rate === 1;\n    options.selectable = true;\n    options.multiSelectable = false;\n\n    var _this = possibleConstructorReturn(this, _MenuItem.call(this, player, options));\n\n    _this.label = label;\n    _this.rate = rate;\n\n    _this.on(player, 'ratechange', _this.update);\n    return _this;\n  }\n\n  /**\n   * This gets called when an `PlaybackRateMenuItem` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n\n\n  PlaybackRateMenuItem.prototype.handleClick = function handleClick(event) {\n    _MenuItem.prototype.handleClick.call(this);\n    this.player().playbackRate(this.rate);\n  };\n\n  /**\n   * Update the PlaybackRateMenuItem when the playbackrate changes.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `ratechange` event that caused this function to run.\n   *\n   * @listens Player#ratechange\n   */\n\n\n  PlaybackRateMenuItem.prototype.update = function update(event) {\n    this.selected(this.player().playbackRate() === this.rate);\n  };\n\n  return PlaybackRateMenuItem;\n}(MenuItem);\n\n/**\n * The text that should display over the `PlaybackRateMenuItem`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\n\n\nPlaybackRateMenuItem.prototype.contentElType = 'button';\n\nComponent.registerComponent('PlaybackRateMenuItem', PlaybackRateMenuItem);\n\n/**\n * @file playback-rate-menu-button.js\n */\n\n/**\n * The component for controlling the playback rate.\n *\n * @extends MenuButton\n */\n\nvar PlaybackRateMenuButton = function (_MenuButton) {\n  inherits(PlaybackRateMenuButton, _MenuButton);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  function PlaybackRateMenuButton(player, options) {\n    classCallCheck(this, PlaybackRateMenuButton);\n\n    var _this = possibleConstructorReturn(this, _MenuButton.call(this, player, options));\n\n    _this.updateVisibility();\n    _this.updateLabel();\n\n    _this.on(player, 'loadstart', _this.updateVisibility);\n    _this.on(player, 'ratechange', _this.updateLabel);\n    return _this;\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  PlaybackRateMenuButton.prototype.createEl = function createEl$$1() {\n    var el = _MenuButton.prototype.createEl.call(this);\n\n    this.labelEl_ = createEl('div', {\n      className: 'vjs-playback-rate-value',\n      innerHTML: '1x'\n    });\n\n    el.appendChild(this.labelEl_);\n\n    return el;\n  };\n\n  PlaybackRateMenuButton.prototype.dispose = function dispose() {\n    this.labelEl_ = null;\n\n    _MenuButton.prototype.dispose.call(this);\n  };\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n\n\n  PlaybackRateMenuButton.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-playback-rate ' + _MenuButton.prototype.buildCSSClass.call(this);\n  };\n\n  PlaybackRateMenuButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {\n    return 'vjs-playback-rate ' + _MenuButton.prototype.buildWrapperCSSClass.call(this);\n  };\n\n  /**\n   * Create the playback rate menu\n   *\n   * @return {Menu}\n   *         Menu object populated with {@link PlaybackRateMenuItem}s\n   */\n\n\n  PlaybackRateMenuButton.prototype.createMenu = function createMenu() {\n    var menu = new Menu(this.player());\n    var rates = this.playbackRates();\n\n    if (rates) {\n      for (var i = rates.length - 1; i >= 0; i--) {\n        menu.addChild(new PlaybackRateMenuItem(this.player(), { rate: rates[i] + 'x' }));\n      }\n    }\n\n    return menu;\n  };\n\n  /**\n   * Updates ARIA accessibility attributes\n   */\n\n\n  PlaybackRateMenuButton.prototype.updateARIAAttributes = function updateARIAAttributes() {\n    // Current playback rate\n    this.el().setAttribute('aria-valuenow', this.player().playbackRate());\n  };\n\n  /**\n   * This gets called when an `PlaybackRateMenuButton` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {EventTarget~Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n\n\n  PlaybackRateMenuButton.prototype.handleClick = function handleClick(event) {\n    // select next rate option\n    var currentRate = this.player().playbackRate();\n    var rates = this.playbackRates();\n\n    // this will select first one if the last one currently selected\n    var newRate = rates[0];\n\n    for (var i = 0; i < rates.length; i++) {\n      if (rates[i] > currentRate) {\n        newRate = rates[i];\n        break;\n      }\n    }\n    this.player().playbackRate(newRate);\n  };\n\n  /**\n   * Get possible playback rates\n   *\n   * @return {Array}\n   *         All possible playback rates\n   */\n\n\n  PlaybackRateMenuButton.prototype.playbackRates = function playbackRates() {\n    return this.options_.playbackRates || this.options_.playerOptions && this.options_.playerOptions.playbackRates;\n  };\n\n  /**\n   * Get whether playback rates is supported by the tech\n   * and an array of playback rates exists\n   *\n   * @return {boolean}\n   *         Whether changing playback rate is supported\n   */\n\n\n  PlaybackRateMenuButton.prototype.playbackRateSupported = function playbackRateSupported() {\n    return this.player().tech_ && this.player().tech_.featuresPlaybackRate && this.playbackRates() && this.playbackRates().length > 0;\n  };\n\n  /**\n   * Hide playback rate controls when they're no playback rate options to select\n   *\n   * @param {EventTarget~Event} [event]\n   *        The event that caused this function to run.\n   *\n   * @listens Player#loadstart\n   */\n\n\n  PlaybackRateMenuButton.prototype.updateVisibility = function updateVisibility(event) {\n    if (this.playbackRateSupported()) {\n      this.removeClass('vjs-hidden');\n    } else {\n      this.addClass('vjs-hidden');\n    }\n  };\n\n  /**\n   * Update button label when rate changed\n   *\n   * @param {EventTarget~Event} [event]\n   *        The event that caused this function to run.\n   *\n   * @listens Player#ratechange\n   */\n\n\n  PlaybackRateMenuButton.prototype.updateLabel = function updateLabel(event) {\n    if (this.playbackRateSupported()) {\n      this.labelEl_.innerHTML = this.player().playbackRate() + 'x';\n    }\n  };\n\n  return PlaybackRateMenuButton;\n}(MenuButton);\n\n/**\n * The text that should display over the `FullscreenToggle`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\n\n\nPlaybackRateMenuButton.prototype.controlText_ = 'Playback Rate';\n\nComponent.registerComponent('PlaybackRateMenuButton', PlaybackRateMenuButton);\n\n/**\n * @file spacer.js\n */\n\n/**\n * Just an empty spacer element that can be used as an append point for plugins, etc.\n * Also can be used to create space between elements when necessary.\n *\n * @extends Component\n */\n\nvar Spacer = function (_Component) {\n  inherits(Spacer, _Component);\n\n  function Spacer() {\n    classCallCheck(this, Spacer);\n    return possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  Spacer.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-spacer ' + _Component.prototype.buildCSSClass.call(this);\n  };\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  Spacer.prototype.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: this.buildCSSClass()\n    });\n  };\n\n  return Spacer;\n}(Component);\n\nComponent.registerComponent('Spacer', Spacer);\n\n/**\n * @file custom-control-spacer.js\n */\n\n/**\n * Spacer specifically meant to be used as an insertion point for new plugins, etc.\n *\n * @extends Spacer\n */\n\nvar CustomControlSpacer = function (_Spacer) {\n  inherits(CustomControlSpacer, _Spacer);\n\n  function CustomControlSpacer() {\n    classCallCheck(this, CustomControlSpacer);\n    return possibleConstructorReturn(this, _Spacer.apply(this, arguments));\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  CustomControlSpacer.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-custom-control-spacer ' + _Spacer.prototype.buildCSSClass.call(this);\n  };\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n\n\n  CustomControlSpacer.prototype.createEl = function createEl() {\n    var el = _Spacer.prototype.createEl.call(this, {\n      className: this.buildCSSClass()\n    });\n\n    // No-flex/table-cell mode requires there be some content\n    // in the cell to fill the remaining space of the table.\n    el.innerHTML = '\\xA0';\n    return el;\n  };\n\n  return CustomControlSpacer;\n}(Spacer);\n\nComponent.registerComponent('CustomControlSpacer', CustomControlSpacer);\n\n/**\n * @file control-bar.js\n */\n\n/**\n * Container of main controls.\n *\n * @extends Component\n */\n\nvar ControlBar = function (_Component) {\n  inherits(ControlBar, _Component);\n\n  function ControlBar() {\n    classCallCheck(this, ControlBar);\n    return possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  ControlBar.prototype.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'div', {\n      className: 'vjs-control-bar',\n      dir: 'ltr'\n    });\n  };\n\n  return ControlBar;\n}(Component);\n\n/**\n * Default options for `ControlBar`\n *\n * @type {Object}\n * @private\n */\n\n\nControlBar.prototype.options_ = {\n  children: ['playToggle', 'volumePanel', 'currentTimeDisplay', 'timeDivider', 'durationDisplay', 'progressControl', 'liveDisplay', 'remainingTimeDisplay', 'customControlSpacer', 'playbackRateMenuButton', 'chaptersButton', 'descriptionsButton', 'subsCapsButton', 'audioTrackButton', 'fullscreenToggle']\n};\n\nComponent.registerComponent('ControlBar', ControlBar);\n\n/**\n * @file error-display.js\n */\n\n/**\n * A display that indicates an error has occurred. This means that the video\n * is unplayable.\n *\n * @extends ModalDialog\n */\n\nvar ErrorDisplay = function (_ModalDialog) {\n  inherits(ErrorDisplay, _ModalDialog);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param  {Player} player\n   *         The `Player` that this class should be attached to.\n   *\n   * @param  {Object} [options]\n   *         The key/value store of player options.\n   */\n  function ErrorDisplay(player, options) {\n    classCallCheck(this, ErrorDisplay);\n\n    var _this = possibleConstructorReturn(this, _ModalDialog.call(this, player, options));\n\n    _this.on(player, 'error', _this.open);\n    return _this;\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   *\n   * @deprecated Since version 5.\n   */\n\n\n  ErrorDisplay.prototype.buildCSSClass = function buildCSSClass() {\n    return 'vjs-error-display ' + _ModalDialog.prototype.buildCSSClass.call(this);\n  };\n\n  /**\n   * Gets the localized error message based on the `Player`s error.\n   *\n   * @return {string}\n   *         The `Player`s error message localized or an empty string.\n   */\n\n\n  ErrorDisplay.prototype.content = function content() {\n    var error = this.player().error();\n\n    return error ? this.localize(error.message) : '';\n  };\n\n  return ErrorDisplay;\n}(ModalDialog);\n\n/**\n * The default options for an `ErrorDisplay`.\n *\n * @private\n */\n\n\nErrorDisplay.prototype.options_ = mergeOptions(ModalDialog.prototype.options_, {\n  pauseOnOpen: false,\n  fillAlways: true,\n  temporary: false,\n  uncloseable: true\n});\n\nComponent.registerComponent('ErrorDisplay', ErrorDisplay);\n\n/**\n * @file text-track-settings.js\n */\n\nvar LOCAL_STORAGE_KEY = 'vjs-text-track-settings';\n\nvar COLOR_BLACK = ['#000', 'Black'];\nvar COLOR_BLUE = ['#00F', 'Blue'];\nvar COLOR_CYAN = ['#0FF', 'Cyan'];\nvar COLOR_GREEN = ['#0F0', 'Green'];\nvar COLOR_MAGENTA = ['#F0F', 'Magenta'];\nvar COLOR_RED = ['#F00', 'Red'];\nvar COLOR_WHITE = ['#FFF', 'White'];\nvar COLOR_YELLOW = ['#FF0', 'Yellow'];\n\nvar OPACITY_OPAQUE = ['1', 'Opaque'];\nvar OPACITY_SEMI = ['0.5', 'Semi-Transparent'];\nvar OPACITY_TRANS = ['0', 'Transparent'];\n\n// Configuration for the various <select> elements in the DOM of this component.\n//\n// Possible keys include:\n//\n// `default`:\n//   The default option index. Only needs to be provided if not zero.\n// `parser`:\n//   A function which is used to parse the value from the selected option in\n//   a customized way.\n// `selector`:\n//   The selector used to find the associated <select> element.\nvar selectConfigs = {\n  backgroundColor: {\n    selector: '.vjs-bg-color > select',\n    id: 'captions-background-color-%s',\n    label: 'Color',\n    options: [COLOR_BLACK, COLOR_WHITE, COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW, COLOR_MAGENTA, COLOR_CYAN]\n  },\n\n  backgroundOpacity: {\n    selector: '.vjs-bg-opacity > select',\n    id: 'captions-background-opacity-%s',\n    label: 'Transparency',\n    options: [OPACITY_OPAQUE, OPACITY_SEMI, OPACITY_TRANS]\n  },\n\n  color: {\n    selector: '.vjs-fg-color > select',\n    id: 'captions-foreground-color-%s',\n    label: 'Color',\n    options: [COLOR_WHITE, COLOR_BLACK, COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW, COLOR_MAGENTA, COLOR_CYAN]\n  },\n\n  edgeStyle: {\n    selector: '.vjs-edge-style > select',\n    id: '%s',\n    label: 'Text Edge Style',\n    options: [['none', 'None'], ['raised', 'Raised'], ['depressed', 'Depressed'], ['uniform', 'Uniform'], ['dropshadow', 'Dropshadow']]\n  },\n\n  fontFamily: {\n    selector: '.vjs-font-family > select',\n    id: 'captions-font-family-%s',\n    label: 'Font Family',\n    options: [['proportionalSansSerif', 'Proportional Sans-Serif'], ['monospaceSansSerif', 'Monospace Sans-Serif'], ['proportionalSerif', 'Proportional Serif'], ['monospaceSerif', 'Monospace Serif'], ['casual', 'Casual'], ['script', 'Script'], ['small-caps', 'Small Caps']]\n  },\n\n  fontPercent: {\n    selector: '.vjs-font-percent > select',\n    id: 'captions-font-size-%s',\n    label: 'Font Size',\n    options: [['0.50', '50%'], ['0.75', '75%'], ['1.00', '100%'], ['1.25', '125%'], ['1.50', '150%'], ['1.75', '175%'], ['2.00', '200%'], ['3.00', '300%'], ['4.00', '400%']],\n    default: 2,\n    parser: function parser(v) {\n      return v === '1.00' ? null : Number(v);\n    }\n  },\n\n  textOpacity: {\n    selector: '.vjs-text-opacity > select',\n    id: 'captions-foreground-opacity-%s',\n    label: 'Transparency',\n    options: [OPACITY_OPAQUE, OPACITY_SEMI]\n  },\n\n  // Options for this object are defined below.\n  windowColor: {\n    selector: '.vjs-window-color > select',\n    id: 'captions-window-color-%s',\n    label: 'Color'\n  },\n\n  // Options for this object are defined below.\n  windowOpacity: {\n    selector: '.vjs-window-opacity > select',\n    id: 'captions-window-opacity-%s',\n    label: 'Transparency',\n    options: [OPACITY_TRANS, OPACITY_SEMI, OPACITY_OPAQUE]\n  }\n};\n\nselectConfigs.windowColor.options = selectConfigs.backgroundColor.options;\n\n/**\n * Get the actual value of an option.\n *\n * @param  {string} value\n *         The value to get\n *\n * @param  {Function} [parser]\n *         Optional function to adjust the value.\n *\n * @return {Mixed}\n *         - Will be `undefined` if no value exists\n *         - Will be `undefined` if the given value is \"none\".\n *         - Will be the actual value otherwise.\n *\n * @private\n */\nfunction parseOptionValue(value, parser) {\n  if (parser) {\n    value = parser(value);\n  }\n\n  if (value && value !== 'none') {\n    return value;\n  }\n}\n\n/**\n * Gets the value of the selected <option> element within a <select> element.\n *\n * @param  {Element} el\n *         the element to look in\n *\n * @param  {Function} [parser]\n *         Optional function to adjust the value.\n *\n * @return {Mixed}\n *         - Will be `undefined` if no value exists\n *         - Will be `undefined` if the given value is \"none\".\n *         - Will be the actual value otherwise.\n *\n * @private\n */\nfunction getSelectedOptionValue(el, parser) {\n  var value = el.options[el.options.selectedIndex].value;\n\n  return parseOptionValue(value, parser);\n}\n\n/**\n * Sets the selected <option> element within a <select> element based on a\n * given value.\n *\n * @param {Element} el\n *        The element to look in.\n *\n * @param {string} value\n *        the property to look on.\n *\n * @param {Function} [parser]\n *        Optional function to adjust the value before comparing.\n *\n * @private\n */\nfunction setSelectedOption(el, value, parser) {\n  if (!value) {\n    return;\n  }\n\n  for (var i = 0; i < el.options.length; i++) {\n    if (parseOptionValue(el.options[i].value, parser) === value) {\n      el.selectedIndex = i;\n      break;\n    }\n  }\n}\n\n/**\n * Manipulate Text Tracks settings.\n *\n * @extends ModalDialog\n */\n\nvar TextTrackSettings = function (_ModalDialog) {\n  inherits(TextTrackSettings, _ModalDialog);\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *         The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *         The key/value store of player options.\n   */\n  function TextTrackSettings(player, options) {\n    classCallCheck(this, TextTrackSettings);\n\n    options.temporary = false;\n\n    var _this = possibleConstructorReturn(this, _ModalDialog.call(this, player, options));\n\n    _this.updateDisplay = bind(_this, _this.updateDisplay);\n\n    // fill the modal and pretend we have opened it\n    _this.fill();\n    _this.hasBeenOpened_ = _this.hasBeenFilled_ = true;\n\n    _this.endDialog = createEl('p', {\n      className: 'vjs-control-text',\n      textContent: _this.localize('End of dialog window.')\n    });\n    _this.el().appendChild(_this.endDialog);\n\n    _this.setDefaults();\n\n    // Grab `persistTextTrackSettings` from the player options if not passed in child options\n    if (options.persistTextTrackSettings === undefined) {\n      _this.options_.persistTextTrackSettings = _this.options_.playerOptions.persistTextTrackSettings;\n    }\n\n    _this.on(_this.$('.vjs-done-button'), 'click', function () {\n      _this.saveSettings();\n      _this.close();\n    });\n\n    _this.on(_this.$('.vjs-default-button'), 'click', function () {\n      _this.setDefaults();\n      _this.updateDisplay();\n    });\n\n    each(selectConfigs, function (config) {\n      _this.on(_this.$(config.selector), 'change', _this.updateDisplay);\n    });\n\n    if (_this.options_.persistTextTrackSettings) {\n      _this.restoreSettings();\n    }\n    return _this;\n  }\n\n  TextTrackSettings.prototype.dispose = function dispose() {\n    this.endDialog = null;\n\n    _ModalDialog.prototype.dispose.call(this);\n  };\n\n  /**\n   * Create a <select> element with configured options.\n   *\n   * @param {string} key\n   *        Configuration key to use during creation.\n   *\n   * @return {string}\n   *         An HTML string.\n   *\n   * @private\n   */\n\n\n  TextTrackSettings.prototype.createElSelect_ = function createElSelect_(key) {\n    var _this2 = this;\n\n    var legendId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'label';\n\n    var config = selectConfigs[key];\n    var id = config.id.replace('%s', this.id_);\n    var selectLabelledbyIds = [legendId, id].join(' ').trim();\n\n    return ['<' + type + ' id=\"' + id + '\" class=\"' + (type === 'label' ? 'vjs-label' : '') + '\">', this.localize(config.label), '</' + type + '>', '<select aria-labelledby=\"' + selectLabelledbyIds + '\">'].concat(config.options.map(function (o) {\n      var optionId = id + '-' + o[1].replace(/\\W+/g, '');\n\n      return ['<option id=\"' + optionId + '\" value=\"' + o[0] + '\" ', 'aria-labelledby=\"' + selectLabelledbyIds + ' ' + optionId + '\">', _this2.localize(o[1]), '</option>'].join('');\n    })).concat('</select>').join('');\n  };\n\n  /**\n   * Create foreground color element for the component\n   *\n   * @return {string}\n   *         An HTML string.\n   *\n   * @private\n   */\n\n\n  TextTrackSettings.prototype.createElFgColor_ = function createElFgColor_() {\n    var legendId = 'captions-text-legend-' + this.id_;\n\n    return ['<fieldset class=\"vjs-fg-color vjs-track-setting\">', '<legend id=\"' + legendId + '\">', this.localize('Text'), '</legend>', this.createElSelect_('color', legendId), '<span class=\"vjs-text-opacity vjs-opacity\">', this.createElSelect_('textOpacity', legendId), '</span>', '</fieldset>'].join('');\n  };\n\n  /**\n   * Create background color element for the component\n   *\n   * @return {string}\n   *         An HTML string.\n   *\n   * @private\n   */\n\n\n  TextTrackSettings.prototype.createElBgColor_ = function createElBgColor_() {\n    var legendId = 'captions-background-' + this.id_;\n\n    return ['<fieldset class=\"vjs-bg-color vjs-track-setting\">', '<legend id=\"' + legendId + '\">', this.localize('Background'), '</legend>', this.createElSelect_('backgroundColor', legendId), '<span class=\"vjs-bg-opacity vjs-opacity\">', this.createElSelect_('backgroundOpacity', legendId), '</span>', '</fieldset>'].join('');\n  };\n\n  /**\n   * Create window color element for the component\n   *\n   * @return {string}\n   *         An HTML string.\n   *\n   * @private\n   */\n\n\n  TextTrackSettings.prototype.createElWinColor_ = function createElWinColor_() {\n    var legendId = 'captions-window-' + this.id_;\n\n    return ['<fieldset class=\"vjs-window-color vjs-track-setting\">', '<legend id=\"' + legendId + '\">', this.localize('Window'), '</legend>', this.createElSelect_('windowColor', legendId), '<span class=\"vjs-window-opacity vjs-opacity\">', this.createElSelect_('windowOpacity', legendId), '</span>', '</fieldset>'].join('');\n  };\n\n  /**\n   * Create color elements for the component\n   *\n   * @return {Element}\n   *         The element that was created\n   *\n   * @private\n   */\n\n\n  TextTrackSettings.prototype.createElColors_ = function createElColors_() {\n    return createEl('div', {\n      className: 'vjs-track-settings-colors',\n      innerHTML: [this.createElFgColor_(), this.createElBgColor_(), this.createElWinColor_()].join('')\n    });\n  };\n\n  /**\n   * Create font elements for the component\n   *\n   * @return {Element}\n   *         The element that was created.\n   *\n   * @private\n   */\n\n\n  TextTrackSettings.prototype.createElFont_ = function createElFont_() {\n    return createEl('div', {\n      className: 'vjs-track-settings-font',\n      innerHTML: ['<fieldset class=\"vjs-font-percent vjs-track-setting\">', this.createElSelect_('fontPercent', '', 'legend'), '</fieldset>', '<fieldset class=\"vjs-edge-style vjs-track-setting\">', this.createElSelect_('edgeStyle', '', 'legend'), '</fieldset>', '<fieldset class=\"vjs-font-family vjs-track-setting\">', this.createElSelect_('fontFamily', '', 'legend'), '</fieldset>'].join('')\n    });\n  };\n\n  /**\n   * Create controls for the component\n   *\n   * @return {Element}\n   *         The element that was created.\n   *\n   * @private\n   */\n\n\n  TextTrackSettings.prototype.createElControls_ = function createElControls_() {\n    var defaultsDescription = this.localize('restore all settings to the default values');\n\n    return createEl('div', {\n      className: 'vjs-track-settings-controls',\n      innerHTML: ['<button class=\"vjs-default-button\" title=\"' + defaultsDescription + '\">', this.localize('Reset'), '<span class=\"vjs-control-text\"> ' + defaultsDescription + '</span>', '</button>', '<button class=\"vjs-done-button\">' + this.localize('Done') + '</button>'].join('')\n    });\n  };\n\n  TextTrackSettings.prototype.content = function content() {\n    return [this.createElColors_(), this.createElFont_(), this.createElControls_()];\n  };\n\n  TextTrackSettings.prototype.label = function label() {\n    return this.localize('Caption Settings Dialog');\n  };\n\n  TextTrackSettings.prototype.description = function description() {\n    return this.localize('Beginning of dialog window. Escape will cancel and close the window.');\n  };\n\n  TextTrackSettings.prototype.buildCSSClass = function buildCSSClass() {\n    return _ModalDialog.prototype.buildCSSClass.call(this) + ' vjs-text-track-settings';\n  };\n\n  /**\n   * Gets an object of text track settings (or null).\n   *\n   * @return {Object}\n   *         An object with config values parsed from the DOM or localStorage.\n   */\n\n\n  TextTrackSettings.prototype.getValues = function getValues() {\n    var _this3 = this;\n\n    return reduce(selectConfigs, function (accum, config, key) {\n      var value = getSelectedOptionValue(_this3.$(config.selector), config.parser);\n\n      if (value !== undefined) {\n        accum[key] = value;\n      }\n\n      return accum;\n    }, {});\n  };\n\n  /**\n   * Sets text track settings from an object of values.\n   *\n   * @param {Object} values\n   *        An object with config values parsed from the DOM or localStorage.\n   */\n\n\n  TextTrackSettings.prototype.setValues = function setValues(values) {\n    var _this4 = this;\n\n    each(selectConfigs, function (config, key) {\n      setSelectedOption(_this4.$(config.selector), values[key], config.parser);\n    });\n  };\n\n  /**\n   * Sets all `<select>` elements to their default values.\n   */\n\n\n  TextTrackSettings.prototype.setDefaults = function setDefaults() {\n    var _this5 = this;\n\n    each(selectConfigs, function (config) {\n      var index = config.hasOwnProperty('default') ? config.default : 0;\n\n      _this5.$(config.selector).selectedIndex = index;\n    });\n  };\n\n  /**\n   * Restore texttrack settings from localStorage\n   */\n\n\n  TextTrackSettings.prototype.restoreSettings = function restoreSettings() {\n    var values = void 0;\n\n    try {\n      values = JSON.parse(window$1.localStorage.getItem(LOCAL_STORAGE_KEY));\n    } catch (err) {\n      log$1.warn(err);\n    }\n\n    if (values) {\n      this.setValues(values);\n    }\n  };\n\n  /**\n   * Save text track settings to localStorage\n   */\n\n\n  TextTrackSettings.prototype.saveSettings = function saveSettings() {\n    if (!this.options_.persistTextTrackSettings) {\n      return;\n    }\n\n    var values = this.getValues();\n\n    try {\n      if (Object.keys(values).length) {\n        window$1.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(values));\n      } else {\n        window$1.localStorage.removeItem(LOCAL_STORAGE_KEY);\n      }\n    } catch (err) {\n      log$1.warn(err);\n    }\n  };\n\n  /**\n   * Update display of text track settings\n   */\n\n\n  TextTrackSettings.prototype.updateDisplay = function updateDisplay() {\n    var ttDisplay = this.player_.getChild('textTrackDisplay');\n\n    if (ttDisplay) {\n      ttDisplay.updateDisplay();\n    }\n  };\n\n  /**\n   * conditionally blur the element and refocus the captions button\n   *\n   * @private\n   */\n\n\n  TextTrackSettings.prototype.conditionalBlur_ = function conditionalBlur_() {\n    this.previouslyActiveEl_ = null;\n    this.off(document, 'keydown', this.handleKeyDown);\n\n    var cb = this.player_.controlBar;\n    var subsCapsBtn = cb && cb.subsCapsButton;\n    var ccBtn = cb && cb.captionsButton;\n\n    if (subsCapsBtn) {\n      subsCapsBtn.focus();\n    } else if (ccBtn) {\n      ccBtn.focus();\n    }\n  };\n\n  return TextTrackSettings;\n}(ModalDialog);\n\nComponent.registerComponent('TextTrackSettings', TextTrackSettings);\n\n/**\n * @file resize-manager.js\n */\n\n/**\n * A Resize Manager. It is in charge of triggering `playerresize` on the player in the right conditions.\n *\n * It'll either create an iframe and use a debounced resize handler on it or use the new {@link https://wicg.github.io/ResizeObserver/|ResizeObserver}.\n *\n * If the ResizeObserver is available natively, it will be used. A polyfill can be passed in as an option.\n * If a `playerresize` event is not needed, the ResizeManager component can be removed from the player, see the example below.\n * @example <caption>How to disable the resize manager</caption>\n * const player = videojs('#vid', {\n *   resizeManager: false\n * });\n *\n * @see {@link https://wicg.github.io/ResizeObserver/|ResizeObserver specification}\n *\n * @extends Component\n */\n\nvar ResizeManager = function (_Component) {\n  inherits(ResizeManager, _Component);\n\n  /**\n   * Create the ResizeManager.\n   *\n   * @param {Object} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of ResizeManager options.\n   *\n   * @param {Object} [options.ResizeObserver]\n   *        A polyfill for ResizeObserver can be passed in here.\n   *        If this is set to null it will ignore the native ResizeObserver and fall back to the iframe fallback.\n   */\n  function ResizeManager(player, options) {\n    classCallCheck(this, ResizeManager);\n\n    var RESIZE_OBSERVER_AVAILABLE = options.ResizeObserver || window$1.ResizeObserver;\n\n    // if `null` was passed, we want to disable the ResizeObserver\n    if (options.ResizeObserver === null) {\n      RESIZE_OBSERVER_AVAILABLE = false;\n    }\n\n    // Only create an element when ResizeObserver isn't available\n    var options_ = mergeOptions({\n      createEl: !RESIZE_OBSERVER_AVAILABLE,\n      reportTouchActivity: false\n    }, options);\n\n    var _this = possibleConstructorReturn(this, _Component.call(this, player, options_));\n\n    _this.ResizeObserver = options.ResizeObserver || window$1.ResizeObserver;\n    _this.loadListener_ = null;\n    _this.resizeObserver_ = null;\n    _this.debouncedHandler_ = debounce(function () {\n      _this.resizeHandler();\n    }, 100, false, _this);\n\n    if (RESIZE_OBSERVER_AVAILABLE) {\n      _this.resizeObserver_ = new _this.ResizeObserver(_this.debouncedHandler_);\n      _this.resizeObserver_.observe(player.el());\n    } else {\n      _this.loadListener_ = function () {\n        if (!_this.el_ || !_this.el_.contentWindow) {\n          return;\n        }\n\n        on(_this.el_.contentWindow, 'resize', _this.debouncedHandler_);\n      };\n\n      _this.one('load', _this.loadListener_);\n    }\n    return _this;\n  }\n\n  ResizeManager.prototype.createEl = function createEl() {\n    return _Component.prototype.createEl.call(this, 'iframe', {\n      className: 'vjs-resize-manager'\n    });\n  };\n\n  /**\n   * Called when a resize is triggered on the iframe or a resize is observed via the ResizeObserver\n   *\n   * @fires Player#playerresize\n   */\n\n\n  ResizeManager.prototype.resizeHandler = function resizeHandler() {\n    /**\n     * Called when the player size has changed\n     *\n     * @event Player#playerresize\n     * @type {EventTarget~Event}\n     */\n    // make sure player is still around to trigger\n    // prevents this from causing an error after dispose\n    if (!this.player_ || !this.player_.trigger) {\n      return;\n    }\n\n    this.player_.trigger('playerresize');\n  };\n\n  ResizeManager.prototype.dispose = function dispose() {\n    if (this.debouncedHandler_) {\n      this.debouncedHandler_.cancel();\n    }\n\n    if (this.resizeObserver_) {\n      if (this.player_.el()) {\n        this.resizeObserver_.unobserve(this.player_.el());\n      }\n      this.resizeObserver_.disconnect();\n    }\n\n    if (this.el_ && this.el_.contentWindow) {\n      off(this.el_.contentWindow, 'resize', this.debouncedHandler_);\n    }\n\n    if (this.loadListener_) {\n      this.off('load', this.loadListener_);\n    }\n\n    this.ResizeObserver = null;\n    this.resizeObserver = null;\n    this.debouncedHandler_ = null;\n    this.loadListener_ = null;\n  };\n\n  return ResizeManager;\n}(Component);\n\nComponent.registerComponent('ResizeManager', ResizeManager);\n\n/**\n * This function is used to fire a sourceset when there is something\n * similar to `mediaEl.load()` being called. It will try to find the source via\n * the `src` attribute and then the `<source>` elements. It will then fire `sourceset`\n * with the source that was found or empty string if we cannot know. If it cannot\n * find a source then `sourceset` will not be fired.\n *\n * @param {Html5} tech\n *        The tech object that sourceset was setup on\n *\n * @return {boolean}\n *         returns false if the sourceset was not fired and true otherwise.\n */\nvar sourcesetLoad = function sourcesetLoad(tech) {\n  var el = tech.el();\n\n  // if `el.src` is set, that source will be loaded.\n  if (el.hasAttribute('src')) {\n    tech.triggerSourceset(el.src);\n    return true;\n  }\n\n  /**\n   * Since there isn't a src property on the media element, source elements will be used for\n   * implementing the source selection algorithm. This happens asynchronously and\n   * for most cases were there is more than one source we cannot tell what source will\n   * be loaded, without re-implementing the source selection algorithm. At this time we are not\n   * going to do that. There are three special cases that we do handle here though:\n   *\n   * 1. If there are no sources, do not fire `sourceset`.\n   * 2. If there is only one `<source>` with a `src` property/attribute that is our `src`\n   * 3. If there is more than one `<source>` but all of them have the same `src` url.\n   *    That will be our src.\n   */\n  var sources = tech.$$('source');\n  var srcUrls = [];\n  var src = '';\n\n  // if there are no sources, do not fire sourceset\n  if (!sources.length) {\n    return false;\n  }\n\n  // only count valid/non-duplicate source elements\n  for (var i = 0; i < sources.length; i++) {\n    var url = sources[i].src;\n\n    if (url && srcUrls.indexOf(url) === -1) {\n      srcUrls.push(url);\n    }\n  }\n\n  // there were no valid sources\n  if (!srcUrls.length) {\n    return false;\n  }\n\n  // there is only one valid source element url\n  // use that\n  if (srcUrls.length === 1) {\n    src = srcUrls[0];\n  }\n\n  tech.triggerSourceset(src);\n  return true;\n};\n\n/**\n * our implementation of an `innerHTML` descriptor for browsers\n * that do not have one.\n */\nvar innerHTMLDescriptorPolyfill = Object.defineProperty({}, 'innerHTML', {\n  get: function get() {\n    return this.cloneNode(true).innerHTML;\n  },\n  set: function set(v) {\n    // make a dummy node to use innerHTML on\n    var dummy = document.createElement(this.nodeName.toLowerCase());\n\n    // set innerHTML to the value provided\n    dummy.innerHTML = v;\n\n    // make a document fragment to hold the nodes from dummy\n    var docFrag = document.createDocumentFragment();\n\n    // copy all of the nodes created by the innerHTML on dummy\n    // to the document fragment\n    while (dummy.childNodes.length) {\n      docFrag.appendChild(dummy.childNodes[0]);\n    }\n\n    // remove content\n    this.innerText = '';\n\n    // now we add all of that html in one by appending the\n    // document fragment. This is how innerHTML does it.\n    window$1.Element.prototype.appendChild.call(this, docFrag);\n\n    // then return the result that innerHTML's setter would\n    return this.innerHTML;\n  }\n});\n\n/**\n * Get a property descriptor given a list of priorities and the\n * property to get.\n */\nvar getDescriptor = function getDescriptor(priority, prop) {\n  var descriptor = {};\n\n  for (var i = 0; i < priority.length; i++) {\n    descriptor = Object.getOwnPropertyDescriptor(priority[i], prop);\n\n    if (descriptor && descriptor.set && descriptor.get) {\n      break;\n    }\n  }\n\n  descriptor.enumerable = true;\n  descriptor.configurable = true;\n\n  return descriptor;\n};\n\nvar getInnerHTMLDescriptor = function getInnerHTMLDescriptor(tech) {\n  return getDescriptor([tech.el(), window$1.HTMLMediaElement.prototype, window$1.Element.prototype, innerHTMLDescriptorPolyfill], 'innerHTML');\n};\n\n/**\n * Patches browser internal functions so that we can tell synchronously\n * if a `<source>` was appended to the media element. For some reason this\n * causes a `sourceset` if the the media element is ready and has no source.\n * This happens when:\n * - The page has just loaded and the media element does not have a source.\n * - The media element was emptied of all sources, then `load()` was called.\n *\n * It does this by patching the following functions/properties when they are supported:\n *\n * - `append()` - can be used to add a `<source>` element to the media element\n * - `appendChild()` - can be used to add a `<source>` element to the media element\n * - `insertAdjacentHTML()` -  can be used to add a `<source>` element to the media element\n * - `innerHTML` -  can be used to add a `<source>` element to the media element\n *\n * @param {Html5} tech\n *        The tech object that sourceset is being setup on.\n */\nvar firstSourceWatch = function firstSourceWatch(tech) {\n  var el = tech.el();\n\n  // make sure firstSourceWatch isn't setup twice.\n  if (el.resetSourceWatch_) {\n    return;\n  }\n\n  var old = {};\n  var innerDescriptor = getInnerHTMLDescriptor(tech);\n  var appendWrapper = function appendWrapper(appendFn) {\n    return function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var retval = appendFn.apply(el, args);\n\n      sourcesetLoad(tech);\n\n      return retval;\n    };\n  };\n\n  ['append', 'appendChild', 'insertAdjacentHTML'].forEach(function (k) {\n    if (!el[k]) {\n      return;\n    }\n\n    // store the old function\n    old[k] = el[k];\n\n    // call the old function with a sourceset if a source\n    // was loaded\n    el[k] = appendWrapper(old[k]);\n  });\n\n  Object.defineProperty(el, 'innerHTML', mergeOptions(innerDescriptor, {\n    set: appendWrapper(innerDescriptor.set)\n  }));\n\n  el.resetSourceWatch_ = function () {\n    el.resetSourceWatch_ = null;\n    Object.keys(old).forEach(function (k) {\n      el[k] = old[k];\n    });\n\n    Object.defineProperty(el, 'innerHTML', innerDescriptor);\n  };\n\n  // on the first sourceset, we need to revert our changes\n  tech.one('sourceset', el.resetSourceWatch_);\n};\n\n/**\n * our implementation of a `src` descriptor for browsers\n * that do not have one.\n */\nvar srcDescriptorPolyfill = Object.defineProperty({}, 'src', {\n  get: function get() {\n    if (this.hasAttribute('src')) {\n      return getAbsoluteURL(window$1.Element.prototype.getAttribute.call(this, 'src'));\n    }\n\n    return '';\n  },\n  set: function set(v) {\n    window$1.Element.prototype.setAttribute.call(this, 'src', v);\n\n    return v;\n  }\n});\n\nvar getSrcDescriptor = function getSrcDescriptor(tech) {\n  return getDescriptor([tech.el(), window$1.HTMLMediaElement.prototype, srcDescriptorPolyfill], 'src');\n};\n\n/**\n * setup `sourceset` handling on the `Html5` tech. This function\n * patches the following element properties/functions:\n *\n * - `src` - to determine when `src` is set\n * - `setAttribute()` - to determine when `src` is set\n * - `load()` - this re-triggers the source selection algorithm, and can\n *              cause a sourceset.\n *\n * If there is no source when we are adding `sourceset` support or during a `load()`\n * we also patch the functions listed in `firstSourceWatch`.\n *\n * @param {Html5} tech\n *        The tech to patch\n */\nvar setupSourceset = function setupSourceset(tech) {\n  if (!tech.featuresSourceset) {\n    return;\n  }\n\n  var el = tech.el();\n\n  // make sure sourceset isn't setup twice.\n  if (el.resetSourceset_) {\n    return;\n  }\n\n  var srcDescriptor = getSrcDescriptor(tech);\n  var oldSetAttribute = el.setAttribute;\n  var oldLoad = el.load;\n\n  Object.defineProperty(el, 'src', mergeOptions(srcDescriptor, {\n    set: function set(v) {\n      var retval = srcDescriptor.set.call(el, v);\n\n      // we use the getter here to get the actual value set on src\n      tech.triggerSourceset(el.src);\n\n      return retval;\n    }\n  }));\n\n  el.setAttribute = function (n, v) {\n    var retval = oldSetAttribute.call(el, n, v);\n\n    if (/src/i.test(n)) {\n      tech.triggerSourceset(el.src);\n    }\n\n    return retval;\n  };\n\n  el.load = function () {\n    var retval = oldLoad.call(el);\n\n    // if load was called, but there was no source to fire\n    // sourceset on. We have to watch for a source append\n    // as that can trigger a `sourceset` when the media element\n    // has no source\n    if (!sourcesetLoad(tech)) {\n      tech.triggerSourceset('');\n      firstSourceWatch(tech);\n    }\n\n    return retval;\n  };\n\n  if (el.currentSrc) {\n    tech.triggerSourceset(el.currentSrc);\n  } else if (!sourcesetLoad(tech)) {\n    firstSourceWatch(tech);\n  }\n\n  el.resetSourceset_ = function () {\n    el.resetSourceset_ = null;\n    el.load = oldLoad;\n    el.setAttribute = oldSetAttribute;\n    Object.defineProperty(el, 'src', srcDescriptor);\n    if (el.resetSourceWatch_) {\n      el.resetSourceWatch_();\n    }\n  };\n};\n\nvar _templateObject$1 = taggedTemplateLiteralLoose(['Text Tracks are being loaded from another origin but the crossorigin attribute isn\\'t used.\\n            This may prevent text tracks from loading.'], ['Text Tracks are being loaded from another origin but the crossorigin attribute isn\\'t used.\\n            This may prevent text tracks from loading.']);\n\n/**\n * HTML5 Media Controller - Wrapper for HTML5 Media API\n *\n * @mixes Tech~SourceHandlerAdditions\n * @extends Tech\n */\n\nvar Html5 = function (_Tech) {\n  inherits(Html5, _Tech);\n\n  /**\n   * Create an instance of this Tech.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Component~ReadyCallback} ready\n   *        Callback function to call when the `HTML5` Tech is ready.\n   */\n  function Html5(options, ready) {\n    classCallCheck(this, Html5);\n\n    var _this = possibleConstructorReturn(this, _Tech.call(this, options, ready));\n\n    var source = options.source;\n    var crossoriginTracks = false;\n\n    // Set the source if one is provided\n    // 1) Check if the source is new (if not, we want to keep the original so playback isn't interrupted)\n    // 2) Check to see if the network state of the tag was failed at init, and if so, reset the source\n    // anyway so the error gets fired.\n    if (source && (_this.el_.currentSrc !== source.src || options.tag && options.tag.initNetworkState_ === 3)) {\n      _this.setSource(source);\n    } else {\n      _this.handleLateInit_(_this.el_);\n    }\n\n    // setup sourceset after late sourceset/init\n    if (options.enableSourceset) {\n      _this.setupSourcesetHandling_();\n    }\n\n    if (_this.el_.hasChildNodes()) {\n\n      var nodes = _this.el_.childNodes;\n      var nodesLength = nodes.length;\n      var removeNodes = [];\n\n      while (nodesLength--) {\n        var node = nodes[nodesLength];\n        var nodeName = node.nodeName.toLowerCase();\n\n        if (nodeName === 'track') {\n          if (!_this.featuresNativeTextTracks) {\n            // Empty video tag tracks so the built-in player doesn't use them also.\n            // This may not be fast enough to stop HTML5 browsers from reading the tags\n            // so we'll need to turn off any default tracks if we're manually doing\n            // captions and subtitles. videoElement.textTracks\n            removeNodes.push(node);\n          } else {\n            // store HTMLTrackElement and TextTrack to remote list\n            _this.remoteTextTrackEls().addTrackElement_(node);\n            _this.remoteTextTracks().addTrack(node.track);\n            _this.textTracks().addTrack(node.track);\n            if (!crossoriginTracks && !_this.el_.hasAttribute('crossorigin') && isCrossOrigin(node.src)) {\n              crossoriginTracks = true;\n            }\n          }\n        }\n      }\n\n      for (var i = 0; i < removeNodes.length; i++) {\n        _this.el_.removeChild(removeNodes[i]);\n      }\n    }\n\n    _this.proxyNativeTracks_();\n    if (_this.featuresNativeTextTracks && crossoriginTracks) {\n      log$1.warn(tsml(_templateObject$1));\n    }\n\n    // prevent iOS Safari from disabling metadata text tracks during native playback\n    _this.restoreMetadataTracksInIOSNativePlayer_();\n\n    // Determine if native controls should be used\n    // Our goal should be to get the custom controls on mobile solid everywhere\n    // so we can remove this all together. Right now this will block custom\n    // controls on touch enabled laptops like the Chrome Pixel\n    if ((TOUCH_ENABLED || IS_IPHONE || IS_NATIVE_ANDROID) && options.nativeControlsForTouch === true) {\n      _this.setControls(true);\n    }\n\n    // on iOS, we want to proxy `webkitbeginfullscreen` and `webkitendfullscreen`\n    // into a `fullscreenchange` event\n    _this.proxyWebkitFullscreen_();\n\n    _this.triggerReady();\n    return _this;\n  }\n\n  /**\n   * Dispose of `HTML5` media element and remove all tracks.\n   */\n\n\n  Html5.prototype.dispose = function dispose() {\n    if (this.el_ && this.el_.resetSourceset_) {\n      this.el_.resetSourceset_();\n    }\n    Html5.disposeMediaElement(this.el_);\n    this.options_ = null;\n\n    // tech will handle clearing of the emulated track list\n    _Tech.prototype.dispose.call(this);\n  };\n\n  /**\n   * Modify the media element so that we can detect when\n   * the source is changed. Fires `sourceset` just after the source has changed\n   */\n\n\n  Html5.prototype.setupSourcesetHandling_ = function setupSourcesetHandling_() {\n    setupSourceset(this);\n  };\n\n  /**\n   * When a captions track is enabled in the iOS Safari native player, all other\n   * tracks are disabled (including metadata tracks), which nulls all of their\n   * associated cue points. This will restore metadata tracks to their pre-fullscreen\n   * state in those cases so that cue points are not needlessly lost.\n   *\n   * @private\n   */\n\n\n  Html5.prototype.restoreMetadataTracksInIOSNativePlayer_ = function restoreMetadataTracksInIOSNativePlayer_() {\n    var textTracks = this.textTracks();\n    var metadataTracksPreFullscreenState = void 0;\n\n    // captures a snapshot of every metadata track's current state\n    var takeMetadataTrackSnapshot = function takeMetadataTrackSnapshot() {\n      metadataTracksPreFullscreenState = [];\n\n      for (var i = 0; i < textTracks.length; i++) {\n        var track = textTracks[i];\n\n        if (track.kind === 'metadata') {\n          metadataTracksPreFullscreenState.push({\n            track: track,\n            storedMode: track.mode\n          });\n        }\n      }\n    };\n\n    // snapshot each metadata track's initial state, and update the snapshot\n    // each time there is a track 'change' event\n    takeMetadataTrackSnapshot();\n    textTracks.addEventListener('change', takeMetadataTrackSnapshot);\n\n    this.on('dispose', function () {\n      return textTracks.removeEventListener('change', takeMetadataTrackSnapshot);\n    });\n\n    var restoreTrackMode = function restoreTrackMode() {\n      for (var i = 0; i < metadataTracksPreFullscreenState.length; i++) {\n        var storedTrack = metadataTracksPreFullscreenState[i];\n\n        if (storedTrack.track.mode === 'disabled' && storedTrack.track.mode !== storedTrack.storedMode) {\n          storedTrack.track.mode = storedTrack.storedMode;\n        }\n      }\n      // we only want this handler to be executed on the first 'change' event\n      textTracks.removeEventListener('change', restoreTrackMode);\n    };\n\n    // when we enter fullscreen playback, stop updating the snapshot and\n    // restore all track modes to their pre-fullscreen state\n    this.on('webkitbeginfullscreen', function () {\n      textTracks.removeEventListener('change', takeMetadataTrackSnapshot);\n\n      // remove the listener before adding it just in case it wasn't previously removed\n      textTracks.removeEventListener('change', restoreTrackMode);\n      textTracks.addEventListener('change', restoreTrackMode);\n    });\n\n    // start updating the snapshot again after leaving fullscreen\n    this.on('webkitendfullscreen', function () {\n      // remove the listener before adding it just in case it wasn't previously removed\n      textTracks.removeEventListener('change', takeMetadataTrackSnapshot);\n      textTracks.addEventListener('change', takeMetadataTrackSnapshot);\n\n      // remove the restoreTrackMode handler in case it wasn't triggered during fullscreen playback\n      textTracks.removeEventListener('change', restoreTrackMode);\n    });\n  };\n\n  /**\n   * Attempt to force override of tracks for the given type\n   *\n   * @param {String} type - Track type to override, possible values include 'Audio',\n   * 'Video', and 'Text'.\n   * @param {Boolean} override - If set to true native audio/video will be overridden,\n   * otherwise native audio/video will potentially be used.\n   * @private\n   */\n\n\n  Html5.prototype.overrideNative_ = function overrideNative_(type, override) {\n    var _this2 = this;\n\n    // If there is no behavioral change don't add/remove listeners\n    if (override !== this['featuresNative' + type + 'Tracks']) {\n      return;\n    }\n\n    var lowerCaseType = type.toLowerCase();\n\n    if (this[lowerCaseType + 'TracksListeners_']) {\n      Object.keys(this[lowerCaseType + 'TracksListeners_']).forEach(function (eventName) {\n        var elTracks = _this2.el()[lowerCaseType + 'Tracks'];\n\n        elTracks.removeEventListener(eventName, _this2[lowerCaseType + 'TracksListeners_'][eventName]);\n      });\n    }\n\n    this['featuresNative' + type + 'Tracks'] = !override;\n    this[lowerCaseType + 'TracksListeners_'] = null;\n\n    this.proxyNativeTracksForType_(lowerCaseType);\n  };\n\n  /**\n   * Attempt to force override of native audio tracks.\n   *\n   * @param {Boolean} override - If set to true native audio will be overridden,\n   * otherwise native audio will potentially be used.\n   */\n\n\n  Html5.prototype.overrideNativeAudioTracks = function overrideNativeAudioTracks(override) {\n    this.overrideNative_('Audio', override);\n  };\n\n  /**\n   * Attempt to force override of native video tracks.\n   *\n   * @param {Boolean} override - If set to true native video will be overridden,\n   * otherwise native video will potentially be used.\n   */\n\n\n  Html5.prototype.overrideNativeVideoTracks = function overrideNativeVideoTracks(override) {\n    this.overrideNative_('Video', override);\n  };\n\n  /**\n    * Proxy native track list events for the given type to our track\n    * lists if the browser we are playing in supports that type of track list.\n    *\n    * @param {string} name - Track type; values include 'audio', 'video', and 'text'\n    * @private\n    */\n\n\n  Html5.prototype.proxyNativeTracksForType_ = function proxyNativeTracksForType_(name) {\n    var _this3 = this;\n\n    var props = NORMAL[name];\n    var elTracks = this.el()[props.getterName];\n    var techTracks = this[props.getterName]();\n\n    if (!this['featuresNative' + props.capitalName + 'Tracks'] || !elTracks || !elTracks.addEventListener) {\n      return;\n    }\n    var listeners = {\n      change: function change(e) {\n        techTracks.trigger({\n          type: 'change',\n          target: techTracks,\n          currentTarget: techTracks,\n          srcElement: techTracks\n        });\n      },\n      addtrack: function addtrack(e) {\n        techTracks.addTrack(e.track);\n      },\n      removetrack: function removetrack(e) {\n        techTracks.removeTrack(e.track);\n      }\n    };\n    var removeOldTracks = function removeOldTracks() {\n      var removeTracks = [];\n\n      for (var i = 0; i < techTracks.length; i++) {\n        var found = false;\n\n        for (var j = 0; j < elTracks.length; j++) {\n          if (elTracks[j] === techTracks[i]) {\n            found = true;\n            break;\n          }\n        }\n\n        if (!found) {\n          removeTracks.push(techTracks[i]);\n        }\n      }\n\n      while (removeTracks.length) {\n        techTracks.removeTrack(removeTracks.shift());\n      }\n    };\n\n    this[props.getterName + 'Listeners_'] = listeners;\n\n    Object.keys(listeners).forEach(function (eventName) {\n      var listener = listeners[eventName];\n\n      elTracks.addEventListener(eventName, listener);\n      _this3.on('dispose', function (e) {\n        return elTracks.removeEventListener(eventName, listener);\n      });\n    });\n\n    // Remove (native) tracks that are not used anymore\n    this.on('loadstart', removeOldTracks);\n    this.on('dispose', function (e) {\n      return _this3.off('loadstart', removeOldTracks);\n    });\n  };\n\n  /**\n   * Proxy all native track list events to our track lists if the browser we are playing\n   * in supports that type of track list.\n   *\n   * @private\n   */\n\n\n  Html5.prototype.proxyNativeTracks_ = function proxyNativeTracks_() {\n    var _this4 = this;\n\n    NORMAL.names.forEach(function (name) {\n      _this4.proxyNativeTracksForType_(name);\n    });\n  };\n\n  /**\n   * Create the `Html5` Tech's DOM element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n\n\n  Html5.prototype.createEl = function createEl$$1() {\n    var el = this.options_.tag;\n\n    // Check if this browser supports moving the element into the box.\n    // On the iPhone video will break if you move the element,\n    // So we have to create a brand new element.\n    // If we ingested the player div, we do not need to move the media element.\n    if (!el || !(this.options_.playerElIngest || this.movingMediaElementInDOM)) {\n\n      // If the original tag is still there, clone and remove it.\n      if (el) {\n        var clone = el.cloneNode(true);\n\n        if (el.parentNode) {\n          el.parentNode.insertBefore(clone, el);\n        }\n        Html5.disposeMediaElement(el);\n        el = clone;\n      } else {\n        el = document.createElement('video');\n\n        // determine if native controls should be used\n        var tagAttributes = this.options_.tag && getAttributes(this.options_.tag);\n        var attributes = mergeOptions({}, tagAttributes);\n\n        if (!TOUCH_ENABLED || this.options_.nativeControlsForTouch !== true) {\n          delete attributes.controls;\n        }\n\n        setAttributes(el, assign(attributes, {\n          id: this.options_.techId,\n          class: 'vjs-tech'\n        }));\n      }\n\n      el.playerId = this.options_.playerId;\n    }\n\n    if (typeof this.options_.preload !== 'undefined') {\n      setAttribute(el, 'preload', this.options_.preload);\n    }\n\n    // Update specific tag settings, in case they were overridden\n    // `autoplay` has to be *last* so that `muted` and `playsinline` are present\n    // when iOS/Safari or other browsers attempt to autoplay.\n    var settingsAttrs = ['loop', 'muted', 'playsinline', 'autoplay'];\n\n    for (var i = 0; i < settingsAttrs.length; i++) {\n      var attr = settingsAttrs[i];\n      var value = this.options_[attr];\n\n      if (typeof value !== 'undefined') {\n        if (value) {\n          setAttribute(el, attr, attr);\n        } else {\n          removeAttribute(el, attr);\n        }\n        el[attr] = value;\n      }\n    }\n\n    return el;\n  };\n\n  /**\n   * This will be triggered if the loadstart event has already fired, before videojs was\n   * ready. Two known examples of when this can happen are:\n   * 1. If we're loading the playback object after it has started loading\n   * 2. The media is already playing the (often with autoplay on) then\n   *\n   * This function will fire another loadstart so that videojs can catchup.\n   *\n   * @fires Tech#loadstart\n   *\n   * @return {undefined}\n   *         returns nothing.\n   */\n\n\n  Html5.prototype.handleLateInit_ = function handleLateInit_(el) {\n    if (el.networkState === 0 || el.networkState === 3) {\n      // The video element hasn't started loading the source yet\n      // or didn't find a source\n      return;\n    }\n\n    if (el.readyState === 0) {\n      // NetworkState is set synchronously BUT loadstart is fired at the\n      // end of the current stack, usually before setInterval(fn, 0).\n      // So at this point we know loadstart may have already fired or is\n      // about to fire, and either way the player hasn't seen it yet.\n      // We don't want to fire loadstart prematurely here and cause a\n      // double loadstart so we'll wait and see if it happens between now\n      // and the next loop, and fire it if not.\n      // HOWEVER, we also want to make sure it fires before loadedmetadata\n      // which could also happen between now and the next loop, so we'll\n      // watch for that also.\n      var loadstartFired = false;\n      var setLoadstartFired = function setLoadstartFired() {\n        loadstartFired = true;\n      };\n\n      this.on('loadstart', setLoadstartFired);\n\n      var triggerLoadstart = function triggerLoadstart() {\n        // We did miss the original loadstart. Make sure the player\n        // sees loadstart before loadedmetadata\n        if (!loadstartFired) {\n          this.trigger('loadstart');\n        }\n      };\n\n      this.on('loadedmetadata', triggerLoadstart);\n\n      this.ready(function () {\n        this.off('loadstart', setLoadstartFired);\n        this.off('loadedmetadata', triggerLoadstart);\n\n        if (!loadstartFired) {\n          // We did miss the original native loadstart. Fire it now.\n          this.trigger('loadstart');\n        }\n      });\n\n      return;\n    }\n\n    // From here on we know that loadstart already fired and we missed it.\n    // The other readyState events aren't as much of a problem if we double\n    // them, so not going to go to as much trouble as loadstart to prevent\n    // that unless we find reason to.\n    var eventsToTrigger = ['loadstart'];\n\n    // loadedmetadata: newly equal to HAVE_METADATA (1) or greater\n    eventsToTrigger.push('loadedmetadata');\n\n    // loadeddata: newly increased to HAVE_CURRENT_DATA (2) or greater\n    if (el.readyState >= 2) {\n      eventsToTrigger.push('loadeddata');\n    }\n\n    // canplay: newly increased to HAVE_FUTURE_DATA (3) or greater\n    if (el.readyState >= 3) {\n      eventsToTrigger.push('canplay');\n    }\n\n    // canplaythrough: newly equal to HAVE_ENOUGH_DATA (4)\n    if (el.readyState >= 4) {\n      eventsToTrigger.push('canplaythrough');\n    }\n\n    // We still need to give the player time to add event listeners\n    this.ready(function () {\n      eventsToTrigger.forEach(function (type) {\n        this.trigger(type);\n      }, this);\n    });\n  };\n\n  /**\n   * Set current time for the `HTML5` tech.\n   *\n   * @param {number} seconds\n   *        Set the current time of the media to this.\n   */\n\n\n  Html5.prototype.setCurrentTime = function setCurrentTime(seconds) {\n    try {\n      this.el_.currentTime = seconds;\n    } catch (e) {\n      log$1(e, 'Video is not ready. (Video.js)');\n      // this.warning(VideoJS.warnings.videoNotReady);\n    }\n  };\n\n  /**\n   * Get the current duration of the HTML5 media element.\n   *\n   * @return {number}\n   *         The duration of the media or 0 if there is no duration.\n   */\n\n\n  Html5.prototype.duration = function duration() {\n    var _this5 = this;\n\n    // Android Chrome will report duration as Infinity for VOD HLS until after\n    // playback has started, which triggers the live display erroneously.\n    // Return NaN if playback has not started and trigger a durationupdate once\n    // the duration can be reliably known.\n    if (this.el_.duration === Infinity && IS_ANDROID && IS_CHROME && this.el_.currentTime === 0) {\n      // Wait for the first `timeupdate` with currentTime > 0 - there may be\n      // several with 0\n      var checkProgress = function checkProgress() {\n        if (_this5.el_.currentTime > 0) {\n          // Trigger durationchange for genuinely live video\n          if (_this5.el_.duration === Infinity) {\n            _this5.trigger('durationchange');\n          }\n          _this5.off('timeupdate', checkProgress);\n        }\n      };\n\n      this.on('timeupdate', checkProgress);\n      return NaN;\n    }\n    return this.el_.duration || NaN;\n  };\n\n  /**\n   * Get the current width of the HTML5 media element.\n   *\n   * @return {number}\n   *         The width of the HTML5 media element.\n   */\n\n\n  Html5.prototype.width = function width() {\n    return this.el_.offsetWidth;\n  };\n\n  /**\n   * Get the current height of the HTML5 media element.\n   *\n   * @return {number}\n   *         The height of the HTML5 media element.\n   */\n\n\n  Html5.prototype.height = function height() {\n    return this.el_.offsetHeight;\n  };\n\n  /**\n   * Proxy iOS `webkitbeginfullscreen` and `webkitendfullscreen` into\n   * `fullscreenchange` event.\n   *\n   * @private\n   * @fires fullscreenchange\n   * @listens webkitendfullscreen\n   * @listens webkitbeginfullscreen\n   * @listens webkitbeginfullscreen\n   */\n\n\n  Html5.prototype.proxyWebkitFullscreen_ = function proxyWebkitFullscreen_() {\n    var _this6 = this;\n\n    if (!('webkitDisplayingFullscreen' in this.el_)) {\n      return;\n    }\n\n    var endFn = function endFn() {\n      this.trigger('fullscreenchange', { isFullscreen: false });\n    };\n\n    var beginFn = function beginFn() {\n      if ('webkitPresentationMode' in this.el_ && this.el_.webkitPresentationMode !== 'picture-in-picture') {\n        this.one('webkitendfullscreen', endFn);\n\n        this.trigger('fullscreenchange', { isFullscreen: true });\n      }\n    };\n\n    this.on('webkitbeginfullscreen', beginFn);\n    this.on('dispose', function () {\n      _this6.off('webkitbeginfullscreen', beginFn);\n      _this6.off('webkitendfullscreen', endFn);\n    });\n  };\n\n  /**\n   * Check if fullscreen is supported on the current playback device.\n   *\n   * @return {boolean}\n   *         - True if fullscreen is supported.\n   *         - False if fullscreen is not supported.\n   */\n\n\n  Html5.prototype.supportsFullScreen = function supportsFullScreen() {\n    if (typeof this.el_.webkitEnterFullScreen === 'function') {\n      var userAgent = window$1.navigator && window$1.navigator.userAgent || '';\n\n      // Seems to be broken in Chromium/Chrome && Safari in Leopard\n      if (/Android/.test(userAgent) || !/Chrome|Mac OS X 10.5/.test(userAgent)) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  /**\n   * Request that the `HTML5` Tech enter fullscreen.\n   */\n\n\n  Html5.prototype.enterFullScreen = function enterFullScreen() {\n    var video = this.el_;\n\n    if (video.paused && video.networkState <= video.HAVE_METADATA) {\n      // attempt to prime the video element for programmatic access\n      // this isn't necessary on the desktop but shouldn't hurt\n      this.el_.play();\n\n      // playing and pausing synchronously during the transition to fullscreen\n      // can get iOS ~6.1 devices into a play/pause loop\n      this.setTimeout(function () {\n        video.pause();\n        video.webkitEnterFullScreen();\n      }, 0);\n    } else {\n      video.webkitEnterFullScreen();\n    }\n  };\n\n  /**\n   * Request that the `HTML5` Tech exit fullscreen.\n   */\n\n\n  Html5.prototype.exitFullScreen = function exitFullScreen() {\n    this.el_.webkitExitFullScreen();\n  };\n\n  /**\n   * A getter/setter for the `Html5` Tech's source object.\n   * > Note: Please use {@link Html5#setSource}\n   *\n   * @param {Tech~SourceObject} [src]\n   *        The source object you want to set on the `HTML5` techs element.\n   *\n   * @return {Tech~SourceObject|undefined}\n   *         - The current source object when a source is not passed in.\n   *         - undefined when setting\n   *\n   * @deprecated Since version 5.\n   */\n\n\n  Html5.prototype.src = function src(_src) {\n    if (_src === undefined) {\n      return this.el_.src;\n    }\n\n    // Setting src through `src` instead of `setSrc` will be deprecated\n    this.setSrc(_src);\n  };\n\n  /**\n   * Reset the tech by removing all sources and then calling\n   * {@link Html5.resetMediaElement}.\n   */\n\n\n  Html5.prototype.reset = function reset() {\n    Html5.resetMediaElement(this.el_);\n  };\n\n  /**\n   * Get the current source on the `HTML5` Tech. Falls back to returning the source from\n   * the HTML5 media element.\n   *\n   * @return {Tech~SourceObject}\n   *         The current source object from the HTML5 tech. With a fallback to the\n   *         elements source.\n   */\n\n\n  Html5.prototype.currentSrc = function currentSrc() {\n    if (this.currentSource_) {\n      return this.currentSource_.src;\n    }\n    return this.el_.currentSrc;\n  };\n\n  /**\n   * Set controls attribute for the HTML5 media Element.\n   *\n   * @param {string} val\n   *        Value to set the controls attribute to\n   */\n\n\n  Html5.prototype.setControls = function setControls(val) {\n    this.el_.controls = !!val;\n  };\n\n  /**\n   * Create and returns a remote {@link TextTrack} object.\n   *\n   * @param {string} kind\n   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)\n   *\n   * @param {string} [label]\n   *        Label to identify the text track\n   *\n   * @param {string} [language]\n   *        Two letter language abbreviation\n   *\n   * @return {TextTrack}\n   *         The TextTrack that gets created.\n   */\n\n\n  Html5.prototype.addTextTrack = function addTextTrack(kind, label, language) {\n    if (!this.featuresNativeTextTracks) {\n      return _Tech.prototype.addTextTrack.call(this, kind, label, language);\n    }\n\n    return this.el_.addTextTrack(kind, label, language);\n  };\n\n  /**\n   * Creates either native TextTrack or an emulated TextTrack depending\n   * on the value of `featuresNativeTextTracks`\n   *\n   * @param {Object} options\n   *        The object should contain the options to initialize the TextTrack with.\n   *\n   * @param {string} [options.kind]\n   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).\n   *\n   * @param {string} [options.label]\n   *        Label to identify the text track\n   *\n   * @param {string} [options.language]\n   *        Two letter language abbreviation.\n   *\n   * @param {boolean} [options.default]\n   *        Default this track to on.\n   *\n   * @param {string} [options.id]\n   *        The internal id to assign this track.\n   *\n   * @param {string} [options.src]\n   *        A source url for the track.\n   *\n   * @return {HTMLTrackElement}\n   *         The track element that gets created.\n   */\n\n\n  Html5.prototype.createRemoteTextTrack = function createRemoteTextTrack(options) {\n    if (!this.featuresNativeTextTracks) {\n      return _Tech.prototype.createRemoteTextTrack.call(this, options);\n    }\n    var htmlTrackElement = document.createElement('track');\n\n    if (options.kind) {\n      htmlTrackElement.kind = options.kind;\n    }\n    if (options.label) {\n      htmlTrackElement.label = options.label;\n    }\n    if (options.language || options.srclang) {\n      htmlTrackElement.srclang = options.language || options.srclang;\n    }\n    if (options.default) {\n      htmlTrackElement.default = options.default;\n    }\n    if (options.id) {\n      htmlTrackElement.id = options.id;\n    }\n    if (options.src) {\n      htmlTrackElement.src = options.src;\n    }\n\n    return htmlTrackElement;\n  };\n\n  /**\n   * Creates a remote text track object and returns an html track element.\n   *\n   * @param {Object} options The object should contain values for\n   * kind, language, label, and src (location of the WebVTT file)\n   * @param {Boolean} [manualCleanup=true] if set to false, the TextTrack will be\n   * automatically removed from the video element whenever the source changes\n   * @return {HTMLTrackElement} An Html Track Element.\n   * This can be an emulated {@link HTMLTrackElement} or a native one.\n   * @deprecated The default value of the \"manualCleanup\" parameter will default\n   * to \"false\" in upcoming versions of Video.js\n   */\n\n\n  Html5.prototype.addRemoteTextTrack = function addRemoteTextTrack(options, manualCleanup) {\n    var htmlTrackElement = _Tech.prototype.addRemoteTextTrack.call(this, options, manualCleanup);\n\n    if (this.featuresNativeTextTracks) {\n      this.el().appendChild(htmlTrackElement);\n    }\n\n    return htmlTrackElement;\n  };\n\n  /**\n   * Remove remote `TextTrack` from `TextTrackList` object\n   *\n   * @param {TextTrack} track\n   *        `TextTrack` object to remove\n   */\n\n\n  Html5.prototype.removeRemoteTextTrack = function removeRemoteTextTrack(track) {\n    _Tech.prototype.removeRemoteTextTrack.call(this, track);\n\n    if (this.featuresNativeTextTracks) {\n      var tracks = this.$$('track');\n\n      var i = tracks.length;\n\n      while (i--) {\n        if (track === tracks[i] || track === tracks[i].track) {\n          this.el().removeChild(tracks[i]);\n        }\n      }\n    }\n  };\n\n  /**\n   * Gets available media playback quality metrics as specified by the W3C's Media\n   * Playback Quality API.\n   *\n   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}\n   *\n   * @return {Object}\n   *         An object with supported media playback quality metrics\n   */\n\n\n  Html5.prototype.getVideoPlaybackQuality = function getVideoPlaybackQuality() {\n    if (typeof this.el().getVideoPlaybackQuality === 'function') {\n      return this.el().getVideoPlaybackQuality();\n    }\n\n    var videoPlaybackQuality = {};\n\n    if (typeof this.el().webkitDroppedFrameCount !== 'undefined' && typeof this.el().webkitDecodedFrameCount !== 'undefined') {\n      videoPlaybackQuality.droppedVideoFrames = this.el().webkitDroppedFrameCount;\n      videoPlaybackQuality.totalVideoFrames = this.el().webkitDecodedFrameCount;\n    }\n\n    if (window$1.performance && typeof window$1.performance.now === 'function') {\n      videoPlaybackQuality.creationTime = window$1.performance.now();\n    } else if (window$1.performance && window$1.performance.timing && typeof window$1.performance.timing.navigationStart === 'number') {\n      videoPlaybackQuality.creationTime = window$1.Date.now() - window$1.performance.timing.navigationStart;\n    }\n\n    return videoPlaybackQuality;\n  };\n\n  return Html5;\n}(Tech);\n\n/* HTML5 Support Testing ---------------------------------------------------- */\n\nif (isReal()) {\n\n  /**\n   * Element for testing browser HTML5 media capabilities\n   *\n   * @type {Element}\n   * @constant\n   * @private\n   */\n  Html5.TEST_VID = document.createElement('video');\n  var track = document.createElement('track');\n\n  track.kind = 'captions';\n  track.srclang = 'en';\n  track.label = 'English';\n  Html5.TEST_VID.appendChild(track);\n}\n\n/**\n * Check if HTML5 media is supported by this browser/device.\n *\n * @return {boolean}\n *         - True if HTML5 media is supported.\n *         - False if HTML5 media is not supported.\n */\nHtml5.isSupported = function () {\n  // IE with no Media Player is a LIAR! (#984)\n  try {\n    Html5.TEST_VID.volume = 0.5;\n  } catch (e) {\n    return false;\n  }\n\n  return !!(Html5.TEST_VID && Html5.TEST_VID.canPlayType);\n};\n\n/**\n * Check if the tech can support the given type\n *\n * @param {string} type\n *        The mimetype to check\n * @return {string} 'probably', 'maybe', or '' (empty string)\n */\nHtml5.canPlayType = function (type) {\n  return Html5.TEST_VID.canPlayType(type);\n};\n\n/**\n * Check if the tech can support the given source\n * @param {Object} srcObj\n *        The source object\n * @param {Object} options\n *        The options passed to the tech\n * @return {string} 'probably', 'maybe', or '' (empty string)\n */\nHtml5.canPlaySource = function (srcObj, options) {\n  return Html5.canPlayType(srcObj.type);\n};\n\n/**\n * Check if the volume can be changed in this browser/device.\n * Volume cannot be changed in a lot of mobile devices.\n * Specifically, it can't be changed from 1 on iOS.\n *\n * @return {boolean}\n *         - True if volume can be controlled\n *         - False otherwise\n */\nHtml5.canControlVolume = function () {\n  // IE will error if Windows Media Player not installed #3315\n  try {\n    var volume = Html5.TEST_VID.volume;\n\n    Html5.TEST_VID.volume = volume / 2 + 0.1;\n    return volume !== Html5.TEST_VID.volume;\n  } catch (e) {\n    return false;\n  }\n};\n\n/**\n * Check if the volume can be muted in this browser/device.\n * Some devices, e.g. iOS, don't allow changing volume\n * but permits muting/unmuting.\n *\n * @return {bolean}\n *      - True if volume can be muted\n *      - False otherwise\n */\nHtml5.canMuteVolume = function () {\n  try {\n    var muted = Html5.TEST_VID.muted;\n\n    // in some versions of iOS muted property doesn't always\n    // work, so we want to set both property and attribute\n    Html5.TEST_VID.muted = !muted;\n    if (Html5.TEST_VID.muted) {\n      setAttribute(Html5.TEST_VID, 'muted', 'muted');\n    } else {\n      removeAttribute(Html5.TEST_VID, 'muted', 'muted');\n    }\n    return muted !== Html5.TEST_VID.muted;\n  } catch (e) {\n    return false;\n  }\n};\n\n/**\n * Check if the playback rate can be changed in this browser/device.\n *\n * @return {boolean}\n *         - True if playback rate can be controlled\n *         - False otherwise\n */\nHtml5.canControlPlaybackRate = function () {\n  // Playback rate API is implemented in Android Chrome, but doesn't do anything\n  // https://github.com/videojs/video.js/issues/3180\n  if (IS_ANDROID && IS_CHROME && CHROME_VERSION < 58) {\n    return false;\n  }\n  // IE will error if Windows Media Player not installed #3315\n  try {\n    var playbackRate = Html5.TEST_VID.playbackRate;\n\n    Html5.TEST_VID.playbackRate = playbackRate / 2 + 0.1;\n    return playbackRate !== Html5.TEST_VID.playbackRate;\n  } catch (e) {\n    return false;\n  }\n};\n\n/**\n * Check if we can override a video/audio elements attributes, with\n * Object.defineProperty.\n *\n * @return {boolean}\n *         - True if builtin attributes can be overridden\n *         - False otherwise\n */\nHtml5.canOverrideAttributes = function () {\n  // if we cannot overwrite the src/innerHTML property, there is no support\n  // iOS 7 safari for instance cannot do this.\n  try {\n    var noop = function noop() {};\n\n    Object.defineProperty(document.createElement('video'), 'src', { get: noop, set: noop });\n    Object.defineProperty(document.createElement('audio'), 'src', { get: noop, set: noop });\n    Object.defineProperty(document.createElement('video'), 'innerHTML', { get: noop, set: noop });\n    Object.defineProperty(document.createElement('audio'), 'innerHTML', { get: noop, set: noop });\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * Check to see if native `TextTrack`s are supported by this browser/device.\n *\n * @return {boolean}\n *         - True if native `TextTrack`s are supported.\n *         - False otherwise\n */\nHtml5.supportsNativeTextTracks = function () {\n  return IS_ANY_SAFARI || IS_IOS && IS_CHROME;\n};\n\n/**\n * Check to see if native `VideoTrack`s are supported by this browser/device\n *\n * @return {boolean}\n *        - True if native `VideoTrack`s are supported.\n *        - False otherwise\n */\nHtml5.supportsNativeVideoTracks = function () {\n  return !!(Html5.TEST_VID && Html5.TEST_VID.videoTracks);\n};\n\n/**\n * Check to see if native `AudioTrack`s are supported by this browser/device\n *\n * @return {boolean}\n *        - True if native `AudioTrack`s are supported.\n *        - False otherwise\n */\nHtml5.supportsNativeAudioTracks = function () {\n  return !!(Html5.TEST_VID && Html5.TEST_VID.audioTracks);\n};\n\n/**\n * An array of events available on the Html5 tech.\n *\n * @private\n * @type {Array}\n */\nHtml5.Events = ['loadstart', 'suspend', 'abort', 'error', 'emptied', 'stalled', 'loadedmetadata', 'loadeddata', 'canplay', 'canplaythrough', 'playing', 'waiting', 'seeking', 'seeked', 'ended', 'durationchange', 'timeupdate', 'progress', 'play', 'pause', 'ratechange', 'resize', 'volumechange'];\n\n/**\n * Boolean indicating whether the `Tech` supports volume control.\n *\n * @type {boolean}\n * @default {@link Html5.canControlVolume}\n */\nHtml5.prototype.featuresVolumeControl = Html5.canControlVolume();\n\n/**\n * Boolean indicating whether the `Tech` supports muting volume.\n *\n * @type {bolean}\n * @default {@link Html5.canMuteVolume}\n */\nHtml5.prototype.featuresMuteControl = Html5.canMuteVolume();\n\n/**\n * Boolean indicating whether the `Tech` supports changing the speed at which the media\n * plays. Examples:\n *   - Set player to play 2x (twice) as fast\n *   - Set player to play 0.5x (half) as fast\n *\n * @type {boolean}\n * @default {@link Html5.canControlPlaybackRate}\n */\nHtml5.prototype.featuresPlaybackRate = Html5.canControlPlaybackRate();\n\n/**\n * Boolean indicating whether the `Tech` supports the `sourceset` event.\n *\n * @type {boolean}\n * @default\n */\nHtml5.prototype.featuresSourceset = Html5.canOverrideAttributes();\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports the media element\n * moving in the DOM. iOS breaks if you move the media element, so this is set this to\n * false there. Everywhere else this should be true.\n *\n * @type {boolean}\n * @default\n */\nHtml5.prototype.movingMediaElementInDOM = !IS_IOS;\n\n// TODO: Previous comment: No longer appears to be used. Can probably be removed.\n//       Is this true?\n/**\n * Boolean indicating whether the `HTML5` tech currently supports automatic media resize\n * when going into fullscreen.\n *\n * @type {boolean}\n * @default\n */\nHtml5.prototype.featuresFullscreenResize = true;\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports the progress event.\n * If this is false, manual `progress` events will be triggered instead.\n *\n * @type {boolean}\n * @default\n */\nHtml5.prototype.featuresProgressEvents = true;\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports the timeupdate event.\n * If this is false, manual `timeupdate` events will be triggered instead.\n *\n * @default\n */\nHtml5.prototype.featuresTimeupdateEvents = true;\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports native `TextTrack`s.\n *\n * @type {boolean}\n * @default {@link Html5.supportsNativeTextTracks}\n */\nHtml5.prototype.featuresNativeTextTracks = Html5.supportsNativeTextTracks();\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports native `VideoTrack`s.\n *\n * @type {boolean}\n * @default {@link Html5.supportsNativeVideoTracks}\n */\nHtml5.prototype.featuresNativeVideoTracks = Html5.supportsNativeVideoTracks();\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports native `AudioTrack`s.\n *\n * @type {boolean}\n * @default {@link Html5.supportsNativeAudioTracks}\n */\nHtml5.prototype.featuresNativeAudioTracks = Html5.supportsNativeAudioTracks();\n\n// HTML5 Feature detection and Device Fixes --------------------------------- //\nvar canPlayType = Html5.TEST_VID && Html5.TEST_VID.constructor.prototype.canPlayType;\nvar mpegurlRE = /^application\\/(?:x-|vnd\\.apple\\.)mpegurl/i;\n\nHtml5.patchCanPlayType = function () {\n\n  // Android 4.0 and above can play HLS to some extent but it reports being unable to do so\n  // Firefox and Chrome report correctly\n  if (ANDROID_VERSION >= 4.0 && !IS_FIREFOX && !IS_CHROME) {\n    Html5.TEST_VID.constructor.prototype.canPlayType = function (type) {\n      if (type && mpegurlRE.test(type)) {\n        return 'maybe';\n      }\n      return canPlayType.call(this, type);\n    };\n  }\n};\n\nHtml5.unpatchCanPlayType = function () {\n  var r = Html5.TEST_VID.constructor.prototype.canPlayType;\n\n  Html5.TEST_VID.constructor.prototype.canPlayType = canPlayType;\n  return r;\n};\n\n// by default, patch the media element\nHtml5.patchCanPlayType();\n\nHtml5.disposeMediaElement = function (el) {\n  if (!el) {\n    return;\n  }\n\n  if (el.parentNode) {\n    el.parentNode.removeChild(el);\n  }\n\n  // remove any child track or source nodes to prevent their loading\n  while (el.hasChildNodes()) {\n    el.removeChild(el.firstChild);\n  }\n\n  // remove any src reference. not setting `src=''` because that causes a warning\n  // in firefox\n  el.removeAttribute('src');\n\n  // force the media element to update its loading state by calling load()\n  // however IE on Windows 7N has a bug that throws an error so need a try/catch (#793)\n  if (typeof el.load === 'function') {\n    // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)\n    (function () {\n      try {\n        el.load();\n      } catch (e) {\n        // not supported\n      }\n    })();\n  }\n};\n\nHtml5.resetMediaElement = function (el) {\n  if (!el) {\n    return;\n  }\n\n  var sources = el.querySelectorAll('source');\n  var i = sources.length;\n\n  while (i--) {\n    el.removeChild(sources[i]);\n  }\n\n  // remove any src reference.\n  // not setting `src=''` because that throws an error\n  el.removeAttribute('src');\n\n  if (typeof el.load === 'function') {\n    // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)\n    (function () {\n      try {\n        el.load();\n      } catch (e) {\n        // satisfy linter\n      }\n    })();\n  }\n};\n\n/* Native HTML5 element property wrapping ----------------------------------- */\n// Wrap native boolean attributes with getters that check both property and attribute\n// The list is as followed:\n// muted, defaultMuted, autoplay, controls, loop, playsinline\n[\n/**\n * Get the value of `muted` from the media element. `muted` indicates\n * that the volume for the media should be set to silent. This does not actually change\n * the `volume` attribute.\n *\n * @method Html5#muted\n * @return {boolean}\n *         - True if the value of `volume` should be ignored and the audio set to silent.\n *         - False if the value of `volume` should be used.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}\n */\n'muted',\n\n/**\n * Get the value of `defaultMuted` from the media element. `defaultMuted` indicates\n * whether the media should start muted or not. Only changes the default state of the\n * media. `muted` and `defaultMuted` can have different values. {@link Html5#muted} indicates the\n * current state.\n *\n * @method Html5#defaultMuted\n * @return {boolean}\n *         - The value of `defaultMuted` from the media element.\n *         - True indicates that the media should start muted.\n *         - False indicates that the media should not start muted\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}\n */\n'defaultMuted',\n\n/**\n * Get the value of `autoplay` from the media element. `autoplay` indicates\n * that the media should start to play as soon as the page is ready.\n *\n * @method Html5#autoplay\n * @return {boolean}\n *         - The value of `autoplay` from the media element.\n *         - True indicates that the media should start as soon as the page loads.\n *         - False indicates that the media should not start as soon as the page loads.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}\n */\n'autoplay',\n\n/**\n * Get the value of `controls` from the media element. `controls` indicates\n * whether the native media controls should be shown or hidden.\n *\n * @method Html5#controls\n * @return {boolean}\n *         - The value of `controls` from the media element.\n *         - True indicates that native controls should be showing.\n *         - False indicates that native controls should be hidden.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-controls}\n */\n'controls',\n\n/**\n * Get the value of `loop` from the media element. `loop` indicates\n * that the media should return to the start of the media and continue playing once\n * it reaches the end.\n *\n * @method Html5#loop\n * @return {boolean}\n *         - The value of `loop` from the media element.\n *         - True indicates that playback should seek back to start once\n *           the end of a media is reached.\n *         - False indicates that playback should not loop back to the start when the\n *           end of the media is reached.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}\n */\n'loop',\n\n/**\n * Get the value of `playsinline` from the media element. `playsinline` indicates\n * to the browser that non-fullscreen playback is preferred when fullscreen\n * playback is the native default, such as in iOS Safari.\n *\n * @method Html5#playsinline\n * @return {boolean}\n *         - The value of `playsinline` from the media element.\n *         - True indicates that the media should play inline.\n *         - False indicates that the media should not play inline.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}\n */\n'playsinline'].forEach(function (prop) {\n  Html5.prototype[prop] = function () {\n    return this.el_[prop] || this.el_.hasAttribute(prop);\n  };\n});\n\n// Wrap native boolean attributes with setters that set both property and attribute\n// The list is as followed:\n// setMuted, setDefaultMuted, setAutoplay, setLoop, setPlaysinline\n// setControls is special-cased above\n[\n/**\n * Set the value of `muted` on the media element. `muted` indicates that the current\n * audio level should be silent.\n *\n * @method Html5#setMuted\n * @param {boolean} muted\n *        - True if the audio should be set to silent\n *        - False otherwise\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}\n */\n'muted',\n\n/**\n * Set the value of `defaultMuted` on the media element. `defaultMuted` indicates that the current\n * audio level should be silent, but will only effect the muted level on intial playback..\n *\n * @method Html5.prototype.setDefaultMuted\n * @param {boolean} defaultMuted\n *        - True if the audio should be set to silent\n *        - False otherwise\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}\n */\n'defaultMuted',\n\n/**\n * Set the value of `autoplay` on the media element. `autoplay` indicates\n * that the media should start to play as soon as the page is ready.\n *\n * @method Html5#setAutoplay\n * @param {boolean} autoplay\n *         - True indicates that the media should start as soon as the page loads.\n *         - False indicates that the media should not start as soon as the page loads.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}\n */\n'autoplay',\n\n/**\n * Set the value of `loop` on the media element. `loop` indicates\n * that the media should return to the start of the media and continue playing once\n * it reaches the end.\n *\n * @method Html5#setLoop\n * @param {boolean} loop\n *         - True indicates that playback should seek back to start once\n *           the end of a media is reached.\n *         - False indicates that playback should not loop back to the start when the\n *           end of the media is reached.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}\n */\n'loop',\n\n/**\n * Set the value of `playsinline` from the media element. `playsinline` indicates\n * to the browser that non-fullscreen playback is preferred when fullscreen\n * playback is the native default, such as in iOS Safari.\n *\n * @method Html5#setPlaysinline\n * @param {boolean} playsinline\n *         - True indicates that the media should play inline.\n *         - False indicates that the media should not play inline.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}\n */\n'playsinline'].forEach(function (prop) {\n  Html5.prototype['set' + toTitleCase(prop)] = function (v) {\n    this.el_[prop] = v;\n\n    if (v) {\n      this.el_.setAttribute(prop, prop);\n    } else {\n      this.el_.removeAttribute(prop);\n    }\n  };\n});\n\n// Wrap native properties with a getter\n// The list is as followed\n// paused, currentTime, buffered, volume, poster, preload, error, seeking\n// seekable, ended, playbackRate, defaultPlaybackRate, played, networkState\n// readyState, videoWidth, videoHeight\n[\n/**\n * Get the value of `paused` from the media element. `paused` indicates whether the media element\n * is currently paused or not.\n *\n * @method Html5#paused\n * @return {boolean}\n *         The value of `paused` from the media element.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-paused}\n */\n'paused',\n\n/**\n * Get the value of `currentTime` from the media element. `currentTime` indicates\n * the current second that the media is at in playback.\n *\n * @method Html5#currentTime\n * @return {number}\n *         The value of `currentTime` from the media element.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-currenttime}\n */\n'currentTime',\n\n/**\n * Get the value of `buffered` from the media element. `buffered` is a `TimeRange`\n * object that represents the parts of the media that are already downloaded and\n * available for playback.\n *\n * @method Html5#buffered\n * @return {TimeRange}\n *         The value of `buffered` from the media element.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-buffered}\n */\n'buffered',\n\n/**\n * Get the value of `volume` from the media element. `volume` indicates\n * the current playback volume of audio for a media. `volume` will be a value from 0\n * (silent) to 1 (loudest and default).\n *\n * @method Html5#volume\n * @return {number}\n *         The value of `volume` from the media element. Value will be between 0-1.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}\n */\n'volume',\n\n/**\n * Get the value of `poster` from the media element. `poster` indicates\n * that the url of an image file that can/will be shown when no media data is available.\n *\n * @method Html5#poster\n * @return {string}\n *         The value of `poster` from the media element. Value will be a url to an\n *         image.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-video-poster}\n */\n'poster',\n\n/**\n * Get the value of `preload` from the media element. `preload` indicates\n * what should download before the media is interacted with. It can have the following\n * values:\n * - none: nothing should be downloaded\n * - metadata: poster and the first few frames of the media may be downloaded to get\n *   media dimensions and other metadata\n * - auto: allow the media and metadata for the media to be downloaded before\n *    interaction\n *\n * @method Html5#preload\n * @return {string}\n *         The value of `preload` from the media element. Will be 'none', 'metadata',\n *         or 'auto'.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}\n */\n'preload',\n\n/**\n * Get the value of the `error` from the media element. `error` indicates any\n * MediaError that may have occurred during playback. If error returns null there is no\n * current error.\n *\n * @method Html5#error\n * @return {MediaError|null}\n *         The value of `error` from the media element. Will be `MediaError` if there\n *         is a current error and null otherwise.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-error}\n */\n'error',\n\n/**\n * Get the value of `seeking` from the media element. `seeking` indicates whether the\n * media is currently seeking to a new position or not.\n *\n * @method Html5#seeking\n * @return {boolean}\n *         - The value of `seeking` from the media element.\n *         - True indicates that the media is currently seeking to a new position.\n *         - False indicates that the media is not seeking to a new position at this time.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seeking}\n */\n'seeking',\n\n/**\n * Get the value of `seekable` from the media element. `seekable` returns a\n * `TimeRange` object indicating ranges of time that can currently be `seeked` to.\n *\n * @method Html5#seekable\n * @return {TimeRange}\n *         The value of `seekable` from the media element. A `TimeRange` object\n *         indicating the current ranges of time that can be seeked to.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seekable}\n */\n'seekable',\n\n/**\n * Get the value of `ended` from the media element. `ended` indicates whether\n * the media has reached the end or not.\n *\n * @method Html5#ended\n * @return {boolean}\n *         - The value of `ended` from the media element.\n *         - True indicates that the media has ended.\n *         - False indicates that the media has not ended.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-ended}\n */\n'ended',\n\n/**\n * Get the value of `playbackRate` from the media element. `playbackRate` indicates\n * the rate at which the media is currently playing back. Examples:\n *   - if playbackRate is set to 2, media will play twice as fast.\n *   - if playbackRate is set to 0.5, media will play half as fast.\n *\n * @method Html5#playbackRate\n * @return {number}\n *         The value of `playbackRate` from the media element. A number indicating\n *         the current playback speed of the media, where 1 is normal speed.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}\n */\n'playbackRate',\n\n/**\n * Get the value of `defaultPlaybackRate` from the media element. `defaultPlaybackRate` indicates\n * the rate at which the media is currently playing back. This value will not indicate the current\n * `playbackRate` after playback has started, use {@link Html5#playbackRate} for that.\n *\n * Examples:\n *   - if defaultPlaybackRate is set to 2, media will play twice as fast.\n *   - if defaultPlaybackRate is set to 0.5, media will play half as fast.\n *\n * @method Html5.prototype.defaultPlaybackRate\n * @return {number}\n *         The value of `defaultPlaybackRate` from the media element. A number indicating\n *         the current playback speed of the media, where 1 is normal speed.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}\n */\n'defaultPlaybackRate',\n\n/**\n * Get the value of `played` from the media element. `played` returns a `TimeRange`\n * object representing points in the media timeline that have been played.\n *\n * @method Html5#played\n * @return {TimeRange}\n *         The value of `played` from the media element. A `TimeRange` object indicating\n *         the ranges of time that have been played.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-played}\n */\n'played',\n\n/**\n * Get the value of `networkState` from the media element. `networkState` indicates\n * the current network state. It returns an enumeration from the following list:\n * - 0: NETWORK_EMPTY\n * - 1: NETWORK_IDLE\n * - 2: NETWORK_LOADING\n * - 3: NETWORK_NO_SOURCE\n *\n * @method Html5#networkState\n * @return {number}\n *         The value of `networkState` from the media element. This will be a number\n *         from the list in the description.\n *\n * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-networkstate}\n */\n'networkState',\n\n/**\n * Get the value of `readyState` from the media element. `readyState` indicates\n * the current state of the media element. It returns an enumeration from the\n * following list:\n * - 0: HAVE_NOTHING\n * - 1: HAVE_METADATA\n * - 2: HAVE_CURRENT_DATA\n * - 3: HAVE_FUTURE_DATA\n * - 4: HAVE_ENOUGH_DATA\n *\n * @method Html5#readyState\n * @return {number}\n *         The value of `readyState` from the media element. This will be a number\n *         from the list in the description.\n *\n * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#ready-states}\n */\n'readyState',\n\n/**\n * Get the value of `videoWidth` from the video element. `videoWidth` indicates\n * the current width of the video in css pixels.\n *\n * @method Html5#videoWidth\n * @return {number}\n *         The value of `videoWidth` from the video element. This will be a number\n *         in css pixels.\n *\n * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}\n */\n'videoWidth',\n\n/**\n * Get the value of `videoHeight` from the video element. `videoHeight` indicates\n * the current height of the video in css pixels.\n *\n * @method Html5#videoHeight\n * @return {number}\n *         The value of `videoHeight` from the video element. This will be a number\n *         in css pixels.\n *\n * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}\n */\n'videoHeight'].forEach(function (prop) {\n  Html5.prototype[prop] = function () {\n    return this.el_[prop];\n  };\n});\n\n// Wrap native properties with a setter in this format:\n// set + toTitleCase(name)\n// The list is as follows:\n// setVolume, setSrc, setPoster, setPreload, setPlaybackRate, setDefaultPlaybackRate\n[\n/**\n * Set the value of `volume` on the media element. `volume` indicates the current\n * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and\n * so on.\n *\n * @method Html5#setVolume\n * @param {number} percentAsDecimal\n *        The volume percent as a decimal. Valid range is from 0-1.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}\n */\n'volume',\n\n/**\n * Set the value of `src` on the media element. `src` indicates the current\n * {@link Tech~SourceObject} for the media.\n *\n * @method Html5#setSrc\n * @param {Tech~SourceObject} src\n *        The source object to set as the current source.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-src}\n */\n'src',\n\n/**\n * Set the value of `poster` on the media element. `poster` is the url to\n * an image file that can/will be shown when no media data is available.\n *\n * @method Html5#setPoster\n * @param {string} poster\n *        The url to an image that should be used as the `poster` for the media\n *        element.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-poster}\n */\n'poster',\n\n/**\n * Set the value of `preload` on the media element. `preload` indicates\n * what should download before the media is interacted with. It can have the following\n * values:\n * - none: nothing should be downloaded\n * - metadata: poster and the first few frames of the media may be downloaded to get\n *   media dimensions and other metadata\n * - auto: allow the media and metadata for the media to be downloaded before\n *    interaction\n *\n * @method Html5#setPreload\n * @param {string} preload\n *         The value of `preload` to set on the media element. Must be 'none', 'metadata',\n *         or 'auto'.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}\n */\n'preload',\n\n/**\n * Set the value of `playbackRate` on the media element. `playbackRate` indicates\n * the rate at which the media should play back. Examples:\n *   - if playbackRate is set to 2, media will play twice as fast.\n *   - if playbackRate is set to 0.5, media will play half as fast.\n *\n * @method Html5#setPlaybackRate\n * @return {number}\n *         The value of `playbackRate` from the media element. A number indicating\n *         the current playback speed of the media, where 1 is normal speed.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}\n */\n'playbackRate',\n\n/**\n * Set the value of `defaultPlaybackRate` on the media element. `defaultPlaybackRate` indicates\n * the rate at which the media should play back upon initial startup. Changing this value\n * after a video has started will do nothing. Instead you should used {@link Html5#setPlaybackRate}.\n *\n * Example Values:\n *   - if playbackRate is set to 2, media will play twice as fast.\n *   - if playbackRate is set to 0.5, media will play half as fast.\n *\n * @method Html5.prototype.setDefaultPlaybackRate\n * @return {number}\n *         The value of `defaultPlaybackRate` from the media element. A number indicating\n *         the current playback speed of the media, where 1 is normal speed.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultplaybackrate}\n */\n'defaultPlaybackRate'].forEach(function (prop) {\n  Html5.prototype['set' + toTitleCase(prop)] = function (v) {\n    this.el_[prop] = v;\n  };\n});\n\n// wrap native functions with a function\n// The list is as follows:\n// pause, load, play\n[\n/**\n * A wrapper around the media elements `pause` function. This will call the `HTML5`\n * media elements `pause` function.\n *\n * @method Html5#pause\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-pause}\n */\n'pause',\n\n/**\n * A wrapper around the media elements `load` function. This will call the `HTML5`s\n * media element `load` function.\n *\n * @method Html5#load\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-load}\n */\n'load',\n\n/**\n * A wrapper around the media elements `play` function. This will call the `HTML5`s\n * media element `play` function.\n *\n * @method Html5#play\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-play}\n */\n'play'].forEach(function (prop) {\n  Html5.prototype[prop] = function () {\n    return this.el_[prop]();\n  };\n});\n\nTech.withSourceHandlers(Html5);\n\n/**\n * Native source handler for Html5, simply passes the source to the media element.\n *\n * @property {Tech~SourceObject} source\n *        The source object\n *\n * @property {Html5} tech\n *        The instance of the HTML5 tech.\n */\nHtml5.nativeSourceHandler = {};\n\n/**\n * Check if the media element can play the given mime type.\n *\n * @param {string} type\n *        The mimetype to check\n *\n * @return {string}\n *         'probably', 'maybe', or '' (empty string)\n */\nHtml5.nativeSourceHandler.canPlayType = function (type) {\n  // IE without MediaPlayer throws an error (#519)\n  try {\n    return Html5.TEST_VID.canPlayType(type);\n  } catch (e) {\n    return '';\n  }\n};\n\n/**\n * Check if the media element can handle a source natively.\n *\n * @param {Tech~SourceObject} source\n *         The source object\n *\n * @param {Object} [options]\n *         Options to be passed to the tech.\n *\n * @return {string}\n *         'probably', 'maybe', or '' (empty string).\n */\nHtml5.nativeSourceHandler.canHandleSource = function (source, options) {\n\n  // If a type was provided we should rely on that\n  if (source.type) {\n    return Html5.nativeSourceHandler.canPlayType(source.type);\n\n    // If no type, fall back to checking 'video/[EXTENSION]'\n  } else if (source.src) {\n    var ext = getFileExtension(source.src);\n\n    return Html5.nativeSourceHandler.canPlayType('video/' + ext);\n  }\n\n  return '';\n};\n\n/**\n * Pass the source to the native media element.\n *\n * @param {Tech~SourceObject} source\n *        The source object\n *\n * @param {Html5} tech\n *        The instance of the Html5 tech\n *\n * @param {Object} [options]\n *        The options to pass to the source\n */\nHtml5.nativeSourceHandler.handleSource = function (source, tech, options) {\n  tech.setSrc(source.src);\n};\n\n/**\n * A noop for the native dispose function, as cleanup is not needed.\n */\nHtml5.nativeSourceHandler.dispose = function () {};\n\n// Register the native source handler\nHtml5.registerSourceHandler(Html5.nativeSourceHandler);\n\nTech.registerTech('Html5', Html5);\n\nvar _templateObject$2 = taggedTemplateLiteralLoose(['\\n        Using the tech directly can be dangerous. I hope you know what you\\'re doing.\\n        See https://github.com/videojs/video.js/issues/2617 for more info.\\n      '], ['\\n        Using the tech directly can be dangerous. I hope you know what you\\'re doing.\\n        See https://github.com/videojs/video.js/issues/2617 for more info.\\n      ']);\n\n// The following tech events are simply re-triggered\n// on the player when they happen\nvar TECH_EVENTS_RETRIGGER = [\n/**\n * Fired while the user agent is downloading media data.\n *\n * @event Player#progress\n * @type {EventTarget~Event}\n */\n/**\n * Retrigger the `progress` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechProgress_\n * @fires Player#progress\n * @listens Tech#progress\n */\n'progress',\n\n/**\n * Fires when the loading of an audio/video is aborted.\n *\n * @event Player#abort\n * @type {EventTarget~Event}\n */\n/**\n * Retrigger the `abort` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechAbort_\n * @fires Player#abort\n * @listens Tech#abort\n */\n'abort',\n\n/**\n * Fires when the browser is intentionally not getting media data.\n *\n * @event Player#suspend\n * @type {EventTarget~Event}\n */\n/**\n * Retrigger the `suspend` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechSuspend_\n * @fires Player#suspend\n * @listens Tech#suspend\n */\n'suspend',\n\n/**\n * Fires when the current playlist is empty.\n *\n * @event Player#emptied\n * @type {EventTarget~Event}\n */\n/**\n * Retrigger the `emptied` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechEmptied_\n * @fires Player#emptied\n * @listens Tech#emptied\n */\n'emptied',\n/**\n * Fires when the browser is trying to get media data, but data is not available.\n *\n * @event Player#stalled\n * @type {EventTarget~Event}\n */\n/**\n * Retrigger the `stalled` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechStalled_\n * @fires Player#stalled\n * @listens Tech#stalled\n */\n'stalled',\n\n/**\n * Fires when the browser has loaded meta data for the audio/video.\n *\n * @event Player#loadedmetadata\n * @type {EventTarget~Event}\n */\n/**\n * Retrigger the `stalled` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechLoadedmetadata_\n * @fires Player#loadedmetadata\n * @listens Tech#loadedmetadata\n */\n'loadedmetadata',\n\n/**\n * Fires when the browser has loaded the current frame of the audio/video.\n *\n * @event Player#loadeddata\n * @type {event}\n */\n/**\n * Retrigger the `loadeddata` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechLoaddeddata_\n * @fires Player#loadeddata\n * @listens Tech#loadeddata\n */\n'loadeddata',\n\n/**\n * Fires when the current playback position has changed.\n *\n * @event Player#timeupdate\n * @type {event}\n */\n/**\n * Retrigger the `timeupdate` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechTimeUpdate_\n * @fires Player#timeupdate\n * @listens Tech#timeupdate\n */\n'timeupdate',\n\n/**\n * Fires when the video's intrinsic dimensions change\n *\n * @event Player#resize\n * @type {event}\n */\n/**\n * Retrigger the `resize` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechResize_\n * @fires Player#resize\n * @listens Tech#resize\n */\n'resize',\n\n/**\n * Fires when the volume has been changed\n *\n * @event Player#volumechange\n * @type {event}\n */\n/**\n * Retrigger the `volumechange` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechVolumechange_\n * @fires Player#volumechange\n * @listens Tech#volumechange\n */\n'volumechange',\n\n/**\n * Fires when the text track has been changed\n *\n * @event Player#texttrackchange\n * @type {event}\n */\n/**\n * Retrigger the `texttrackchange` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechTexttrackchange_\n * @fires Player#texttrackchange\n * @listens Tech#texttrackchange\n */\n'texttrackchange'];\n\n// events to queue when playback rate is zero\n// this is a hash for the sole purpose of mapping non-camel-cased event names\n// to camel-cased function names\nvar TECH_EVENTS_QUEUE = {\n  canplay: 'CanPlay',\n  canplaythrough: 'CanPlayThrough',\n  playing: 'Playing',\n  seeked: 'Seeked'\n};\n\n/**\n * An instance of the `Player` class is created when any of the Video.js setup methods\n * are used to initialize a video.\n *\n * After an instance has been created it can be accessed globally in two ways:\n * 1. By calling `videojs('example_video_1');`\n * 2. By using it directly via  `videojs.players.example_video_1;`\n *\n * @extends Component\n */\n\nvar Player = function (_Component) {\n  inherits(Player, _Component);\n\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Element} tag\n   *        The original video DOM element used for configuring options.\n   *\n   * @param {Object} [options]\n   *        Object of option names and values.\n   *\n   * @param {Component~ReadyCallback} [ready]\n   *        Ready callback function.\n   */\n  function Player(tag, options, ready) {\n    classCallCheck(this, Player);\n\n    // Make sure tag ID exists\n    tag.id = tag.id || options.id || 'vjs_video_' + newGUID();\n\n    // Set Options\n    // The options argument overrides options set in the video tag\n    // which overrides globally set options.\n    // This latter part coincides with the load order\n    // (tag must exist before Player)\n    options = assign(Player.getTagSettings(tag), options);\n\n    // Delay the initialization of children because we need to set up\n    // player properties first, and can't use `this` before `super()`\n    options.initChildren = false;\n\n    // Same with creating the element\n    options.createEl = false;\n\n    // don't auto mixin the evented mixin\n    options.evented = false;\n\n    // we don't want the player to report touch activity on itself\n    // see enableTouchActivity in Component\n    options.reportTouchActivity = false;\n\n    // If language is not set, get the closest lang attribute\n    if (!options.language) {\n      if (typeof tag.closest === 'function') {\n        var closest = tag.closest('[lang]');\n\n        if (closest && closest.getAttribute) {\n          options.language = closest.getAttribute('lang');\n        }\n      } else {\n        var element = tag;\n\n        while (element && element.nodeType === 1) {\n          if (getAttributes(element).hasOwnProperty('lang')) {\n            options.language = element.getAttribute('lang');\n            break;\n          }\n          element = element.parentNode;\n        }\n      }\n    }\n\n    // Run base component initializing with new options\n\n    // Tracks when a tech changes the poster\n    var _this = possibleConstructorReturn(this, _Component.call(this, null, options, ready));\n\n    _this.isPosterFromTech_ = false;\n\n    // Holds callback info that gets queued when playback rate is zero\n    // and a seek is happening\n    _this.queuedCallbacks_ = [];\n\n    // Turn off API access because we're loading a new tech that might load asynchronously\n    _this.isReady_ = false;\n\n    // Init state hasStarted_\n    _this.hasStarted_ = false;\n\n    // Init state userActive_\n    _this.userActive_ = false;\n\n    // if the global option object was accidentally blown away by\n    // someone, bail early with an informative error\n    if (!_this.options_ || !_this.options_.techOrder || !_this.options_.techOrder.length) {\n      throw new Error('No techOrder specified. Did you overwrite ' + 'videojs.options instead of just changing the ' + 'properties you want to override?');\n    }\n\n    // Store the original tag used to set options\n    _this.tag = tag;\n\n    // Store the tag attributes used to restore html5 element\n    _this.tagAttributes = tag && getAttributes(tag);\n\n    // Update current language\n    _this.language(_this.options_.language);\n\n    // Update Supported Languages\n    if (options.languages) {\n      // Normalise player option languages to lowercase\n      var languagesToLower = {};\n\n      Object.getOwnPropertyNames(options.languages).forEach(function (name$$1) {\n        languagesToLower[name$$1.toLowerCase()] = options.languages[name$$1];\n      });\n      _this.languages_ = languagesToLower;\n    } else {\n      _this.languages_ = Player.prototype.options_.languages;\n    }\n\n    // Cache for video property values.\n    _this.cache_ = {};\n\n    // Set poster\n    _this.poster_ = options.poster || '';\n\n    // Set controls\n    _this.controls_ = !!options.controls;\n\n    // Set default values for lastVolume\n    _this.cache_.lastVolume = 1;\n\n    // Original tag settings stored in options\n    // now remove immediately so native controls don't flash.\n    // May be turned back on by HTML5 tech if nativeControlsForTouch is true\n    tag.controls = false;\n    tag.removeAttribute('controls');\n\n    // the attribute overrides the option\n    if (tag.hasAttribute('autoplay')) {\n      _this.options_.autoplay = true;\n    } else {\n      // otherwise use the setter to validate and\n      // set the correct value.\n      _this.autoplay(_this.options_.autoplay);\n    }\n\n    /*\n     * Store the internal state of scrubbing\n     *\n     * @private\n     * @return {Boolean} True if the user is scrubbing\n     */\n    _this.scrubbing_ = false;\n\n    _this.el_ = _this.createEl();\n\n    // Set default value for lastPlaybackRate\n    _this.cache_.lastPlaybackRate = _this.defaultPlaybackRate();\n\n    // Make this an evented object and use `el_` as its event bus.\n    evented(_this, { eventBusKey: 'el_' });\n\n    // We also want to pass the original player options to each component and plugin\n    // as well so they don't need to reach back into the player for options later.\n    // We also need to do another copy of this.options_ so we don't end up with\n    // an infinite loop.\n    var playerOptionsCopy = mergeOptions(_this.options_);\n\n    // Load plugins\n    if (options.plugins) {\n      var plugins = options.plugins;\n\n      Object.keys(plugins).forEach(function (name$$1) {\n        if (typeof this[name$$1] === 'function') {\n          this[name$$1](plugins[name$$1]);\n        } else {\n          throw new Error('plugin \"' + name$$1 + '\" does not exist');\n        }\n      }, _this);\n    }\n\n    _this.options_.playerOptions = playerOptionsCopy;\n\n    _this.middleware_ = [];\n\n    _this.initChildren();\n\n    // Set isAudio based on whether or not an audio tag was used\n    _this.isAudio(tag.nodeName.toLowerCase() === 'audio');\n\n    // Update controls className. Can't do this when the controls are initially\n    // set because the element doesn't exist yet.\n    if (_this.controls()) {\n      _this.addClass('vjs-controls-enabled');\n    } else {\n      _this.addClass('vjs-controls-disabled');\n    }\n\n    // Set ARIA label and region role depending on player type\n    _this.el_.setAttribute('role', 'region');\n    if (_this.isAudio()) {\n      _this.el_.setAttribute('aria-label', _this.localize('Audio Player'));\n    } else {\n      _this.el_.setAttribute('aria-label', _this.localize('Video Player'));\n    }\n\n    if (_this.isAudio()) {\n      _this.addClass('vjs-audio');\n    }\n\n    if (_this.flexNotSupported_()) {\n      _this.addClass('vjs-no-flex');\n    }\n\n    // TODO: Make this smarter. Toggle user state between touching/mousing\n    // using events, since devices can have both touch and mouse events.\n    // if (browser.TOUCH_ENABLED) {\n    //   this.addClass('vjs-touch-enabled');\n    // }\n\n    // iOS Safari has broken hover handling\n    if (!IS_IOS) {\n      _this.addClass('vjs-workinghover');\n    }\n\n    // Make player easily findable by ID\n    Player.players[_this.id_] = _this;\n\n    // Add a major version class to aid css in plugins\n    var majorVersion = version.split('.')[0];\n\n    _this.addClass('vjs-v' + majorVersion);\n\n    // When the player is first initialized, trigger activity so components\n    // like the control bar show themselves if needed\n    _this.userActive(true);\n    _this.reportUserActivity();\n\n    _this.one('play', _this.listenForUserActivity_);\n    _this.on('fullscreenchange', _this.handleFullscreenChange_);\n    _this.on('stageclick', _this.handleStageClick_);\n\n    _this.changingSrc_ = false;\n    _this.playWaitingForReady_ = false;\n    _this.playOnLoadstart_ = null;\n    return _this;\n  }\n\n  /**\n   * Destroys the video player and does any necessary cleanup.\n   *\n   * This is especially helpful if you are dynamically adding and removing videos\n   * to/from the DOM.\n   *\n   * @fires Player#dispose\n   */\n\n\n  Player.prototype.dispose = function dispose() {\n    /**\n     * Called when the player is being disposed of.\n     *\n     * @event Player#dispose\n     * @type {EventTarget~Event}\n     */\n    this.trigger('dispose');\n    // prevent dispose from being called twice\n    this.off('dispose');\n\n    if (this.styleEl_ && this.styleEl_.parentNode) {\n      this.styleEl_.parentNode.removeChild(this.styleEl_);\n      this.styleEl_ = null;\n    }\n\n    // Kill reference to this player\n    Player.players[this.id_] = null;\n\n    if (this.tag && this.tag.player) {\n      this.tag.player = null;\n    }\n\n    if (this.el_ && this.el_.player) {\n      this.el_.player = null;\n    }\n\n    if (this.tech_) {\n      this.tech_.dispose();\n      this.isPosterFromTech_ = false;\n      this.poster_ = '';\n    }\n\n    if (this.playerElIngest_) {\n      this.playerElIngest_ = null;\n    }\n\n    if (this.tag) {\n      this.tag = null;\n    }\n\n    clearCacheForPlayer(this);\n\n    // the actual .el_ is removed here\n    _Component.prototype.dispose.call(this);\n  };\n\n  /**\n   * Create the `Player`'s DOM element.\n   *\n   * @return {Element}\n   *         The DOM element that gets created.\n   */\n\n\n  Player.prototype.createEl = function createEl$$1() {\n    var tag = this.tag;\n    var el = void 0;\n    var playerElIngest = this.playerElIngest_ = tag.parentNode && tag.parentNode.hasAttribute && tag.parentNode.hasAttribute('data-vjs-player');\n    var divEmbed = this.tag.tagName.toLowerCase() === 'video-js';\n\n    if (playerElIngest) {\n      el = this.el_ = tag.parentNode;\n    } else if (!divEmbed) {\n      el = this.el_ = _Component.prototype.createEl.call(this, 'div');\n    }\n\n    // Copy over all the attributes from the tag, including ID and class\n    // ID will now reference player box, not the video tag\n    var attrs = getAttributes(tag);\n\n    if (divEmbed) {\n      el = this.el_ = tag;\n      tag = this.tag = document.createElement('video');\n      while (el.children.length) {\n        tag.appendChild(el.firstChild);\n      }\n\n      if (!hasClass(el, 'video-js')) {\n        addClass(el, 'video-js');\n      }\n\n      el.appendChild(tag);\n\n      playerElIngest = this.playerElIngest_ = el;\n      // move properties over from our custom `video-js` element\n      // to our new `video` element. This will move things like\n      // `src` or `controls` that were set via js before the player\n      // was initialized.\n      Object.keys(el).forEach(function (k) {\n        tag[k] = el[k];\n      });\n    }\n\n    // set tabindex to -1 to remove the video element from the focus order\n    tag.setAttribute('tabindex', '-1');\n    attrs.tabindex = '-1';\n\n    // Workaround for #4583 (JAWS+IE doesn't announce BPB or play button)\n    // See https://github.com/FreedomScientific/VFO-standards-support/issues/78\n    // Note that we can't detect if JAWS is being used, but this ARIA attribute\n    //  doesn't change behavior of IE11 if JAWS is not being used\n    if (IE_VERSION) {\n      tag.setAttribute('role', 'application');\n      attrs.role = 'application';\n    }\n\n    // Remove width/height attrs from tag so CSS can make it 100% width/height\n    tag.removeAttribute('width');\n    tag.removeAttribute('height');\n\n    if ('width' in attrs) {\n      delete attrs.width;\n    }\n    if ('height' in attrs) {\n      delete attrs.height;\n    }\n\n    Object.getOwnPropertyNames(attrs).forEach(function (attr) {\n      // don't copy over the class attribute to the player element when we're in a div embed\n      // the class is already set up properly in the divEmbed case\n      // and we want to make sure that the `video-js` class doesn't get lost\n      if (!(divEmbed && attr === 'class')) {\n        el.setAttribute(attr, attrs[attr]);\n      }\n\n      if (divEmbed) {\n        tag.setAttribute(attr, attrs[attr]);\n      }\n    });\n\n    // Update tag id/class for use as HTML5 playback tech\n    // Might think we should do this after embedding in container so .vjs-tech class\n    // doesn't flash 100% width/height, but class only applies with .video-js parent\n    tag.playerId = tag.id;\n    tag.id += '_html5_api';\n    tag.className = 'vjs-tech';\n\n    // Make player findable on elements\n    tag.player = el.player = this;\n    // Default state of video is paused\n    this.addClass('vjs-paused');\n\n    // Add a style element in the player that we'll use to set the width/height\n    // of the player in a way that's still overrideable by CSS, just like the\n    // video element\n    if (window$1.VIDEOJS_NO_DYNAMIC_STYLE !== true) {\n      this.styleEl_ = createStyleElement('vjs-styles-dimensions');\n      var defaultsStyleEl = $('.vjs-styles-defaults');\n      var head = $('head');\n\n      head.insertBefore(this.styleEl_, defaultsStyleEl ? defaultsStyleEl.nextSibling : head.firstChild);\n    }\n\n    // Pass in the width/height/aspectRatio options which will update the style el\n    this.width(this.options_.width);\n    this.height(this.options_.height);\n    this.fluid(this.options_.fluid);\n    this.aspectRatio(this.options_.aspectRatio);\n\n    // Hide any links within the video/audio tag,\n    // because IE doesn't hide them completely from screen readers.\n    var links = tag.getElementsByTagName('a');\n\n    for (var i = 0; i < links.length; i++) {\n      var linkEl = links.item(i);\n\n      addClass(linkEl, 'vjs-hidden');\n      linkEl.setAttribute('hidden', 'hidden');\n    }\n\n    // insertElFirst seems to cause the networkState to flicker from 3 to 2, so\n    // keep track of the original for later so we can know if the source originally failed\n    tag.initNetworkState_ = tag.networkState;\n\n    // Wrap video tag in div (el/box) container\n    if (tag.parentNode && !playerElIngest) {\n      tag.parentNode.insertBefore(el, tag);\n    }\n\n    // insert the tag as the first child of the player element\n    // then manually add it to the children array so that this.addChild\n    // will work properly for other components\n    //\n    // Breaks iPhone, fixed in HTML5 setup.\n    prependTo(tag, el);\n    this.children_.unshift(tag);\n\n    // Set lang attr on player to ensure CSS :lang() in consistent with player\n    // if it's been set to something different to the doc\n    this.el_.setAttribute('lang', this.language_);\n\n    this.el_ = el;\n\n    return el;\n  };\n\n  /**\n   * A getter/setter for the `Player`'s width. Returns the player's configured value.\n   * To get the current width use `currentWidth()`.\n   *\n   * @param {number} [value]\n   *        The value to set the `Player`'s width to.\n   *\n   * @return {number}\n   *         The current width of the `Player` when getting.\n   */\n\n\n  Player.prototype.width = function width(value) {\n    return this.dimension('width', value);\n  };\n\n  /**\n   * A getter/setter for the `Player`'s height. Returns the player's configured value.\n   * To get the current height use `currentheight()`.\n   *\n   * @param {number} [value]\n   *        The value to set the `Player`'s heigth to.\n   *\n   * @return {number}\n   *         The current height of the `Player` when getting.\n   */\n\n\n  Player.prototype.height = function height(value) {\n    return this.dimension('height', value);\n  };\n\n  /**\n   * A getter/setter for the `Player`'s width & height.\n   *\n   * @param {string} dimension\n   *        This string can be:\n   *        - 'width'\n   *        - 'height'\n   *\n   * @param {number} [value]\n   *        Value for dimension specified in the first argument.\n   *\n   * @return {number}\n   *         The dimension arguments value when getting (width/height).\n   */\n\n\n  Player.prototype.dimension = function dimension(_dimension, value) {\n    var privDimension = _dimension + '_';\n\n    if (value === undefined) {\n      return this[privDimension] || 0;\n    }\n\n    if (value === '') {\n      // If an empty string is given, reset the dimension to be automatic\n      this[privDimension] = undefined;\n      this.updateStyleEl_();\n      return;\n    }\n\n    var parsedVal = parseFloat(value);\n\n    if (isNaN(parsedVal)) {\n      log$1.error('Improper value \"' + value + '\" supplied for for ' + _dimension);\n      return;\n    }\n\n    this[privDimension] = parsedVal;\n    this.updateStyleEl_();\n  };\n\n  /**\n   * A getter/setter/toggler for the vjs-fluid `className` on the `Player`.\n   *\n   * @param {boolean} [bool]\n   *        - A value of true adds the class.\n   *        - A value of false removes the class.\n   *        - No value will toggle the fluid class.\n   *\n   * @return {boolean|undefined}\n   *         - The value of fluid when getting.\n   *         - `undefined` when setting.\n   */\n\n\n  Player.prototype.fluid = function fluid(bool) {\n    if (bool === undefined) {\n      return !!this.fluid_;\n    }\n\n    this.fluid_ = !!bool;\n\n    if (bool) {\n      this.addClass('vjs-fluid');\n    } else {\n      this.removeClass('vjs-fluid');\n    }\n\n    this.updateStyleEl_();\n  };\n\n  /**\n   * Get/Set the aspect ratio\n   *\n   * @param {string} [ratio]\n   *        Aspect ratio for player\n   *\n   * @return {string|undefined}\n   *         returns the current aspect ratio when getting\n   */\n\n  /**\n   * A getter/setter for the `Player`'s aspect ratio.\n   *\n   * @param {string} [ratio]\n   *        The value to set the `Player's aspect ratio to.\n   *\n   * @return {string|undefined}\n   *         - The current aspect ratio of the `Player` when getting.\n   *         - undefined when setting\n   */\n\n\n  Player.prototype.aspectRatio = function aspectRatio(ratio) {\n    if (ratio === undefined) {\n      return this.aspectRatio_;\n    }\n\n    // Check for width:height format\n    if (!/^\\d+\\:\\d+$/.test(ratio)) {\n      throw new Error('Improper value supplied for aspect ratio. The format should be width:height, for example 16:9.');\n    }\n    this.aspectRatio_ = ratio;\n\n    // We're assuming if you set an aspect ratio you want fluid mode,\n    // because in fixed mode you could calculate width and height yourself.\n    this.fluid(true);\n\n    this.updateStyleEl_();\n  };\n\n  /**\n   * Update styles of the `Player` element (height, width and aspect ratio).\n   *\n   * @private\n   * @listens Tech#loadedmetadata\n   */\n\n\n  Player.prototype.updateStyleEl_ = function updateStyleEl_() {\n    if (window$1.VIDEOJS_NO_DYNAMIC_STYLE === true) {\n      var _width = typeof this.width_ === 'number' ? this.width_ : this.options_.width;\n      var _height = typeof this.height_ === 'number' ? this.height_ : this.options_.height;\n      var techEl = this.tech_ && this.tech_.el();\n\n      if (techEl) {\n        if (_width >= 0) {\n          techEl.width = _width;\n        }\n        if (_height >= 0) {\n          techEl.height = _height;\n        }\n      }\n\n      return;\n    }\n\n    var width = void 0;\n    var height = void 0;\n    var aspectRatio = void 0;\n    var idClass = void 0;\n\n    // The aspect ratio is either used directly or to calculate width and height.\n    if (this.aspectRatio_ !== undefined && this.aspectRatio_ !== 'auto') {\n      // Use any aspectRatio that's been specifically set\n      aspectRatio = this.aspectRatio_;\n    } else if (this.videoWidth() > 0) {\n      // Otherwise try to get the aspect ratio from the video metadata\n      aspectRatio = this.videoWidth() + ':' + this.videoHeight();\n    } else {\n      // Or use a default. The video element's is 2:1, but 16:9 is more common.\n      aspectRatio = '16:9';\n    }\n\n    // Get the ratio as a decimal we can use to calculate dimensions\n    var ratioParts = aspectRatio.split(':');\n    var ratioMultiplier = ratioParts[1] / ratioParts[0];\n\n    if (this.width_ !== undefined) {\n      // Use any width that's been specifically set\n      width = this.width_;\n    } else if (this.height_ !== undefined) {\n      // Or calulate the width from the aspect ratio if a height has been set\n      width = this.height_ / ratioMultiplier;\n    } else {\n      // Or use the video's metadata, or use the video el's default of 300\n      width = this.videoWidth() || 300;\n    }\n\n    if (this.height_ !== undefined) {\n      // Use any height that's been specifically set\n      height = this.height_;\n    } else {\n      // Otherwise calculate the height from the ratio and the width\n      height = width * ratioMultiplier;\n    }\n\n    // Ensure the CSS class is valid by starting with an alpha character\n    if (/^[^a-zA-Z]/.test(this.id())) {\n      idClass = 'dimensions-' + this.id();\n    } else {\n      idClass = this.id() + '-dimensions';\n    }\n\n    // Ensure the right class is still on the player for the style element\n    this.addClass(idClass);\n\n    setTextContent(this.styleEl_, '\\n      .' + idClass + ' {\\n        width: ' + width + 'px;\\n        height: ' + height + 'px;\\n      }\\n\\n      .' + idClass + '.vjs-fluid {\\n        padding-top: ' + ratioMultiplier * 100 + '%;\\n      }\\n    ');\n  };\n\n  /**\n   * Load/Create an instance of playback {@link Tech} including element\n   * and API methods. Then append the `Tech` element in `Player` as a child.\n   *\n   * @param {string} techName\n   *        name of the playback technology\n   *\n   * @param {string} source\n   *        video source\n   *\n   * @private\n   */\n\n\n  Player.prototype.loadTech_ = function loadTech_(techName, source) {\n    var _this2 = this;\n\n    // Pause and remove current playback technology\n    if (this.tech_) {\n      this.unloadTech_();\n    }\n\n    var titleTechName = toTitleCase(techName);\n    var camelTechName = techName.charAt(0).toLowerCase() + techName.slice(1);\n\n    // get rid of the HTML5 video tag as soon as we are using another tech\n    if (titleTechName !== 'Html5' && this.tag) {\n      Tech.getTech('Html5').disposeMediaElement(this.tag);\n      this.tag.player = null;\n      this.tag = null;\n    }\n\n    this.techName_ = titleTechName;\n\n    // Turn off API access because we're loading a new tech that might load asynchronously\n    this.isReady_ = false;\n\n    // if autoplay is a string we pass false to the tech\n    // because the player is going to handle autoplay on `loadstart`\n    var autoplay = typeof this.autoplay() === 'string' ? false : this.autoplay();\n\n    // Grab tech-specific options from player options and add source and parent element to use.\n    var techOptions = {\n      source: source,\n      autoplay: autoplay,\n      'nativeControlsForTouch': this.options_.nativeControlsForTouch,\n      'playerId': this.id(),\n      'techId': this.id() + '_' + camelTechName + '_api',\n      'playsinline': this.options_.playsinline,\n      'preload': this.options_.preload,\n      'loop': this.options_.loop,\n      'muted': this.options_.muted,\n      'poster': this.poster(),\n      'language': this.language(),\n      'playerElIngest': this.playerElIngest_ || false,\n      'vtt.js': this.options_['vtt.js'],\n      'canOverridePoster': !!this.options_.techCanOverridePoster,\n      'enableSourceset': this.options_.enableSourceset\n    };\n\n    ALL.names.forEach(function (name$$1) {\n      var props = ALL[name$$1];\n\n      techOptions[props.getterName] = _this2[props.privateName];\n    });\n\n    assign(techOptions, this.options_[titleTechName]);\n    assign(techOptions, this.options_[camelTechName]);\n    assign(techOptions, this.options_[techName.toLowerCase()]);\n\n    if (this.tag) {\n      techOptions.tag = this.tag;\n    }\n\n    if (source && source.src === this.cache_.src && this.cache_.currentTime > 0) {\n      techOptions.startTime = this.cache_.currentTime;\n    }\n\n    // Initialize tech instance\n    var TechClass = Tech.getTech(techName);\n\n    if (!TechClass) {\n      throw new Error('No Tech named \\'' + titleTechName + '\\' exists! \\'' + titleTechName + '\\' should be registered using videojs.registerTech()\\'');\n    }\n\n    this.tech_ = new TechClass(techOptions);\n\n    // player.triggerReady is always async, so don't need this to be async\n    this.tech_.ready(bind(this, this.handleTechReady_), true);\n\n    textTrackConverter.jsonToTextTracks(this.textTracksJson_ || [], this.tech_);\n\n    // Listen to all HTML5-defined events and trigger them on the player\n    TECH_EVENTS_RETRIGGER.forEach(function (event) {\n      _this2.on(_this2.tech_, event, _this2['handleTech' + toTitleCase(event) + '_']);\n    });\n\n    Object.keys(TECH_EVENTS_QUEUE).forEach(function (event) {\n      _this2.on(_this2.tech_, event, function (eventObj) {\n        if (_this2.tech_.playbackRate() === 0 && _this2.tech_.seeking()) {\n          _this2.queuedCallbacks_.push({\n            callback: _this2['handleTech' + TECH_EVENTS_QUEUE[event] + '_'].bind(_this2),\n            event: eventObj\n          });\n          return;\n        }\n        _this2['handleTech' + TECH_EVENTS_QUEUE[event] + '_'](eventObj);\n      });\n    });\n\n    this.on(this.tech_, 'loadstart', this.handleTechLoadStart_);\n    this.on(this.tech_, 'sourceset', this.handleTechSourceset_);\n    this.on(this.tech_, 'waiting', this.handleTechWaiting_);\n    this.on(this.tech_, 'ended', this.handleTechEnded_);\n    this.on(this.tech_, 'seeking', this.handleTechSeeking_);\n    this.on(this.tech_, 'play', this.handleTechPlay_);\n    this.on(this.tech_, 'firstplay', this.handleTechFirstPlay_);\n    this.on(this.tech_, 'pause', this.handleTechPause_);\n    this.on(this.tech_, 'durationchange', this.handleTechDurationChange_);\n    this.on(this.tech_, 'fullscreenchange', this.handleTechFullscreenChange_);\n    this.on(this.tech_, 'error', this.handleTechError_);\n    this.on(this.tech_, 'loadedmetadata', this.updateStyleEl_);\n    this.on(this.tech_, 'posterchange', this.handleTechPosterChange_);\n    this.on(this.tech_, 'textdata', this.handleTechTextData_);\n    this.on(this.tech_, 'ratechange', this.handleTechRateChange_);\n\n    this.usingNativeControls(this.techGet_('controls'));\n\n    if (this.controls() && !this.usingNativeControls()) {\n      this.addTechControlsListeners_();\n    }\n\n    // Add the tech element in the DOM if it was not already there\n    // Make sure to not insert the original video element if using Html5\n    if (this.tech_.el().parentNode !== this.el() && (titleTechName !== 'Html5' || !this.tag)) {\n      prependTo(this.tech_.el(), this.el());\n    }\n\n    // Get rid of the original video tag reference after the first tech is loaded\n    if (this.tag) {\n      this.tag.player = null;\n      this.tag = null;\n    }\n  };\n\n  /**\n   * Unload and dispose of the current playback {@link Tech}.\n   *\n   * @private\n   */\n\n\n  Player.prototype.unloadTech_ = function unloadTech_() {\n    var _this3 = this;\n\n    // Save the current text tracks so that we can reuse the same text tracks with the next tech\n    ALL.names.forEach(function (name$$1) {\n      var props = ALL[name$$1];\n\n      _this3[props.privateName] = _this3[props.getterName]();\n    });\n    this.textTracksJson_ = textTrackConverter.textTracksToJson(this.tech_);\n\n    this.isReady_ = false;\n\n    this.tech_.dispose();\n\n    this.tech_ = false;\n\n    if (this.isPosterFromTech_) {\n      this.poster_ = '';\n      this.trigger('posterchange');\n    }\n\n    this.isPosterFromTech_ = false;\n  };\n\n  /**\n   * Return a reference to the current {@link Tech}.\n   * It will print a warning by default about the danger of using the tech directly\n   * but any argument that is passed in will silence the warning.\n   *\n   * @param {*} [safety]\n   *        Anything passed in to silence the warning\n   *\n   * @return {Tech}\n   *         The Tech\n   */\n\n\n  Player.prototype.tech = function tech(safety) {\n    if (safety === undefined) {\n      log$1.warn(tsml(_templateObject$2));\n    }\n\n    return this.tech_;\n  };\n\n  /**\n   * Set up click and touch listeners for the playback element\n   *\n   * - On desktops: a click on the video itself will toggle playback\n   * - On mobile devices: a click on the video toggles controls\n   *   which is done by toggling the user state between active and\n   *   inactive\n   * - A tap can signal that a user has become active or has become inactive\n   *   e.g. a quick tap on an iPhone movie should reveal the controls. Another\n   *   quick tap should hide them again (signaling the user is in an inactive\n   *   viewing state)\n   * - In addition to this, we still want the user to be considered inactive after\n   *   a few seconds of inactivity.\n   *\n   * > Note: the only part of iOS interaction we can't mimic with this setup\n   * is a touch and hold on the video element counting as activity in order to\n   * keep the controls showing, but that shouldn't be an issue. A touch and hold\n   * on any controls will still keep the user active\n   *\n   * @private\n   */\n\n\n  Player.prototype.addTechControlsListeners_ = function addTechControlsListeners_() {\n    // Make sure to remove all the previous listeners in case we are called multiple times.\n    this.removeTechControlsListeners_();\n\n    // Some browsers (Chrome & IE) don't trigger a click on a flash swf, but do\n    // trigger mousedown/up.\n    // http://stackoverflow.com/questions/1444562/javascript-onclick-event-over-flash-object\n    // Any touch events are set to block the mousedown event from happening\n    this.on(this.tech_, 'mousedown', this.handleTechClick_);\n    this.on(this.tech_, 'dblclick', this.handleTechDoubleClick_);\n\n    // If the controls were hidden we don't want that to change without a tap event\n    // so we'll check if the controls were already showing before reporting user\n    // activity\n    this.on(this.tech_, 'touchstart', this.handleTechTouchStart_);\n    this.on(this.tech_, 'touchmove', this.handleTechTouchMove_);\n    this.on(this.tech_, 'touchend', this.handleTechTouchEnd_);\n\n    // The tap listener needs to come after the touchend listener because the tap\n    // listener cancels out any reportedUserActivity when setting userActive(false)\n    this.on(this.tech_, 'tap', this.handleTechTap_);\n  };\n\n  /**\n   * Remove the listeners used for click and tap controls. This is needed for\n   * toggling to controls disabled, where a tap/touch should do nothing.\n   *\n   * @private\n   */\n\n\n  Player.prototype.removeTechControlsListeners_ = function removeTechControlsListeners_() {\n    // We don't want to just use `this.off()` because there might be other needed\n    // listeners added by techs that extend this.\n    this.off(this.tech_, 'tap', this.handleTechTap_);\n    this.off(this.tech_, 'touchstart', this.handleTechTouchStart_);\n    this.off(this.tech_, 'touchmove', this.handleTechTouchMove_);\n    this.off(this.tech_, 'touchend', this.handleTechTouchEnd_);\n    this.off(this.tech_, 'mousedown', this.handleTechClick_);\n    this.off(this.tech_, 'dblclick', this.handleTechDoubleClick_);\n  };\n\n  /**\n   * Player waits for the tech to be ready\n   *\n   * @private\n   */\n\n\n  Player.prototype.handleTechReady_ = function handleTechReady_() {\n    this.triggerReady();\n\n    // Keep the same volume as before\n    if (this.cache_.volume) {\n      this.techCall_('setVolume', this.cache_.volume);\n    }\n\n    // Look if the tech found a higher resolution poster while loading\n    this.handleTechPosterChange_();\n\n    // Update the duration if available\n    this.handleTechDurationChange_();\n  };\n\n  /**\n   * Retrigger the `loadstart` event that was triggered by the {@link Tech}. This\n   * function will also trigger {@link Player#firstplay} if it is the first loadstart\n   * for a video.\n   *\n   * @fires Player#loadstart\n   * @fires Player#firstplay\n   * @listens Tech#loadstart\n   * @private\n   */\n\n\n  Player.prototype.handleTechLoadStart_ = function handleTechLoadStart_() {\n    // TODO: Update to use `emptied` event instead. See #1277.\n\n    this.removeClass('vjs-ended');\n    this.removeClass('vjs-seeking');\n\n    // reset the error state\n    this.error(null);\n\n    // If it's already playing we want to trigger a firstplay event now.\n    // The firstplay event relies on both the play and loadstart events\n    // which can happen in any order for a new source\n    if (!this.paused()) {\n      /**\n       * Fired when the user agent begins looking for media data\n       *\n       * @event Player#loadstart\n       * @type {EventTarget~Event}\n       */\n      this.trigger('loadstart');\n      this.trigger('firstplay');\n    } else {\n      // reset the hasStarted state\n      this.hasStarted(false);\n      this.trigger('loadstart');\n    }\n\n    // autoplay happens after loadstart for the browser,\n    // so we mimic that behavior\n    this.manualAutoplay_(this.autoplay());\n  };\n\n  /**\n   * Handle autoplay string values, rather than the typical boolean\n   * values that should be handled by the tech. Note that this is not\n   * part of any specification. Valid values and what they do can be\n   * found on the autoplay getter at Player#autoplay()\n   */\n\n\n  Player.prototype.manualAutoplay_ = function manualAutoplay_(type) {\n    var _this4 = this;\n\n    if (!this.tech_ || typeof type !== 'string') {\n      return;\n    }\n\n    var muted = function muted() {\n      var previouslyMuted = _this4.muted();\n\n      _this4.muted(true);\n\n      var playPromise = _this4.play();\n\n      if (!playPromise || !playPromise.then || !playPromise.catch) {\n        return;\n      }\n\n      return playPromise.catch(function (e) {\n        // restore old value of muted on failure\n        _this4.muted(previouslyMuted);\n      });\n    };\n\n    var promise = void 0;\n\n    if (type === 'any') {\n      promise = this.play();\n\n      if (promise && promise.then && promise.catch) {\n        promise.catch(function () {\n          return muted();\n        });\n      }\n    } else if (type === 'muted') {\n      promise = muted();\n    } else {\n      promise = this.play();\n    }\n\n    if (!promise || !promise.then || !promise.catch) {\n      return;\n    }\n\n    return promise.then(function () {\n      _this4.trigger({ type: 'autoplay-success', autoplay: type });\n    }).catch(function (e) {\n      _this4.trigger({ type: 'autoplay-failure', autoplay: type });\n    });\n  };\n\n  /**\n   * Update the internal source caches so that we return the correct source from\n   * `src()`, `currentSource()`, and `currentSources()`.\n   *\n   * > Note: `currentSources` will not be updated if the source that is passed in exists\n   *         in the current `currentSources` cache.\n   *\n   *\n   * @param {Tech~SourceObject} srcObj\n   *        A string or object source to update our caches to.\n   */\n\n\n  Player.prototype.updateSourceCaches_ = function updateSourceCaches_() {\n    var srcObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n\n    var src = srcObj;\n    var type = '';\n\n    if (typeof src !== 'string') {\n      src = srcObj.src;\n      type = srcObj.type;\n    }\n\n    // if we are a blob url, don't update the source cache\n    // blob urls can arise when playback is done via Media Source Extension (MSE)\n    // such as m3u8 sources with @videojs/http-streaming (VHS)\n    if (/^blob:/.test(src)) {\n      return;\n    }\n\n    // make sure all the caches are set to default values\n    // to prevent null checking\n    this.cache_.source = this.cache_.source || {};\n    this.cache_.sources = this.cache_.sources || [];\n\n    // try to get the type of the src that was passed in\n    if (src && !type) {\n      type = findMimetype(this, src);\n    }\n\n    // update `currentSource` cache always\n    this.cache_.source = mergeOptions({}, srcObj, { src: src, type: type });\n\n    var matchingSources = this.cache_.sources.filter(function (s) {\n      return s.src && s.src === src;\n    });\n    var sourceElSources = [];\n    var sourceEls = this.$$('source');\n    var matchingSourceEls = [];\n\n    for (var i = 0; i < sourceEls.length; i++) {\n      var sourceObj = getAttributes(sourceEls[i]);\n\n      sourceElSources.push(sourceObj);\n\n      if (sourceObj.src && sourceObj.src === src) {\n        matchingSourceEls.push(sourceObj.src);\n      }\n    }\n\n    // if we have matching source els but not matching sources\n    // the current source cache is not up to date\n    if (matchingSourceEls.length && !matchingSources.length) {\n      this.cache_.sources = sourceElSources;\n      // if we don't have matching source or source els set the\n      // sources cache to the `currentSource` cache\n    } else if (!matchingSources.length) {\n      this.cache_.sources = [this.cache_.source];\n    }\n\n    // update the tech `src` cache\n    this.cache_.src = src;\n  };\n\n  /**\n   * *EXPERIMENTAL* Fired when the source is set or changed on the {@link Tech}\n   * causing the media element to reload.\n   *\n   * It will fire for the initial source and each subsequent source.\n   * This event is a custom event from Video.js and is triggered by the {@link Tech}.\n   *\n   * The event object for this event contains a `src` property that will contain the source\n   * that was available when the event was triggered. This is generally only necessary if Video.js\n   * is switching techs while the source was being changed.\n   *\n   * It is also fired when `load` is called on the player (or media element)\n   * because the {@link https://html.spec.whatwg.org/multipage/media.html#dom-media-load|specification for `load`}\n   * says that the resource selection algorithm needs to be aborted and restarted.\n   * In this case, it is very likely that the `src` property will be set to the\n   * empty string `\"\"` to indicate we do not know what the source will be but\n   * that it is changing.\n   *\n   * *This event is currently still experimental and may change in minor releases.*\n   * __To use this, pass `enableSourceset` option to the player.__\n   *\n   * @event Player#sourceset\n   * @type {EventTarget~Event}\n   * @prop {string} src\n   *                The source url available when the `sourceset` was triggered.\n   *                It will be an empty string if we cannot know what the source is\n   *                but know that the source will change.\n   */\n  /**\n   * Retrigger the `sourceset` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#sourceset\n   * @listens Tech#sourceset\n   * @private\n   */\n\n\n  Player.prototype.handleTechSourceset_ = function handleTechSourceset_(event) {\n    var _this5 = this;\n\n    // only update the source cache when the source\n    // was not updated using the player api\n    if (!this.changingSrc_) {\n      // update the source to the intial source right away\n      // in some cases this will be empty string\n      this.updateSourceCaches_(event.src);\n\n      // if the `sourceset` `src` was an empty string\n      // wait for a `loadstart` to update the cache to `currentSrc`.\n      // If a sourceset happens before a `loadstart`, we reset the state\n      // as this function will be called again.\n      if (!event.src) {\n        var updateCache = function updateCache(e) {\n          if (e.type !== 'sourceset') {\n            _this5.updateSourceCaches_(_this5.techGet_('currentSrc'));\n          }\n\n          _this5.tech_.off(['sourceset', 'loadstart'], updateCache);\n        };\n\n        this.tech_.one(['sourceset', 'loadstart'], updateCache);\n      }\n    }\n\n    this.trigger({\n      src: event.src,\n      type: 'sourceset'\n    });\n  };\n\n  /**\n   * Add/remove the vjs-has-started class\n   *\n   * @fires Player#firstplay\n   *\n   * @param {boolean} request\n   *        - true: adds the class\n   *        - false: remove the class\n   *\n   * @return {boolean}\n   *         the boolean value of hasStarted_\n   */\n\n\n  Player.prototype.hasStarted = function hasStarted(request) {\n    if (request === undefined) {\n      // act as getter, if we have no request to change\n      return this.hasStarted_;\n    }\n\n    if (request === this.hasStarted_) {\n      return;\n    }\n\n    this.hasStarted_ = request;\n\n    if (this.hasStarted_) {\n      this.addClass('vjs-has-started');\n      this.trigger('firstplay');\n    } else {\n      this.removeClass('vjs-has-started');\n    }\n  };\n\n  /**\n   * Fired whenever the media begins or resumes playback\n   *\n   * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-play}\n   * @fires Player#play\n   * @listens Tech#play\n   * @private\n   */\n\n\n  Player.prototype.handleTechPlay_ = function handleTechPlay_() {\n    this.removeClass('vjs-ended');\n    this.removeClass('vjs-paused');\n    this.addClass('vjs-playing');\n\n    // hide the poster when the user hits play\n    this.hasStarted(true);\n    /**\n     * Triggered whenever an {@link Tech#play} event happens. Indicates that\n     * playback has started or resumed.\n     *\n     * @event Player#play\n     * @type {EventTarget~Event}\n     */\n    this.trigger('play');\n  };\n\n  /**\n   * Retrigger the `ratechange` event that was triggered by the {@link Tech}.\n   *\n   * If there were any events queued while the playback rate was zero, fire\n   * those events now.\n   *\n   * @private\n   * @method Player#handleTechRateChange_\n   * @fires Player#ratechange\n   * @listens Tech#ratechange\n   */\n\n\n  Player.prototype.handleTechRateChange_ = function handleTechRateChange_() {\n    if (this.tech_.playbackRate() > 0 && this.cache_.lastPlaybackRate === 0) {\n      this.queuedCallbacks_.forEach(function (queued) {\n        return queued.callback(queued.event);\n      });\n      this.queuedCallbacks_ = [];\n    }\n    this.cache_.lastPlaybackRate = this.tech_.playbackRate();\n    /**\n     * Fires when the playing speed of the audio/video is changed\n     *\n     * @event Player#ratechange\n     * @type {event}\n     */\n    this.trigger('ratechange');\n  };\n\n  /**\n   * Retrigger the `waiting` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#waiting\n   * @listens Tech#waiting\n   * @private\n   */\n\n\n  Player.prototype.handleTechWaiting_ = function handleTechWaiting_() {\n    var _this6 = this;\n\n    this.addClass('vjs-waiting');\n    /**\n     * A readyState change on the DOM element has caused playback to stop.\n     *\n     * @event Player#waiting\n     * @type {EventTarget~Event}\n     */\n    this.trigger('waiting');\n    this.one('timeupdate', function () {\n      return _this6.removeClass('vjs-waiting');\n    });\n  };\n\n  /**\n   * Retrigger the `canplay` event that was triggered by the {@link Tech}.\n   * > Note: This is not consistent between browsers. See #1351\n   *\n   * @fires Player#canplay\n   * @listens Tech#canplay\n   * @private\n   */\n\n\n  Player.prototype.handleTechCanPlay_ = function handleTechCanPlay_() {\n    this.removeClass('vjs-waiting');\n    /**\n     * The media has a readyState of HAVE_FUTURE_DATA or greater.\n     *\n     * @event Player#canplay\n     * @type {EventTarget~Event}\n     */\n    this.trigger('canplay');\n  };\n\n  /**\n   * Retrigger the `canplaythrough` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#canplaythrough\n   * @listens Tech#canplaythrough\n   * @private\n   */\n\n\n  Player.prototype.handleTechCanPlayThrough_ = function handleTechCanPlayThrough_() {\n    this.removeClass('vjs-waiting');\n    /**\n     * The media has a readyState of HAVE_ENOUGH_DATA or greater. This means that the\n     * entire media file can be played without buffering.\n     *\n     * @event Player#canplaythrough\n     * @type {EventTarget~Event}\n     */\n    this.trigger('canplaythrough');\n  };\n\n  /**\n   * Retrigger the `playing` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#playing\n   * @listens Tech#playing\n   * @private\n   */\n\n\n  Player.prototype.handleTechPlaying_ = function handleTechPlaying_() {\n    this.removeClass('vjs-waiting');\n    /**\n     * The media is no longer blocked from playback, and has started playing.\n     *\n     * @event Player#playing\n     * @type {EventTarget~Event}\n     */\n    this.trigger('playing');\n  };\n\n  /**\n   * Retrigger the `seeking` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#seeking\n   * @listens Tech#seeking\n   * @private\n   */\n\n\n  Player.prototype.handleTechSeeking_ = function handleTechSeeking_() {\n    this.addClass('vjs-seeking');\n    /**\n     * Fired whenever the player is jumping to a new time\n     *\n     * @event Player#seeking\n     * @type {EventTarget~Event}\n     */\n    this.trigger('seeking');\n  };\n\n  /**\n   * Retrigger the `seeked` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#seeked\n   * @listens Tech#seeked\n   * @private\n   */\n\n\n  Player.prototype.handleTechSeeked_ = function handleTechSeeked_() {\n    this.removeClass('vjs-seeking');\n    /**\n     * Fired when the player has finished jumping to a new time\n     *\n     * @event Player#seeked\n     * @type {EventTarget~Event}\n     */\n    this.trigger('seeked');\n  };\n\n  /**\n   * Retrigger the `firstplay` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#firstplay\n   * @listens Tech#firstplay\n   * @deprecated As of 6.0 firstplay event is deprecated.\n   *             As of 6.0 passing the `starttime` option to the player and the firstplay event are deprecated.\n   * @private\n   */\n\n\n  Player.prototype.handleTechFirstPlay_ = function handleTechFirstPlay_() {\n    // If the first starttime attribute is specified\n    // then we will start at the given offset in seconds\n    if (this.options_.starttime) {\n      log$1.warn('Passing the `starttime` option to the player will be deprecated in 6.0');\n      this.currentTime(this.options_.starttime);\n    }\n\n    this.addClass('vjs-has-started');\n    /**\n     * Fired the first time a video is played. Not part of the HLS spec, and this is\n     * probably not the best implementation yet, so use sparingly. If you don't have a\n     * reason to prevent playback, use `myPlayer.one('play');` instead.\n     *\n     * @event Player#firstplay\n     * @deprecated As of 6.0 firstplay event is deprecated.\n     * @type {EventTarget~Event}\n     */\n    this.trigger('firstplay');\n  };\n\n  /**\n   * Retrigger the `pause` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#pause\n   * @listens Tech#pause\n   * @private\n   */\n\n\n  Player.prototype.handleTechPause_ = function handleTechPause_() {\n    this.removeClass('vjs-playing');\n    this.addClass('vjs-paused');\n    /**\n     * Fired whenever the media has been paused\n     *\n     * @event Player#pause\n     * @type {EventTarget~Event}\n     */\n    this.trigger('pause');\n  };\n\n  /**\n   * Retrigger the `ended` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#ended\n   * @listens Tech#ended\n   * @private\n   */\n\n\n  Player.prototype.handleTechEnded_ = function handleTechEnded_() {\n    this.addClass('vjs-ended');\n    if (this.options_.loop) {\n      this.currentTime(0);\n      this.play();\n    } else if (!this.paused()) {\n      this.pause();\n    }\n\n    /**\n     * Fired when the end of the media resource is reached (currentTime == duration)\n     *\n     * @event Player#ended\n     * @type {EventTarget~Event}\n     */\n    this.trigger('ended');\n  };\n\n  /**\n   * Fired when the duration of the media resource is first known or changed\n   *\n   * @listens Tech#durationchange\n   * @private\n   */\n\n\n  Player.prototype.handleTechDurationChange_ = function handleTechDurationChange_() {\n    this.duration(this.techGet_('duration'));\n  };\n\n  /**\n   * Handle a click on the media element to play/pause\n   *\n   * @param {EventTarget~Event} event\n   *        the event that caused this function to trigger\n   *\n   * @listens Tech#mousedown\n   * @private\n   */\n\n\n  Player.prototype.handleTechClick_ = function handleTechClick_(event) {\n    if (!isSingleLeftClick(event)) {\n      return;\n    }\n\n    // When controls are disabled a click should not toggle playback because\n    // the click is considered a control\n    if (!this.controls_) {\n      return;\n    }\n\n    if (this.paused()) {\n      silencePromise(this.play());\n    } else {\n      this.pause();\n    }\n  };\n\n  /**\n   * Handle a double-click on the media element to enter/exit fullscreen\n   *\n   * @param {EventTarget~Event} event\n   *        the event that caused this function to trigger\n   *\n   * @listens Tech#dblclick\n   * @private\n   */\n\n\n  Player.prototype.handleTechDoubleClick_ = function handleTechDoubleClick_(event) {\n    if (!this.controls_) {\n      return;\n    }\n\n    // we do not want to toggle fullscreen state\n    // when double-clicking inside a control bar or a modal\n    var inAllowedEls = Array.prototype.some.call(this.$$('.vjs-control-bar, .vjs-modal-dialog'), function (el) {\n      return el.contains(event.target);\n    });\n\n    if (!inAllowedEls) {\n      if (this.isFullscreen()) {\n        this.exitFullscreen();\n      } else {\n        this.requestFullscreen();\n      }\n    }\n  };\n\n  /**\n   * Handle a tap on the media element. It will toggle the user\n   * activity state, which hides and shows the controls.\n   *\n   * @listens Tech#tap\n   * @private\n   */\n\n\n  Player.prototype.handleTechTap_ = function handleTechTap_() {\n    this.userActive(!this.userActive());\n  };\n\n  /**\n   * Handle touch to start\n   *\n   * @listens Tech#touchstart\n   * @private\n   */\n\n\n  Player.prototype.handleTechTouchStart_ = function handleTechTouchStart_() {\n    this.userWasActive = this.userActive();\n  };\n\n  /**\n   * Handle touch to move\n   *\n   * @listens Tech#touchmove\n   * @private\n   */\n\n\n  Player.prototype.handleTechTouchMove_ = function handleTechTouchMove_() {\n    if (this.userWasActive) {\n      this.reportUserActivity();\n    }\n  };\n\n  /**\n   * Handle touch to end\n   *\n   * @param {EventTarget~Event} event\n   *        the touchend event that triggered\n   *        this function\n   *\n   * @listens Tech#touchend\n   * @private\n   */\n\n\n  Player.prototype.handleTechTouchEnd_ = function handleTechTouchEnd_(event) {\n    // Stop the mouse events from also happening\n    event.preventDefault();\n  };\n\n  /**\n   * Fired when the player switches in or out of fullscreen mode\n   *\n   * @private\n   * @listens Player#fullscreenchange\n   */\n\n\n  Player.prototype.handleFullscreenChange_ = function handleFullscreenChange_() {\n    if (this.isFullscreen()) {\n      this.addClass('vjs-fullscreen');\n    } else {\n      this.removeClass('vjs-fullscreen');\n    }\n  };\n\n  /**\n   * native click events on the SWF aren't triggered on IE11, Win8.1RT\n   * use stageclick events triggered from inside the SWF instead\n   *\n   * @private\n   * @listens stageclick\n   */\n\n\n  Player.prototype.handleStageClick_ = function handleStageClick_() {\n    this.reportUserActivity();\n  };\n\n  /**\n   * Handle Tech Fullscreen Change\n   *\n   * @param {EventTarget~Event} event\n   *        the fullscreenchange event that triggered this function\n   *\n   * @param {Object} data\n   *        the data that was sent with the event\n   *\n   * @private\n   * @listens Tech#fullscreenchange\n   * @fires Player#fullscreenchange\n   */\n\n\n  Player.prototype.handleTechFullscreenChange_ = function handleTechFullscreenChange_(event, data) {\n    if (data) {\n      this.isFullscreen(data.isFullscreen);\n    }\n    /**\n     * Fired when going in and out of fullscreen.\n     *\n     * @event Player#fullscreenchange\n     * @type {EventTarget~Event}\n     */\n    this.trigger('fullscreenchange');\n  };\n\n  /**\n   * Fires when an error occurred during the loading of an audio/video.\n   *\n   * @private\n   * @listens Tech#error\n   */\n\n\n  Player.prototype.handleTechError_ = function handleTechError_() {\n    var error = this.tech_.error();\n\n    this.error(error);\n  };\n\n  /**\n   * Retrigger the `textdata` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#textdata\n   * @listens Tech#textdata\n   * @private\n   */\n\n\n  Player.prototype.handleTechTextData_ = function handleTechTextData_() {\n    var data = null;\n\n    if (arguments.length > 1) {\n      data = arguments[1];\n    }\n\n    /**\n     * Fires when we get a textdata event from tech\n     *\n     * @event Player#textdata\n     * @type {EventTarget~Event}\n     */\n    this.trigger('textdata', data);\n  };\n\n  /**\n   * Get object for cached values.\n   *\n   * @return {Object}\n   *         get the current object cache\n   */\n\n\n  Player.prototype.getCache = function getCache() {\n    return this.cache_;\n  };\n\n  /**\n   * Pass values to the playback tech\n   *\n   * @param {string} [method]\n   *        the method to call\n   *\n   * @param {Object} arg\n   *        the argument to pass\n   *\n   * @private\n   */\n\n\n  Player.prototype.techCall_ = function techCall_(method, arg) {\n    // If it's not ready yet, call method when it is\n\n    this.ready(function () {\n      if (method in allowedSetters) {\n        return set$1(this.middleware_, this.tech_, method, arg);\n      } else if (method in allowedMediators) {\n        return mediate(this.middleware_, this.tech_, method, arg);\n      }\n\n      try {\n        if (this.tech_) {\n          this.tech_[method](arg);\n        }\n      } catch (e) {\n        log$1(e);\n        throw e;\n      }\n    }, true);\n  };\n\n  /**\n   * Get calls can't wait for the tech, and sometimes don't need to.\n   *\n   * @param {string} method\n   *        Tech method\n   *\n   * @return {Function|undefined}\n   *         the method or undefined\n   *\n   * @private\n   */\n\n\n  Player.prototype.techGet_ = function techGet_(method) {\n    if (!this.tech_ || !this.tech_.isReady_) {\n      return;\n    }\n\n    if (method in allowedGetters) {\n      return get$1(this.middleware_, this.tech_, method);\n    } else if (method in allowedMediators) {\n      return mediate(this.middleware_, this.tech_, method);\n    }\n\n    // Flash likes to die and reload when you hide or reposition it.\n    // In these cases the object methods go away and we get errors.\n    // When that happens we'll catch the errors and inform tech that it's not ready any more.\n    try {\n      return this.tech_[method]();\n    } catch (e) {\n\n      // When building additional tech libs, an expected method may not be defined yet\n      if (this.tech_[method] === undefined) {\n        log$1('Video.js: ' + method + ' method not defined for ' + this.techName_ + ' playback technology.', e);\n        throw e;\n      }\n\n      // When a method isn't available on the object it throws a TypeError\n      if (e.name === 'TypeError') {\n        log$1('Video.js: ' + method + ' unavailable on ' + this.techName_ + ' playback technology element.', e);\n        this.tech_.isReady_ = false;\n        throw e;\n      }\n\n      // If error unknown, just log and throw\n      log$1(e);\n      throw e;\n    }\n  };\n\n  /**\n   * Attempt to begin playback at the first opportunity.\n   *\n   * @return {Promise|undefined}\n   *         Returns a promise if the browser supports Promises (or one\n   *         was passed in as an option). This promise will be resolved on\n   *         the return value of play. If this is undefined it will fulfill the\n   *         promise chain otherwise the promise chain will be fulfilled when\n   *         the promise from play is fulfilled.\n   */\n\n\n  Player.prototype.play = function play() {\n    var _this7 = this;\n\n    var PromiseClass = this.options_.Promise || window$1.Promise;\n\n    if (PromiseClass) {\n      return new PromiseClass(function (resolve) {\n        _this7.play_(resolve);\n      });\n    }\n\n    return this.play_();\n  };\n\n  /**\n   * The actual logic for play, takes a callback that will be resolved on the\n   * return value of play. This allows us to resolve to the play promise if there\n   * is one on modern browsers.\n   *\n   * @private\n   * @param {Function} [callback]\n   *        The callback that should be called when the techs play is actually called\n   */\n\n\n  Player.prototype.play_ = function play_() {\n    var _this8 = this;\n\n    var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : silencePromise;\n\n    // If this is called while we have a play queued up on a loadstart, remove\n    // that listener to avoid getting in a potentially bad state.\n    if (this.playOnLoadstart_) {\n      this.off('loadstart', this.playOnLoadstart_);\n    }\n\n    // If the player/tech is not ready, queue up another call to `play()` for\n    // when it is. This will loop back into this method for another attempt at\n    // playback when the tech is ready.\n    if (!this.isReady_) {\n\n      // Bail out if we're already waiting for `ready`!\n      if (this.playWaitingForReady_) {\n        return;\n      }\n\n      this.playWaitingForReady_ = true;\n      this.ready(function () {\n        _this8.playWaitingForReady_ = false;\n        callback(_this8.play());\n      });\n\n      // If the player/tech is ready and we have a source, we can attempt playback.\n    } else if (!this.changingSrc_ && (this.src() || this.currentSrc())) {\n      callback(this.techGet_('play'));\n      return;\n\n      // If the tech is ready, but we do not have a source, we'll need to wait\n      // for both the `ready` and a `loadstart` when the source is finally\n      // resolved by middleware and set on the player.\n      //\n      // This can happen if `play()` is called while changing sources or before\n      // one has been set on the player.\n    } else {\n\n      this.playOnLoadstart_ = function () {\n        _this8.playOnLoadstart_ = null;\n        callback(_this8.play());\n      };\n\n      this.one('loadstart', this.playOnLoadstart_);\n    }\n  };\n\n  /**\n   * Pause the video playback\n   *\n   * @return {Player}\n   *         A reference to the player object this function was called on\n   */\n\n\n  Player.prototype.pause = function pause() {\n    this.techCall_('pause');\n  };\n\n  /**\n   * Check if the player is paused or has yet to play\n   *\n   * @return {boolean}\n   *         - false: if the media is currently playing\n   *         - true: if media is not currently playing\n   */\n\n\n  Player.prototype.paused = function paused() {\n    // The initial state of paused should be true (in Safari it's actually false)\n    return this.techGet_('paused') === false ? false : true;\n  };\n\n  /**\n   * Get a TimeRange object representing the current ranges of time that the user\n   * has played.\n   *\n   * @return {TimeRange}\n   *         A time range object that represents all the increments of time that have\n   *         been played.\n   */\n\n\n  Player.prototype.played = function played() {\n    return this.techGet_('played') || createTimeRanges(0, 0);\n  };\n\n  /**\n   * Returns whether or not the user is \"scrubbing\". Scrubbing is\n   * when the user has clicked the progress bar handle and is\n   * dragging it along the progress bar.\n   *\n   * @param {boolean} [isScrubbing]\n   *        whether the user is or is not scrubbing\n   *\n   * @return {boolean}\n   *         The value of scrubbing when getting\n   */\n\n\n  Player.prototype.scrubbing = function scrubbing(isScrubbing) {\n    if (typeof isScrubbing === 'undefined') {\n      return this.scrubbing_;\n    }\n    this.scrubbing_ = !!isScrubbing;\n\n    if (isScrubbing) {\n      this.addClass('vjs-scrubbing');\n    } else {\n      this.removeClass('vjs-scrubbing');\n    }\n  };\n\n  /**\n   * Get or set the current time (in seconds)\n   *\n   * @param {number|string} [seconds]\n   *        The time to seek to in seconds\n   *\n   * @return {number}\n   *         - the current time in seconds when getting\n   */\n\n\n  Player.prototype.currentTime = function currentTime(seconds) {\n    if (typeof seconds !== 'undefined') {\n      if (seconds < 0) {\n        seconds = 0;\n      }\n      this.techCall_('setCurrentTime', seconds);\n      return;\n    }\n\n    // cache last currentTime and return. default to 0 seconds\n    //\n    // Caching the currentTime is meant to prevent a massive amount of reads on the tech's\n    // currentTime when scrubbing, but may not provide much performance benefit afterall.\n    // Should be tested. Also something has to read the actual current time or the cache will\n    // never get updated.\n    this.cache_.currentTime = this.techGet_('currentTime') || 0;\n    return this.cache_.currentTime;\n  };\n\n  /**\n   * Normally gets the length in time of the video in seconds;\n   * in all but the rarest use cases an argument will NOT be passed to the method\n   *\n   * > **NOTE**: The video must have started loading before the duration can be\n   * known, and in the case of Flash, may not be known until the video starts\n   * playing.\n   *\n   * @fires Player#durationchange\n   *\n   * @param {number} [seconds]\n   *        The duration of the video to set in seconds\n   *\n   * @return {number}\n   *         - The duration of the video in seconds when getting\n   */\n\n\n  Player.prototype.duration = function duration(seconds) {\n    if (seconds === undefined) {\n      // return NaN if the duration is not known\n      return this.cache_.duration !== undefined ? this.cache_.duration : NaN;\n    }\n\n    seconds = parseFloat(seconds);\n\n    // Standardize on Infinity for signaling video is live\n    if (seconds < 0) {\n      seconds = Infinity;\n    }\n\n    if (seconds !== this.cache_.duration) {\n      // Cache the last set value for optimized scrubbing (esp. Flash)\n      this.cache_.duration = seconds;\n\n      if (seconds === Infinity) {\n        this.addClass('vjs-live');\n      } else {\n        this.removeClass('vjs-live');\n      }\n      /**\n       * @event Player#durationchange\n       * @type {EventTarget~Event}\n       */\n      this.trigger('durationchange');\n    }\n  };\n\n  /**\n   * Calculates how much time is left in the video. Not part\n   * of the native video API.\n   *\n   * @return {number}\n   *         The time remaining in seconds\n   */\n\n\n  Player.prototype.remainingTime = function remainingTime() {\n    return this.duration() - this.currentTime();\n  };\n\n  /**\n   * A remaining time function that is intented to be used when\n   * the time is to be displayed directly to the user.\n   *\n   * @return {number}\n   *         The rounded time remaining in seconds\n   */\n\n\n  Player.prototype.remainingTimeDisplay = function remainingTimeDisplay() {\n    return Math.floor(this.duration()) - Math.floor(this.currentTime());\n  };\n\n  //\n  // Kind of like an array of portions of the video that have been downloaded.\n\n  /**\n   * Get a TimeRange object with an array of the times of the video\n   * that have been downloaded. If you just want the percent of the\n   * video that's been downloaded, use bufferedPercent.\n   *\n   * @see [Buffered Spec]{@link http://dev.w3.org/html5/spec/video.html#dom-media-buffered}\n   *\n   * @return {TimeRange}\n   *         A mock TimeRange object (following HTML spec)\n   */\n\n\n  Player.prototype.buffered = function buffered() {\n    var buffered = this.techGet_('buffered');\n\n    if (!buffered || !buffered.length) {\n      buffered = createTimeRanges(0, 0);\n    }\n\n    return buffered;\n  };\n\n  /**\n   * Get the percent (as a decimal) of the video that's been downloaded.\n   * This method is not a part of the native HTML video API.\n   *\n   * @return {number}\n   *         A decimal between 0 and 1 representing the percent\n   *         that is buffered 0 being 0% and 1 being 100%\n   */\n\n\n  Player.prototype.bufferedPercent = function bufferedPercent$$1() {\n    return bufferedPercent(this.buffered(), this.duration());\n  };\n\n  /**\n   * Get the ending time of the last buffered time range\n   * This is used in the progress bar to encapsulate all time ranges.\n   *\n   * @return {number}\n   *         The end of the last buffered time range\n   */\n\n\n  Player.prototype.bufferedEnd = function bufferedEnd() {\n    var buffered = this.buffered();\n    var duration = this.duration();\n    var end = buffered.end(buffered.length - 1);\n\n    if (end > duration) {\n      end = duration;\n    }\n\n    return end;\n  };\n\n  /**\n   * Get or set the current volume of the media\n   *\n   * @param  {number} [percentAsDecimal]\n   *         The new volume as a decimal percent:\n   *         - 0 is muted/0%/off\n   *         - 1.0 is 100%/full\n   *         - 0.5 is half volume or 50%\n   *\n   * @return {number}\n   *         The current volume as a percent when getting\n   */\n\n\n  Player.prototype.volume = function volume(percentAsDecimal) {\n    var vol = void 0;\n\n    if (percentAsDecimal !== undefined) {\n      // Force value to between 0 and 1\n      vol = Math.max(0, Math.min(1, parseFloat(percentAsDecimal)));\n      this.cache_.volume = vol;\n      this.techCall_('setVolume', vol);\n\n      if (vol > 0) {\n        this.lastVolume_(vol);\n      }\n\n      return;\n    }\n\n    // Default to 1 when returning current volume.\n    vol = parseFloat(this.techGet_('volume'));\n    return isNaN(vol) ? 1 : vol;\n  };\n\n  /**\n   * Get the current muted state, or turn mute on or off\n   *\n   * @param {boolean} [muted]\n   *        - true to mute\n   *        - false to unmute\n   *\n   * @return {boolean}\n   *         - true if mute is on and getting\n   *         - false if mute is off and getting\n   */\n\n\n  Player.prototype.muted = function muted(_muted) {\n    if (_muted !== undefined) {\n      this.techCall_('setMuted', _muted);\n      return;\n    }\n    return this.techGet_('muted') || false;\n  };\n\n  /**\n   * Get the current defaultMuted state, or turn defaultMuted on or off. defaultMuted\n   * indicates the state of muted on initial playback.\n   *\n   * ```js\n   *   var myPlayer = videojs('some-player-id');\n   *\n   *   myPlayer.src(\"http://www.example.com/path/to/video.mp4\");\n   *\n   *   // get, should be false\n   *   console.log(myPlayer.defaultMuted());\n   *   // set to true\n   *   myPlayer.defaultMuted(true);\n   *   // get should be true\n   *   console.log(myPlayer.defaultMuted());\n   * ```\n   *\n   * @param {boolean} [defaultMuted]\n   *        - true to mute\n   *        - false to unmute\n   *\n   * @return {boolean|Player}\n   *         - true if defaultMuted is on and getting\n   *         - false if defaultMuted is off and getting\n   *         - A reference to the current player when setting\n   */\n\n\n  Player.prototype.defaultMuted = function defaultMuted(_defaultMuted) {\n    if (_defaultMuted !== undefined) {\n      return this.techCall_('setDefaultMuted', _defaultMuted);\n    }\n    return this.techGet_('defaultMuted') || false;\n  };\n\n  /**\n   * Get the last volume, or set it\n   *\n   * @param  {number} [percentAsDecimal]\n   *         The new last volume as a decimal percent:\n   *         - 0 is muted/0%/off\n   *         - 1.0 is 100%/full\n   *         - 0.5 is half volume or 50%\n   *\n   * @return {number}\n   *         the current value of lastVolume as a percent when getting\n   *\n   * @private\n   */\n\n\n  Player.prototype.lastVolume_ = function lastVolume_(percentAsDecimal) {\n    if (percentAsDecimal !== undefined && percentAsDecimal !== 0) {\n      this.cache_.lastVolume = percentAsDecimal;\n      return;\n    }\n    return this.cache_.lastVolume;\n  };\n\n  /**\n   * Check if current tech can support native fullscreen\n   * (e.g. with built in controls like iOS, so not our flash swf)\n   *\n   * @return {boolean}\n   *         if native fullscreen is supported\n   */\n\n\n  Player.prototype.supportsFullScreen = function supportsFullScreen() {\n    return this.techGet_('supportsFullScreen') || false;\n  };\n\n  /**\n   * Check if the player is in fullscreen mode or tell the player that it\n   * is or is not in fullscreen mode.\n   *\n   * > NOTE: As of the latest HTML5 spec, isFullscreen is no longer an official\n   * property and instead document.fullscreenElement is used. But isFullscreen is\n   * still a valuable property for internal player workings.\n   *\n   * @param  {boolean} [isFS]\n   *         Set the players current fullscreen state\n   *\n   * @return {boolean}\n   *         - true if fullscreen is on and getting\n   *         - false if fullscreen is off and getting\n   */\n\n\n  Player.prototype.isFullscreen = function isFullscreen(isFS) {\n    if (isFS !== undefined) {\n      this.isFullscreen_ = !!isFS;\n      return;\n    }\n    return !!this.isFullscreen_;\n  };\n\n  /**\n   * Increase the size of the video to full screen\n   * In some browsers, full screen is not supported natively, so it enters\n   * \"full window mode\", where the video fills the browser window.\n   * In browsers and devices that support native full screen, sometimes the\n   * browser's default controls will be shown, and not the Video.js custom skin.\n   * This includes most mobile devices (iOS, Android) and older versions of\n   * Safari.\n   *\n   * @fires Player#fullscreenchange\n   */\n\n\n  Player.prototype.requestFullscreen = function requestFullscreen() {\n    var fsApi = FullscreenApi;\n\n    this.isFullscreen(true);\n\n    if (fsApi.requestFullscreen) {\n      // the browser supports going fullscreen at the element level so we can\n      // take the controls fullscreen as well as the video\n\n      // Trigger fullscreenchange event after change\n      // We have to specifically add this each time, and remove\n      // when canceling fullscreen. Otherwise if there's multiple\n      // players on a page, they would all be reacting to the same fullscreen\n      // events\n      on(document, fsApi.fullscreenchange, bind(this, function documentFullscreenChange(e) {\n        this.isFullscreen(document[fsApi.fullscreenElement]);\n\n        // If cancelling fullscreen, remove event listener.\n        if (this.isFullscreen() === false) {\n          off(document, fsApi.fullscreenchange, documentFullscreenChange);\n        }\n        /**\n         * @event Player#fullscreenchange\n         * @type {EventTarget~Event}\n         */\n        this.trigger('fullscreenchange');\n      }));\n\n      this.el_[fsApi.requestFullscreen]();\n    } else if (this.tech_.supportsFullScreen()) {\n      // we can't take the video.js controls fullscreen but we can go fullscreen\n      // with native controls\n      this.techCall_('enterFullScreen');\n    } else {\n      // fullscreen isn't supported so we'll just stretch the video element to\n      // fill the viewport\n      this.enterFullWindow();\n      /**\n       * @event Player#fullscreenchange\n       * @type {EventTarget~Event}\n       */\n      this.trigger('fullscreenchange');\n    }\n  };\n\n  /**\n   * Return the video to its normal size after having been in full screen mode\n   *\n   * @fires Player#fullscreenchange\n   */\n\n\n  Player.prototype.exitFullscreen = function exitFullscreen() {\n    var fsApi = FullscreenApi;\n\n    this.isFullscreen(false);\n\n    // Check for browser element fullscreen support\n    if (fsApi.requestFullscreen) {\n      document[fsApi.exitFullscreen]();\n    } else if (this.tech_.supportsFullScreen()) {\n      this.techCall_('exitFullScreen');\n    } else {\n      this.exitFullWindow();\n      /**\n       * @event Player#fullscreenchange\n       * @type {EventTarget~Event}\n       */\n      this.trigger('fullscreenchange');\n    }\n  };\n\n  /**\n   * When fullscreen isn't supported we can stretch the\n   * video container to as wide as the browser will let us.\n   *\n   * @fires Player#enterFullWindow\n   */\n\n\n  Player.prototype.enterFullWindow = function enterFullWindow() {\n    this.isFullWindow = true;\n\n    // Storing original doc overflow value to return to when fullscreen is off\n    this.docOrigOverflow = document.documentElement.style.overflow;\n\n    // Add listener for esc key to exit fullscreen\n    on(document, 'keydown', bind(this, this.fullWindowOnEscKey));\n\n    // Hide any scroll bars\n    document.documentElement.style.overflow = 'hidden';\n\n    // Apply fullscreen styles\n    addClass(document.body, 'vjs-full-window');\n\n    /**\n     * @event Player#enterFullWindow\n     * @type {EventTarget~Event}\n     */\n    this.trigger('enterFullWindow');\n  };\n\n  /**\n   * Check for call to either exit full window or\n   * full screen on ESC key\n   *\n   * @param {string} event\n   *        Event to check for key press\n   */\n\n\n  Player.prototype.fullWindowOnEscKey = function fullWindowOnEscKey(event) {\n    if (event.keyCode === 27) {\n      if (this.isFullscreen() === true) {\n        this.exitFullscreen();\n      } else {\n        this.exitFullWindow();\n      }\n    }\n  };\n\n  /**\n   * Exit full window\n   *\n   * @fires Player#exitFullWindow\n   */\n\n\n  Player.prototype.exitFullWindow = function exitFullWindow() {\n    this.isFullWindow = false;\n    off(document, 'keydown', this.fullWindowOnEscKey);\n\n    // Unhide scroll bars.\n    document.documentElement.style.overflow = this.docOrigOverflow;\n\n    // Remove fullscreen styles\n    removeClass(document.body, 'vjs-full-window');\n\n    // Resize the box, controller, and poster to original sizes\n    // this.positionAll();\n    /**\n     * @event Player#exitFullWindow\n     * @type {EventTarget~Event}\n     */\n    this.trigger('exitFullWindow');\n  };\n\n  /**\n   * Check whether the player can play a given mimetype\n   *\n   * @see https://www.w3.org/TR/2011/WD-html5-20110113/video.html#dom-navigator-canplaytype\n   *\n   * @param {string} type\n   *        The mimetype to check\n   *\n   * @return {string}\n   *         'probably', 'maybe', or '' (empty string)\n   */\n\n\n  Player.prototype.canPlayType = function canPlayType(type) {\n    var can = void 0;\n\n    // Loop through each playback technology in the options order\n    for (var i = 0, j = this.options_.techOrder; i < j.length; i++) {\n      var techName = j[i];\n      var tech = Tech.getTech(techName);\n\n      // Support old behavior of techs being registered as components.\n      // Remove once that deprecated behavior is removed.\n      if (!tech) {\n        tech = Component.getComponent(techName);\n      }\n\n      // Check if the current tech is defined before continuing\n      if (!tech) {\n        log$1.error('The \"' + techName + '\" tech is undefined. Skipped browser support check for that tech.');\n        continue;\n      }\n\n      // Check if the browser supports this technology\n      if (tech.isSupported()) {\n        can = tech.canPlayType(type);\n\n        if (can) {\n          return can;\n        }\n      }\n    }\n\n    return '';\n  };\n\n  /**\n   * Select source based on tech-order or source-order\n   * Uses source-order selection if `options.sourceOrder` is truthy. Otherwise,\n   * defaults to tech-order selection\n   *\n   * @param {Array} sources\n   *        The sources for a media asset\n   *\n   * @return {Object|boolean}\n   *         Object of source and tech order or false\n   */\n\n\n  Player.prototype.selectSource = function selectSource(sources) {\n    var _this9 = this;\n\n    // Get only the techs specified in `techOrder` that exist and are supported by the\n    // current platform\n    var techs = this.options_.techOrder.map(function (techName) {\n      return [techName, Tech.getTech(techName)];\n    }).filter(function (_ref) {\n      var techName = _ref[0],\n          tech = _ref[1];\n\n      // Check if the current tech is defined before continuing\n      if (tech) {\n        // Check if the browser supports this technology\n        return tech.isSupported();\n      }\n\n      log$1.error('The \"' + techName + '\" tech is undefined. Skipped browser support check for that tech.');\n      return false;\n    });\n\n    // Iterate over each `innerArray` element once per `outerArray` element and execute\n    // `tester` with both. If `tester` returns a non-falsy value, exit early and return\n    // that value.\n    var findFirstPassingTechSourcePair = function findFirstPassingTechSourcePair(outerArray, innerArray, tester) {\n      var found = void 0;\n\n      outerArray.some(function (outerChoice) {\n        return innerArray.some(function (innerChoice) {\n          found = tester(outerChoice, innerChoice);\n\n          if (found) {\n            return true;\n          }\n        });\n      });\n\n      return found;\n    };\n\n    var foundSourceAndTech = void 0;\n    var flip = function flip(fn) {\n      return function (a, b) {\n        return fn(b, a);\n      };\n    };\n    var finder = function finder(_ref2, source) {\n      var techName = _ref2[0],\n          tech = _ref2[1];\n\n      if (tech.canPlaySource(source, _this9.options_[techName.toLowerCase()])) {\n        return { source: source, tech: techName };\n      }\n    };\n\n    // Depending on the truthiness of `options.sourceOrder`, we swap the order of techs and sources\n    // to select from them based on their priority.\n    if (this.options_.sourceOrder) {\n      // Source-first ordering\n      foundSourceAndTech = findFirstPassingTechSourcePair(sources, techs, flip(finder));\n    } else {\n      // Tech-first ordering\n      foundSourceAndTech = findFirstPassingTechSourcePair(techs, sources, finder);\n    }\n\n    return foundSourceAndTech || false;\n  };\n\n  /**\n   * Get or set the video source.\n   *\n   * @param {Tech~SourceObject|Tech~SourceObject[]|string} [source]\n   *        A SourceObject, an array of SourceObjects, or a string referencing\n   *        a URL to a media source. It is _highly recommended_ that an object\n   *        or array of objects is used here, so that source selection\n   *        algorithms can take the `type` into account.\n   *\n   *        If not provided, this method acts as a getter.\n   *\n   * @return {string|undefined}\n   *         If the `source` argument is missing, returns the current source\n   *         URL. Otherwise, returns nothing/undefined.\n   */\n\n\n  Player.prototype.src = function src(source) {\n    var _this10 = this;\n\n    // getter usage\n    if (typeof source === 'undefined') {\n      return this.cache_.src || '';\n    }\n    // filter out invalid sources and turn our source into\n    // an array of source objects\n    var sources = filterSource(source);\n\n    // if a source was passed in then it is invalid because\n    // it was filtered to a zero length Array. So we have to\n    // show an error\n    if (!sources.length) {\n      this.setTimeout(function () {\n        this.error({ code: 4, message: this.localize(this.options_.notSupportedMessage) });\n      }, 0);\n      return;\n    }\n\n    // intial sources\n    this.changingSrc_ = true;\n\n    this.cache_.sources = sources;\n    this.updateSourceCaches_(sources[0]);\n\n    // middlewareSource is the source after it has been changed by middleware\n    setSource(this, sources[0], function (middlewareSource, mws) {\n      _this10.middleware_ = mws;\n\n      // since sourceSet is async we have to update the cache again after we select a source since\n      // the source that is selected could be out of order from the cache update above this callback.\n      _this10.cache_.sources = sources;\n      _this10.updateSourceCaches_(middlewareSource);\n\n      var err = _this10.src_(middlewareSource);\n\n      if (err) {\n        if (sources.length > 1) {\n          return _this10.src(sources.slice(1));\n        }\n\n        _this10.changingSrc_ = false;\n\n        // We need to wrap this in a timeout to give folks a chance to add error event handlers\n        _this10.setTimeout(function () {\n          this.error({ code: 4, message: this.localize(this.options_.notSupportedMessage) });\n        }, 0);\n\n        // we could not find an appropriate tech, but let's still notify the delegate that this is it\n        // this needs a better comment about why this is needed\n        _this10.triggerReady();\n\n        return;\n      }\n\n      setTech(mws, _this10.tech_);\n    });\n  };\n\n  /**\n   * Set the source object on the tech, returns a boolean that indicates whether\n   * there is a tech that can play the source or not\n   *\n   * @param {Tech~SourceObject} source\n   *        The source object to set on the Tech\n   *\n   * @return {Boolean}\n   *         - True if there is no Tech to playback this source\n   *         - False otherwise\n   *\n   * @private\n   */\n\n\n  Player.prototype.src_ = function src_(source) {\n    var _this11 = this;\n\n    var sourceTech = this.selectSource([source]);\n\n    if (!sourceTech) {\n      return true;\n    }\n\n    if (!titleCaseEquals(sourceTech.tech, this.techName_)) {\n      this.changingSrc_ = true;\n      // load this technology with the chosen source\n      this.loadTech_(sourceTech.tech, sourceTech.source);\n      this.tech_.ready(function () {\n        _this11.changingSrc_ = false;\n      });\n      return false;\n    }\n\n    // wait until the tech is ready to set the source\n    // and set it synchronously if possible (#2326)\n    this.ready(function () {\n\n      // The setSource tech method was added with source handlers\n      // so older techs won't support it\n      // We need to check the direct prototype for the case where subclasses\n      // of the tech do not support source handlers\n      if (this.tech_.constructor.prototype.hasOwnProperty('setSource')) {\n        this.techCall_('setSource', source);\n      } else {\n        this.techCall_('src', source.src);\n      }\n\n      this.changingSrc_ = false;\n    }, true);\n\n    return false;\n  };\n\n  /**\n   * Begin loading the src data.\n   */\n\n\n  Player.prototype.load = function load() {\n    this.techCall_('load');\n  };\n\n  /**\n   * Reset the player. Loads the first tech in the techOrder,\n   * and calls `reset` on the tech`.\n   */\n\n\n  Player.prototype.reset = function reset() {\n    if (this.tech_) {\n      this.tech_.clearTracks('text');\n    }\n    this.loadTech_(this.options_.techOrder[0], null);\n    this.techCall_('reset');\n  };\n\n  /**\n   * Returns all of the current source objects.\n   *\n   * @return {Tech~SourceObject[]}\n   *         The current source objects\n   */\n\n\n  Player.prototype.currentSources = function currentSources() {\n    var source = this.currentSource();\n    var sources = [];\n\n    // assume `{}` or `{ src }`\n    if (Object.keys(source).length !== 0) {\n      sources.push(source);\n    }\n\n    return this.cache_.sources || sources;\n  };\n\n  /**\n   * Returns the current source object.\n   *\n   * @return {Tech~SourceObject}\n   *         The current source object\n   */\n\n\n  Player.prototype.currentSource = function currentSource() {\n    return this.cache_.source || {};\n  };\n\n  /**\n   * Returns the fully qualified URL of the current source value e.g. http://mysite.com/video.mp4\n   * Can be used in conjunction with `currentType` to assist in rebuilding the current source object.\n   *\n   * @return {string}\n   *         The current source\n   */\n\n\n  Player.prototype.currentSrc = function currentSrc() {\n    return this.currentSource() && this.currentSource().src || '';\n  };\n\n  /**\n   * Get the current source type e.g. video/mp4\n   * This can allow you rebuild the current source object so that you could load the same\n   * source and tech later\n   *\n   * @return {string}\n   *         The source MIME type\n   */\n\n\n  Player.prototype.currentType = function currentType() {\n    return this.currentSource() && this.currentSource().type || '';\n  };\n\n  /**\n   * Get or set the preload attribute\n   *\n   * @param {boolean} [value]\n   *        - true means that we should preload\n   *        - false means that we should not preload\n   *\n   * @return {string}\n   *         The preload attribute value when getting\n   */\n\n\n  Player.prototype.preload = function preload(value) {\n    if (value !== undefined) {\n      this.techCall_('setPreload', value);\n      this.options_.preload = value;\n      return;\n    }\n    return this.techGet_('preload');\n  };\n\n  /**\n   * Get or set the autoplay option. When this is a boolean it will\n   * modify the attribute on the tech. When this is a string the attribute on\n   * the tech will be removed and `Player` will handle autoplay on loadstarts.\n   *\n   * @param {boolean|string} [value]\n   *        - true: autoplay using the browser behavior\n   *        - false: do not autoplay\n   *        - 'play': call play() on every loadstart\n   *        - 'muted': call muted() then play() on every loadstart\n   *        - 'any': call play() on every loadstart. if that fails call muted() then play().\n   *        - *: values other than those listed here will be set `autoplay` to true\n   *\n   * @return {boolean|string}\n   *         The current value of autoplay when getting\n   */\n\n\n  Player.prototype.autoplay = function autoplay(value) {\n    // getter usage\n    if (value === undefined) {\n      return this.options_.autoplay || false;\n    }\n\n    var techAutoplay = void 0;\n\n    // if the value is a valid string set it to that\n    if (typeof value === 'string' && /(any|play|muted)/.test(value)) {\n      this.options_.autoplay = value;\n      this.manualAutoplay_(value);\n      techAutoplay = false;\n\n      // any falsy value sets autoplay to false in the browser,\n      // lets do the same\n    } else if (!value) {\n      this.options_.autoplay = false;\n\n      // any other value (ie truthy) sets autoplay to true\n    } else {\n      this.options_.autoplay = true;\n    }\n\n    techAutoplay = techAutoplay || this.options_.autoplay;\n\n    // if we don't have a tech then we do not queue up\n    // a setAutoplay call on tech ready. We do this because the\n    // autoplay option will be passed in the constructor and we\n    // do not need to set it twice\n    if (this.tech_) {\n      this.techCall_('setAutoplay', techAutoplay);\n    }\n  };\n\n  /**\n   * Set or unset the playsinline attribute.\n   * Playsinline tells the browser that non-fullscreen playback is preferred.\n   *\n   * @param {boolean} [value]\n   *        - true means that we should try to play inline by default\n   *        - false means that we should use the browser's default playback mode,\n   *          which in most cases is inline. iOS Safari is a notable exception\n   *          and plays fullscreen by default.\n   *\n   * @return {string|Player}\n   *         - the current value of playsinline\n   *         - the player when setting\n   *\n   * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}\n   */\n\n\n  Player.prototype.playsinline = function playsinline(value) {\n    if (value !== undefined) {\n      this.techCall_('setPlaysinline', value);\n      this.options_.playsinline = value;\n      return this;\n    }\n    return this.techGet_('playsinline');\n  };\n\n  /**\n   * Get or set the loop attribute on the video element.\n   *\n   * @param {boolean} [value]\n   *        - true means that we should loop the video\n   *        - false means that we should not loop the video\n   *\n   * @return {string}\n   *         The current value of loop when getting\n   */\n\n\n  Player.prototype.loop = function loop(value) {\n    if (value !== undefined) {\n      this.techCall_('setLoop', value);\n      this.options_.loop = value;\n      return;\n    }\n    return this.techGet_('loop');\n  };\n\n  /**\n   * Get or set the poster image source url\n   *\n   * @fires Player#posterchange\n   *\n   * @param {string} [src]\n   *        Poster image source URL\n   *\n   * @return {string}\n   *         The current value of poster when getting\n   */\n\n\n  Player.prototype.poster = function poster(src) {\n    if (src === undefined) {\n      return this.poster_;\n    }\n\n    // The correct way to remove a poster is to set as an empty string\n    // other falsey values will throw errors\n    if (!src) {\n      src = '';\n    }\n\n    if (src === this.poster_) {\n      return;\n    }\n\n    // update the internal poster variable\n    this.poster_ = src;\n\n    // update the tech's poster\n    this.techCall_('setPoster', src);\n\n    this.isPosterFromTech_ = false;\n\n    // alert components that the poster has been set\n    /**\n     * This event fires when the poster image is changed on the player.\n     *\n     * @event Player#posterchange\n     * @type {EventTarget~Event}\n     */\n    this.trigger('posterchange');\n  };\n\n  /**\n   * Some techs (e.g. YouTube) can provide a poster source in an\n   * asynchronous way. We want the poster component to use this\n   * poster source so that it covers up the tech's controls.\n   * (YouTube's play button). However we only want to use this\n   * source if the player user hasn't set a poster through\n   * the normal APIs.\n   *\n   * @fires Player#posterchange\n   * @listens Tech#posterchange\n   * @private\n   */\n\n\n  Player.prototype.handleTechPosterChange_ = function handleTechPosterChange_() {\n    if ((!this.poster_ || this.options_.techCanOverridePoster) && this.tech_ && this.tech_.poster) {\n      var newPoster = this.tech_.poster() || '';\n\n      if (newPoster !== this.poster_) {\n        this.poster_ = newPoster;\n        this.isPosterFromTech_ = true;\n\n        // Let components know the poster has changed\n        this.trigger('posterchange');\n      }\n    }\n  };\n\n  /**\n   * Get or set whether or not the controls are showing.\n   *\n   * @fires Player#controlsenabled\n   *\n   * @param {boolean} [bool]\n   *        - true to turn controls on\n   *        - false to turn controls off\n   *\n   * @return {boolean}\n   *         The current value of controls when getting\n   */\n\n\n  Player.prototype.controls = function controls(bool) {\n    if (bool === undefined) {\n      return !!this.controls_;\n    }\n\n    bool = !!bool;\n\n    // Don't trigger a change event unless it actually changed\n    if (this.controls_ === bool) {\n      return;\n    }\n\n    this.controls_ = bool;\n\n    if (this.usingNativeControls()) {\n      this.techCall_('setControls', bool);\n    }\n\n    if (this.controls_) {\n      this.removeClass('vjs-controls-disabled');\n      this.addClass('vjs-controls-enabled');\n      /**\n       * @event Player#controlsenabled\n       * @type {EventTarget~Event}\n       */\n      this.trigger('controlsenabled');\n      if (!this.usingNativeControls()) {\n        this.addTechControlsListeners_();\n      }\n    } else {\n      this.removeClass('vjs-controls-enabled');\n      this.addClass('vjs-controls-disabled');\n      /**\n       * @event Player#controlsdisabled\n       * @type {EventTarget~Event}\n       */\n      this.trigger('controlsdisabled');\n      if (!this.usingNativeControls()) {\n        this.removeTechControlsListeners_();\n      }\n    }\n  };\n\n  /**\n   * Toggle native controls on/off. Native controls are the controls built into\n   * devices (e.g. default iPhone controls), Flash, or other techs\n   * (e.g. Vimeo Controls)\n   * **This should only be set by the current tech, because only the tech knows\n   * if it can support native controls**\n   *\n   * @fires Player#usingnativecontrols\n   * @fires Player#usingcustomcontrols\n   *\n   * @param {boolean} [bool]\n   *        - true to turn native controls on\n   *        - false to turn native controls off\n   *\n   * @return {boolean}\n   *         The current value of native controls when getting\n   */\n\n\n  Player.prototype.usingNativeControls = function usingNativeControls(bool) {\n    if (bool === undefined) {\n      return !!this.usingNativeControls_;\n    }\n\n    bool = !!bool;\n\n    // Don't trigger a change event unless it actually changed\n    if (this.usingNativeControls_ === bool) {\n      return;\n    }\n\n    this.usingNativeControls_ = bool;\n\n    if (this.usingNativeControls_) {\n      this.addClass('vjs-using-native-controls');\n\n      /**\n       * player is using the native device controls\n       *\n       * @event Player#usingnativecontrols\n       * @type {EventTarget~Event}\n       */\n      this.trigger('usingnativecontrols');\n    } else {\n      this.removeClass('vjs-using-native-controls');\n\n      /**\n       * player is using the custom HTML controls\n       *\n       * @event Player#usingcustomcontrols\n       * @type {EventTarget~Event}\n       */\n      this.trigger('usingcustomcontrols');\n    }\n  };\n\n  /**\n   * Set or get the current MediaError\n   *\n   * @fires Player#error\n   *\n   * @param  {MediaError|string|number} [err]\n   *         A MediaError or a string/number to be turned\n   *         into a MediaError\n   *\n   * @return {MediaError|null}\n   *         The current MediaError when getting (or null)\n   */\n\n\n  Player.prototype.error = function error(err) {\n    if (err === undefined) {\n      return this.error_ || null;\n    }\n\n    // restoring to default\n    if (err === null) {\n      this.error_ = err;\n      this.removeClass('vjs-error');\n      if (this.errorDisplay) {\n        this.errorDisplay.close();\n      }\n      return;\n    }\n\n    this.error_ = new MediaError(err);\n\n    // add the vjs-error classname to the player\n    this.addClass('vjs-error');\n\n    // log the name of the error type and any message\n    // IE11 logs \"[object object]\" and required you to expand message to see error object\n    log$1.error('(CODE:' + this.error_.code + ' ' + MediaError.errorTypes[this.error_.code] + ')', this.error_.message, this.error_);\n\n    /**\n     * @event Player#error\n     * @type {EventTarget~Event}\n     */\n    this.trigger('error');\n\n    return;\n  };\n\n  /**\n   * Report user activity\n   *\n   * @param {Object} event\n   *        Event object\n   */\n\n\n  Player.prototype.reportUserActivity = function reportUserActivity(event) {\n    this.userActivity_ = true;\n  };\n\n  /**\n   * Get/set if user is active\n   *\n   * @fires Player#useractive\n   * @fires Player#userinactive\n   *\n   * @param {boolean} [bool]\n   *        - true if the user is active\n   *        - false if the user is inactive\n   *\n   * @return {boolean}\n   *         The current value of userActive when getting\n   */\n\n\n  Player.prototype.userActive = function userActive(bool) {\n    if (bool === undefined) {\n      return this.userActive_;\n    }\n\n    bool = !!bool;\n\n    if (bool === this.userActive_) {\n      return;\n    }\n\n    this.userActive_ = bool;\n\n    if (this.userActive_) {\n      this.userActivity_ = true;\n      this.removeClass('vjs-user-inactive');\n      this.addClass('vjs-user-active');\n      /**\n       * @event Player#useractive\n       * @type {EventTarget~Event}\n       */\n      this.trigger('useractive');\n      return;\n    }\n\n    // Chrome/Safari/IE have bugs where when you change the cursor it can\n    // trigger a mousemove event. This causes an issue when you're hiding\n    // the cursor when the user is inactive, and a mousemove signals user\n    // activity. Making it impossible to go into inactive mode. Specifically\n    // this happens in fullscreen when we really need to hide the cursor.\n    //\n    // When this gets resolved in ALL browsers it can be removed\n    // https://code.google.com/p/chromium/issues/detail?id=103041\n    if (this.tech_) {\n      this.tech_.one('mousemove', function (e) {\n        e.stopPropagation();\n        e.preventDefault();\n      });\n    }\n\n    this.userActivity_ = false;\n    this.removeClass('vjs-user-active');\n    this.addClass('vjs-user-inactive');\n    /**\n     * @event Player#userinactive\n     * @type {EventTarget~Event}\n     */\n    this.trigger('userinactive');\n  };\n\n  /**\n   * Listen for user activity based on timeout value\n   *\n   * @private\n   */\n\n\n  Player.prototype.listenForUserActivity_ = function listenForUserActivity_() {\n    var mouseInProgress = void 0;\n    var lastMoveX = void 0;\n    var lastMoveY = void 0;\n    var handleActivity = bind(this, this.reportUserActivity);\n\n    var handleMouseMove = function handleMouseMove(e) {\n      // #1068 - Prevent mousemove spamming\n      // Chrome Bug: https://code.google.com/p/chromium/issues/detail?id=366970\n      if (e.screenX !== lastMoveX || e.screenY !== lastMoveY) {\n        lastMoveX = e.screenX;\n        lastMoveY = e.screenY;\n        handleActivity();\n      }\n    };\n\n    var handleMouseDown = function handleMouseDown() {\n      handleActivity();\n      // For as long as the they are touching the device or have their mouse down,\n      // we consider them active even if they're not moving their finger or mouse.\n      // So we want to continue to update that they are active\n      this.clearInterval(mouseInProgress);\n      // Setting userActivity=true now and setting the interval to the same time\n      // as the activityCheck interval (250) should ensure we never miss the\n      // next activityCheck\n      mouseInProgress = this.setInterval(handleActivity, 250);\n    };\n\n    var handleMouseUp = function handleMouseUp(event) {\n      handleActivity();\n      // Stop the interval that maintains activity if the mouse/touch is down\n      this.clearInterval(mouseInProgress);\n    };\n\n    // Any mouse movement will be considered user activity\n    this.on('mousedown', handleMouseDown);\n    this.on('mousemove', handleMouseMove);\n    this.on('mouseup', handleMouseUp);\n\n    // Listen for keyboard navigation\n    // Shouldn't need to use inProgress interval because of key repeat\n    this.on('keydown', handleActivity);\n    this.on('keyup', handleActivity);\n\n    // Run an interval every 250 milliseconds instead of stuffing everything into\n    // the mousemove/touchmove function itself, to prevent performance degradation.\n    // `this.reportUserActivity` simply sets this.userActivity_ to true, which\n    // then gets picked up by this loop\n    // http://ejohn.org/blog/learning-from-twitter/\n    var inactivityTimeout = void 0;\n\n    this.setInterval(function () {\n      // Check to see if mouse/touch activity has happened\n      if (!this.userActivity_) {\n        return;\n      }\n\n      // Reset the activity tracker\n      this.userActivity_ = false;\n\n      // If the user state was inactive, set the state to active\n      this.userActive(true);\n\n      // Clear any existing inactivity timeout to start the timer over\n      this.clearTimeout(inactivityTimeout);\n\n      var timeout = this.options_.inactivityTimeout;\n\n      if (timeout <= 0) {\n        return;\n      }\n\n      // In <timeout> milliseconds, if no more activity has occurred the\n      // user will be considered inactive\n      inactivityTimeout = this.setTimeout(function () {\n        // Protect against the case where the inactivityTimeout can trigger just\n        // before the next user activity is picked up by the activity check loop\n        // causing a flicker\n        if (!this.userActivity_) {\n          this.userActive(false);\n        }\n      }, timeout);\n    }, 250);\n  };\n\n  /**\n   * Gets or sets the current playback rate. A playback rate of\n   * 1.0 represents normal speed and 0.5 would indicate half-speed\n   * playback, for instance.\n   *\n   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-playbackrate\n   *\n   * @param {number} [rate]\n   *       New playback rate to set.\n   *\n   * @return {number}\n   *         The current playback rate when getting or 1.0\n   */\n\n\n  Player.prototype.playbackRate = function playbackRate(rate) {\n    if (rate !== undefined) {\n      // NOTE: this.cache_.lastPlaybackRate is set from the tech handler\n      // that is registered above\n      this.techCall_('setPlaybackRate', rate);\n      return;\n    }\n\n    if (this.tech_ && this.tech_.featuresPlaybackRate) {\n      return this.cache_.lastPlaybackRate || this.techGet_('playbackRate');\n    }\n    return 1.0;\n  };\n\n  /**\n   * Gets or sets the current default playback rate. A default playback rate of\n   * 1.0 represents normal speed and 0.5 would indicate half-speed playback, for instance.\n   * defaultPlaybackRate will only represent what the initial playbackRate of a video was, not\n   * not the current playbackRate.\n   *\n   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-defaultplaybackrate\n   *\n   * @param {number} [rate]\n   *       New default playback rate to set.\n   *\n   * @return {number|Player}\n   *         - The default playback rate when getting or 1.0\n   *         - the player when setting\n   */\n\n\n  Player.prototype.defaultPlaybackRate = function defaultPlaybackRate(rate) {\n    if (rate !== undefined) {\n      return this.techCall_('setDefaultPlaybackRate', rate);\n    }\n\n    if (this.tech_ && this.tech_.featuresPlaybackRate) {\n      return this.techGet_('defaultPlaybackRate');\n    }\n    return 1.0;\n  };\n\n  /**\n   * Gets or sets the audio flag\n   *\n   * @param {boolean} bool\n   *        - true signals that this is an audio player\n   *        - false signals that this is not an audio player\n   *\n   * @return {boolean}\n   *         The current value of isAudio when getting\n   */\n\n\n  Player.prototype.isAudio = function isAudio(bool) {\n    if (bool !== undefined) {\n      this.isAudio_ = !!bool;\n      return;\n    }\n\n    return !!this.isAudio_;\n  };\n\n  /**\n   * A helper method for adding a {@link TextTrack} to our\n   * {@link TextTrackList}.\n   *\n   * In addition to the W3C settings we allow adding additional info through options.\n   *\n   * @see http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-addtexttrack\n   *\n   * @param {string} [kind]\n   *        the kind of TextTrack you are adding\n   *\n   * @param {string} [label]\n   *        the label to give the TextTrack label\n   *\n   * @param {string} [language]\n   *        the language to set on the TextTrack\n   *\n   * @return {TextTrack|undefined}\n   *         the TextTrack that was added or undefined\n   *         if there is no tech\n   */\n\n\n  Player.prototype.addTextTrack = function addTextTrack(kind, label, language) {\n    if (this.tech_) {\n      return this.tech_.addTextTrack(kind, label, language);\n    }\n  };\n\n  /**\n   * Create a remote {@link TextTrack} and an {@link HTMLTrackElement}. It will\n   * automatically removed from the video element whenever the source changes, unless\n   * manualCleanup is set to false.\n   *\n   * @param {Object} options\n   *        Options to pass to {@link HTMLTrackElement} during creation. See\n   *        {@link HTMLTrackElement} for object properties that you should use.\n   *\n   * @param {boolean} [manualCleanup=true] if set to false, the TextTrack will be\n   *\n   * @return {HtmlTrackElement}\n   *         the HTMLTrackElement that was created and added\n   *         to the HtmlTrackElementList and the remote\n   *         TextTrackList\n   *\n   * @deprecated The default value of the \"manualCleanup\" parameter will default\n   *             to \"false\" in upcoming versions of Video.js\n   */\n\n\n  Player.prototype.addRemoteTextTrack = function addRemoteTextTrack(options, manualCleanup) {\n    if (this.tech_) {\n      return this.tech_.addRemoteTextTrack(options, manualCleanup);\n    }\n  };\n\n  /**\n   * Remove a remote {@link TextTrack} from the respective\n   * {@link TextTrackList} and {@link HtmlTrackElementList}.\n   *\n   * @param {Object} track\n   *        Remote {@link TextTrack} to remove\n   *\n   * @return {undefined}\n   *         does not return anything\n   */\n\n\n  Player.prototype.removeRemoteTextTrack = function removeRemoteTextTrack() {\n    var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref3$track = _ref3.track,\n        track = _ref3$track === undefined ? arguments[0] : _ref3$track;\n\n    // destructure the input into an object with a track argument, defaulting to arguments[0]\n    // default the whole argument to an empty object if nothing was passed in\n\n    if (this.tech_) {\n      return this.tech_.removeRemoteTextTrack(track);\n    }\n  };\n\n  /**\n   * Gets available media playback quality metrics as specified by the W3C's Media\n   * Playback Quality API.\n   *\n   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}\n   *\n   * @return {Object|undefined}\n   *         An object with supported media playback quality metrics or undefined if there\n   *         is no tech or the tech does not support it.\n   */\n\n\n  Player.prototype.getVideoPlaybackQuality = function getVideoPlaybackQuality() {\n    return this.techGet_('getVideoPlaybackQuality');\n  };\n\n  /**\n   * Get video width\n   *\n   * @return {number}\n   *         current video width\n   */\n\n\n  Player.prototype.videoWidth = function videoWidth() {\n    return this.tech_ && this.tech_.videoWidth && this.tech_.videoWidth() || 0;\n  };\n\n  /**\n   * Get video height\n   *\n   * @return {number}\n   *         current video height\n   */\n\n\n  Player.prototype.videoHeight = function videoHeight() {\n    return this.tech_ && this.tech_.videoHeight && this.tech_.videoHeight() || 0;\n  };\n\n  /**\n   * The player's language code\n   * NOTE: The language should be set in the player options if you want the\n   * the controls to be built with a specific language. Changing the language\n   * later will not update controls text.\n   *\n   * @param {string} [code]\n   *        the language code to set the player to\n   *\n   * @return {string}\n   *         The current language code when getting\n   */\n\n\n  Player.prototype.language = function language(code) {\n    if (code === undefined) {\n      return this.language_;\n    }\n\n    this.language_ = String(code).toLowerCase();\n  };\n\n  /**\n   * Get the player's language dictionary\n   * Merge every time, because a newly added plugin might call videojs.addLanguage() at any time\n   * Languages specified directly in the player options have precedence\n   *\n   * @return {Array}\n   *         An array of of supported languages\n   */\n\n\n  Player.prototype.languages = function languages() {\n    return mergeOptions(Player.prototype.options_.languages, this.languages_);\n  };\n\n  /**\n   * returns a JavaScript object reperesenting the current track\n   * information. **DOES not return it as JSON**\n   *\n   * @return {Object}\n   *         Object representing the current of track info\n   */\n\n\n  Player.prototype.toJSON = function toJSON() {\n    var options = mergeOptions(this.options_);\n    var tracks = options.tracks;\n\n    options.tracks = [];\n\n    for (var i = 0; i < tracks.length; i++) {\n      var track = tracks[i];\n\n      // deep merge tracks and null out player so no circular references\n      track = mergeOptions(track);\n      track.player = undefined;\n      options.tracks[i] = track;\n    }\n\n    return options;\n  };\n\n  /**\n   * Creates a simple modal dialog (an instance of the {@link ModalDialog}\n   * component) that immediately overlays the player with arbitrary\n   * content and removes itself when closed.\n   *\n   * @param {string|Function|Element|Array|null} content\n   *        Same as {@link ModalDialog#content}'s param of the same name.\n   *        The most straight-forward usage is to provide a string or DOM\n   *        element.\n   *\n   * @param {Object} [options]\n   *        Extra options which will be passed on to the {@link ModalDialog}.\n   *\n   * @return {ModalDialog}\n   *         the {@link ModalDialog} that was created\n   */\n\n\n  Player.prototype.createModal = function createModal(content, options) {\n    var _this12 = this;\n\n    options = options || {};\n    options.content = content || '';\n\n    var modal = new ModalDialog(this, options);\n\n    this.addChild(modal);\n    modal.on('dispose', function () {\n      _this12.removeChild(modal);\n    });\n\n    modal.open();\n    return modal;\n  };\n\n  /**\n   * Gets tag settings\n   *\n   * @param {Element} tag\n   *        The player tag\n   *\n   * @return {Object}\n   *         An object containing all of the settings\n   *         for a player tag\n   */\n\n\n  Player.getTagSettings = function getTagSettings(tag) {\n    var baseOptions = {\n      sources: [],\n      tracks: []\n    };\n\n    var tagOptions = getAttributes(tag);\n    var dataSetup = tagOptions['data-setup'];\n\n    if (hasClass(tag, 'vjs-fluid')) {\n      tagOptions.fluid = true;\n    }\n\n    // Check if data-setup attr exists.\n    if (dataSetup !== null) {\n      // Parse options JSON\n      // If empty string, make it a parsable json object.\n      var _safeParseTuple = safeParseTuple(dataSetup || '{}'),\n          err = _safeParseTuple[0],\n          data = _safeParseTuple[1];\n\n      if (err) {\n        log$1.error(err);\n      }\n      assign(tagOptions, data);\n    }\n\n    assign(baseOptions, tagOptions);\n\n    // Get tag children settings\n    if (tag.hasChildNodes()) {\n      var children = tag.childNodes;\n\n      for (var i = 0, j = children.length; i < j; i++) {\n        var child = children[i];\n        // Change case needed: http://ejohn.org/blog/nodename-case-sensitivity/\n        var childName = child.nodeName.toLowerCase();\n\n        if (childName === 'source') {\n          baseOptions.sources.push(getAttributes(child));\n        } else if (childName === 'track') {\n          baseOptions.tracks.push(getAttributes(child));\n        }\n      }\n    }\n\n    return baseOptions;\n  };\n\n  /**\n   * Determine whether or not flexbox is supported\n   *\n   * @return {boolean}\n   *         - true if flexbox is supported\n   *         - false if flexbox is not supported\n   */\n\n\n  Player.prototype.flexNotSupported_ = function flexNotSupported_() {\n    var elem = document.createElement('i');\n\n    // Note: We don't actually use flexBasis (or flexOrder), but it's one of the more\n    // common flex features that we can rely on when checking for flex support.\n    return !('flexBasis' in elem.style || 'webkitFlexBasis' in elem.style || 'mozFlexBasis' in elem.style || 'msFlexBasis' in elem.style ||\n    // IE10-specific (2012 flex spec), available for completeness\n    'msFlexOrder' in elem.style);\n  };\n\n  return Player;\n}(Component);\n\n/**\n * Get the {@link VideoTrackList}\n * @link https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist\n *\n * @return {VideoTrackList}\n *         the current video track list\n *\n * @method Player.prototype.videoTracks\n */\n\n/**\n * Get the {@link AudioTrackList}\n * @link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist\n *\n * @return {AudioTrackList}\n *         the current audio track list\n *\n * @method Player.prototype.audioTracks\n */\n\n/**\n * Get the {@link TextTrackList}\n *\n * @link http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-texttracks\n *\n * @return {TextTrackList}\n *         the current text track list\n *\n * @method Player.prototype.textTracks\n */\n\n/**\n * Get the remote {@link TextTrackList}\n *\n * @return {TextTrackList}\n *         The current remote text track list\n *\n * @method Player.prototype.remoteTextTracks\n */\n\n/**\n * Get the remote {@link HtmlTrackElementList} tracks.\n *\n * @return {HtmlTrackElementList}\n *         The current remote text track element list\n *\n * @method Player.prototype.remoteTextTrackEls\n */\n\nALL.names.forEach(function (name$$1) {\n  var props = ALL[name$$1];\n\n  Player.prototype[props.getterName] = function () {\n    if (this.tech_) {\n      return this.tech_[props.getterName]();\n    }\n\n    // if we have not yet loadTech_, we create {video,audio,text}Tracks_\n    // these will be passed to the tech during loading\n    this[props.privateName] = this[props.privateName] || new props.ListClass();\n    return this[props.privateName];\n  };\n});\n\n/**\n * Global player list\n *\n * @type {Object}\n */\nPlayer.players = {};\n\nvar navigator = window$1.navigator;\n\n/*\n * Player instance options, surfaced using options\n * options = Player.prototype.options_\n * Make changes in options, not here.\n *\n * @type {Object}\n * @private\n */\nPlayer.prototype.options_ = {\n  // Default order of fallback technology\n  techOrder: Tech.defaultTechOrder_,\n\n  html5: {},\n  flash: {},\n\n  // default inactivity timeout\n  inactivityTimeout: 2000,\n\n  // default playback rates\n  playbackRates: [],\n  // Add playback rate selection by adding rates\n  // 'playbackRates': [0.5, 1, 1.5, 2],\n\n  // Included control sets\n  children: ['mediaLoader', 'posterImage', 'textTrackDisplay', 'loadingSpinner', 'bigPlayButton', 'controlBar', 'errorDisplay', 'textTrackSettings', 'resizeManager'],\n\n  language: navigator && (navigator.languages && navigator.languages[0] || navigator.userLanguage || navigator.language) || 'en',\n\n  // locales and their language translations\n  languages: {},\n\n  // Default message to show when a video cannot be played.\n  notSupportedMessage: 'No compatible source was found for this media.'\n};\n\n[\n/**\n * Returns whether or not the player is in the \"ended\" state.\n *\n * @return {Boolean} True if the player is in the ended state, false if not.\n * @method Player#ended\n */\n'ended',\n/**\n * Returns whether or not the player is in the \"seeking\" state.\n *\n * @return {Boolean} True if the player is in the seeking state, false if not.\n * @method Player#seeking\n */\n'seeking',\n/**\n * Returns the TimeRanges of the media that are currently available\n * for seeking to.\n *\n * @return {TimeRanges} the seekable intervals of the media timeline\n * @method Player#seekable\n */\n'seekable',\n/**\n * Returns the current state of network activity for the element, from\n * the codes in the list below.\n * - NETWORK_EMPTY (numeric value 0)\n *   The element has not yet been initialised. All attributes are in\n *   their initial states.\n * - NETWORK_IDLE (numeric value 1)\n *   The element's resource selection algorithm is active and has\n *   selected a resource, but it is not actually using the network at\n *   this time.\n * - NETWORK_LOADING (numeric value 2)\n *   The user agent is actively trying to download data.\n * - NETWORK_NO_SOURCE (numeric value 3)\n *   The element's resource selection algorithm is active, but it has\n *   not yet found a resource to use.\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#network-states\n * @return {number} the current network activity state\n * @method Player#networkState\n */\n'networkState',\n/**\n * Returns a value that expresses the current state of the element\n * with respect to rendering the current playback position, from the\n * codes in the list below.\n * - HAVE_NOTHING (numeric value 0)\n *   No information regarding the media resource is available.\n * - HAVE_METADATA (numeric value 1)\n *   Enough of the resource has been obtained that the duration of the\n *   resource is available.\n * - HAVE_CURRENT_DATA (numeric value 2)\n *   Data for the immediate current playback position is available.\n * - HAVE_FUTURE_DATA (numeric value 3)\n *   Data for the immediate current playback position is available, as\n *   well as enough data for the user agent to advance the current\n *   playback position in the direction of playback.\n * - HAVE_ENOUGH_DATA (numeric value 4)\n *   The user agent estimates that enough data is available for\n *   playback to proceed uninterrupted.\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-readystate\n * @return {number} the current playback rendering state\n * @method Player#readyState\n */\n'readyState'].forEach(function (fn) {\n  Player.prototype[fn] = function () {\n    return this.techGet_(fn);\n  };\n});\n\nTECH_EVENTS_RETRIGGER.forEach(function (event) {\n  Player.prototype['handleTech' + toTitleCase(event) + '_'] = function () {\n    return this.trigger(event);\n  };\n});\n\n/**\n * Fired when the player has initial duration and dimension information\n *\n * @event Player#loadedmetadata\n * @type {EventTarget~Event}\n */\n\n/**\n * Fired when the player has downloaded data at the current playback position\n *\n * @event Player#loadeddata\n * @type {EventTarget~Event}\n */\n\n/**\n * Fired when the current playback position has changed *\n * During playback this is fired every 15-250 milliseconds, depending on the\n * playback technology in use.\n *\n * @event Player#timeupdate\n * @type {EventTarget~Event}\n */\n\n/**\n * Fired when the volume changes\n *\n * @event Player#volumechange\n * @type {EventTarget~Event}\n */\n\n/**\n * Reports whether or not a player has a plugin available.\n *\n * This does not report whether or not the plugin has ever been initialized\n * on this player. For that, [usingPlugin]{@link Player#usingPlugin}.\n *\n * @method Player#hasPlugin\n * @param  {string}  name\n *         The name of a plugin.\n *\n * @return {boolean}\n *         Whether or not this player has the requested plugin available.\n */\n\n/**\n * Reports whether or not a player is using a plugin by name.\n *\n * For basic plugins, this only reports whether the plugin has _ever_ been\n * initialized on this player.\n *\n * @method Player#usingPlugin\n * @param  {string} name\n *         The name of a plugin.\n *\n * @return {boolean}\n *         Whether or not this player is using the requested plugin.\n */\n\nComponent.registerComponent('Player', Player);\n\n/**\n * @file plugin.js\n */\n\n/**\n * The base plugin name.\n *\n * @private\n * @constant\n * @type {string}\n */\nvar BASE_PLUGIN_NAME = 'plugin';\n\n/**\n * The key on which a player's active plugins cache is stored.\n *\n * @private\n * @constant\n * @type     {string}\n */\nvar PLUGIN_CACHE_KEY = 'activePlugins_';\n\n/**\n * Stores registered plugins in a private space.\n *\n * @private\n * @type    {Object}\n */\nvar pluginStorage = {};\n\n/**\n * Reports whether or not a plugin has been registered.\n *\n * @private\n * @param   {string} name\n *          The name of a plugin.\n *\n * @returns {boolean}\n *          Whether or not the plugin has been registered.\n */\nvar pluginExists = function pluginExists(name) {\n  return pluginStorage.hasOwnProperty(name);\n};\n\n/**\n * Get a single registered plugin by name.\n *\n * @private\n * @param   {string} name\n *          The name of a plugin.\n *\n * @returns {Function|undefined}\n *          The plugin (or undefined).\n */\nvar getPlugin = function getPlugin(name) {\n  return pluginExists(name) ? pluginStorage[name] : undefined;\n};\n\n/**\n * Marks a plugin as \"active\" on a player.\n *\n * Also, ensures that the player has an object for tracking active plugins.\n *\n * @private\n * @param   {Player} player\n *          A Video.js player instance.\n *\n * @param   {string} name\n *          The name of a plugin.\n */\nvar markPluginAsActive = function markPluginAsActive(player, name) {\n  player[PLUGIN_CACHE_KEY] = player[PLUGIN_CACHE_KEY] || {};\n  player[PLUGIN_CACHE_KEY][name] = true;\n};\n\n/**\n * Triggers a pair of plugin setup events.\n *\n * @private\n * @param  {Player} player\n *         A Video.js player instance.\n *\n * @param  {Plugin~PluginEventHash} hash\n *         A plugin event hash.\n *\n * @param  {Boolean} [before]\n *         If true, prefixes the event name with \"before\". In other words,\n *         use this to trigger \"beforepluginsetup\" instead of \"pluginsetup\".\n */\nvar triggerSetupEvent = function triggerSetupEvent(player, hash, before) {\n  var eventName = (before ? 'before' : '') + 'pluginsetup';\n\n  player.trigger(eventName, hash);\n  player.trigger(eventName + ':' + hash.name, hash);\n};\n\n/**\n * Takes a basic plugin function and returns a wrapper function which marks\n * on the player that the plugin has been activated.\n *\n * @private\n * @param   {string} name\n *          The name of the plugin.\n *\n * @param   {Function} plugin\n *          The basic plugin.\n *\n * @returns {Function}\n *          A wrapper function for the given plugin.\n */\nvar createBasicPlugin = function createBasicPlugin(name, plugin) {\n  var basicPluginWrapper = function basicPluginWrapper() {\n\n    // We trigger the \"beforepluginsetup\" and \"pluginsetup\" events on the player\n    // regardless, but we want the hash to be consistent with the hash provided\n    // for advanced plugins.\n    //\n    // The only potentially counter-intuitive thing here is the `instance` in\n    // the \"pluginsetup\" event is the value returned by the `plugin` function.\n    triggerSetupEvent(this, { name: name, plugin: plugin, instance: null }, true);\n\n    var instance = plugin.apply(this, arguments);\n\n    markPluginAsActive(this, name);\n    triggerSetupEvent(this, { name: name, plugin: plugin, instance: instance });\n\n    return instance;\n  };\n\n  Object.keys(plugin).forEach(function (prop) {\n    basicPluginWrapper[prop] = plugin[prop];\n  });\n\n  return basicPluginWrapper;\n};\n\n/**\n * Takes a plugin sub-class and returns a factory function for generating\n * instances of it.\n *\n * This factory function will replace itself with an instance of the requested\n * sub-class of Plugin.\n *\n * @private\n * @param   {string} name\n *          The name of the plugin.\n *\n * @param   {Plugin} PluginSubClass\n *          The advanced plugin.\n *\n * @returns {Function}\n */\nvar createPluginFactory = function createPluginFactory(name, PluginSubClass) {\n\n  // Add a `name` property to the plugin prototype so that each plugin can\n  // refer to itself by name.\n  PluginSubClass.prototype.name = name;\n\n  return function () {\n    triggerSetupEvent(this, { name: name, plugin: PluginSubClass, instance: null }, true);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var instance = new (Function.prototype.bind.apply(PluginSubClass, [null].concat([this].concat(args))))();\n\n    // The plugin is replaced by a function that returns the current instance.\n    this[name] = function () {\n      return instance;\n    };\n\n    triggerSetupEvent(this, instance.getEventHash());\n\n    return instance;\n  };\n};\n\n/**\n * Parent class for all advanced plugins.\n *\n * @mixes   module:evented~EventedMixin\n * @mixes   module:stateful~StatefulMixin\n * @fires   Player#beforepluginsetup\n * @fires   Player#beforepluginsetup:$name\n * @fires   Player#pluginsetup\n * @fires   Player#pluginsetup:$name\n * @listens Player#dispose\n * @throws  {Error}\n *          If attempting to instantiate the base {@link Plugin} class\n *          directly instead of via a sub-class.\n */\n\nvar Plugin = function () {\n\n  /**\n   * Creates an instance of this class.\n   *\n   * Sub-classes should call `super` to ensure plugins are properly initialized.\n   *\n   * @param {Player} player\n   *        A Video.js player instance.\n   */\n  function Plugin(player) {\n    classCallCheck(this, Plugin);\n\n    if (this.constructor === Plugin) {\n      throw new Error('Plugin must be sub-classed; not directly instantiated.');\n    }\n\n    this.player = player;\n\n    // Make this object evented, but remove the added `trigger` method so we\n    // use the prototype version instead.\n    evented(this);\n    delete this.trigger;\n\n    stateful(this, this.constructor.defaultState);\n    markPluginAsActive(player, this.name);\n\n    // Auto-bind the dispose method so we can use it as a listener and unbind\n    // it later easily.\n    this.dispose = bind(this, this.dispose);\n\n    // If the player is disposed, dispose the plugin.\n    player.on('dispose', this.dispose);\n  }\n\n  /**\n   * Get the version of the plugin that was set on <pluginName>.VERSION\n   */\n\n\n  Plugin.prototype.version = function version() {\n    return this.constructor.VERSION;\n  };\n\n  /**\n   * Each event triggered by plugins includes a hash of additional data with\n   * conventional properties.\n   *\n   * This returns that object or mutates an existing hash.\n   *\n   * @param   {Object} [hash={}]\n   *          An object to be used as event an event hash.\n   *\n   * @returns {Plugin~PluginEventHash}\n   *          An event hash object with provided properties mixed-in.\n   */\n\n\n  Plugin.prototype.getEventHash = function getEventHash() {\n    var hash = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    hash.name = this.name;\n    hash.plugin = this.constructor;\n    hash.instance = this;\n    return hash;\n  };\n\n  /**\n   * Triggers an event on the plugin object and overrides\n   * {@link module:evented~EventedMixin.trigger|EventedMixin.trigger}.\n   *\n   * @param   {string|Object} event\n   *          An event type or an object with a type property.\n   *\n   * @param   {Object} [hash={}]\n   *          Additional data hash to merge with a\n   *          {@link Plugin~PluginEventHash|PluginEventHash}.\n   *\n   * @returns {boolean}\n   *          Whether or not default was prevented.\n   */\n\n\n  Plugin.prototype.trigger = function trigger$$1(event) {\n    var hash = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    return trigger(this.eventBusEl_, event, this.getEventHash(hash));\n  };\n\n  /**\n   * Handles \"statechanged\" events on the plugin. No-op by default, override by\n   * subclassing.\n   *\n   * @abstract\n   * @param    {Event} e\n   *           An event object provided by a \"statechanged\" event.\n   *\n   * @param    {Object} e.changes\n   *           An object describing changes that occurred with the \"statechanged\"\n   *           event.\n   */\n\n\n  Plugin.prototype.handleStateChanged = function handleStateChanged(e) {};\n\n  /**\n   * Disposes a plugin.\n   *\n   * Subclasses can override this if they want, but for the sake of safety,\n   * it's probably best to subscribe the \"dispose\" event.\n   *\n   * @fires Plugin#dispose\n   */\n\n\n  Plugin.prototype.dispose = function dispose() {\n    var name = this.name,\n        player = this.player;\n\n    /**\n     * Signals that a advanced plugin is about to be disposed.\n     *\n     * @event Plugin#dispose\n     * @type  {EventTarget~Event}\n     */\n\n    this.trigger('dispose');\n    this.off();\n    player.off('dispose', this.dispose);\n\n    // Eliminate any possible sources of leaking memory by clearing up\n    // references between the player and the plugin instance and nulling out\n    // the plugin's state and replacing methods with a function that throws.\n    player[PLUGIN_CACHE_KEY][name] = false;\n    this.player = this.state = null;\n\n    // Finally, replace the plugin name on the player with a new factory\n    // function, so that the plugin is ready to be set up again.\n    player[name] = createPluginFactory(name, pluginStorage[name]);\n  };\n\n  /**\n   * Determines if a plugin is a basic plugin (i.e. not a sub-class of `Plugin`).\n   *\n   * @param   {string|Function} plugin\n   *          If a string, matches the name of a plugin. If a function, will be\n   *          tested directly.\n   *\n   * @returns {boolean}\n   *          Whether or not a plugin is a basic plugin.\n   */\n\n\n  Plugin.isBasic = function isBasic(plugin) {\n    var p = typeof plugin === 'string' ? getPlugin(plugin) : plugin;\n\n    return typeof p === 'function' && !Plugin.prototype.isPrototypeOf(p.prototype);\n  };\n\n  /**\n   * Register a Video.js plugin.\n   *\n   * @param   {string} name\n   *          The name of the plugin to be registered. Must be a string and\n   *          must not match an existing plugin or a method on the `Player`\n   *          prototype.\n   *\n   * @param   {Function} plugin\n   *          A sub-class of `Plugin` or a function for basic plugins.\n   *\n   * @returns {Function}\n   *          For advanced plugins, a factory function for that plugin. For\n   *          basic plugins, a wrapper function that initializes the plugin.\n   */\n\n\n  Plugin.registerPlugin = function registerPlugin(name, plugin) {\n    if (typeof name !== 'string') {\n      throw new Error('Illegal plugin name, \"' + name + '\", must be a string, was ' + (typeof name === 'undefined' ? 'undefined' : _typeof(name)) + '.');\n    }\n\n    if (pluginExists(name)) {\n      log$1.warn('A plugin named \"' + name + '\" already exists. You may want to avoid re-registering plugins!');\n    } else if (Player.prototype.hasOwnProperty(name)) {\n      throw new Error('Illegal plugin name, \"' + name + '\", cannot share a name with an existing player method!');\n    }\n\n    if (typeof plugin !== 'function') {\n      throw new Error('Illegal plugin for \"' + name + '\", must be a function, was ' + (typeof plugin === 'undefined' ? 'undefined' : _typeof(plugin)) + '.');\n    }\n\n    pluginStorage[name] = plugin;\n\n    // Add a player prototype method for all sub-classed plugins (but not for\n    // the base Plugin class).\n    if (name !== BASE_PLUGIN_NAME) {\n      if (Plugin.isBasic(plugin)) {\n        Player.prototype[name] = createBasicPlugin(name, plugin);\n      } else {\n        Player.prototype[name] = createPluginFactory(name, plugin);\n      }\n    }\n\n    return plugin;\n  };\n\n  /**\n   * De-register a Video.js plugin.\n   *\n   * @param {string} name\n   *        The name of the plugin to be deregistered.\n   */\n\n\n  Plugin.deregisterPlugin = function deregisterPlugin(name) {\n    if (name === BASE_PLUGIN_NAME) {\n      throw new Error('Cannot de-register base plugin.');\n    }\n    if (pluginExists(name)) {\n      delete pluginStorage[name];\n      delete Player.prototype[name];\n    }\n  };\n\n  /**\n   * Gets an object containing multiple Video.js plugins.\n   *\n   * @param   {Array} [names]\n   *          If provided, should be an array of plugin names. Defaults to _all_\n   *          plugin names.\n   *\n   * @returns {Object|undefined}\n   *          An object containing plugin(s) associated with their name(s) or\n   *          `undefined` if no matching plugins exist).\n   */\n\n\n  Plugin.getPlugins = function getPlugins() {\n    var names = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Object.keys(pluginStorage);\n\n    var result = void 0;\n\n    names.forEach(function (name) {\n      var plugin = getPlugin(name);\n\n      if (plugin) {\n        result = result || {};\n        result[name] = plugin;\n      }\n    });\n\n    return result;\n  };\n\n  /**\n   * Gets a plugin's version, if available\n   *\n   * @param   {string} name\n   *          The name of a plugin.\n   *\n   * @returns {string}\n   *          The plugin's version or an empty string.\n   */\n\n\n  Plugin.getPluginVersion = function getPluginVersion(name) {\n    var plugin = getPlugin(name);\n\n    return plugin && plugin.VERSION || '';\n  };\n\n  return Plugin;\n}();\n\n/**\n * Gets a plugin by name if it exists.\n *\n * @static\n * @method   getPlugin\n * @memberOf Plugin\n * @param    {string} name\n *           The name of a plugin.\n *\n * @returns  {Function|undefined}\n *           The plugin (or `undefined`).\n */\n\n\nPlugin.getPlugin = getPlugin;\n\n/**\n * The name of the base plugin class as it is registered.\n *\n * @type {string}\n */\nPlugin.BASE_PLUGIN_NAME = BASE_PLUGIN_NAME;\n\nPlugin.registerPlugin(BASE_PLUGIN_NAME, Plugin);\n\n/**\n * Documented in player.js\n *\n * @ignore\n */\nPlayer.prototype.usingPlugin = function (name) {\n  return !!this[PLUGIN_CACHE_KEY] && this[PLUGIN_CACHE_KEY][name] === true;\n};\n\n/**\n * Documented in player.js\n *\n * @ignore\n */\nPlayer.prototype.hasPlugin = function (name) {\n  return !!pluginExists(name);\n};\n\n/**\n * @file extend.js\n * @module extend\n */\n\n/**\n * A combination of node inherits and babel's inherits (after transpile).\n * Both work the same but node adds `super_` to the subClass\n * and Bable adds the superClass as __proto__. Both seem useful.\n *\n * @param {Object} subClass\n *        The class to inherit to\n *\n * @param {Object} superClass\n *        The class to inherit from\n *\n * @private\n */\nvar _inherits = function _inherits(subClass, superClass) {\n  if (typeof superClass !== 'function' && superClass !== null) {\n    throw new TypeError('Super expression must either be null or a function, not ' + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (superClass) {\n    // node\n    subClass.super_ = superClass;\n  }\n};\n\n/**\n * Function for subclassing using the same inheritance that\n * videojs uses internally\n *\n * @static\n * @const\n *\n * @param {Object} superClass\n *        The class to inherit from\n *\n * @param {Object} [subClassMethods={}]\n *        The class to inherit to\n *\n * @return {Object}\n *         The new object with subClassMethods that inherited superClass.\n */\nvar extendFn = function extendFn(superClass) {\n  var subClassMethods = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var subClass = function subClass() {\n    superClass.apply(this, arguments);\n  };\n\n  var methods = {};\n\n  if ((typeof subClassMethods === 'undefined' ? 'undefined' : _typeof(subClassMethods)) === 'object') {\n    if (subClassMethods.constructor !== Object.prototype.constructor) {\n      subClass = subClassMethods.constructor;\n    }\n    methods = subClassMethods;\n  } else if (typeof subClassMethods === 'function') {\n    subClass = subClassMethods;\n  }\n\n  _inherits(subClass, superClass);\n\n  // Extend subObj's prototype with functions and other properties from props\n  for (var name in methods) {\n    if (methods.hasOwnProperty(name)) {\n      subClass.prototype[name] = methods[name];\n    }\n  }\n\n  return subClass;\n};\n\n/**\n * @file video.js\n * @module videojs\n */\n\n/**\n * Normalize an `id` value by trimming off a leading `#`\n *\n * @param   {string} id\n *          A string, maybe with a leading `#`.\n *\n * @returns {string}\n *          The string, without any leading `#`.\n */\nvar normalizeId = function normalizeId(id) {\n  return id.indexOf('#') === 0 ? id.slice(1) : id;\n};\n\n/**\n * Doubles as the main function for users to create a player instance and also\n * the main library object.\n * The `videojs` function can be used to initialize or retrieve a player.\n  *\n * @param {string|Element} id\n *        Video element or video element ID\n *\n * @param {Object} [options]\n *        Optional options object for config/settings\n *\n * @param {Component~ReadyCallback} [ready]\n *        Optional ready callback\n *\n * @return {Player}\n *         A player instance\n */\nfunction videojs$1(id, options, ready) {\n  var player = videojs$1.getPlayer(id);\n\n  if (player) {\n    if (options) {\n      log$1.warn('Player \"' + id + '\" is already initialised. Options will not be applied.');\n    }\n    if (ready) {\n      player.ready(ready);\n    }\n    return player;\n  }\n\n  var el = typeof id === 'string' ? $('#' + normalizeId(id)) : id;\n\n  if (!isEl(el)) {\n    throw new TypeError('The element or ID supplied is not valid. (videojs)');\n  }\n\n  if (!document.body.contains(el)) {\n    log$1.warn('The element supplied is not included in the DOM');\n  }\n\n  options = options || {};\n\n  videojs$1.hooks('beforesetup').forEach(function (hookFunction) {\n    var opts = hookFunction(el, mergeOptions(options));\n\n    if (!isObject(opts) || Array.isArray(opts)) {\n      log$1.error('please return an object in beforesetup hooks');\n      return;\n    }\n\n    options = mergeOptions(options, opts);\n  });\n\n  // We get the current \"Player\" component here in case an integration has\n  // replaced it with a custom player.\n  var PlayerComponent = Component.getComponent('Player');\n\n  player = new PlayerComponent(el, options, ready);\n\n  videojs$1.hooks('setup').forEach(function (hookFunction) {\n    return hookFunction(player);\n  });\n\n  return player;\n}\n\n/**\n * An Object that contains lifecycle hooks as keys which point to an array\n * of functions that are run when a lifecycle is triggered\n */\nvideojs$1.hooks_ = {};\n\n/**\n * Get a list of hooks for a specific lifecycle\n * @function videojs.hooks\n *\n * @param {string} type\n *        the lifecyle to get hooks from\n *\n * @param {Function|Function[]} [fn]\n *        Optionally add a hook (or hooks) to the lifecycle that your are getting.\n *\n * @return {Array}\n *         an array of hooks, or an empty array if there are none.\n */\nvideojs$1.hooks = function (type, fn) {\n  videojs$1.hooks_[type] = videojs$1.hooks_[type] || [];\n  if (fn) {\n    videojs$1.hooks_[type] = videojs$1.hooks_[type].concat(fn);\n  }\n  return videojs$1.hooks_[type];\n};\n\n/**\n * Add a function hook to a specific videojs lifecycle.\n *\n * @param {string} type\n *        the lifecycle to hook the function to.\n *\n * @param {Function|Function[]}\n *        The function or array of functions to attach.\n */\nvideojs$1.hook = function (type, fn) {\n  videojs$1.hooks(type, fn);\n};\n\n/**\n * Add a function hook that will only run once to a specific videojs lifecycle.\n *\n * @param {string} type\n *        the lifecycle to hook the function to.\n *\n * @param {Function|Function[]}\n *        The function or array of functions to attach.\n */\nvideojs$1.hookOnce = function (type, fn) {\n  videojs$1.hooks(type, [].concat(fn).map(function (original) {\n    var wrapper = function wrapper() {\n      videojs$1.removeHook(type, wrapper);\n      return original.apply(undefined, arguments);\n    };\n\n    return wrapper;\n  }));\n};\n\n/**\n * Remove a hook from a specific videojs lifecycle.\n *\n * @param {string} type\n *        the lifecycle that the function hooked to\n *\n * @param {Function} fn\n *        The hooked function to remove\n *\n * @return {boolean}\n *         The function that was removed or undef\n */\nvideojs$1.removeHook = function (type, fn) {\n  var index = videojs$1.hooks(type).indexOf(fn);\n\n  if (index <= -1) {\n    return false;\n  }\n\n  videojs$1.hooks_[type] = videojs$1.hooks_[type].slice();\n  videojs$1.hooks_[type].splice(index, 1);\n\n  return true;\n};\n\n// Add default styles\nif (window$1.VIDEOJS_NO_DYNAMIC_STYLE !== true && isReal()) {\n  var style$1 = $('.vjs-styles-defaults');\n\n  if (!style$1) {\n    style$1 = createStyleElement('vjs-styles-defaults');\n    var head = $('head');\n\n    if (head) {\n      head.insertBefore(style$1, head.firstChild);\n    }\n    setTextContent(style$1, '\\n      .video-js {\\n        width: 300px;\\n        height: 150px;\\n      }\\n\\n      .vjs-fluid {\\n        padding-top: 56.25%\\n      }\\n    ');\n  }\n}\n\n// Run Auto-load players\n// You have to wait at least once in case this script is loaded after your\n// video in the DOM (weird behavior only with minified version)\nautoSetupTimeout(1, videojs$1);\n\n/**\n * Current software version. Follows semver.\n *\n * @type {string}\n */\nvideojs$1.VERSION = version;\n\n/**\n * The global options object. These are the settings that take effect\n * if no overrides are specified when the player is created.\n *\n * @type {Object}\n */\nvideojs$1.options = Player.prototype.options_;\n\n/**\n * Get an object with the currently created players, keyed by player ID\n *\n * @return {Object}\n *         The created players\n */\nvideojs$1.getPlayers = function () {\n  return Player.players;\n};\n\n/**\n * Get a single player based on an ID or DOM element.\n *\n * This is useful if you want to check if an element or ID has an associated\n * Video.js player, but not create one if it doesn't.\n *\n * @param   {string|Element} id\n *          An HTML element - `<video>`, `<audio>`, or `<video-js>` -\n *          or a string matching the `id` of such an element.\n *\n * @returns {Player|undefined}\n *          A player instance or `undefined` if there is no player instance\n *          matching the argument.\n */\nvideojs$1.getPlayer = function (id) {\n  var players = Player.players;\n  var tag = void 0;\n\n  if (typeof id === 'string') {\n    var nId = normalizeId(id);\n    var player = players[nId];\n\n    if (player) {\n      return player;\n    }\n\n    tag = $('#' + nId);\n  } else {\n    tag = id;\n  }\n\n  if (isEl(tag)) {\n    var _tag = tag,\n        _player = _tag.player,\n        playerId = _tag.playerId;\n\n    // Element may have a `player` property referring to an already created\n    // player instance. If so, return that.\n\n    if (_player || players[playerId]) {\n      return _player || players[playerId];\n    }\n  }\n};\n\n/**\n * Returns an array of all current players.\n *\n * @return {Array}\n *         An array of all players. The array will be in the order that\n *         `Object.keys` provides, which could potentially vary between\n *         JavaScript engines.\n *\n */\nvideojs$1.getAllPlayers = function () {\n  return (\n\n    // Disposed players leave a key with a `null` value, so we need to make sure\n    // we filter those out.\n    Object.keys(Player.players).map(function (k) {\n      return Player.players[k];\n    }).filter(Boolean)\n  );\n};\n\n/**\n * Expose players object.\n *\n * @memberOf videojs\n * @property {Object} players\n */\nvideojs$1.players = Player.players;\n\n/**\n * Get a component class object by name\n *\n * @borrows Component.getComponent as videojs.getComponent\n */\nvideojs$1.getComponent = Component.getComponent;\n\n/**\n * Register a component so it can referred to by name. Used when adding to other\n * components, either through addChild `component.addChild('myComponent')` or through\n * default children options  `{ children: ['myComponent'] }`.\n *\n * > NOTE: You could also just initialize the component before adding.\n * `component.addChild(new MyComponent());`\n *\n * @param {string} name\n *        The class name of the component\n *\n * @param {Component} comp\n *        The component class\n *\n * @return {Component}\n *         The newly registered component\n */\nvideojs$1.registerComponent = function (name$$1, comp) {\n  if (Tech.isTech(comp)) {\n    log$1.warn('The ' + name$$1 + ' tech was registered as a component. It should instead be registered using videojs.registerTech(name, tech)');\n  }\n\n  Component.registerComponent.call(Component, name$$1, comp);\n};\n\n/**\n * Get a Tech class object by name\n *\n * @borrows Tech.getTech as videojs.getTech\n */\nvideojs$1.getTech = Tech.getTech;\n\n/**\n * Register a Tech so it can referred to by name.\n * This is used in the tech order for the player.\n *\n * @borrows Tech.registerTech as videojs.registerTech\n */\nvideojs$1.registerTech = Tech.registerTech;\n\n/**\n * Register a middleware to a source type.\n *\n * @param {String} type A string representing a MIME type.\n * @param {function(player):object} middleware A middleware factory that takes a player.\n */\nvideojs$1.use = use;\n\n/**\n * An object that can be returned by a middleware to signify\n * that the middleware is being terminated.\n *\n * @type {object}\n * @memberOf {videojs}\n * @property {object} middleware.TERMINATOR\n */\nObject.defineProperty(videojs$1, 'middleware', {\n  value: {},\n  writeable: false,\n  enumerable: true\n});\n\nObject.defineProperty(videojs$1.middleware, 'TERMINATOR', {\n  value: TERMINATOR,\n  writeable: false,\n  enumerable: true\n});\n\n/**\n * A suite of browser and device tests from {@link browser}.\n *\n * @type {Object}\n * @private\n */\nvideojs$1.browser = browser;\n\n/**\n * Whether or not the browser supports touch events. Included for backward\n * compatibility with 4.x, but deprecated. Use `videojs.browser.TOUCH_ENABLED`\n * instead going forward.\n *\n * @deprecated since version 5.0\n * @type {boolean}\n */\nvideojs$1.TOUCH_ENABLED = TOUCH_ENABLED;\n\n/**\n * Subclass an existing class\n * Mimics ES6 subclassing with the `extend` keyword\n *\n * @borrows extend:extendFn as videojs.extend\n */\nvideojs$1.extend = extendFn;\n\n/**\n * Merge two options objects recursively\n * Performs a deep merge like lodash.merge but **only merges plain objects**\n * (not arrays, elements, anything else)\n * Other values will be copied directly from the second object.\n *\n * @borrows merge-options:mergeOptions as videojs.mergeOptions\n */\nvideojs$1.mergeOptions = mergeOptions;\n\n/**\n * Change the context (this) of a function\n *\n * > NOTE: as of v5.0 we require an ES5 shim, so you should use the native\n * `function() {}.bind(newContext);` instead of this.\n *\n * @borrows fn:bind as videojs.bind\n */\nvideojs$1.bind = bind;\n\n/**\n * Register a Video.js plugin.\n *\n * @borrows plugin:registerPlugin as videojs.registerPlugin\n * @method registerPlugin\n *\n * @param  {string} name\n *         The name of the plugin to be registered. Must be a string and\n *         must not match an existing plugin or a method on the `Player`\n *         prototype.\n *\n * @param  {Function} plugin\n *         A sub-class of `Plugin` or a function for basic plugins.\n *\n * @return {Function}\n *         For advanced plugins, a factory function for that plugin. For\n *         basic plugins, a wrapper function that initializes the plugin.\n */\nvideojs$1.registerPlugin = Plugin.registerPlugin;\n\n/**\n * Deregister a Video.js plugin.\n *\n * @borrows plugin:deregisterPlugin as videojs.deregisterPlugin\n * @method deregisterPlugin\n *\n * @param  {string} name\n *         The name of the plugin to be deregistered. Must be a string and\n *         must match an existing plugin or a method on the `Player`\n *         prototype.\n *\n */\nvideojs$1.deregisterPlugin = Plugin.deregisterPlugin;\n\n/**\n * Deprecated method to register a plugin with Video.js\n *\n * @deprecated\n *        videojs.plugin() is deprecated; use videojs.registerPlugin() instead\n *\n * @param {string} name\n *        The plugin name\n *\n * @param {Plugin|Function} plugin\n *         The plugin sub-class or function\n */\nvideojs$1.plugin = function (name$$1, plugin) {\n  log$1.warn('videojs.plugin() is deprecated; use videojs.registerPlugin() instead');\n  return Plugin.registerPlugin(name$$1, plugin);\n};\n\n/**\n * Gets an object containing multiple Video.js plugins.\n *\n * @param  {Array} [names]\n *         If provided, should be an array of plugin names. Defaults to _all_\n *         plugin names.\n *\n * @return {Object|undefined}\n *         An object containing plugin(s) associated with their name(s) or\n *         `undefined` if no matching plugins exist).\n */\nvideojs$1.getPlugins = Plugin.getPlugins;\n\n/**\n * Gets a plugin by name if it exists.\n *\n * @param  {string} name\n *         The name of a plugin.\n *\n * @return {Function|undefined}\n *         The plugin (or `undefined`).\n */\nvideojs$1.getPlugin = Plugin.getPlugin;\n\n/**\n * Gets a plugin's version, if available\n *\n * @param  {string} name\n *         The name of a plugin.\n *\n * @return {string}\n *         The plugin's version or an empty string.\n */\nvideojs$1.getPluginVersion = Plugin.getPluginVersion;\n\n/**\n * Adding languages so that they're available to all players.\n * Example: `videojs.addLanguage('es', { 'Hello': 'Hola' });`\n *\n * @param {string} code\n *        The language code or dictionary property\n *\n * @param {Object} data\n *        The data values to be translated\n *\n * @return {Object}\n *         The resulting language dictionary object\n */\nvideojs$1.addLanguage = function (code, data) {\n  var _mergeOptions;\n\n  code = ('' + code).toLowerCase();\n\n  videojs$1.options.languages = mergeOptions(videojs$1.options.languages, (_mergeOptions = {}, _mergeOptions[code] = data, _mergeOptions));\n\n  return videojs$1.options.languages[code];\n};\n\n/**\n * Log messages\n *\n * @borrows log:log as videojs.log\n */\nvideojs$1.log = log$1;\n\n/**\n * Creates an emulated TimeRange object.\n *\n * @borrows time-ranges:createTimeRanges as videojs.createTimeRange\n */\n/**\n * @borrows time-ranges:createTimeRanges as videojs.createTimeRanges\n */\nvideojs$1.createTimeRange = videojs$1.createTimeRanges = createTimeRanges;\n\n/**\n * Format seconds as a time string, H:MM:SS or M:SS\n * Supplying a guide (in seconds) will force a number of leading zeros\n * to cover the length of the guide\n *\n * @borrows format-time:formatTime as videojs.formatTime\n */\nvideojs$1.formatTime = formatTime;\n\n/**\n * Replaces format-time with a custom implementation, to be used in place of the default.\n *\n * @borrows format-time:setFormatTime as videojs.setFormatTime\n *\n * @method setFormatTime\n *\n * @param {Function} customFn\n *        A custom format-time function which will be called with the current time and guide (in seconds) as arguments.\n *        Passed fn should return a string.\n */\nvideojs$1.setFormatTime = setFormatTime;\n\n/**\n * Resets format-time to the default implementation.\n *\n * @borrows format-time:resetFormatTime as videojs.resetFormatTime\n *\n * @method resetFormatTime\n */\nvideojs$1.resetFormatTime = resetFormatTime;\n\n/**\n * Resolve and parse the elements of a URL\n *\n * @borrows url:parseUrl as videojs.parseUrl\n *\n */\nvideojs$1.parseUrl = parseUrl;\n\n/**\n * Returns whether the url passed is a cross domain request or not.\n *\n * @borrows url:isCrossOrigin as videojs.isCrossOrigin\n */\nvideojs$1.isCrossOrigin = isCrossOrigin;\n\n/**\n * Event target class.\n *\n * @borrows EventTarget as videojs.EventTarget\n */\nvideojs$1.EventTarget = EventTarget;\n\n/**\n * Add an event listener to element\n * It stores the handler function in a separate cache object\n * and adds a generic handler to the element's event,\n * along with a unique id (guid) to the element.\n *\n * @borrows events:on as videojs.on\n */\nvideojs$1.on = on;\n\n/**\n * Trigger a listener only once for an event\n *\n * @borrows events:one as videojs.one\n */\nvideojs$1.one = one;\n\n/**\n * Removes event listeners from an element\n *\n * @borrows events:off as videojs.off\n */\nvideojs$1.off = off;\n\n/**\n * Trigger an event for an element\n *\n * @borrows events:trigger as videojs.trigger\n */\nvideojs$1.trigger = trigger;\n\n/**\n * A cross-browser XMLHttpRequest wrapper. Here's a simple example:\n *\n * @param {Object} options\n *        settings for the request.\n *\n * @return {XMLHttpRequest|XDomainRequest}\n *         The request object.\n *\n * @see https://github.com/Raynos/xhr\n */\nvideojs$1.xhr = xhr;\n\n/**\n * TextTrack class\n *\n * @borrows TextTrack as videojs.TextTrack\n */\nvideojs$1.TextTrack = TextTrack;\n\n/**\n * export the AudioTrack class so that source handlers can create\n * AudioTracks and then add them to the players AudioTrackList\n *\n * @borrows AudioTrack as videojs.AudioTrack\n */\nvideojs$1.AudioTrack = AudioTrack;\n\n/**\n * export the VideoTrack class so that source handlers can create\n * VideoTracks and then add them to the players VideoTrackList\n *\n * @borrows VideoTrack as videojs.VideoTrack\n */\nvideojs$1.VideoTrack = VideoTrack;\n\n/**\n * Determines, via duck typing, whether or not a value is a DOM element.\n *\n * @borrows dom:isEl as videojs.isEl\n * @deprecated Use videojs.dom.isEl() instead\n */\n\n/**\n * Determines, via duck typing, whether or not a value is a text node.\n *\n * @borrows dom:isTextNode as videojs.isTextNode\n * @deprecated Use videojs.dom.isTextNode() instead\n */\n\n/**\n * Creates an element and applies properties.\n *\n * @borrows dom:createEl as videojs.createEl\n * @deprecated Use videojs.dom.createEl() instead\n */\n\n/**\n * Check if an element has a CSS class\n *\n * @borrows dom:hasElClass as videojs.hasClass\n * @deprecated Use videojs.dom.hasClass() instead\n */\n\n/**\n * Add a CSS class name to an element\n *\n * @borrows dom:addElClass as videojs.addClass\n * @deprecated Use videojs.dom.addClass() instead\n */\n\n/**\n * Remove a CSS class name from an element\n *\n * @borrows dom:removeElClass as videojs.removeClass\n * @deprecated Use videojs.dom.removeClass() instead\n */\n\n/**\n * Adds or removes a CSS class name on an element depending on an optional\n * condition or the presence/absence of the class name.\n *\n * @borrows dom:toggleElClass as videojs.toggleClass\n * @deprecated Use videojs.dom.toggleClass() instead\n */\n\n/**\n * Apply attributes to an HTML element.\n *\n * @borrows dom:setElAttributes as videojs.setAttribute\n * @deprecated Use videojs.dom.setAttributes() instead\n */\n\n/**\n * Get an element's attribute values, as defined on the HTML tag\n * Attributes are not the same as properties. They're defined on the tag\n * or with setAttribute (which shouldn't be used with HTML)\n * This will return true or false for boolean attributes.\n *\n * @borrows dom:getElAttributes as videojs.getAttributes\n * @deprecated Use videojs.dom.getAttributes() instead\n */\n\n/**\n * Empties the contents of an element.\n *\n * @borrows dom:emptyEl as videojs.emptyEl\n * @deprecated Use videojs.dom.emptyEl() instead\n */\n\n/**\n * Normalizes and appends content to an element.\n *\n * The content for an element can be passed in multiple types and\n * combinations, whose behavior is as follows:\n *\n * - String\n *   Normalized into a text node.\n *\n * - Element, TextNode\n *   Passed through.\n *\n * - Array\n *   A one-dimensional array of strings, elements, nodes, or functions (which\n *   return single strings, elements, or nodes).\n *\n * - Function\n *   If the sole argument, is expected to produce a string, element,\n *   node, or array.\n *\n * @borrows dom:appendContents as videojs.appendContet\n * @deprecated Use videojs.dom.appendContent() instead\n */\n\n/**\n * Normalizes and inserts content into an element; this is identical to\n * `appendContent()`, except it empties the element first.\n *\n * The content for an element can be passed in multiple types and\n * combinations, whose behavior is as follows:\n *\n * - String\n *   Normalized into a text node.\n *\n * - Element, TextNode\n *   Passed through.\n *\n * - Array\n *   A one-dimensional array of strings, elements, nodes, or functions (which\n *   return single strings, elements, or nodes).\n *\n * - Function\n *   If the sole argument, is expected to produce a string, element,\n *   node, or array.\n *\n * @borrows dom:insertContent as videojs.insertContent\n * @deprecated Use videojs.dom.insertContent() instead\n */\n['isEl', 'isTextNode', 'createEl', 'hasClass', 'addClass', 'removeClass', 'toggleClass', 'setAttributes', 'getAttributes', 'emptyEl', 'appendContent', 'insertContent'].forEach(function (k) {\n  videojs$1[k] = function () {\n    log$1.warn('videojs.' + k + '() is deprecated; use videojs.dom.' + k + '() instead');\n    return Dom[k].apply(null, arguments);\n  };\n});\n\n/**\n * A safe getComputedStyle.\n *\n * This is because in Firefox, if the player is loaded in an iframe with `display:none`,\n * then `getComputedStyle` returns `null`, so, we do a null-check to make sure\n * that the player doesn't break in these cases.\n * See https://bugzilla.mozilla.org/show_bug.cgi?id=548397 for more details.\n *\n * @borrows computed-style:computedStyle as videojs.computedStyle\n */\nvideojs$1.computedStyle = computedStyle;\n\n/**\n * Export the Dom utilities for use in external plugins\n * and Tech's\n */\nvideojs$1.dom = Dom;\n\n/**\n * Export the Url utilities for use in external plugins\n * and Tech's\n */\nvideojs$1.url = Url;\n\n/**\n * @videojs/http-streaming\n * @version 1.2.5\n * @copyright 2018 Brightcove, Inc\n * @license Apache-2.0\n */\n\n/**\n * @file resolve-url.js\n */\n\nvar resolveUrl = function resolveUrl(baseURL, relativeURL) {\n  // return early if we don't need to resolve\n  if (/^[a-z]+:/i.test(relativeURL)) {\n    return relativeURL;\n  }\n\n  // if the base URL is relative then combine with the current location\n  if (!/\\/\\//i.test(baseURL)) {\n    baseURL = URLToolkit.buildAbsoluteURL(window$1.location.href, baseURL);\n  }\n\n  return URLToolkit.buildAbsoluteURL(baseURL, relativeURL);\n};\n\nvar classCallCheck$1 = function classCallCheck$$1(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass$1 = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar get$2 = function get$$1(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get$$1(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nvar inherits$1 = function inherits$$1(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar possibleConstructorReturn$1 = function possibleConstructorReturn$$1(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar slicedToArray$1 = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\n/**\n * @file playlist-loader.js\n *\n * A state machine that manages the loading, caching, and updating of\n * M3U8 playlists.\n *\n */\n\nvar mergeOptions$1 = videojs$1.mergeOptions,\n    EventTarget$1 = videojs$1.EventTarget,\n    log$2 = videojs$1.log;\n\n/**\n * Loops through all supported media groups in master and calls the provided\n * callback for each group\n *\n * @param {Object} master\n *        The parsed master manifest object\n * @param {Function} callback\n *        Callback to call for each media group\n */\n\nvar forEachMediaGroup = function forEachMediaGroup(master, callback) {\n  ['AUDIO', 'SUBTITLES'].forEach(function (mediaType) {\n    for (var groupKey in master.mediaGroups[mediaType]) {\n      for (var labelKey in master.mediaGroups[mediaType][groupKey]) {\n        var mediaProperties = master.mediaGroups[mediaType][groupKey][labelKey];\n\n        callback(mediaProperties, mediaType, groupKey, labelKey);\n      }\n    }\n  });\n};\n\n/**\n  * Returns a new array of segments that is the result of merging\n  * properties from an older list of segments onto an updated\n  * list. No properties on the updated playlist will be overridden.\n  *\n  * @param {Array} original the outdated list of segments\n  * @param {Array} update the updated list of segments\n  * @param {Number=} offset the index of the first update\n  * segment in the original segment list. For non-live playlists,\n  * this should always be zero and does not need to be\n  * specified. For live playlists, it should be the difference\n  * between the media sequence numbers in the original and updated\n  * playlists.\n  * @return a list of merged segment objects\n  */\nvar updateSegments = function updateSegments(original, update, offset) {\n  var result = update.slice();\n\n  offset = offset || 0;\n  var length = Math.min(original.length, update.length + offset);\n\n  for (var i = offset; i < length; i++) {\n    result[i - offset] = mergeOptions$1(original[i], result[i - offset]);\n  }\n  return result;\n};\n\nvar resolveSegmentUris = function resolveSegmentUris(segment, baseUri) {\n  if (!segment.resolvedUri) {\n    segment.resolvedUri = resolveUrl(baseUri, segment.uri);\n  }\n  if (segment.key && !segment.key.resolvedUri) {\n    segment.key.resolvedUri = resolveUrl(baseUri, segment.key.uri);\n  }\n  if (segment.map && !segment.map.resolvedUri) {\n    segment.map.resolvedUri = resolveUrl(baseUri, segment.map.uri);\n  }\n};\n\n/**\n  * Returns a new master playlist that is the result of merging an\n  * updated media playlist into the original version. If the\n  * updated media playlist does not match any of the playlist\n  * entries in the original master playlist, null is returned.\n  *\n  * @param {Object} master a parsed master M3U8 object\n  * @param {Object} media a parsed media M3U8 object\n  * @return {Object} a new object that represents the original\n  * master playlist with the updated media playlist merged in, or\n  * null if the merge produced no change.\n  */\nvar updateMaster = function updateMaster(master, media) {\n  var result = mergeOptions$1(master, {});\n  var playlist = result.playlists[media.uri];\n\n  if (!playlist) {\n    return null;\n  }\n\n  // consider the playlist unchanged if the number of segments is equal and the media\n  // sequence number is unchanged\n  if (playlist.segments && media.segments && playlist.segments.length === media.segments.length && playlist.mediaSequence === media.mediaSequence) {\n    return null;\n  }\n\n  var mergedPlaylist = mergeOptions$1(playlist, media);\n\n  // if the update could overlap existing segment information, merge the two segment lists\n  if (playlist.segments) {\n    mergedPlaylist.segments = updateSegments(playlist.segments, media.segments, media.mediaSequence - playlist.mediaSequence);\n  }\n\n  // resolve any segment URIs to prevent us from having to do it later\n  mergedPlaylist.segments.forEach(function (segment) {\n    resolveSegmentUris(segment, mergedPlaylist.resolvedUri);\n  });\n\n  // TODO Right now in the playlists array there are two references to each playlist, one\n  // that is referenced by index, and one by URI. The index reference may no longer be\n  // necessary.\n  for (var i = 0; i < result.playlists.length; i++) {\n    if (result.playlists[i].uri === media.uri) {\n      result.playlists[i] = mergedPlaylist;\n    }\n  }\n  result.playlists[media.uri] = mergedPlaylist;\n\n  return result;\n};\n\nvar setupMediaPlaylists = function setupMediaPlaylists(master) {\n  // setup by-URI lookups and resolve media playlist URIs\n  var i = master.playlists.length;\n\n  while (i--) {\n    var playlist = master.playlists[i];\n\n    master.playlists[playlist.uri] = playlist;\n    playlist.resolvedUri = resolveUrl(master.uri, playlist.uri);\n    playlist.id = i;\n\n    if (!playlist.attributes) {\n      // Although the spec states an #EXT-X-STREAM-INF tag MUST have a\n      // BANDWIDTH attribute, we can play the stream without it. This means a poorly\n      // formatted master playlist may not have an attribute list. An attributes\n      // property is added here to prevent undefined references when we encounter\n      // this scenario.\n      playlist.attributes = {};\n\n      log$2.warn('Invalid playlist STREAM-INF detected. Missing BANDWIDTH attribute.');\n    }\n  }\n};\n\nvar resolveMediaGroupUris = function resolveMediaGroupUris(master) {\n  forEachMediaGroup(master, function (properties) {\n    if (properties.uri) {\n      properties.resolvedUri = resolveUrl(master.uri, properties.uri);\n    }\n  });\n};\n\n/**\n * Calculates the time to wait before refreshing a live playlist\n *\n * @param {Object} media\n *        The current media\n * @param {Boolean} update\n *        True if there were any updates from the last refresh, false otherwise\n * @return {Number}\n *         The time in ms to wait before refreshing the live playlist\n */\nvar refreshDelay = function refreshDelay(media, update) {\n  var lastSegment = media.segments[media.segments.length - 1];\n  var delay = void 0;\n\n  if (update && lastSegment && lastSegment.duration) {\n    delay = lastSegment.duration * 1000;\n  } else {\n    // if the playlist is unchanged since the last reload or last segment duration\n    // cannot be determined, try again after half the target duration\n    delay = (media.targetDuration || 10) * 500;\n  }\n  return delay;\n};\n\n/**\n * Load a playlist from a remote location\n *\n * @class PlaylistLoader\n * @extends Stream\n * @param {String} srcUrl the url to start with\n * @param {Boolean} withCredentials the withCredentials xhr option\n * @constructor\n */\n\nvar PlaylistLoader = function (_EventTarget) {\n  inherits$1(PlaylistLoader, _EventTarget);\n\n  function PlaylistLoader(srcUrl, hls, withCredentials) {\n    classCallCheck$1(this, PlaylistLoader);\n\n    var _this = possibleConstructorReturn$1(this, (PlaylistLoader.__proto__ || Object.getPrototypeOf(PlaylistLoader)).call(this));\n\n    _this.srcUrl = srcUrl;\n    _this.hls_ = hls;\n    _this.withCredentials = withCredentials;\n\n    if (!_this.srcUrl) {\n      throw new Error('A non-empty playlist URL is required');\n    }\n\n    // initialize the loader state\n    _this.state = 'HAVE_NOTHING';\n\n    // live playlist staleness timeout\n    _this.on('mediaupdatetimeout', function () {\n      if (_this.state !== 'HAVE_METADATA') {\n        // only refresh the media playlist if no other activity is going on\n        return;\n      }\n\n      _this.state = 'HAVE_CURRENT_METADATA';\n\n      _this.request = _this.hls_.xhr({\n        uri: resolveUrl(_this.master.uri, _this.media().uri),\n        withCredentials: _this.withCredentials\n      }, function (error, req) {\n        // disposed\n        if (!_this.request) {\n          return;\n        }\n\n        if (error) {\n          return _this.playlistRequestError(_this.request, _this.media().uri, 'HAVE_METADATA');\n        }\n\n        _this.haveMetadata(_this.request, _this.media().uri);\n      });\n    });\n    return _this;\n  }\n\n  createClass$1(PlaylistLoader, [{\n    key: 'playlistRequestError',\n    value: function playlistRequestError(xhr$$1, url, startingState) {\n      // any in-flight request is now finished\n      this.request = null;\n\n      if (startingState) {\n        this.state = startingState;\n      }\n\n      this.error = {\n        playlist: this.master.playlists[url],\n        status: xhr$$1.status,\n        message: 'HLS playlist request error at URL: ' + url,\n        responseText: xhr$$1.responseText,\n        code: xhr$$1.status >= 500 ? 4 : 2\n      };\n\n      this.trigger('error');\n    }\n\n    // update the playlist loader's state in response to a new or\n    // updated playlist.\n\n  }, {\n    key: 'haveMetadata',\n    value: function haveMetadata(xhr$$1, url) {\n      var _this2 = this;\n\n      // any in-flight request is now finished\n      this.request = null;\n      this.state = 'HAVE_METADATA';\n\n      var parser = new Parser();\n\n      parser.push(xhr$$1.responseText);\n      parser.end();\n      parser.manifest.uri = url;\n      // m3u8-parser does not attach an attributes property to media playlists so make\n      // sure that the property is attached to avoid undefined reference errors\n      parser.manifest.attributes = parser.manifest.attributes || {};\n\n      // merge this playlist into the master\n      var update = updateMaster(this.master, parser.manifest);\n\n      this.targetDuration = parser.manifest.targetDuration;\n\n      if (update) {\n        this.master = update;\n        this.media_ = this.master.playlists[parser.manifest.uri];\n      } else {\n        this.trigger('playlistunchanged');\n      }\n\n      // refresh live playlists after a target duration passes\n      if (!this.media().endList) {\n        window$1.clearTimeout(this.mediaUpdateTimeout);\n        this.mediaUpdateTimeout = window$1.setTimeout(function () {\n          _this2.trigger('mediaupdatetimeout');\n        }, refreshDelay(this.media(), !!update));\n      }\n\n      this.trigger('loadedplaylist');\n    }\n\n    /**\n     * Abort any outstanding work and clean up.\n     */\n\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.stopRequest();\n      window$1.clearTimeout(this.mediaUpdateTimeout);\n    }\n  }, {\n    key: 'stopRequest',\n    value: function stopRequest() {\n      if (this.request) {\n        var oldRequest = this.request;\n\n        this.request = null;\n        oldRequest.onreadystatechange = null;\n        oldRequest.abort();\n      }\n    }\n\n    /**\n     * When called without any arguments, returns the currently\n     * active media playlist. When called with a single argument,\n     * triggers the playlist loader to asynchronously switch to the\n     * specified media playlist. Calling this method while the\n     * loader is in the HAVE_NOTHING causes an error to be emitted\n     * but otherwise has no effect.\n     *\n     * @param {Object=} playlist the parsed media playlist\n     * object to switch to\n     * @return {Playlist} the current loaded media\n     */\n\n  }, {\n    key: 'media',\n    value: function media(playlist) {\n      var _this3 = this;\n\n      // getter\n      if (!playlist) {\n        return this.media_;\n      }\n\n      // setter\n      if (this.state === 'HAVE_NOTHING') {\n        throw new Error('Cannot switch media playlist from ' + this.state);\n      }\n\n      var startingState = this.state;\n\n      // find the playlist object if the target playlist has been\n      // specified by URI\n      if (typeof playlist === 'string') {\n        if (!this.master.playlists[playlist]) {\n          throw new Error('Unknown playlist URI: ' + playlist);\n        }\n        playlist = this.master.playlists[playlist];\n      }\n\n      var mediaChange = !this.media_ || playlist.uri !== this.media_.uri;\n\n      // switch to fully loaded playlists immediately\n      if (this.master.playlists[playlist.uri].endList) {\n        // abort outstanding playlist requests\n        if (this.request) {\n          this.request.onreadystatechange = null;\n          this.request.abort();\n          this.request = null;\n        }\n        this.state = 'HAVE_METADATA';\n        this.media_ = playlist;\n\n        // trigger media change if the active media has been updated\n        if (mediaChange) {\n          this.trigger('mediachanging');\n          this.trigger('mediachange');\n        }\n        return;\n      }\n\n      // switching to the active playlist is a no-op\n      if (!mediaChange) {\n        return;\n      }\n\n      this.state = 'SWITCHING_MEDIA';\n\n      // there is already an outstanding playlist request\n      if (this.request) {\n        if (resolveUrl(this.master.uri, playlist.uri) === this.request.url) {\n          // requesting to switch to the same playlist multiple times\n          // has no effect after the first\n          return;\n        }\n        this.request.onreadystatechange = null;\n        this.request.abort();\n        this.request = null;\n      }\n\n      // request the new playlist\n      if (this.media_) {\n        this.trigger('mediachanging');\n      }\n\n      this.request = this.hls_.xhr({\n        uri: resolveUrl(this.master.uri, playlist.uri),\n        withCredentials: this.withCredentials\n      }, function (error, req) {\n        // disposed\n        if (!_this3.request) {\n          return;\n        }\n\n        if (error) {\n          return _this3.playlistRequestError(_this3.request, playlist.uri, startingState);\n        }\n\n        _this3.haveMetadata(req, playlist.uri);\n\n        // fire loadedmetadata the first time a media playlist is loaded\n        if (startingState === 'HAVE_MASTER') {\n          _this3.trigger('loadedmetadata');\n        } else {\n          _this3.trigger('mediachange');\n        }\n      });\n    }\n\n    /**\n     * pause loading of the playlist\n     */\n\n  }, {\n    key: 'pause',\n    value: function pause() {\n      this.stopRequest();\n      window$1.clearTimeout(this.mediaUpdateTimeout);\n      if (this.state === 'HAVE_NOTHING') {\n        // If we pause the loader before any data has been retrieved, its as if we never\n        // started, so reset to an unstarted state.\n        this.started = false;\n      }\n      // Need to restore state now that no activity is happening\n      if (this.state === 'SWITCHING_MEDIA') {\n        // if the loader was in the process of switching media, it should either return to\n        // HAVE_MASTER or HAVE_METADATA depending on if the loader has loaded a media\n        // playlist yet. This is determined by the existence of loader.media_\n        if (this.media_) {\n          this.state = 'HAVE_METADATA';\n        } else {\n          this.state = 'HAVE_MASTER';\n        }\n      } else if (this.state === 'HAVE_CURRENT_METADATA') {\n        this.state = 'HAVE_METADATA';\n      }\n    }\n\n    /**\n     * start loading of the playlist\n     */\n\n  }, {\n    key: 'load',\n    value: function load(isFinalRendition) {\n      var _this4 = this;\n\n      window$1.clearTimeout(this.mediaUpdateTimeout);\n\n      var media = this.media();\n\n      if (isFinalRendition) {\n        var delay = media ? media.targetDuration / 2 * 1000 : 5 * 1000;\n\n        this.mediaUpdateTimeout = window$1.setTimeout(function () {\n          return _this4.load();\n        }, delay);\n        return;\n      }\n\n      if (!this.started) {\n        this.start();\n        return;\n      }\n\n      if (media && !media.endList) {\n        this.trigger('mediaupdatetimeout');\n      } else {\n        this.trigger('loadedplaylist');\n      }\n    }\n\n    /**\n     * start loading of the playlist\n     */\n\n  }, {\n    key: 'start',\n    value: function start() {\n      var _this5 = this;\n\n      this.started = true;\n\n      // request the specified URL\n      this.request = this.hls_.xhr({\n        uri: this.srcUrl,\n        withCredentials: this.withCredentials\n      }, function (error, req) {\n        // disposed\n        if (!_this5.request) {\n          return;\n        }\n\n        // clear the loader's request reference\n        _this5.request = null;\n\n        if (error) {\n          _this5.error = {\n            status: req.status,\n            message: 'HLS playlist request error at URL: ' + _this5.srcUrl,\n            responseText: req.responseText,\n            // MEDIA_ERR_NETWORK\n            code: 2\n          };\n          if (_this5.state === 'HAVE_NOTHING') {\n            _this5.started = false;\n          }\n          return _this5.trigger('error');\n        }\n\n        var parser = new Parser();\n\n        parser.push(req.responseText);\n        parser.end();\n\n        _this5.state = 'HAVE_MASTER';\n\n        parser.manifest.uri = _this5.srcUrl;\n\n        // loaded a master playlist\n        if (parser.manifest.playlists) {\n          _this5.master = parser.manifest;\n\n          setupMediaPlaylists(_this5.master);\n          resolveMediaGroupUris(_this5.master);\n\n          _this5.trigger('loadedplaylist');\n          if (!_this5.request) {\n            // no media playlist was specifically selected so start\n            // from the first listed one\n            _this5.media(parser.manifest.playlists[0]);\n          }\n          return;\n        }\n\n        // loaded a media playlist\n        // infer a master playlist if none was previously requested\n        _this5.master = {\n          mediaGroups: {\n            'AUDIO': {},\n            'VIDEO': {},\n            'CLOSED-CAPTIONS': {},\n            'SUBTITLES': {}\n          },\n          uri: window$1.location.href,\n          playlists: [{\n            uri: _this5.srcUrl,\n            id: 0\n          }]\n        };\n        _this5.master.playlists[_this5.srcUrl] = _this5.master.playlists[0];\n        _this5.master.playlists[0].resolvedUri = _this5.srcUrl;\n        // m3u8-parser does not attach an attributes property to media playlists so make\n        // sure that the property is attached to avoid undefined reference errors\n        _this5.master.playlists[0].attributes = _this5.master.playlists[0].attributes || {};\n        _this5.haveMetadata(req, _this5.srcUrl);\n        return _this5.trigger('loadedmetadata');\n      });\n    }\n  }]);\n  return PlaylistLoader;\n}(EventTarget$1);\n\n/**\n * @file playlist.js\n *\n * Playlist related utilities.\n */\n\nvar createTimeRange = videojs$1.createTimeRange;\n\n/**\n * walk backward until we find a duration we can use\n * or return a failure\n *\n * @param {Playlist} playlist the playlist to walk through\n * @param {Number} endSequence the mediaSequence to stop walking on\n */\n\nvar backwardDuration = function backwardDuration(playlist, endSequence) {\n  var result = 0;\n  var i = endSequence - playlist.mediaSequence;\n  // if a start time is available for segment immediately following\n  // the interval, use it\n  var segment = playlist.segments[i];\n\n  // Walk backward until we find the latest segment with timeline\n  // information that is earlier than endSequence\n  if (segment) {\n    if (typeof segment.start !== 'undefined') {\n      return { result: segment.start, precise: true };\n    }\n    if (typeof segment.end !== 'undefined') {\n      return {\n        result: segment.end - segment.duration,\n        precise: true\n      };\n    }\n  }\n  while (i--) {\n    segment = playlist.segments[i];\n    if (typeof segment.end !== 'undefined') {\n      return { result: result + segment.end, precise: true };\n    }\n\n    result += segment.duration;\n\n    if (typeof segment.start !== 'undefined') {\n      return { result: result + segment.start, precise: true };\n    }\n  }\n  return { result: result, precise: false };\n};\n\n/**\n * walk forward until we find a duration we can use\n * or return a failure\n *\n * @param {Playlist} playlist the playlist to walk through\n * @param {Number} endSequence the mediaSequence to stop walking on\n */\nvar forwardDuration = function forwardDuration(playlist, endSequence) {\n  var result = 0;\n  var segment = void 0;\n  var i = endSequence - playlist.mediaSequence;\n  // Walk forward until we find the earliest segment with timeline\n  // information\n\n  for (; i < playlist.segments.length; i++) {\n    segment = playlist.segments[i];\n    if (typeof segment.start !== 'undefined') {\n      return {\n        result: segment.start - result,\n        precise: true\n      };\n    }\n\n    result += segment.duration;\n\n    if (typeof segment.end !== 'undefined') {\n      return {\n        result: segment.end - result,\n        precise: true\n      };\n    }\n  }\n  // indicate we didn't find a useful duration estimate\n  return { result: -1, precise: false };\n};\n\n/**\n  * Calculate the media duration from the segments associated with a\n  * playlist. The duration of a subinterval of the available segments\n  * may be calculated by specifying an end index.\n  *\n  * @param {Object} playlist a media playlist object\n  * @param {Number=} endSequence an exclusive upper boundary\n  * for the playlist.  Defaults to playlist length.\n  * @param {Number} expired the amount of time that has dropped\n  * off the front of the playlist in a live scenario\n  * @return {Number} the duration between the first available segment\n  * and end index.\n  */\nvar intervalDuration = function intervalDuration(playlist, endSequence, expired) {\n  var backward = void 0;\n  var forward = void 0;\n\n  if (typeof endSequence === 'undefined') {\n    endSequence = playlist.mediaSequence + playlist.segments.length;\n  }\n\n  if (endSequence < playlist.mediaSequence) {\n    return 0;\n  }\n\n  // do a backward walk to estimate the duration\n  backward = backwardDuration(playlist, endSequence);\n  if (backward.precise) {\n    // if we were able to base our duration estimate on timing\n    // information provided directly from the Media Source, return\n    // it\n    return backward.result;\n  }\n\n  // walk forward to see if a precise duration estimate can be made\n  // that way\n  forward = forwardDuration(playlist, endSequence);\n  if (forward.precise) {\n    // we found a segment that has been buffered and so it's\n    // position is known precisely\n    return forward.result;\n  }\n\n  // return the less-precise, playlist-based duration estimate\n  return backward.result + expired;\n};\n\n/**\n  * Calculates the duration of a playlist. If a start and end index\n  * are specified, the duration will be for the subset of the media\n  * timeline between those two indices. The total duration for live\n  * playlists is always Infinity.\n  *\n  * @param {Object} playlist a media playlist object\n  * @param {Number=} endSequence an exclusive upper\n  * boundary for the playlist. Defaults to the playlist media\n  * sequence number plus its length.\n  * @param {Number=} expired the amount of time that has\n  * dropped off the front of the playlist in a live scenario\n  * @return {Number} the duration between the start index and end\n  * index.\n  */\nvar duration = function duration(playlist, endSequence, expired) {\n  if (!playlist) {\n    return 0;\n  }\n\n  if (typeof expired !== 'number') {\n    expired = 0;\n  }\n\n  // if a slice of the total duration is not requested, use\n  // playlist-level duration indicators when they're present\n  if (typeof endSequence === 'undefined') {\n    // if present, use the duration specified in the playlist\n    if (playlist.totalDuration) {\n      return playlist.totalDuration;\n    }\n\n    // duration should be Infinity for live playlists\n    if (!playlist.endList) {\n      return window$1.Infinity;\n    }\n  }\n\n  // calculate the total duration based on the segment durations\n  return intervalDuration(playlist, endSequence, expired);\n};\n\n/**\n  * Calculate the time between two indexes in the current playlist\n  * neight the start- nor the end-index need to be within the current\n  * playlist in which case, the targetDuration of the playlist is used\n  * to approximate the durations of the segments\n  *\n  * @param {Object} playlist a media playlist object\n  * @param {Number} startIndex\n  * @param {Number} endIndex\n  * @return {Number} the number of seconds between startIndex and endIndex\n  */\nvar sumDurations = function sumDurations(playlist, startIndex, endIndex) {\n  var durations = 0;\n\n  if (startIndex > endIndex) {\n    var _ref = [endIndex, startIndex];\n    startIndex = _ref[0];\n    endIndex = _ref[1];\n  }\n\n  if (startIndex < 0) {\n    for (var i = startIndex; i < Math.min(0, endIndex); i++) {\n      durations += playlist.targetDuration;\n    }\n    startIndex = 0;\n  }\n\n  for (var _i = startIndex; _i < endIndex; _i++) {\n    durations += playlist.segments[_i].duration;\n  }\n\n  return durations;\n};\n\n/**\n * Determines the media index of the segment corresponding to the safe edge of the live\n * window which is the duration of the last segment plus 2 target durations from the end\n * of the playlist.\n *\n * @param {Object} playlist\n *        a media playlist object\n * @return {Number}\n *         The media index of the segment at the safe live point. 0 if there is no \"safe\"\n *         point.\n * @function safeLiveIndex\n */\nvar safeLiveIndex = function safeLiveIndex(playlist) {\n  if (!playlist.segments.length) {\n    return 0;\n  }\n\n  var i = playlist.segments.length - 1;\n  var distanceFromEnd = playlist.segments[i].duration || playlist.targetDuration;\n  var safeDistance = distanceFromEnd + playlist.targetDuration * 2;\n\n  while (i--) {\n    distanceFromEnd += playlist.segments[i].duration;\n\n    if (distanceFromEnd >= safeDistance) {\n      break;\n    }\n  }\n\n  return Math.max(0, i);\n};\n\n/**\n * Calculates the playlist end time\n *\n * @param {Object} playlist a media playlist object\n * @param {Number=} expired the amount of time that has\n *                  dropped off the front of the playlist in a live scenario\n * @param {Boolean|false} useSafeLiveEnd a boolean value indicating whether or not the\n *                        playlist end calculation should consider the safe live end\n *                        (truncate the playlist end by three segments). This is normally\n *                        used for calculating the end of the playlist's seekable range.\n * @returns {Number} the end time of playlist\n * @function playlistEnd\n */\nvar playlistEnd = function playlistEnd(playlist, expired, useSafeLiveEnd) {\n  if (!playlist || !playlist.segments) {\n    return null;\n  }\n  if (playlist.endList) {\n    return duration(playlist);\n  }\n\n  if (expired === null) {\n    return null;\n  }\n\n  expired = expired || 0;\n\n  var endSequence = useSafeLiveEnd ? safeLiveIndex(playlist) : playlist.segments.length;\n\n  return intervalDuration(playlist, playlist.mediaSequence + endSequence, expired);\n};\n\n/**\n  * Calculates the interval of time that is currently seekable in a\n  * playlist. The returned time ranges are relative to the earliest\n  * moment in the specified playlist that is still available. A full\n  * seekable implementation for live streams would need to offset\n  * these values by the duration of content that has expired from the\n  * stream.\n  *\n  * @param {Object} playlist a media playlist object\n  * dropped off the front of the playlist in a live scenario\n  * @param {Number=} expired the amount of time that has\n  * dropped off the front of the playlist in a live scenario\n  * @return {TimeRanges} the periods of time that are valid targets\n  * for seeking\n  */\nvar seekable = function seekable(playlist, expired) {\n  var useSafeLiveEnd = true;\n  var seekableStart = expired || 0;\n  var seekableEnd = playlistEnd(playlist, expired, useSafeLiveEnd);\n\n  if (seekableEnd === null) {\n    return createTimeRange();\n  }\n  return createTimeRange(seekableStart, seekableEnd);\n};\n\nvar isWholeNumber = function isWholeNumber(num) {\n  return num - Math.floor(num) === 0;\n};\n\nvar roundSignificantDigit = function roundSignificantDigit(increment, num) {\n  // If we have a whole number, just add 1 to it\n  if (isWholeNumber(num)) {\n    return num + increment * 0.1;\n  }\n\n  var numDecimalDigits = num.toString().split('.')[1].length;\n\n  for (var i = 1; i <= numDecimalDigits; i++) {\n    var scale = Math.pow(10, i);\n    var temp = num * scale;\n\n    if (isWholeNumber(temp) || i === numDecimalDigits) {\n      return (temp + increment) / scale;\n    }\n  }\n};\n\nvar ceilLeastSignificantDigit = roundSignificantDigit.bind(null, 1);\nvar floorLeastSignificantDigit = roundSignificantDigit.bind(null, -1);\n\n/**\n * Determine the index and estimated starting time of the segment that\n * contains a specified playback position in a media playlist.\n *\n * @param {Object} playlist the media playlist to query\n * @param {Number} currentTime The number of seconds since the earliest\n * possible position to determine the containing segment for\n * @param {Number} startIndex\n * @param {Number} startTime\n * @return {Object}\n */\nvar getMediaInfoForTime = function getMediaInfoForTime(playlist, currentTime, startIndex, startTime) {\n  var i = void 0;\n  var segment = void 0;\n  var numSegments = playlist.segments.length;\n\n  var time = currentTime - startTime;\n\n  if (time < 0) {\n    // Walk backward from startIndex in the playlist, adding durations\n    // until we find a segment that contains `time` and return it\n    if (startIndex > 0) {\n      for (i = startIndex - 1; i >= 0; i--) {\n        segment = playlist.segments[i];\n        time += floorLeastSignificantDigit(segment.duration);\n        if (time > 0) {\n          return {\n            mediaIndex: i,\n            startTime: startTime - sumDurations(playlist, startIndex, i)\n          };\n        }\n      }\n    }\n    // We were unable to find a good segment within the playlist\n    // so select the first segment\n    return {\n      mediaIndex: 0,\n      startTime: currentTime\n    };\n  }\n\n  // When startIndex is negative, we first walk forward to first segment\n  // adding target durations. If we \"run out of time\" before getting to\n  // the first segment, return the first segment\n  if (startIndex < 0) {\n    for (i = startIndex; i < 0; i++) {\n      time -= playlist.targetDuration;\n      if (time < 0) {\n        return {\n          mediaIndex: 0,\n          startTime: currentTime\n        };\n      }\n    }\n    startIndex = 0;\n  }\n\n  // Walk forward from startIndex in the playlist, subtracting durations\n  // until we find a segment that contains `time` and return it\n  for (i = startIndex; i < numSegments; i++) {\n    segment = playlist.segments[i];\n    time -= ceilLeastSignificantDigit(segment.duration);\n    if (time < 0) {\n      return {\n        mediaIndex: i,\n        startTime: startTime + sumDurations(playlist, startIndex, i)\n      };\n    }\n  }\n\n  // We are out of possible candidates so load the last one...\n  return {\n    mediaIndex: numSegments - 1,\n    startTime: currentTime\n  };\n};\n\n/**\n * Check whether the playlist is blacklisted or not.\n *\n * @param {Object} playlist the media playlist object\n * @return {boolean} whether the playlist is blacklisted or not\n * @function isBlacklisted\n */\nvar isBlacklisted = function isBlacklisted(playlist) {\n  return playlist.excludeUntil && playlist.excludeUntil > Date.now();\n};\n\n/**\n * Check whether the playlist is compatible with current playback configuration or has\n * been blacklisted permanently for being incompatible.\n *\n * @param {Object} playlist the media playlist object\n * @return {boolean} whether the playlist is incompatible or not\n * @function isIncompatible\n */\nvar isIncompatible = function isIncompatible(playlist) {\n  return playlist.excludeUntil && playlist.excludeUntil === Infinity;\n};\n\n/**\n * Check whether the playlist is enabled or not.\n *\n * @param {Object} playlist the media playlist object\n * @return {boolean} whether the playlist is enabled or not\n * @function isEnabled\n */\nvar isEnabled = function isEnabled(playlist) {\n  var blacklisted = isBlacklisted(playlist);\n\n  return !playlist.disabled && !blacklisted;\n};\n\n/**\n * Check whether the playlist has been manually disabled through the representations api.\n *\n * @param {Object} playlist the media playlist object\n * @return {boolean} whether the playlist is disabled manually or not\n * @function isDisabled\n */\nvar isDisabled = function isDisabled(playlist) {\n  return playlist.disabled;\n};\n\n/**\n * Returns whether the current playlist is an AES encrypted HLS stream\n *\n * @return {Boolean} true if it's an AES encrypted HLS stream\n */\nvar isAes = function isAes(media) {\n  for (var i = 0; i < media.segments.length; i++) {\n    if (media.segments[i].key) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Returns whether the current playlist contains fMP4\n *\n * @return {Boolean} true if the playlist contains fMP4\n */\nvar isFmp4 = function isFmp4(media) {\n  for (var i = 0; i < media.segments.length; i++) {\n    if (media.segments[i].map) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Checks if the playlist has a value for the specified attribute\n *\n * @param {String} attr\n *        Attribute to check for\n * @param {Object} playlist\n *        The media playlist object\n * @return {Boolean}\n *         Whether the playlist contains a value for the attribute or not\n * @function hasAttribute\n */\nvar hasAttribute = function hasAttribute(attr, playlist) {\n  return playlist.attributes && playlist.attributes[attr];\n};\n\n/**\n * Estimates the time required to complete a segment download from the specified playlist\n *\n * @param {Number} segmentDuration\n *        Duration of requested segment\n * @param {Number} bandwidth\n *        Current measured bandwidth of the player\n * @param {Object} playlist\n *        The media playlist object\n * @param {Number=} bytesReceived\n *        Number of bytes already received for the request. Defaults to 0\n * @return {Number|NaN}\n *         The estimated time to request the segment. NaN if bandwidth information for\n *         the given playlist is unavailable\n * @function estimateSegmentRequestTime\n */\nvar estimateSegmentRequestTime = function estimateSegmentRequestTime(segmentDuration, bandwidth, playlist) {\n  var bytesReceived = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n  if (!hasAttribute('BANDWIDTH', playlist)) {\n    return NaN;\n  }\n\n  var size = segmentDuration * playlist.attributes.BANDWIDTH;\n\n  return (size - bytesReceived * 8) / bandwidth;\n};\n\n/*\n * Returns whether the current playlist is the lowest rendition\n *\n * @return {Boolean} true if on lowest rendition\n */\nvar isLowestEnabledRendition = function isLowestEnabledRendition(master, media) {\n  if (master.playlists.length === 1) {\n    return true;\n  }\n\n  var currentBandwidth = media.attributes.BANDWIDTH || Number.MAX_VALUE;\n\n  return master.playlists.filter(function (playlist) {\n    if (!isEnabled(playlist)) {\n      return false;\n    }\n\n    return (playlist.attributes.BANDWIDTH || 0) < currentBandwidth;\n  }).length === 0;\n};\n\n// exports\nvar Playlist = {\n  duration: duration,\n  seekable: seekable,\n  safeLiveIndex: safeLiveIndex,\n  getMediaInfoForTime: getMediaInfoForTime,\n  isEnabled: isEnabled,\n  isDisabled: isDisabled,\n  isBlacklisted: isBlacklisted,\n  isIncompatible: isIncompatible,\n  playlistEnd: playlistEnd,\n  isAes: isAes,\n  isFmp4: isFmp4,\n  hasAttribute: hasAttribute,\n  estimateSegmentRequestTime: estimateSegmentRequestTime,\n  isLowestEnabledRendition: isLowestEnabledRendition\n};\n\n/**\n * @file xhr.js\n */\n\nvar videojsXHR = videojs$1.xhr,\n    mergeOptions$1$1 = videojs$1.mergeOptions;\n\nvar xhrFactory = function xhrFactory() {\n  var xhr$$1 = function XhrFunction(options, callback) {\n    // Add a default timeout for all hls requests\n    options = mergeOptions$1$1({\n      timeout: 45e3\n    }, options);\n\n    // Allow an optional user-specified function to modify the option\n    // object before we construct the xhr request\n    var beforeRequest = XhrFunction.beforeRequest || videojs$1.Hls.xhr.beforeRequest;\n\n    if (beforeRequest && typeof beforeRequest === 'function') {\n      var newOptions = beforeRequest(options);\n\n      if (newOptions) {\n        options = newOptions;\n      }\n    }\n\n    var request = videojsXHR(options, function (error, response) {\n      var reqResponse = request.response;\n\n      if (!error && reqResponse) {\n        request.responseTime = Date.now();\n        request.roundTripTime = request.responseTime - request.requestTime;\n        request.bytesReceived = reqResponse.byteLength || reqResponse.length;\n        if (!request.bandwidth) {\n          request.bandwidth = Math.floor(request.bytesReceived / request.roundTripTime * 8 * 1000);\n        }\n      }\n\n      if (response.headers) {\n        request.responseHeaders = response.headers;\n      }\n\n      // videojs.xhr now uses a specific code on the error\n      // object to signal that a request has timed out instead\n      // of setting a boolean on the request object\n      if (error && error.code === 'ETIMEDOUT') {\n        request.timedout = true;\n      }\n\n      // videojs.xhr no longer considers status codes outside of 200 and 0\n      // (for file uris) to be errors, but the old XHR did, so emulate that\n      // behavior. Status 206 may be used in response to byterange requests.\n      if (!error && !request.aborted && response.statusCode !== 200 && response.statusCode !== 206 && response.statusCode !== 0) {\n        error = new Error('XHR Failed with a response of: ' + (request && (reqResponse || request.responseText)));\n      }\n\n      callback(error, request);\n    });\n    var originalAbort = request.abort;\n\n    request.abort = function () {\n      request.aborted = true;\n      return originalAbort.apply(request, arguments);\n    };\n    request.uri = options.uri;\n    request.requestTime = Date.now();\n    return request;\n  };\n\n  return xhr$$1;\n};\n\n/**\n * @file bin-utils.js\n */\n\n/**\n * convert a TimeRange to text\n *\n * @param {TimeRange} range the timerange to use for conversion\n * @param {Number} i the iterator on the range to convert\n */\nvar textRange = function textRange(range, i) {\n  return range.start(i) + '-' + range.end(i);\n};\n\n/**\n * format a number as hex string\n *\n * @param {Number} e The number\n * @param {Number} i the iterator\n */\nvar formatHexString = function formatHexString(e, i) {\n  var value = e.toString(16);\n\n  return '00'.substring(0, 2 - value.length) + value + (i % 2 ? ' ' : '');\n};\nvar formatAsciiString = function formatAsciiString(e) {\n  if (e >= 0x20 && e < 0x7e) {\n    return String.fromCharCode(e);\n  }\n  return '.';\n};\n\n/**\n * Creates an object for sending to a web worker modifying properties that are TypedArrays\n * into a new object with seperated properties for the buffer, byteOffset, and byteLength.\n *\n * @param {Object} message\n *        Object of properties and values to send to the web worker\n * @return {Object}\n *         Modified message with TypedArray values expanded\n * @function createTransferableMessage\n */\nvar createTransferableMessage = function createTransferableMessage(message) {\n  var transferable = {};\n\n  Object.keys(message).forEach(function (key) {\n    var value = message[key];\n\n    if (ArrayBuffer.isView(value)) {\n      transferable[key] = {\n        bytes: value.buffer,\n        byteOffset: value.byteOffset,\n        byteLength: value.byteLength\n      };\n    } else {\n      transferable[key] = value;\n    }\n  });\n\n  return transferable;\n};\n\n/**\n * Returns a unique string identifier for a media initialization\n * segment.\n */\nvar initSegmentId = function initSegmentId(initSegment) {\n  var byterange = initSegment.byterange || {\n    length: Infinity,\n    offset: 0\n  };\n\n  return [byterange.length, byterange.offset, initSegment.resolvedUri].join(',');\n};\n\n/**\n * utils to help dump binary data to the console\n */\nvar hexDump = function hexDump(data) {\n  var bytes = Array.prototype.slice.call(data);\n  var step = 16;\n  var result = '';\n  var hex = void 0;\n  var ascii = void 0;\n\n  for (var j = 0; j < bytes.length / step; j++) {\n    hex = bytes.slice(j * step, j * step + step).map(formatHexString).join('');\n    ascii = bytes.slice(j * step, j * step + step).map(formatAsciiString).join('');\n    result += hex + ' ' + ascii + '\\n';\n  }\n\n  return result;\n};\n\nvar tagDump = function tagDump(_ref) {\n  var bytes = _ref.bytes;\n  return hexDump(bytes);\n};\n\nvar textRanges = function textRanges(ranges) {\n  var result = '';\n  var i = void 0;\n\n  for (i = 0; i < ranges.length; i++) {\n    result += textRange(ranges, i) + ' ';\n  }\n  return result;\n};\n\nvar utils = /*#__PURE__*/Object.freeze({\n  createTransferableMessage: createTransferableMessage,\n  initSegmentId: initSegmentId,\n  hexDump: hexDump,\n  tagDump: tagDump,\n  textRanges: textRanges\n});\n\n/**\n * ranges\n *\n * Utilities for working with TimeRanges.\n *\n */\n\n// Fudge factor to account for TimeRanges rounding\nvar TIME_FUDGE_FACTOR = 1 / 30;\n// Comparisons between time values such as current time and the end of the buffered range\n// can be misleading because of precision differences or when the current media has poorly\n// aligned audio and video, which can cause values to be slightly off from what you would\n// expect. This value is what we consider to be safe to use in such comparisons to account\n// for these scenarios.\nvar SAFE_TIME_DELTA = TIME_FUDGE_FACTOR * 3;\nvar filterRanges = function filterRanges(timeRanges, predicate) {\n  var results = [];\n  var i = void 0;\n\n  if (timeRanges && timeRanges.length) {\n    // Search for ranges that match the predicate\n    for (i = 0; i < timeRanges.length; i++) {\n      if (predicate(timeRanges.start(i), timeRanges.end(i))) {\n        results.push([timeRanges.start(i), timeRanges.end(i)]);\n      }\n    }\n  }\n\n  return videojs$1.createTimeRanges(results);\n};\n\n/**\n * Attempts to find the buffered TimeRange that contains the specified\n * time.\n * @param {TimeRanges} buffered - the TimeRanges object to query\n * @param {number} time  - the time to filter on.\n * @returns {TimeRanges} a new TimeRanges object\n */\nvar findRange = function findRange(buffered, time) {\n  return filterRanges(buffered, function (start, end) {\n    return start - TIME_FUDGE_FACTOR <= time && end + TIME_FUDGE_FACTOR >= time;\n  });\n};\n\n/**\n * Returns the TimeRanges that begin later than the specified time.\n * @param {TimeRanges} timeRanges - the TimeRanges object to query\n * @param {number} time - the time to filter on.\n * @returns {TimeRanges} a new TimeRanges object.\n */\nvar findNextRange = function findNextRange(timeRanges, time) {\n  return filterRanges(timeRanges, function (start) {\n    return start - TIME_FUDGE_FACTOR >= time;\n  });\n};\n\n/**\n * Returns gaps within a list of TimeRanges\n * @param {TimeRanges} buffered - the TimeRanges object\n * @return {TimeRanges} a TimeRanges object of gaps\n */\nvar findGaps = function findGaps(buffered) {\n  if (buffered.length < 2) {\n    return videojs$1.createTimeRanges();\n  }\n\n  var ranges = [];\n\n  for (var i = 1; i < buffered.length; i++) {\n    var start = buffered.end(i - 1);\n    var end = buffered.start(i);\n\n    ranges.push([start, end]);\n  }\n\n  return videojs$1.createTimeRanges(ranges);\n};\n\n/**\n * Gets a human readable string for a TimeRange\n *\n * @param {TimeRange} range\n * @returns {String} a human readable string\n */\nvar printableRange = function printableRange(range) {\n  var strArr = [];\n\n  if (!range || !range.length) {\n    return '';\n  }\n\n  for (var i = 0; i < range.length; i++) {\n    strArr.push(range.start(i) + ' => ' + range.end(i));\n  }\n\n  return strArr.join(', ');\n};\n\n/**\n * Calculates the amount of time left in seconds until the player hits the end of the\n * buffer and causes a rebuffer\n *\n * @param {TimeRange} buffered\n *        The state of the buffer\n * @param {Numnber} currentTime\n *        The current time of the player\n * @param {Number} playbackRate\n *        The current playback rate of the player. Defaults to 1.\n * @return {Number}\n *         Time until the player has to start rebuffering in seconds.\n * @function timeUntilRebuffer\n */\nvar timeUntilRebuffer = function timeUntilRebuffer(buffered, currentTime) {\n  var playbackRate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n  var bufferedEnd = buffered.length ? buffered.end(buffered.length - 1) : 0;\n\n  return (bufferedEnd - currentTime) / playbackRate;\n};\n\n/**\n * Converts a TimeRanges object into an array representation\n * @param {TimeRanges} timeRanges\n * @returns {Array}\n */\nvar timeRangesToArray = function timeRangesToArray(timeRanges) {\n  var timeRangesList = [];\n\n  for (var i = 0; i < timeRanges.length; i++) {\n    timeRangesList.push({\n      start: timeRanges.start(i),\n      end: timeRanges.end(i)\n    });\n  }\n\n  return timeRangesList;\n};\n\n/**\n * @file create-text-tracks-if-necessary.js\n */\n\n/**\n * Create text tracks on video.js if they exist on a segment.\n *\n * @param {Object} sourceBuffer the VSB or FSB\n * @param {Object} mediaSource the HTML media source\n * @param {Object} segment the segment that may contain the text track\n * @private\n */\nvar createTextTracksIfNecessary = function createTextTracksIfNecessary(sourceBuffer, mediaSource, segment) {\n  var player = mediaSource.player_;\n\n  // create an in-band caption track if one is present in the segment\n  if (segment.captions && segment.captions.length) {\n    if (!sourceBuffer.inbandTextTracks_) {\n      sourceBuffer.inbandTextTracks_ = {};\n    }\n\n    for (var trackId in segment.captionStreams) {\n      if (!sourceBuffer.inbandTextTracks_[trackId]) {\n        player.tech_.trigger({ type: 'usage', name: 'hls-608' });\n        var track = player.textTracks().getTrackById(trackId);\n\n        if (track) {\n          // Resuse an existing track with a CC# id because this was\n          // very likely created by videojs-contrib-hls from information\n          // in the m3u8 for us to use\n          sourceBuffer.inbandTextTracks_[trackId] = track;\n        } else {\n          // Otherwise, create a track with the default `CC#` label and\n          // without a language\n          sourceBuffer.inbandTextTracks_[trackId] = player.addRemoteTextTrack({\n            kind: 'captions',\n            id: trackId,\n            label: trackId\n          }, false).track;\n        }\n      }\n    }\n  }\n\n  if (segment.metadata && segment.metadata.length && !sourceBuffer.metadataTrack_) {\n    sourceBuffer.metadataTrack_ = player.addRemoteTextTrack({\n      kind: 'metadata',\n      label: 'Timed Metadata'\n    }, false).track;\n    sourceBuffer.metadataTrack_.inBandMetadataTrackDispatchType = segment.metadata.dispatchType;\n  }\n};\n\n/**\n * @file remove-cues-from-track.js\n */\n\n/**\n * Remove cues from a track on video.js.\n *\n * @param {Double} start start of where we should remove the cue\n * @param {Double} end end of where the we should remove the cue\n * @param {Object} track the text track to remove the cues from\n * @private\n */\nvar removeCuesFromTrack = function removeCuesFromTrack(start, end, track) {\n  var i = void 0;\n  var cue = void 0;\n\n  if (!track) {\n    return;\n  }\n\n  if (!track.cues) {\n    return;\n  }\n\n  i = track.cues.length;\n\n  while (i--) {\n    cue = track.cues[i];\n\n    // Remove any overlapping cue\n    if (cue.startTime <= end && cue.endTime >= start) {\n      track.removeCue(cue);\n    }\n  }\n};\n\n/**\n * @file add-text-track-data.js\n */\n/**\n * Define properties on a cue for backwards compatability,\n * but warn the user that the way that they are using it\n * is depricated and will be removed at a later date.\n *\n * @param {Cue} cue the cue to add the properties on\n * @private\n */\nvar deprecateOldCue = function deprecateOldCue(cue) {\n  Object.defineProperties(cue.frame, {\n    id: {\n      get: function get$$1() {\n        videojs$1.log.warn('cue.frame.id is deprecated. Use cue.value.key instead.');\n        return cue.value.key;\n      }\n    },\n    value: {\n      get: function get$$1() {\n        videojs$1.log.warn('cue.frame.value is deprecated. Use cue.value.data instead.');\n        return cue.value.data;\n      }\n    },\n    privateData: {\n      get: function get$$1() {\n        videojs$1.log.warn('cue.frame.privateData is deprecated. Use cue.value.data instead.');\n        return cue.value.data;\n      }\n    }\n  });\n};\n\nvar durationOfVideo = function durationOfVideo(duration) {\n  var dur = void 0;\n\n  if (isNaN(duration) || Math.abs(duration) === Infinity) {\n    dur = Number.MAX_VALUE;\n  } else {\n    dur = duration;\n  }\n  return dur;\n};\n/**\n * Add text track data to a source handler given the captions and\n * metadata from the buffer.\n *\n * @param {Object} sourceHandler the virtual source buffer\n * @param {Array} captionArray an array of caption data\n * @param {Array} metadataArray an array of meta data\n * @private\n */\nvar addTextTrackData = function addTextTrackData(sourceHandler, captionArray, metadataArray) {\n  var Cue = window$1.WebKitDataCue || window$1.VTTCue;\n\n  if (captionArray) {\n    captionArray.forEach(function (caption) {\n      var track = caption.stream;\n\n      this.inbandTextTracks_[track].addCue(new Cue(caption.startTime + this.timestampOffset, caption.endTime + this.timestampOffset, caption.text));\n    }, sourceHandler);\n  }\n\n  if (metadataArray) {\n    var videoDuration = durationOfVideo(sourceHandler.mediaSource_.duration);\n\n    metadataArray.forEach(function (metadata) {\n      var time = metadata.cueTime + this.timestampOffset;\n\n      metadata.frames.forEach(function (frame) {\n        var cue = new Cue(time, time, frame.value || frame.url || frame.data || '');\n\n        cue.frame = frame;\n        cue.value = frame;\n        deprecateOldCue(cue);\n\n        this.metadataTrack_.addCue(cue);\n      }, this);\n    }, sourceHandler);\n\n    // Updating the metadeta cues so that\n    // the endTime of each cue is the startTime of the next cue\n    // the endTime of last cue is the duration of the video\n    if (sourceHandler.metadataTrack_ && sourceHandler.metadataTrack_.cues && sourceHandler.metadataTrack_.cues.length) {\n      var cues = sourceHandler.metadataTrack_.cues;\n      var cuesArray = [];\n\n      // Create a copy of the TextTrackCueList...\n      // ...disregarding cues with a falsey value\n      for (var i = 0; i < cues.length; i++) {\n        if (cues[i]) {\n          cuesArray.push(cues[i]);\n        }\n      }\n\n      // Group cues by their startTime value\n      var cuesGroupedByStartTime = cuesArray.reduce(function (obj, cue) {\n        var timeSlot = obj[cue.startTime] || [];\n\n        timeSlot.push(cue);\n        obj[cue.startTime] = timeSlot;\n\n        return obj;\n      }, {});\n\n      // Sort startTimes by ascending order\n      var sortedStartTimes = Object.keys(cuesGroupedByStartTime).sort(function (a, b) {\n        return Number(a) - Number(b);\n      });\n\n      // Map each cue group's endTime to the next group's startTime\n      sortedStartTimes.forEach(function (startTime, idx) {\n        var cueGroup = cuesGroupedByStartTime[startTime];\n        var nextTime = Number(sortedStartTimes[idx + 1]) || videoDuration;\n\n        // Map each cue's endTime the next group's startTime\n        cueGroup.forEach(function (cue) {\n          cue.endTime = nextTime;\n        });\n      });\n    }\n  }\n};\n\nvar win = typeof window !== 'undefined' ? window : {},\n    TARGET = typeof Symbol === 'undefined' ? '__target' : Symbol(),\n    SCRIPT_TYPE = 'application/javascript',\n    BlobBuilder = win.BlobBuilder || win.WebKitBlobBuilder || win.MozBlobBuilder || win.MSBlobBuilder,\n    URL = win.URL || win.webkitURL || URL && URL.msURL,\n    Worker = win.Worker;\n\n/**\n * Returns a wrapper around Web Worker code that is constructible.\n *\n * @function shimWorker\n *\n * @param { String }    filename    The name of the file\n * @param { Function }  fn          Function wrapping the code of the worker\n */\nfunction shimWorker(filename, fn) {\n  return function ShimWorker(forceFallback) {\n    var o = this;\n\n    if (!fn) {\n      return new Worker(filename);\n    } else if (Worker && !forceFallback) {\n      // Convert the function's inner code to a string to construct the worker\n      var source = fn.toString().replace(/^function.+?{/, '').slice(0, -1),\n          objURL = createSourceObject(source);\n\n      this[TARGET] = new Worker(objURL);\n      wrapTerminate(this[TARGET], objURL);\n      return this[TARGET];\n    } else {\n      var selfShim = {\n        postMessage: function postMessage(m) {\n          if (o.onmessage) {\n            setTimeout(function () {\n              o.onmessage({ data: m, target: selfShim });\n            });\n          }\n        }\n      };\n\n      fn.call(selfShim);\n      this.postMessage = function (m) {\n        setTimeout(function () {\n          selfShim.onmessage({ data: m, target: o });\n        });\n      };\n      this.isThisThread = true;\n    }\n  };\n}\n// Test Worker capabilities\nif (Worker) {\n  var testWorker,\n      objURL = createSourceObject('self.onmessage = function () {}'),\n      testArray = new Uint8Array(1);\n\n  try {\n    testWorker = new Worker(objURL);\n\n    // Native browser on some Samsung devices throws for transferables, let's detect it\n    testWorker.postMessage(testArray, [testArray.buffer]);\n  } catch (e) {\n    Worker = null;\n  } finally {\n    URL.revokeObjectURL(objURL);\n    if (testWorker) {\n      testWorker.terminate();\n    }\n  }\n}\n\nfunction createSourceObject(str) {\n  try {\n    return URL.createObjectURL(new Blob([str], { type: SCRIPT_TYPE }));\n  } catch (e) {\n    var blob = new BlobBuilder();\n    blob.append(str);\n    return URL.createObjectURL(blob.getBlob(type));\n  }\n}\n\nfunction wrapTerminate(worker, objURL) {\n  if (!worker || !objURL) return;\n  var term = worker.terminate;\n  worker.objURL = objURL;\n  worker.terminate = function () {\n    if (worker.objURL) URL.revokeObjectURL(worker.objURL);\n    term.call(worker);\n  };\n}\n\nvar TransmuxWorker = new shimWorker(\"./transmuxer-worker.worker.js\", function (window, document$$1) {\n  var self = this;\n  var transmuxerWorker = function () {\n\n    /**\n     * mux.js\n     *\n     * Copyright (c) 2015 Brightcove\n     * All rights reserved.\n     *\n     * Functions that generate fragmented MP4s suitable for use with Media\n     * Source Extensions.\n     */\n\n    var UINT32_MAX = Math.pow(2, 32) - 1;\n\n    var box, dinf, esds, ftyp, mdat, mfhd, minf, moof, moov, mvex, mvhd, trak, tkhd, mdia, mdhd, hdlr, sdtp, stbl, stsd, traf, trex, trun, types, MAJOR_BRAND, MINOR_VERSION, AVC1_BRAND, VIDEO_HDLR, AUDIO_HDLR, HDLR_TYPES, VMHD, SMHD, DREF, STCO, STSC, STSZ, STTS;\n\n    // pre-calculate constants\n    (function () {\n      var i;\n      types = {\n        avc1: [], // codingname\n        avcC: [],\n        btrt: [],\n        dinf: [],\n        dref: [],\n        esds: [],\n        ftyp: [],\n        hdlr: [],\n        mdat: [],\n        mdhd: [],\n        mdia: [],\n        mfhd: [],\n        minf: [],\n        moof: [],\n        moov: [],\n        mp4a: [], // codingname\n        mvex: [],\n        mvhd: [],\n        sdtp: [],\n        smhd: [],\n        stbl: [],\n        stco: [],\n        stsc: [],\n        stsd: [],\n        stsz: [],\n        stts: [],\n        styp: [],\n        tfdt: [],\n        tfhd: [],\n        traf: [],\n        trak: [],\n        trun: [],\n        trex: [],\n        tkhd: [],\n        vmhd: []\n      };\n\n      // In environments where Uint8Array is undefined (e.g., IE8), skip set up so that we\n      // don't throw an error\n      if (typeof Uint8Array === 'undefined') {\n        return;\n      }\n\n      for (i in types) {\n        if (types.hasOwnProperty(i)) {\n          types[i] = [i.charCodeAt(0), i.charCodeAt(1), i.charCodeAt(2), i.charCodeAt(3)];\n        }\n      }\n\n      MAJOR_BRAND = new Uint8Array(['i'.charCodeAt(0), 's'.charCodeAt(0), 'o'.charCodeAt(0), 'm'.charCodeAt(0)]);\n      AVC1_BRAND = new Uint8Array(['a'.charCodeAt(0), 'v'.charCodeAt(0), 'c'.charCodeAt(0), '1'.charCodeAt(0)]);\n      MINOR_VERSION = new Uint8Array([0, 0, 0, 1]);\n      VIDEO_HDLR = new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x00, // pre_defined\n      0x76, 0x69, 0x64, 0x65, // handler_type: 'vide'\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x56, 0x69, 0x64, 0x65, 0x6f, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'VideoHandler'\n      ]);\n      AUDIO_HDLR = new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x00, // pre_defined\n      0x73, 0x6f, 0x75, 0x6e, // handler_type: 'soun'\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x53, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'SoundHandler'\n      ]);\n      HDLR_TYPES = {\n        video: VIDEO_HDLR,\n        audio: AUDIO_HDLR\n      };\n      DREF = new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x01, // entry_count\n      0x00, 0x00, 0x00, 0x0c, // entry_size\n      0x75, 0x72, 0x6c, 0x20, // 'url' type\n      0x00, // version 0\n      0x00, 0x00, 0x01 // entry_flags\n      ]);\n      SMHD = new Uint8Array([0x00, // version\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, // balance, 0 means centered\n      0x00, 0x00 // reserved\n      ]);\n      STCO = new Uint8Array([0x00, // version\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x00 // entry_count\n      ]);\n      STSC = STCO;\n      STSZ = new Uint8Array([0x00, // version\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x00, // sample_size\n      0x00, 0x00, 0x00, 0x00 // sample_count\n      ]);\n      STTS = STCO;\n      VMHD = new Uint8Array([0x00, // version\n      0x00, 0x00, 0x01, // flags\n      0x00, 0x00, // graphicsmode\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // opcolor\n      ]);\n    })();\n\n    box = function box(type) {\n      var payload = [],\n          size = 0,\n          i,\n          result,\n          view;\n\n      for (i = 1; i < arguments.length; i++) {\n        payload.push(arguments[i]);\n      }\n\n      i = payload.length;\n\n      // calculate the total size we need to allocate\n      while (i--) {\n        size += payload[i].byteLength;\n      }\n      result = new Uint8Array(size + 8);\n      view = new DataView(result.buffer, result.byteOffset, result.byteLength);\n      view.setUint32(0, result.byteLength);\n      result.set(type, 4);\n\n      // copy the payload into the result\n      for (i = 0, size = 8; i < payload.length; i++) {\n        result.set(payload[i], size);\n        size += payload[i].byteLength;\n      }\n      return result;\n    };\n\n    dinf = function dinf() {\n      return box(types.dinf, box(types.dref, DREF));\n    };\n\n    esds = function esds(track) {\n      return box(types.esds, new Uint8Array([0x00, // version\n      0x00, 0x00, 0x00, // flags\n\n      // ES_Descriptor\n      0x03, // tag, ES_DescrTag\n      0x19, // length\n      0x00, 0x00, // ES_ID\n      0x00, // streamDependenceFlag, URL_flag, reserved, streamPriority\n\n      // DecoderConfigDescriptor\n      0x04, // tag, DecoderConfigDescrTag\n      0x11, // length\n      0x40, // object type\n      0x15, // streamType\n      0x00, 0x06, 0x00, // bufferSizeDB\n      0x00, 0x00, 0xda, 0xc0, // maxBitrate\n      0x00, 0x00, 0xda, 0xc0, // avgBitrate\n\n      // DecoderSpecificInfo\n      0x05, // tag, DecoderSpecificInfoTag\n      0x02, // length\n      // ISO/IEC 14496-3, AudioSpecificConfig\n      // for samplingFrequencyIndex see ISO/IEC 13818-7:2006, 8.1.3.2.2, Table 35\n      track.audioobjecttype << 3 | track.samplingfrequencyindex >>> 1, track.samplingfrequencyindex << 7 | track.channelcount << 3, 0x06, 0x01, 0x02 // GASpecificConfig\n      ]));\n    };\n\n    ftyp = function ftyp() {\n      return box(types.ftyp, MAJOR_BRAND, MINOR_VERSION, MAJOR_BRAND, AVC1_BRAND);\n    };\n\n    hdlr = function hdlr(type) {\n      return box(types.hdlr, HDLR_TYPES[type]);\n    };\n    mdat = function mdat(data) {\n      return box(types.mdat, data);\n    };\n    mdhd = function mdhd(track) {\n      var result = new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x02, // creation_time\n      0x00, 0x00, 0x00, 0x03, // modification_time\n      0x00, 0x01, 0x5f, 0x90, // timescale, 90,000 \"ticks\" per second\n\n      track.duration >>> 24 & 0xFF, track.duration >>> 16 & 0xFF, track.duration >>> 8 & 0xFF, track.duration & 0xFF, // duration\n      0x55, 0xc4, // 'und' language (undetermined)\n      0x00, 0x00]);\n\n      // Use the sample rate from the track metadata, when it is\n      // defined. The sample rate can be parsed out of an ADTS header, for\n      // instance.\n      if (track.samplerate) {\n        result[12] = track.samplerate >>> 24 & 0xFF;\n        result[13] = track.samplerate >>> 16 & 0xFF;\n        result[14] = track.samplerate >>> 8 & 0xFF;\n        result[15] = track.samplerate & 0xFF;\n      }\n\n      return box(types.mdhd, result);\n    };\n    mdia = function mdia(track) {\n      return box(types.mdia, mdhd(track), hdlr(track.type), minf(track));\n    };\n    mfhd = function mfhd(sequenceNumber) {\n      return box(types.mfhd, new Uint8Array([0x00, 0x00, 0x00, 0x00, // flags\n      (sequenceNumber & 0xFF000000) >> 24, (sequenceNumber & 0xFF0000) >> 16, (sequenceNumber & 0xFF00) >> 8, sequenceNumber & 0xFF // sequence_number\n      ]));\n    };\n    minf = function minf(track) {\n      return box(types.minf, track.type === 'video' ? box(types.vmhd, VMHD) : box(types.smhd, SMHD), dinf(), stbl(track));\n    };\n    moof = function moof(sequenceNumber, tracks) {\n      var trackFragments = [],\n          i = tracks.length;\n      // build traf boxes for each track fragment\n      while (i--) {\n        trackFragments[i] = traf(tracks[i]);\n      }\n      return box.apply(null, [types.moof, mfhd(sequenceNumber)].concat(trackFragments));\n    };\n    /**\n     * Returns a movie box.\n     * @param tracks {array} the tracks associated with this movie\n     * @see ISO/IEC 14496-12:2012(E), section 8.2.1\n     */\n    moov = function moov(tracks) {\n      var i = tracks.length,\n          boxes = [];\n\n      while (i--) {\n        boxes[i] = trak(tracks[i]);\n      }\n\n      return box.apply(null, [types.moov, mvhd(0xffffffff)].concat(boxes).concat(mvex(tracks)));\n    };\n    mvex = function mvex(tracks) {\n      var i = tracks.length,\n          boxes = [];\n\n      while (i--) {\n        boxes[i] = trex(tracks[i]);\n      }\n      return box.apply(null, [types.mvex].concat(boxes));\n    };\n    mvhd = function mvhd(duration) {\n      var bytes = new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x01, // creation_time\n      0x00, 0x00, 0x00, 0x02, // modification_time\n      0x00, 0x01, 0x5f, 0x90, // timescale, 90,000 \"ticks\" per second\n      (duration & 0xFF000000) >> 24, (duration & 0xFF0000) >> 16, (duration & 0xFF00) >> 8, duration & 0xFF, // duration\n      0x00, 0x01, 0x00, 0x00, // 1.0 rate\n      0x01, 0x00, // 1.0 volume\n      0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // pre_defined\n      0xff, 0xff, 0xff, 0xff // next_track_ID\n      ]);\n      return box(types.mvhd, bytes);\n    };\n\n    sdtp = function sdtp(track) {\n      var samples = track.samples || [],\n          bytes = new Uint8Array(4 + samples.length),\n          flags,\n          i;\n\n      // leave the full box header (4 bytes) all zero\n\n      // write the sample table\n      for (i = 0; i < samples.length; i++) {\n        flags = samples[i].flags;\n\n        bytes[i + 4] = flags.dependsOn << 4 | flags.isDependedOn << 2 | flags.hasRedundancy;\n      }\n\n      return box(types.sdtp, bytes);\n    };\n\n    stbl = function stbl(track) {\n      return box(types.stbl, stsd(track), box(types.stts, STTS), box(types.stsc, STSC), box(types.stsz, STSZ), box(types.stco, STCO));\n    };\n\n    (function () {\n      var videoSample, audioSample;\n\n      stsd = function stsd(track) {\n\n        return box(types.stsd, new Uint8Array([0x00, // version 0\n        0x00, 0x00, 0x00, // flags\n        0x00, 0x00, 0x00, 0x01]), track.type === 'video' ? videoSample(track) : audioSample(track));\n      };\n\n      videoSample = function videoSample(track) {\n        var sps = track.sps || [],\n            pps = track.pps || [],\n            sequenceParameterSets = [],\n            pictureParameterSets = [],\n            i;\n\n        // assemble the SPSs\n        for (i = 0; i < sps.length; i++) {\n          sequenceParameterSets.push((sps[i].byteLength & 0xFF00) >>> 8);\n          sequenceParameterSets.push(sps[i].byteLength & 0xFF); // sequenceParameterSetLength\n          sequenceParameterSets = sequenceParameterSets.concat(Array.prototype.slice.call(sps[i])); // SPS\n        }\n\n        // assemble the PPSs\n        for (i = 0; i < pps.length; i++) {\n          pictureParameterSets.push((pps[i].byteLength & 0xFF00) >>> 8);\n          pictureParameterSets.push(pps[i].byteLength & 0xFF);\n          pictureParameterSets = pictureParameterSets.concat(Array.prototype.slice.call(pps[i]));\n        }\n\n        return box(types.avc1, new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved\n        0x00, 0x01, // data_reference_index\n        0x00, 0x00, // pre_defined\n        0x00, 0x00, // reserved\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // pre_defined\n        (track.width & 0xff00) >> 8, track.width & 0xff, // width\n        (track.height & 0xff00) >> 8, track.height & 0xff, // height\n        0x00, 0x48, 0x00, 0x00, // horizresolution\n        0x00, 0x48, 0x00, 0x00, // vertresolution\n        0x00, 0x00, 0x00, 0x00, // reserved\n        0x00, 0x01, // frame_count\n        0x13, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x6a, 0x73, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x2d, 0x68, 0x6c, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // compressorname\n        0x00, 0x18, // depth = 24\n        0x11, 0x11 // pre_defined = -1\n        ]), box(types.avcC, new Uint8Array([0x01, // configurationVersion\n        track.profileIdc, // AVCProfileIndication\n        track.profileCompatibility, // profile_compatibility\n        track.levelIdc, // AVCLevelIndication\n        0xff // lengthSizeMinusOne, hard-coded to 4 bytes\n        ].concat([sps.length // numOfSequenceParameterSets\n        ]).concat(sequenceParameterSets).concat([pps.length // numOfPictureParameterSets\n        ]).concat(pictureParameterSets))), // \"PPS\"\n        box(types.btrt, new Uint8Array([0x00, 0x1c, 0x9c, 0x80, // bufferSizeDB\n        0x00, 0x2d, 0xc6, 0xc0, // maxBitrate\n        0x00, 0x2d, 0xc6, 0xc0])) // avgBitrate\n        );\n      };\n\n      audioSample = function audioSample(track) {\n        return box(types.mp4a, new Uint8Array([\n\n        // SampleEntry, ISO/IEC 14496-12\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved\n        0x00, 0x01, // data_reference_index\n\n        // AudioSampleEntry, ISO/IEC 14496-12\n        0x00, 0x00, 0x00, 0x00, // reserved\n        0x00, 0x00, 0x00, 0x00, // reserved\n        (track.channelcount & 0xff00) >> 8, track.channelcount & 0xff, // channelcount\n\n        (track.samplesize & 0xff00) >> 8, track.samplesize & 0xff, // samplesize\n        0x00, 0x00, // pre_defined\n        0x00, 0x00, // reserved\n\n        (track.samplerate & 0xff00) >> 8, track.samplerate & 0xff, 0x00, 0x00 // samplerate, 16.16\n\n        // MP4AudioSampleEntry, ISO/IEC 14496-14\n        ]), esds(track));\n      };\n    })();\n\n    tkhd = function tkhd(track) {\n      var result = new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x07, // flags\n      0x00, 0x00, 0x00, 0x00, // creation_time\n      0x00, 0x00, 0x00, 0x00, // modification_time\n      (track.id & 0xFF000000) >> 24, (track.id & 0xFF0000) >> 16, (track.id & 0xFF00) >> 8, track.id & 0xFF, // track_ID\n      0x00, 0x00, 0x00, 0x00, // reserved\n      (track.duration & 0xFF000000) >> 24, (track.duration & 0xFF0000) >> 16, (track.duration & 0xFF00) >> 8, track.duration & 0xFF, // duration\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, // layer\n      0x00, 0x00, // alternate_group\n      0x01, 0x00, // non-audio track volume\n      0x00, 0x00, // reserved\n      0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\n      (track.width & 0xFF00) >> 8, track.width & 0xFF, 0x00, 0x00, // width\n      (track.height & 0xFF00) >> 8, track.height & 0xFF, 0x00, 0x00 // height\n      ]);\n\n      return box(types.tkhd, result);\n    };\n\n    /**\n     * Generate a track fragment (traf) box. A traf box collects metadata\n     * about tracks in a movie fragment (moof) box.\n     */\n    traf = function traf(track) {\n      var trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun, sampleDependencyTable, dataOffset, upperWordBaseMediaDecodeTime, lowerWordBaseMediaDecodeTime;\n\n      trackFragmentHeader = box(types.tfhd, new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x3a, // flags\n      (track.id & 0xFF000000) >> 24, (track.id & 0xFF0000) >> 16, (track.id & 0xFF00) >> 8, track.id & 0xFF, // track_ID\n      0x00, 0x00, 0x00, 0x01, // sample_description_index\n      0x00, 0x00, 0x00, 0x00, // default_sample_duration\n      0x00, 0x00, 0x00, 0x00, // default_sample_size\n      0x00, 0x00, 0x00, 0x00 // default_sample_flags\n      ]));\n\n      upperWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime / (UINT32_MAX + 1));\n      lowerWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime % (UINT32_MAX + 1));\n\n      trackFragmentDecodeTime = box(types.tfdt, new Uint8Array([0x01, // version 1\n      0x00, 0x00, 0x00, // flags\n      // baseMediaDecodeTime\n      upperWordBaseMediaDecodeTime >>> 24 & 0xFF, upperWordBaseMediaDecodeTime >>> 16 & 0xFF, upperWordBaseMediaDecodeTime >>> 8 & 0xFF, upperWordBaseMediaDecodeTime & 0xFF, lowerWordBaseMediaDecodeTime >>> 24 & 0xFF, lowerWordBaseMediaDecodeTime >>> 16 & 0xFF, lowerWordBaseMediaDecodeTime >>> 8 & 0xFF, lowerWordBaseMediaDecodeTime & 0xFF]));\n\n      // the data offset specifies the number of bytes from the start of\n      // the containing moof to the first payload byte of the associated\n      // mdat\n      dataOffset = 32 + // tfhd\n      20 + // tfdt\n      8 + // traf header\n      16 + // mfhd\n      8 + // moof header\n      8; // mdat header\n\n      // audio tracks require less metadata\n      if (track.type === 'audio') {\n        trackFragmentRun = trun(track, dataOffset);\n        return box(types.traf, trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun);\n      }\n\n      // video tracks should contain an independent and disposable samples\n      // box (sdtp)\n      // generate one and adjust offsets to match\n      sampleDependencyTable = sdtp(track);\n      trackFragmentRun = trun(track, sampleDependencyTable.length + dataOffset);\n      return box(types.traf, trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun, sampleDependencyTable);\n    };\n\n    /**\n     * Generate a track box.\n     * @param track {object} a track definition\n     * @return {Uint8Array} the track box\n     */\n    trak = function trak(track) {\n      track.duration = track.duration || 0xffffffff;\n      return box(types.trak, tkhd(track), mdia(track));\n    };\n\n    trex = function trex(track) {\n      var result = new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      (track.id & 0xFF000000) >> 24, (track.id & 0xFF0000) >> 16, (track.id & 0xFF00) >> 8, track.id & 0xFF, // track_ID\n      0x00, 0x00, 0x00, 0x01, // default_sample_description_index\n      0x00, 0x00, 0x00, 0x00, // default_sample_duration\n      0x00, 0x00, 0x00, 0x00, // default_sample_size\n      0x00, 0x01, 0x00, 0x01 // default_sample_flags\n      ]);\n      // the last two bytes of default_sample_flags is the sample\n      // degradation priority, a hint about the importance of this sample\n      // relative to others. Lower the degradation priority for all sample\n      // types other than video.\n      if (track.type !== 'video') {\n        result[result.length - 1] = 0x00;\n      }\n\n      return box(types.trex, result);\n    };\n\n    (function () {\n      var audioTrun, videoTrun, trunHeader;\n\n      // This method assumes all samples are uniform. That is, if a\n      // duration is present for the first sample, it will be present for\n      // all subsequent samples.\n      // see ISO/IEC 14496-12:2012, Section 8.8.8.1\n      trunHeader = function trunHeader(samples, offset) {\n        var durationPresent = 0,\n            sizePresent = 0,\n            flagsPresent = 0,\n            compositionTimeOffset = 0;\n\n        // trun flag constants\n        if (samples.length) {\n          if (samples[0].duration !== undefined) {\n            durationPresent = 0x1;\n          }\n          if (samples[0].size !== undefined) {\n            sizePresent = 0x2;\n          }\n          if (samples[0].flags !== undefined) {\n            flagsPresent = 0x4;\n          }\n          if (samples[0].compositionTimeOffset !== undefined) {\n            compositionTimeOffset = 0x8;\n          }\n        }\n\n        return [0x00, // version 0\n        0x00, durationPresent | sizePresent | flagsPresent | compositionTimeOffset, 0x01, // flags\n        (samples.length & 0xFF000000) >>> 24, (samples.length & 0xFF0000) >>> 16, (samples.length & 0xFF00) >>> 8, samples.length & 0xFF, // sample_count\n        (offset & 0xFF000000) >>> 24, (offset & 0xFF0000) >>> 16, (offset & 0xFF00) >>> 8, offset & 0xFF // data_offset\n        ];\n      };\n\n      videoTrun = function videoTrun(track, offset) {\n        var bytes, samples, sample, i;\n\n        samples = track.samples || [];\n        offset += 8 + 12 + 16 * samples.length;\n\n        bytes = trunHeader(samples, offset);\n\n        for (i = 0; i < samples.length; i++) {\n          sample = samples[i];\n          bytes = bytes.concat([(sample.duration & 0xFF000000) >>> 24, (sample.duration & 0xFF0000) >>> 16, (sample.duration & 0xFF00) >>> 8, sample.duration & 0xFF, // sample_duration\n          (sample.size & 0xFF000000) >>> 24, (sample.size & 0xFF0000) >>> 16, (sample.size & 0xFF00) >>> 8, sample.size & 0xFF, // sample_size\n          sample.flags.isLeading << 2 | sample.flags.dependsOn, sample.flags.isDependedOn << 6 | sample.flags.hasRedundancy << 4 | sample.flags.paddingValue << 1 | sample.flags.isNonSyncSample, sample.flags.degradationPriority & 0xF0 << 8, sample.flags.degradationPriority & 0x0F, // sample_flags\n          (sample.compositionTimeOffset & 0xFF000000) >>> 24, (sample.compositionTimeOffset & 0xFF0000) >>> 16, (sample.compositionTimeOffset & 0xFF00) >>> 8, sample.compositionTimeOffset & 0xFF // sample_composition_time_offset\n          ]);\n        }\n        return box(types.trun, new Uint8Array(bytes));\n      };\n\n      audioTrun = function audioTrun(track, offset) {\n        var bytes, samples, sample, i;\n\n        samples = track.samples || [];\n        offset += 8 + 12 + 8 * samples.length;\n\n        bytes = trunHeader(samples, offset);\n\n        for (i = 0; i < samples.length; i++) {\n          sample = samples[i];\n          bytes = bytes.concat([(sample.duration & 0xFF000000) >>> 24, (sample.duration & 0xFF0000) >>> 16, (sample.duration & 0xFF00) >>> 8, sample.duration & 0xFF, // sample_duration\n          (sample.size & 0xFF000000) >>> 24, (sample.size & 0xFF0000) >>> 16, (sample.size & 0xFF00) >>> 8, sample.size & 0xFF]); // sample_size\n        }\n\n        return box(types.trun, new Uint8Array(bytes));\n      };\n\n      trun = function trun(track, offset) {\n        if (track.type === 'audio') {\n          return audioTrun(track, offset);\n        }\n\n        return videoTrun(track, offset);\n      };\n    })();\n\n    var mp4Generator = {\n      ftyp: ftyp,\n      mdat: mdat,\n      moof: moof,\n      moov: moov,\n      initSegment: function initSegment(tracks) {\n        var fileType = ftyp(),\n            movie = moov(tracks),\n            result;\n\n        result = new Uint8Array(fileType.byteLength + movie.byteLength);\n        result.set(fileType);\n        result.set(movie, fileType.byteLength);\n        return result;\n      }\n    };\n\n    var toUnsigned = function toUnsigned(value) {\n      return value >>> 0;\n    };\n\n    var bin = {\n      toUnsigned: toUnsigned\n    };\n\n    var toUnsigned$1 = bin.toUnsigned;\n    var _findBox, parseType, timescale, startTime, getVideoTrackIds;\n\n    // Find the data for a box specified by its path\n    _findBox = function findBox(data, path) {\n      var results = [],\n          i,\n          size,\n          type,\n          end,\n          subresults;\n\n      if (!path.length) {\n        // short-circuit the search for empty paths\n        return null;\n      }\n\n      for (i = 0; i < data.byteLength;) {\n        size = toUnsigned$1(data[i] << 24 | data[i + 1] << 16 | data[i + 2] << 8 | data[i + 3]);\n\n        type = parseType(data.subarray(i + 4, i + 8));\n\n        end = size > 1 ? i + size : data.byteLength;\n\n        if (type === path[0]) {\n          if (path.length === 1) {\n            // this is the end of the path and we've found the box we were\n            // looking for\n            results.push(data.subarray(i + 8, end));\n          } else {\n            // recursively search for the next box along the path\n            subresults = _findBox(data.subarray(i + 8, end), path.slice(1));\n            if (subresults.length) {\n              results = results.concat(subresults);\n            }\n          }\n        }\n        i = end;\n      }\n\n      // we've finished searching all of data\n      return results;\n    };\n\n    /**\n     * Returns the string representation of an ASCII encoded four byte buffer.\n     * @param buffer {Uint8Array} a four-byte buffer to translate\n     * @return {string} the corresponding string\n     */\n    parseType = function parseType(buffer) {\n      var result = '';\n      result += String.fromCharCode(buffer[0]);\n      result += String.fromCharCode(buffer[1]);\n      result += String.fromCharCode(buffer[2]);\n      result += String.fromCharCode(buffer[3]);\n      return result;\n    };\n\n    /**\n     * Parses an MP4 initialization segment and extracts the timescale\n     * values for any declared tracks. Timescale values indicate the\n     * number of clock ticks per second to assume for time-based values\n     * elsewhere in the MP4.\n     *\n     * To determine the start time of an MP4, you need two pieces of\n     * information: the timescale unit and the earliest base media decode\n     * time. Multiple timescales can be specified within an MP4 but the\n     * base media decode time is always expressed in the timescale from\n     * the media header box for the track:\n     * ```\n     * moov > trak > mdia > mdhd.timescale\n     * ```\n     * @param init {Uint8Array} the bytes of the init segment\n     * @return {object} a hash of track ids to timescale values or null if\n     * the init segment is malformed.\n     */\n    timescale = function timescale(init) {\n      var result = {},\n          traks = _findBox(init, ['moov', 'trak']);\n\n      // mdhd timescale\n      return traks.reduce(function (result, trak) {\n        var tkhd, version, index, id, mdhd;\n\n        tkhd = _findBox(trak, ['tkhd'])[0];\n        if (!tkhd) {\n          return null;\n        }\n        version = tkhd[0];\n        index = version === 0 ? 12 : 20;\n        id = toUnsigned$1(tkhd[index] << 24 | tkhd[index + 1] << 16 | tkhd[index + 2] << 8 | tkhd[index + 3]);\n\n        mdhd = _findBox(trak, ['mdia', 'mdhd'])[0];\n        if (!mdhd) {\n          return null;\n        }\n        version = mdhd[0];\n        index = version === 0 ? 12 : 20;\n        result[id] = toUnsigned$1(mdhd[index] << 24 | mdhd[index + 1] << 16 | mdhd[index + 2] << 8 | mdhd[index + 3]);\n        return result;\n      }, result);\n    };\n\n    /**\n     * Determine the base media decode start time, in seconds, for an MP4\n     * fragment. If multiple fragments are specified, the earliest time is\n     * returned.\n     *\n     * The base media decode time can be parsed from track fragment\n     * metadata:\n     * ```\n     * moof > traf > tfdt.baseMediaDecodeTime\n     * ```\n     * It requires the timescale value from the mdhd to interpret.\n     *\n     * @param timescale {object} a hash of track ids to timescale values.\n     * @return {number} the earliest base media decode start time for the\n     * fragment, in seconds\n     */\n    startTime = function startTime(timescale, fragment) {\n      var trafs, baseTimes, result;\n\n      // we need info from two childrend of each track fragment box\n      trafs = _findBox(fragment, ['moof', 'traf']);\n\n      // determine the start times for each track\n      baseTimes = [].concat.apply([], trafs.map(function (traf) {\n        return _findBox(traf, ['tfhd']).map(function (tfhd) {\n          var id, scale, baseTime;\n\n          // get the track id from the tfhd\n          id = toUnsigned$1(tfhd[4] << 24 | tfhd[5] << 16 | tfhd[6] << 8 | tfhd[7]);\n          // assume a 90kHz clock if no timescale was specified\n          scale = timescale[id] || 90e3;\n\n          // get the base media decode time from the tfdt\n          baseTime = _findBox(traf, ['tfdt']).map(function (tfdt) {\n            var version, result;\n\n            version = tfdt[0];\n            result = toUnsigned$1(tfdt[4] << 24 | tfdt[5] << 16 | tfdt[6] << 8 | tfdt[7]);\n            if (version === 1) {\n              result *= Math.pow(2, 32);\n              result += toUnsigned$1(tfdt[8] << 24 | tfdt[9] << 16 | tfdt[10] << 8 | tfdt[11]);\n            }\n            return result;\n          })[0];\n          baseTime = baseTime || Infinity;\n\n          // convert base time to seconds\n          return baseTime / scale;\n        });\n      }));\n\n      // return the minimum\n      result = Math.min.apply(null, baseTimes);\n      return isFinite(result) ? result : 0;\n    };\n\n    /**\n      * Find the trackIds of the video tracks in this source.\n      * Found by parsing the Handler Reference and Track Header Boxes:\n      *   moov > trak > mdia > hdlr\n      *   moov > trak > tkhd\n      *\n      * @param {Uint8Array} init - The bytes of the init segment for this source\n      * @return {Number[]} A list of trackIds\n      *\n      * @see ISO-BMFF-12/2015, Section 8.4.3\n     **/\n    getVideoTrackIds = function getVideoTrackIds(init) {\n      var traks = _findBox(init, ['moov', 'trak']);\n      var videoTrackIds = [];\n\n      traks.forEach(function (trak) {\n        var hdlrs = _findBox(trak, ['mdia', 'hdlr']);\n        var tkhds = _findBox(trak, ['tkhd']);\n\n        hdlrs.forEach(function (hdlr, index) {\n          var handlerType = parseType(hdlr.subarray(8, 12));\n          var tkhd = tkhds[index];\n          var view;\n          var version;\n          var trackId;\n\n          if (handlerType === 'vide') {\n            view = new DataView(tkhd.buffer, tkhd.byteOffset, tkhd.byteLength);\n            version = view.getUint8(0);\n            trackId = version === 0 ? view.getUint32(12) : view.getUint32(20);\n\n            videoTrackIds.push(trackId);\n          }\n        });\n      });\n\n      return videoTrackIds;\n    };\n\n    var probe = {\n      findBox: _findBox,\n      parseType: parseType,\n      timescale: timescale,\n      startTime: startTime,\n      videoTrackIds: getVideoTrackIds\n    };\n\n    /**\n     * mux.js\n     *\n     * Copyright (c) 2014 Brightcove\n     * All rights reserved.\n     *\n     * A lightweight readable stream implemention that handles event dispatching.\n     * Objects that inherit from streams should call init in their constructors.\n     */\n\n    var Stream = function Stream() {\n      this.init = function () {\n        var listeners = {};\n        /**\n         * Add a listener for a specified event type.\n         * @param type {string} the event name\n         * @param listener {function} the callback to be invoked when an event of\n         * the specified type occurs\n         */\n        this.on = function (type, listener) {\n          if (!listeners[type]) {\n            listeners[type] = [];\n          }\n          listeners[type] = listeners[type].concat(listener);\n        };\n        /**\n         * Remove a listener for a specified event type.\n         * @param type {string} the event name\n         * @param listener {function} a function previously registered for this\n         * type of event through `on`\n         */\n        this.off = function (type, listener) {\n          var index;\n          if (!listeners[type]) {\n            return false;\n          }\n          index = listeners[type].indexOf(listener);\n          listeners[type] = listeners[type].slice();\n          listeners[type].splice(index, 1);\n          return index > -1;\n        };\n        /**\n         * Trigger an event of the specified type on this stream. Any additional\n         * arguments to this function are passed as parameters to event listeners.\n         * @param type {string} the event name\n         */\n        this.trigger = function (type) {\n          var callbacks, i, length, args;\n          callbacks = listeners[type];\n          if (!callbacks) {\n            return;\n          }\n          // Slicing the arguments on every invocation of this method\n          // can add a significant amount of overhead. Avoid the\n          // intermediate object creation for the common case of a\n          // single callback argument\n          if (arguments.length === 2) {\n            length = callbacks.length;\n            for (i = 0; i < length; ++i) {\n              callbacks[i].call(this, arguments[1]);\n            }\n          } else {\n            args = [];\n            i = arguments.length;\n            for (i = 1; i < arguments.length; ++i) {\n              args.push(arguments[i]);\n            }\n            length = callbacks.length;\n            for (i = 0; i < length; ++i) {\n              callbacks[i].apply(this, args);\n            }\n          }\n        };\n        /**\n         * Destroys the stream and cleans up.\n         */\n        this.dispose = function () {\n          listeners = {};\n        };\n      };\n    };\n\n    /**\n     * Forwards all `data` events on this stream to the destination stream. The\n     * destination stream should provide a method `push` to receive the data\n     * events as they arrive.\n     * @param destination {stream} the stream that will receive all `data` events\n     * @param autoFlush {boolean} if false, we will not call `flush` on the destination\n     *                            when the current stream emits a 'done' event\n     * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n     */\n    Stream.prototype.pipe = function (destination) {\n      this.on('data', function (data) {\n        destination.push(data);\n      });\n\n      this.on('done', function (flushSource) {\n        destination.flush(flushSource);\n      });\n\n      return destination;\n    };\n\n    // Default stream functions that are expected to be overridden to perform\n    // actual work. These are provided by the prototype as a sort of no-op\n    // implementation so that we don't have to check for their existence in the\n    // `pipe` function above.\n    Stream.prototype.push = function (data) {\n      this.trigger('data', data);\n    };\n\n    Stream.prototype.flush = function (flushSource) {\n      this.trigger('done', flushSource);\n    };\n\n    var stream = Stream;\n\n    // Convert an array of nal units into an array of frames with each frame being\n    // composed of the nal units that make up that frame\n    // Also keep track of cummulative data about the frame from the nal units such\n    // as the frame duration, starting pts, etc.\n    var groupNalsIntoFrames = function groupNalsIntoFrames(nalUnits) {\n      var i,\n          currentNal,\n          currentFrame = [],\n          frames = [];\n\n      currentFrame.byteLength = 0;\n\n      for (i = 0; i < nalUnits.length; i++) {\n        currentNal = nalUnits[i];\n\n        // Split on 'aud'-type nal units\n        if (currentNal.nalUnitType === 'access_unit_delimiter_rbsp') {\n          // Since the very first nal unit is expected to be an AUD\n          // only push to the frames array when currentFrame is not empty\n          if (currentFrame.length) {\n            currentFrame.duration = currentNal.dts - currentFrame.dts;\n            frames.push(currentFrame);\n          }\n          currentFrame = [currentNal];\n          currentFrame.byteLength = currentNal.data.byteLength;\n          currentFrame.pts = currentNal.pts;\n          currentFrame.dts = currentNal.dts;\n        } else {\n          // Specifically flag key frames for ease of use later\n          if (currentNal.nalUnitType === 'slice_layer_without_partitioning_rbsp_idr') {\n            currentFrame.keyFrame = true;\n          }\n          currentFrame.duration = currentNal.dts - currentFrame.dts;\n          currentFrame.byteLength += currentNal.data.byteLength;\n          currentFrame.push(currentNal);\n        }\n      }\n\n      // For the last frame, use the duration of the previous frame if we\n      // have nothing better to go on\n      if (frames.length && (!currentFrame.duration || currentFrame.duration <= 0)) {\n        currentFrame.duration = frames[frames.length - 1].duration;\n      }\n\n      // Push the final frame\n      frames.push(currentFrame);\n      return frames;\n    };\n\n    // Convert an array of frames into an array of Gop with each Gop being composed\n    // of the frames that make up that Gop\n    // Also keep track of cummulative data about the Gop from the frames such as the\n    // Gop duration, starting pts, etc.\n    var groupFramesIntoGops = function groupFramesIntoGops(frames) {\n      var i,\n          currentFrame,\n          currentGop = [],\n          gops = [];\n\n      // We must pre-set some of the values on the Gop since we\n      // keep running totals of these values\n      currentGop.byteLength = 0;\n      currentGop.nalCount = 0;\n      currentGop.duration = 0;\n      currentGop.pts = frames[0].pts;\n      currentGop.dts = frames[0].dts;\n\n      // store some metadata about all the Gops\n      gops.byteLength = 0;\n      gops.nalCount = 0;\n      gops.duration = 0;\n      gops.pts = frames[0].pts;\n      gops.dts = frames[0].dts;\n\n      for (i = 0; i < frames.length; i++) {\n        currentFrame = frames[i];\n\n        if (currentFrame.keyFrame) {\n          // Since the very first frame is expected to be an keyframe\n          // only push to the gops array when currentGop is not empty\n          if (currentGop.length) {\n            gops.push(currentGop);\n            gops.byteLength += currentGop.byteLength;\n            gops.nalCount += currentGop.nalCount;\n            gops.duration += currentGop.duration;\n          }\n\n          currentGop = [currentFrame];\n          currentGop.nalCount = currentFrame.length;\n          currentGop.byteLength = currentFrame.byteLength;\n          currentGop.pts = currentFrame.pts;\n          currentGop.dts = currentFrame.dts;\n          currentGop.duration = currentFrame.duration;\n        } else {\n          currentGop.duration += currentFrame.duration;\n          currentGop.nalCount += currentFrame.length;\n          currentGop.byteLength += currentFrame.byteLength;\n          currentGop.push(currentFrame);\n        }\n      }\n\n      if (gops.length && currentGop.duration <= 0) {\n        currentGop.duration = gops[gops.length - 1].duration;\n      }\n      gops.byteLength += currentGop.byteLength;\n      gops.nalCount += currentGop.nalCount;\n      gops.duration += currentGop.duration;\n\n      // push the final Gop\n      gops.push(currentGop);\n      return gops;\n    };\n\n    /*\n     * Search for the first keyframe in the GOPs and throw away all frames\n     * until that keyframe. Then extend the duration of the pulled keyframe\n     * and pull the PTS and DTS of the keyframe so that it covers the time\n     * range of the frames that were disposed.\n     *\n     * @param {Array} gops video GOPs\n     * @returns {Array} modified video GOPs\n     */\n    var extendFirstKeyFrame = function extendFirstKeyFrame(gops) {\n      var currentGop;\n\n      if (!gops[0][0].keyFrame && gops.length > 1) {\n        // Remove the first GOP\n        currentGop = gops.shift();\n\n        gops.byteLength -= currentGop.byteLength;\n        gops.nalCount -= currentGop.nalCount;\n\n        // Extend the first frame of what is now the\n        // first gop to cover the time period of the\n        // frames we just removed\n        gops[0][0].dts = currentGop.dts;\n        gops[0][0].pts = currentGop.pts;\n        gops[0][0].duration += currentGop.duration;\n      }\n\n      return gops;\n    };\n\n    /**\n     * Default sample object\n     * see ISO/IEC 14496-12:2012, section 8.6.4.3\n     */\n    var createDefaultSample = function createDefaultSample() {\n      return {\n        size: 0,\n        flags: {\n          isLeading: 0,\n          dependsOn: 1,\n          isDependedOn: 0,\n          hasRedundancy: 0,\n          degradationPriority: 0,\n          isNonSyncSample: 1\n        }\n      };\n    };\n\n    /*\n     * Collates information from a video frame into an object for eventual\n     * entry into an MP4 sample table.\n     *\n     * @param {Object} frame the video frame\n     * @param {Number} dataOffset the byte offset to position the sample\n     * @return {Object} object containing sample table info for a frame\n     */\n    var sampleForFrame = function sampleForFrame(frame, dataOffset) {\n      var sample = createDefaultSample();\n\n      sample.dataOffset = dataOffset;\n      sample.compositionTimeOffset = frame.pts - frame.dts;\n      sample.duration = frame.duration;\n      sample.size = 4 * frame.length; // Space for nal unit size\n      sample.size += frame.byteLength;\n\n      if (frame.keyFrame) {\n        sample.flags.dependsOn = 2;\n        sample.flags.isNonSyncSample = 0;\n      }\n\n      return sample;\n    };\n\n    // generate the track's sample table from an array of gops\n    var generateSampleTable = function generateSampleTable(gops, baseDataOffset) {\n      var h,\n          i,\n          sample,\n          currentGop,\n          currentFrame,\n          dataOffset = baseDataOffset || 0,\n          samples = [];\n\n      for (h = 0; h < gops.length; h++) {\n        currentGop = gops[h];\n\n        for (i = 0; i < currentGop.length; i++) {\n          currentFrame = currentGop[i];\n\n          sample = sampleForFrame(currentFrame, dataOffset);\n\n          dataOffset += sample.size;\n\n          samples.push(sample);\n        }\n      }\n      return samples;\n    };\n\n    // generate the track's raw mdat data from an array of gops\n    var concatenateNalData = function concatenateNalData(gops) {\n      var h,\n          i,\n          j,\n          currentGop,\n          currentFrame,\n          currentNal,\n          dataOffset = 0,\n          nalsByteLength = gops.byteLength,\n          numberOfNals = gops.nalCount,\n          totalByteLength = nalsByteLength + 4 * numberOfNals,\n          data = new Uint8Array(totalByteLength),\n          view = new DataView(data.buffer);\n\n      // For each Gop..\n      for (h = 0; h < gops.length; h++) {\n        currentGop = gops[h];\n\n        // For each Frame..\n        for (i = 0; i < currentGop.length; i++) {\n          currentFrame = currentGop[i];\n\n          // For each NAL..\n          for (j = 0; j < currentFrame.length; j++) {\n            currentNal = currentFrame[j];\n\n            view.setUint32(dataOffset, currentNal.data.byteLength);\n            dataOffset += 4;\n            data.set(currentNal.data, dataOffset);\n            dataOffset += currentNal.data.byteLength;\n          }\n        }\n      }\n      return data;\n    };\n\n    var frameUtils = {\n      groupNalsIntoFrames: groupNalsIntoFrames,\n      groupFramesIntoGops: groupFramesIntoGops,\n      extendFirstKeyFrame: extendFirstKeyFrame,\n      generateSampleTable: generateSampleTable,\n      concatenateNalData: concatenateNalData\n    };\n\n    var ONE_SECOND_IN_TS = 90000; // 90kHz clock\n\n    /**\n     * Store information about the start and end of the track and the\n     * duration for each frame/sample we process in order to calculate\n     * the baseMediaDecodeTime\n     */\n    var collectDtsInfo = function collectDtsInfo(track, data) {\n      if (typeof data.pts === 'number') {\n        if (track.timelineStartInfo.pts === undefined) {\n          track.timelineStartInfo.pts = data.pts;\n        }\n\n        if (track.minSegmentPts === undefined) {\n          track.minSegmentPts = data.pts;\n        } else {\n          track.minSegmentPts = Math.min(track.minSegmentPts, data.pts);\n        }\n\n        if (track.maxSegmentPts === undefined) {\n          track.maxSegmentPts = data.pts;\n        } else {\n          track.maxSegmentPts = Math.max(track.maxSegmentPts, data.pts);\n        }\n      }\n\n      if (typeof data.dts === 'number') {\n        if (track.timelineStartInfo.dts === undefined) {\n          track.timelineStartInfo.dts = data.dts;\n        }\n\n        if (track.minSegmentDts === undefined) {\n          track.minSegmentDts = data.dts;\n        } else {\n          track.minSegmentDts = Math.min(track.minSegmentDts, data.dts);\n        }\n\n        if (track.maxSegmentDts === undefined) {\n          track.maxSegmentDts = data.dts;\n        } else {\n          track.maxSegmentDts = Math.max(track.maxSegmentDts, data.dts);\n        }\n      }\n    };\n\n    /**\n     * Clear values used to calculate the baseMediaDecodeTime between\n     * tracks\n     */\n    var clearDtsInfo = function clearDtsInfo(track) {\n      delete track.minSegmentDts;\n      delete track.maxSegmentDts;\n      delete track.minSegmentPts;\n      delete track.maxSegmentPts;\n    };\n\n    /**\n     * Calculate the track's baseMediaDecodeTime based on the earliest\n     * DTS the transmuxer has ever seen and the minimum DTS for the\n     * current track\n     * @param track {object} track metadata configuration\n     * @param keepOriginalTimestamps {boolean} If true, keep the timestamps\n     *        in the source; false to adjust the first segment to start at 0.\n     */\n    var calculateTrackBaseMediaDecodeTime = function calculateTrackBaseMediaDecodeTime(track, keepOriginalTimestamps) {\n      var baseMediaDecodeTime,\n          scale,\n          minSegmentDts = track.minSegmentDts;\n\n      // Optionally adjust the time so the first segment starts at zero.\n      if (!keepOriginalTimestamps) {\n        minSegmentDts -= track.timelineStartInfo.dts;\n      }\n\n      // track.timelineStartInfo.baseMediaDecodeTime is the location, in time, where\n      // we want the start of the first segment to be placed\n      baseMediaDecodeTime = track.timelineStartInfo.baseMediaDecodeTime;\n\n      // Add to that the distance this segment is from the very first\n      baseMediaDecodeTime += minSegmentDts;\n\n      // baseMediaDecodeTime must not become negative\n      baseMediaDecodeTime = Math.max(0, baseMediaDecodeTime);\n\n      if (track.type === 'audio') {\n        // Audio has a different clock equal to the sampling_rate so we need to\n        // scale the PTS values into the clock rate of the track\n        scale = track.samplerate / ONE_SECOND_IN_TS;\n        baseMediaDecodeTime *= scale;\n        baseMediaDecodeTime = Math.floor(baseMediaDecodeTime);\n      }\n\n      return baseMediaDecodeTime;\n    };\n\n    var trackDecodeInfo = {\n      clearDtsInfo: clearDtsInfo,\n      calculateTrackBaseMediaDecodeTime: calculateTrackBaseMediaDecodeTime,\n      collectDtsInfo: collectDtsInfo\n    };\n\n    /**\n     * mux.js\n     *\n     * Copyright (c) 2015 Brightcove\n     * All rights reserved.\n     *\n     * Reads in-band caption information from a video elementary\n     * stream. Captions must follow the CEA-708 standard for injection\n     * into an MPEG-2 transport streams.\n     * @see https://en.wikipedia.org/wiki/CEA-708\n     * @see https://www.gpo.gov/fdsys/pkg/CFR-2007-title47-vol1/pdf/CFR-2007-title47-vol1-sec15-119.pdf\n     */\n\n    // Supplemental enhancement information (SEI) NAL units have a\n    // payload type field to indicate how they are to be\n    // interpreted. CEAS-708 caption content is always transmitted with\n    // payload type 0x04.\n\n    var USER_DATA_REGISTERED_ITU_T_T35 = 4,\n        RBSP_TRAILING_BITS = 128;\n\n    /**\n      * Parse a supplemental enhancement information (SEI) NAL unit.\n      * Stops parsing once a message of type ITU T T35 has been found.\n      *\n      * @param bytes {Uint8Array} the bytes of a SEI NAL unit\n      * @return {object} the parsed SEI payload\n      * @see Rec. ITU-T H.264, 7.3.2.3.1\n      */\n    var parseSei = function parseSei(bytes) {\n      var i = 0,\n          result = {\n        payloadType: -1,\n        payloadSize: 0\n      },\n          payloadType = 0,\n          payloadSize = 0;\n\n      // go through the sei_rbsp parsing each each individual sei_message\n      while (i < bytes.byteLength) {\n        // stop once we have hit the end of the sei_rbsp\n        if (bytes[i] === RBSP_TRAILING_BITS) {\n          break;\n        }\n\n        // Parse payload type\n        while (bytes[i] === 0xFF) {\n          payloadType += 255;\n          i++;\n        }\n        payloadType += bytes[i++];\n\n        // Parse payload size\n        while (bytes[i] === 0xFF) {\n          payloadSize += 255;\n          i++;\n        }\n        payloadSize += bytes[i++];\n\n        // this sei_message is a 608/708 caption so save it and break\n        // there can only ever be one caption message in a frame's sei\n        if (!result.payload && payloadType === USER_DATA_REGISTERED_ITU_T_T35) {\n          result.payloadType = payloadType;\n          result.payloadSize = payloadSize;\n          result.payload = bytes.subarray(i, i + payloadSize);\n          break;\n        }\n\n        // skip the payload and parse the next message\n        i += payloadSize;\n        payloadType = 0;\n        payloadSize = 0;\n      }\n\n      return result;\n    };\n\n    // see ANSI/SCTE 128-1 (2013), section 8.1\n    var parseUserData = function parseUserData(sei) {\n      // itu_t_t35_contry_code must be 181 (United States) for\n      // captions\n      if (sei.payload[0] !== 181) {\n        return null;\n      }\n\n      // itu_t_t35_provider_code should be 49 (ATSC) for captions\n      if ((sei.payload[1] << 8 | sei.payload[2]) !== 49) {\n        return null;\n      }\n\n      // the user_identifier should be \"GA94\" to indicate ATSC1 data\n      if (String.fromCharCode(sei.payload[3], sei.payload[4], sei.payload[5], sei.payload[6]) !== 'GA94') {\n        return null;\n      }\n\n      // finally, user_data_type_code should be 0x03 for caption data\n      if (sei.payload[7] !== 0x03) {\n        return null;\n      }\n\n      // return the user_data_type_structure and strip the trailing\n      // marker bits\n      return sei.payload.subarray(8, sei.payload.length - 1);\n    };\n\n    // see CEA-708-D, section 4.4\n    var parseCaptionPackets = function parseCaptionPackets(pts, userData) {\n      var results = [],\n          i,\n          count,\n          offset,\n          data;\n\n      // if this is just filler, return immediately\n      if (!(userData[0] & 0x40)) {\n        return results;\n      }\n\n      // parse out the cc_data_1 and cc_data_2 fields\n      count = userData[0] & 0x1f;\n      for (i = 0; i < count; i++) {\n        offset = i * 3;\n        data = {\n          type: userData[offset + 2] & 0x03,\n          pts: pts\n        };\n\n        // capture cc data when cc_valid is 1\n        if (userData[offset + 2] & 0x04) {\n          data.ccData = userData[offset + 3] << 8 | userData[offset + 4];\n          results.push(data);\n        }\n      }\n      return results;\n    };\n\n    var discardEmulationPreventionBytes = function discardEmulationPreventionBytes(data) {\n      var length = data.byteLength,\n          emulationPreventionBytesPositions = [],\n          i = 1,\n          newLength,\n          newData;\n\n      // Find all `Emulation Prevention Bytes`\n      while (i < length - 2) {\n        if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {\n          emulationPreventionBytesPositions.push(i + 2);\n          i += 2;\n        } else {\n          i++;\n        }\n      }\n\n      // If no Emulation Prevention Bytes were found just return the original\n      // array\n      if (emulationPreventionBytesPositions.length === 0) {\n        return data;\n      }\n\n      // Create a new array to hold the NAL unit data\n      newLength = length - emulationPreventionBytesPositions.length;\n      newData = new Uint8Array(newLength);\n      var sourceIndex = 0;\n\n      for (i = 0; i < newLength; sourceIndex++, i++) {\n        if (sourceIndex === emulationPreventionBytesPositions[0]) {\n          // Skip this byte\n          sourceIndex++;\n          // Remove this position index\n          emulationPreventionBytesPositions.shift();\n        }\n        newData[i] = data[sourceIndex];\n      }\n\n      return newData;\n    };\n\n    // exports\n    var captionPacketParser = {\n      parseSei: parseSei,\n      parseUserData: parseUserData,\n      parseCaptionPackets: parseCaptionPackets,\n      discardEmulationPreventionBytes: discardEmulationPreventionBytes,\n      USER_DATA_REGISTERED_ITU_T_T35: USER_DATA_REGISTERED_ITU_T_T35\n    };\n\n    // -----------------\n    // Link To Transport\n    // -----------------\n\n\n    var CaptionStream = function CaptionStream() {\n\n      CaptionStream.prototype.init.call(this);\n\n      this.captionPackets_ = [];\n\n      this.ccStreams_ = [new Cea608Stream(0, 0), // eslint-disable-line no-use-before-define\n      new Cea608Stream(0, 1), // eslint-disable-line no-use-before-define\n      new Cea608Stream(1, 0), // eslint-disable-line no-use-before-define\n      new Cea608Stream(1, 1) // eslint-disable-line no-use-before-define\n      ];\n\n      this.reset();\n\n      // forward data and done events from CCs to this CaptionStream\n      this.ccStreams_.forEach(function (cc) {\n        cc.on('data', this.trigger.bind(this, 'data'));\n        cc.on('done', this.trigger.bind(this, 'done'));\n      }, this);\n    };\n\n    CaptionStream.prototype = new stream();\n    CaptionStream.prototype.push = function (event) {\n      var sei, userData, newCaptionPackets;\n\n      // only examine SEI NALs\n      if (event.nalUnitType !== 'sei_rbsp') {\n        return;\n      }\n\n      // parse the sei\n      sei = captionPacketParser.parseSei(event.escapedRBSP);\n\n      // ignore everything but user_data_registered_itu_t_t35\n      if (sei.payloadType !== captionPacketParser.USER_DATA_REGISTERED_ITU_T_T35) {\n        return;\n      }\n\n      // parse out the user data payload\n      userData = captionPacketParser.parseUserData(sei);\n\n      // ignore unrecognized userData\n      if (!userData) {\n        return;\n      }\n\n      // Sometimes, the same segment # will be downloaded twice. To stop the\n      // caption data from being processed twice, we track the latest dts we've\n      // received and ignore everything with a dts before that. However, since\n      // data for a specific dts can be split across packets on either side of\n      // a segment boundary, we need to make sure we *don't* ignore the packets\n      // from the *next* segment that have dts === this.latestDts_. By constantly\n      // tracking the number of packets received with dts === this.latestDts_, we\n      // know how many should be ignored once we start receiving duplicates.\n      if (event.dts < this.latestDts_) {\n        // We've started getting older data, so set the flag.\n        this.ignoreNextEqualDts_ = true;\n        return;\n      } else if (event.dts === this.latestDts_ && this.ignoreNextEqualDts_) {\n        this.numSameDts_--;\n        if (!this.numSameDts_) {\n          // We've received the last duplicate packet, time to start processing again\n          this.ignoreNextEqualDts_ = false;\n        }\n        return;\n      }\n\n      // parse out CC data packets and save them for later\n      newCaptionPackets = captionPacketParser.parseCaptionPackets(event.pts, userData);\n      this.captionPackets_ = this.captionPackets_.concat(newCaptionPackets);\n      if (this.latestDts_ !== event.dts) {\n        this.numSameDts_ = 0;\n      }\n      this.numSameDts_++;\n      this.latestDts_ = event.dts;\n    };\n\n    CaptionStream.prototype.flush = function () {\n      // make sure we actually parsed captions before proceeding\n      if (!this.captionPackets_.length) {\n        this.ccStreams_.forEach(function (cc) {\n          cc.flush();\n        }, this);\n        return;\n      }\n\n      // In Chrome, the Array#sort function is not stable so add a\n      // presortIndex that we can use to ensure we get a stable-sort\n      this.captionPackets_.forEach(function (elem, idx) {\n        elem.presortIndex = idx;\n      });\n\n      // sort caption byte-pairs based on their PTS values\n      this.captionPackets_.sort(function (a, b) {\n        if (a.pts === b.pts) {\n          return a.presortIndex - b.presortIndex;\n        }\n        return a.pts - b.pts;\n      });\n\n      this.captionPackets_.forEach(function (packet) {\n        if (packet.type < 2) {\n          // Dispatch packet to the right Cea608Stream\n          this.dispatchCea608Packet(packet);\n        }\n        // this is where an 'else' would go for a dispatching packets\n        // to a theoretical Cea708Stream that handles SERVICEn data\n      }, this);\n\n      this.captionPackets_.length = 0;\n      this.ccStreams_.forEach(function (cc) {\n        cc.flush();\n      }, this);\n      return;\n    };\n\n    CaptionStream.prototype.reset = function () {\n      this.latestDts_ = null;\n      this.ignoreNextEqualDts_ = false;\n      this.numSameDts_ = 0;\n      this.activeCea608Channel_ = [null, null];\n      this.ccStreams_.forEach(function (ccStream) {\n        ccStream.reset();\n      });\n    };\n\n    CaptionStream.prototype.dispatchCea608Packet = function (packet) {\n      // NOTE: packet.type is the CEA608 field\n      if (this.setsChannel1Active(packet)) {\n        this.activeCea608Channel_[packet.type] = 0;\n      } else if (this.setsChannel2Active(packet)) {\n        this.activeCea608Channel_[packet.type] = 1;\n      }\n      if (this.activeCea608Channel_[packet.type] === null) {\n        // If we haven't received anything to set the active channel, discard the\n        // data; we don't want jumbled captions\n        return;\n      }\n      this.ccStreams_[(packet.type << 1) + this.activeCea608Channel_[packet.type]].push(packet);\n    };\n\n    CaptionStream.prototype.setsChannel1Active = function (packet) {\n      return (packet.ccData & 0x7800) === 0x1000;\n    };\n    CaptionStream.prototype.setsChannel2Active = function (packet) {\n      return (packet.ccData & 0x7800) === 0x1800;\n    };\n\n    // ----------------------\n    // Session to Application\n    // ----------------------\n\n    // This hash maps non-ASCII, special, and extended character codes to their\n    // proper Unicode equivalent. The first keys that are only a single byte\n    // are the non-standard ASCII characters, which simply map the CEA608 byte\n    // to the standard ASCII/Unicode. The two-byte keys that follow are the CEA608\n    // character codes, but have their MSB bitmasked with 0x03 so that a lookup\n    // can be performed regardless of the field and data channel on which the\n    // character code was received.\n    var CHARACTER_TRANSLATION = {\n      0x2a: 0xe1, // á\n      0x5c: 0xe9, // é\n      0x5e: 0xed, // í\n      0x5f: 0xf3, // ó\n      0x60: 0xfa, // ú\n      0x7b: 0xe7, // ç\n      0x7c: 0xf7, // ÷\n      0x7d: 0xd1, // Ñ\n      0x7e: 0xf1, // ñ\n      0x7f: 0x2588, // █\n      0x0130: 0xae, // ®\n      0x0131: 0xb0, // °\n      0x0132: 0xbd, // ½\n      0x0133: 0xbf, // ¿\n      0x0134: 0x2122, // ™\n      0x0135: 0xa2, // ¢\n      0x0136: 0xa3, // £\n      0x0137: 0x266a, // ♪\n      0x0138: 0xe0, // à\n      0x0139: 0xa0, //\n      0x013a: 0xe8, // è\n      0x013b: 0xe2, // â\n      0x013c: 0xea, // ê\n      0x013d: 0xee, // î\n      0x013e: 0xf4, // ô\n      0x013f: 0xfb, // û\n      0x0220: 0xc1, // Á\n      0x0221: 0xc9, // É\n      0x0222: 0xd3, // Ó\n      0x0223: 0xda, // Ú\n      0x0224: 0xdc, // Ü\n      0x0225: 0xfc, // ü\n      0x0226: 0x2018, // ‘\n      0x0227: 0xa1, // ¡\n      0x0228: 0x2a, // *\n      0x0229: 0x27, // '\n      0x022a: 0x2014, // —\n      0x022b: 0xa9, // ©\n      0x022c: 0x2120, // ℠\n      0x022d: 0x2022, // •\n      0x022e: 0x201c, // “\n      0x022f: 0x201d, // ”\n      0x0230: 0xc0, // À\n      0x0231: 0xc2, // Â\n      0x0232: 0xc7, // Ç\n      0x0233: 0xc8, // È\n      0x0234: 0xca, // Ê\n      0x0235: 0xcb, // Ë\n      0x0236: 0xeb, // ë\n      0x0237: 0xce, // Î\n      0x0238: 0xcf, // Ï\n      0x0239: 0xef, // ï\n      0x023a: 0xd4, // Ô\n      0x023b: 0xd9, // Ù\n      0x023c: 0xf9, // ù\n      0x023d: 0xdb, // Û\n      0x023e: 0xab, // «\n      0x023f: 0xbb, // »\n      0x0320: 0xc3, // Ã\n      0x0321: 0xe3, // ã\n      0x0322: 0xcd, // Í\n      0x0323: 0xcc, // Ì\n      0x0324: 0xec, // ì\n      0x0325: 0xd2, // Ò\n      0x0326: 0xf2, // ò\n      0x0327: 0xd5, // Õ\n      0x0328: 0xf5, // õ\n      0x0329: 0x7b, // {\n      0x032a: 0x7d, // }\n      0x032b: 0x5c, // \\\n      0x032c: 0x5e, // ^\n      0x032d: 0x5f, // _\n      0x032e: 0x7c, // |\n      0x032f: 0x7e, // ~\n      0x0330: 0xc4, // Ä\n      0x0331: 0xe4, // ä\n      0x0332: 0xd6, // Ö\n      0x0333: 0xf6, // ö\n      0x0334: 0xdf, // ß\n      0x0335: 0xa5, // ¥\n      0x0336: 0xa4, // ¤\n      0x0337: 0x2502, // │\n      0x0338: 0xc5, // Å\n      0x0339: 0xe5, // å\n      0x033a: 0xd8, // Ø\n      0x033b: 0xf8, // ø\n      0x033c: 0x250c, // ┌\n      0x033d: 0x2510, // ┐\n      0x033e: 0x2514, // └\n      0x033f: 0x2518 // ┘\n    };\n\n    var getCharFromCode = function getCharFromCode(code) {\n      if (code === null) {\n        return '';\n      }\n      code = CHARACTER_TRANSLATION[code] || code;\n      return String.fromCharCode(code);\n    };\n\n    // the index of the last row in a CEA-608 display buffer\n    var BOTTOM_ROW = 14;\n\n    // This array is used for mapping PACs -> row #, since there's no way of\n    // getting it through bit logic.\n    var ROWS = [0x1100, 0x1120, 0x1200, 0x1220, 0x1500, 0x1520, 0x1600, 0x1620, 0x1700, 0x1720, 0x1000, 0x1300, 0x1320, 0x1400, 0x1420];\n\n    // CEA-608 captions are rendered onto a 34x15 matrix of character\n    // cells. The \"bottom\" row is the last element in the outer array.\n    var createDisplayBuffer = function createDisplayBuffer() {\n      var result = [],\n          i = BOTTOM_ROW + 1;\n      while (i--) {\n        result.push('');\n      }\n      return result;\n    };\n\n    var Cea608Stream = function Cea608Stream(field, dataChannel) {\n      Cea608Stream.prototype.init.call(this);\n\n      this.field_ = field || 0;\n      this.dataChannel_ = dataChannel || 0;\n\n      this.name_ = 'CC' + ((this.field_ << 1 | this.dataChannel_) + 1);\n\n      this.setConstants();\n      this.reset();\n\n      this.push = function (packet) {\n        var data, swap, char0, char1, text;\n        // remove the parity bits\n        data = packet.ccData & 0x7f7f;\n\n        // ignore duplicate control codes; the spec demands they're sent twice\n        if (data === this.lastControlCode_) {\n          this.lastControlCode_ = null;\n          return;\n        }\n\n        // Store control codes\n        if ((data & 0xf000) === 0x1000) {\n          this.lastControlCode_ = data;\n        } else if (data !== this.PADDING_) {\n          this.lastControlCode_ = null;\n        }\n\n        char0 = data >>> 8;\n        char1 = data & 0xff;\n\n        if (data === this.PADDING_) {\n          return;\n        } else if (data === this.RESUME_CAPTION_LOADING_) {\n          this.mode_ = 'popOn';\n        } else if (data === this.END_OF_CAPTION_) {\n          // If an EOC is received while in paint-on mode, the displayed caption\n          // text should be swapped to non-displayed memory as if it was a pop-on\n          // caption. Because of that, we should explicitly switch back to pop-on\n          // mode\n          this.mode_ = 'popOn';\n          this.clearFormatting(packet.pts);\n          // if a caption was being displayed, it's gone now\n          this.flushDisplayed(packet.pts);\n\n          // flip memory\n          swap = this.displayed_;\n          this.displayed_ = this.nonDisplayed_;\n          this.nonDisplayed_ = swap;\n\n          // start measuring the time to display the caption\n          this.startPts_ = packet.pts;\n        } else if (data === this.ROLL_UP_2_ROWS_) {\n          this.rollUpRows_ = 2;\n          this.setRollUp(packet.pts);\n        } else if (data === this.ROLL_UP_3_ROWS_) {\n          this.rollUpRows_ = 3;\n          this.setRollUp(packet.pts);\n        } else if (data === this.ROLL_UP_4_ROWS_) {\n          this.rollUpRows_ = 4;\n          this.setRollUp(packet.pts);\n        } else if (data === this.CARRIAGE_RETURN_) {\n          this.clearFormatting(packet.pts);\n          this.flushDisplayed(packet.pts);\n          this.shiftRowsUp_();\n          this.startPts_ = packet.pts;\n        } else if (data === this.BACKSPACE_) {\n          if (this.mode_ === 'popOn') {\n            this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);\n          } else {\n            this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1);\n          }\n        } else if (data === this.ERASE_DISPLAYED_MEMORY_) {\n          this.flushDisplayed(packet.pts);\n          this.displayed_ = createDisplayBuffer();\n        } else if (data === this.ERASE_NON_DISPLAYED_MEMORY_) {\n          this.nonDisplayed_ = createDisplayBuffer();\n        } else if (data === this.RESUME_DIRECT_CAPTIONING_) {\n          if (this.mode_ !== 'paintOn') {\n            // NOTE: This should be removed when proper caption positioning is\n            // implemented\n            this.flushDisplayed(packet.pts);\n            this.displayed_ = createDisplayBuffer();\n          }\n          this.mode_ = 'paintOn';\n          this.startPts_ = packet.pts;\n\n          // Append special characters to caption text\n        } else if (this.isSpecialCharacter(char0, char1)) {\n          // Bitmask char0 so that we can apply character transformations\n          // regardless of field and data channel.\n          // Then byte-shift to the left and OR with char1 so we can pass the\n          // entire character code to `getCharFromCode`.\n          char0 = (char0 & 0x03) << 8;\n          text = getCharFromCode(char0 | char1);\n          this[this.mode_](packet.pts, text);\n          this.column_++;\n\n          // Append extended characters to caption text\n        } else if (this.isExtCharacter(char0, char1)) {\n          // Extended characters always follow their \"non-extended\" equivalents.\n          // IE if a \"è\" is desired, you'll always receive \"eè\"; non-compliant\n          // decoders are supposed to drop the \"è\", while compliant decoders\n          // backspace the \"e\" and insert \"è\".\n\n          // Delete the previous character\n          if (this.mode_ === 'popOn') {\n            this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);\n          } else {\n            this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1);\n          }\n\n          // Bitmask char0 so that we can apply character transformations\n          // regardless of field and data channel.\n          // Then byte-shift to the left and OR with char1 so we can pass the\n          // entire character code to `getCharFromCode`.\n          char0 = (char0 & 0x03) << 8;\n          text = getCharFromCode(char0 | char1);\n          this[this.mode_](packet.pts, text);\n          this.column_++;\n\n          // Process mid-row codes\n        } else if (this.isMidRowCode(char0, char1)) {\n          // Attributes are not additive, so clear all formatting\n          this.clearFormatting(packet.pts);\n\n          // According to the standard, mid-row codes\n          // should be replaced with spaces, so add one now\n          this[this.mode_](packet.pts, ' ');\n          this.column_++;\n\n          if ((char1 & 0xe) === 0xe) {\n            this.addFormatting(packet.pts, ['i']);\n          }\n\n          if ((char1 & 0x1) === 0x1) {\n            this.addFormatting(packet.pts, ['u']);\n          }\n\n          // Detect offset control codes and adjust cursor\n        } else if (this.isOffsetControlCode(char0, char1)) {\n          // Cursor position is set by indent PAC (see below) in 4-column\n          // increments, with an additional offset code of 1-3 to reach any\n          // of the 32 columns specified by CEA-608. So all we need to do\n          // here is increment the column cursor by the given offset.\n          this.column_ += char1 & 0x03;\n\n          // Detect PACs (Preamble Address Codes)\n        } else if (this.isPAC(char0, char1)) {\n\n          // There's no logic for PAC -> row mapping, so we have to just\n          // find the row code in an array and use its index :(\n          var row = ROWS.indexOf(data & 0x1f20);\n\n          // Configure the caption window if we're in roll-up mode\n          if (this.mode_ === 'rollUp') {\n            this.setRollUp(packet.pts, row);\n          }\n\n          if (row !== this.row_) {\n            // formatting is only persistent for current row\n            this.clearFormatting(packet.pts);\n            this.row_ = row;\n          }\n          // All PACs can apply underline, so detect and apply\n          // (All odd-numbered second bytes set underline)\n          if (char1 & 0x1 && this.formatting_.indexOf('u') === -1) {\n            this.addFormatting(packet.pts, ['u']);\n          }\n\n          if ((data & 0x10) === 0x10) {\n            // We've got an indent level code. Each successive even number\n            // increments the column cursor by 4, so we can get the desired\n            // column position by bit-shifting to the right (to get n/2)\n            // and multiplying by 4.\n            this.column_ = ((data & 0xe) >> 1) * 4;\n          }\n\n          if (this.isColorPAC(char1)) {\n            // it's a color code, though we only support white, which\n            // can be either normal or italicized. white italics can be\n            // either 0x4e or 0x6e depending on the row, so we just\n            // bitwise-and with 0xe to see if italics should be turned on\n            if ((char1 & 0xe) === 0xe) {\n              this.addFormatting(packet.pts, ['i']);\n            }\n          }\n\n          // We have a normal character in char0, and possibly one in char1\n        } else if (this.isNormalChar(char0)) {\n          if (char1 === 0x00) {\n            char1 = null;\n          }\n          text = getCharFromCode(char0);\n          text += getCharFromCode(char1);\n          this[this.mode_](packet.pts, text);\n          this.column_ += text.length;\n        } // finish data processing\n      };\n    };\n    Cea608Stream.prototype = new stream();\n    // Trigger a cue point that captures the current state of the\n    // display buffer\n    Cea608Stream.prototype.flushDisplayed = function (pts) {\n      var content = this.displayed_\n      // remove spaces from the start and end of the string\n      .map(function (row) {\n        return row.trim();\n      })\n      // combine all text rows to display in one cue\n      .join('\\n')\n      // and remove blank rows from the start and end, but not the middle\n      .replace(/^\\n+|\\n+$/g, '');\n\n      if (content.length) {\n        this.trigger('data', {\n          startPts: this.startPts_,\n          endPts: pts,\n          text: content,\n          stream: this.name_\n        });\n      }\n    };\n\n    /**\n     * Zero out the data, used for startup and on seek\n     */\n    Cea608Stream.prototype.reset = function () {\n      this.mode_ = 'popOn';\n      // When in roll-up mode, the index of the last row that will\n      // actually display captions. If a caption is shifted to a row\n      // with a lower index than this, it is cleared from the display\n      // buffer\n      this.topRow_ = 0;\n      this.startPts_ = 0;\n      this.displayed_ = createDisplayBuffer();\n      this.nonDisplayed_ = createDisplayBuffer();\n      this.lastControlCode_ = null;\n\n      // Track row and column for proper line-breaking and spacing\n      this.column_ = 0;\n      this.row_ = BOTTOM_ROW;\n      this.rollUpRows_ = 2;\n\n      // This variable holds currently-applied formatting\n      this.formatting_ = [];\n    };\n\n    /**\n     * Sets up control code and related constants for this instance\n     */\n    Cea608Stream.prototype.setConstants = function () {\n      // The following attributes have these uses:\n      // ext_ :    char0 for mid-row codes, and the base for extended\n      //           chars (ext_+0, ext_+1, and ext_+2 are char0s for\n      //           extended codes)\n      // control_: char0 for control codes, except byte-shifted to the\n      //           left so that we can do this.control_ | CONTROL_CODE\n      // offset_:  char0 for tab offset codes\n      //\n      // It's also worth noting that control codes, and _only_ control codes,\n      // differ between field 1 and field2. Field 2 control codes are always\n      // their field 1 value plus 1. That's why there's the \"| field\" on the\n      // control value.\n      if (this.dataChannel_ === 0) {\n        this.BASE_ = 0x10;\n        this.EXT_ = 0x11;\n        this.CONTROL_ = (0x14 | this.field_) << 8;\n        this.OFFSET_ = 0x17;\n      } else if (this.dataChannel_ === 1) {\n        this.BASE_ = 0x18;\n        this.EXT_ = 0x19;\n        this.CONTROL_ = (0x1c | this.field_) << 8;\n        this.OFFSET_ = 0x1f;\n      }\n\n      // Constants for the LSByte command codes recognized by Cea608Stream. This\n      // list is not exhaustive. For a more comprehensive listing and semantics see\n      // http://www.gpo.gov/fdsys/pkg/CFR-2010-title47-vol1/pdf/CFR-2010-title47-vol1-sec15-119.pdf\n      // Padding\n      this.PADDING_ = 0x0000;\n      // Pop-on Mode\n      this.RESUME_CAPTION_LOADING_ = this.CONTROL_ | 0x20;\n      this.END_OF_CAPTION_ = this.CONTROL_ | 0x2f;\n      // Roll-up Mode\n      this.ROLL_UP_2_ROWS_ = this.CONTROL_ | 0x25;\n      this.ROLL_UP_3_ROWS_ = this.CONTROL_ | 0x26;\n      this.ROLL_UP_4_ROWS_ = this.CONTROL_ | 0x27;\n      this.CARRIAGE_RETURN_ = this.CONTROL_ | 0x2d;\n      // paint-on mode\n      this.RESUME_DIRECT_CAPTIONING_ = this.CONTROL_ | 0x29;\n      // Erasure\n      this.BACKSPACE_ = this.CONTROL_ | 0x21;\n      this.ERASE_DISPLAYED_MEMORY_ = this.CONTROL_ | 0x2c;\n      this.ERASE_NON_DISPLAYED_MEMORY_ = this.CONTROL_ | 0x2e;\n    };\n\n    /**\n     * Detects if the 2-byte packet data is a special character\n     *\n     * Special characters have a second byte in the range 0x30 to 0x3f,\n     * with the first byte being 0x11 (for data channel 1) or 0x19 (for\n     * data channel 2).\n     *\n     * @param  {Integer} char0 The first byte\n     * @param  {Integer} char1 The second byte\n     * @return {Boolean}       Whether the 2 bytes are an special character\n     */\n    Cea608Stream.prototype.isSpecialCharacter = function (char0, char1) {\n      return char0 === this.EXT_ && char1 >= 0x30 && char1 <= 0x3f;\n    };\n\n    /**\n     * Detects if the 2-byte packet data is an extended character\n     *\n     * Extended characters have a second byte in the range 0x20 to 0x3f,\n     * with the first byte being 0x12 or 0x13 (for data channel 1) or\n     * 0x1a or 0x1b (for data channel 2).\n     *\n     * @param  {Integer} char0 The first byte\n     * @param  {Integer} char1 The second byte\n     * @return {Boolean}       Whether the 2 bytes are an extended character\n     */\n    Cea608Stream.prototype.isExtCharacter = function (char0, char1) {\n      return (char0 === this.EXT_ + 1 || char0 === this.EXT_ + 2) && char1 >= 0x20 && char1 <= 0x3f;\n    };\n\n    /**\n     * Detects if the 2-byte packet is a mid-row code\n     *\n     * Mid-row codes have a second byte in the range 0x20 to 0x2f, with\n     * the first byte being 0x11 (for data channel 1) or 0x19 (for data\n     * channel 2).\n     *\n     * @param  {Integer} char0 The first byte\n     * @param  {Integer} char1 The second byte\n     * @return {Boolean}       Whether the 2 bytes are a mid-row code\n     */\n    Cea608Stream.prototype.isMidRowCode = function (char0, char1) {\n      return char0 === this.EXT_ && char1 >= 0x20 && char1 <= 0x2f;\n    };\n\n    /**\n     * Detects if the 2-byte packet is an offset control code\n     *\n     * Offset control codes have a second byte in the range 0x21 to 0x23,\n     * with the first byte being 0x17 (for data channel 1) or 0x1f (for\n     * data channel 2).\n     *\n     * @param  {Integer} char0 The first byte\n     * @param  {Integer} char1 The second byte\n     * @return {Boolean}       Whether the 2 bytes are an offset control code\n     */\n    Cea608Stream.prototype.isOffsetControlCode = function (char0, char1) {\n      return char0 === this.OFFSET_ && char1 >= 0x21 && char1 <= 0x23;\n    };\n\n    /**\n     * Detects if the 2-byte packet is a Preamble Address Code\n     *\n     * PACs have a first byte in the range 0x10 to 0x17 (for data channel 1)\n     * or 0x18 to 0x1f (for data channel 2), with the second byte in the\n     * range 0x40 to 0x7f.\n     *\n     * @param  {Integer} char0 The first byte\n     * @param  {Integer} char1 The second byte\n     * @return {Boolean}       Whether the 2 bytes are a PAC\n     */\n    Cea608Stream.prototype.isPAC = function (char0, char1) {\n      return char0 >= this.BASE_ && char0 < this.BASE_ + 8 && char1 >= 0x40 && char1 <= 0x7f;\n    };\n\n    /**\n     * Detects if a packet's second byte is in the range of a PAC color code\n     *\n     * PAC color codes have the second byte be in the range 0x40 to 0x4f, or\n     * 0x60 to 0x6f.\n     *\n     * @param  {Integer} char1 The second byte\n     * @return {Boolean}       Whether the byte is a color PAC\n     */\n    Cea608Stream.prototype.isColorPAC = function (char1) {\n      return char1 >= 0x40 && char1 <= 0x4f || char1 >= 0x60 && char1 <= 0x7f;\n    };\n\n    /**\n     * Detects if a single byte is in the range of a normal character\n     *\n     * Normal text bytes are in the range 0x20 to 0x7f.\n     *\n     * @param  {Integer} char  The byte\n     * @return {Boolean}       Whether the byte is a normal character\n     */\n    Cea608Stream.prototype.isNormalChar = function (char) {\n      return char >= 0x20 && char <= 0x7f;\n    };\n\n    /**\n     * Configures roll-up\n     *\n     * @param  {Integer} pts         Current PTS\n     * @param  {Integer} newBaseRow  Used by PACs to slide the current window to\n     *                               a new position\n     */\n    Cea608Stream.prototype.setRollUp = function (pts, newBaseRow) {\n      // Reset the base row to the bottom row when switching modes\n      if (this.mode_ !== 'rollUp') {\n        this.row_ = BOTTOM_ROW;\n        this.mode_ = 'rollUp';\n        // Spec says to wipe memories when switching to roll-up\n        this.flushDisplayed(pts);\n        this.nonDisplayed_ = createDisplayBuffer();\n        this.displayed_ = createDisplayBuffer();\n      }\n\n      if (newBaseRow !== undefined && newBaseRow !== this.row_) {\n        // move currently displayed captions (up or down) to the new base row\n        for (var i = 0; i < this.rollUpRows_; i++) {\n          this.displayed_[newBaseRow - i] = this.displayed_[this.row_ - i];\n          this.displayed_[this.row_ - i] = '';\n        }\n      }\n\n      if (newBaseRow === undefined) {\n        newBaseRow = this.row_;\n      }\n      this.topRow_ = newBaseRow - this.rollUpRows_ + 1;\n    };\n\n    // Adds the opening HTML tag for the passed character to the caption text,\n    // and keeps track of it for later closing\n    Cea608Stream.prototype.addFormatting = function (pts, format) {\n      this.formatting_ = this.formatting_.concat(format);\n      var text = format.reduce(function (text, format) {\n        return text + '<' + format + '>';\n      }, '');\n      this[this.mode_](pts, text);\n    };\n\n    // Adds HTML closing tags for current formatting to caption text and\n    // clears remembered formatting\n    Cea608Stream.prototype.clearFormatting = function (pts) {\n      if (!this.formatting_.length) {\n        return;\n      }\n      var text = this.formatting_.reverse().reduce(function (text, format) {\n        return text + '</' + format + '>';\n      }, '');\n      this.formatting_ = [];\n      this[this.mode_](pts, text);\n    };\n\n    // Mode Implementations\n    Cea608Stream.prototype.popOn = function (pts, text) {\n      var baseRow = this.nonDisplayed_[this.row_];\n\n      // buffer characters\n      baseRow += text;\n      this.nonDisplayed_[this.row_] = baseRow;\n    };\n\n    Cea608Stream.prototype.rollUp = function (pts, text) {\n      var baseRow = this.displayed_[this.row_];\n\n      baseRow += text;\n      this.displayed_[this.row_] = baseRow;\n    };\n\n    Cea608Stream.prototype.shiftRowsUp_ = function () {\n      var i;\n      // clear out inactive rows\n      for (i = 0; i < this.topRow_; i++) {\n        this.displayed_[i] = '';\n      }\n      for (i = this.row_ + 1; i < BOTTOM_ROW + 1; i++) {\n        this.displayed_[i] = '';\n      }\n      // shift displayed rows up\n      for (i = this.topRow_; i < this.row_; i++) {\n        this.displayed_[i] = this.displayed_[i + 1];\n      }\n      // clear out the bottom row\n      this.displayed_[this.row_] = '';\n    };\n\n    Cea608Stream.prototype.paintOn = function (pts, text) {\n      var baseRow = this.displayed_[this.row_];\n\n      baseRow += text;\n      this.displayed_[this.row_] = baseRow;\n    };\n\n    // exports\n    var captionStream = {\n      CaptionStream: CaptionStream,\n      Cea608Stream: Cea608Stream\n    };\n\n    var streamTypes = {\n      H264_STREAM_TYPE: 0x1B,\n      ADTS_STREAM_TYPE: 0x0F,\n      METADATA_STREAM_TYPE: 0x15\n    };\n\n    var MAX_TS = 8589934592;\n\n    var RO_THRESH = 4294967296;\n\n    var handleRollover = function handleRollover(value, reference) {\n      var direction = 1;\n\n      if (value > reference) {\n        // If the current timestamp value is greater than our reference timestamp and we detect a\n        // timestamp rollover, this means the roll over is happening in the opposite direction.\n        // Example scenario: Enter a long stream/video just after a rollover occurred. The reference\n        // point will be set to a small number, e.g. 1. The user then seeks backwards over the\n        // rollover point. In loading this segment, the timestamp values will be very large,\n        // e.g. 2^33 - 1. Since this comes before the data we loaded previously, we want to adjust\n        // the time stamp to be `value - 2^33`.\n        direction = -1;\n      }\n\n      // Note: A seek forwards or back that is greater than the RO_THRESH (2^32, ~13 hours) will\n      // cause an incorrect adjustment.\n      while (Math.abs(reference - value) > RO_THRESH) {\n        value += direction * MAX_TS;\n      }\n\n      return value;\n    };\n\n    var TimestampRolloverStream = function TimestampRolloverStream(type) {\n      var lastDTS, referenceDTS;\n\n      TimestampRolloverStream.prototype.init.call(this);\n\n      this.type_ = type;\n\n      this.push = function (data) {\n        if (data.type !== this.type_) {\n          return;\n        }\n\n        if (referenceDTS === undefined) {\n          referenceDTS = data.dts;\n        }\n\n        data.dts = handleRollover(data.dts, referenceDTS);\n        data.pts = handleRollover(data.pts, referenceDTS);\n\n        lastDTS = data.dts;\n\n        this.trigger('data', data);\n      };\n\n      this.flush = function () {\n        referenceDTS = lastDTS;\n        this.trigger('done');\n      };\n\n      this.discontinuity = function () {\n        referenceDTS = void 0;\n        lastDTS = void 0;\n      };\n    };\n\n    TimestampRolloverStream.prototype = new stream();\n\n    var timestampRolloverStream = {\n      TimestampRolloverStream: TimestampRolloverStream,\n      handleRollover: handleRollover\n    };\n\n    var percentEncode = function percentEncode(bytes, start, end) {\n      var i,\n          result = '';\n      for (i = start; i < end; i++) {\n        result += '%' + ('00' + bytes[i].toString(16)).slice(-2);\n      }\n      return result;\n    },\n\n\n    // return the string representation of the specified byte range,\n    // interpreted as UTf-8.\n    parseUtf8 = function parseUtf8(bytes, start, end) {\n      return decodeURIComponent(percentEncode(bytes, start, end));\n    },\n\n\n    // return the string representation of the specified byte range,\n    // interpreted as ISO-8859-1.\n    parseIso88591 = function parseIso88591(bytes, start, end) {\n      return unescape(percentEncode(bytes, start, end)); // jshint ignore:line\n    },\n        parseSyncSafeInteger = function parseSyncSafeInteger(data) {\n      return data[0] << 21 | data[1] << 14 | data[2] << 7 | data[3];\n    },\n        tagParsers = {\n      TXXX: function TXXX(tag) {\n        var i;\n        if (tag.data[0] !== 3) {\n          // ignore frames with unrecognized character encodings\n          return;\n        }\n\n        for (i = 1; i < tag.data.length; i++) {\n          if (tag.data[i] === 0) {\n            // parse the text fields\n            tag.description = parseUtf8(tag.data, 1, i);\n            // do not include the null terminator in the tag value\n            tag.value = parseUtf8(tag.data, i + 1, tag.data.length).replace(/\\0*$/, '');\n            break;\n          }\n        }\n        tag.data = tag.value;\n      },\n      WXXX: function WXXX(tag) {\n        var i;\n        if (tag.data[0] !== 3) {\n          // ignore frames with unrecognized character encodings\n          return;\n        }\n\n        for (i = 1; i < tag.data.length; i++) {\n          if (tag.data[i] === 0) {\n            // parse the description and URL fields\n            tag.description = parseUtf8(tag.data, 1, i);\n            tag.url = parseUtf8(tag.data, i + 1, tag.data.length);\n            break;\n          }\n        }\n      },\n      PRIV: function PRIV(tag) {\n        var i;\n\n        for (i = 0; i < tag.data.length; i++) {\n          if (tag.data[i] === 0) {\n            // parse the description and URL fields\n            tag.owner = parseIso88591(tag.data, 0, i);\n            break;\n          }\n        }\n        tag.privateData = tag.data.subarray(i + 1);\n        tag.data = tag.privateData;\n      }\n    },\n        _MetadataStream;\n\n    _MetadataStream = function MetadataStream(options) {\n      var settings = {\n        debug: !!(options && options.debug),\n\n        // the bytes of the program-level descriptor field in MP2T\n        // see ISO/IEC 13818-1:2013 (E), section 2.6 \"Program and\n        // program element descriptors\"\n        descriptor: options && options.descriptor\n      },\n\n\n      // the total size in bytes of the ID3 tag being parsed\n      tagSize = 0,\n\n\n      // tag data that is not complete enough to be parsed\n      buffer = [],\n\n\n      // the total number of bytes currently in the buffer\n      bufferSize = 0,\n          i;\n\n      _MetadataStream.prototype.init.call(this);\n\n      // calculate the text track in-band metadata track dispatch type\n      // https://html.spec.whatwg.org/multipage/embedded-content.html#steps-to-expose-a-media-resource-specific-text-track\n      this.dispatchType = streamTypes.METADATA_STREAM_TYPE.toString(16);\n      if (settings.descriptor) {\n        for (i = 0; i < settings.descriptor.length; i++) {\n          this.dispatchType += ('00' + settings.descriptor[i].toString(16)).slice(-2);\n        }\n      }\n\n      this.push = function (chunk) {\n        var tag, frameStart, frameSize, frame, i, frameHeader;\n        if (chunk.type !== 'timed-metadata') {\n          return;\n        }\n\n        // if data_alignment_indicator is set in the PES header,\n        // we must have the start of a new ID3 tag. Assume anything\n        // remaining in the buffer was malformed and throw it out\n        if (chunk.dataAlignmentIndicator) {\n          bufferSize = 0;\n          buffer.length = 0;\n        }\n\n        // ignore events that don't look like ID3 data\n        if (buffer.length === 0 && (chunk.data.length < 10 || chunk.data[0] !== 'I'.charCodeAt(0) || chunk.data[1] !== 'D'.charCodeAt(0) || chunk.data[2] !== '3'.charCodeAt(0))) {\n          if (settings.debug) {\n            // eslint-disable-next-line no-console\n            console.log('Skipping unrecognized metadata packet');\n          }\n          return;\n        }\n\n        // add this chunk to the data we've collected so far\n\n        buffer.push(chunk);\n        bufferSize += chunk.data.byteLength;\n\n        // grab the size of the entire frame from the ID3 header\n        if (buffer.length === 1) {\n          // the frame size is transmitted as a 28-bit integer in the\n          // last four bytes of the ID3 header.\n          // The most significant bit of each byte is dropped and the\n          // results concatenated to recover the actual value.\n          tagSize = parseSyncSafeInteger(chunk.data.subarray(6, 10));\n\n          // ID3 reports the tag size excluding the header but it's more\n          // convenient for our comparisons to include it\n          tagSize += 10;\n        }\n\n        // if the entire frame has not arrived, wait for more data\n        if (bufferSize < tagSize) {\n          return;\n        }\n\n        // collect the entire frame so it can be parsed\n        tag = {\n          data: new Uint8Array(tagSize),\n          frames: [],\n          pts: buffer[0].pts,\n          dts: buffer[0].dts\n        };\n        for (i = 0; i < tagSize;) {\n          tag.data.set(buffer[0].data.subarray(0, tagSize - i), i);\n          i += buffer[0].data.byteLength;\n          bufferSize -= buffer[0].data.byteLength;\n          buffer.shift();\n        }\n\n        // find the start of the first frame and the end of the tag\n        frameStart = 10;\n        if (tag.data[5] & 0x40) {\n          // advance the frame start past the extended header\n          frameStart += 4; // header size field\n          frameStart += parseSyncSafeInteger(tag.data.subarray(10, 14));\n\n          // clip any padding off the end\n          tagSize -= parseSyncSafeInteger(tag.data.subarray(16, 20));\n        }\n\n        // parse one or more ID3 frames\n        // http://id3.org/id3v2.3.0#ID3v2_frame_overview\n        do {\n          // determine the number of bytes in this frame\n          frameSize = parseSyncSafeInteger(tag.data.subarray(frameStart + 4, frameStart + 8));\n          if (frameSize < 1) {\n            // eslint-disable-next-line no-console\n            return console.log('Malformed ID3 frame encountered. Skipping metadata parsing.');\n          }\n          frameHeader = String.fromCharCode(tag.data[frameStart], tag.data[frameStart + 1], tag.data[frameStart + 2], tag.data[frameStart + 3]);\n\n          frame = {\n            id: frameHeader,\n            data: tag.data.subarray(frameStart + 10, frameStart + frameSize + 10)\n          };\n          frame.key = frame.id;\n          if (tagParsers[frame.id]) {\n            tagParsers[frame.id](frame);\n\n            // handle the special PRIV frame used to indicate the start\n            // time for raw AAC data\n            if (frame.owner === 'com.apple.streaming.transportStreamTimestamp') {\n              var d = frame.data,\n                  size = (d[3] & 0x01) << 30 | d[4] << 22 | d[5] << 14 | d[6] << 6 | d[7] >>> 2;\n\n              size *= 4;\n              size += d[7] & 0x03;\n              frame.timeStamp = size;\n              // in raw AAC, all subsequent data will be timestamped based\n              // on the value of this frame\n              // we couldn't have known the appropriate pts and dts before\n              // parsing this ID3 tag so set those values now\n              if (tag.pts === undefined && tag.dts === undefined) {\n                tag.pts = frame.timeStamp;\n                tag.dts = frame.timeStamp;\n              }\n              this.trigger('timestamp', frame);\n            }\n          }\n          tag.frames.push(frame);\n\n          frameStart += 10; // advance past the frame header\n          frameStart += frameSize; // advance past the frame body\n        } while (frameStart < tagSize);\n        this.trigger('data', tag);\n      };\n    };\n    _MetadataStream.prototype = new stream();\n\n    var metadataStream = _MetadataStream;\n\n    var TimestampRolloverStream$1 = timestampRolloverStream.TimestampRolloverStream;\n\n    // object types\n    var _TransportPacketStream, _TransportParseStream, _ElementaryStream;\n\n    // constants\n    var MP2T_PACKET_LENGTH = 188,\n\n\n    // bytes\n    SYNC_BYTE = 0x47;\n\n    /**\n     * Splits an incoming stream of binary data into MPEG-2 Transport\n     * Stream packets.\n     */\n    _TransportPacketStream = function TransportPacketStream() {\n      var buffer = new Uint8Array(MP2T_PACKET_LENGTH),\n          bytesInBuffer = 0;\n\n      _TransportPacketStream.prototype.init.call(this);\n\n      // Deliver new bytes to the stream.\n\n      /**\n       * Split a stream of data into M2TS packets\n      **/\n      this.push = function (bytes) {\n        var startIndex = 0,\n            endIndex = MP2T_PACKET_LENGTH,\n            everything;\n\n        // If there are bytes remaining from the last segment, prepend them to the\n        // bytes that were pushed in\n        if (bytesInBuffer) {\n          everything = new Uint8Array(bytes.byteLength + bytesInBuffer);\n          everything.set(buffer.subarray(0, bytesInBuffer));\n          everything.set(bytes, bytesInBuffer);\n          bytesInBuffer = 0;\n        } else {\n          everything = bytes;\n        }\n\n        // While we have enough data for a packet\n        while (endIndex < everything.byteLength) {\n          // Look for a pair of start and end sync bytes in the data..\n          if (everything[startIndex] === SYNC_BYTE && everything[endIndex] === SYNC_BYTE) {\n            // We found a packet so emit it and jump one whole packet forward in\n            // the stream\n            this.trigger('data', everything.subarray(startIndex, endIndex));\n            startIndex += MP2T_PACKET_LENGTH;\n            endIndex += MP2T_PACKET_LENGTH;\n            continue;\n          }\n          // If we get here, we have somehow become de-synchronized and we need to step\n          // forward one byte at a time until we find a pair of sync bytes that denote\n          // a packet\n          startIndex++;\n          endIndex++;\n        }\n\n        // If there was some data left over at the end of the segment that couldn't\n        // possibly be a whole packet, keep it because it might be the start of a packet\n        // that continues in the next segment\n        if (startIndex < everything.byteLength) {\n          buffer.set(everything.subarray(startIndex), 0);\n          bytesInBuffer = everything.byteLength - startIndex;\n        }\n      };\n\n      /**\n       * Passes identified M2TS packets to the TransportParseStream to be parsed\n      **/\n      this.flush = function () {\n        // If the buffer contains a whole packet when we are being flushed, emit it\n        // and empty the buffer. Otherwise hold onto the data because it may be\n        // important for decoding the next segment\n        if (bytesInBuffer === MP2T_PACKET_LENGTH && buffer[0] === SYNC_BYTE) {\n          this.trigger('data', buffer);\n          bytesInBuffer = 0;\n        }\n        this.trigger('done');\n      };\n    };\n    _TransportPacketStream.prototype = new stream();\n\n    /**\n     * Accepts an MP2T TransportPacketStream and emits data events with parsed\n     * forms of the individual transport stream packets.\n     */\n    _TransportParseStream = function TransportParseStream() {\n      var parsePsi, parsePat, parsePmt, self;\n      _TransportParseStream.prototype.init.call(this);\n      self = this;\n\n      this.packetsWaitingForPmt = [];\n      this.programMapTable = undefined;\n\n      parsePsi = function parsePsi(payload, psi) {\n        var offset = 0;\n\n        // PSI packets may be split into multiple sections and those\n        // sections may be split into multiple packets. If a PSI\n        // section starts in this packet, the payload_unit_start_indicator\n        // will be true and the first byte of the payload will indicate\n        // the offset from the current position to the start of the\n        // section.\n        if (psi.payloadUnitStartIndicator) {\n          offset += payload[offset] + 1;\n        }\n\n        if (psi.type === 'pat') {\n          parsePat(payload.subarray(offset), psi);\n        } else {\n          parsePmt(payload.subarray(offset), psi);\n        }\n      };\n\n      parsePat = function parsePat(payload, pat) {\n        pat.section_number = payload[7]; // eslint-disable-line camelcase\n        pat.last_section_number = payload[8]; // eslint-disable-line camelcase\n\n        // skip the PSI header and parse the first PMT entry\n        self.pmtPid = (payload[10] & 0x1F) << 8 | payload[11];\n        pat.pmtPid = self.pmtPid;\n      };\n\n      /**\n       * Parse out the relevant fields of a Program Map Table (PMT).\n       * @param payload {Uint8Array} the PMT-specific portion of an MP2T\n       * packet. The first byte in this array should be the table_id\n       * field.\n       * @param pmt {object} the object that should be decorated with\n       * fields parsed from the PMT.\n       */\n      parsePmt = function parsePmt(payload, pmt) {\n        var sectionLength, tableEnd, programInfoLength, offset;\n\n        // PMTs can be sent ahead of the time when they should actually\n        // take effect. We don't believe this should ever be the case\n        // for HLS but we'll ignore \"forward\" PMT declarations if we see\n        // them. Future PMT declarations have the current_next_indicator\n        // set to zero.\n        if (!(payload[5] & 0x01)) {\n          return;\n        }\n\n        // overwrite any existing program map table\n        self.programMapTable = {\n          video: null,\n          audio: null,\n          'timed-metadata': {}\n        };\n\n        // the mapping table ends at the end of the current section\n        sectionLength = (payload[1] & 0x0f) << 8 | payload[2];\n        tableEnd = 3 + sectionLength - 4;\n\n        // to determine where the table is, we have to figure out how\n        // long the program info descriptors are\n        programInfoLength = (payload[10] & 0x0f) << 8 | payload[11];\n\n        // advance the offset to the first entry in the mapping table\n        offset = 12 + programInfoLength;\n        while (offset < tableEnd) {\n          var streamType = payload[offset];\n          var pid = (payload[offset + 1] & 0x1F) << 8 | payload[offset + 2];\n\n          // only map a single elementary_pid for audio and video stream types\n          // TODO: should this be done for metadata too? for now maintain behavior of\n          //       multiple metadata streams\n          if (streamType === streamTypes.H264_STREAM_TYPE && self.programMapTable.video === null) {\n            self.programMapTable.video = pid;\n          } else if (streamType === streamTypes.ADTS_STREAM_TYPE && self.programMapTable.audio === null) {\n            self.programMapTable.audio = pid;\n          } else if (streamType === streamTypes.METADATA_STREAM_TYPE) {\n            // map pid to stream type for metadata streams\n            self.programMapTable['timed-metadata'][pid] = streamType;\n          }\n\n          // move to the next table entry\n          // skip past the elementary stream descriptors, if present\n          offset += ((payload[offset + 3] & 0x0F) << 8 | payload[offset + 4]) + 5;\n        }\n\n        // record the map on the packet as well\n        pmt.programMapTable = self.programMapTable;\n      };\n\n      /**\n       * Deliver a new MP2T packet to the next stream in the pipeline.\n       */\n      this.push = function (packet) {\n        var result = {},\n            offset = 4;\n\n        result.payloadUnitStartIndicator = !!(packet[1] & 0x40);\n\n        // pid is a 13-bit field starting at the last bit of packet[1]\n        result.pid = packet[1] & 0x1f;\n        result.pid <<= 8;\n        result.pid |= packet[2];\n\n        // if an adaption field is present, its length is specified by the\n        // fifth byte of the TS packet header. The adaptation field is\n        // used to add stuffing to PES packets that don't fill a complete\n        // TS packet, and to specify some forms of timing and control data\n        // that we do not currently use.\n        if ((packet[3] & 0x30) >>> 4 > 0x01) {\n          offset += packet[offset] + 1;\n        }\n\n        // parse the rest of the packet based on the type\n        if (result.pid === 0) {\n          result.type = 'pat';\n          parsePsi(packet.subarray(offset), result);\n          this.trigger('data', result);\n        } else if (result.pid === this.pmtPid) {\n          result.type = 'pmt';\n          parsePsi(packet.subarray(offset), result);\n          this.trigger('data', result);\n\n          // if there are any packets waiting for a PMT to be found, process them now\n          while (this.packetsWaitingForPmt.length) {\n            this.processPes_.apply(this, this.packetsWaitingForPmt.shift());\n          }\n        } else if (this.programMapTable === undefined) {\n          // When we have not seen a PMT yet, defer further processing of\n          // PES packets until one has been parsed\n          this.packetsWaitingForPmt.push([packet, offset, result]);\n        } else {\n          this.processPes_(packet, offset, result);\n        }\n      };\n\n      this.processPes_ = function (packet, offset, result) {\n        // set the appropriate stream type\n        if (result.pid === this.programMapTable.video) {\n          result.streamType = streamTypes.H264_STREAM_TYPE;\n        } else if (result.pid === this.programMapTable.audio) {\n          result.streamType = streamTypes.ADTS_STREAM_TYPE;\n        } else {\n          // if not video or audio, it is timed-metadata or unknown\n          // if unknown, streamType will be undefined\n          result.streamType = this.programMapTable['timed-metadata'][result.pid];\n        }\n\n        result.type = 'pes';\n        result.data = packet.subarray(offset);\n\n        this.trigger('data', result);\n      };\n    };\n    _TransportParseStream.prototype = new stream();\n    _TransportParseStream.STREAM_TYPES = {\n      h264: 0x1b,\n      adts: 0x0f\n    };\n\n    /**\n     * Reconsistutes program elementary stream (PES) packets from parsed\n     * transport stream packets. That is, if you pipe an\n     * mp2t.TransportParseStream into a mp2t.ElementaryStream, the output\n     * events will be events which capture the bytes for individual PES\n     * packets plus relevant metadata that has been extracted from the\n     * container.\n     */\n    _ElementaryStream = function ElementaryStream() {\n      var self = this,\n\n\n      // PES packet fragments\n      video = {\n        data: [],\n        size: 0\n      },\n          audio = {\n        data: [],\n        size: 0\n      },\n          timedMetadata = {\n        data: [],\n        size: 0\n      },\n          parsePes = function parsePes(payload, pes) {\n        var ptsDtsFlags;\n\n        // get the packet length, this will be 0 for video\n        pes.packetLength = 6 + (payload[4] << 8 | payload[5]);\n\n        // find out if this packets starts a new keyframe\n        pes.dataAlignmentIndicator = (payload[6] & 0x04) !== 0;\n        // PES packets may be annotated with a PTS value, or a PTS value\n        // and a DTS value. Determine what combination of values is\n        // available to work with.\n        ptsDtsFlags = payload[7];\n\n        // PTS and DTS are normally stored as a 33-bit number.  Javascript\n        // performs all bitwise operations on 32-bit integers but javascript\n        // supports a much greater range (52-bits) of integer using standard\n        // mathematical operations.\n        // We construct a 31-bit value using bitwise operators over the 31\n        // most significant bits and then multiply by 4 (equal to a left-shift\n        // of 2) before we add the final 2 least significant bits of the\n        // timestamp (equal to an OR.)\n        if (ptsDtsFlags & 0xC0) {\n          // the PTS and DTS are not written out directly. For information\n          // on how they are encoded, see\n          // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n          pes.pts = (payload[9] & 0x0E) << 27 | (payload[10] & 0xFF) << 20 | (payload[11] & 0xFE) << 12 | (payload[12] & 0xFF) << 5 | (payload[13] & 0xFE) >>> 3;\n          pes.pts *= 4; // Left shift by 2\n          pes.pts += (payload[13] & 0x06) >>> 1; // OR by the two LSBs\n          pes.dts = pes.pts;\n          if (ptsDtsFlags & 0x40) {\n            pes.dts = (payload[14] & 0x0E) << 27 | (payload[15] & 0xFF) << 20 | (payload[16] & 0xFE) << 12 | (payload[17] & 0xFF) << 5 | (payload[18] & 0xFE) >>> 3;\n            pes.dts *= 4; // Left shift by 2\n            pes.dts += (payload[18] & 0x06) >>> 1; // OR by the two LSBs\n          }\n        }\n        // the data section starts immediately after the PES header.\n        // pes_header_data_length specifies the number of header bytes\n        // that follow the last byte of the field.\n        pes.data = payload.subarray(9 + payload[8]);\n      },\n\n\n      /**\n        * Pass completely parsed PES packets to the next stream in the pipeline\n       **/\n      flushStream = function flushStream(stream$$1, type, forceFlush) {\n        var packetData = new Uint8Array(stream$$1.size),\n            event = {\n          type: type\n        },\n            i = 0,\n            offset = 0,\n            packetFlushable = false,\n            fragment;\n\n        // do nothing if there is not enough buffered data for a complete\n        // PES header\n        if (!stream$$1.data.length || stream$$1.size < 9) {\n          return;\n        }\n        event.trackId = stream$$1.data[0].pid;\n\n        // reassemble the packet\n        for (i = 0; i < stream$$1.data.length; i++) {\n          fragment = stream$$1.data[i];\n\n          packetData.set(fragment.data, offset);\n          offset += fragment.data.byteLength;\n        }\n\n        // parse assembled packet's PES header\n        parsePes(packetData, event);\n\n        // non-video PES packets MUST have a non-zero PES_packet_length\n        // check that there is enough stream data to fill the packet\n        packetFlushable = type === 'video' || event.packetLength <= stream$$1.size;\n\n        // flush pending packets if the conditions are right\n        if (forceFlush || packetFlushable) {\n          stream$$1.size = 0;\n          stream$$1.data.length = 0;\n        }\n\n        // only emit packets that are complete. this is to avoid assembling\n        // incomplete PES packets due to poor segmentation\n        if (packetFlushable) {\n          self.trigger('data', event);\n        }\n      };\n\n      _ElementaryStream.prototype.init.call(this);\n\n      /**\n       * Identifies M2TS packet types and parses PES packets using metadata\n       * parsed from the PMT\n       **/\n      this.push = function (data) {\n        ({\n          pat: function pat() {\n            // we have to wait for the PMT to arrive as well before we\n            // have any meaningful metadata\n          },\n          pes: function pes() {\n            var stream$$1, streamType;\n\n            switch (data.streamType) {\n              case streamTypes.H264_STREAM_TYPE:\n              case streamTypes.H264_STREAM_TYPE:\n                stream$$1 = video;\n                streamType = 'video';\n                break;\n              case streamTypes.ADTS_STREAM_TYPE:\n                stream$$1 = audio;\n                streamType = 'audio';\n                break;\n              case streamTypes.METADATA_STREAM_TYPE:\n                stream$$1 = timedMetadata;\n                streamType = 'timed-metadata';\n                break;\n              default:\n                // ignore unknown stream types\n                return;\n            }\n\n            // if a new packet is starting, we can flush the completed\n            // packet\n            if (data.payloadUnitStartIndicator) {\n              flushStream(stream$$1, streamType, true);\n            }\n\n            // buffer this fragment until we are sure we've received the\n            // complete payload\n            stream$$1.data.push(data);\n            stream$$1.size += data.data.byteLength;\n          },\n          pmt: function pmt() {\n            var event = {\n              type: 'metadata',\n              tracks: []\n            },\n                programMapTable = data.programMapTable;\n\n            // translate audio and video streams to tracks\n            if (programMapTable.video !== null) {\n              event.tracks.push({\n                timelineStartInfo: {\n                  baseMediaDecodeTime: 0\n                },\n                id: +programMapTable.video,\n                codec: 'avc',\n                type: 'video'\n              });\n            }\n            if (programMapTable.audio !== null) {\n              event.tracks.push({\n                timelineStartInfo: {\n                  baseMediaDecodeTime: 0\n                },\n                id: +programMapTable.audio,\n                codec: 'adts',\n                type: 'audio'\n              });\n            }\n\n            self.trigger('data', event);\n          }\n        })[data.type]();\n      };\n\n      /**\n       * Flush any remaining input. Video PES packets may be of variable\n       * length. Normally, the start of a new video packet can trigger the\n       * finalization of the previous packet. That is not possible if no\n       * more video is forthcoming, however. In that case, some other\n       * mechanism (like the end of the file) has to be employed. When it is\n       * clear that no additional data is forthcoming, calling this method\n       * will flush the buffered packets.\n       */\n      this.flush = function () {\n        // !!THIS ORDER IS IMPORTANT!!\n        // video first then audio\n        flushStream(video, 'video');\n        flushStream(audio, 'audio');\n        flushStream(timedMetadata, 'timed-metadata');\n        this.trigger('done');\n      };\n    };\n    _ElementaryStream.prototype = new stream();\n\n    var m2ts = {\n      PAT_PID: 0x0000,\n      MP2T_PACKET_LENGTH: MP2T_PACKET_LENGTH,\n      TransportPacketStream: _TransportPacketStream,\n      TransportParseStream: _TransportParseStream,\n      ElementaryStream: _ElementaryStream,\n      TimestampRolloverStream: TimestampRolloverStream$1,\n      CaptionStream: captionStream.CaptionStream,\n      Cea608Stream: captionStream.Cea608Stream,\n      MetadataStream: metadataStream\n    };\n\n    for (var type in streamTypes) {\n      if (streamTypes.hasOwnProperty(type)) {\n        m2ts[type] = streamTypes[type];\n      }\n    }\n\n    var m2ts_1 = m2ts;\n\n    var _AdtsStream;\n\n    var ADTS_SAMPLING_FREQUENCIES = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350];\n\n    /*\n     * Accepts a ElementaryStream and emits data events with parsed\n     * AAC Audio Frames of the individual packets. Input audio in ADTS\n     * format is unpacked and re-emitted as AAC frames.\n     *\n     * @see http://wiki.multimedia.cx/index.php?title=ADTS\n     * @see http://wiki.multimedia.cx/?title=Understanding_AAC\n     */\n    _AdtsStream = function AdtsStream() {\n      var buffer;\n\n      _AdtsStream.prototype.init.call(this);\n\n      this.push = function (packet) {\n        var i = 0,\n            frameNum = 0,\n            frameLength,\n            protectionSkipBytes,\n            frameEnd,\n            oldBuffer,\n            sampleCount,\n            adtsFrameDuration;\n\n        if (packet.type !== 'audio') {\n          // ignore non-audio data\n          return;\n        }\n\n        // Prepend any data in the buffer to the input data so that we can parse\n        // aac frames the cross a PES packet boundary\n        if (buffer) {\n          oldBuffer = buffer;\n          buffer = new Uint8Array(oldBuffer.byteLength + packet.data.byteLength);\n          buffer.set(oldBuffer);\n          buffer.set(packet.data, oldBuffer.byteLength);\n        } else {\n          buffer = packet.data;\n        }\n\n        // unpack any ADTS frames which have been fully received\n        // for details on the ADTS header, see http://wiki.multimedia.cx/index.php?title=ADTS\n        while (i + 5 < buffer.length) {\n\n          // Loook for the start of an ADTS header..\n          if (buffer[i] !== 0xFF || (buffer[i + 1] & 0xF6) !== 0xF0) {\n            // If a valid header was not found,  jump one forward and attempt to\n            // find a valid ADTS header starting at the next byte\n            i++;\n            continue;\n          }\n\n          // The protection skip bit tells us if we have 2 bytes of CRC data at the\n          // end of the ADTS header\n          protectionSkipBytes = (~buffer[i + 1] & 0x01) * 2;\n\n          // Frame length is a 13 bit integer starting 16 bits from the\n          // end of the sync sequence\n          frameLength = (buffer[i + 3] & 0x03) << 11 | buffer[i + 4] << 3 | (buffer[i + 5] & 0xe0) >> 5;\n\n          sampleCount = ((buffer[i + 6] & 0x03) + 1) * 1024;\n          adtsFrameDuration = sampleCount * 90000 / ADTS_SAMPLING_FREQUENCIES[(buffer[i + 2] & 0x3c) >>> 2];\n\n          frameEnd = i + frameLength;\n\n          // If we don't have enough data to actually finish this ADTS frame, return\n          // and wait for more data\n          if (buffer.byteLength < frameEnd) {\n            return;\n          }\n\n          // Otherwise, deliver the complete AAC frame\n          this.trigger('data', {\n            pts: packet.pts + frameNum * adtsFrameDuration,\n            dts: packet.dts + frameNum * adtsFrameDuration,\n            sampleCount: sampleCount,\n            audioobjecttype: (buffer[i + 2] >>> 6 & 0x03) + 1,\n            channelcount: (buffer[i + 2] & 1) << 2 | (buffer[i + 3] & 0xc0) >>> 6,\n            samplerate: ADTS_SAMPLING_FREQUENCIES[(buffer[i + 2] & 0x3c) >>> 2],\n            samplingfrequencyindex: (buffer[i + 2] & 0x3c) >>> 2,\n            // assume ISO/IEC 14496-12 AudioSampleEntry default of 16\n            samplesize: 16,\n            data: buffer.subarray(i + 7 + protectionSkipBytes, frameEnd)\n          });\n\n          // If the buffer is empty, clear it and return\n          if (buffer.byteLength === frameEnd) {\n            buffer = undefined;\n            return;\n          }\n\n          frameNum++;\n\n          // Remove the finished frame from the buffer and start the process again\n          buffer = buffer.subarray(frameEnd);\n        }\n      };\n      this.flush = function () {\n        this.trigger('done');\n      };\n    };\n\n    _AdtsStream.prototype = new stream();\n\n    var adts = _AdtsStream;\n\n    var ExpGolomb;\n\n    /**\n     * Parser for exponential Golomb codes, a variable-bitwidth number encoding\n     * scheme used by h264.\n     */\n    ExpGolomb = function ExpGolomb(workingData) {\n      var\n      // the number of bytes left to examine in workingData\n      workingBytesAvailable = workingData.byteLength,\n\n\n      // the current word being examined\n      workingWord = 0,\n\n\n      // :uint\n\n      // the number of bits left to examine in the current word\n      workingBitsAvailable = 0; // :uint;\n\n      // ():uint\n      this.length = function () {\n        return 8 * workingBytesAvailable;\n      };\n\n      // ():uint\n      this.bitsAvailable = function () {\n        return 8 * workingBytesAvailable + workingBitsAvailable;\n      };\n\n      // ():void\n      this.loadWord = function () {\n        var position = workingData.byteLength - workingBytesAvailable,\n            workingBytes = new Uint8Array(4),\n            availableBytes = Math.min(4, workingBytesAvailable);\n\n        if (availableBytes === 0) {\n          throw new Error('no bytes available');\n        }\n\n        workingBytes.set(workingData.subarray(position, position + availableBytes));\n        workingWord = new DataView(workingBytes.buffer).getUint32(0);\n\n        // track the amount of workingData that has been processed\n        workingBitsAvailable = availableBytes * 8;\n        workingBytesAvailable -= availableBytes;\n      };\n\n      // (count:int):void\n      this.skipBits = function (count) {\n        var skipBytes; // :int\n        if (workingBitsAvailable > count) {\n          workingWord <<= count;\n          workingBitsAvailable -= count;\n        } else {\n          count -= workingBitsAvailable;\n          skipBytes = Math.floor(count / 8);\n\n          count -= skipBytes * 8;\n          workingBytesAvailable -= skipBytes;\n\n          this.loadWord();\n\n          workingWord <<= count;\n          workingBitsAvailable -= count;\n        }\n      };\n\n      // (size:int):uint\n      this.readBits = function (size) {\n        var bits = Math.min(workingBitsAvailable, size),\n\n\n        // :uint\n        valu = workingWord >>> 32 - bits; // :uint\n        // if size > 31, handle error\n        workingBitsAvailable -= bits;\n        if (workingBitsAvailable > 0) {\n          workingWord <<= bits;\n        } else if (workingBytesAvailable > 0) {\n          this.loadWord();\n        }\n\n        bits = size - bits;\n        if (bits > 0) {\n          return valu << bits | this.readBits(bits);\n        }\n        return valu;\n      };\n\n      // ():uint\n      this.skipLeadingZeros = function () {\n        var leadingZeroCount; // :uint\n        for (leadingZeroCount = 0; leadingZeroCount < workingBitsAvailable; ++leadingZeroCount) {\n          if ((workingWord & 0x80000000 >>> leadingZeroCount) !== 0) {\n            // the first bit of working word is 1\n            workingWord <<= leadingZeroCount;\n            workingBitsAvailable -= leadingZeroCount;\n            return leadingZeroCount;\n          }\n        }\n\n        // we exhausted workingWord and still have not found a 1\n        this.loadWord();\n        return leadingZeroCount + this.skipLeadingZeros();\n      };\n\n      // ():void\n      this.skipUnsignedExpGolomb = function () {\n        this.skipBits(1 + this.skipLeadingZeros());\n      };\n\n      // ():void\n      this.skipExpGolomb = function () {\n        this.skipBits(1 + this.skipLeadingZeros());\n      };\n\n      // ():uint\n      this.readUnsignedExpGolomb = function () {\n        var clz = this.skipLeadingZeros(); // :uint\n        return this.readBits(clz + 1) - 1;\n      };\n\n      // ():int\n      this.readExpGolomb = function () {\n        var valu = this.readUnsignedExpGolomb(); // :int\n        if (0x01 & valu) {\n          // the number is odd if the low order bit is set\n          return 1 + valu >>> 1; // add 1 to make it even, and divide by 2\n        }\n        return -1 * (valu >>> 1); // divide by two then make it negative\n      };\n\n      // Some convenience functions\n      // :Boolean\n      this.readBoolean = function () {\n        return this.readBits(1) === 1;\n      };\n\n      // ():int\n      this.readUnsignedByte = function () {\n        return this.readBits(8);\n      };\n\n      this.loadWord();\n    };\n\n    var expGolomb = ExpGolomb;\n\n    var _H264Stream, _NalByteStream;\n    var PROFILES_WITH_OPTIONAL_SPS_DATA;\n\n    /**\n     * Accepts a NAL unit byte stream and unpacks the embedded NAL units.\n     */\n    _NalByteStream = function NalByteStream() {\n      var syncPoint = 0,\n          i,\n          buffer;\n      _NalByteStream.prototype.init.call(this);\n\n      /*\n       * Scans a byte stream and triggers a data event with the NAL units found.\n       * @param {Object} data Event received from H264Stream\n       * @param {Uint8Array} data.data The h264 byte stream to be scanned\n       *\n       * @see H264Stream.push\n       */\n      this.push = function (data) {\n        var swapBuffer;\n\n        if (!buffer) {\n          buffer = data.data;\n        } else {\n          swapBuffer = new Uint8Array(buffer.byteLength + data.data.byteLength);\n          swapBuffer.set(buffer);\n          swapBuffer.set(data.data, buffer.byteLength);\n          buffer = swapBuffer;\n        }\n\n        // Rec. ITU-T H.264, Annex B\n        // scan for NAL unit boundaries\n\n        // a match looks like this:\n        // 0 0 1 .. NAL .. 0 0 1\n        // ^ sync point        ^ i\n        // or this:\n        // 0 0 1 .. NAL .. 0 0 0\n        // ^ sync point        ^ i\n\n        // advance the sync point to a NAL start, if necessary\n        for (; syncPoint < buffer.byteLength - 3; syncPoint++) {\n          if (buffer[syncPoint + 2] === 1) {\n            // the sync point is properly aligned\n            i = syncPoint + 5;\n            break;\n          }\n        }\n\n        while (i < buffer.byteLength) {\n          // look at the current byte to determine if we've hit the end of\n          // a NAL unit boundary\n          switch (buffer[i]) {\n            case 0:\n              // skip past non-sync sequences\n              if (buffer[i - 1] !== 0) {\n                i += 2;\n                break;\n              } else if (buffer[i - 2] !== 0) {\n                i++;\n                break;\n              }\n\n              // deliver the NAL unit if it isn't empty\n              if (syncPoint + 3 !== i - 2) {\n                this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));\n              }\n\n              // drop trailing zeroes\n              do {\n                i++;\n              } while (buffer[i] !== 1 && i < buffer.length);\n              syncPoint = i - 2;\n              i += 3;\n              break;\n            case 1:\n              // skip past non-sync sequences\n              if (buffer[i - 1] !== 0 || buffer[i - 2] !== 0) {\n                i += 3;\n                break;\n              }\n\n              // deliver the NAL unit\n              this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));\n              syncPoint = i - 2;\n              i += 3;\n              break;\n            default:\n              // the current byte isn't a one or zero, so it cannot be part\n              // of a sync sequence\n              i += 3;\n              break;\n          }\n        }\n        // filter out the NAL units that were delivered\n        buffer = buffer.subarray(syncPoint);\n        i -= syncPoint;\n        syncPoint = 0;\n      };\n\n      this.flush = function () {\n        // deliver the last buffered NAL unit\n        if (buffer && buffer.byteLength > 3) {\n          this.trigger('data', buffer.subarray(syncPoint + 3));\n        }\n        // reset the stream state\n        buffer = null;\n        syncPoint = 0;\n        this.trigger('done');\n      };\n    };\n    _NalByteStream.prototype = new stream();\n\n    // values of profile_idc that indicate additional fields are included in the SPS\n    // see Recommendation ITU-T H.264 (4/2013),\n    // 7.3.2.1.1 Sequence parameter set data syntax\n    PROFILES_WITH_OPTIONAL_SPS_DATA = {\n      100: true,\n      110: true,\n      122: true,\n      244: true,\n      44: true,\n      83: true,\n      86: true,\n      118: true,\n      128: true,\n      138: true,\n      139: true,\n      134: true\n    };\n\n    /**\n     * Accepts input from a ElementaryStream and produces H.264 NAL unit data\n     * events.\n     */\n    _H264Stream = function H264Stream() {\n      var nalByteStream = new _NalByteStream(),\n          self,\n          trackId,\n          currentPts,\n          currentDts,\n          discardEmulationPreventionBytes,\n          readSequenceParameterSet,\n          skipScalingList;\n\n      _H264Stream.prototype.init.call(this);\n      self = this;\n\n      /*\n       * Pushes a packet from a stream onto the NalByteStream\n       *\n       * @param {Object} packet - A packet received from a stream\n       * @param {Uint8Array} packet.data - The raw bytes of the packet\n       * @param {Number} packet.dts - Decode timestamp of the packet\n       * @param {Number} packet.pts - Presentation timestamp of the packet\n       * @param {Number} packet.trackId - The id of the h264 track this packet came from\n       * @param {('video'|'audio')} packet.type - The type of packet\n       *\n       */\n      this.push = function (packet) {\n        if (packet.type !== 'video') {\n          return;\n        }\n        trackId = packet.trackId;\n        currentPts = packet.pts;\n        currentDts = packet.dts;\n\n        nalByteStream.push(packet);\n      };\n\n      /*\n       * Identify NAL unit types and pass on the NALU, trackId, presentation and decode timestamps\n       * for the NALUs to the next stream component.\n       * Also, preprocess caption and sequence parameter NALUs.\n       *\n       * @param {Uint8Array} data - A NAL unit identified by `NalByteStream.push`\n       * @see NalByteStream.push\n       */\n      nalByteStream.on('data', function (data) {\n        var event = {\n          trackId: trackId,\n          pts: currentPts,\n          dts: currentDts,\n          data: data\n        };\n\n        switch (data[0] & 0x1f) {\n          case 0x05:\n            event.nalUnitType = 'slice_layer_without_partitioning_rbsp_idr';\n            break;\n          case 0x06:\n            event.nalUnitType = 'sei_rbsp';\n            event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));\n            break;\n          case 0x07:\n            event.nalUnitType = 'seq_parameter_set_rbsp';\n            event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));\n            event.config = readSequenceParameterSet(event.escapedRBSP);\n            break;\n          case 0x08:\n            event.nalUnitType = 'pic_parameter_set_rbsp';\n            break;\n          case 0x09:\n            event.nalUnitType = 'access_unit_delimiter_rbsp';\n            break;\n\n          default:\n            break;\n        }\n        // This triggers data on the H264Stream\n        self.trigger('data', event);\n      });\n      nalByteStream.on('done', function () {\n        self.trigger('done');\n      });\n\n      this.flush = function () {\n        nalByteStream.flush();\n      };\n\n      /**\n       * Advance the ExpGolomb decoder past a scaling list. The scaling\n       * list is optionally transmitted as part of a sequence parameter\n       * set and is not relevant to transmuxing.\n       * @param count {number} the number of entries in this scaling list\n       * @param expGolombDecoder {object} an ExpGolomb pointed to the\n       * start of a scaling list\n       * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1\n       */\n      skipScalingList = function skipScalingList(count, expGolombDecoder) {\n        var lastScale = 8,\n            nextScale = 8,\n            j,\n            deltaScale;\n\n        for (j = 0; j < count; j++) {\n          if (nextScale !== 0) {\n            deltaScale = expGolombDecoder.readExpGolomb();\n            nextScale = (lastScale + deltaScale + 256) % 256;\n          }\n\n          lastScale = nextScale === 0 ? lastScale : nextScale;\n        }\n      };\n\n      /**\n       * Expunge any \"Emulation Prevention\" bytes from a \"Raw Byte\n       * Sequence Payload\"\n       * @param data {Uint8Array} the bytes of a RBSP from a NAL\n       * unit\n       * @return {Uint8Array} the RBSP without any Emulation\n       * Prevention Bytes\n       */\n      discardEmulationPreventionBytes = function discardEmulationPreventionBytes(data) {\n        var length = data.byteLength,\n            emulationPreventionBytesPositions = [],\n            i = 1,\n            newLength,\n            newData;\n\n        // Find all `Emulation Prevention Bytes`\n        while (i < length - 2) {\n          if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {\n            emulationPreventionBytesPositions.push(i + 2);\n            i += 2;\n          } else {\n            i++;\n          }\n        }\n\n        // If no Emulation Prevention Bytes were found just return the original\n        // array\n        if (emulationPreventionBytesPositions.length === 0) {\n          return data;\n        }\n\n        // Create a new array to hold the NAL unit data\n        newLength = length - emulationPreventionBytesPositions.length;\n        newData = new Uint8Array(newLength);\n        var sourceIndex = 0;\n\n        for (i = 0; i < newLength; sourceIndex++, i++) {\n          if (sourceIndex === emulationPreventionBytesPositions[0]) {\n            // Skip this byte\n            sourceIndex++;\n            // Remove this position index\n            emulationPreventionBytesPositions.shift();\n          }\n          newData[i] = data[sourceIndex];\n        }\n\n        return newData;\n      };\n\n      /**\n       * Read a sequence parameter set and return some interesting video\n       * properties. A sequence parameter set is the H264 metadata that\n       * describes the properties of upcoming video frames.\n       * @param data {Uint8Array} the bytes of a sequence parameter set\n       * @return {object} an object with configuration parsed from the\n       * sequence parameter set, including the dimensions of the\n       * associated video frames.\n       */\n      readSequenceParameterSet = function readSequenceParameterSet(data) {\n        var frameCropLeftOffset = 0,\n            frameCropRightOffset = 0,\n            frameCropTopOffset = 0,\n            frameCropBottomOffset = 0,\n            sarScale = 1,\n            expGolombDecoder,\n            profileIdc,\n            levelIdc,\n            profileCompatibility,\n            chromaFormatIdc,\n            picOrderCntType,\n            numRefFramesInPicOrderCntCycle,\n            picWidthInMbsMinus1,\n            picHeightInMapUnitsMinus1,\n            frameMbsOnlyFlag,\n            scalingListCount,\n            sarRatio,\n            aspectRatioIdc,\n            i;\n\n        expGolombDecoder = new expGolomb(data);\n        profileIdc = expGolombDecoder.readUnsignedByte(); // profile_idc\n        profileCompatibility = expGolombDecoder.readUnsignedByte(); // constraint_set[0-5]_flag\n        levelIdc = expGolombDecoder.readUnsignedByte(); // level_idc u(8)\n        expGolombDecoder.skipUnsignedExpGolomb(); // seq_parameter_set_id\n\n        // some profiles have more optional data we don't need\n        if (PROFILES_WITH_OPTIONAL_SPS_DATA[profileIdc]) {\n          chromaFormatIdc = expGolombDecoder.readUnsignedExpGolomb();\n          if (chromaFormatIdc === 3) {\n            expGolombDecoder.skipBits(1); // separate_colour_plane_flag\n          }\n          expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_luma_minus8\n          expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_chroma_minus8\n          expGolombDecoder.skipBits(1); // qpprime_y_zero_transform_bypass_flag\n          if (expGolombDecoder.readBoolean()) {\n            // seq_scaling_matrix_present_flag\n            scalingListCount = chromaFormatIdc !== 3 ? 8 : 12;\n            for (i = 0; i < scalingListCount; i++) {\n              if (expGolombDecoder.readBoolean()) {\n                // seq_scaling_list_present_flag[ i ]\n                if (i < 6) {\n                  skipScalingList(16, expGolombDecoder);\n                } else {\n                  skipScalingList(64, expGolombDecoder);\n                }\n              }\n            }\n          }\n        }\n\n        expGolombDecoder.skipUnsignedExpGolomb(); // log2_max_frame_num_minus4\n        picOrderCntType = expGolombDecoder.readUnsignedExpGolomb();\n\n        if (picOrderCntType === 0) {\n          expGolombDecoder.readUnsignedExpGolomb(); // log2_max_pic_order_cnt_lsb_minus4\n        } else if (picOrderCntType === 1) {\n          expGolombDecoder.skipBits(1); // delta_pic_order_always_zero_flag\n          expGolombDecoder.skipExpGolomb(); // offset_for_non_ref_pic\n          expGolombDecoder.skipExpGolomb(); // offset_for_top_to_bottom_field\n          numRefFramesInPicOrderCntCycle = expGolombDecoder.readUnsignedExpGolomb();\n          for (i = 0; i < numRefFramesInPicOrderCntCycle; i++) {\n            expGolombDecoder.skipExpGolomb(); // offset_for_ref_frame[ i ]\n          }\n        }\n\n        expGolombDecoder.skipUnsignedExpGolomb(); // max_num_ref_frames\n        expGolombDecoder.skipBits(1); // gaps_in_frame_num_value_allowed_flag\n\n        picWidthInMbsMinus1 = expGolombDecoder.readUnsignedExpGolomb();\n        picHeightInMapUnitsMinus1 = expGolombDecoder.readUnsignedExpGolomb();\n\n        frameMbsOnlyFlag = expGolombDecoder.readBits(1);\n        if (frameMbsOnlyFlag === 0) {\n          expGolombDecoder.skipBits(1); // mb_adaptive_frame_field_flag\n        }\n\n        expGolombDecoder.skipBits(1); // direct_8x8_inference_flag\n        if (expGolombDecoder.readBoolean()) {\n          // frame_cropping_flag\n          frameCropLeftOffset = expGolombDecoder.readUnsignedExpGolomb();\n          frameCropRightOffset = expGolombDecoder.readUnsignedExpGolomb();\n          frameCropTopOffset = expGolombDecoder.readUnsignedExpGolomb();\n          frameCropBottomOffset = expGolombDecoder.readUnsignedExpGolomb();\n        }\n        if (expGolombDecoder.readBoolean()) {\n          // vui_parameters_present_flag\n          if (expGolombDecoder.readBoolean()) {\n            // aspect_ratio_info_present_flag\n            aspectRatioIdc = expGolombDecoder.readUnsignedByte();\n            switch (aspectRatioIdc) {\n              case 1:\n                sarRatio = [1, 1];break;\n              case 2:\n                sarRatio = [12, 11];break;\n              case 3:\n                sarRatio = [10, 11];break;\n              case 4:\n                sarRatio = [16, 11];break;\n              case 5:\n                sarRatio = [40, 33];break;\n              case 6:\n                sarRatio = [24, 11];break;\n              case 7:\n                sarRatio = [20, 11];break;\n              case 8:\n                sarRatio = [32, 11];break;\n              case 9:\n                sarRatio = [80, 33];break;\n              case 10:\n                sarRatio = [18, 11];break;\n              case 11:\n                sarRatio = [15, 11];break;\n              case 12:\n                sarRatio = [64, 33];break;\n              case 13:\n                sarRatio = [160, 99];break;\n              case 14:\n                sarRatio = [4, 3];break;\n              case 15:\n                sarRatio = [3, 2];break;\n              case 16:\n                sarRatio = [2, 1];break;\n              case 255:\n                {\n                  sarRatio = [expGolombDecoder.readUnsignedByte() << 8 | expGolombDecoder.readUnsignedByte(), expGolombDecoder.readUnsignedByte() << 8 | expGolombDecoder.readUnsignedByte()];\n                  break;\n                }\n            }\n            if (sarRatio) {\n              sarScale = sarRatio[0] / sarRatio[1];\n            }\n          }\n        }\n        return {\n          profileIdc: profileIdc,\n          levelIdc: levelIdc,\n          profileCompatibility: profileCompatibility,\n          width: Math.ceil(((picWidthInMbsMinus1 + 1) * 16 - frameCropLeftOffset * 2 - frameCropRightOffset * 2) * sarScale),\n          height: (2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16 - frameCropTopOffset * 2 - frameCropBottomOffset * 2\n        };\n      };\n    };\n    _H264Stream.prototype = new stream();\n\n    var h264 = {\n      H264Stream: _H264Stream,\n      NalByteStream: _NalByteStream\n    };\n\n    // Constants\n    var _AacStream;\n\n    /**\n     * Splits an incoming stream of binary data into ADTS and ID3 Frames.\n     */\n\n    _AacStream = function AacStream() {\n      var everything = new Uint8Array(),\n          timeStamp = 0;\n\n      _AacStream.prototype.init.call(this);\n\n      this.setTimestamp = function (timestamp) {\n        timeStamp = timestamp;\n      };\n\n      this.parseId3TagSize = function (header, byteIndex) {\n        var returnSize = header[byteIndex + 6] << 21 | header[byteIndex + 7] << 14 | header[byteIndex + 8] << 7 | header[byteIndex + 9],\n            flags = header[byteIndex + 5],\n            footerPresent = (flags & 16) >> 4;\n\n        if (footerPresent) {\n          return returnSize + 20;\n        }\n        return returnSize + 10;\n      };\n\n      this.parseAdtsSize = function (header, byteIndex) {\n        var lowThree = (header[byteIndex + 5] & 0xE0) >> 5,\n            middle = header[byteIndex + 4] << 3,\n            highTwo = header[byteIndex + 3] & 0x3 << 11;\n\n        return highTwo | middle | lowThree;\n      };\n\n      this.push = function (bytes) {\n        var frameSize = 0,\n            byteIndex = 0,\n            bytesLeft,\n            chunk,\n            packet,\n            tempLength;\n\n        // If there are bytes remaining from the last segment, prepend them to the\n        // bytes that were pushed in\n        if (everything.length) {\n          tempLength = everything.length;\n          everything = new Uint8Array(bytes.byteLength + tempLength);\n          everything.set(everything.subarray(0, tempLength));\n          everything.set(bytes, tempLength);\n        } else {\n          everything = bytes;\n        }\n\n        while (everything.length - byteIndex >= 3) {\n          if (everything[byteIndex] === 'I'.charCodeAt(0) && everything[byteIndex + 1] === 'D'.charCodeAt(0) && everything[byteIndex + 2] === '3'.charCodeAt(0)) {\n\n            // Exit early because we don't have enough to parse\n            // the ID3 tag header\n            if (everything.length - byteIndex < 10) {\n              break;\n            }\n\n            // check framesize\n            frameSize = this.parseId3TagSize(everything, byteIndex);\n\n            // Exit early if we don't have enough in the buffer\n            // to emit a full packet\n            if (frameSize > everything.length) {\n              break;\n            }\n            chunk = {\n              type: 'timed-metadata',\n              data: everything.subarray(byteIndex, byteIndex + frameSize)\n            };\n            this.trigger('data', chunk);\n            byteIndex += frameSize;\n            continue;\n          } else if (everything[byteIndex] & 0xff === 0xff && (everything[byteIndex + 1] & 0xf0) === 0xf0) {\n\n            // Exit early because we don't have enough to parse\n            // the ADTS frame header\n            if (everything.length - byteIndex < 7) {\n              break;\n            }\n\n            frameSize = this.parseAdtsSize(everything, byteIndex);\n\n            // Exit early if we don't have enough in the buffer\n            // to emit a full packet\n            if (frameSize > everything.length) {\n              break;\n            }\n\n            packet = {\n              type: 'audio',\n              data: everything.subarray(byteIndex, byteIndex + frameSize),\n              pts: timeStamp,\n              dts: timeStamp\n            };\n            this.trigger('data', packet);\n            byteIndex += frameSize;\n            continue;\n          }\n          byteIndex++;\n        }\n        bytesLeft = everything.length - byteIndex;\n\n        if (bytesLeft > 0) {\n          everything = everything.subarray(byteIndex);\n        } else {\n          everything = new Uint8Array();\n        }\n      };\n    };\n\n    _AacStream.prototype = new stream();\n\n    var aac = _AacStream;\n\n    var highPrefix = [33, 16, 5, 32, 164, 27];\n    var lowPrefix = [33, 65, 108, 84, 1, 2, 4, 8, 168, 2, 4, 8, 17, 191, 252];\n    var zeroFill = function zeroFill(count) {\n      var a = [];\n      while (count--) {\n        a.push(0);\n      }\n      return a;\n    };\n\n    var makeTable = function makeTable(metaTable) {\n      return Object.keys(metaTable).reduce(function (obj, key) {\n        obj[key] = new Uint8Array(metaTable[key].reduce(function (arr, part) {\n          return arr.concat(part);\n        }, []));\n        return obj;\n      }, {});\n    };\n\n    // Frames-of-silence to use for filling in missing AAC frames\n    var coneOfSilence = {\n      96000: [highPrefix, [227, 64], zeroFill(154), [56]],\n      88200: [highPrefix, [231], zeroFill(170), [56]],\n      64000: [highPrefix, [248, 192], zeroFill(240), [56]],\n      48000: [highPrefix, [255, 192], zeroFill(268), [55, 148, 128], zeroFill(54), [112]],\n      44100: [highPrefix, [255, 192], zeroFill(268), [55, 163, 128], zeroFill(84), [112]],\n      32000: [highPrefix, [255, 192], zeroFill(268), [55, 234], zeroFill(226), [112]],\n      24000: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 112], zeroFill(126), [224]],\n      16000: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 255], zeroFill(269), [223, 108], zeroFill(195), [1, 192]],\n      12000: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 253, 128], zeroFill(259), [56]],\n      11025: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 255, 192], zeroFill(268), [55, 175, 128], zeroFill(108), [112]],\n      8000: [lowPrefix, zeroFill(268), [3, 121, 16], zeroFill(47), [7]]\n    };\n\n    var silence = makeTable(coneOfSilence);\n\n    var ONE_SECOND_IN_TS$1 = 90000,\n\n\n    // 90kHz clock\n    secondsToVideoTs,\n        secondsToAudioTs,\n        videoTsToSeconds,\n        audioTsToSeconds,\n        audioTsToVideoTs,\n        videoTsToAudioTs;\n\n    secondsToVideoTs = function secondsToVideoTs(seconds) {\n      return seconds * ONE_SECOND_IN_TS$1;\n    };\n\n    secondsToAudioTs = function secondsToAudioTs(seconds, sampleRate) {\n      return seconds * sampleRate;\n    };\n\n    videoTsToSeconds = function videoTsToSeconds(timestamp) {\n      return timestamp / ONE_SECOND_IN_TS$1;\n    };\n\n    audioTsToSeconds = function audioTsToSeconds(timestamp, sampleRate) {\n      return timestamp / sampleRate;\n    };\n\n    audioTsToVideoTs = function audioTsToVideoTs(timestamp, sampleRate) {\n      return secondsToVideoTs(audioTsToSeconds(timestamp, sampleRate));\n    };\n\n    videoTsToAudioTs = function videoTsToAudioTs(timestamp, sampleRate) {\n      return secondsToAudioTs(videoTsToSeconds(timestamp), sampleRate);\n    };\n\n    var clock = {\n      secondsToVideoTs: secondsToVideoTs,\n      secondsToAudioTs: secondsToAudioTs,\n      videoTsToSeconds: videoTsToSeconds,\n      audioTsToSeconds: audioTsToSeconds,\n      audioTsToVideoTs: audioTsToVideoTs,\n      videoTsToAudioTs: videoTsToAudioTs\n    };\n\n    var H264Stream = h264.H264Stream;\n\n    // constants\n    var AUDIO_PROPERTIES = ['audioobjecttype', 'channelcount', 'samplerate', 'samplingfrequencyindex', 'samplesize'];\n\n    var VIDEO_PROPERTIES = ['width', 'height', 'profileIdc', 'levelIdc', 'profileCompatibility'];\n\n    var ONE_SECOND_IN_TS$2 = 90000; // 90kHz clock\n\n    // object types\n    var _VideoSegmentStream, _AudioSegmentStream, _Transmuxer, _CoalesceStream;\n\n    // Helper functions\n    var isLikelyAacData, arrayEquals, sumFrameByteLengths;\n\n    isLikelyAacData = function isLikelyAacData(data) {\n      if (data[0] === 'I'.charCodeAt(0) && data[1] === 'D'.charCodeAt(0) && data[2] === '3'.charCodeAt(0)) {\n        return true;\n      }\n      return false;\n    };\n\n    /**\n     * Compare two arrays (even typed) for same-ness\n     */\n    arrayEquals = function arrayEquals(a, b) {\n      var i;\n\n      if (a.length !== b.length) {\n        return false;\n      }\n\n      // compare the value of each element in the array\n      for (i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    /**\n     * Sum the `byteLength` properties of the data in each AAC frame\n     */\n    sumFrameByteLengths = function sumFrameByteLengths(array) {\n      var i,\n          currentObj,\n          sum = 0;\n\n      // sum the byteLength's all each nal unit in the frame\n      for (i = 0; i < array.length; i++) {\n        currentObj = array[i];\n        sum += currentObj.data.byteLength;\n      }\n\n      return sum;\n    };\n\n    /**\n     * Constructs a single-track, ISO BMFF media segment from AAC data\n     * events. The output of this stream can be fed to a SourceBuffer\n     * configured with a suitable initialization segment.\n     * @param track {object} track metadata configuration\n     * @param options {object} transmuxer options object\n     * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps\n     *        in the source; false to adjust the first segment to start at 0.\n     */\n    _AudioSegmentStream = function AudioSegmentStream(track, options) {\n      var adtsFrames = [],\n          sequenceNumber = 0,\n          earliestAllowedDts = 0,\n          audioAppendStartTs = 0,\n          videoBaseMediaDecodeTime = Infinity;\n\n      options = options || {};\n\n      _AudioSegmentStream.prototype.init.call(this);\n\n      this.push = function (data) {\n        trackDecodeInfo.collectDtsInfo(track, data);\n\n        if (track) {\n          AUDIO_PROPERTIES.forEach(function (prop) {\n            track[prop] = data[prop];\n          });\n        }\n\n        // buffer audio data until end() is called\n        adtsFrames.push(data);\n      };\n\n      this.setEarliestDts = function (earliestDts) {\n        earliestAllowedDts = earliestDts - track.timelineStartInfo.baseMediaDecodeTime;\n      };\n\n      this.setVideoBaseMediaDecodeTime = function (baseMediaDecodeTime) {\n        videoBaseMediaDecodeTime = baseMediaDecodeTime;\n      };\n\n      this.setAudioAppendStart = function (timestamp) {\n        audioAppendStartTs = timestamp;\n      };\n\n      this.flush = function () {\n        var frames, moof, mdat, boxes;\n\n        // return early if no audio data has been observed\n        if (adtsFrames.length === 0) {\n          this.trigger('done', 'AudioSegmentStream');\n          return;\n        }\n\n        frames = this.trimAdtsFramesByEarliestDts_(adtsFrames);\n        track.baseMediaDecodeTime = trackDecodeInfo.calculateTrackBaseMediaDecodeTime(track, options.keepOriginalTimestamps);\n\n        this.prefixWithSilence_(track, frames);\n\n        // we have to build the index from byte locations to\n        // samples (that is, adts frames) in the audio data\n        track.samples = this.generateSampleTable_(frames);\n\n        // concatenate the audio data to constuct the mdat\n        mdat = mp4Generator.mdat(this.concatenateFrameData_(frames));\n\n        adtsFrames = [];\n\n        moof = mp4Generator.moof(sequenceNumber, [track]);\n        boxes = new Uint8Array(moof.byteLength + mdat.byteLength);\n\n        // bump the sequence number for next time\n        sequenceNumber++;\n\n        boxes.set(moof);\n        boxes.set(mdat, moof.byteLength);\n\n        trackDecodeInfo.clearDtsInfo(track);\n\n        this.trigger('data', { track: track, boxes: boxes });\n        this.trigger('done', 'AudioSegmentStream');\n      };\n\n      // Possibly pad (prefix) the audio track with silence if appending this track\n      // would lead to the introduction of a gap in the audio buffer\n      this.prefixWithSilence_ = function (track, frames) {\n        var baseMediaDecodeTimeTs,\n            frameDuration = 0,\n            audioGapDuration = 0,\n            audioFillFrameCount = 0,\n            audioFillDuration = 0,\n            silentFrame,\n            i;\n\n        if (!frames.length) {\n          return;\n        }\n\n        baseMediaDecodeTimeTs = clock.audioTsToVideoTs(track.baseMediaDecodeTime, track.samplerate);\n        // determine frame clock duration based on sample rate, round up to avoid overfills\n        frameDuration = Math.ceil(ONE_SECOND_IN_TS$2 / (track.samplerate / 1024));\n\n        if (audioAppendStartTs && videoBaseMediaDecodeTime) {\n          // insert the shortest possible amount (audio gap or audio to video gap)\n          audioGapDuration = baseMediaDecodeTimeTs - Math.max(audioAppendStartTs, videoBaseMediaDecodeTime);\n          // number of full frames in the audio gap\n          audioFillFrameCount = Math.floor(audioGapDuration / frameDuration);\n          audioFillDuration = audioFillFrameCount * frameDuration;\n        }\n\n        // don't attempt to fill gaps smaller than a single frame or larger\n        // than a half second\n        if (audioFillFrameCount < 1 || audioFillDuration > ONE_SECOND_IN_TS$2 / 2) {\n          return;\n        }\n\n        silentFrame = silence[track.samplerate];\n\n        if (!silentFrame) {\n          // we don't have a silent frame pregenerated for the sample rate, so use a frame\n          // from the content instead\n          silentFrame = frames[0].data;\n        }\n\n        for (i = 0; i < audioFillFrameCount; i++) {\n          frames.splice(i, 0, {\n            data: silentFrame\n          });\n        }\n\n        track.baseMediaDecodeTime -= Math.floor(clock.videoTsToAudioTs(audioFillDuration, track.samplerate));\n      };\n\n      // If the audio segment extends before the earliest allowed dts\n      // value, remove AAC frames until starts at or after the earliest\n      // allowed DTS so that we don't end up with a negative baseMedia-\n      // DecodeTime for the audio track\n      this.trimAdtsFramesByEarliestDts_ = function (adtsFrames) {\n        if (track.minSegmentDts >= earliestAllowedDts) {\n          return adtsFrames;\n        }\n\n        // We will need to recalculate the earliest segment Dts\n        track.minSegmentDts = Infinity;\n\n        return adtsFrames.filter(function (currentFrame) {\n          // If this is an allowed frame, keep it and record it's Dts\n          if (currentFrame.dts >= earliestAllowedDts) {\n            track.minSegmentDts = Math.min(track.minSegmentDts, currentFrame.dts);\n            track.minSegmentPts = track.minSegmentDts;\n            return true;\n          }\n          // Otherwise, discard it\n          return false;\n        });\n      };\n\n      // generate the track's raw mdat data from an array of frames\n      this.generateSampleTable_ = function (frames) {\n        var i,\n            currentFrame,\n            samples = [];\n\n        for (i = 0; i < frames.length; i++) {\n          currentFrame = frames[i];\n          samples.push({\n            size: currentFrame.data.byteLength,\n            duration: 1024 // For AAC audio, all samples contain 1024 samples\n          });\n        }\n        return samples;\n      };\n\n      // generate the track's sample table from an array of frames\n      this.concatenateFrameData_ = function (frames) {\n        var i,\n            currentFrame,\n            dataOffset = 0,\n            data = new Uint8Array(sumFrameByteLengths(frames));\n\n        for (i = 0; i < frames.length; i++) {\n          currentFrame = frames[i];\n\n          data.set(currentFrame.data, dataOffset);\n          dataOffset += currentFrame.data.byteLength;\n        }\n        return data;\n      };\n    };\n\n    _AudioSegmentStream.prototype = new stream();\n\n    /**\n     * Constructs a single-track, ISO BMFF media segment from H264 data\n     * events. The output of this stream can be fed to a SourceBuffer\n     * configured with a suitable initialization segment.\n     * @param track {object} track metadata configuration\n     * @param options {object} transmuxer options object\n     * @param options.alignGopsAtEnd {boolean} If true, start from the end of the\n     *        gopsToAlignWith list when attempting to align gop pts\n     * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps\n     *        in the source; false to adjust the first segment to start at 0.\n     */\n    _VideoSegmentStream = function VideoSegmentStream(track, options) {\n      var sequenceNumber = 0,\n          nalUnits = [],\n          gopsToAlignWith = [],\n          config,\n          pps;\n\n      options = options || {};\n\n      _VideoSegmentStream.prototype.init.call(this);\n\n      delete track.minPTS;\n\n      this.gopCache_ = [];\n\n      /**\n        * Constructs a ISO BMFF segment given H264 nalUnits\n        * @param {Object} nalUnit A data event representing a nalUnit\n        * @param {String} nalUnit.nalUnitType\n        * @param {Object} nalUnit.config Properties for a mp4 track\n        * @param {Uint8Array} nalUnit.data The nalUnit bytes\n        * @see lib/codecs/h264.js\n       **/\n      this.push = function (nalUnit) {\n        trackDecodeInfo.collectDtsInfo(track, nalUnit);\n\n        // record the track config\n        if (nalUnit.nalUnitType === 'seq_parameter_set_rbsp' && !config) {\n          config = nalUnit.config;\n          track.sps = [nalUnit.data];\n\n          VIDEO_PROPERTIES.forEach(function (prop) {\n            track[prop] = config[prop];\n          }, this);\n        }\n\n        if (nalUnit.nalUnitType === 'pic_parameter_set_rbsp' && !pps) {\n          pps = nalUnit.data;\n          track.pps = [nalUnit.data];\n        }\n\n        // buffer video until flush() is called\n        nalUnits.push(nalUnit);\n      };\n\n      /**\n        * Pass constructed ISO BMFF track and boxes on to the\n        * next stream in the pipeline\n       **/\n      this.flush = function () {\n        var frames, gopForFusion, gops, moof, mdat, boxes;\n\n        // Throw away nalUnits at the start of the byte stream until\n        // we find the first AUD\n        while (nalUnits.length) {\n          if (nalUnits[0].nalUnitType === 'access_unit_delimiter_rbsp') {\n            break;\n          }\n          nalUnits.shift();\n        }\n\n        // Return early if no video data has been observed\n        if (nalUnits.length === 0) {\n          this.resetStream_();\n          this.trigger('done', 'VideoSegmentStream');\n          return;\n        }\n\n        // Organize the raw nal-units into arrays that represent\n        // higher-level constructs such as frames and gops\n        // (group-of-pictures)\n        frames = frameUtils.groupNalsIntoFrames(nalUnits);\n        gops = frameUtils.groupFramesIntoGops(frames);\n\n        // If the first frame of this fragment is not a keyframe we have\n        // a problem since MSE (on Chrome) requires a leading keyframe.\n        //\n        // We have two approaches to repairing this situation:\n        // 1) GOP-FUSION:\n        //    This is where we keep track of the GOPS (group-of-pictures)\n        //    from previous fragments and attempt to find one that we can\n        //    prepend to the current fragment in order to create a valid\n        //    fragment.\n        // 2) KEYFRAME-PULLING:\n        //    Here we search for the first keyframe in the fragment and\n        //    throw away all the frames between the start of the fragment\n        //    and that keyframe. We then extend the duration and pull the\n        //    PTS of the keyframe forward so that it covers the time range\n        //    of the frames that were disposed of.\n        //\n        // #1 is far prefereable over #2 which can cause \"stuttering\" but\n        // requires more things to be just right.\n        if (!gops[0][0].keyFrame) {\n          // Search for a gop for fusion from our gopCache\n          gopForFusion = this.getGopForFusion_(nalUnits[0], track);\n\n          if (gopForFusion) {\n            gops.unshift(gopForFusion);\n            // Adjust Gops' metadata to account for the inclusion of the\n            // new gop at the beginning\n            gops.byteLength += gopForFusion.byteLength;\n            gops.nalCount += gopForFusion.nalCount;\n            gops.pts = gopForFusion.pts;\n            gops.dts = gopForFusion.dts;\n            gops.duration += gopForFusion.duration;\n          } else {\n            // If we didn't find a candidate gop fall back to keyframe-pulling\n            gops = frameUtils.extendFirstKeyFrame(gops);\n          }\n        }\n\n        // Trim gops to align with gopsToAlignWith\n        if (gopsToAlignWith.length) {\n          var alignedGops;\n\n          if (options.alignGopsAtEnd) {\n            alignedGops = this.alignGopsAtEnd_(gops);\n          } else {\n            alignedGops = this.alignGopsAtStart_(gops);\n          }\n\n          if (!alignedGops) {\n            // save all the nals in the last GOP into the gop cache\n            this.gopCache_.unshift({\n              gop: gops.pop(),\n              pps: track.pps,\n              sps: track.sps\n            });\n\n            // Keep a maximum of 6 GOPs in the cache\n            this.gopCache_.length = Math.min(6, this.gopCache_.length);\n\n            // Clear nalUnits\n            nalUnits = [];\n\n            // return early no gops can be aligned with desired gopsToAlignWith\n            this.resetStream_();\n            this.trigger('done', 'VideoSegmentStream');\n            return;\n          }\n\n          // Some gops were trimmed. clear dts info so minSegmentDts and pts are correct\n          // when recalculated before sending off to CoalesceStream\n          trackDecodeInfo.clearDtsInfo(track);\n\n          gops = alignedGops;\n        }\n\n        trackDecodeInfo.collectDtsInfo(track, gops);\n\n        // First, we have to build the index from byte locations to\n        // samples (that is, frames) in the video data\n        track.samples = frameUtils.generateSampleTable(gops);\n\n        // Concatenate the video data and construct the mdat\n        mdat = mp4Generator.mdat(frameUtils.concatenateNalData(gops));\n\n        track.baseMediaDecodeTime = trackDecodeInfo.calculateTrackBaseMediaDecodeTime(track, options.keepOriginalTimestamps);\n\n        this.trigger('processedGopsInfo', gops.map(function (gop) {\n          return {\n            pts: gop.pts,\n            dts: gop.dts,\n            byteLength: gop.byteLength\n          };\n        }));\n\n        // save all the nals in the last GOP into the gop cache\n        this.gopCache_.unshift({\n          gop: gops.pop(),\n          pps: track.pps,\n          sps: track.sps\n        });\n\n        // Keep a maximum of 6 GOPs in the cache\n        this.gopCache_.length = Math.min(6, this.gopCache_.length);\n\n        // Clear nalUnits\n        nalUnits = [];\n\n        this.trigger('baseMediaDecodeTime', track.baseMediaDecodeTime);\n        this.trigger('timelineStartInfo', track.timelineStartInfo);\n\n        moof = mp4Generator.moof(sequenceNumber, [track]);\n\n        // it would be great to allocate this array up front instead of\n        // throwing away hundreds of media segment fragments\n        boxes = new Uint8Array(moof.byteLength + mdat.byteLength);\n\n        // Bump the sequence number for next time\n        sequenceNumber++;\n\n        boxes.set(moof);\n        boxes.set(mdat, moof.byteLength);\n\n        this.trigger('data', { track: track, boxes: boxes });\n\n        this.resetStream_();\n\n        // Continue with the flush process now\n        this.trigger('done', 'VideoSegmentStream');\n      };\n\n      this.resetStream_ = function () {\n        trackDecodeInfo.clearDtsInfo(track);\n\n        // reset config and pps because they may differ across segments\n        // for instance, when we are rendition switching\n        config = undefined;\n        pps = undefined;\n      };\n\n      // Search for a candidate Gop for gop-fusion from the gop cache and\n      // return it or return null if no good candidate was found\n      this.getGopForFusion_ = function (nalUnit) {\n        var halfSecond = 45000,\n\n\n        // Half-a-second in a 90khz clock\n        allowableOverlap = 10000,\n\n\n        // About 3 frames @ 30fps\n        nearestDistance = Infinity,\n            dtsDistance,\n            nearestGopObj,\n            currentGop,\n            currentGopObj,\n            i;\n\n        // Search for the GOP nearest to the beginning of this nal unit\n        for (i = 0; i < this.gopCache_.length; i++) {\n          currentGopObj = this.gopCache_[i];\n          currentGop = currentGopObj.gop;\n\n          // Reject Gops with different SPS or PPS\n          if (!(track.pps && arrayEquals(track.pps[0], currentGopObj.pps[0])) || !(track.sps && arrayEquals(track.sps[0], currentGopObj.sps[0]))) {\n            continue;\n          }\n\n          // Reject Gops that would require a negative baseMediaDecodeTime\n          if (currentGop.dts < track.timelineStartInfo.dts) {\n            continue;\n          }\n\n          // The distance between the end of the gop and the start of the nalUnit\n          dtsDistance = nalUnit.dts - currentGop.dts - currentGop.duration;\n\n          // Only consider GOPS that start before the nal unit and end within\n          // a half-second of the nal unit\n          if (dtsDistance >= -allowableOverlap && dtsDistance <= halfSecond) {\n\n            // Always use the closest GOP we found if there is more than\n            // one candidate\n            if (!nearestGopObj || nearestDistance > dtsDistance) {\n              nearestGopObj = currentGopObj;\n              nearestDistance = dtsDistance;\n            }\n          }\n        }\n\n        if (nearestGopObj) {\n          return nearestGopObj.gop;\n        }\n        return null;\n      };\n\n      // trim gop list to the first gop found that has a matching pts with a gop in the list\n      // of gopsToAlignWith starting from the START of the list\n      this.alignGopsAtStart_ = function (gops) {\n        var alignIndex, gopIndex, align, gop, byteLength, nalCount, duration, alignedGops;\n\n        byteLength = gops.byteLength;\n        nalCount = gops.nalCount;\n        duration = gops.duration;\n        alignIndex = gopIndex = 0;\n\n        while (alignIndex < gopsToAlignWith.length && gopIndex < gops.length) {\n          align = gopsToAlignWith[alignIndex];\n          gop = gops[gopIndex];\n\n          if (align.pts === gop.pts) {\n            break;\n          }\n\n          if (gop.pts > align.pts) {\n            // this current gop starts after the current gop we want to align on, so increment\n            // align index\n            alignIndex++;\n            continue;\n          }\n\n          // current gop starts before the current gop we want to align on. so increment gop\n          // index\n          gopIndex++;\n          byteLength -= gop.byteLength;\n          nalCount -= gop.nalCount;\n          duration -= gop.duration;\n        }\n\n        if (gopIndex === 0) {\n          // no gops to trim\n          return gops;\n        }\n\n        if (gopIndex === gops.length) {\n          // all gops trimmed, skip appending all gops\n          return null;\n        }\n\n        alignedGops = gops.slice(gopIndex);\n        alignedGops.byteLength = byteLength;\n        alignedGops.duration = duration;\n        alignedGops.nalCount = nalCount;\n        alignedGops.pts = alignedGops[0].pts;\n        alignedGops.dts = alignedGops[0].dts;\n\n        return alignedGops;\n      };\n\n      // trim gop list to the first gop found that has a matching pts with a gop in the list\n      // of gopsToAlignWith starting from the END of the list\n      this.alignGopsAtEnd_ = function (gops) {\n        var alignIndex, gopIndex, align, gop, alignEndIndex, matchFound;\n\n        alignIndex = gopsToAlignWith.length - 1;\n        gopIndex = gops.length - 1;\n        alignEndIndex = null;\n        matchFound = false;\n\n        while (alignIndex >= 0 && gopIndex >= 0) {\n          align = gopsToAlignWith[alignIndex];\n          gop = gops[gopIndex];\n\n          if (align.pts === gop.pts) {\n            matchFound = true;\n            break;\n          }\n\n          if (align.pts > gop.pts) {\n            alignIndex--;\n            continue;\n          }\n\n          if (alignIndex === gopsToAlignWith.length - 1) {\n            // gop.pts is greater than the last alignment candidate. If no match is found\n            // by the end of this loop, we still want to append gops that come after this\n            // point\n            alignEndIndex = gopIndex;\n          }\n\n          gopIndex--;\n        }\n\n        if (!matchFound && alignEndIndex === null) {\n          return null;\n        }\n\n        var trimIndex;\n\n        if (matchFound) {\n          trimIndex = gopIndex;\n        } else {\n          trimIndex = alignEndIndex;\n        }\n\n        if (trimIndex === 0) {\n          return gops;\n        }\n\n        var alignedGops = gops.slice(trimIndex);\n        var metadata = alignedGops.reduce(function (total, gop) {\n          total.byteLength += gop.byteLength;\n          total.duration += gop.duration;\n          total.nalCount += gop.nalCount;\n          return total;\n        }, { byteLength: 0, duration: 0, nalCount: 0 });\n\n        alignedGops.byteLength = metadata.byteLength;\n        alignedGops.duration = metadata.duration;\n        alignedGops.nalCount = metadata.nalCount;\n        alignedGops.pts = alignedGops[0].pts;\n        alignedGops.dts = alignedGops[0].dts;\n\n        return alignedGops;\n      };\n\n      this.alignGopsWith = function (newGopsToAlignWith) {\n        gopsToAlignWith = newGopsToAlignWith;\n      };\n    };\n\n    _VideoSegmentStream.prototype = new stream();\n\n    /**\n     * A Stream that can combine multiple streams (ie. audio & video)\n     * into a single output segment for MSE. Also supports audio-only\n     * and video-only streams.\n     */\n    _CoalesceStream = function CoalesceStream(options, metadataStream) {\n      // Number of Tracks per output segment\n      // If greater than 1, we combine multiple\n      // tracks into a single segment\n      this.numberOfTracks = 0;\n      this.metadataStream = metadataStream;\n\n      if (typeof options.remux !== 'undefined') {\n        this.remuxTracks = !!options.remux;\n      } else {\n        this.remuxTracks = true;\n      }\n\n      this.pendingTracks = [];\n      this.videoTrack = null;\n      this.pendingBoxes = [];\n      this.pendingCaptions = [];\n      this.pendingMetadata = [];\n      this.pendingBytes = 0;\n      this.emittedTracks = 0;\n\n      _CoalesceStream.prototype.init.call(this);\n\n      // Take output from multiple\n      this.push = function (output) {\n        // buffer incoming captions until the associated video segment\n        // finishes\n        if (output.text) {\n          return this.pendingCaptions.push(output);\n        }\n        // buffer incoming id3 tags until the final flush\n        if (output.frames) {\n          return this.pendingMetadata.push(output);\n        }\n\n        // Add this track to the list of pending tracks and store\n        // important information required for the construction of\n        // the final segment\n        this.pendingTracks.push(output.track);\n        this.pendingBoxes.push(output.boxes);\n        this.pendingBytes += output.boxes.byteLength;\n\n        if (output.track.type === 'video') {\n          this.videoTrack = output.track;\n        }\n        if (output.track.type === 'audio') {\n          this.audioTrack = output.track;\n        }\n      };\n    };\n\n    _CoalesceStream.prototype = new stream();\n    _CoalesceStream.prototype.flush = function (flushSource) {\n      var offset = 0,\n          event = {\n        captions: [],\n        captionStreams: {},\n        metadata: [],\n        info: {}\n      },\n          caption,\n          id3,\n          initSegment,\n          timelineStartPts = 0,\n          i;\n\n      if (this.pendingTracks.length < this.numberOfTracks) {\n        if (flushSource !== 'VideoSegmentStream' && flushSource !== 'AudioSegmentStream') {\n          // Return because we haven't received a flush from a data-generating\n          // portion of the segment (meaning that we have only recieved meta-data\n          // or captions.)\n          return;\n        } else if (this.remuxTracks) {\n          // Return until we have enough tracks from the pipeline to remux (if we\n          // are remuxing audio and video into a single MP4)\n          return;\n        } else if (this.pendingTracks.length === 0) {\n          // In the case where we receive a flush without any data having been\n          // received we consider it an emitted track for the purposes of coalescing\n          // `done` events.\n          // We do this for the case where there is an audio and video track in the\n          // segment but no audio data. (seen in several playlists with alternate\n          // audio tracks and no audio present in the main TS segments.)\n          this.emittedTracks++;\n\n          if (this.emittedTracks >= this.numberOfTracks) {\n            this.trigger('done');\n            this.emittedTracks = 0;\n          }\n          return;\n        }\n      }\n\n      if (this.videoTrack) {\n        timelineStartPts = this.videoTrack.timelineStartInfo.pts;\n        VIDEO_PROPERTIES.forEach(function (prop) {\n          event.info[prop] = this.videoTrack[prop];\n        }, this);\n      } else if (this.audioTrack) {\n        timelineStartPts = this.audioTrack.timelineStartInfo.pts;\n        AUDIO_PROPERTIES.forEach(function (prop) {\n          event.info[prop] = this.audioTrack[prop];\n        }, this);\n      }\n\n      if (this.pendingTracks.length === 1) {\n        event.type = this.pendingTracks[0].type;\n      } else {\n        event.type = 'combined';\n      }\n\n      this.emittedTracks += this.pendingTracks.length;\n\n      initSegment = mp4Generator.initSegment(this.pendingTracks);\n\n      // Create a new typed array to hold the init segment\n      event.initSegment = new Uint8Array(initSegment.byteLength);\n\n      // Create an init segment containing a moov\n      // and track definitions\n      event.initSegment.set(initSegment);\n\n      // Create a new typed array to hold the moof+mdats\n      event.data = new Uint8Array(this.pendingBytes);\n\n      // Append each moof+mdat (one per track) together\n      for (i = 0; i < this.pendingBoxes.length; i++) {\n        event.data.set(this.pendingBoxes[i], offset);\n        offset += this.pendingBoxes[i].byteLength;\n      }\n\n      // Translate caption PTS times into second offsets into the\n      // video timeline for the segment, and add track info\n      for (i = 0; i < this.pendingCaptions.length; i++) {\n        caption = this.pendingCaptions[i];\n        caption.startTime = caption.startPts - timelineStartPts;\n        caption.startTime /= 90e3;\n        caption.endTime = caption.endPts - timelineStartPts;\n        caption.endTime /= 90e3;\n        event.captionStreams[caption.stream] = true;\n        event.captions.push(caption);\n      }\n\n      // Translate ID3 frame PTS times into second offsets into the\n      // video timeline for the segment\n      for (i = 0; i < this.pendingMetadata.length; i++) {\n        id3 = this.pendingMetadata[i];\n        id3.cueTime = id3.pts - timelineStartPts;\n        id3.cueTime /= 90e3;\n        event.metadata.push(id3);\n      }\n      // We add this to every single emitted segment even though we only need\n      // it for the first\n      event.metadata.dispatchType = this.metadataStream.dispatchType;\n\n      // Reset stream state\n      this.pendingTracks.length = 0;\n      this.videoTrack = null;\n      this.pendingBoxes.length = 0;\n      this.pendingCaptions.length = 0;\n      this.pendingBytes = 0;\n      this.pendingMetadata.length = 0;\n\n      // Emit the built segment\n      this.trigger('data', event);\n\n      // Only emit `done` if all tracks have been flushed and emitted\n      if (this.emittedTracks >= this.numberOfTracks) {\n        this.trigger('done');\n        this.emittedTracks = 0;\n      }\n    };\n    /**\n     * A Stream that expects MP2T binary data as input and produces\n     * corresponding media segments, suitable for use with Media Source\n     * Extension (MSE) implementations that support the ISO BMFF byte\n     * stream format, like Chrome.\n     */\n    _Transmuxer = function Transmuxer(options) {\n      var self = this,\n          hasFlushed = true,\n          videoTrack,\n          audioTrack;\n\n      _Transmuxer.prototype.init.call(this);\n\n      options = options || {};\n      this.baseMediaDecodeTime = options.baseMediaDecodeTime || 0;\n      this.transmuxPipeline_ = {};\n\n      this.setupAacPipeline = function () {\n        var pipeline = {};\n        this.transmuxPipeline_ = pipeline;\n\n        pipeline.type = 'aac';\n        pipeline.metadataStream = new m2ts_1.MetadataStream();\n\n        // set up the parsing pipeline\n        pipeline.aacStream = new aac();\n        pipeline.audioTimestampRolloverStream = new m2ts_1.TimestampRolloverStream('audio');\n        pipeline.timedMetadataTimestampRolloverStream = new m2ts_1.TimestampRolloverStream('timed-metadata');\n        pipeline.adtsStream = new adts();\n        pipeline.coalesceStream = new _CoalesceStream(options, pipeline.metadataStream);\n        pipeline.headOfPipeline = pipeline.aacStream;\n\n        pipeline.aacStream.pipe(pipeline.audioTimestampRolloverStream).pipe(pipeline.adtsStream);\n        pipeline.aacStream.pipe(pipeline.timedMetadataTimestampRolloverStream).pipe(pipeline.metadataStream).pipe(pipeline.coalesceStream);\n\n        pipeline.metadataStream.on('timestamp', function (frame) {\n          pipeline.aacStream.setTimestamp(frame.timeStamp);\n        });\n\n        pipeline.aacStream.on('data', function (data) {\n          if (data.type === 'timed-metadata' && !pipeline.audioSegmentStream) {\n            audioTrack = audioTrack || {\n              timelineStartInfo: {\n                baseMediaDecodeTime: self.baseMediaDecodeTime\n              },\n              codec: 'adts',\n              type: 'audio'\n            };\n            // hook up the audio segment stream to the first track with aac data\n            pipeline.coalesceStream.numberOfTracks++;\n            pipeline.audioSegmentStream = new _AudioSegmentStream(audioTrack, options);\n            // Set up the final part of the audio pipeline\n            pipeline.adtsStream.pipe(pipeline.audioSegmentStream).pipe(pipeline.coalesceStream);\n          }\n        });\n\n        // Re-emit any data coming from the coalesce stream to the outside world\n        pipeline.coalesceStream.on('data', this.trigger.bind(this, 'data'));\n        // Let the consumer know we have finished flushing the entire pipeline\n        pipeline.coalesceStream.on('done', this.trigger.bind(this, 'done'));\n      };\n\n      this.setupTsPipeline = function () {\n        var pipeline = {};\n        this.transmuxPipeline_ = pipeline;\n\n        pipeline.type = 'ts';\n        pipeline.metadataStream = new m2ts_1.MetadataStream();\n\n        // set up the parsing pipeline\n        pipeline.packetStream = new m2ts_1.TransportPacketStream();\n        pipeline.parseStream = new m2ts_1.TransportParseStream();\n        pipeline.elementaryStream = new m2ts_1.ElementaryStream();\n        pipeline.videoTimestampRolloverStream = new m2ts_1.TimestampRolloverStream('video');\n        pipeline.audioTimestampRolloverStream = new m2ts_1.TimestampRolloverStream('audio');\n        pipeline.timedMetadataTimestampRolloverStream = new m2ts_1.TimestampRolloverStream('timed-metadata');\n        pipeline.adtsStream = new adts();\n        pipeline.h264Stream = new H264Stream();\n        pipeline.captionStream = new m2ts_1.CaptionStream();\n        pipeline.coalesceStream = new _CoalesceStream(options, pipeline.metadataStream);\n        pipeline.headOfPipeline = pipeline.packetStream;\n\n        // disassemble MPEG2-TS packets into elementary streams\n        pipeline.packetStream.pipe(pipeline.parseStream).pipe(pipeline.elementaryStream);\n\n        // !!THIS ORDER IS IMPORTANT!!\n        // demux the streams\n        pipeline.elementaryStream.pipe(pipeline.videoTimestampRolloverStream).pipe(pipeline.h264Stream);\n        pipeline.elementaryStream.pipe(pipeline.audioTimestampRolloverStream).pipe(pipeline.adtsStream);\n\n        pipeline.elementaryStream.pipe(pipeline.timedMetadataTimestampRolloverStream).pipe(pipeline.metadataStream).pipe(pipeline.coalesceStream);\n\n        // Hook up CEA-608/708 caption stream\n        pipeline.h264Stream.pipe(pipeline.captionStream).pipe(pipeline.coalesceStream);\n\n        pipeline.elementaryStream.on('data', function (data) {\n          var i;\n\n          if (data.type === 'metadata') {\n            i = data.tracks.length;\n\n            // scan the tracks listed in the metadata\n            while (i--) {\n              if (!videoTrack && data.tracks[i].type === 'video') {\n                videoTrack = data.tracks[i];\n                videoTrack.timelineStartInfo.baseMediaDecodeTime = self.baseMediaDecodeTime;\n              } else if (!audioTrack && data.tracks[i].type === 'audio') {\n                audioTrack = data.tracks[i];\n                audioTrack.timelineStartInfo.baseMediaDecodeTime = self.baseMediaDecodeTime;\n              }\n            }\n\n            // hook up the video segment stream to the first track with h264 data\n            if (videoTrack && !pipeline.videoSegmentStream) {\n              pipeline.coalesceStream.numberOfTracks++;\n              pipeline.videoSegmentStream = new _VideoSegmentStream(videoTrack, options);\n\n              pipeline.videoSegmentStream.on('timelineStartInfo', function (timelineStartInfo) {\n                // When video emits timelineStartInfo data after a flush, we forward that\n                // info to the AudioSegmentStream, if it exists, because video timeline\n                // data takes precedence.\n                if (audioTrack) {\n                  audioTrack.timelineStartInfo = timelineStartInfo;\n                  // On the first segment we trim AAC frames that exist before the\n                  // very earliest DTS we have seen in video because Chrome will\n                  // interpret any video track with a baseMediaDecodeTime that is\n                  // non-zero as a gap.\n                  pipeline.audioSegmentStream.setEarliestDts(timelineStartInfo.dts);\n                }\n              });\n\n              pipeline.videoSegmentStream.on('processedGopsInfo', self.trigger.bind(self, 'gopInfo'));\n\n              pipeline.videoSegmentStream.on('baseMediaDecodeTime', function (baseMediaDecodeTime) {\n                if (audioTrack) {\n                  pipeline.audioSegmentStream.setVideoBaseMediaDecodeTime(baseMediaDecodeTime);\n                }\n              });\n\n              // Set up the final part of the video pipeline\n              pipeline.h264Stream.pipe(pipeline.videoSegmentStream).pipe(pipeline.coalesceStream);\n            }\n\n            if (audioTrack && !pipeline.audioSegmentStream) {\n              // hook up the audio segment stream to the first track with aac data\n              pipeline.coalesceStream.numberOfTracks++;\n              pipeline.audioSegmentStream = new _AudioSegmentStream(audioTrack, options);\n\n              // Set up the final part of the audio pipeline\n              pipeline.adtsStream.pipe(pipeline.audioSegmentStream).pipe(pipeline.coalesceStream);\n            }\n          }\n        });\n\n        // Re-emit any data coming from the coalesce stream to the outside world\n        pipeline.coalesceStream.on('data', this.trigger.bind(this, 'data'));\n        // Let the consumer know we have finished flushing the entire pipeline\n        pipeline.coalesceStream.on('done', this.trigger.bind(this, 'done'));\n      };\n\n      // hook up the segment streams once track metadata is delivered\n      this.setBaseMediaDecodeTime = function (baseMediaDecodeTime) {\n        var pipeline = this.transmuxPipeline_;\n\n        this.baseMediaDecodeTime = baseMediaDecodeTime;\n        if (audioTrack) {\n          audioTrack.timelineStartInfo.dts = undefined;\n          audioTrack.timelineStartInfo.pts = undefined;\n          trackDecodeInfo.clearDtsInfo(audioTrack);\n          audioTrack.timelineStartInfo.baseMediaDecodeTime = baseMediaDecodeTime;\n          if (pipeline.audioTimestampRolloverStream) {\n            pipeline.audioTimestampRolloverStream.discontinuity();\n          }\n        }\n        if (videoTrack) {\n          if (pipeline.videoSegmentStream) {\n            pipeline.videoSegmentStream.gopCache_ = [];\n            pipeline.videoTimestampRolloverStream.discontinuity();\n          }\n          videoTrack.timelineStartInfo.dts = undefined;\n          videoTrack.timelineStartInfo.pts = undefined;\n          trackDecodeInfo.clearDtsInfo(videoTrack);\n          pipeline.captionStream.reset();\n          videoTrack.timelineStartInfo.baseMediaDecodeTime = baseMediaDecodeTime;\n        }\n\n        if (pipeline.timedMetadataTimestampRolloverStream) {\n          pipeline.timedMetadataTimestampRolloverStream.discontinuity();\n        }\n      };\n\n      this.setAudioAppendStart = function (timestamp) {\n        if (audioTrack) {\n          this.transmuxPipeline_.audioSegmentStream.setAudioAppendStart(timestamp);\n        }\n      };\n\n      this.alignGopsWith = function (gopsToAlignWith) {\n        if (videoTrack && this.transmuxPipeline_.videoSegmentStream) {\n          this.transmuxPipeline_.videoSegmentStream.alignGopsWith(gopsToAlignWith);\n        }\n      };\n\n      // feed incoming data to the front of the parsing pipeline\n      this.push = function (data) {\n        if (hasFlushed) {\n          var isAac = isLikelyAacData(data);\n\n          if (isAac && this.transmuxPipeline_.type !== 'aac') {\n            this.setupAacPipeline();\n          } else if (!isAac && this.transmuxPipeline_.type !== 'ts') {\n            this.setupTsPipeline();\n          }\n          hasFlushed = false;\n        }\n        this.transmuxPipeline_.headOfPipeline.push(data);\n      };\n\n      // flush any buffered data\n      this.flush = function () {\n        hasFlushed = true;\n        // Start at the top of the pipeline and flush all pending work\n        this.transmuxPipeline_.headOfPipeline.flush();\n      };\n\n      // Caption data has to be reset when seeking outside buffered range\n      this.resetCaptions = function () {\n        if (this.transmuxPipeline_.captionStream) {\n          this.transmuxPipeline_.captionStream.reset();\n        }\n      };\n    };\n    _Transmuxer.prototype = new stream();\n\n    var transmuxer = {\n      Transmuxer: _Transmuxer,\n      VideoSegmentStream: _VideoSegmentStream,\n      AudioSegmentStream: _AudioSegmentStream,\n      AUDIO_PROPERTIES: AUDIO_PROPERTIES,\n      VIDEO_PROPERTIES: VIDEO_PROPERTIES\n    };\n\n    var inspectMp4,\n        _textifyMp,\n        parseType$1 = probe.parseType,\n        parseMp4Date = function parseMp4Date(seconds) {\n      return new Date(seconds * 1000 - 2082844800000);\n    },\n        parseSampleFlags = function parseSampleFlags(flags) {\n      return {\n        isLeading: (flags[0] & 0x0c) >>> 2,\n        dependsOn: flags[0] & 0x03,\n        isDependedOn: (flags[1] & 0xc0) >>> 6,\n        hasRedundancy: (flags[1] & 0x30) >>> 4,\n        paddingValue: (flags[1] & 0x0e) >>> 1,\n        isNonSyncSample: flags[1] & 0x01,\n        degradationPriority: flags[2] << 8 | flags[3]\n      };\n    },\n        nalParse = function nalParse(avcStream) {\n      var avcView = new DataView(avcStream.buffer, avcStream.byteOffset, avcStream.byteLength),\n          result = [],\n          i,\n          length;\n      for (i = 0; i + 4 < avcStream.length; i += length) {\n        length = avcView.getUint32(i);\n        i += 4;\n\n        // bail if this doesn't appear to be an H264 stream\n        if (length <= 0) {\n          result.push('<span style=\\'color:red;\\'>MALFORMED DATA</span>');\n          continue;\n        }\n\n        switch (avcStream[i] & 0x1F) {\n          case 0x01:\n            result.push('slice_layer_without_partitioning_rbsp');\n            break;\n          case 0x05:\n            result.push('slice_layer_without_partitioning_rbsp_idr');\n            break;\n          case 0x06:\n            result.push('sei_rbsp');\n            break;\n          case 0x07:\n            result.push('seq_parameter_set_rbsp');\n            break;\n          case 0x08:\n            result.push('pic_parameter_set_rbsp');\n            break;\n          case 0x09:\n            result.push('access_unit_delimiter_rbsp');\n            break;\n          default:\n            result.push('UNKNOWN NAL - ' + avcStream[i] & 0x1F);\n            break;\n        }\n      }\n      return result;\n    },\n\n\n    // registry of handlers for individual mp4 box types\n    parse$$1 = {\n      // codingname, not a first-class box type. stsd entries share the\n      // same format as real boxes so the parsing infrastructure can be\n      // shared\n      avc1: function avc1(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n        return {\n          dataReferenceIndex: view.getUint16(6),\n          width: view.getUint16(24),\n          height: view.getUint16(26),\n          horizresolution: view.getUint16(28) + view.getUint16(30) / 16,\n          vertresolution: view.getUint16(32) + view.getUint16(34) / 16,\n          frameCount: view.getUint16(40),\n          depth: view.getUint16(74),\n          config: inspectMp4(data.subarray(78, data.byteLength))\n        };\n      },\n      avcC: function avcC(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          configurationVersion: data[0],\n          avcProfileIndication: data[1],\n          profileCompatibility: data[2],\n          avcLevelIndication: data[3],\n          lengthSizeMinusOne: data[4] & 0x03,\n          sps: [],\n          pps: []\n        },\n            numOfSequenceParameterSets = data[5] & 0x1f,\n            numOfPictureParameterSets,\n            nalSize,\n            offset,\n            i;\n\n        // iterate past any SPSs\n        offset = 6;\n        for (i = 0; i < numOfSequenceParameterSets; i++) {\n          nalSize = view.getUint16(offset);\n          offset += 2;\n          result.sps.push(new Uint8Array(data.subarray(offset, offset + nalSize)));\n          offset += nalSize;\n        }\n        // iterate past any PPSs\n        numOfPictureParameterSets = data[offset];\n        offset++;\n        for (i = 0; i < numOfPictureParameterSets; i++) {\n          nalSize = view.getUint16(offset);\n          offset += 2;\n          result.pps.push(new Uint8Array(data.subarray(offset, offset + nalSize)));\n          offset += nalSize;\n        }\n        return result;\n      },\n      btrt: function btrt(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n        return {\n          bufferSizeDB: view.getUint32(0),\n          maxBitrate: view.getUint32(4),\n          avgBitrate: view.getUint32(8)\n        };\n      },\n      esds: function esds(data) {\n        return {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          esId: data[6] << 8 | data[7],\n          streamPriority: data[8] & 0x1f,\n          decoderConfig: {\n            objectProfileIndication: data[11],\n            streamType: data[12] >>> 2 & 0x3f,\n            bufferSize: data[13] << 16 | data[14] << 8 | data[15],\n            maxBitrate: data[16] << 24 | data[17] << 16 | data[18] << 8 | data[19],\n            avgBitrate: data[20] << 24 | data[21] << 16 | data[22] << 8 | data[23],\n            decoderConfigDescriptor: {\n              tag: data[24],\n              length: data[25],\n              audioObjectType: data[26] >>> 3 & 0x1f,\n              samplingFrequencyIndex: (data[26] & 0x07) << 1 | data[27] >>> 7 & 0x01,\n              channelConfiguration: data[27] >>> 3 & 0x0f\n            }\n          }\n        };\n      },\n      ftyp: function ftyp(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          majorBrand: parseType$1(data.subarray(0, 4)),\n          minorVersion: view.getUint32(4),\n          compatibleBrands: []\n        },\n            i = 8;\n        while (i < data.byteLength) {\n          result.compatibleBrands.push(parseType$1(data.subarray(i, i + 4)));\n          i += 4;\n        }\n        return result;\n      },\n      dinf: function dinf(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      dref: function dref(data) {\n        return {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          dataReferences: inspectMp4(data.subarray(8))\n        };\n      },\n      hdlr: function hdlr(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4)),\n          handlerType: parseType$1(data.subarray(8, 12)),\n          name: ''\n        },\n            i = 8;\n\n        // parse out the name field\n        for (i = 24; i < data.byteLength; i++) {\n          if (data[i] === 0x00) {\n            // the name field is null-terminated\n            i++;\n            break;\n          }\n          result.name += String.fromCharCode(data[i]);\n        }\n        // decode UTF-8 to javascript's internal representation\n        // see http://ecmanaut.blogspot.com/2006/07/encoding-decoding-utf8-in-javascript.html\n        result.name = decodeURIComponent(escape(result.name));\n\n        return result;\n      },\n      mdat: function mdat(data) {\n        return {\n          byteLength: data.byteLength,\n          nals: nalParse(data)\n        };\n      },\n      mdhd: function mdhd(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            i = 4,\n            language,\n            result = {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4)),\n          language: ''\n        };\n        if (result.version === 1) {\n          i += 4;\n          result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n          i += 8;\n          result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n          i += 4;\n          result.timescale = view.getUint32(i);\n          i += 8;\n          result.duration = view.getUint32(i); // truncating top 4 bytes\n        } else {\n          result.creationTime = parseMp4Date(view.getUint32(i));\n          i += 4;\n          result.modificationTime = parseMp4Date(view.getUint32(i));\n          i += 4;\n          result.timescale = view.getUint32(i);\n          i += 4;\n          result.duration = view.getUint32(i);\n        }\n        i += 4;\n        // language is stored as an ISO-639-2/T code in an array of three 5-bit fields\n        // each field is the packed difference between its ASCII value and 0x60\n        language = view.getUint16(i);\n        result.language += String.fromCharCode((language >> 10) + 0x60);\n        result.language += String.fromCharCode(((language & 0x03e0) >> 5) + 0x60);\n        result.language += String.fromCharCode((language & 0x1f) + 0x60);\n\n        return result;\n      },\n      mdia: function mdia(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      mfhd: function mfhd(data) {\n        return {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          sequenceNumber: data[4] << 24 | data[5] << 16 | data[6] << 8 | data[7]\n        };\n      },\n      minf: function minf(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      // codingname, not a first-class box type. stsd entries share the\n      // same format as real boxes so the parsing infrastructure can be\n      // shared\n      mp4a: function mp4a(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          // 6 bytes reserved\n          dataReferenceIndex: view.getUint16(6),\n          // 4 + 4 bytes reserved\n          channelcount: view.getUint16(16),\n          samplesize: view.getUint16(18),\n          // 2 bytes pre_defined\n          // 2 bytes reserved\n          samplerate: view.getUint16(24) + view.getUint16(26) / 65536\n        };\n\n        // if there are more bytes to process, assume this is an ISO/IEC\n        // 14496-14 MP4AudioSampleEntry and parse the ESDBox\n        if (data.byteLength > 28) {\n          result.streamDescriptor = inspectMp4(data.subarray(28))[0];\n        }\n        return result;\n      },\n      moof: function moof(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      moov: function moov(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      mvex: function mvex(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      mvhd: function mvhd(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            i = 4,\n            result = {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4))\n        };\n\n        if (result.version === 1) {\n          i += 4;\n          result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n          i += 8;\n          result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n          i += 4;\n          result.timescale = view.getUint32(i);\n          i += 8;\n          result.duration = view.getUint32(i); // truncating top 4 bytes\n        } else {\n          result.creationTime = parseMp4Date(view.getUint32(i));\n          i += 4;\n          result.modificationTime = parseMp4Date(view.getUint32(i));\n          i += 4;\n          result.timescale = view.getUint32(i);\n          i += 4;\n          result.duration = view.getUint32(i);\n        }\n        i += 4;\n\n        // convert fixed-point, base 16 back to a number\n        result.rate = view.getUint16(i) + view.getUint16(i + 2) / 16;\n        i += 4;\n        result.volume = view.getUint8(i) + view.getUint8(i + 1) / 8;\n        i += 2;\n        i += 2;\n        i += 2 * 4;\n        result.matrix = new Uint32Array(data.subarray(i, i + 9 * 4));\n        i += 9 * 4;\n        i += 6 * 4;\n        result.nextTrackId = view.getUint32(i);\n        return result;\n      },\n      pdin: function pdin(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n        return {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4)),\n          rate: view.getUint32(4),\n          initialDelay: view.getUint32(8)\n        };\n      },\n      sdtp: function sdtp(data) {\n        var result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          samples: []\n        },\n            i;\n\n        for (i = 4; i < data.byteLength; i++) {\n          result.samples.push({\n            dependsOn: (data[i] & 0x30) >> 4,\n            isDependedOn: (data[i] & 0x0c) >> 2,\n            hasRedundancy: data[i] & 0x03\n          });\n        }\n        return result;\n      },\n      sidx: function sidx(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          references: [],\n          referenceId: view.getUint32(4),\n          timescale: view.getUint32(8),\n          earliestPresentationTime: view.getUint32(12),\n          firstOffset: view.getUint32(16)\n        },\n            referenceCount = view.getUint16(22),\n            i;\n\n        for (i = 24; referenceCount; i += 12, referenceCount--) {\n          result.references.push({\n            referenceType: (data[i] & 0x80) >>> 7,\n            referencedSize: view.getUint32(i) & 0x7FFFFFFF,\n            subsegmentDuration: view.getUint32(i + 4),\n            startsWithSap: !!(data[i + 8] & 0x80),\n            sapType: (data[i + 8] & 0x70) >>> 4,\n            sapDeltaTime: view.getUint32(i + 8) & 0x0FFFFFFF\n          });\n        }\n\n        return result;\n      },\n      smhd: function smhd(data) {\n        return {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          balance: data[4] + data[5] / 256\n        };\n      },\n      stbl: function stbl(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      stco: function stco(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          chunkOffsets: []\n        },\n            entryCount = view.getUint32(4),\n            i;\n        for (i = 8; entryCount; i += 4, entryCount--) {\n          result.chunkOffsets.push(view.getUint32(i));\n        }\n        return result;\n      },\n      stsc: function stsc(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            entryCount = view.getUint32(4),\n            result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          sampleToChunks: []\n        },\n            i;\n        for (i = 8; entryCount; i += 12, entryCount--) {\n          result.sampleToChunks.push({\n            firstChunk: view.getUint32(i),\n            samplesPerChunk: view.getUint32(i + 4),\n            sampleDescriptionIndex: view.getUint32(i + 8)\n          });\n        }\n        return result;\n      },\n      stsd: function stsd(data) {\n        return {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          sampleDescriptions: inspectMp4(data.subarray(8))\n        };\n      },\n      stsz: function stsz(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          sampleSize: view.getUint32(4),\n          entries: []\n        },\n            i;\n        for (i = 12; i < data.byteLength; i += 4) {\n          result.entries.push(view.getUint32(i));\n        }\n        return result;\n      },\n      stts: function stts(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          timeToSamples: []\n        },\n            entryCount = view.getUint32(4),\n            i;\n\n        for (i = 8; entryCount; i += 8, entryCount--) {\n          result.timeToSamples.push({\n            sampleCount: view.getUint32(i),\n            sampleDelta: view.getUint32(i + 4)\n          });\n        }\n        return result;\n      },\n      styp: function styp(data) {\n        return parse$$1.ftyp(data);\n      },\n      tfdt: function tfdt(data) {\n        var result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          baseMediaDecodeTime: data[4] << 24 | data[5] << 16 | data[6] << 8 | data[7]\n        };\n        if (result.version === 1) {\n          result.baseMediaDecodeTime *= Math.pow(2, 32);\n          result.baseMediaDecodeTime += data[8] << 24 | data[9] << 16 | data[10] << 8 | data[11];\n        }\n        return result;\n      },\n      tfhd: function tfhd(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          trackId: view.getUint32(4)\n        },\n            baseDataOffsetPresent = result.flags[2] & 0x01,\n            sampleDescriptionIndexPresent = result.flags[2] & 0x02,\n            defaultSampleDurationPresent = result.flags[2] & 0x08,\n            defaultSampleSizePresent = result.flags[2] & 0x10,\n            defaultSampleFlagsPresent = result.flags[2] & 0x20,\n            durationIsEmpty = result.flags[0] & 0x010000,\n            defaultBaseIsMoof = result.flags[0] & 0x020000,\n            i;\n\n        i = 8;\n        if (baseDataOffsetPresent) {\n          i += 4; // truncate top 4 bytes\n          // FIXME: should we read the full 64 bits?\n          result.baseDataOffset = view.getUint32(12);\n          i += 4;\n        }\n        if (sampleDescriptionIndexPresent) {\n          result.sampleDescriptionIndex = view.getUint32(i);\n          i += 4;\n        }\n        if (defaultSampleDurationPresent) {\n          result.defaultSampleDuration = view.getUint32(i);\n          i += 4;\n        }\n        if (defaultSampleSizePresent) {\n          result.defaultSampleSize = view.getUint32(i);\n          i += 4;\n        }\n        if (defaultSampleFlagsPresent) {\n          result.defaultSampleFlags = view.getUint32(i);\n        }\n        if (durationIsEmpty) {\n          result.durationIsEmpty = true;\n        }\n        if (!baseDataOffsetPresent && defaultBaseIsMoof) {\n          result.baseDataOffsetIsMoof = true;\n        }\n        return result;\n      },\n      tkhd: function tkhd(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n            i = 4,\n            result = {\n          version: view.getUint8(0),\n          flags: new Uint8Array(data.subarray(1, 4))\n        };\n        if (result.version === 1) {\n          i += 4;\n          result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n          i += 8;\n          result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n          i += 4;\n          result.trackId = view.getUint32(i);\n          i += 4;\n          i += 8;\n          result.duration = view.getUint32(i); // truncating top 4 bytes\n        } else {\n          result.creationTime = parseMp4Date(view.getUint32(i));\n          i += 4;\n          result.modificationTime = parseMp4Date(view.getUint32(i));\n          i += 4;\n          result.trackId = view.getUint32(i);\n          i += 4;\n          i += 4;\n          result.duration = view.getUint32(i);\n        }\n        i += 4;\n        i += 2 * 4;\n        result.layer = view.getUint16(i);\n        i += 2;\n        result.alternateGroup = view.getUint16(i);\n        i += 2;\n        // convert fixed-point, base 16 back to a number\n        result.volume = view.getUint8(i) + view.getUint8(i + 1) / 8;\n        i += 2;\n        i += 2;\n        result.matrix = new Uint32Array(data.subarray(i, i + 9 * 4));\n        i += 9 * 4;\n        result.width = view.getUint16(i) + view.getUint16(i + 2) / 16;\n        i += 4;\n        result.height = view.getUint16(i) + view.getUint16(i + 2) / 16;\n        return result;\n      },\n      traf: function traf(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      trak: function trak(data) {\n        return {\n          boxes: inspectMp4(data)\n        };\n      },\n      trex: function trex(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n        return {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          trackId: view.getUint32(4),\n          defaultSampleDescriptionIndex: view.getUint32(8),\n          defaultSampleDuration: view.getUint32(12),\n          defaultSampleSize: view.getUint32(16),\n          sampleDependsOn: data[20] & 0x03,\n          sampleIsDependedOn: (data[21] & 0xc0) >> 6,\n          sampleHasRedundancy: (data[21] & 0x30) >> 4,\n          samplePaddingValue: (data[21] & 0x0e) >> 1,\n          sampleIsDifferenceSample: !!(data[21] & 0x01),\n          sampleDegradationPriority: view.getUint16(22)\n        };\n      },\n      trun: function trun(data) {\n        var result = {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          samples: []\n        },\n            view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n\n\n        // Flag interpretation\n        dataOffsetPresent = result.flags[2] & 0x01,\n\n\n        // compare with 2nd byte of 0x1\n        firstSampleFlagsPresent = result.flags[2] & 0x04,\n\n\n        // compare with 2nd byte of 0x4\n        sampleDurationPresent = result.flags[1] & 0x01,\n\n\n        // compare with 2nd byte of 0x100\n        sampleSizePresent = result.flags[1] & 0x02,\n\n\n        // compare with 2nd byte of 0x200\n        sampleFlagsPresent = result.flags[1] & 0x04,\n\n\n        // compare with 2nd byte of 0x400\n        sampleCompositionTimeOffsetPresent = result.flags[1] & 0x08,\n\n\n        // compare with 2nd byte of 0x800\n        sampleCount = view.getUint32(4),\n            offset = 8,\n            sample;\n\n        if (dataOffsetPresent) {\n          // 32 bit signed integer\n          result.dataOffset = view.getInt32(offset);\n          offset += 4;\n        }\n\n        // Overrides the flags for the first sample only. The order of\n        // optional values will be: duration, size, compositionTimeOffset\n        if (firstSampleFlagsPresent && sampleCount) {\n          sample = {\n            flags: parseSampleFlags(data.subarray(offset, offset + 4))\n          };\n          offset += 4;\n          if (sampleDurationPresent) {\n            sample.duration = view.getUint32(offset);\n            offset += 4;\n          }\n          if (sampleSizePresent) {\n            sample.size = view.getUint32(offset);\n            offset += 4;\n          }\n          if (sampleCompositionTimeOffsetPresent) {\n            // Note: this should be a signed int if version is 1\n            sample.compositionTimeOffset = view.getUint32(offset);\n            offset += 4;\n          }\n          result.samples.push(sample);\n          sampleCount--;\n        }\n\n        while (sampleCount--) {\n          sample = {};\n          if (sampleDurationPresent) {\n            sample.duration = view.getUint32(offset);\n            offset += 4;\n          }\n          if (sampleSizePresent) {\n            sample.size = view.getUint32(offset);\n            offset += 4;\n          }\n          if (sampleFlagsPresent) {\n            sample.flags = parseSampleFlags(data.subarray(offset, offset + 4));\n            offset += 4;\n          }\n          if (sampleCompositionTimeOffsetPresent) {\n            // Note: this should be a signed int if version is 1\n            sample.compositionTimeOffset = view.getUint32(offset);\n            offset += 4;\n          }\n          result.samples.push(sample);\n        }\n        return result;\n      },\n      'url ': function url(data) {\n        return {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4))\n        };\n      },\n      vmhd: function vmhd(data) {\n        var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n        return {\n          version: data[0],\n          flags: new Uint8Array(data.subarray(1, 4)),\n          graphicsmode: view.getUint16(4),\n          opcolor: new Uint16Array([view.getUint16(6), view.getUint16(8), view.getUint16(10)])\n        };\n      }\n    };\n\n    /**\n     * Return a javascript array of box objects parsed from an ISO base\n     * media file.\n     * @param data {Uint8Array} the binary data of the media to be inspected\n     * @return {array} a javascript array of potentially nested box objects\n     */\n    inspectMp4 = function inspectMp4(data) {\n      var i = 0,\n          result = [],\n          view,\n          size,\n          type,\n          end,\n          box;\n\n      // Convert data from Uint8Array to ArrayBuffer, to follow Dataview API\n      var ab = new ArrayBuffer(data.length);\n      var v = new Uint8Array(ab);\n      for (var z = 0; z < data.length; ++z) {\n        v[z] = data[z];\n      }\n      view = new DataView(ab);\n\n      while (i < data.byteLength) {\n        // parse box data\n        size = view.getUint32(i);\n        type = parseType$1(data.subarray(i + 4, i + 8));\n        end = size > 1 ? i + size : data.byteLength;\n\n        // parse type-specific data\n        box = (parse$$1[type] || function (data) {\n          return {\n            data: data\n          };\n        })(data.subarray(i + 8, end));\n        box.size = size;\n        box.type = type;\n\n        // store this box and move to the next\n        result.push(box);\n        i = end;\n      }\n      return result;\n    };\n\n    /**\n     * Returns a textual representation of the javascript represtentation\n     * of an MP4 file. You can use it as an alternative to\n     * JSON.stringify() to compare inspected MP4s.\n     * @param inspectedMp4 {array} the parsed array of boxes in an MP4\n     * file\n     * @param depth {number} (optional) the number of ancestor boxes of\n     * the elements of inspectedMp4. Assumed to be zero if unspecified.\n     * @return {string} a text representation of the parsed MP4\n     */\n    _textifyMp = function textifyMp4(inspectedMp4, depth) {\n      var indent;\n      depth = depth || 0;\n      indent = new Array(depth * 2 + 1).join(' ');\n\n      // iterate over all the boxes\n      return inspectedMp4.map(function (box, index) {\n\n        // list the box type first at the current indentation level\n        return indent + box.type + '\\n' +\n\n        // the type is already included and handle child boxes separately\n        Object.keys(box).filter(function (key) {\n          return key !== 'type' && key !== 'boxes';\n\n          // output all the box properties\n        }).map(function (key) {\n          var prefix = indent + '  ' + key + ': ',\n              value = box[key];\n\n          // print out raw bytes as hexademical\n          if (value instanceof Uint8Array || value instanceof Uint32Array) {\n            var bytes = Array.prototype.slice.call(new Uint8Array(value.buffer, value.byteOffset, value.byteLength)).map(function (byte) {\n              return ' ' + ('00' + byte.toString(16)).slice(-2);\n            }).join('').match(/.{1,24}/g);\n            if (!bytes) {\n              return prefix + '<>';\n            }\n            if (bytes.length === 1) {\n              return prefix + '<' + bytes.join('').slice(1) + '>';\n            }\n            return prefix + '<\\n' + bytes.map(function (line) {\n              return indent + '  ' + line;\n            }).join('\\n') + '\\n' + indent + '  >';\n          }\n\n          // stringify generic objects\n          return prefix + JSON.stringify(value, null, 2).split('\\n').map(function (line, index) {\n            if (index === 0) {\n              return line;\n            }\n            return indent + '  ' + line;\n          }).join('\\n');\n        }).join('\\n') + (\n\n        // recursively textify the child boxes\n        box.boxes ? '\\n' + _textifyMp(box.boxes, depth + 1) : '');\n      }).join('\\n');\n    };\n\n    var mp4Inspector = {\n      inspect: inspectMp4,\n      textify: _textifyMp,\n      parseTfdt: parse$$1.tfdt,\n      parseHdlr: parse$$1.hdlr,\n      parseTfhd: parse$$1.tfhd,\n      parseTrun: parse$$1.trun\n    };\n\n    var discardEmulationPreventionBytes$1 = captionPacketParser.discardEmulationPreventionBytes;\n    var CaptionStream$1 = captionStream.CaptionStream;\n\n    /**\n      * Maps an offset in the mdat to a sample based on the the size of the samples.\n      * Assumes that `parseSamples` has been called first.\n      *\n      * @param {Number} offset - The offset into the mdat\n      * @param {Object[]} samples - An array of samples, parsed using `parseSamples`\n      * @return {?Object} The matching sample, or null if no match was found.\n      *\n      * @see ISO-BMFF-12/2015, Section 8.8.8\n     **/\n    var mapToSample = function mapToSample(offset, samples) {\n      var approximateOffset = offset;\n\n      for (var i = 0; i < samples.length; i++) {\n        var sample = samples[i];\n\n        if (approximateOffset < sample.size) {\n          return sample;\n        }\n\n        approximateOffset -= sample.size;\n      }\n\n      return null;\n    };\n\n    /**\n      * Finds SEI nal units contained in a Media Data Box.\n      * Assumes that `parseSamples` has been called first.\n      *\n      * @param {Uint8Array} avcStream - The bytes of the mdat\n      * @param {Object[]} samples - The samples parsed out by `parseSamples`\n      * @param {Number} trackId - The trackId of this video track\n      * @return {Object[]} seiNals - the parsed SEI NALUs found.\n      *   The contents of the seiNal should match what is expected by\n      *   CaptionStream.push (nalUnitType, size, data, escapedRBSP, pts, dts)\n      *\n      * @see ISO-BMFF-12/2015, Section 8.1.1\n      * @see Rec. ITU-T H.264, 7.3.2.3.1\n     **/\n    var findSeiNals = function findSeiNals(avcStream, samples, trackId) {\n      var avcView = new DataView(avcStream.buffer, avcStream.byteOffset, avcStream.byteLength),\n          result = [],\n          seiNal,\n          i,\n          length,\n          lastMatchedSample;\n\n      for (i = 0; i + 4 < avcStream.length; i += length) {\n        length = avcView.getUint32(i);\n        i += 4;\n\n        // Bail if this doesn't appear to be an H264 stream\n        if (length <= 0) {\n          continue;\n        }\n\n        switch (avcStream[i] & 0x1F) {\n          case 0x06:\n            var data = avcStream.subarray(i + 1, i + 1 + length);\n            var matchingSample = mapToSample(i, samples);\n\n            seiNal = {\n              nalUnitType: 'sei_rbsp',\n              size: length,\n              data: data,\n              escapedRBSP: discardEmulationPreventionBytes$1(data),\n              trackId: trackId\n            };\n\n            if (matchingSample) {\n              seiNal.pts = matchingSample.pts;\n              seiNal.dts = matchingSample.dts;\n              lastMatchedSample = matchingSample;\n            } else {\n              // If a matching sample cannot be found, use the last\n              // sample's values as they should be as close as possible\n              seiNal.pts = lastMatchedSample.pts;\n              seiNal.dts = lastMatchedSample.dts;\n            }\n\n            result.push(seiNal);\n            break;\n          default:\n            break;\n        }\n      }\n\n      return result;\n    };\n\n    /**\n      * Parses sample information out of Track Run Boxes and calculates\n      * the absolute presentation and decode timestamps of each sample.\n      *\n      * @param {Array<Uint8Array>} truns - The Trun Run boxes to be parsed\n      * @param {Number} baseMediaDecodeTime - base media decode time from tfdt\n          @see ISO-BMFF-12/2015, Section 8.8.12\n      * @param {Object} tfhd - The parsed Track Fragment Header\n      *   @see inspect.parseTfhd\n      * @return {Object[]} the parsed samples\n      *\n      * @see ISO-BMFF-12/2015, Section 8.8.8\n     **/\n    var parseSamples = function parseSamples(truns, baseMediaDecodeTime, tfhd) {\n      var currentDts = baseMediaDecodeTime;\n      var defaultSampleDuration = tfhd.defaultSampleDuration || 0;\n      var defaultSampleSize = tfhd.defaultSampleSize || 0;\n      var trackId = tfhd.trackId;\n      var allSamples = [];\n\n      truns.forEach(function (trun) {\n        // Note: We currently do not parse the sample table as well\n        // as the trun. It's possible some sources will require this.\n        // moov > trak > mdia > minf > stbl\n        var trackRun = mp4Inspector.parseTrun(trun);\n        var samples = trackRun.samples;\n\n        samples.forEach(function (sample) {\n          if (sample.duration === undefined) {\n            sample.duration = defaultSampleDuration;\n          }\n          if (sample.size === undefined) {\n            sample.size = defaultSampleSize;\n          }\n          sample.trackId = trackId;\n          sample.dts = currentDts;\n          if (sample.compositionTimeOffset === undefined) {\n            sample.compositionTimeOffset = 0;\n          }\n          sample.pts = currentDts + sample.compositionTimeOffset;\n\n          currentDts += sample.duration;\n        });\n\n        allSamples = allSamples.concat(samples);\n      });\n\n      return allSamples;\n    };\n\n    /**\n      * Parses out caption nals from an FMP4 segment's video tracks.\n      *\n      * @param {Uint8Array} segment - The bytes of a single segment\n      * @param {Number} videoTrackId - The trackId of a video track in the segment\n      * @return {Object.<Number, Object[]>} A mapping of video trackId to\n      *   a list of seiNals found in that track\n     **/\n    var parseCaptionNals = function parseCaptionNals(segment, videoTrackId) {\n      // To get the samples\n      var trafs = probe.findBox(segment, ['moof', 'traf']);\n      // To get SEI NAL units\n      var mdats = probe.findBox(segment, ['mdat']);\n      var captionNals = {};\n      var mdatTrafPairs = [];\n\n      // Pair up each traf with a mdat as moofs and mdats are in pairs\n      mdats.forEach(function (mdat, index) {\n        var matchingTraf = trafs[index];\n        mdatTrafPairs.push({\n          mdat: mdat,\n          traf: matchingTraf\n        });\n      });\n\n      mdatTrafPairs.forEach(function (pair) {\n        var mdat = pair.mdat;\n        var traf = pair.traf;\n        var tfhd = probe.findBox(traf, ['tfhd']);\n        // Exactly 1 tfhd per traf\n        var headerInfo = mp4Inspector.parseTfhd(tfhd[0]);\n        var trackId = headerInfo.trackId;\n        var tfdt = probe.findBox(traf, ['tfdt']);\n        // Either 0 or 1 tfdt per traf\n        var baseMediaDecodeTime = tfdt.length > 0 ? mp4Inspector.parseTfdt(tfdt[0]).baseMediaDecodeTime : 0;\n        var truns = probe.findBox(traf, ['trun']);\n        var samples;\n        var seiNals;\n\n        // Only parse video data for the chosen video track\n        if (videoTrackId === trackId && truns.length > 0) {\n          samples = parseSamples(truns, baseMediaDecodeTime, headerInfo);\n\n          seiNals = findSeiNals(mdat, samples, trackId);\n\n          if (!captionNals[trackId]) {\n            captionNals[trackId] = [];\n          }\n\n          captionNals[trackId] = captionNals[trackId].concat(seiNals);\n        }\n      });\n\n      return captionNals;\n    };\n\n    /**\n      * Parses out inband captions from an MP4 container and returns\n      * caption objects that can be used by WebVTT and the TextTrack API.\n      * @see https://developer.mozilla.org/en-US/docs/Web/API/VTTCue\n      * @see https://developer.mozilla.org/en-US/docs/Web/API/TextTrack\n      * Assumes that `probe.getVideoTrackIds` and `probe.timescale` have been called first\n      *\n      * @param {Uint8Array} segment - The fmp4 segment containing embedded captions\n      * @param {Number} trackId - The id of the video track to parse\n      * @param {Number} timescale - The timescale for the video track from the init segment\n      *\n      * @return {?Object[]} parsedCaptions - A list of captions or null if no video tracks\n      * @return {Number} parsedCaptions[].startTime - The time to show the caption in seconds\n      * @return {Number} parsedCaptions[].endTime - The time to stop showing the caption in seconds\n      * @return {String} parsedCaptions[].text - The visible content of the caption\n     **/\n    var parseEmbeddedCaptions = function parseEmbeddedCaptions(segment, trackId, timescale) {\n      var seiNals;\n\n      if (!trackId) {\n        return null;\n      }\n\n      seiNals = parseCaptionNals(segment, trackId);\n\n      return {\n        seiNals: seiNals[trackId],\n        timescale: timescale\n      };\n    };\n\n    /**\n      * Converts SEI NALUs into captions that can be used by video.js\n     **/\n    var CaptionParser$$1 = function CaptionParser$$1() {\n      var isInitialized = false;\n      var captionStream$$1;\n\n      // Stores segments seen before trackId and timescale are set\n      var segmentCache;\n      // Stores video track ID of the track being parsed\n      var trackId;\n      // Stores the timescale of the track being parsed\n      var timescale;\n      // Stores captions parsed so far\n      var parsedCaptions;\n\n      /**\n        * A method to indicate whether a CaptionParser has been initalized\n        * @returns {Boolean}\n       **/\n      this.isInitialized = function () {\n        return isInitialized;\n      };\n\n      /**\n        * Initializes the underlying CaptionStream, SEI NAL parsing\n        * and management, and caption collection\n       **/\n      this.init = function () {\n        captionStream$$1 = new CaptionStream$1();\n        isInitialized = true;\n\n        // Collect dispatched captions\n        captionStream$$1.on('data', function (event) {\n          // Convert to seconds in the source's timescale\n          event.startTime = event.startPts / timescale;\n          event.endTime = event.endPts / timescale;\n\n          parsedCaptions.captions.push(event);\n          parsedCaptions.captionStreams[event.stream] = true;\n        });\n      };\n\n      /**\n        * Determines if a new video track will be selected\n        * or if the timescale changed\n        * @return {Boolean}\n       **/\n      this.isNewInit = function (videoTrackIds, timescales) {\n        if (videoTrackIds && videoTrackIds.length === 0 || timescales && (typeof timescales === 'undefined' ? 'undefined' : _typeof(timescales)) === 'object' && Object.keys(timescales).length === 0) {\n          return false;\n        }\n\n        return trackId !== videoTrackIds[0] || timescale !== timescales[trackId];\n      };\n\n      /**\n        * Parses out SEI captions and interacts with underlying\n        * CaptionStream to return dispatched captions\n        *\n        * @param {Uint8Array} segment - The fmp4 segment containing embedded captions\n        * @param {Number[]} videoTrackIds - A list of video tracks found in the init segment\n        * @param {Object.<Number, Number>} timescales - The timescales found in the init segment\n        * @see parseEmbeddedCaptions\n        * @see m2ts/caption-stream.js\n       **/\n      this.parse = function (segment, videoTrackIds, timescales) {\n        var parsedData;\n\n        if (!this.isInitialized()) {\n          return null;\n\n          // This is not likely to be a video segment\n        } else if (!videoTrackIds || !timescales) {\n          return null;\n        } else if (this.isNewInit(videoTrackIds, timescales)) {\n          // Use the first video track only as there is no\n          // mechanism to switch to other video tracks\n          trackId = videoTrackIds[0];\n          timescale = timescales[trackId];\n\n          // If an init segment has not been seen yet, hold onto segment\n          // data until we have one\n        } else if (!trackId || !timescale) {\n          segmentCache.push(segment);\n          return null;\n        }\n\n        // Now that a timescale and trackId is set, parse cached segments\n        while (segmentCache.length > 0) {\n          var cachedSegment = segmentCache.shift();\n\n          this.parse(cachedSegment, videoTrackIds, timescales);\n        }\n\n        parsedData = parseEmbeddedCaptions(segment, trackId, timescale);\n\n        if (parsedData === null || !parsedData.seiNals) {\n          return null;\n        }\n\n        this.pushNals(parsedData.seiNals);\n        // Force the parsed captions to be dispatched\n        this.flushStream();\n\n        return parsedCaptions;\n      };\n\n      /**\n        * Pushes SEI NALUs onto CaptionStream\n        * @param {Object[]} nals - A list of SEI nals parsed using `parseCaptionNals`\n        * Assumes that `parseCaptionNals` has been called first\n        * @see m2ts/caption-stream.js\n        **/\n      this.pushNals = function (nals) {\n        if (!this.isInitialized() || !nals || nals.length === 0) {\n          return null;\n        }\n\n        nals.forEach(function (nal) {\n          captionStream$$1.push(nal);\n        });\n      };\n\n      /**\n        * Flushes underlying CaptionStream to dispatch processed, displayable captions\n        * @see m2ts/caption-stream.js\n       **/\n      this.flushStream = function () {\n        if (!this.isInitialized()) {\n          return null;\n        }\n\n        captionStream$$1.flush();\n      };\n\n      /**\n        * Reset caption buckets for new data\n       **/\n      this.clearParsedCaptions = function () {\n        parsedCaptions.captions = [];\n        parsedCaptions.captionStreams = {};\n      };\n\n      /**\n        * Resets underlying CaptionStream\n        * @see m2ts/caption-stream.js\n       **/\n      this.resetCaptionStream = function () {\n        if (!this.isInitialized()) {\n          return null;\n        }\n\n        captionStream$$1.reset();\n      };\n\n      /**\n        * Convenience method to clear all captions flushed from the\n        * CaptionStream and still being parsed\n        * @see m2ts/caption-stream.js\n       **/\n      this.clearAllCaptions = function () {\n        this.clearParsedCaptions();\n        this.resetCaptionStream();\n      };\n\n      /**\n        * Reset caption parser\n       **/\n      this.reset = function () {\n        segmentCache = [];\n        trackId = null;\n        timescale = null;\n\n        if (!parsedCaptions) {\n          parsedCaptions = {\n            captions: [],\n            // CC1, CC2, CC3, CC4\n            captionStreams: {}\n          };\n        } else {\n          this.clearParsedCaptions();\n        }\n\n        this.resetCaptionStream();\n      };\n\n      this.reset();\n    };\n\n    var captionParser = CaptionParser$$1;\n\n    var mp4 = {\n      generator: mp4Generator,\n      probe: probe,\n      Transmuxer: transmuxer.Transmuxer,\n      AudioSegmentStream: transmuxer.AudioSegmentStream,\n      VideoSegmentStream: transmuxer.VideoSegmentStream,\n      CaptionParser: captionParser\n    };\n\n    var classCallCheck$$1 = function classCallCheck$$1(instance, Constructor) {\n      if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n      }\n    };\n\n    var createClass$$1 = function () {\n      function defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n          var descriptor = props[i];\n          descriptor.enumerable = descriptor.enumerable || false;\n          descriptor.configurable = true;\n          if (\"value\" in descriptor) descriptor.writable = true;\n          Object.defineProperty(target, descriptor.key, descriptor);\n        }\n      }\n\n      return function (Constructor, protoProps, staticProps) {\n        if (protoProps) defineProperties(Constructor.prototype, protoProps);\n        if (staticProps) defineProperties(Constructor, staticProps);\n        return Constructor;\n      };\n    }();\n\n    /**\n     * @file transmuxer-worker.js\n     */\n\n    /**\n     * Re-emits transmuxer events by converting them into messages to the\n     * world outside the worker.\n     *\n     * @param {Object} transmuxer the transmuxer to wire events on\n     * @private\n     */\n    var wireTransmuxerEvents = function wireTransmuxerEvents(self, transmuxer) {\n      transmuxer.on('data', function (segment) {\n        // transfer ownership of the underlying ArrayBuffer\n        // instead of doing a copy to save memory\n        // ArrayBuffers are transferable but generic TypedArrays are not\n        // @link https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers#Passing_data_by_transferring_ownership_(transferable_objects)\n        var initArray = segment.initSegment;\n\n        segment.initSegment = {\n          data: initArray.buffer,\n          byteOffset: initArray.byteOffset,\n          byteLength: initArray.byteLength\n        };\n\n        var typedArray = segment.data;\n\n        segment.data = typedArray.buffer;\n        self.postMessage({\n          action: 'data',\n          segment: segment,\n          byteOffset: typedArray.byteOffset,\n          byteLength: typedArray.byteLength\n        }, [segment.data]);\n      });\n\n      if (transmuxer.captionStream) {\n        transmuxer.captionStream.on('data', function (caption) {\n          self.postMessage({\n            action: 'caption',\n            data: caption\n          });\n        });\n      }\n\n      transmuxer.on('done', function (data) {\n        self.postMessage({ action: 'done' });\n      });\n\n      transmuxer.on('gopInfo', function (gopInfo) {\n        self.postMessage({\n          action: 'gopInfo',\n          gopInfo: gopInfo\n        });\n      });\n    };\n\n    /**\n     * All incoming messages route through this hash. If no function exists\n     * to handle an incoming message, then we ignore the message.\n     *\n     * @class MessageHandlers\n     * @param {Object} options the options to initialize with\n     */\n\n    var MessageHandlers = function () {\n      function MessageHandlers(self, options) {\n        classCallCheck$$1(this, MessageHandlers);\n\n        this.options = options || {};\n        this.self = self;\n        this.init();\n      }\n\n      /**\n       * initialize our web worker and wire all the events.\n       */\n\n      createClass$$1(MessageHandlers, [{\n        key: 'init',\n        value: function init() {\n          if (this.transmuxer) {\n            this.transmuxer.dispose();\n          }\n          this.transmuxer = new mp4.Transmuxer(this.options);\n          wireTransmuxerEvents(this.self, this.transmuxer);\n        }\n\n        /**\n         * Adds data (a ts segment) to the start of the transmuxer pipeline for\n         * processing.\n         *\n         * @param {ArrayBuffer} data data to push into the muxer\n         */\n\n      }, {\n        key: 'push',\n        value: function push(data) {\n          // Cast array buffer to correct type for transmuxer\n          var segment = new Uint8Array(data.data, data.byteOffset, data.byteLength);\n\n          this.transmuxer.push(segment);\n        }\n\n        /**\n         * Recreate the transmuxer so that the next segment added via `push`\n         * start with a fresh transmuxer.\n         */\n\n      }, {\n        key: 'reset',\n        value: function reset() {\n          this.init();\n        }\n\n        /**\n         * Set the value that will be used as the `baseMediaDecodeTime` time for the\n         * next segment pushed in. Subsequent segments will have their `baseMediaDecodeTime`\n         * set relative to the first based on the PTS values.\n         *\n         * @param {Object} data used to set the timestamp offset in the muxer\n         */\n\n      }, {\n        key: 'setTimestampOffset',\n        value: function setTimestampOffset(data) {\n          var timestampOffset = data.timestampOffset || 0;\n\n          this.transmuxer.setBaseMediaDecodeTime(Math.round(timestampOffset * 90000));\n        }\n      }, {\n        key: 'setAudioAppendStart',\n        value: function setAudioAppendStart(data) {\n          this.transmuxer.setAudioAppendStart(Math.ceil(data.appendStart * 90000));\n        }\n\n        /**\n         * Forces the pipeline to finish processing the last segment and emit it's\n         * results.\n         *\n         * @param {Object} data event data, not really used\n         */\n\n      }, {\n        key: 'flush',\n        value: function flush(data) {\n          this.transmuxer.flush();\n        }\n      }, {\n        key: 'resetCaptions',\n        value: function resetCaptions() {\n          this.transmuxer.resetCaptions();\n        }\n      }, {\n        key: 'alignGopsWith',\n        value: function alignGopsWith(data) {\n          this.transmuxer.alignGopsWith(data.gopsToAlignWith.slice());\n        }\n      }]);\n      return MessageHandlers;\n    }();\n\n    /**\n     * Our web wroker interface so that things can talk to mux.js\n     * that will be running in a web worker. the scope is passed to this by\n     * webworkify.\n     *\n     * @param {Object} self the scope for the web worker\n     */\n\n    var TransmuxerWorker = function TransmuxerWorker(self) {\n      self.onmessage = function (event) {\n        if (event.data.action === 'init' && event.data.options) {\n          this.messageHandlers = new MessageHandlers(self, event.data.options);\n          return;\n        }\n\n        if (!this.messageHandlers) {\n          this.messageHandlers = new MessageHandlers(self);\n        }\n\n        if (event.data && event.data.action && event.data.action !== 'init') {\n          if (this.messageHandlers[event.data.action]) {\n            this.messageHandlers[event.data.action](event.data);\n          }\n        }\n      };\n    };\n\n    var transmuxerWorker = new TransmuxerWorker(self);\n\n    return transmuxerWorker;\n  }();\n});\n\n/**\n * @file - codecs.js - Handles tasks regarding codec strings such as translating them to\n * codec strings, or translating codec strings into objects that can be examined.\n */\n\n// Default codec parameters if none were provided for video and/or audio\nvar defaultCodecs = {\n  videoCodec: 'avc1',\n  videoObjectTypeIndicator: '.4d400d',\n  // AAC-LC\n  audioProfile: '2'\n};\n\n/**\n * Replace the old apple-style `avc1.<dd>.<dd>` codec string with the standard\n * `avc1.<hhhhhh>`\n *\n * @param {Array} codecs an array of codec strings to fix\n * @return {Array} the translated codec array\n * @private\n */\nvar translateLegacyCodecs = function translateLegacyCodecs(codecs) {\n  return codecs.map(function (codec) {\n    return codec.replace(/avc1\\.(\\d+)\\.(\\d+)/i, function (orig, profile, avcLevel) {\n      var profileHex = ('00' + Number(profile).toString(16)).slice(-2);\n      var avcLevelHex = ('00' + Number(avcLevel).toString(16)).slice(-2);\n\n      return 'avc1.' + profileHex + '00' + avcLevelHex;\n    });\n  });\n};\n\n/**\n * Parses a codec string to retrieve the number of codecs specified,\n * the video codec and object type indicator, and the audio profile.\n */\n\nvar parseCodecs = function parseCodecs() {\n  var codecs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n  var result = {\n    codecCount: 0\n  };\n  var parsed = void 0;\n\n  result.codecCount = codecs.split(',').length;\n  result.codecCount = result.codecCount || 2;\n\n  // parse the video codec\n  parsed = /(^|\\s|,)+(avc[13])([^ ,]*)/i.exec(codecs);\n  if (parsed) {\n    result.videoCodec = parsed[2];\n    result.videoObjectTypeIndicator = parsed[3];\n  }\n\n  // parse the last field of the audio codec\n  result.audioProfile = /(^|\\s|,)+mp4a.[0-9A-Fa-f]+\\.([0-9A-Fa-f]+)/i.exec(codecs);\n  result.audioProfile = result.audioProfile && result.audioProfile[2];\n\n  return result;\n};\n\n/**\n * Replace codecs in the codec string with the old apple-style `avc1.<dd>.<dd>` to the\n * standard `avc1.<hhhhhh>`.\n *\n * @param codecString {String} the codec string\n * @return {String} the codec string with old apple-style codecs replaced\n *\n * @private\n */\nvar mapLegacyAvcCodecs = function mapLegacyAvcCodecs(codecString) {\n  return codecString.replace(/avc1\\.(\\d+)\\.(\\d+)/i, function (match) {\n    return translateLegacyCodecs([match])[0];\n  });\n};\n\n/**\n * Build a media mime-type string from a set of parameters\n * @param {String} type either 'audio' or 'video'\n * @param {String} container either 'mp2t' or 'mp4'\n * @param {Array} codecs an array of codec strings to add\n * @return {String} a valid media mime-type\n */\nvar makeMimeTypeString = function makeMimeTypeString(type, container, codecs) {\n  // The codecs array is filtered so that falsey values are\n  // dropped and don't cause Array#join to create spurious\n  // commas\n  return type + '/' + container + '; codecs=\"' + codecs.filter(function (c) {\n    return !!c;\n  }).join(', ') + '\"';\n};\n\n/**\n * Returns the type container based on information in the playlist\n * @param {Playlist} media the current media playlist\n * @return {String} a valid media container type\n */\nvar getContainerType = function getContainerType(media) {\n  // An initialization segment means the media playlist is an iframe\n  // playlist or is using the mp4 container. We don't currently\n  // support iframe playlists, so assume this is signalling mp4\n  // fragments.\n  if (media.segments && media.segments.length && media.segments[0].map) {\n    return 'mp4';\n  }\n  return 'mp2t';\n};\n\n/**\n * Returns a set of codec strings parsed from the playlist or the default\n * codec strings if no codecs were specified in the playlist\n * @param {Playlist} media the current media playlist\n * @return {Object} an object with the video and audio codecs\n */\nvar getCodecs = function getCodecs(media) {\n  // if the codecs were explicitly specified, use them instead of the\n  // defaults\n  var mediaAttributes = media.attributes || {};\n\n  if (mediaAttributes.CODECS) {\n    return parseCodecs(mediaAttributes.CODECS);\n  }\n  return defaultCodecs;\n};\n\nvar audioProfileFromDefault = function audioProfileFromDefault(master, audioGroupId) {\n  if (!master.mediaGroups.AUDIO || !audioGroupId) {\n    return null;\n  }\n\n  var audioGroup = master.mediaGroups.AUDIO[audioGroupId];\n\n  if (!audioGroup) {\n    return null;\n  }\n\n  for (var name in audioGroup) {\n    var audioType = audioGroup[name];\n\n    if (audioType.default && audioType.playlists) {\n      // codec should be the same for all playlists within the audio type\n      return parseCodecs(audioType.playlists[0].attributes.CODECS).audioProfile;\n    }\n  }\n\n  return null;\n};\n\n/**\n * Calculates the MIME type strings for a working configuration of\n * SourceBuffers to play variant streams in a master playlist. If\n * there is no possible working configuration, an empty array will be\n * returned.\n *\n * @param master {Object} the m3u8 object for the master playlist\n * @param media {Object} the m3u8 object for the variant playlist\n * @return {Array} the MIME type strings. If the array has more than\n * one entry, the first element should be applied to the video\n * SourceBuffer and the second to the audio SourceBuffer.\n *\n * @private\n */\nvar mimeTypesForPlaylist = function mimeTypesForPlaylist(master, media) {\n  var containerType = getContainerType(media);\n  var codecInfo = getCodecs(media);\n  var mediaAttributes = media.attributes || {};\n  // Default condition for a traditional HLS (no demuxed audio/video)\n  var isMuxed = true;\n  var isMaat = false;\n\n  if (!media) {\n    // Not enough information\n    return [];\n  }\n\n  if (master.mediaGroups.AUDIO && mediaAttributes.AUDIO) {\n    var audioGroup = master.mediaGroups.AUDIO[mediaAttributes.AUDIO];\n\n    // Handle the case where we are in a multiple-audio track scenario\n    if (audioGroup) {\n      isMaat = true;\n      // Start with the everything demuxed then...\n      isMuxed = false;\n      // ...check to see if any audio group tracks are muxed (ie. lacking a uri)\n      for (var groupId in audioGroup) {\n        // either a uri is present (if the case of HLS and an external playlist), or\n        // playlists is present (in the case of DASH where we don't have external audio\n        // playlists)\n        if (!audioGroup[groupId].uri && !audioGroup[groupId].playlists) {\n          isMuxed = true;\n          break;\n        }\n      }\n    }\n  }\n\n  // HLS with multiple-audio tracks must always get an audio codec.\n  // Put another way, there is no way to have a video-only multiple-audio HLS!\n  if (isMaat && !codecInfo.audioProfile) {\n    if (!isMuxed) {\n      // It is possible for codecs to be specified on the audio media group playlist but\n      // not on the rendition playlist. This is mostly the case for DASH, where audio and\n      // video are always separate (and separately specified).\n      codecInfo.audioProfile = audioProfileFromDefault(master, mediaAttributes.AUDIO);\n    }\n\n    if (!codecInfo.audioProfile) {\n      videojs$1.log.warn('Multiple audio tracks present but no audio codec string is specified. ' + 'Attempting to use the default audio codec (mp4a.40.2)');\n      codecInfo.audioProfile = defaultCodecs.audioProfile;\n    }\n  }\n\n  // Generate the final codec strings from the codec object generated above\n  var codecStrings = {};\n\n  if (codecInfo.videoCodec) {\n    codecStrings.video = '' + codecInfo.videoCodec + codecInfo.videoObjectTypeIndicator;\n  }\n\n  if (codecInfo.audioProfile) {\n    codecStrings.audio = 'mp4a.40.' + codecInfo.audioProfile;\n  }\n\n  // Finally, make and return an array with proper mime-types depending on\n  // the configuration\n  var justAudio = makeMimeTypeString('audio', containerType, [codecStrings.audio]);\n  var justVideo = makeMimeTypeString('video', containerType, [codecStrings.video]);\n  var bothVideoAudio = makeMimeTypeString('video', containerType, [codecStrings.video, codecStrings.audio]);\n\n  if (isMaat) {\n    if (!isMuxed && codecStrings.video) {\n      return [justVideo, justAudio];\n    }\n\n    if (!isMuxed && !codecStrings.video) {\n      // There is no muxed content and no video codec string, so this is an audio only\n      // stream with alternate audio.\n      return [justAudio, justAudio];\n    }\n\n    // There exists the possiblity that this will return a `video/container`\n    // mime-type for the first entry in the array even when there is only audio.\n    // This doesn't appear to be a problem and simplifies the code.\n    return [bothVideoAudio, justAudio];\n  }\n\n  // If there is no video codec at all, always just return a single\n  // audio/<container> mime-type\n  if (!codecStrings.video) {\n    return [justAudio];\n  }\n\n  // When not using separate audio media groups, audio and video is\n  // *always* muxed\n  return [bothVideoAudio];\n};\n\n/**\n * Parse a content type header into a type and parameters\n * object\n *\n * @param {String} type the content type header\n * @return {Object} the parsed content-type\n * @private\n */\nvar parseContentType = function parseContentType(type) {\n  var object = { type: '', parameters: {} };\n  var parameters = type.trim().split(';');\n\n  // first parameter should always be content-type\n  object.type = parameters.shift().trim();\n  parameters.forEach(function (parameter) {\n    var pair = parameter.trim().split('=');\n\n    if (pair.length > 1) {\n      var name = pair[0].replace(/\"/g, '').trim();\n      var value = pair[1].replace(/\"/g, '').trim();\n\n      object.parameters[name] = value;\n    }\n  });\n\n  return object;\n};\n\n/**\n * Check if a codec string refers to an audio codec.\n *\n * @param {String} codec codec string to check\n * @return {Boolean} if this is an audio codec\n * @private\n */\nvar isAudioCodec = function isAudioCodec(codec) {\n  return (/mp4a\\.\\d+.\\d+/i.test(codec)\n  );\n};\n\n/**\n * Check if a codec string refers to a video codec.\n *\n * @param {String} codec codec string to check\n * @return {Boolean} if this is a video codec\n * @private\n */\nvar isVideoCodec = function isVideoCodec(codec) {\n  return (/avc1\\.[\\da-f]+/i.test(codec)\n  );\n};\n\n/**\n * Returns a list of gops in the buffer that have a pts value of 3 seconds or more in\n * front of current time.\n *\n * @param {Array} buffer\n *        The current buffer of gop information\n * @param {Number} currentTime\n *        The current time\n * @param {Double} mapping\n *        Offset to map display time to stream presentation time\n * @return {Array}\n *         List of gops considered safe to append over\n */\nvar gopsSafeToAlignWith = function gopsSafeToAlignWith(buffer, currentTime, mapping) {\n  if (typeof currentTime === 'undefined' || currentTime === null || !buffer.length) {\n    return [];\n  }\n\n  // pts value for current time + 3 seconds to give a bit more wiggle room\n  var currentTimePts = Math.ceil((currentTime - mapping + 3) * 90000);\n\n  var i = void 0;\n\n  for (i = 0; i < buffer.length; i++) {\n    if (buffer[i].pts > currentTimePts) {\n      break;\n    }\n  }\n\n  return buffer.slice(i);\n};\n\n/**\n * Appends gop information (timing and byteLength) received by the transmuxer for the\n * gops appended in the last call to appendBuffer\n *\n * @param {Array} buffer\n *        The current buffer of gop information\n * @param {Array} gops\n *        List of new gop information\n * @param {boolean} replace\n *        If true, replace the buffer with the new gop information. If false, append the\n *        new gop information to the buffer in the right location of time.\n * @return {Array}\n *         Updated list of gop information\n */\nvar updateGopBuffer = function updateGopBuffer(buffer, gops, replace) {\n  if (!gops.length) {\n    return buffer;\n  }\n\n  if (replace) {\n    // If we are in safe append mode, then completely overwrite the gop buffer\n    // with the most recent appeneded data. This will make sure that when appending\n    // future segments, we only try to align with gops that are both ahead of current\n    // time and in the last segment appended.\n    return gops.slice();\n  }\n\n  var start = gops[0].pts;\n\n  var i = 0;\n\n  for (i; i < buffer.length; i++) {\n    if (buffer[i].pts >= start) {\n      break;\n    }\n  }\n\n  return buffer.slice(0, i).concat(gops);\n};\n\n/**\n * Removes gop information in buffer that overlaps with provided start and end\n *\n * @param {Array} buffer\n *        The current buffer of gop information\n * @param {Double} start\n *        position to start the remove at\n * @param {Double} end\n *        position to end the remove at\n * @param {Double} mapping\n *        Offset to map display time to stream presentation time\n */\nvar removeGopBuffer = function removeGopBuffer(buffer, start, end, mapping) {\n  var startPts = Math.ceil((start - mapping) * 90000);\n  var endPts = Math.ceil((end - mapping) * 90000);\n  var updatedBuffer = buffer.slice();\n\n  var i = buffer.length;\n\n  while (i--) {\n    if (buffer[i].pts <= endPts) {\n      break;\n    }\n  }\n\n  if (i === -1) {\n    // no removal because end of remove range is before start of buffer\n    return updatedBuffer;\n  }\n\n  var j = i + 1;\n\n  while (j--) {\n    if (buffer[j].pts <= startPts) {\n      break;\n    }\n  }\n\n  // clamp remove range start to 0 index\n  j = Math.max(j, 0);\n\n  updatedBuffer.splice(j, i - j + 1);\n\n  return updatedBuffer;\n};\n\nvar buffered = function buffered(videoBuffer, audioBuffer, audioDisabled) {\n  var start = null;\n  var end = null;\n  var arity = 0;\n  var extents = [];\n  var ranges = [];\n\n  // neither buffer has been created yet\n  if (!videoBuffer && !audioBuffer) {\n    return videojs$1.createTimeRange();\n  }\n\n  // only one buffer is configured\n  if (!videoBuffer) {\n    return audioBuffer.buffered;\n  }\n  if (!audioBuffer) {\n    return videoBuffer.buffered;\n  }\n\n  // both buffers are configured\n  if (audioDisabled) {\n    return videoBuffer.buffered;\n  }\n\n  // both buffers are empty\n  if (videoBuffer.buffered.length === 0 && audioBuffer.buffered.length === 0) {\n    return videojs$1.createTimeRange();\n  }\n\n  // Handle the case where we have both buffers and create an\n  // intersection of the two\n  var videoBuffered = videoBuffer.buffered;\n  var audioBuffered = audioBuffer.buffered;\n  var count = videoBuffered.length;\n\n  // A) Gather up all start and end times\n  while (count--) {\n    extents.push({ time: videoBuffered.start(count), type: 'start' });\n    extents.push({ time: videoBuffered.end(count), type: 'end' });\n  }\n  count = audioBuffered.length;\n  while (count--) {\n    extents.push({ time: audioBuffered.start(count), type: 'start' });\n    extents.push({ time: audioBuffered.end(count), type: 'end' });\n  }\n  // B) Sort them by time\n  extents.sort(function (a, b) {\n    return a.time - b.time;\n  });\n\n  // C) Go along one by one incrementing arity for start and decrementing\n  //    arity for ends\n  for (count = 0; count < extents.length; count++) {\n    if (extents[count].type === 'start') {\n      arity++;\n\n      // D) If arity is ever incremented to 2 we are entering an\n      //    overlapping range\n      if (arity === 2) {\n        start = extents[count].time;\n      }\n    } else if (extents[count].type === 'end') {\n      arity--;\n\n      // E) If arity is ever decremented to 1 we leaving an\n      //    overlapping range\n      if (arity === 1) {\n        end = extents[count].time;\n      }\n    }\n\n    // F) Record overlapping ranges\n    if (start !== null && end !== null) {\n      ranges.push([start, end]);\n      start = null;\n      end = null;\n    }\n  }\n\n  return videojs$1.createTimeRanges(ranges);\n};\n\n/**\n * @file virtual-source-buffer.js\n */\n\n// We create a wrapper around the SourceBuffer so that we can manage the\n// state of the `updating` property manually. We have to do this because\n// Firefox changes `updating` to false long before triggering `updateend`\n// events and that was causing strange problems in videojs-contrib-hls\nvar makeWrappedSourceBuffer = function makeWrappedSourceBuffer(mediaSource, mimeType) {\n  var sourceBuffer = mediaSource.addSourceBuffer(mimeType);\n  var wrapper = Object.create(null);\n\n  wrapper.updating = false;\n  wrapper.realBuffer_ = sourceBuffer;\n\n  var _loop = function _loop(key) {\n    if (typeof sourceBuffer[key] === 'function') {\n      wrapper[key] = function () {\n        return sourceBuffer[key].apply(sourceBuffer, arguments);\n      };\n    } else if (typeof wrapper[key] === 'undefined') {\n      Object.defineProperty(wrapper, key, {\n        get: function get$$1() {\n          return sourceBuffer[key];\n        },\n        set: function set$$1(v) {\n          return sourceBuffer[key] = v;\n        }\n      });\n    }\n  };\n\n  for (var key in sourceBuffer) {\n    _loop(key);\n  }\n\n  return wrapper;\n};\n\n/**\n * VirtualSourceBuffers exist so that we can transmux non native formats\n * into a native format, but keep the same api as a native source buffer.\n * It creates a transmuxer, that works in its own thread (a web worker) and\n * that transmuxer muxes the data into a native format. VirtualSourceBuffer will\n * then send all of that data to the naive sourcebuffer so that it is\n * indestinguishable from a natively supported format.\n *\n * @param {HtmlMediaSource} mediaSource the parent mediaSource\n * @param {Array} codecs array of codecs that we will be dealing with\n * @class VirtualSourceBuffer\n * @extends video.js.EventTarget\n */\n\nvar VirtualSourceBuffer = function (_videojs$EventTarget) {\n  inherits$1(VirtualSourceBuffer, _videojs$EventTarget);\n\n  function VirtualSourceBuffer(mediaSource, codecs) {\n    classCallCheck$1(this, VirtualSourceBuffer);\n\n    var _this = possibleConstructorReturn$1(this, (VirtualSourceBuffer.__proto__ || Object.getPrototypeOf(VirtualSourceBuffer)).call(this, videojs$1.EventTarget));\n\n    _this.timestampOffset_ = 0;\n    _this.pendingBuffers_ = [];\n    _this.bufferUpdating_ = false;\n\n    _this.mediaSource_ = mediaSource;\n    _this.codecs_ = codecs;\n    _this.audioCodec_ = null;\n    _this.videoCodec_ = null;\n    _this.audioDisabled_ = false;\n    _this.appendAudioInitSegment_ = true;\n    _this.gopBuffer_ = [];\n    _this.timeMapping_ = 0;\n    _this.safeAppend_ = videojs$1.browser.IE_VERSION >= 11;\n\n    var options = {\n      remux: false,\n      alignGopsAtEnd: _this.safeAppend_\n    };\n\n    _this.codecs_.forEach(function (codec) {\n      if (isAudioCodec(codec)) {\n        _this.audioCodec_ = codec;\n      } else if (isVideoCodec(codec)) {\n        _this.videoCodec_ = codec;\n      }\n    });\n\n    // append muxed segments to their respective native buffers as\n    // soon as they are available\n    _this.transmuxer_ = new TransmuxWorker();\n    _this.transmuxer_.postMessage({ action: 'init', options: options });\n\n    _this.transmuxer_.onmessage = function (event) {\n      if (event.data.action === 'data') {\n        return _this.data_(event);\n      }\n\n      if (event.data.action === 'done') {\n        return _this.done_(event);\n      }\n\n      if (event.data.action === 'gopInfo') {\n        return _this.appendGopInfo_(event);\n      }\n    };\n\n    // this timestampOffset is a property with the side-effect of resetting\n    // baseMediaDecodeTime in the transmuxer on the setter\n    Object.defineProperty(_this, 'timestampOffset', {\n      get: function get$$1() {\n        return this.timestampOffset_;\n      },\n      set: function set$$1(val) {\n        if (typeof val === 'number' && val >= 0) {\n          this.timestampOffset_ = val;\n          this.appendAudioInitSegment_ = true;\n\n          // reset gop buffer on timestampoffset as this signals a change in timeline\n          this.gopBuffer_.length = 0;\n          this.timeMapping_ = 0;\n\n          // We have to tell the transmuxer to set the baseMediaDecodeTime to\n          // the desired timestampOffset for the next segment\n          this.transmuxer_.postMessage({\n            action: 'setTimestampOffset',\n            timestampOffset: val\n          });\n        }\n      }\n    });\n\n    // setting the append window affects both source buffers\n    Object.defineProperty(_this, 'appendWindowStart', {\n      get: function get$$1() {\n        return (this.videoBuffer_ || this.audioBuffer_).appendWindowStart;\n      },\n      set: function set$$1(start) {\n        if (this.videoBuffer_) {\n          this.videoBuffer_.appendWindowStart = start;\n        }\n        if (this.audioBuffer_) {\n          this.audioBuffer_.appendWindowStart = start;\n        }\n      }\n    });\n\n    // this buffer is \"updating\" if either of its native buffers are\n    Object.defineProperty(_this, 'updating', {\n      get: function get$$1() {\n        return !!(this.bufferUpdating_ || !this.audioDisabled_ && this.audioBuffer_ && this.audioBuffer_.updating || this.videoBuffer_ && this.videoBuffer_.updating);\n      }\n    });\n\n    // the buffered property is the intersection of the buffered\n    // ranges of the native source buffers\n    Object.defineProperty(_this, 'buffered', {\n      get: function get$$1() {\n        return buffered(this.videoBuffer_, this.audioBuffer_, this.audioDisabled_);\n      }\n    });\n    return _this;\n  }\n\n  /**\n   * When we get a data event from the transmuxer\n   * we call this function and handle the data that\n   * was sent to us\n   *\n   * @private\n   * @param {Event} event the data event from the transmuxer\n   */\n\n  createClass$1(VirtualSourceBuffer, [{\n    key: 'data_',\n    value: function data_(event) {\n      var segment = event.data.segment;\n\n      // Cast ArrayBuffer to TypedArray\n      segment.data = new Uint8Array(segment.data, event.data.byteOffset, event.data.byteLength);\n\n      segment.initSegment = new Uint8Array(segment.initSegment.data, segment.initSegment.byteOffset, segment.initSegment.byteLength);\n\n      createTextTracksIfNecessary(this, this.mediaSource_, segment);\n\n      // Add the segments to the pendingBuffers array\n      this.pendingBuffers_.push(segment);\n      return;\n    }\n\n    /**\n     * When we get a done event from the transmuxer\n     * we call this function and we process all\n     * of the pending data that we have been saving in the\n     * data_ function\n     *\n     * @private\n     * @param {Event} event the done event from the transmuxer\n     */\n\n  }, {\n    key: 'done_',\n    value: function done_(event) {\n      // Don't process and append data if the mediaSource is closed\n      if (this.mediaSource_.readyState === 'closed') {\n        this.pendingBuffers_.length = 0;\n        return;\n      }\n\n      // All buffers should have been flushed from the muxer\n      // start processing anything we have received\n      this.processPendingSegments_();\n      return;\n    }\n\n    /**\n     * Create our internal native audio/video source buffers and add\n     * event handlers to them with the following conditions:\n     * 1. they do not already exist on the mediaSource\n     * 2. this VSB has a codec for them\n     *\n     * @private\n     */\n\n  }, {\n    key: 'createRealSourceBuffers_',\n    value: function createRealSourceBuffers_() {\n      var _this2 = this;\n\n      var types = ['audio', 'video'];\n\n      types.forEach(function (type) {\n        // Don't create a SourceBuffer of this type if we don't have a\n        // codec for it\n        if (!_this2[type + 'Codec_']) {\n          return;\n        }\n\n        // Do nothing if a SourceBuffer of this type already exists\n        if (_this2[type + 'Buffer_']) {\n          return;\n        }\n\n        var buffer = null;\n\n        // If the mediasource already has a SourceBuffer for the codec\n        // use that\n        if (_this2.mediaSource_[type + 'Buffer_']) {\n          buffer = _this2.mediaSource_[type + 'Buffer_'];\n          // In multiple audio track cases, the audio source buffer is disabled\n          // on the main VirtualSourceBuffer by the HTMLMediaSource much earlier\n          // than createRealSourceBuffers_ is called to create the second\n          // VirtualSourceBuffer because that happens as a side-effect of\n          // videojs-contrib-hls starting the audioSegmentLoader. As a result,\n          // the audioBuffer is essentially \"ownerless\" and no one will toggle\n          // the `updating` state back to false once the `updateend` event is received\n          //\n          // Setting `updating` to false manually will work around this\n          // situation and allow work to continue\n          buffer.updating = false;\n        } else {\n          var codecProperty = type + 'Codec_';\n          var mimeType = type + '/mp4;codecs=\"' + _this2[codecProperty] + '\"';\n\n          buffer = makeWrappedSourceBuffer(_this2.mediaSource_.nativeMediaSource_, mimeType);\n\n          _this2.mediaSource_[type + 'Buffer_'] = buffer;\n        }\n\n        _this2[type + 'Buffer_'] = buffer;\n\n        // Wire up the events to the SourceBuffer\n        ['update', 'updatestart', 'updateend'].forEach(function (event) {\n          buffer.addEventListener(event, function () {\n            // if audio is disabled\n            if (type === 'audio' && _this2.audioDisabled_) {\n              return;\n            }\n\n            if (event === 'updateend') {\n              _this2[type + 'Buffer_'].updating = false;\n            }\n\n            var shouldTrigger = types.every(function (t) {\n              // skip checking audio's updating status if audio\n              // is not enabled\n              if (t === 'audio' && _this2.audioDisabled_) {\n                return true;\n              }\n              // if the other type if updating we don't trigger\n              if (type !== t && _this2[t + 'Buffer_'] && _this2[t + 'Buffer_'].updating) {\n                return false;\n              }\n              return true;\n            });\n\n            if (shouldTrigger) {\n              return _this2.trigger(event);\n            }\n          });\n        });\n      });\n    }\n\n    /**\n     * Emulate the native mediasource function, but our function will\n     * send all of the proposed segments to the transmuxer so that we\n     * can transmux them before we append them to our internal\n     * native source buffers in the correct format.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/appendBuffer\n     * @param {Uint8Array} segment the segment to append to the buffer\n     */\n\n  }, {\n    key: 'appendBuffer',\n    value: function appendBuffer(segment) {\n      // Start the internal \"updating\" state\n      this.bufferUpdating_ = true;\n\n      if (this.audioBuffer_ && this.audioBuffer_.buffered.length) {\n        var audioBuffered = this.audioBuffer_.buffered;\n\n        this.transmuxer_.postMessage({\n          action: 'setAudioAppendStart',\n          appendStart: audioBuffered.end(audioBuffered.length - 1)\n        });\n      }\n\n      if (this.videoBuffer_) {\n        this.transmuxer_.postMessage({\n          action: 'alignGopsWith',\n          gopsToAlignWith: gopsSafeToAlignWith(this.gopBuffer_, this.mediaSource_.player_ ? this.mediaSource_.player_.currentTime() : null, this.timeMapping_)\n        });\n      }\n\n      this.transmuxer_.postMessage({\n        action: 'push',\n        // Send the typed-array of data as an ArrayBuffer so that\n        // it can be sent as a \"Transferable\" and avoid the costly\n        // memory copy\n        data: segment.buffer,\n\n        // To recreate the original typed-array, we need information\n        // about what portion of the ArrayBuffer it was a view into\n        byteOffset: segment.byteOffset,\n        byteLength: segment.byteLength\n      }, [segment.buffer]);\n      this.transmuxer_.postMessage({ action: 'flush' });\n    }\n\n    /**\n     * Appends gop information (timing and byteLength) received by the transmuxer for the\n     * gops appended in the last call to appendBuffer\n     *\n     * @param {Event} event\n     *        The gopInfo event from the transmuxer\n     * @param {Array} event.data.gopInfo\n     *        List of gop info to append\n     */\n\n  }, {\n    key: 'appendGopInfo_',\n    value: function appendGopInfo_(event) {\n      this.gopBuffer_ = updateGopBuffer(this.gopBuffer_, event.data.gopInfo, this.safeAppend_);\n    }\n\n    /**\n     * Emulate the native mediasource function and remove parts\n     * of the buffer from any of our internal buffers that exist\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/remove\n     * @param {Double} start position to start the remove at\n     * @param {Double} end position to end the remove at\n     */\n\n  }, {\n    key: 'remove',\n    value: function remove(start, end) {\n      if (this.videoBuffer_) {\n        this.videoBuffer_.updating = true;\n        this.videoBuffer_.remove(start, end);\n        this.gopBuffer_ = removeGopBuffer(this.gopBuffer_, start, end, this.timeMapping_);\n      }\n      if (!this.audioDisabled_ && this.audioBuffer_) {\n        this.audioBuffer_.updating = true;\n        this.audioBuffer_.remove(start, end);\n      }\n\n      // Remove Metadata Cues (id3)\n      removeCuesFromTrack(start, end, this.metadataTrack_);\n\n      // Remove Any Captions\n      if (this.inbandTextTracks_) {\n        for (var track in this.inbandTextTracks_) {\n          removeCuesFromTrack(start, end, this.inbandTextTracks_[track]);\n        }\n      }\n    }\n\n    /**\n     * Process any segments that the muxer has output\n     * Concatenate segments together based on type and append them into\n     * their respective sourceBuffers\n     *\n     * @private\n     */\n\n  }, {\n    key: 'processPendingSegments_',\n    value: function processPendingSegments_() {\n      var sortedSegments = {\n        video: {\n          segments: [],\n          bytes: 0\n        },\n        audio: {\n          segments: [],\n          bytes: 0\n        },\n        captions: [],\n        metadata: []\n      };\n\n      // Sort segments into separate video/audio arrays and\n      // keep track of their total byte lengths\n      sortedSegments = this.pendingBuffers_.reduce(function (segmentObj, segment) {\n        var type = segment.type;\n        var data = segment.data;\n        var initSegment = segment.initSegment;\n\n        segmentObj[type].segments.push(data);\n        segmentObj[type].bytes += data.byteLength;\n\n        segmentObj[type].initSegment = initSegment;\n\n        // Gather any captions into a single array\n        if (segment.captions) {\n          segmentObj.captions = segmentObj.captions.concat(segment.captions);\n        }\n\n        if (segment.info) {\n          segmentObj[type].info = segment.info;\n        }\n\n        // Gather any metadata into a single array\n        if (segment.metadata) {\n          segmentObj.metadata = segmentObj.metadata.concat(segment.metadata);\n        }\n\n        return segmentObj;\n      }, sortedSegments);\n\n      // Create the real source buffers if they don't exist by now since we\n      // finally are sure what tracks are contained in the source\n      if (!this.videoBuffer_ && !this.audioBuffer_) {\n        // Remove any codecs that may have been specified by default but\n        // are no longer applicable now\n        if (sortedSegments.video.bytes === 0) {\n          this.videoCodec_ = null;\n        }\n        if (sortedSegments.audio.bytes === 0) {\n          this.audioCodec_ = null;\n        }\n\n        this.createRealSourceBuffers_();\n      }\n\n      if (sortedSegments.audio.info) {\n        this.mediaSource_.trigger({ type: 'audioinfo', info: sortedSegments.audio.info });\n      }\n      if (sortedSegments.video.info) {\n        this.mediaSource_.trigger({ type: 'videoinfo', info: sortedSegments.video.info });\n      }\n\n      if (this.appendAudioInitSegment_) {\n        if (!this.audioDisabled_ && this.audioBuffer_) {\n          sortedSegments.audio.segments.unshift(sortedSegments.audio.initSegment);\n          sortedSegments.audio.bytes += sortedSegments.audio.initSegment.byteLength;\n        }\n        this.appendAudioInitSegment_ = false;\n      }\n\n      var triggerUpdateend = false;\n\n      // Merge multiple video and audio segments into one and append\n      if (this.videoBuffer_ && sortedSegments.video.bytes) {\n        sortedSegments.video.segments.unshift(sortedSegments.video.initSegment);\n        sortedSegments.video.bytes += sortedSegments.video.initSegment.byteLength;\n        this.concatAndAppendSegments_(sortedSegments.video, this.videoBuffer_);\n        // TODO: are video tracks the only ones with text tracks?\n        addTextTrackData(this, sortedSegments.captions, sortedSegments.metadata);\n      } else if (this.videoBuffer_ && (this.audioDisabled_ || !this.audioBuffer_)) {\n        // The transmuxer did not return any bytes of video, meaning it was all trimmed\n        // for gop alignment. Since we have a video buffer and audio is disabled, updateend\n        // will never be triggered by this source buffer, which will cause contrib-hls\n        // to be stuck forever waiting for updateend. If audio is not disabled, updateend\n        // will be triggered by the audio buffer, which will be sent upwards since the video\n        // buffer will not be in an updating state.\n        triggerUpdateend = true;\n      }\n\n      if (!this.audioDisabled_ && this.audioBuffer_) {\n        this.concatAndAppendSegments_(sortedSegments.audio, this.audioBuffer_);\n      }\n\n      this.pendingBuffers_.length = 0;\n\n      if (triggerUpdateend) {\n        this.trigger('updateend');\n      }\n\n      // We are no longer in the internal \"updating\" state\n      this.bufferUpdating_ = false;\n    }\n\n    /**\n     * Combine all segments into a single Uint8Array and then append them\n     * to the destination buffer\n     *\n     * @param {Object} segmentObj\n     * @param {SourceBuffer} destinationBuffer native source buffer to append data to\n     * @private\n     */\n\n  }, {\n    key: 'concatAndAppendSegments_',\n    value: function concatAndAppendSegments_(segmentObj, destinationBuffer) {\n      var offset = 0;\n      var tempBuffer = void 0;\n\n      if (segmentObj.bytes) {\n        tempBuffer = new Uint8Array(segmentObj.bytes);\n\n        // Combine the individual segments into one large typed-array\n        segmentObj.segments.forEach(function (segment) {\n          tempBuffer.set(segment, offset);\n          offset += segment.byteLength;\n        });\n\n        try {\n          destinationBuffer.updating = true;\n          destinationBuffer.appendBuffer(tempBuffer);\n        } catch (error) {\n          if (this.mediaSource_.player_) {\n            this.mediaSource_.player_.error({\n              code: -3,\n              type: 'APPEND_BUFFER_ERR',\n              message: error.message,\n              originalError: error\n            });\n          }\n        }\n      }\n    }\n\n    /**\n     * Emulate the native mediasource function. abort any soureBuffer\n     * actions and throw out any un-appended data.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/abort\n     */\n\n  }, {\n    key: 'abort',\n    value: function abort() {\n      if (this.videoBuffer_) {\n        this.videoBuffer_.abort();\n      }\n      if (!this.audioDisabled_ && this.audioBuffer_) {\n        this.audioBuffer_.abort();\n      }\n      if (this.transmuxer_) {\n        this.transmuxer_.postMessage({ action: 'reset' });\n      }\n      this.pendingBuffers_.length = 0;\n      this.bufferUpdating_ = false;\n    }\n  }]);\n  return VirtualSourceBuffer;\n}(videojs$1.EventTarget);\n\n/**\n * @file html-media-source.js\n */\n\n/**\n * Our MediaSource implementation in HTML, mimics native\n * MediaSource where/if possible.\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource\n * @class HtmlMediaSource\n * @extends videojs.EventTarget\n */\n\nvar HtmlMediaSource = function (_videojs$EventTarget) {\n  inherits$1(HtmlMediaSource, _videojs$EventTarget);\n\n  function HtmlMediaSource() {\n    classCallCheck$1(this, HtmlMediaSource);\n\n    var _this = possibleConstructorReturn$1(this, (HtmlMediaSource.__proto__ || Object.getPrototypeOf(HtmlMediaSource)).call(this));\n\n    var property = void 0;\n\n    _this.nativeMediaSource_ = new window$1.MediaSource();\n    // delegate to the native MediaSource's methods by default\n    for (property in _this.nativeMediaSource_) {\n      if (!(property in HtmlMediaSource.prototype) && typeof _this.nativeMediaSource_[property] === 'function') {\n        _this[property] = _this.nativeMediaSource_[property].bind(_this.nativeMediaSource_);\n      }\n    }\n\n    // emulate `duration` and `seekable` until seeking can be\n    // handled uniformly for live streams\n    // see https://github.com/w3c/media-source/issues/5\n    _this.duration_ = NaN;\n    Object.defineProperty(_this, 'duration', {\n      get: function get$$1() {\n        if (this.duration_ === Infinity) {\n          return this.duration_;\n        }\n        return this.nativeMediaSource_.duration;\n      },\n      set: function set$$1(duration) {\n        this.duration_ = duration;\n        if (duration !== Infinity) {\n          this.nativeMediaSource_.duration = duration;\n          return;\n        }\n      }\n    });\n    Object.defineProperty(_this, 'seekable', {\n      get: function get$$1() {\n        if (this.duration_ === Infinity) {\n          return videojs$1.createTimeRanges([[0, this.nativeMediaSource_.duration]]);\n        }\n        return this.nativeMediaSource_.seekable;\n      }\n    });\n\n    Object.defineProperty(_this, 'readyState', {\n      get: function get$$1() {\n        return this.nativeMediaSource_.readyState;\n      }\n    });\n\n    Object.defineProperty(_this, 'activeSourceBuffers', {\n      get: function get$$1() {\n        return this.activeSourceBuffers_;\n      }\n    });\n\n    // the list of virtual and native SourceBuffers created by this\n    // MediaSource\n    _this.sourceBuffers = [];\n\n    _this.activeSourceBuffers_ = [];\n\n    /**\n     * update the list of active source buffers based upon various\n     * imformation from HLS and video.js\n     *\n     * @private\n     */\n    _this.updateActiveSourceBuffers_ = function () {\n      // Retain the reference but empty the array\n      _this.activeSourceBuffers_.length = 0;\n\n      // If there is only one source buffer, then it will always be active and audio will\n      // be disabled based on the codec of the source buffer\n      if (_this.sourceBuffers.length === 1) {\n        var sourceBuffer = _this.sourceBuffers[0];\n\n        sourceBuffer.appendAudioInitSegment_ = true;\n        sourceBuffer.audioDisabled_ = !sourceBuffer.audioCodec_;\n        _this.activeSourceBuffers_.push(sourceBuffer);\n        return;\n      }\n\n      // There are 2 source buffers, a combined (possibly video only) source buffer and\n      // and an audio only source buffer.\n      // By default, the audio in the combined virtual source buffer is enabled\n      // and the audio-only source buffer (if it exists) is disabled.\n      var disableCombined = false;\n      var disableAudioOnly = true;\n\n      // TODO: maybe we can store the sourcebuffers on the track objects?\n      // safari may do something like this\n      for (var i = 0; i < _this.player_.audioTracks().length; i++) {\n        var track = _this.player_.audioTracks()[i];\n\n        if (track.enabled && track.kind !== 'main') {\n          // The enabled track is an alternate audio track so disable the audio in\n          // the combined source buffer and enable the audio-only source buffer.\n          disableCombined = true;\n          disableAudioOnly = false;\n          break;\n        }\n      }\n\n      _this.sourceBuffers.forEach(function (sourceBuffer, index) {\n        /* eslinst-disable */\n        // TODO once codecs are required, we can switch to using the codecs to determine\n        //      what stream is the video stream, rather than relying on videoTracks\n        /* eslinst-enable */\n\n        sourceBuffer.appendAudioInitSegment_ = true;\n\n        if (sourceBuffer.videoCodec_ && sourceBuffer.audioCodec_) {\n          // combined\n          sourceBuffer.audioDisabled_ = disableCombined;\n        } else if (sourceBuffer.videoCodec_ && !sourceBuffer.audioCodec_) {\n          // If the \"combined\" source buffer is video only, then we do not want\n          // disable the audio-only source buffer (this is mostly for demuxed\n          // audio and video hls)\n          sourceBuffer.audioDisabled_ = true;\n          disableAudioOnly = false;\n        } else if (!sourceBuffer.videoCodec_ && sourceBuffer.audioCodec_) {\n          // audio only\n          // In the case of audio only with alternate audio and disableAudioOnly is true\n          // this means we want to disable the audio on the alternate audio sourcebuffer\n          // but not the main \"combined\" source buffer. The \"combined\" source buffer is\n          // always at index 0, so this ensures audio won't be disabled in both source\n          // buffers.\n          sourceBuffer.audioDisabled_ = index ? disableAudioOnly : !disableAudioOnly;\n          if (sourceBuffer.audioDisabled_) {\n            return;\n          }\n        }\n\n        _this.activeSourceBuffers_.push(sourceBuffer);\n      });\n    };\n\n    _this.onPlayerMediachange_ = function () {\n      _this.sourceBuffers.forEach(function (sourceBuffer) {\n        sourceBuffer.appendAudioInitSegment_ = true;\n      });\n    };\n\n    _this.onHlsReset_ = function () {\n      _this.sourceBuffers.forEach(function (sourceBuffer) {\n        if (sourceBuffer.transmuxer_) {\n          sourceBuffer.transmuxer_.postMessage({ action: 'resetCaptions' });\n        }\n      });\n    };\n\n    _this.onHlsSegmentTimeMapping_ = function (event) {\n      _this.sourceBuffers.forEach(function (buffer) {\n        return buffer.timeMapping_ = event.mapping;\n      });\n    };\n\n    // Re-emit MediaSource events on the polyfill\n    ['sourceopen', 'sourceclose', 'sourceended'].forEach(function (eventName) {\n      this.nativeMediaSource_.addEventListener(eventName, this.trigger.bind(this));\n    }, _this);\n\n    // capture the associated player when the MediaSource is\n    // successfully attached\n    _this.on('sourceopen', function (event) {\n      // Get the player this MediaSource is attached to\n      var video = document.querySelector('[src=\"' + _this.url_ + '\"]');\n\n      if (!video) {\n        return;\n      }\n\n      _this.player_ = videojs$1(video.parentNode);\n\n      // hls-reset is fired by videojs.Hls on to the tech after the main SegmentLoader\n      // resets its state and flushes the buffer\n      _this.player_.tech_.on('hls-reset', _this.onHlsReset_);\n      // hls-segment-time-mapping is fired by videojs.Hls on to the tech after the main\n      // SegmentLoader inspects an MTS segment and has an accurate stream to display\n      // time mapping\n      _this.player_.tech_.on('hls-segment-time-mapping', _this.onHlsSegmentTimeMapping_);\n\n      if (_this.player_.audioTracks && _this.player_.audioTracks()) {\n        _this.player_.audioTracks().on('change', _this.updateActiveSourceBuffers_);\n        _this.player_.audioTracks().on('addtrack', _this.updateActiveSourceBuffers_);\n        _this.player_.audioTracks().on('removetrack', _this.updateActiveSourceBuffers_);\n      }\n\n      _this.player_.on('mediachange', _this.onPlayerMediachange_);\n    });\n\n    _this.on('sourceended', function (event) {\n      var duration = durationOfVideo(_this.duration);\n\n      for (var i = 0; i < _this.sourceBuffers.length; i++) {\n        var sourcebuffer = _this.sourceBuffers[i];\n        var cues = sourcebuffer.metadataTrack_ && sourcebuffer.metadataTrack_.cues;\n\n        if (cues && cues.length) {\n          cues[cues.length - 1].endTime = duration;\n        }\n      }\n    });\n\n    // explicitly terminate any WebWorkers that were created\n    // by SourceHandlers\n    _this.on('sourceclose', function (event) {\n      this.sourceBuffers.forEach(function (sourceBuffer) {\n        if (sourceBuffer.transmuxer_) {\n          sourceBuffer.transmuxer_.terminate();\n        }\n      });\n\n      this.sourceBuffers.length = 0;\n      if (!this.player_) {\n        return;\n      }\n\n      if (this.player_.audioTracks && this.player_.audioTracks()) {\n        this.player_.audioTracks().off('change', this.updateActiveSourceBuffers_);\n        this.player_.audioTracks().off('addtrack', this.updateActiveSourceBuffers_);\n        this.player_.audioTracks().off('removetrack', this.updateActiveSourceBuffers_);\n      }\n\n      // We can only change this if the player hasn't been disposed of yet\n      // because `off` eventually tries to use the el_ property. If it has\n      // been disposed of, then don't worry about it because there are no\n      // event handlers left to unbind anyway\n      if (this.player_.el_) {\n        this.player_.off('mediachange', this.onPlayerMediachange_);\n        this.player_.tech_.off('hls-reset', this.onHlsReset_);\n        this.player_.tech_.off('hls-segment-time-mapping', this.onHlsSegmentTimeMapping_);\n      }\n    });\n    return _this;\n  }\n\n  /**\n   * Add a range that that can now be seeked to.\n   *\n   * @param {Double} start where to start the addition\n   * @param {Double} end where to end the addition\n   * @private\n   */\n\n  createClass$1(HtmlMediaSource, [{\n    key: 'addSeekableRange_',\n    value: function addSeekableRange_(start, end) {\n      var error = void 0;\n\n      if (this.duration !== Infinity) {\n        error = new Error('MediaSource.addSeekableRange() can only be invoked ' + 'when the duration is Infinity');\n        error.name = 'InvalidStateError';\n        error.code = 11;\n        throw error;\n      }\n\n      if (end > this.nativeMediaSource_.duration || isNaN(this.nativeMediaSource_.duration)) {\n        this.nativeMediaSource_.duration = end;\n      }\n    }\n\n    /**\n     * Add a source buffer to the media source.\n     *\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/addSourceBuffer\n     * @param {String} type the content-type of the content\n     * @return {Object} the created source buffer\n     */\n\n  }, {\n    key: 'addSourceBuffer',\n    value: function addSourceBuffer(type) {\n      var buffer = void 0;\n      var parsedType = parseContentType(type);\n\n      // Create a VirtualSourceBuffer to transmux MPEG-2 transport\n      // stream segments into fragmented MP4s\n      if (/^(video|audio)\\/mp2t$/i.test(parsedType.type)) {\n        var codecs = [];\n\n        if (parsedType.parameters && parsedType.parameters.codecs) {\n          codecs = parsedType.parameters.codecs.split(',');\n          codecs = translateLegacyCodecs(codecs);\n          codecs = codecs.filter(function (codec) {\n            return isAudioCodec(codec) || isVideoCodec(codec);\n          });\n        }\n\n        if (codecs.length === 0) {\n          codecs = ['avc1.4d400d', 'mp4a.40.2'];\n        }\n\n        buffer = new VirtualSourceBuffer(this, codecs);\n\n        if (this.sourceBuffers.length !== 0) {\n          // If another VirtualSourceBuffer already exists, then we are creating a\n          // SourceBuffer for an alternate audio track and therefore we know that\n          // the source has both an audio and video track.\n          // That means we should trigger the manual creation of the real\n          // SourceBuffers instead of waiting for the transmuxer to return data\n          this.sourceBuffers[0].createRealSourceBuffers_();\n          buffer.createRealSourceBuffers_();\n\n          // Automatically disable the audio on the first source buffer if\n          // a second source buffer is ever created\n          this.sourceBuffers[0].audioDisabled_ = true;\n        }\n      } else {\n        // delegate to the native implementation\n        buffer = this.nativeMediaSource_.addSourceBuffer(type);\n      }\n\n      this.sourceBuffers.push(buffer);\n      return buffer;\n    }\n  }]);\n  return HtmlMediaSource;\n}(videojs$1.EventTarget);\n\n/**\n * @file videojs-contrib-media-sources.js\n */\nvar urlCount = 0;\n\n// ------------\n// Media Source\n// ------------\n\n// store references to the media sources so they can be connected\n// to a video element (a swf object)\n// TODO: can we store this somewhere local to this module?\nvideojs$1.mediaSources = {};\n\n/**\n * Provide a method for a swf object to notify JS that a\n * media source is now open.\n *\n * @param {String} msObjectURL string referencing the MSE Object URL\n * @param {String} swfId the swf id\n */\nvar open = function open(msObjectURL, swfId) {\n  var mediaSource = videojs$1.mediaSources[msObjectURL];\n\n  if (mediaSource) {\n    mediaSource.trigger({ type: 'sourceopen', swfId: swfId });\n  } else {\n    throw new Error('Media Source not found (Video.js)');\n  }\n};\n\n/**\n * Check to see if the native MediaSource object exists and supports\n * an MP4 container with both H.264 video and AAC-LC audio.\n *\n * @return {Boolean} if  native media sources are supported\n */\nvar supportsNativeMediaSources = function supportsNativeMediaSources() {\n  return !!window$1.MediaSource && !!window$1.MediaSource.isTypeSupported && window$1.MediaSource.isTypeSupported('video/mp4;codecs=\"avc1.4d400d,mp4a.40.2\"');\n};\n\n/**\n * An emulation of the MediaSource API so that we can support\n * native and non-native functionality. returns an instance of\n * HtmlMediaSource.\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/MediaSource\n */\nvar MediaSource = function MediaSource() {\n  this.MediaSource = {\n    open: open,\n    supportsNativeMediaSources: supportsNativeMediaSources\n  };\n\n  if (supportsNativeMediaSources()) {\n    return new HtmlMediaSource();\n  }\n\n  throw new Error('Cannot use create a virtual MediaSource for this video');\n};\n\nMediaSource.open = open;\nMediaSource.supportsNativeMediaSources = supportsNativeMediaSources;\n\n/**\n * A wrapper around the native URL for our MSE object\n * implementation, this object is exposed under videojs.URL\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/URL/URL\n */\nvar URL$1 = {\n  /**\n   * A wrapper around the native createObjectURL for our objects.\n   * This function maps a native or emulated mediaSource to a blob\n   * url so that it can be loaded into video.js\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL\n   * @param {MediaSource} object the object to create a blob url to\n   */\n  createObjectURL: function createObjectURL(object) {\n    var objectUrlPrefix = 'blob:vjs-media-source/';\n    var url = void 0;\n\n    // use the native MediaSource to generate an object URL\n    if (object instanceof HtmlMediaSource) {\n      url = window$1.URL.createObjectURL(object.nativeMediaSource_);\n      object.url_ = url;\n      return url;\n    }\n    // if the object isn't an emulated MediaSource, delegate to the\n    // native implementation\n    if (!(object instanceof HtmlMediaSource)) {\n      url = window$1.URL.createObjectURL(object);\n      object.url_ = url;\n      return url;\n    }\n\n    // build a URL that can be used to map back to the emulated\n    // MediaSource\n    url = objectUrlPrefix + urlCount;\n\n    urlCount++;\n\n    // setup the mapping back to object\n    videojs$1.mediaSources[url] = object;\n\n    return url;\n  }\n};\n\nvideojs$1.MediaSource = MediaSource;\nvideojs$1.URL = URL$1;\n\nvar EventTarget$1$1 = videojs$1.EventTarget,\n    mergeOptions$2 = videojs$1.mergeOptions;\n\n/**\n * Returns a new master manifest that is the result of merging an updated master manifest\n * into the original version.\n *\n * @param {Object} oldMaster\n *        The old parsed mpd object\n * @param {Object} newMaster\n *        The updated parsed mpd object\n * @return {Object}\n *         A new object representing the original master manifest with the updated media\n *         playlists merged in\n */\n\nvar updateMaster$1 = function updateMaster$$1(oldMaster, newMaster) {\n  var update = mergeOptions$2(oldMaster, {\n    // These are top level properties that can be updated\n    duration: newMaster.duration,\n    minimumUpdatePeriod: newMaster.minimumUpdatePeriod\n  });\n\n  // First update the playlists in playlist list\n  for (var i = 0; i < newMaster.playlists.length; i++) {\n    var playlistUpdate = updateMaster(update, newMaster.playlists[i]);\n\n    if (playlistUpdate) {\n      update = playlistUpdate;\n    }\n  }\n\n  // Then update media group playlists\n  forEachMediaGroup(newMaster, function (properties, type, group, label) {\n    if (properties.playlists && properties.playlists.length) {\n      var uri = properties.playlists[0].uri;\n      var _playlistUpdate = updateMaster(update, properties.playlists[0]);\n\n      if (_playlistUpdate) {\n        update = _playlistUpdate;\n        // update the playlist reference within media groups\n        update.mediaGroups[type][group][label].playlists[0] = update.playlists[uri];\n      }\n    }\n  });\n\n  return update;\n};\n\nvar DashPlaylistLoader = function (_EventTarget) {\n  inherits$1(DashPlaylistLoader, _EventTarget);\n\n  // DashPlaylistLoader must accept either a src url or a playlist because subsequent\n  // playlist loader setups from media groups will expect to be able to pass a playlist\n  // (since there aren't external URLs to media playlists with DASH)\n  function DashPlaylistLoader(srcUrlOrPlaylist, hls, withCredentials, masterPlaylistLoader) {\n    classCallCheck$1(this, DashPlaylistLoader);\n\n    var _this = possibleConstructorReturn$1(this, (DashPlaylistLoader.__proto__ || Object.getPrototypeOf(DashPlaylistLoader)).call(this));\n\n    _this.hls_ = hls;\n    _this.withCredentials = withCredentials;\n\n    if (!srcUrlOrPlaylist) {\n      throw new Error('A non-empty playlist URL or playlist is required');\n    }\n\n    // event naming?\n    _this.on('minimumUpdatePeriod', function () {\n      _this.refreshXml_();\n    });\n\n    // live playlist staleness timeout\n    _this.on('mediaupdatetimeout', function () {\n      _this.refreshMedia_();\n    });\n\n    // initialize the loader state\n    if (typeof srcUrlOrPlaylist === 'string') {\n      _this.srcUrl = srcUrlOrPlaylist;\n      _this.state = 'HAVE_NOTHING';\n      return possibleConstructorReturn$1(_this);\n    }\n\n    _this.masterPlaylistLoader_ = masterPlaylistLoader;\n\n    _this.state = 'HAVE_METADATA';\n    _this.started = true;\n    // we only should have one playlist so select it\n    _this.media(srcUrlOrPlaylist);\n    // trigger async to mimic behavior of HLS, where it must request a playlist\n    window$1.setTimeout(function () {\n      _this.trigger('loadedmetadata');\n    }, 0);\n    return _this;\n  }\n\n  createClass$1(DashPlaylistLoader, [{\n    key: 'dispose',\n    value: function dispose() {\n      this.stopRequest();\n      window$1.clearTimeout(this.mediaUpdateTimeout);\n    }\n  }, {\n    key: 'stopRequest',\n    value: function stopRequest() {\n      if (this.request) {\n        var oldRequest = this.request;\n\n        this.request = null;\n        oldRequest.onreadystatechange = null;\n        oldRequest.abort();\n      }\n    }\n  }, {\n    key: 'media',\n    value: function media(playlist) {\n      // getter\n      if (!playlist) {\n        return this.media_;\n      }\n\n      // setter\n      if (this.state === 'HAVE_NOTHING') {\n        throw new Error('Cannot switch media playlist from ' + this.state);\n      }\n\n      var startingState = this.state;\n\n      // find the playlist object if the target playlist has been specified by URI\n      if (typeof playlist === 'string') {\n        if (!this.master.playlists[playlist]) {\n          throw new Error('Unknown playlist URI: ' + playlist);\n        }\n        playlist = this.master.playlists[playlist];\n      }\n\n      var mediaChange = !this.media_ || playlist.uri !== this.media_.uri;\n\n      this.state = 'HAVE_METADATA';\n\n      // switching to the active playlist is a no-op\n      if (!mediaChange) {\n        return;\n      }\n\n      // switching from an already loaded playlist\n      if (this.media_) {\n        this.trigger('mediachanging');\n      }\n\n      this.media_ = playlist;\n\n      this.refreshMedia_();\n\n      // trigger media change if the active media has been updated\n      if (startingState !== 'HAVE_MASTER') {\n        this.trigger('mediachange');\n      }\n    }\n  }, {\n    key: 'pause',\n    value: function pause() {\n      this.stopRequest();\n      if (this.state === 'HAVE_NOTHING') {\n        // If we pause the loader before any data has been retrieved, its as if we never\n        // started, so reset to an unstarted state.\n        this.started = false;\n      }\n    }\n  }, {\n    key: 'load',\n    value: function load() {\n      // because the playlists are internal to the manifest, load should either load the\n      // main manifest, or do nothing but trigger an event\n      if (!this.started) {\n        this.start();\n        return;\n      }\n\n      this.trigger('loadedplaylist');\n    }\n\n    /**\n     * Parses the master xml string and updates playlist uri references\n     *\n     * @return {Object}\n     *         The parsed mpd manifest object\n     */\n\n  }, {\n    key: 'parseMasterXml',\n    value: function parseMasterXml() {\n      var master = parse(this.masterXml_, {\n        manifestUri: this.srcUrl,\n        clientOffset: this.clientOffset_\n      });\n\n      master.uri = this.srcUrl;\n\n      // Set up phony URIs for the playlists since we won't have external URIs for DASH\n      // but reference playlists by their URI throughout the project\n      // TODO: Should we create the dummy uris in mpd-parser as well (leaning towards yes).\n      for (var i = 0; i < master.playlists.length; i++) {\n        var phonyUri = 'placeholder-uri-' + i;\n\n        master.playlists[i].uri = phonyUri;\n        // set up by URI references\n        master.playlists[phonyUri] = master.playlists[i];\n      }\n\n      // set up phony URIs for the media group playlists since we won't have external\n      // URIs for DASH but reference playlists by their URI throughout the project\n      forEachMediaGroup(master, function (properties, mediaType, groupKey, labelKey) {\n        if (properties.playlists && properties.playlists.length) {\n          var _phonyUri = 'placeholder-uri-' + mediaType + '-' + groupKey + '-' + labelKey;\n\n          properties.playlists[0].uri = _phonyUri;\n          // setup URI references\n          master.playlists[_phonyUri] = properties.playlists[0];\n        }\n      });\n\n      setupMediaPlaylists(master);\n      resolveMediaGroupUris(master);\n\n      return master;\n    }\n  }, {\n    key: 'start',\n    value: function start() {\n      var _this2 = this;\n\n      this.started = true;\n\n      // request the specified URL\n      this.request = this.hls_.xhr({\n        uri: this.srcUrl,\n        withCredentials: this.withCredentials\n      }, function (error, req) {\n        // disposed\n        if (!_this2.request) {\n          return;\n        }\n\n        // clear the loader's request reference\n        _this2.request = null;\n\n        if (error) {\n          _this2.error = {\n            status: req.status,\n            message: 'DASH playlist request error at URL: ' + _this2.srcUrl,\n            responseText: req.responseText,\n            // MEDIA_ERR_NETWORK\n            code: 2\n          };\n          if (_this2.state === 'HAVE_NOTHING') {\n            _this2.started = false;\n          }\n          return _this2.trigger('error');\n        }\n\n        _this2.masterXml_ = req.responseText;\n\n        if (req.responseHeaders && req.responseHeaders.date) {\n          _this2.masterLoaded_ = Date.parse(req.responseHeaders.date);\n        } else {\n          _this2.masterLoaded_ = Date.now();\n        }\n\n        _this2.syncClientServerClock_(_this2.onClientServerClockSync_.bind(_this2));\n      });\n    }\n\n    /**\n     * Parses the master xml for UTCTiming node to sync the client clock to the server\n     * clock. If the UTCTiming node requires a HEAD or GET request, that request is made.\n     *\n     * @param {Function} done\n     *        Function to call when clock sync has completed\n     */\n\n  }, {\n    key: 'syncClientServerClock_',\n    value: function syncClientServerClock_(done) {\n      var _this3 = this;\n\n      var utcTiming = parseUTCTiming(this.masterXml_);\n\n      // No UTCTiming element found in the mpd. Use Date header from mpd request as the\n      // server clock\n      if (utcTiming === null) {\n        this.clientOffset_ = this.masterLoaded_ - Date.now();\n        return done();\n      }\n\n      if (utcTiming.method === 'DIRECT') {\n        this.clientOffset_ = utcTiming.value - Date.now();\n        return done();\n      }\n\n      this.request = this.hls_.xhr({\n        uri: resolveUrl(this.srcUrl, utcTiming.value),\n        method: utcTiming.method,\n        withCredentials: this.withCredentials\n      }, function (error, req) {\n        // disposed\n        if (!_this3.request) {\n          return;\n        }\n\n        if (error) {\n          // sync request failed, fall back to using date header from mpd\n          // TODO: log warning\n          _this3.clientOffset_ = _this3.masterLoaded_ - Date.now();\n          return done();\n        }\n\n        var serverTime = void 0;\n\n        if (utcTiming.method === 'HEAD') {\n          if (!req.responseHeaders || !req.responseHeaders.date) {\n            // expected date header not preset, fall back to using date header from mpd\n            // TODO: log warning\n            serverTime = _this3.masterLoaded_;\n          } else {\n            serverTime = Date.parse(req.responseHeaders.date);\n          }\n        } else {\n          serverTime = Date.parse(req.responseText);\n        }\n\n        _this3.clientOffset_ = serverTime - Date.now();\n\n        done();\n      });\n    }\n\n    /**\n     * Handler for after client/server clock synchronization has happened. Sets up\n     * xml refresh timer if specificed by the manifest.\n     */\n\n  }, {\n    key: 'onClientServerClockSync_',\n    value: function onClientServerClockSync_() {\n      var _this4 = this;\n\n      this.master = this.parseMasterXml();\n\n      this.state = 'HAVE_MASTER';\n\n      this.trigger('loadedplaylist');\n\n      if (!this.media_) {\n        // no media playlist was specifically selected so start\n        // from the first listed one\n        this.media(this.master.playlists[0]);\n      }\n      // trigger loadedmetadata to resolve setup of media groups\n      // trigger async to mimic behavior of HLS, where it must request a playlist\n      window$1.setTimeout(function () {\n        _this4.trigger('loadedmetadata');\n      }, 0);\n\n      // TODO: minimumUpdatePeriod can have a value of 0. Currently the manifest will not\n      // be refreshed when this is the case. The inter-op guide says that when the\n      // minimumUpdatePeriod is 0, the manifest should outline all currently available\n      // segments, but future segments may require an update. I think a good solution\n      // would be to update the manifest at the same rate that the media playlists\n      // are \"refreshed\", i.e. every targetDuration.\n      if (this.master.minimumUpdatePeriod) {\n        window$1.setTimeout(function () {\n          _this4.trigger('minimumUpdatePeriod');\n        }, this.master.minimumUpdatePeriod);\n      }\n    }\n\n    /**\n     * Sends request to refresh the master xml and updates the parsed master manifest\n     * TODO: Does the client offset need to be recalculated when the xml is refreshed?\n     */\n\n  }, {\n    key: 'refreshXml_',\n    value: function refreshXml_() {\n      var _this5 = this;\n\n      this.request = this.hls_.xhr({\n        uri: this.srcUrl,\n        withCredentials: this.withCredentials\n      }, function (error, req) {\n        // disposed\n        if (!_this5.request) {\n          return;\n        }\n\n        // clear the loader's request reference\n        _this5.request = null;\n\n        if (error) {\n          _this5.error = {\n            status: req.status,\n            message: 'DASH playlist request error at URL: ' + _this5.srcUrl,\n            responseText: req.responseText,\n            // MEDIA_ERR_NETWORK\n            code: 2\n          };\n          if (_this5.state === 'HAVE_NOTHING') {\n            _this5.started = false;\n          }\n          return _this5.trigger('error');\n        }\n\n        _this5.masterXml_ = req.responseText;\n\n        var newMaster = _this5.parseMasterXml();\n\n        _this5.master = updateMaster$1(_this5.master, newMaster);\n\n        window$1.setTimeout(function () {\n          _this5.trigger('minimumUpdatePeriod');\n        }, _this5.master.minimumUpdatePeriod);\n      });\n    }\n\n    /**\n     * Refreshes the media playlist by re-parsing the master xml and updating playlist\n     * references. If this is an alternate loader, the updated parsed manifest is retrieved\n     * from the master loader.\n     */\n\n  }, {\n    key: 'refreshMedia_',\n    value: function refreshMedia_() {\n      var _this6 = this;\n\n      var oldMaster = void 0;\n      var newMaster = void 0;\n\n      if (this.masterPlaylistLoader_) {\n        oldMaster = this.masterPlaylistLoader_.master;\n        newMaster = this.masterPlaylistLoader_.parseMasterXml();\n      } else {\n        oldMaster = this.master;\n        newMaster = this.parseMasterXml();\n      }\n\n      var updatedMaster = updateMaster$1(oldMaster, newMaster);\n\n      if (updatedMaster) {\n        if (this.masterPlaylistLoader_) {\n          this.masterPlaylistLoader_.master = updatedMaster;\n        } else {\n          this.master = updatedMaster;\n        }\n        this.media_ = updatedMaster.playlists[this.media_.uri];\n      } else {\n        this.trigger('playlistunchanged');\n      }\n\n      if (!this.media().endList) {\n        this.mediaUpdateTimeout = window$1.setTimeout(function () {\n          _this6.trigger('mediaupdatetimeout');\n        }, refreshDelay(this.media(), !!updatedMaster));\n      }\n\n      this.trigger('loadedplaylist');\n    }\n  }]);\n  return DashPlaylistLoader;\n}(EventTarget$1$1);\n\nvar logger = function logger(source) {\n  if (videojs$1.log.debug) {\n    return videojs$1.log.debug.bind(videojs$1, 'VHS:', source + ' >');\n  }\n\n  return function () {};\n};\n\nfunction noop() {}\n\n/**\n * @file source-updater.js\n */\n\n/**\n * A queue of callbacks to be serialized and applied when a\n * MediaSource and its associated SourceBuffers are not in the\n * updating state. It is used by the segment loader to update the\n * underlying SourceBuffers when new data is loaded, for instance.\n *\n * @class SourceUpdater\n * @param {MediaSource} mediaSource the MediaSource to create the\n * SourceBuffer from\n * @param {String} mimeType the desired MIME type of the underlying\n * SourceBuffer\n * @param {Object} sourceBufferEmitter an event emitter that fires when a source buffer is\n * added to the media source\n */\n\nvar SourceUpdater = function () {\n  function SourceUpdater(mediaSource, mimeType, type, sourceBufferEmitter) {\n    classCallCheck$1(this, SourceUpdater);\n\n    this.callbacks_ = [];\n    this.pendingCallback_ = null;\n    this.timestampOffset_ = 0;\n    this.mediaSource = mediaSource;\n    this.processedAppend_ = false;\n    this.type_ = type;\n    this.mimeType_ = mimeType;\n    this.logger_ = logger('SourceUpdater[' + type + '][' + mimeType + ']');\n\n    if (mediaSource.readyState === 'closed') {\n      mediaSource.addEventListener('sourceopen', this.createSourceBuffer_.bind(this, mimeType, sourceBufferEmitter));\n    } else {\n      this.createSourceBuffer_(mimeType, sourceBufferEmitter);\n    }\n  }\n\n  createClass$1(SourceUpdater, [{\n    key: 'createSourceBuffer_',\n    value: function createSourceBuffer_(mimeType, sourceBufferEmitter) {\n      var _this = this;\n\n      this.sourceBuffer_ = this.mediaSource.addSourceBuffer(mimeType);\n\n      this.logger_('created SourceBuffer');\n\n      if (sourceBufferEmitter) {\n        sourceBufferEmitter.trigger('sourcebufferadded');\n\n        if (this.mediaSource.sourceBuffers.length < 2) {\n          // There's another source buffer we must wait for before we can start updating\n          // our own (or else we can get into a bad state, i.e., appending video/audio data\n          // before the other video/audio source buffer is available and leading to a video\n          // or audio only buffer).\n          sourceBufferEmitter.on('sourcebufferadded', function () {\n            _this.start_();\n          });\n          return;\n        }\n      }\n\n      this.start_();\n    }\n  }, {\n    key: 'start_',\n    value: function start_() {\n      var _this2 = this;\n\n      this.started_ = true;\n\n      // run completion handlers and process callbacks as updateend\n      // events fire\n      this.onUpdateendCallback_ = function () {\n        var pendingCallback = _this2.pendingCallback_;\n\n        _this2.pendingCallback_ = null;\n\n        _this2.logger_('buffered [' + printableRange(_this2.buffered()) + ']');\n\n        if (pendingCallback) {\n          pendingCallback();\n        }\n\n        _this2.runCallback_();\n      };\n\n      this.sourceBuffer_.addEventListener('updateend', this.onUpdateendCallback_);\n\n      this.runCallback_();\n    }\n\n    /**\n     * Aborts the current segment and resets the segment parser.\n     *\n     * @param {Function} done function to call when done\n     * @see http://w3c.github.io/media-source/#widl-SourceBuffer-abort-void\n     */\n\n  }, {\n    key: 'abort',\n    value: function abort(done) {\n      var _this3 = this;\n\n      if (this.processedAppend_) {\n        this.queueCallback_(function () {\n          _this3.sourceBuffer_.abort();\n        }, done);\n      }\n    }\n\n    /**\n     * Queue an update to append an ArrayBuffer.\n     *\n     * @param {ArrayBuffer} bytes\n     * @param {Function} done the function to call when done\n     * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-appendBuffer-void-ArrayBuffer-data\n     */\n\n  }, {\n    key: 'appendBuffer',\n    value: function appendBuffer(bytes, done) {\n      var _this4 = this;\n\n      this.processedAppend_ = true;\n      this.queueCallback_(function () {\n        _this4.sourceBuffer_.appendBuffer(bytes);\n      }, done);\n    }\n\n    /**\n     * Indicates what TimeRanges are buffered in the managed SourceBuffer.\n     *\n     * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-buffered\n     */\n\n  }, {\n    key: 'buffered',\n    value: function buffered() {\n      if (!this.sourceBuffer_) {\n        return videojs$1.createTimeRanges();\n      }\n      return this.sourceBuffer_.buffered;\n    }\n\n    /**\n     * Queue an update to remove a time range from the buffer.\n     *\n     * @param {Number} start where to start the removal\n     * @param {Number} end where to end the removal\n     * @param {Function} [done=noop] optional callback to be executed when the remove\n     * operation is complete\n     * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-remove-void-double-start-unrestricted-double-end\n     */\n\n  }, {\n    key: 'remove',\n    value: function remove(start, end) {\n      var _this5 = this;\n\n      var done = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noop;\n\n      if (this.processedAppend_) {\n        this.queueCallback_(function () {\n          _this5.logger_('remove [' + start + ' => ' + end + ']');\n          _this5.sourceBuffer_.remove(start, end);\n        }, done);\n      }\n    }\n\n    /**\n     * Whether the underlying sourceBuffer is updating or not\n     *\n     * @return {Boolean} the updating status of the SourceBuffer\n     */\n\n  }, {\n    key: 'updating',\n    value: function updating() {\n      return !this.sourceBuffer_ || this.sourceBuffer_.updating || this.pendingCallback_;\n    }\n\n    /**\n     * Set/get the timestampoffset on the SourceBuffer\n     *\n     * @return {Number} the timestamp offset\n     */\n\n  }, {\n    key: 'timestampOffset',\n    value: function timestampOffset(offset) {\n      var _this6 = this;\n\n      if (typeof offset !== 'undefined') {\n        this.queueCallback_(function () {\n          _this6.sourceBuffer_.timestampOffset = offset;\n        });\n        this.timestampOffset_ = offset;\n      }\n      return this.timestampOffset_;\n    }\n\n    /**\n     * Queue a callback to run\n     */\n\n  }, {\n    key: 'queueCallback_',\n    value: function queueCallback_(callback, done) {\n      this.callbacks_.push([callback.bind(this), done]);\n      this.runCallback_();\n    }\n\n    /**\n     * Run a queued callback\n     */\n\n  }, {\n    key: 'runCallback_',\n    value: function runCallback_() {\n      var callbacks = void 0;\n\n      if (!this.updating() && this.callbacks_.length && this.started_) {\n        callbacks = this.callbacks_.shift();\n        this.pendingCallback_ = callbacks[1];\n        callbacks[0]();\n      }\n    }\n\n    /**\n     * dispose of the source updater and the underlying sourceBuffer\n     */\n\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.sourceBuffer_.removeEventListener('updateend', this.onUpdateendCallback_);\n      if (this.sourceBuffer_ && this.mediaSource.readyState === 'open') {\n        this.sourceBuffer_.abort();\n      }\n    }\n  }]);\n  return SourceUpdater;\n}();\n\nvar Config = {\n  GOAL_BUFFER_LENGTH: 30,\n  MAX_GOAL_BUFFER_LENGTH: 60,\n  GOAL_BUFFER_LENGTH_RATE: 1,\n  // A fudge factor to apply to advertised playlist bitrates to account for\n  // temporary flucations in client bandwidth\n  BANDWIDTH_VARIANCE: 1.2,\n  // How much of the buffer must be filled before we consider upswitching\n  BUFFER_LOW_WATER_LINE: 0,\n  MAX_BUFFER_LOW_WATER_LINE: 30,\n  BUFFER_LOW_WATER_LINE_RATE: 1\n};\n\nvar REQUEST_ERRORS = {\n  FAILURE: 2,\n  TIMEOUT: -101,\n  ABORTED: -102\n};\n\n/**\n * Turns segment byterange into a string suitable for use in\n * HTTP Range requests\n *\n * @param {Object} byterange - an object with two values defining the start and end\n *                             of a byte-range\n */\nvar byterangeStr = function byterangeStr(byterange) {\n  var byterangeStart = void 0;\n  var byterangeEnd = void 0;\n\n  // `byterangeEnd` is one less than `offset + length` because the HTTP range\n  // header uses inclusive ranges\n  byterangeEnd = byterange.offset + byterange.length - 1;\n  byterangeStart = byterange.offset;\n  return 'bytes=' + byterangeStart + '-' + byterangeEnd;\n};\n\n/**\n * Defines headers for use in the xhr request for a particular segment.\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n */\nvar segmentXhrHeaders = function segmentXhrHeaders(segment) {\n  var headers = {};\n\n  if (segment.byterange) {\n    headers.Range = byterangeStr(segment.byterange);\n  }\n  return headers;\n};\n\n/**\n * Abort all requests\n *\n * @param {Object} activeXhrs - an object that tracks all XHR requests\n */\nvar abortAll = function abortAll(activeXhrs) {\n  activeXhrs.forEach(function (xhr$$1) {\n    xhr$$1.abort();\n  });\n};\n\n/**\n * Gather important bandwidth stats once a request has completed\n *\n * @param {Object} request - the XHR request from which to gather stats\n */\nvar getRequestStats = function getRequestStats(request) {\n  return {\n    bandwidth: request.bandwidth,\n    bytesReceived: request.bytesReceived || 0,\n    roundTripTime: request.roundTripTime || 0\n  };\n};\n\n/**\n * If possible gather bandwidth stats as a request is in\n * progress\n *\n * @param {Event} progressEvent - an event object from an XHR's progress event\n */\nvar getProgressStats = function getProgressStats(progressEvent) {\n  var request = progressEvent.target;\n  var roundTripTime = Date.now() - request.requestTime;\n  var stats = {\n    bandwidth: Infinity,\n    bytesReceived: 0,\n    roundTripTime: roundTripTime || 0\n  };\n\n  stats.bytesReceived = progressEvent.loaded;\n  // This can result in Infinity if stats.roundTripTime is 0 but that is ok\n  // because we should only use bandwidth stats on progress to determine when\n  // abort a request early due to insufficient bandwidth\n  stats.bandwidth = Math.floor(stats.bytesReceived / stats.roundTripTime * 8 * 1000);\n\n  return stats;\n};\n\n/**\n * Handle all error conditions in one place and return an object\n * with all the information\n *\n * @param {Error|null} error - if non-null signals an error occured with the XHR\n * @param {Object} request -  the XHR request that possibly generated the error\n */\nvar handleErrors = function handleErrors(error, request) {\n  if (request.timedout) {\n    return {\n      status: request.status,\n      message: 'HLS request timed-out at URL: ' + request.uri,\n      code: REQUEST_ERRORS.TIMEOUT,\n      xhr: request\n    };\n  }\n\n  if (request.aborted) {\n    return {\n      status: request.status,\n      message: 'HLS request aborted at URL: ' + request.uri,\n      code: REQUEST_ERRORS.ABORTED,\n      xhr: request\n    };\n  }\n\n  if (error) {\n    return {\n      status: request.status,\n      message: 'HLS request errored at URL: ' + request.uri,\n      code: REQUEST_ERRORS.FAILURE,\n      xhr: request\n    };\n  }\n\n  return null;\n};\n\n/**\n * Handle responses for key data and convert the key data to the correct format\n * for the decryption step later\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} finishProcessingFn - a callback to execute to continue processing\n *                                        this request\n */\nvar handleKeyResponse = function handleKeyResponse(segment, finishProcessingFn) {\n  return function (error, request) {\n    var response = request.response;\n    var errorObj = handleErrors(error, request);\n\n    if (errorObj) {\n      return finishProcessingFn(errorObj, segment);\n    }\n\n    if (response.byteLength !== 16) {\n      return finishProcessingFn({\n        status: request.status,\n        message: 'Invalid HLS key at URL: ' + request.uri,\n        code: REQUEST_ERRORS.FAILURE,\n        xhr: request\n      }, segment);\n    }\n\n    var view = new DataView(response);\n\n    segment.key.bytes = new Uint32Array([view.getUint32(0), view.getUint32(4), view.getUint32(8), view.getUint32(12)]);\n    return finishProcessingFn(null, segment);\n  };\n};\n\n/**\n * Handle init-segment responses\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} finishProcessingFn - a callback to execute to continue processing\n *                                        this request\n */\nvar handleInitSegmentResponse = function handleInitSegmentResponse(segment, captionParser, finishProcessingFn) {\n  return function (error, request) {\n    var response = request.response;\n    var errorObj = handleErrors(error, request);\n\n    if (errorObj) {\n      return finishProcessingFn(errorObj, segment);\n    }\n\n    // stop processing if received empty content\n    if (response.byteLength === 0) {\n      return finishProcessingFn({\n        status: request.status,\n        message: 'Empty HLS segment content at URL: ' + request.uri,\n        code: REQUEST_ERRORS.FAILURE,\n        xhr: request\n      }, segment);\n    }\n\n    segment.map.bytes = new Uint8Array(request.response);\n\n    // Initialize CaptionParser if it hasn't been yet\n    if (!captionParser.isInitialized()) {\n      captionParser.init();\n    }\n\n    segment.map.timescales = mp4probe.timescale(segment.map.bytes);\n    segment.map.videoTrackIds = mp4probe.videoTrackIds(segment.map.bytes);\n\n    return finishProcessingFn(null, segment);\n  };\n};\n\n/**\n * Response handler for segment-requests being sure to set the correct\n * property depending on whether the segment is encryped or not\n * Also records and keeps track of stats that are used for ABR purposes\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} finishProcessingFn - a callback to execute to continue processing\n *                                        this request\n */\nvar handleSegmentResponse = function handleSegmentResponse(segment, captionParser, finishProcessingFn) {\n  return function (error, request) {\n    var response = request.response;\n    var errorObj = handleErrors(error, request);\n    var parsed = void 0;\n\n    if (errorObj) {\n      return finishProcessingFn(errorObj, segment);\n    }\n\n    // stop processing if received empty content\n    if (response.byteLength === 0) {\n      return finishProcessingFn({\n        status: request.status,\n        message: 'Empty HLS segment content at URL: ' + request.uri,\n        code: REQUEST_ERRORS.FAILURE,\n        xhr: request\n      }, segment);\n    }\n\n    segment.stats = getRequestStats(request);\n\n    if (segment.key) {\n      segment.encryptedBytes = new Uint8Array(request.response);\n    } else {\n      segment.bytes = new Uint8Array(request.response);\n    }\n\n    // This is likely an FMP4 and has the init segment.\n    // Run through the CaptionParser in case there are captions.\n    if (segment.map && segment.map.bytes) {\n      // Initialize CaptionParser if it hasn't been yet\n      if (!captionParser.isInitialized()) {\n        captionParser.init();\n      }\n\n      parsed = captionParser.parse(segment.bytes, segment.map.videoTrackIds, segment.map.timescales);\n\n      if (parsed && parsed.captions) {\n        segment.captionStreams = parsed.captionStreams;\n        segment.fmp4Captions = parsed.captions;\n      }\n    }\n\n    return finishProcessingFn(null, segment);\n  };\n};\n\n/**\n * Decrypt the segment via the decryption web worker\n *\n * @param {WebWorker} decrypter - a WebWorker interface to AES-128 decryption routines\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} doneFn - a callback that is executed after decryption has completed\n */\nvar decryptSegment = function decryptSegment(decrypter, segment, doneFn) {\n  var decryptionHandler = function decryptionHandler(event) {\n    if (event.data.source === segment.requestId) {\n      decrypter.removeEventListener('message', decryptionHandler);\n      var decrypted = event.data.decrypted;\n\n      segment.bytes = new Uint8Array(decrypted.bytes, decrypted.byteOffset, decrypted.byteLength);\n      return doneFn(null, segment);\n    }\n  };\n\n  decrypter.addEventListener('message', decryptionHandler);\n\n  // this is an encrypted segment\n  // incrementally decrypt the segment\n  decrypter.postMessage(createTransferableMessage({\n    source: segment.requestId,\n    encrypted: segment.encryptedBytes,\n    key: segment.key.bytes,\n    iv: segment.key.iv\n  }), [segment.encryptedBytes.buffer, segment.key.bytes.buffer]);\n};\n\n/**\n * The purpose of this function is to get the most pertinent error from the\n * array of errors.\n * For instance if a timeout and two aborts occur, then the aborts were\n * likely triggered by the timeout so return that error object.\n */\nvar getMostImportantError = function getMostImportantError(errors) {\n  return errors.reduce(function (prev, err) {\n    return err.code > prev.code ? err : prev;\n  });\n};\n\n/**\n * This function waits for all XHRs to finish (with either success or failure)\n * before continueing processing via it's callback. The function gathers errors\n * from each request into a single errors array so that the error status for\n * each request can be examined later.\n *\n * @param {Object} activeXhrs - an object that tracks all XHR requests\n * @param {WebWorker} decrypter - a WebWorker interface to AES-128 decryption routines\n * @param {Function} doneFn - a callback that is executed after all resources have been\n *                            downloaded and any decryption completed\n */\nvar waitForCompletion = function waitForCompletion(activeXhrs, decrypter, doneFn) {\n  var errors = [];\n  var count = 0;\n\n  return function (error, segment) {\n    if (error) {\n      // If there are errors, we have to abort any outstanding requests\n      abortAll(activeXhrs);\n      errors.push(error);\n    }\n    count += 1;\n\n    if (count === activeXhrs.length) {\n      // Keep track of when *all* of the requests have completed\n      segment.endOfAllRequests = Date.now();\n\n      if (errors.length > 0) {\n        var worstError = getMostImportantError(errors);\n\n        return doneFn(worstError, segment);\n      }\n      if (segment.encryptedBytes) {\n        return decryptSegment(decrypter, segment, doneFn);\n      }\n      // Otherwise, everything is ready just continue\n      return doneFn(null, segment);\n    }\n  };\n};\n\n/**\n * Simple progress event callback handler that gathers some stats before\n * executing a provided callback with the `segment` object\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} progressFn - a callback that is executed each time a progress event\n *                                is received\n * @param {Event} event - the progress event object from XMLHttpRequest\n */\nvar handleProgress = function handleProgress(segment, progressFn) {\n  return function (event) {\n    segment.stats = videojs$1.mergeOptions(segment.stats, getProgressStats(event));\n\n    // record the time that we receive the first byte of data\n    if (!segment.stats.firstBytesReceivedAt && segment.stats.bytesReceived) {\n      segment.stats.firstBytesReceivedAt = Date.now();\n    }\n\n    return progressFn(event, segment);\n  };\n};\n\n/**\n * Load all resources and does any processing necessary for a media-segment\n *\n * Features:\n *   decrypts the media-segment if it has a key uri and an iv\n *   aborts *all* requests if *any* one request fails\n *\n * The segment object, at minimum, has the following format:\n * {\n *   resolvedUri: String,\n *   [byterange]: {\n *     offset: Number,\n *     length: Number\n *   },\n *   [key]: {\n *     resolvedUri: String\n *     [byterange]: {\n *       offset: Number,\n *       length: Number\n *     },\n *     iv: {\n *       bytes: Uint32Array\n *     }\n *   },\n *   [map]: {\n *     resolvedUri: String,\n *     [byterange]: {\n *       offset: Number,\n *       length: Number\n *     },\n *     [bytes]: Uint8Array\n *   }\n * }\n * ...where [name] denotes optional properties\n *\n * @param {Function} xhr - an instance of the xhr wrapper in xhr.js\n * @param {Object} xhrOptions - the base options to provide to all xhr requests\n * @param {WebWorker} decryptionWorker - a WebWorker interface to AES-128\n *                                       decryption routines\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} progressFn - a callback that receives progress events from the main\n *                                segment's xhr request\n * @param {Function} doneFn - a callback that is executed only once all requests have\n *                            succeeded or failed\n * @returns {Function} a function that, when invoked, immediately aborts all\n *                     outstanding requests\n */\nvar mediaSegmentRequest = function mediaSegmentRequest(xhr$$1, xhrOptions, decryptionWorker, captionParser, segment, progressFn, doneFn) {\n  var activeXhrs = [];\n  var finishProcessingFn = waitForCompletion(activeXhrs, decryptionWorker, doneFn);\n\n  // optionally, request the decryption key\n  if (segment.key) {\n    var keyRequestOptions = videojs$1.mergeOptions(xhrOptions, {\n      uri: segment.key.resolvedUri,\n      responseType: 'arraybuffer'\n    });\n    var keyRequestCallback = handleKeyResponse(segment, finishProcessingFn);\n    var keyXhr = xhr$$1(keyRequestOptions, keyRequestCallback);\n\n    activeXhrs.push(keyXhr);\n  }\n\n  // optionally, request the associated media init segment\n  if (segment.map && !segment.map.bytes) {\n    var initSegmentOptions = videojs$1.mergeOptions(xhrOptions, {\n      uri: segment.map.resolvedUri,\n      responseType: 'arraybuffer',\n      headers: segmentXhrHeaders(segment.map)\n    });\n    var initSegmentRequestCallback = handleInitSegmentResponse(segment, captionParser, finishProcessingFn);\n    var initSegmentXhr = xhr$$1(initSegmentOptions, initSegmentRequestCallback);\n\n    activeXhrs.push(initSegmentXhr);\n  }\n\n  var segmentRequestOptions = videojs$1.mergeOptions(xhrOptions, {\n    uri: segment.resolvedUri,\n    responseType: 'arraybuffer',\n    headers: segmentXhrHeaders(segment)\n  });\n  var segmentRequestCallback = handleSegmentResponse(segment, captionParser, finishProcessingFn);\n  var segmentXhr = xhr$$1(segmentRequestOptions, segmentRequestCallback);\n\n  segmentXhr.addEventListener('progress', handleProgress(segment, progressFn));\n  activeXhrs.push(segmentXhr);\n\n  return function () {\n    return abortAll(activeXhrs);\n  };\n};\n\n// Utilities\n\n/**\n * Returns the CSS value for the specified property on an element\n * using `getComputedStyle`. Firefox has a long-standing issue where\n * getComputedStyle() may return null when running in an iframe with\n * `display: none`.\n *\n * @see https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n * @param {HTMLElement} el the htmlelement to work on\n * @param {string} the proprety to get the style for\n */\nvar safeGetComputedStyle = function safeGetComputedStyle(el, property) {\n  var result = void 0;\n\n  if (!el) {\n    return '';\n  }\n\n  result = window$1.getComputedStyle(el);\n  if (!result) {\n    return '';\n  }\n\n  return result[property];\n};\n\n/**\n * Resuable stable sort function\n *\n * @param {Playlists} array\n * @param {Function} sortFn Different comparators\n * @function stableSort\n */\nvar stableSort = function stableSort(array, sortFn) {\n  var newArray = array.slice();\n\n  array.sort(function (left, right) {\n    var cmp = sortFn(left, right);\n\n    if (cmp === 0) {\n      return newArray.indexOf(left) - newArray.indexOf(right);\n    }\n    return cmp;\n  });\n};\n\n/**\n * A comparator function to sort two playlist object by bandwidth.\n *\n * @param {Object} left a media playlist object\n * @param {Object} right a media playlist object\n * @return {Number} Greater than zero if the bandwidth attribute of\n * left is greater than the corresponding attribute of right. Less\n * than zero if the bandwidth of right is greater than left and\n * exactly zero if the two are equal.\n */\nvar comparePlaylistBandwidth = function comparePlaylistBandwidth(left, right) {\n  var leftBandwidth = void 0;\n  var rightBandwidth = void 0;\n\n  if (left.attributes.BANDWIDTH) {\n    leftBandwidth = left.attributes.BANDWIDTH;\n  }\n  leftBandwidth = leftBandwidth || window$1.Number.MAX_VALUE;\n  if (right.attributes.BANDWIDTH) {\n    rightBandwidth = right.attributes.BANDWIDTH;\n  }\n  rightBandwidth = rightBandwidth || window$1.Number.MAX_VALUE;\n\n  return leftBandwidth - rightBandwidth;\n};\n\n/**\n * A comparator function to sort two playlist object by resolution (width).\n * @param {Object} left a media playlist object\n * @param {Object} right a media playlist object\n * @return {Number} Greater than zero if the resolution.width attribute of\n * left is greater than the corresponding attribute of right. Less\n * than zero if the resolution.width of right is greater than left and\n * exactly zero if the two are equal.\n */\nvar comparePlaylistResolution = function comparePlaylistResolution(left, right) {\n  var leftWidth = void 0;\n  var rightWidth = void 0;\n\n  if (left.attributes.RESOLUTION && left.attributes.RESOLUTION.width) {\n    leftWidth = left.attributes.RESOLUTION.width;\n  }\n\n  leftWidth = leftWidth || window$1.Number.MAX_VALUE;\n\n  if (right.attributes.RESOLUTION && right.attributes.RESOLUTION.width) {\n    rightWidth = right.attributes.RESOLUTION.width;\n  }\n\n  rightWidth = rightWidth || window$1.Number.MAX_VALUE;\n\n  // NOTE - Fallback to bandwidth sort as appropriate in cases where multiple renditions\n  // have the same media dimensions/ resolution\n  if (leftWidth === rightWidth && left.attributes.BANDWIDTH && right.attributes.BANDWIDTH) {\n    return left.attributes.BANDWIDTH - right.attributes.BANDWIDTH;\n  }\n  return leftWidth - rightWidth;\n};\n\n/**\n * Chooses the appropriate media playlist based on bandwidth and player size\n *\n * @param {Object} master\n *        Object representation of the master manifest\n * @param {Number} playerBandwidth\n *        Current calculated bandwidth of the player\n * @param {Number} playerWidth\n *        Current width of the player element\n * @param {Number} playerHeight\n *        Current height of the player element\n * @return {Playlist} the highest bitrate playlist less than the\n * currently detected bandwidth, accounting for some amount of\n * bandwidth variance\n */\nvar simpleSelector = function simpleSelector(master, playerBandwidth, playerWidth, playerHeight) {\n  // convert the playlists to an intermediary representation to make comparisons easier\n  var sortedPlaylistReps = master.playlists.map(function (playlist) {\n    var width = void 0;\n    var height = void 0;\n    var bandwidth = void 0;\n\n    width = playlist.attributes.RESOLUTION && playlist.attributes.RESOLUTION.width;\n    height = playlist.attributes.RESOLUTION && playlist.attributes.RESOLUTION.height;\n    bandwidth = playlist.attributes.BANDWIDTH;\n\n    bandwidth = bandwidth || window$1.Number.MAX_VALUE;\n\n    return {\n      bandwidth: bandwidth,\n      width: width,\n      height: height,\n      playlist: playlist\n    };\n  });\n\n  stableSort(sortedPlaylistReps, function (left, right) {\n    return left.bandwidth - right.bandwidth;\n  });\n\n  // filter out any playlists that have been excluded due to\n  // incompatible configurations\n  sortedPlaylistReps = sortedPlaylistReps.filter(function (rep) {\n    return !Playlist.isIncompatible(rep.playlist);\n  });\n\n  // filter out any playlists that have been disabled manually through the representations\n  // api or blacklisted temporarily due to playback errors.\n  var enabledPlaylistReps = sortedPlaylistReps.filter(function (rep) {\n    return Playlist.isEnabled(rep.playlist);\n  });\n\n  if (!enabledPlaylistReps.length) {\n    // if there are no enabled playlists, then they have all been blacklisted or disabled\n    // by the user through the representations api. In this case, ignore blacklisting and\n    // fallback to what the user wants by using playlists the user has not disabled.\n    enabledPlaylistReps = sortedPlaylistReps.filter(function (rep) {\n      return !Playlist.isDisabled(rep.playlist);\n    });\n  }\n\n  // filter out any variant that has greater effective bitrate\n  // than the current estimated bandwidth\n  var bandwidthPlaylistReps = enabledPlaylistReps.filter(function (rep) {\n    return rep.bandwidth * Config.BANDWIDTH_VARIANCE < playerBandwidth;\n  });\n\n  var highestRemainingBandwidthRep = bandwidthPlaylistReps[bandwidthPlaylistReps.length - 1];\n\n  // get all of the renditions with the same (highest) bandwidth\n  // and then taking the very first element\n  var bandwidthBestRep = bandwidthPlaylistReps.filter(function (rep) {\n    return rep.bandwidth === highestRemainingBandwidthRep.bandwidth;\n  })[0];\n\n  // filter out playlists without resolution information\n  var haveResolution = bandwidthPlaylistReps.filter(function (rep) {\n    return rep.width && rep.height;\n  });\n\n  // sort variants by resolution\n  stableSort(haveResolution, function (left, right) {\n    return left.width - right.width;\n  });\n\n  // if we have the exact resolution as the player use it\n  var resolutionBestRepList = haveResolution.filter(function (rep) {\n    return rep.width === playerWidth && rep.height === playerHeight;\n  });\n\n  highestRemainingBandwidthRep = resolutionBestRepList[resolutionBestRepList.length - 1];\n  // ensure that we pick the highest bandwidth variant that have exact resolution\n  var resolutionBestRep = resolutionBestRepList.filter(function (rep) {\n    return rep.bandwidth === highestRemainingBandwidthRep.bandwidth;\n  })[0];\n\n  var resolutionPlusOneList = void 0;\n  var resolutionPlusOneSmallest = void 0;\n  var resolutionPlusOneRep = void 0;\n\n  // find the smallest variant that is larger than the player\n  // if there is no match of exact resolution\n  if (!resolutionBestRep) {\n    resolutionPlusOneList = haveResolution.filter(function (rep) {\n      return rep.width > playerWidth || rep.height > playerHeight;\n    });\n\n    // find all the variants have the same smallest resolution\n    resolutionPlusOneSmallest = resolutionPlusOneList.filter(function (rep) {\n      return rep.width === resolutionPlusOneList[0].width && rep.height === resolutionPlusOneList[0].height;\n    });\n\n    // ensure that we also pick the highest bandwidth variant that\n    // is just-larger-than the video player\n    highestRemainingBandwidthRep = resolutionPlusOneSmallest[resolutionPlusOneSmallest.length - 1];\n    resolutionPlusOneRep = resolutionPlusOneSmallest.filter(function (rep) {\n      return rep.bandwidth === highestRemainingBandwidthRep.bandwidth;\n    })[0];\n  }\n\n  // fallback chain of variants\n  var chosenRep = resolutionPlusOneRep || resolutionBestRep || bandwidthBestRep || enabledPlaylistReps[0] || sortedPlaylistReps[0];\n\n  return chosenRep ? chosenRep.playlist : null;\n};\n\n// Playlist Selectors\n\n/**\n * Chooses the appropriate media playlist based on the most recent\n * bandwidth estimate and the player size.\n *\n * Expects to be called within the context of an instance of HlsHandler\n *\n * @return {Playlist} the highest bitrate playlist less than the\n * currently detected bandwidth, accounting for some amount of\n * bandwidth variance\n */\nvar lastBandwidthSelector = function lastBandwidthSelector() {\n  return simpleSelector(this.playlists.master, this.systemBandwidth, parseInt(safeGetComputedStyle(this.tech_.el(), 'width'), 10), parseInt(safeGetComputedStyle(this.tech_.el(), 'height'), 10));\n};\n\n/**\n * Chooses the appropriate media playlist based on the potential to rebuffer\n *\n * @param {Object} settings\n *        Object of information required to use this selector\n * @param {Object} settings.master\n *        Object representation of the master manifest\n * @param {Number} settings.currentTime\n *        The current time of the player\n * @param {Number} settings.bandwidth\n *        Current measured bandwidth\n * @param {Number} settings.duration\n *        Duration of the media\n * @param {Number} settings.segmentDuration\n *        Segment duration to be used in round trip time calculations\n * @param {Number} settings.timeUntilRebuffer\n *        Time left in seconds until the player has to rebuffer\n * @param {Number} settings.currentTimeline\n *        The current timeline segments are being loaded from\n * @param {SyncController} settings.syncController\n *        SyncController for determining if we have a sync point for a given playlist\n * @return {Object|null}\n *         {Object} return.playlist\n *         The highest bandwidth playlist with the least amount of rebuffering\n *         {Number} return.rebufferingImpact\n *         The amount of time in seconds switching to this playlist will rebuffer. A\n *         negative value means that switching will cause zero rebuffering.\n */\nvar minRebufferMaxBandwidthSelector = function minRebufferMaxBandwidthSelector(settings) {\n  var master = settings.master,\n      currentTime = settings.currentTime,\n      bandwidth = settings.bandwidth,\n      duration$$1 = settings.duration,\n      segmentDuration = settings.segmentDuration,\n      timeUntilRebuffer = settings.timeUntilRebuffer,\n      currentTimeline = settings.currentTimeline,\n      syncController = settings.syncController;\n\n  // filter out any playlists that have been excluded due to\n  // incompatible configurations\n\n  var compatiblePlaylists = master.playlists.filter(function (playlist) {\n    return !Playlist.isIncompatible(playlist);\n  });\n\n  // filter out any playlists that have been disabled manually through the representations\n  // api or blacklisted temporarily due to playback errors.\n  var enabledPlaylists = compatiblePlaylists.filter(Playlist.isEnabled);\n\n  if (!enabledPlaylists.length) {\n    // if there are no enabled playlists, then they have all been blacklisted or disabled\n    // by the user through the representations api. In this case, ignore blacklisting and\n    // fallback to what the user wants by using playlists the user has not disabled.\n    enabledPlaylists = compatiblePlaylists.filter(function (playlist) {\n      return !Playlist.isDisabled(playlist);\n    });\n  }\n\n  var bandwidthPlaylists = enabledPlaylists.filter(Playlist.hasAttribute.bind(null, 'BANDWIDTH'));\n\n  var rebufferingEstimates = bandwidthPlaylists.map(function (playlist) {\n    var syncPoint = syncController.getSyncPoint(playlist, duration$$1, currentTimeline, currentTime);\n    // If there is no sync point for this playlist, switching to it will require a\n    // sync request first. This will double the request time\n    var numRequests = syncPoint ? 1 : 2;\n    var requestTimeEstimate = Playlist.estimateSegmentRequestTime(segmentDuration, bandwidth, playlist);\n    var rebufferingImpact = requestTimeEstimate * numRequests - timeUntilRebuffer;\n\n    return {\n      playlist: playlist,\n      rebufferingImpact: rebufferingImpact\n    };\n  });\n\n  var noRebufferingPlaylists = rebufferingEstimates.filter(function (estimate) {\n    return estimate.rebufferingImpact <= 0;\n  });\n\n  // Sort by bandwidth DESC\n  stableSort(noRebufferingPlaylists, function (a, b) {\n    return comparePlaylistBandwidth(b.playlist, a.playlist);\n  });\n\n  if (noRebufferingPlaylists.length) {\n    return noRebufferingPlaylists[0];\n  }\n\n  stableSort(rebufferingEstimates, function (a, b) {\n    return a.rebufferingImpact - b.rebufferingImpact;\n  });\n\n  return rebufferingEstimates[0] || null;\n};\n\n/**\n * Chooses the appropriate media playlist, which in this case is the lowest bitrate\n * one with video.  If no renditions with video exist, return the lowest audio rendition.\n *\n * Expects to be called within the context of an instance of HlsHandler\n *\n * @return {Object|null}\n *         {Object} return.playlist\n *         The lowest bitrate playlist that contains a video codec.  If no such rendition\n *         exists pick the lowest audio rendition.\n */\nvar lowestBitrateCompatibleVariantSelector = function lowestBitrateCompatibleVariantSelector() {\n  // filter out any playlists that have been excluded due to\n  // incompatible configurations or playback errors\n  var playlists = this.playlists.master.playlists.filter(Playlist.isEnabled);\n\n  // Sort ascending by bitrate\n  stableSort(playlists, function (a, b) {\n    return comparePlaylistBandwidth(a, b);\n  });\n\n  // Parse and assume that playlists with no video codec have no video\n  // (this is not necessarily true, although it is generally true).\n  //\n  // If an entire manifest has no valid videos everything will get filtered\n  // out.\n  var playlistsWithVideo = playlists.filter(function (playlist) {\n    return parseCodecs(playlist.attributes.CODECS).videoCodec;\n  });\n\n  return playlistsWithVideo[0] || null;\n};\n\n/**\n * Create captions text tracks on video.js if they do not exist\n *\n * @param {Object} inbandTextTracks a reference to current inbandTextTracks\n * @param {Object} tech the video.js tech\n * @param {Object} captionStreams the caption streams to create\n * @private\n */\nvar createCaptionsTrackIfNotExists = function createCaptionsTrackIfNotExists(inbandTextTracks, tech, captionStreams) {\n  for (var trackId in captionStreams) {\n    if (!inbandTextTracks[trackId]) {\n      tech.trigger({ type: 'usage', name: 'hls-608' });\n      var track = tech.textTracks().getTrackById(trackId);\n\n      if (track) {\n        // Resuse an existing track with a CC# id because this was\n        // very likely created by videojs-contrib-hls from information\n        // in the m3u8 for us to use\n        inbandTextTracks[trackId] = track;\n      } else {\n        // Otherwise, create a track with the default `CC#` label and\n        // without a language\n        inbandTextTracks[trackId] = tech.addRemoteTextTrack({\n          kind: 'captions',\n          id: trackId,\n          label: trackId\n        }, false).track;\n      }\n    }\n  }\n};\n\nvar addCaptionData = function addCaptionData(_ref) {\n  var inbandTextTracks = _ref.inbandTextTracks,\n      captionArray = _ref.captionArray,\n      timestampOffset = _ref.timestampOffset;\n\n  if (!captionArray) {\n    return;\n  }\n\n  var Cue = window.WebKitDataCue || window.VTTCue;\n\n  captionArray.forEach(function (caption) {\n    var track = caption.stream;\n    var startTime = caption.startTime;\n    var endTime = caption.endTime;\n\n    if (!inbandTextTracks[track]) {\n      return;\n    }\n\n    startTime += timestampOffset;\n    endTime += timestampOffset;\n\n    inbandTextTracks[track].addCue(new Cue(startTime, endTime, caption.text));\n  });\n};\n\n/**\n * @file segment-loader.js\n */\n\n// in ms\nvar CHECK_BUFFER_DELAY = 500;\n\n/**\n * Determines if we should call endOfStream on the media source based\n * on the state of the buffer or if appened segment was the final\n * segment in the playlist.\n *\n * @param {Object} playlist a media playlist object\n * @param {Object} mediaSource the MediaSource object\n * @param {Number} segmentIndex the index of segment we last appended\n * @returns {Boolean} do we need to call endOfStream on the MediaSource\n */\nvar detectEndOfStream = function detectEndOfStream(playlist, mediaSource, segmentIndex) {\n  if (!playlist || !mediaSource) {\n    return false;\n  }\n\n  var segments = playlist.segments;\n\n  // determine a few boolean values to help make the branch below easier\n  // to read\n  var appendedLastSegment = segmentIndex === segments.length;\n\n  // if we've buffered to the end of the video, we need to call endOfStream\n  // so that MediaSources can trigger the `ended` event when it runs out of\n  // buffered data instead of waiting for me\n  return playlist.endList && mediaSource.readyState === 'open' && appendedLastSegment;\n};\n\nvar finite = function finite(num) {\n  return typeof num === 'number' && isFinite(num);\n};\n\nvar illegalMediaSwitch = function illegalMediaSwitch(loaderType, startingMedia, newSegmentMedia) {\n  // Although these checks should most likely cover non 'main' types, for now it narrows\n  // the scope of our checks.\n  if (loaderType !== 'main' || !startingMedia || !newSegmentMedia) {\n    return null;\n  }\n\n  if (!newSegmentMedia.containsAudio && !newSegmentMedia.containsVideo) {\n    return 'Neither audio nor video found in segment.';\n  }\n\n  if (startingMedia.containsVideo && !newSegmentMedia.containsVideo) {\n    return 'Only audio found in segment when we expected video.' + ' We can\\'t switch to audio only from a stream that had video.' + ' To get rid of this message, please add codec information to the manifest.';\n  }\n\n  if (!startingMedia.containsVideo && newSegmentMedia.containsVideo) {\n    return 'Video found in segment when we expected only audio.' + ' We can\\'t switch to a stream with video from an audio only stream.' + ' To get rid of this message, please add codec information to the manifest.';\n  }\n\n  return null;\n};\n\n/**\n * Calculates a time value that is safe to remove from the back buffer without interupting\n * playback.\n *\n * @param {TimeRange} seekable\n *        The current seekable range\n * @param {Number} currentTime\n *        The current time of the player\n * @param {Number} targetDuration\n *        The target duration of the current playlist\n * @return {Number}\n *         Time that is safe to remove from the back buffer without interupting playback\n */\nvar safeBackBufferTrimTime = function safeBackBufferTrimTime(seekable$$1, currentTime, targetDuration) {\n  var removeToTime = void 0;\n\n  if (seekable$$1.length && seekable$$1.start(0) > 0 && seekable$$1.start(0) < currentTime) {\n    // If we have a seekable range use that as the limit for what can be removed safely\n    removeToTime = seekable$$1.start(0);\n  } else {\n    // otherwise remove anything older than 30 seconds before the current play head\n    removeToTime = currentTime - 30;\n  }\n\n  // Don't allow removing from the buffer within target duration of current time\n  // to avoid the possibility of removing the GOP currently being played which could\n  // cause playback stalls.\n  return Math.min(removeToTime, currentTime - targetDuration);\n};\n\nvar segmentInfoString = function segmentInfoString(segmentInfo) {\n  var _segmentInfo$segment = segmentInfo.segment,\n      start = _segmentInfo$segment.start,\n      end = _segmentInfo$segment.end,\n      _segmentInfo$playlist = segmentInfo.playlist,\n      seq = _segmentInfo$playlist.mediaSequence,\n      id = _segmentInfo$playlist.id,\n      _segmentInfo$playlist2 = _segmentInfo$playlist.segments,\n      segments = _segmentInfo$playlist2 === undefined ? [] : _segmentInfo$playlist2,\n      index = segmentInfo.mediaIndex,\n      timeline = segmentInfo.timeline;\n\n  return ['appending [' + index + '] of [' + seq + ', ' + (seq + segments.length) + '] from playlist [' + id + ']', '[' + start + ' => ' + end + '] in timeline [' + timeline + ']'].join(' ');\n};\n\n/**\n * An object that manages segment loading and appending.\n *\n * @class SegmentLoader\n * @param {Object} options required and optional options\n * @extends videojs.EventTarget\n */\n\nvar SegmentLoader = function (_videojs$EventTarget) {\n  inherits$1(SegmentLoader, _videojs$EventTarget);\n\n  function SegmentLoader(settings) {\n    classCallCheck$1(this, SegmentLoader);\n\n    // check pre-conditions\n    var _this = possibleConstructorReturn$1(this, (SegmentLoader.__proto__ || Object.getPrototypeOf(SegmentLoader)).call(this));\n\n    if (!settings) {\n      throw new TypeError('Initialization settings are required');\n    }\n    if (typeof settings.currentTime !== 'function') {\n      throw new TypeError('No currentTime getter specified');\n    }\n    if (!settings.mediaSource) {\n      throw new TypeError('No MediaSource specified');\n    }\n    // public properties\n    _this.bandwidth = settings.bandwidth;\n    _this.throughput = { rate: 0, count: 0 };\n    _this.roundTrip = NaN;\n    _this.resetStats_();\n    _this.mediaIndex = null;\n\n    // private settings\n    _this.hasPlayed_ = settings.hasPlayed;\n    _this.currentTime_ = settings.currentTime;\n    _this.seekable_ = settings.seekable;\n    _this.seeking_ = settings.seeking;\n    _this.duration_ = settings.duration;\n    _this.mediaSource_ = settings.mediaSource;\n    _this.hls_ = settings.hls;\n    _this.loaderType_ = settings.loaderType;\n    _this.startingMedia_ = void 0;\n    _this.segmentMetadataTrack_ = settings.segmentMetadataTrack;\n    _this.goalBufferLength_ = settings.goalBufferLength;\n    _this.sourceType_ = settings.sourceType;\n    _this.inbandTextTracks_ = settings.inbandTextTracks;\n    _this.state_ = 'INIT';\n\n    // private instance variables\n    _this.checkBufferTimeout_ = null;\n    _this.error_ = void 0;\n    _this.currentTimeline_ = -1;\n    _this.pendingSegment_ = null;\n    _this.mimeType_ = null;\n    _this.sourceUpdater_ = null;\n    _this.xhrOptions_ = null;\n\n    // Fragmented mp4 playback\n    _this.activeInitSegmentId_ = null;\n    _this.initSegments_ = {};\n    // Fmp4 CaptionParser\n    _this.captionParser_ = new CaptionParser();\n\n    _this.decrypter_ = settings.decrypter;\n\n    // Manages the tracking and generation of sync-points, mappings\n    // between a time in the display time and a segment index within\n    // a playlist\n    _this.syncController_ = settings.syncController;\n    _this.syncPoint_ = {\n      segmentIndex: 0,\n      time: 0\n    };\n\n    _this.syncController_.on('syncinfoupdate', function () {\n      return _this.trigger('syncinfoupdate');\n    });\n\n    _this.mediaSource_.addEventListener('sourceopen', function () {\n      return _this.ended_ = false;\n    });\n\n    // ...for determining the fetch location\n    _this.fetchAtBuffer_ = false;\n\n    _this.logger_ = logger('SegmentLoader[' + _this.loaderType_ + ']');\n\n    Object.defineProperty(_this, 'state', {\n      get: function get$$1() {\n        return this.state_;\n      },\n      set: function set$$1(newState) {\n        if (newState !== this.state_) {\n          this.logger_(this.state_ + ' -> ' + newState);\n          this.state_ = newState;\n        }\n      }\n    });\n    return _this;\n  }\n\n  /**\n   * reset all of our media stats\n   *\n   * @private\n   */\n\n  createClass$1(SegmentLoader, [{\n    key: 'resetStats_',\n    value: function resetStats_() {\n      this.mediaBytesTransferred = 0;\n      this.mediaRequests = 0;\n      this.mediaRequestsAborted = 0;\n      this.mediaRequestsTimedout = 0;\n      this.mediaRequestsErrored = 0;\n      this.mediaTransferDuration = 0;\n      this.mediaSecondsLoaded = 0;\n    }\n\n    /**\n     * dispose of the SegmentLoader and reset to the default state\n     */\n\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      this.state = 'DISPOSED';\n      this.pause();\n      this.abort_();\n      if (this.sourceUpdater_) {\n        this.sourceUpdater_.dispose();\n      }\n      this.resetStats_();\n      this.captionParser_.reset();\n    }\n\n    /**\n     * abort anything that is currently doing on with the SegmentLoader\n     * and reset to a default state\n     */\n\n  }, {\n    key: 'abort',\n    value: function abort() {\n      if (this.state !== 'WAITING') {\n        if (this.pendingSegment_) {\n          this.pendingSegment_ = null;\n        }\n        return;\n      }\n\n      this.abort_();\n\n      // We aborted the requests we were waiting on, so reset the loader's state to READY\n      // since we are no longer \"waiting\" on any requests. XHR callback is not always run\n      // when the request is aborted. This will prevent the loader from being stuck in the\n      // WAITING state indefinitely.\n      this.state = 'READY';\n\n      // don't wait for buffer check timeouts to begin fetching the\n      // next segment\n      if (!this.paused()) {\n        this.monitorBuffer_();\n      }\n    }\n\n    /**\n     * abort all pending xhr requests and null any pending segements\n     *\n     * @private\n     */\n\n  }, {\n    key: 'abort_',\n    value: function abort_() {\n      if (this.pendingSegment_) {\n        this.pendingSegment_.abortRequests();\n      }\n\n      // clear out the segment being processed\n      this.pendingSegment_ = null;\n    }\n\n    /**\n     * set an error on the segment loader and null out any pending segements\n     *\n     * @param {Error} error the error to set on the SegmentLoader\n     * @return {Error} the error that was set or that is currently set\n     */\n\n  }, {\n    key: 'error',\n    value: function error(_error) {\n      if (typeof _error !== 'undefined') {\n        this.error_ = _error;\n      }\n\n      this.pendingSegment_ = null;\n      return this.error_;\n    }\n  }, {\n    key: 'endOfStream',\n    value: function endOfStream() {\n      this.ended_ = true;\n      this.pause();\n      this.trigger('ended');\n    }\n\n    /**\n     * Indicates which time ranges are buffered\n     *\n     * @return {TimeRange}\n     *         TimeRange object representing the current buffered ranges\n     */\n\n  }, {\n    key: 'buffered_',\n    value: function buffered_() {\n      if (!this.sourceUpdater_) {\n        return videojs$1.createTimeRanges();\n      }\n\n      return this.sourceUpdater_.buffered();\n    }\n\n    /**\n     * Gets and sets init segment for the provided map\n     *\n     * @param {Object} map\n     *        The map object representing the init segment to get or set\n     * @param {Boolean=} set\n     *        If true, the init segment for the provided map should be saved\n     * @return {Object}\n     *         map object for desired init segment\n     */\n\n  }, {\n    key: 'initSegment',\n    value: function initSegment(map) {\n      var set$$1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (!map) {\n        return null;\n      }\n\n      var id = initSegmentId(map);\n      var storedMap = this.initSegments_[id];\n\n      if (set$$1 && !storedMap && map.bytes) {\n        this.initSegments_[id] = storedMap = {\n          resolvedUri: map.resolvedUri,\n          byterange: map.byterange,\n          bytes: map.bytes,\n          timescales: map.timescales,\n          videoTrackIds: map.videoTrackIds\n        };\n      }\n\n      return storedMap || map;\n    }\n\n    /**\n     * Returns true if all configuration required for loading is present, otherwise false.\n     *\n     * @return {Boolean} True if the all configuration is ready for loading\n     * @private\n     */\n\n  }, {\n    key: 'couldBeginLoading_',\n    value: function couldBeginLoading_() {\n      return this.playlist_ && (\n      // the source updater is created when init_ is called, so either having a\n      // source updater or being in the INIT state with a mimeType is enough\n      // to say we have all the needed configuration to start loading.\n      this.sourceUpdater_ || this.mimeType_ && this.state === 'INIT') && !this.paused();\n    }\n\n    /**\n     * load a playlist and start to fill the buffer\n     */\n\n  }, {\n    key: 'load',\n    value: function load() {\n      // un-pause\n      this.monitorBuffer_();\n\n      // if we don't have a playlist yet, keep waiting for one to be\n      // specified\n      if (!this.playlist_) {\n        return;\n      }\n\n      // not sure if this is the best place for this\n      this.syncController_.setDateTimeMapping(this.playlist_);\n\n      // if all the configuration is ready, initialize and begin loading\n      if (this.state === 'INIT' && this.couldBeginLoading_()) {\n        return this.init_();\n      }\n\n      // if we're in the middle of processing a segment already, don't\n      // kick off an additional segment request\n      if (!this.couldBeginLoading_() || this.state !== 'READY' && this.state !== 'INIT') {\n        return;\n      }\n\n      this.state = 'READY';\n    }\n\n    /**\n     * Once all the starting parameters have been specified, begin\n     * operation. This method should only be invoked from the INIT\n     * state.\n     *\n     * @private\n     */\n\n  }, {\n    key: 'init_',\n    value: function init_() {\n      this.state = 'READY';\n      this.sourceUpdater_ = new SourceUpdater(this.mediaSource_, this.mimeType_, this.loaderType_, this.sourceBufferEmitter_);\n      this.resetEverything();\n      return this.monitorBuffer_();\n    }\n\n    /**\n     * set a playlist on the segment loader\n     *\n     * @param {PlaylistLoader} media the playlist to set on the segment loader\n     */\n\n  }, {\n    key: 'playlist',\n    value: function playlist(newPlaylist) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (!newPlaylist) {\n        return;\n      }\n\n      var oldPlaylist = this.playlist_;\n      var segmentInfo = this.pendingSegment_;\n\n      this.playlist_ = newPlaylist;\n      this.xhrOptions_ = options;\n\n      // when we haven't started playing yet, the start of a live playlist\n      // is always our zero-time so force a sync update each time the playlist\n      // is refreshed from the server\n      if (!this.hasPlayed_()) {\n        newPlaylist.syncInfo = {\n          mediaSequence: newPlaylist.mediaSequence,\n          time: 0\n        };\n      }\n\n      var oldId = oldPlaylist ? oldPlaylist.id : null;\n\n      this.logger_('playlist update [' + oldId + ' => ' + newPlaylist.id + ']');\n\n      // in VOD, this is always a rendition switch (or we updated our syncInfo above)\n      // in LIVE, we always want to update with new playlists (including refreshes)\n      this.trigger('syncinfoupdate');\n\n      // if we were unpaused but waiting for a playlist, start\n      // buffering now\n      if (this.state === 'INIT' && this.couldBeginLoading_()) {\n        return this.init_();\n      }\n\n      if (!oldPlaylist || oldPlaylist.uri !== newPlaylist.uri) {\n        if (this.mediaIndex !== null) {\n          // we must \"resync\" the segment loader when we switch renditions and\n          // the segment loader is already synced to the previous rendition\n          this.resyncLoader();\n        }\n\n        // the rest of this function depends on `oldPlaylist` being defined\n        return;\n      }\n\n      // we reloaded the same playlist so we are in a live scenario\n      // and we will likely need to adjust the mediaIndex\n      var mediaSequenceDiff = newPlaylist.mediaSequence - oldPlaylist.mediaSequence;\n\n      this.logger_('live window shift [' + mediaSequenceDiff + ']');\n\n      // update the mediaIndex on the SegmentLoader\n      // this is important because we can abort a request and this value must be\n      // equal to the last appended mediaIndex\n      if (this.mediaIndex !== null) {\n        this.mediaIndex -= mediaSequenceDiff;\n      }\n\n      // update the mediaIndex on the SegmentInfo object\n      // this is important because we will update this.mediaIndex with this value\n      // in `handleUpdateEnd_` after the segment has been successfully appended\n      if (segmentInfo) {\n        segmentInfo.mediaIndex -= mediaSequenceDiff;\n\n        // we need to update the referenced segment so that timing information is\n        // saved for the new playlist's segment, however, if the segment fell off the\n        // playlist, we can leave the old reference and just lose the timing info\n        if (segmentInfo.mediaIndex >= 0) {\n          segmentInfo.segment = newPlaylist.segments[segmentInfo.mediaIndex];\n        }\n      }\n\n      this.syncController_.saveExpiredSegmentInfo(oldPlaylist, newPlaylist);\n    }\n\n    /**\n     * Prevent the loader from fetching additional segments. If there\n     * is a segment request outstanding, it will finish processing\n     * before the loader halts. A segment loader can be unpaused by\n     * calling load().\n     */\n\n  }, {\n    key: 'pause',\n    value: function pause() {\n      if (this.checkBufferTimeout_) {\n        window$1.clearTimeout(this.checkBufferTimeout_);\n\n        this.checkBufferTimeout_ = null;\n      }\n    }\n\n    /**\n     * Returns whether the segment loader is fetching additional\n     * segments when given the opportunity. This property can be\n     * modified through calls to pause() and load().\n     */\n\n  }, {\n    key: 'paused',\n    value: function paused() {\n      return this.checkBufferTimeout_ === null;\n    }\n\n    /**\n     * create/set the following mimetype on the SourceBuffer through a\n     * SourceUpdater\n     *\n     * @param {String} mimeType the mime type string to use\n     * @param {Object} sourceBufferEmitter an event emitter that fires when a source buffer\n     * is added to the media source\n     */\n\n  }, {\n    key: 'mimeType',\n    value: function mimeType(_mimeType, sourceBufferEmitter) {\n      if (this.mimeType_) {\n        return;\n      }\n\n      this.mimeType_ = _mimeType;\n      this.sourceBufferEmitter_ = sourceBufferEmitter;\n      // if we were unpaused but waiting for a sourceUpdater, start\n      // buffering now\n      if (this.state === 'INIT' && this.couldBeginLoading_()) {\n        this.init_();\n      }\n    }\n\n    /**\n     * Delete all the buffered data and reset the SegmentLoader\n     * @param {Function} [done] an optional callback to be executed when the remove\n     * operation is complete\n     */\n\n  }, {\n    key: 'resetEverything',\n    value: function resetEverything(done) {\n      this.ended_ = false;\n      this.resetLoader();\n      this.remove(0, this.duration_(), done);\n      // clears fmp4 captions\n      this.captionParser_.clearAllCaptions();\n      this.trigger('reseteverything');\n    }\n\n    /**\n     * Force the SegmentLoader to resync and start loading around the currentTime instead\n     * of starting at the end of the buffer\n     *\n     * Useful for fast quality changes\n     */\n\n  }, {\n    key: 'resetLoader',\n    value: function resetLoader() {\n      this.fetchAtBuffer_ = false;\n      this.resyncLoader();\n    }\n\n    /**\n     * Force the SegmentLoader to restart synchronization and make a conservative guess\n     * before returning to the simple walk-forward method\n     */\n\n  }, {\n    key: 'resyncLoader',\n    value: function resyncLoader() {\n      this.mediaIndex = null;\n      this.syncPoint_ = null;\n      this.abort();\n    }\n\n    /**\n     * Remove any data in the source buffer between start and end times\n     * @param {Number} start - the start time of the region to remove from the buffer\n     * @param {Number} end - the end time of the region to remove from the buffer\n     * @param {Function} [done] - an optional callback to be executed when the remove\n     * operation is complete\n     */\n\n  }, {\n    key: 'remove',\n    value: function remove(start, end, done) {\n      if (this.sourceUpdater_) {\n        this.sourceUpdater_.remove(start, end, done);\n      }\n      removeCuesFromTrack(start, end, this.segmentMetadataTrack_);\n\n      if (this.inbandTextTracks_) {\n        for (var id in this.inbandTextTracks_) {\n          removeCuesFromTrack(start, end, this.inbandTextTracks_[id]);\n        }\n      }\n    }\n\n    /**\n     * (re-)schedule monitorBufferTick_ to run as soon as possible\n     *\n     * @private\n     */\n\n  }, {\n    key: 'monitorBuffer_',\n    value: function monitorBuffer_() {\n      if (this.checkBufferTimeout_) {\n        window$1.clearTimeout(this.checkBufferTimeout_);\n      }\n\n      this.checkBufferTimeout_ = window$1.setTimeout(this.monitorBufferTick_.bind(this), 1);\n    }\n\n    /**\n     * As long as the SegmentLoader is in the READY state, periodically\n     * invoke fillBuffer_().\n     *\n     * @private\n     */\n\n  }, {\n    key: 'monitorBufferTick_',\n    value: function monitorBufferTick_() {\n      if (this.state === 'READY') {\n        this.fillBuffer_();\n      }\n\n      if (this.checkBufferTimeout_) {\n        window$1.clearTimeout(this.checkBufferTimeout_);\n      }\n\n      this.checkBufferTimeout_ = window$1.setTimeout(this.monitorBufferTick_.bind(this), CHECK_BUFFER_DELAY);\n    }\n\n    /**\n     * fill the buffer with segements unless the sourceBuffers are\n     * currently updating\n     *\n     * Note: this function should only ever be called by monitorBuffer_\n     * and never directly\n     *\n     * @private\n     */\n\n  }, {\n    key: 'fillBuffer_',\n    value: function fillBuffer_() {\n      if (this.sourceUpdater_.updating()) {\n        return;\n      }\n\n      if (!this.syncPoint_) {\n        this.syncPoint_ = this.syncController_.getSyncPoint(this.playlist_, this.duration_(), this.currentTimeline_, this.currentTime_());\n      }\n\n      // see if we need to begin loading immediately\n      var segmentInfo = this.checkBuffer_(this.buffered_(), this.playlist_, this.mediaIndex, this.hasPlayed_(), this.currentTime_(), this.syncPoint_);\n\n      if (!segmentInfo) {\n        return;\n      }\n\n      var isEndOfStream = detectEndOfStream(this.playlist_, this.mediaSource_, segmentInfo.mediaIndex);\n\n      if (isEndOfStream) {\n        this.endOfStream();\n        return;\n      }\n\n      if (segmentInfo.mediaIndex === this.playlist_.segments.length - 1 && this.mediaSource_.readyState === 'ended' && !this.seeking_()) {\n        return;\n      }\n\n      // We will need to change timestampOffset of the sourceBuffer if either of\n      // the following conditions are true:\n      // - The segment.timeline !== this.currentTimeline\n      //   (we are crossing a discontinuity somehow)\n      // - The \"timestampOffset\" for the start of this segment is less than\n      //   the currently set timestampOffset\n      // Also, clear captions if we are crossing a discontinuity boundary\n      if (segmentInfo.timeline !== this.currentTimeline_ || segmentInfo.startOfSegment !== null && segmentInfo.startOfSegment < this.sourceUpdater_.timestampOffset()) {\n        this.syncController_.reset();\n        segmentInfo.timestampOffset = segmentInfo.startOfSegment;\n        this.captionParser_.clearAllCaptions();\n      }\n\n      this.loadSegment_(segmentInfo);\n    }\n\n    /**\n     * Determines what segment request should be made, given current playback\n     * state.\n     *\n     * @param {TimeRanges} buffered - the state of the buffer\n     * @param {Object} playlist - the playlist object to fetch segments from\n     * @param {Number} mediaIndex - the previous mediaIndex fetched or null\n     * @param {Boolean} hasPlayed - a flag indicating whether we have played or not\n     * @param {Number} currentTime - the playback position in seconds\n     * @param {Object} syncPoint - a segment info object that describes the\n     * @returns {Object} a segment request object that describes the segment to load\n     */\n\n  }, {\n    key: 'checkBuffer_',\n    value: function checkBuffer_(buffered, playlist, mediaIndex, hasPlayed, currentTime, syncPoint) {\n      var lastBufferedEnd = 0;\n      var startOfSegment = void 0;\n\n      if (buffered.length) {\n        lastBufferedEnd = buffered.end(buffered.length - 1);\n      }\n\n      var bufferedTime = Math.max(0, lastBufferedEnd - currentTime);\n\n      if (!playlist.segments.length) {\n        return null;\n      }\n\n      // if there is plenty of content buffered, and the video has\n      // been played before relax for awhile\n      if (bufferedTime >= this.goalBufferLength_()) {\n        return null;\n      }\n\n      // if the video has not yet played once, and we already have\n      // one segment downloaded do nothing\n      if (!hasPlayed && bufferedTime >= 1) {\n        return null;\n      }\n\n      // When the syncPoint is null, there is no way of determining a good\n      // conservative segment index to fetch from\n      // The best thing to do here is to get the kind of sync-point data by\n      // making a request\n      if (syncPoint === null) {\n        mediaIndex = this.getSyncSegmentCandidate_(playlist);\n        return this.generateSegmentInfo_(playlist, mediaIndex, null, true);\n      }\n\n      // Under normal playback conditions fetching is a simple walk forward\n      if (mediaIndex !== null) {\n        var segment = playlist.segments[mediaIndex];\n\n        if (segment && segment.end) {\n          startOfSegment = segment.end;\n        } else {\n          startOfSegment = lastBufferedEnd;\n        }\n        return this.generateSegmentInfo_(playlist, mediaIndex + 1, startOfSegment, false);\n      }\n\n      // There is a sync-point but the lack of a mediaIndex indicates that\n      // we need to make a good conservative guess about which segment to\n      // fetch\n      if (this.fetchAtBuffer_) {\n        // Find the segment containing the end of the buffer\n        var mediaSourceInfo = Playlist.getMediaInfoForTime(playlist, lastBufferedEnd, syncPoint.segmentIndex, syncPoint.time);\n\n        mediaIndex = mediaSourceInfo.mediaIndex;\n        startOfSegment = mediaSourceInfo.startTime;\n      } else {\n        // Find the segment containing currentTime\n        var _mediaSourceInfo = Playlist.getMediaInfoForTime(playlist, currentTime, syncPoint.segmentIndex, syncPoint.time);\n\n        mediaIndex = _mediaSourceInfo.mediaIndex;\n        startOfSegment = _mediaSourceInfo.startTime;\n      }\n\n      return this.generateSegmentInfo_(playlist, mediaIndex, startOfSegment, false);\n    }\n\n    /**\n     * The segment loader has no recourse except to fetch a segment in the\n     * current playlist and use the internal timestamps in that segment to\n     * generate a syncPoint. This function returns a good candidate index\n     * for that process.\n     *\n     * @param {Object} playlist - the playlist object to look for a\n     * @returns {Number} An index of a segment from the playlist to load\n     */\n\n  }, {\n    key: 'getSyncSegmentCandidate_',\n    value: function getSyncSegmentCandidate_(playlist) {\n      var _this2 = this;\n\n      if (this.currentTimeline_ === -1) {\n        return 0;\n      }\n\n      var segmentIndexArray = playlist.segments.map(function (s, i) {\n        return {\n          timeline: s.timeline,\n          segmentIndex: i\n        };\n      }).filter(function (s) {\n        return s.timeline === _this2.currentTimeline_;\n      });\n\n      if (segmentIndexArray.length) {\n        return segmentIndexArray[Math.min(segmentIndexArray.length - 1, 1)].segmentIndex;\n      }\n\n      return Math.max(playlist.segments.length - 1, 0);\n    }\n  }, {\n    key: 'generateSegmentInfo_',\n    value: function generateSegmentInfo_(playlist, mediaIndex, startOfSegment, isSyncRequest) {\n      if (mediaIndex < 0 || mediaIndex >= playlist.segments.length) {\n        return null;\n      }\n\n      var segment = playlist.segments[mediaIndex];\n\n      return {\n        requestId: 'segment-loader-' + Math.random(),\n        // resolve the segment URL relative to the playlist\n        uri: segment.resolvedUri,\n        // the segment's mediaIndex at the time it was requested\n        mediaIndex: mediaIndex,\n        // whether or not to update the SegmentLoader's state with this\n        // segment's mediaIndex\n        isSyncRequest: isSyncRequest,\n        startOfSegment: startOfSegment,\n        // the segment's playlist\n        playlist: playlist,\n        // unencrypted bytes of the segment\n        bytes: null,\n        // when a key is defined for this segment, the encrypted bytes\n        encryptedBytes: null,\n        // The target timestampOffset for this segment when we append it\n        // to the source buffer\n        timestampOffset: null,\n        // The timeline that the segment is in\n        timeline: segment.timeline,\n        // The expected duration of the segment in seconds\n        duration: segment.duration,\n        // retain the segment in case the playlist updates while doing an async process\n        segment: segment\n      };\n    }\n\n    /**\n     * Determines if the network has enough bandwidth to complete the current segment\n     * request in a timely manner. If not, the request will be aborted early and bandwidth\n     * updated to trigger a playlist switch.\n     *\n     * @param {Object} stats\n     *        Object containing stats about the request timing and size\n     * @return {Boolean} True if the request was aborted, false otherwise\n     * @private\n     */\n\n  }, {\n    key: 'abortRequestEarly_',\n    value: function abortRequestEarly_(stats) {\n      if (this.hls_.tech_.paused() ||\n      // Don't abort if the current playlist is on the lowestEnabledRendition\n      // TODO: Replace using timeout with a boolean indicating whether this playlist is\n      //       the lowestEnabledRendition.\n      !this.xhrOptions_.timeout ||\n      // Don't abort if we have no bandwidth information to estimate segment sizes\n      !this.playlist_.attributes.BANDWIDTH) {\n        return false;\n      }\n\n      // Wait at least 1 second since the first byte of data has been received before\n      // using the calculated bandwidth from the progress event to allow the bitrate\n      // to stabilize\n      if (Date.now() - (stats.firstBytesReceivedAt || Date.now()) < 1000) {\n        return false;\n      }\n\n      var currentTime = this.currentTime_();\n      var measuredBandwidth = stats.bandwidth;\n      var segmentDuration = this.pendingSegment_.duration;\n\n      var requestTimeRemaining = Playlist.estimateSegmentRequestTime(segmentDuration, measuredBandwidth, this.playlist_, stats.bytesReceived);\n\n      // Subtract 1 from the timeUntilRebuffer so we still consider an early abort\n      // if we are only left with less than 1 second when the request completes.\n      // A negative timeUntilRebuffering indicates we are already rebuffering\n      var timeUntilRebuffer$$1 = timeUntilRebuffer(this.buffered_(), currentTime, this.hls_.tech_.playbackRate()) - 1;\n\n      // Only consider aborting early if the estimated time to finish the download\n      // is larger than the estimated time until the player runs out of forward buffer\n      if (requestTimeRemaining <= timeUntilRebuffer$$1) {\n        return false;\n      }\n\n      var switchCandidate = minRebufferMaxBandwidthSelector({\n        master: this.hls_.playlists.master,\n        currentTime: currentTime,\n        bandwidth: measuredBandwidth,\n        duration: this.duration_(),\n        segmentDuration: segmentDuration,\n        timeUntilRebuffer: timeUntilRebuffer$$1,\n        currentTimeline: this.currentTimeline_,\n        syncController: this.syncController_\n      });\n\n      if (!switchCandidate) {\n        return;\n      }\n\n      var rebufferingImpact = requestTimeRemaining - timeUntilRebuffer$$1;\n\n      var timeSavedBySwitching = rebufferingImpact - switchCandidate.rebufferingImpact;\n\n      var minimumTimeSaving = 0.5;\n\n      // If we are already rebuffering, increase the amount of variance we add to the\n      // potential round trip time of the new request so that we are not too aggressive\n      // with switching to a playlist that might save us a fraction of a second.\n      if (timeUntilRebuffer$$1 <= TIME_FUDGE_FACTOR) {\n        minimumTimeSaving = 1;\n      }\n\n      if (!switchCandidate.playlist || switchCandidate.playlist.uri === this.playlist_.uri || timeSavedBySwitching < minimumTimeSaving) {\n        return false;\n      }\n\n      // set the bandwidth to that of the desired playlist being sure to scale by\n      // BANDWIDTH_VARIANCE and add one so the playlist selector does not exclude it\n      // don't trigger a bandwidthupdate as the bandwidth is artifial\n      this.bandwidth = switchCandidate.playlist.attributes.BANDWIDTH * Config.BANDWIDTH_VARIANCE + 1;\n      this.abort();\n      this.trigger('earlyabort');\n      return true;\n    }\n\n    /**\n     * XHR `progress` event handler\n     *\n     * @param {Event}\n     *        The XHR `progress` event\n     * @param {Object} simpleSegment\n     *        A simplified segment object copy\n     * @private\n     */\n\n  }, {\n    key: 'handleProgress_',\n    value: function handleProgress_(event, simpleSegment) {\n      if (!this.pendingSegment_ || simpleSegment.requestId !== this.pendingSegment_.requestId || this.abortRequestEarly_(simpleSegment.stats)) {\n        return;\n      }\n\n      this.trigger('progress');\n    }\n\n    /**\n     * load a specific segment from a request into the buffer\n     *\n     * @private\n     */\n\n  }, {\n    key: 'loadSegment_',\n    value: function loadSegment_(segmentInfo) {\n      this.state = 'WAITING';\n      this.pendingSegment_ = segmentInfo;\n      this.trimBackBuffer_(segmentInfo);\n\n      segmentInfo.abortRequests = mediaSegmentRequest(this.hls_.xhr, this.xhrOptions_, this.decrypter_, this.captionParser_, this.createSimplifiedSegmentObj_(segmentInfo),\n      // progress callback\n      this.handleProgress_.bind(this), this.segmentRequestFinished_.bind(this));\n    }\n\n    /**\n     * trim the back buffer so that we don't have too much data\n     * in the source buffer\n     *\n     * @private\n     *\n     * @param {Object} segmentInfo - the current segment\n     */\n\n  }, {\n    key: 'trimBackBuffer_',\n    value: function trimBackBuffer_(segmentInfo) {\n      var removeToTime = safeBackBufferTrimTime(this.seekable_(), this.currentTime_(), this.playlist_.targetDuration || 10);\n\n      // Chrome has a hard limit of 150MB of\n      // buffer and a very conservative \"garbage collector\"\n      // We manually clear out the old buffer to ensure\n      // we don't trigger the QuotaExceeded error\n      // on the source buffer during subsequent appends\n\n      if (removeToTime > 0) {\n        this.remove(0, removeToTime);\n      }\n    }\n\n    /**\n     * created a simplified copy of the segment object with just the\n     * information necessary to perform the XHR and decryption\n     *\n     * @private\n     *\n     * @param {Object} segmentInfo - the current segment\n     * @returns {Object} a simplified segment object copy\n     */\n\n  }, {\n    key: 'createSimplifiedSegmentObj_',\n    value: function createSimplifiedSegmentObj_(segmentInfo) {\n      var segment = segmentInfo.segment;\n      var simpleSegment = {\n        resolvedUri: segment.resolvedUri,\n        byterange: segment.byterange,\n        requestId: segmentInfo.requestId\n      };\n\n      if (segment.key) {\n        // if the media sequence is greater than 2^32, the IV will be incorrect\n        // assuming 10s segments, that would be about 1300 years\n        var iv = segment.key.iv || new Uint32Array([0, 0, 0, segmentInfo.mediaIndex + segmentInfo.playlist.mediaSequence]);\n\n        simpleSegment.key = {\n          resolvedUri: segment.key.resolvedUri,\n          iv: iv\n        };\n      }\n\n      if (segment.map) {\n        simpleSegment.map = this.initSegment(segment.map);\n      }\n\n      return simpleSegment;\n    }\n\n    /**\n     * Handle the callback from the segmentRequest function and set the\n     * associated SegmentLoader state and errors if necessary\n     *\n     * @private\n     */\n\n  }, {\n    key: 'segmentRequestFinished_',\n    value: function segmentRequestFinished_(error, simpleSegment) {\n      // every request counts as a media request even if it has been aborted\n      // or canceled due to a timeout\n      this.mediaRequests += 1;\n\n      if (simpleSegment.stats) {\n        this.mediaBytesTransferred += simpleSegment.stats.bytesReceived;\n        this.mediaTransferDuration += simpleSegment.stats.roundTripTime;\n      }\n\n      // The request was aborted and the SegmentLoader has already been reset\n      if (!this.pendingSegment_) {\n        this.mediaRequestsAborted += 1;\n        return;\n      }\n\n      // the request was aborted and the SegmentLoader has already started\n      // another request. this can happen when the timeout for an aborted\n      // request triggers due to a limitation in the XHR library\n      // do not count this as any sort of request or we risk double-counting\n      if (simpleSegment.requestId !== this.pendingSegment_.requestId) {\n        return;\n      }\n\n      // an error occurred from the active pendingSegment_ so reset everything\n      if (error) {\n        this.pendingSegment_ = null;\n        this.state = 'READY';\n\n        // the requests were aborted just record the aborted stat and exit\n        // this is not a true error condition and nothing corrective needs\n        // to be done\n        if (error.code === REQUEST_ERRORS.ABORTED) {\n          this.mediaRequestsAborted += 1;\n          return;\n        }\n\n        this.pause();\n\n        // the error is really just that at least one of the requests timed-out\n        // set the bandwidth to a very low value and trigger an ABR switch to\n        // take emergency action\n        if (error.code === REQUEST_ERRORS.TIMEOUT) {\n          this.mediaRequestsTimedout += 1;\n          this.bandwidth = 1;\n          this.roundTrip = NaN;\n          this.trigger('bandwidthupdate');\n          return;\n        }\n\n        // if control-flow has arrived here, then the error is real\n        // emit an error event to blacklist the current playlist\n        this.mediaRequestsErrored += 1;\n        this.error(error);\n        this.trigger('error');\n        return;\n      }\n\n      // the response was a success so set any bandwidth stats the request\n      // generated for ABR purposes\n      this.bandwidth = simpleSegment.stats.bandwidth;\n      this.roundTrip = simpleSegment.stats.roundTripTime;\n\n      // if this request included an initialization segment, save that data\n      // to the initSegment cache\n      if (simpleSegment.map) {\n        simpleSegment.map = this.initSegment(simpleSegment.map, true);\n      }\n\n      this.processSegmentResponse_(simpleSegment);\n    }\n\n    /**\n     * Move any important data from the simplified segment object\n     * back to the real segment object for future phases\n     *\n     * @private\n     */\n\n  }, {\n    key: 'processSegmentResponse_',\n    value: function processSegmentResponse_(simpleSegment) {\n      var segmentInfo = this.pendingSegment_;\n\n      segmentInfo.bytes = simpleSegment.bytes;\n      if (simpleSegment.map) {\n        segmentInfo.segment.map.bytes = simpleSegment.map.bytes;\n      }\n\n      segmentInfo.endOfAllRequests = simpleSegment.endOfAllRequests;\n\n      // This has fmp4 captions, add them to text tracks\n      if (simpleSegment.fmp4Captions) {\n        createCaptionsTrackIfNotExists(this.inbandTextTracks_, this.hls_.tech_, simpleSegment.captionStreams);\n        addCaptionData({\n          inbandTextTracks: this.inbandTextTracks_,\n          captionArray: simpleSegment.fmp4Captions,\n          // fmp4s will not have a timestamp offset\n          timestampOffset: 0\n        });\n        // Reset stored captions since we added parsed\n        // captions to a text track at this point\n        this.captionParser_.clearParsedCaptions();\n      }\n\n      this.handleSegment_();\n    }\n\n    /**\n     * append a decrypted segement to the SourceBuffer through a SourceUpdater\n     *\n     * @private\n     */\n\n  }, {\n    key: 'handleSegment_',\n    value: function handleSegment_() {\n      var _this3 = this;\n\n      if (!this.pendingSegment_) {\n        this.state = 'READY';\n        return;\n      }\n\n      var segmentInfo = this.pendingSegment_;\n      var segment = segmentInfo.segment;\n      var timingInfo = this.syncController_.probeSegmentInfo(segmentInfo);\n\n      // When we have our first timing info, determine what media types this loader is\n      // dealing with. Although we're maintaining extra state, it helps to preserve the\n      // separation of segment loader from the actual source buffers.\n      if (typeof this.startingMedia_ === 'undefined' && timingInfo && (\n      // Guard against cases where we're not getting timing info at all until we are\n      // certain that all streams will provide it.\n      timingInfo.containsAudio || timingInfo.containsVideo)) {\n        this.startingMedia_ = {\n          containsAudio: timingInfo.containsAudio,\n          containsVideo: timingInfo.containsVideo\n        };\n      }\n\n      var illegalMediaSwitchError = illegalMediaSwitch(this.loaderType_, this.startingMedia_, timingInfo);\n\n      if (illegalMediaSwitchError) {\n        this.error({\n          message: illegalMediaSwitchError,\n          blacklistDuration: Infinity\n        });\n        this.trigger('error');\n        return;\n      }\n\n      if (segmentInfo.isSyncRequest) {\n        this.trigger('syncinfoupdate');\n        this.pendingSegment_ = null;\n        this.state = 'READY';\n        return;\n      }\n\n      if (segmentInfo.timestampOffset !== null && segmentInfo.timestampOffset !== this.sourceUpdater_.timestampOffset()) {\n        this.sourceUpdater_.timestampOffset(segmentInfo.timestampOffset);\n        // fired when a timestamp offset is set in HLS (can also identify discontinuities)\n        this.trigger('timestampoffset');\n      }\n\n      var timelineMapping = this.syncController_.mappingForTimeline(segmentInfo.timeline);\n\n      if (timelineMapping !== null) {\n        this.trigger({\n          type: 'segmenttimemapping',\n          mapping: timelineMapping\n        });\n      }\n\n      this.state = 'APPENDING';\n\n      // if the media initialization segment is changing, append it\n      // before the content segment\n      if (segment.map) {\n        var initId = initSegmentId(segment.map);\n\n        if (!this.activeInitSegmentId_ || this.activeInitSegmentId_ !== initId) {\n          var initSegment = this.initSegment(segment.map);\n\n          this.sourceUpdater_.appendBuffer(initSegment.bytes, function () {\n            _this3.activeInitSegmentId_ = initId;\n          });\n        }\n      }\n\n      segmentInfo.byteLength = segmentInfo.bytes.byteLength;\n      if (typeof segment.start === 'number' && typeof segment.end === 'number') {\n        this.mediaSecondsLoaded += segment.end - segment.start;\n      } else {\n        this.mediaSecondsLoaded += segment.duration;\n      }\n\n      this.logger_(segmentInfoString(segmentInfo));\n\n      this.sourceUpdater_.appendBuffer(segmentInfo.bytes, this.handleUpdateEnd_.bind(this));\n    }\n\n    /**\n     * callback to run when appendBuffer is finished. detects if we are\n     * in a good state to do things with the data we got, or if we need\n     * to wait for more\n     *\n     * @private\n     */\n\n  }, {\n    key: 'handleUpdateEnd_',\n    value: function handleUpdateEnd_() {\n      if (!this.pendingSegment_) {\n        this.state = 'READY';\n        if (!this.paused()) {\n          this.monitorBuffer_();\n        }\n        return;\n      }\n\n      var segmentInfo = this.pendingSegment_;\n      var segment = segmentInfo.segment;\n      var isWalkingForward = this.mediaIndex !== null;\n\n      this.pendingSegment_ = null;\n      this.recordThroughput_(segmentInfo);\n      this.addSegmentMetadataCue_(segmentInfo);\n\n      this.state = 'READY';\n\n      this.mediaIndex = segmentInfo.mediaIndex;\n      this.fetchAtBuffer_ = true;\n      this.currentTimeline_ = segmentInfo.timeline;\n\n      // We must update the syncinfo to recalculate the seekable range before\n      // the following conditional otherwise it may consider this a bad \"guess\"\n      // and attempt to resync when the post-update seekable window and live\n      // point would mean that this was the perfect segment to fetch\n      this.trigger('syncinfoupdate');\n\n      // If we previously appended a segment that ends more than 3 targetDurations before\n      // the currentTime_ that means that our conservative guess was too conservative.\n      // In that case, reset the loader state so that we try to use any information gained\n      // from the previous request to create a new, more accurate, sync-point.\n      if (segment.end && this.currentTime_() - segment.end > segmentInfo.playlist.targetDuration * 3) {\n        this.resetEverything();\n        return;\n      }\n\n      // Don't do a rendition switch unless we have enough time to get a sync segment\n      // and conservatively guess\n      if (isWalkingForward) {\n        this.trigger('bandwidthupdate');\n      }\n      this.trigger('progress');\n\n      // any time an update finishes and the last segment is in the\n      // buffer, end the stream. this ensures the \"ended\" event will\n      // fire if playback reaches that point.\n      var isEndOfStream = detectEndOfStream(segmentInfo.playlist, this.mediaSource_, segmentInfo.mediaIndex + 1);\n\n      if (isEndOfStream) {\n        this.endOfStream();\n      }\n\n      if (!this.paused()) {\n        this.monitorBuffer_();\n      }\n    }\n\n    /**\n     * Records the current throughput of the decrypt, transmux, and append\n     * portion of the semgment pipeline. `throughput.rate` is a the cumulative\n     * moving average of the throughput. `throughput.count` is the number of\n     * data points in the average.\n     *\n     * @private\n     * @param {Object} segmentInfo the object returned by loadSegment\n     */\n\n  }, {\n    key: 'recordThroughput_',\n    value: function recordThroughput_(segmentInfo) {\n      var rate = this.throughput.rate;\n      // Add one to the time to ensure that we don't accidentally attempt to divide\n      // by zero in the case where the throughput is ridiculously high\n      var segmentProcessingTime = Date.now() - segmentInfo.endOfAllRequests + 1;\n      // Multiply by 8000 to convert from bytes/millisecond to bits/second\n      var segmentProcessingThroughput = Math.floor(segmentInfo.byteLength / segmentProcessingTime * 8 * 1000);\n\n      // This is just a cumulative moving average calculation:\n      //   newAvg = oldAvg + (sample - oldAvg) / (sampleCount + 1)\n      this.throughput.rate += (segmentProcessingThroughput - rate) / ++this.throughput.count;\n    }\n\n    /**\n     * Adds a cue to the segment-metadata track with some metadata information about the\n     * segment\n     *\n     * @private\n     * @param {Object} segmentInfo\n     *        the object returned by loadSegment\n     * @method addSegmentMetadataCue_\n     */\n\n  }, {\n    key: 'addSegmentMetadataCue_',\n    value: function addSegmentMetadataCue_(segmentInfo) {\n      if (!this.segmentMetadataTrack_) {\n        return;\n      }\n\n      var segment = segmentInfo.segment;\n      var start = segment.start;\n      var end = segment.end;\n\n      // Do not try adding the cue if the start and end times are invalid.\n      if (!finite(start) || !finite(end)) {\n        return;\n      }\n\n      removeCuesFromTrack(start, end, this.segmentMetadataTrack_);\n\n      var Cue = window$1.WebKitDataCue || window$1.VTTCue;\n      var value = {\n        bandwidth: segmentInfo.playlist.attributes.BANDWIDTH,\n        resolution: segmentInfo.playlist.attributes.RESOLUTION,\n        codecs: segmentInfo.playlist.attributes.CODECS,\n        byteLength: segmentInfo.byteLength,\n        uri: segmentInfo.uri,\n        timeline: segmentInfo.timeline,\n        playlist: segmentInfo.playlist.uri,\n        start: start,\n        end: end\n      };\n      var data = JSON.stringify(value);\n      var cue = new Cue(start, end, data);\n\n      // Attach the metadata to the value property of the cue to keep consistency between\n      // the differences of WebKitDataCue in safari and VTTCue in other browsers\n      cue.value = value;\n\n      this.segmentMetadataTrack_.addCue(cue);\n    }\n  }]);\n  return SegmentLoader;\n}(videojs$1.EventTarget);\n\nvar uint8ToUtf8 = function uint8ToUtf8(uintArray) {\n  return decodeURIComponent(escape(String.fromCharCode.apply(null, uintArray)));\n};\n\n/**\n * @file vtt-segment-loader.js\n */\n\nvar VTT_LINE_TERMINATORS = new Uint8Array('\\n\\n'.split('').map(function (char) {\n  return char.charCodeAt(0);\n}));\n\n/**\n * An object that manages segment loading and appending.\n *\n * @class VTTSegmentLoader\n * @param {Object} options required and optional options\n * @extends videojs.EventTarget\n */\n\nvar VTTSegmentLoader = function (_SegmentLoader) {\n  inherits$1(VTTSegmentLoader, _SegmentLoader);\n\n  function VTTSegmentLoader(settings) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    classCallCheck$1(this, VTTSegmentLoader);\n\n    // SegmentLoader requires a MediaSource be specified or it will throw an error;\n    // however, VTTSegmentLoader has no need of a media source, so delete the reference\n    var _this = possibleConstructorReturn$1(this, (VTTSegmentLoader.__proto__ || Object.getPrototypeOf(VTTSegmentLoader)).call(this, settings, options));\n\n    _this.mediaSource_ = null;\n\n    _this.subtitlesTrack_ = null;\n    return _this;\n  }\n\n  /**\n   * Indicates which time ranges are buffered\n   *\n   * @return {TimeRange}\n   *         TimeRange object representing the current buffered ranges\n   */\n\n  createClass$1(VTTSegmentLoader, [{\n    key: 'buffered_',\n    value: function buffered_() {\n      if (!this.subtitlesTrack_ || !this.subtitlesTrack_.cues.length) {\n        return videojs$1.createTimeRanges();\n      }\n\n      var cues = this.subtitlesTrack_.cues;\n      var start = cues[0].startTime;\n      var end = cues[cues.length - 1].startTime;\n\n      return videojs$1.createTimeRanges([[start, end]]);\n    }\n\n    /**\n     * Gets and sets init segment for the provided map\n     *\n     * @param {Object} map\n     *        The map object representing the init segment to get or set\n     * @param {Boolean=} set\n     *        If true, the init segment for the provided map should be saved\n     * @return {Object}\n     *         map object for desired init segment\n     */\n\n  }, {\n    key: 'initSegment',\n    value: function initSegment(map) {\n      var set$$1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (!map) {\n        return null;\n      }\n\n      var id = initSegmentId(map);\n      var storedMap = this.initSegments_[id];\n\n      if (set$$1 && !storedMap && map.bytes) {\n        // append WebVTT line terminators to the media initialization segment if it exists\n        // to follow the WebVTT spec (https://w3c.github.io/webvtt/#file-structure) that\n        // requires two or more WebVTT line terminators between the WebVTT header and the\n        // rest of the file\n        var combinedByteLength = VTT_LINE_TERMINATORS.byteLength + map.bytes.byteLength;\n        var combinedSegment = new Uint8Array(combinedByteLength);\n\n        combinedSegment.set(map.bytes);\n        combinedSegment.set(VTT_LINE_TERMINATORS, map.bytes.byteLength);\n\n        this.initSegments_[id] = storedMap = {\n          resolvedUri: map.resolvedUri,\n          byterange: map.byterange,\n          bytes: combinedSegment\n        };\n      }\n\n      return storedMap || map;\n    }\n\n    /**\n     * Returns true if all configuration required for loading is present, otherwise false.\n     *\n     * @return {Boolean} True if the all configuration is ready for loading\n     * @private\n     */\n\n  }, {\n    key: 'couldBeginLoading_',\n    value: function couldBeginLoading_() {\n      return this.playlist_ && this.subtitlesTrack_ && !this.paused();\n    }\n\n    /**\n     * Once all the starting parameters have been specified, begin\n     * operation. This method should only be invoked from the INIT\n     * state.\n     *\n     * @private\n     */\n\n  }, {\n    key: 'init_',\n    value: function init_() {\n      this.state = 'READY';\n      this.resetEverything();\n      return this.monitorBuffer_();\n    }\n\n    /**\n     * Set a subtitle track on the segment loader to add subtitles to\n     *\n     * @param {TextTrack=} track\n     *        The text track to add loaded subtitles to\n     * @return {TextTrack}\n     *        Returns the subtitles track\n     */\n\n  }, {\n    key: 'track',\n    value: function track(_track) {\n      if (typeof _track === 'undefined') {\n        return this.subtitlesTrack_;\n      }\n\n      this.subtitlesTrack_ = _track;\n\n      // if we were unpaused but waiting for a sourceUpdater, start\n      // buffering now\n      if (this.state === 'INIT' && this.couldBeginLoading_()) {\n        this.init_();\n      }\n\n      return this.subtitlesTrack_;\n    }\n\n    /**\n     * Remove any data in the source buffer between start and end times\n     * @param {Number} start - the start time of the region to remove from the buffer\n     * @param {Number} end - the end time of the region to remove from the buffer\n     */\n\n  }, {\n    key: 'remove',\n    value: function remove(start, end) {\n      removeCuesFromTrack(start, end, this.subtitlesTrack_);\n    }\n\n    /**\n     * fill the buffer with segements unless the sourceBuffers are\n     * currently updating\n     *\n     * Note: this function should only ever be called by monitorBuffer_\n     * and never directly\n     *\n     * @private\n     */\n\n  }, {\n    key: 'fillBuffer_',\n    value: function fillBuffer_() {\n      var _this2 = this;\n\n      if (!this.syncPoint_) {\n        this.syncPoint_ = this.syncController_.getSyncPoint(this.playlist_, this.duration_(), this.currentTimeline_, this.currentTime_());\n      }\n\n      // see if we need to begin loading immediately\n      var segmentInfo = this.checkBuffer_(this.buffered_(), this.playlist_, this.mediaIndex, this.hasPlayed_(), this.currentTime_(), this.syncPoint_);\n\n      segmentInfo = this.skipEmptySegments_(segmentInfo);\n\n      if (!segmentInfo) {\n        return;\n      }\n\n      if (this.syncController_.timestampOffsetForTimeline(segmentInfo.timeline) === null) {\n        // We don't have the timestamp offset that we need to sync subtitles.\n        // Rerun on a timestamp offset or user interaction.\n        var checkTimestampOffset = function checkTimestampOffset() {\n          _this2.state = 'READY';\n          if (!_this2.paused()) {\n            // if not paused, queue a buffer check as soon as possible\n            _this2.monitorBuffer_();\n          }\n        };\n\n        this.syncController_.one('timestampoffset', checkTimestampOffset);\n        this.state = 'WAITING_ON_TIMELINE';\n        return;\n      }\n\n      this.loadSegment_(segmentInfo);\n    }\n\n    /**\n     * Prevents the segment loader from requesting segments we know contain no subtitles\n     * by walking forward until we find the next segment that we don't know whether it is\n     * empty or not.\n     *\n     * @param {Object} segmentInfo\n     *        a segment info object that describes the current segment\n     * @return {Object}\n     *         a segment info object that describes the current segment\n     */\n\n  }, {\n    key: 'skipEmptySegments_',\n    value: function skipEmptySegments_(segmentInfo) {\n      while (segmentInfo && segmentInfo.segment.empty) {\n        segmentInfo = this.generateSegmentInfo_(segmentInfo.playlist, segmentInfo.mediaIndex + 1, segmentInfo.startOfSegment + segmentInfo.duration, segmentInfo.isSyncRequest);\n      }\n      return segmentInfo;\n    }\n\n    /**\n     * append a decrypted segement to the SourceBuffer through a SourceUpdater\n     *\n     * @private\n     */\n\n  }, {\n    key: 'handleSegment_',\n    value: function handleSegment_() {\n      var _this3 = this;\n\n      if (!this.pendingSegment_ || !this.subtitlesTrack_) {\n        this.state = 'READY';\n        return;\n      }\n\n      this.state = 'APPENDING';\n\n      var segmentInfo = this.pendingSegment_;\n      var segment = segmentInfo.segment;\n\n      // Make sure that vttjs has loaded, otherwise, wait till it finished loading\n      if (typeof window$1.WebVTT !== 'function' && this.subtitlesTrack_ && this.subtitlesTrack_.tech_) {\n\n        var loadHandler = function loadHandler() {\n          _this3.handleSegment_();\n        };\n\n        this.state = 'WAITING_ON_VTTJS';\n        this.subtitlesTrack_.tech_.one('vttjsloaded', loadHandler);\n        this.subtitlesTrack_.tech_.one('vttjserror', function () {\n          _this3.subtitlesTrack_.tech_.off('vttjsloaded', loadHandler);\n          _this3.error({\n            message: 'Error loading vtt.js'\n          });\n          _this3.state = 'READY';\n          _this3.pause();\n          _this3.trigger('error');\n        });\n\n        return;\n      }\n\n      segment.requested = true;\n\n      try {\n        this.parseVTTCues_(segmentInfo);\n      } catch (e) {\n        this.error({\n          message: e.message\n        });\n        this.state = 'READY';\n        this.pause();\n        return this.trigger('error');\n      }\n\n      this.updateTimeMapping_(segmentInfo, this.syncController_.timelines[segmentInfo.timeline], this.playlist_);\n\n      if (segmentInfo.isSyncRequest) {\n        this.trigger('syncinfoupdate');\n        this.pendingSegment_ = null;\n        this.state = 'READY';\n        return;\n      }\n\n      segmentInfo.byteLength = segmentInfo.bytes.byteLength;\n\n      this.mediaSecondsLoaded += segment.duration;\n\n      if (segmentInfo.cues.length) {\n        // remove any overlapping cues to prevent doubling\n        this.remove(segmentInfo.cues[0].endTime, segmentInfo.cues[segmentInfo.cues.length - 1].endTime);\n      }\n\n      segmentInfo.cues.forEach(function (cue) {\n        _this3.subtitlesTrack_.addCue(cue);\n      });\n\n      this.handleUpdateEnd_();\n    }\n\n    /**\n     * Uses the WebVTT parser to parse the segment response\n     *\n     * @param {Object} segmentInfo\n     *        a segment info object that describes the current segment\n     * @private\n     */\n\n  }, {\n    key: 'parseVTTCues_',\n    value: function parseVTTCues_(segmentInfo) {\n      var decoder = void 0;\n      var decodeBytesToString = false;\n\n      if (typeof window$1.TextDecoder === 'function') {\n        decoder = new window$1.TextDecoder('utf8');\n      } else {\n        decoder = window$1.WebVTT.StringDecoder();\n        decodeBytesToString = true;\n      }\n\n      var parser = new window$1.WebVTT.Parser(window$1, window$1.vttjs, decoder);\n\n      segmentInfo.cues = [];\n      segmentInfo.timestampmap = { MPEGTS: 0, LOCAL: 0 };\n\n      parser.oncue = segmentInfo.cues.push.bind(segmentInfo.cues);\n      parser.ontimestampmap = function (map) {\n        return segmentInfo.timestampmap = map;\n      };\n      parser.onparsingerror = function (error) {\n        videojs$1.log.warn('Error encountered when parsing cues: ' + error.message);\n      };\n\n      if (segmentInfo.segment.map) {\n        var mapData = segmentInfo.segment.map.bytes;\n\n        if (decodeBytesToString) {\n          mapData = uint8ToUtf8(mapData);\n        }\n\n        parser.parse(mapData);\n      }\n\n      var segmentData = segmentInfo.bytes;\n\n      if (decodeBytesToString) {\n        segmentData = uint8ToUtf8(segmentData);\n      }\n\n      parser.parse(segmentData);\n      parser.flush();\n    }\n\n    /**\n     * Updates the start and end times of any cues parsed by the WebVTT parser using\n     * the information parsed from the X-TIMESTAMP-MAP header and a TS to media time mapping\n     * from the SyncController\n     *\n     * @param {Object} segmentInfo\n     *        a segment info object that describes the current segment\n     * @param {Object} mappingObj\n     *        object containing a mapping from TS to media time\n     * @param {Object} playlist\n     *        the playlist object containing the segment\n     * @private\n     */\n\n  }, {\n    key: 'updateTimeMapping_',\n    value: function updateTimeMapping_(segmentInfo, mappingObj, playlist) {\n      var segment = segmentInfo.segment;\n\n      if (!mappingObj) {\n        // If the sync controller does not have a mapping of TS to Media Time for the\n        // timeline, then we don't have enough information to update the cue\n        // start/end times\n        return;\n      }\n\n      if (!segmentInfo.cues.length) {\n        // If there are no cues, we also do not have enough information to figure out\n        // segment timing. Mark that the segment contains no cues so we don't re-request\n        // an empty segment.\n        segment.empty = true;\n        return;\n      }\n\n      var timestampmap = segmentInfo.timestampmap;\n      var diff = timestampmap.MPEGTS / 90000 - timestampmap.LOCAL + mappingObj.mapping;\n\n      segmentInfo.cues.forEach(function (cue) {\n        // First convert cue time to TS time using the timestamp-map provided within the vtt\n        cue.startTime += diff;\n        cue.endTime += diff;\n      });\n\n      if (!playlist.syncInfo) {\n        var firstStart = segmentInfo.cues[0].startTime;\n        var lastStart = segmentInfo.cues[segmentInfo.cues.length - 1].startTime;\n\n        playlist.syncInfo = {\n          mediaSequence: playlist.mediaSequence + segmentInfo.mediaIndex,\n          time: Math.min(firstStart, lastStart - segment.duration)\n        };\n      }\n    }\n  }]);\n  return VTTSegmentLoader;\n}(SegmentLoader);\n\n/**\n * @file ad-cue-tags.js\n */\n\n/**\n * Searches for an ad cue that overlaps with the given mediaTime\n */\nvar findAdCue = function findAdCue(track, mediaTime) {\n  var cues = track.cues;\n\n  for (var i = 0; i < cues.length; i++) {\n    var cue = cues[i];\n\n    if (mediaTime >= cue.adStartTime && mediaTime <= cue.adEndTime) {\n      return cue;\n    }\n  }\n  return null;\n};\n\nvar updateAdCues = function updateAdCues(media, track) {\n  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  if (!media.segments) {\n    return;\n  }\n\n  var mediaTime = offset;\n  var cue = void 0;\n\n  for (var i = 0; i < media.segments.length; i++) {\n    var segment = media.segments[i];\n\n    if (!cue) {\n      // Since the cues will span for at least the segment duration, adding a fudge\n      // factor of half segment duration will prevent duplicate cues from being\n      // created when timing info is not exact (e.g. cue start time initialized\n      // at 10.006677, but next call mediaTime is 10.003332 )\n      cue = findAdCue(track, mediaTime + segment.duration / 2);\n    }\n\n    if (cue) {\n      if ('cueIn' in segment) {\n        // Found a CUE-IN so end the cue\n        cue.endTime = mediaTime;\n        cue.adEndTime = mediaTime;\n        mediaTime += segment.duration;\n        cue = null;\n        continue;\n      }\n\n      if (mediaTime < cue.endTime) {\n        // Already processed this mediaTime for this cue\n        mediaTime += segment.duration;\n        continue;\n      }\n\n      // otherwise extend cue until a CUE-IN is found\n      cue.endTime += segment.duration;\n    } else {\n      if ('cueOut' in segment) {\n        cue = new window$1.VTTCue(mediaTime, mediaTime + segment.duration, segment.cueOut);\n        cue.adStartTime = mediaTime;\n        // Assumes tag format to be\n        // #EXT-X-CUE-OUT:30\n        cue.adEndTime = mediaTime + parseFloat(segment.cueOut);\n        track.addCue(cue);\n      }\n\n      if ('cueOutCont' in segment) {\n        // Entered into the middle of an ad cue\n        var adOffset = void 0;\n        var adTotal = void 0;\n\n        // Assumes tag formate to be\n        // #EXT-X-CUE-OUT-CONT:10/30\n\n        var _segment$cueOutCont$s = segment.cueOutCont.split('/').map(parseFloat);\n\n        var _segment$cueOutCont$s2 = slicedToArray$1(_segment$cueOutCont$s, 2);\n\n        adOffset = _segment$cueOutCont$s2[0];\n        adTotal = _segment$cueOutCont$s2[1];\n\n        cue = new window$1.VTTCue(mediaTime, mediaTime + segment.duration, '');\n        cue.adStartTime = mediaTime - adOffset;\n        cue.adEndTime = cue.adStartTime + adTotal;\n        track.addCue(cue);\n      }\n    }\n    mediaTime += segment.duration;\n  }\n};\n\n/**\n * @file sync-controller.js\n */\n\nvar tsprobe = tsInspector.inspect;\n\nvar syncPointStrategies = [\n// Stategy \"VOD\": Handle the VOD-case where the sync-point is *always*\n//                the equivalence display-time 0 === segment-index 0\n{\n  name: 'VOD',\n  run: function run(syncController, playlist, duration$$1, currentTimeline, currentTime) {\n    if (duration$$1 !== Infinity) {\n      var syncPoint = {\n        time: 0,\n        segmentIndex: 0\n      };\n\n      return syncPoint;\n    }\n    return null;\n  }\n},\n// Stategy \"ProgramDateTime\": We have a program-date-time tag in this playlist\n{\n  name: 'ProgramDateTime',\n  run: function run(syncController, playlist, duration$$1, currentTimeline, currentTime) {\n    if (!syncController.datetimeToDisplayTime) {\n      return null;\n    }\n\n    var segments = playlist.segments || [];\n    var syncPoint = null;\n    var lastDistance = null;\n\n    currentTime = currentTime || 0;\n\n    for (var i = 0; i < segments.length; i++) {\n      var segment = segments[i];\n\n      if (segment.dateTimeObject) {\n        var segmentTime = segment.dateTimeObject.getTime() / 1000;\n        var segmentStart = segmentTime + syncController.datetimeToDisplayTime;\n        var distance = Math.abs(currentTime - segmentStart);\n\n        // Once the distance begins to increase, we have passed\n        // currentTime and can stop looking for better candidates\n        if (lastDistance !== null && lastDistance < distance) {\n          break;\n        }\n\n        lastDistance = distance;\n        syncPoint = {\n          time: segmentStart,\n          segmentIndex: i\n        };\n      }\n    }\n    return syncPoint;\n  }\n},\n// Stategy \"Segment\": We have a known time mapping for a timeline and a\n//                    segment in the current timeline with timing data\n{\n  name: 'Segment',\n  run: function run(syncController, playlist, duration$$1, currentTimeline, currentTime) {\n    var segments = playlist.segments || [];\n    var syncPoint = null;\n    var lastDistance = null;\n\n    currentTime = currentTime || 0;\n\n    for (var i = 0; i < segments.length; i++) {\n      var segment = segments[i];\n\n      if (segment.timeline === currentTimeline && typeof segment.start !== 'undefined') {\n        var distance = Math.abs(currentTime - segment.start);\n\n        // Once the distance begins to increase, we have passed\n        // currentTime and can stop looking for better candidates\n        if (lastDistance !== null && lastDistance < distance) {\n          break;\n        }\n\n        if (!syncPoint || lastDistance === null || lastDistance >= distance) {\n          lastDistance = distance;\n          syncPoint = {\n            time: segment.start,\n            segmentIndex: i\n          };\n        }\n      }\n    }\n    return syncPoint;\n  }\n},\n// Stategy \"Discontinuity\": We have a discontinuity with a known\n//                          display-time\n{\n  name: 'Discontinuity',\n  run: function run(syncController, playlist, duration$$1, currentTimeline, currentTime) {\n    var syncPoint = null;\n\n    currentTime = currentTime || 0;\n\n    if (playlist.discontinuityStarts && playlist.discontinuityStarts.length) {\n      var lastDistance = null;\n\n      for (var i = 0; i < playlist.discontinuityStarts.length; i++) {\n        var segmentIndex = playlist.discontinuityStarts[i];\n        var discontinuity = playlist.discontinuitySequence + i + 1;\n        var discontinuitySync = syncController.discontinuities[discontinuity];\n\n        if (discontinuitySync) {\n          var distance = Math.abs(currentTime - discontinuitySync.time);\n\n          // Once the distance begins to increase, we have passed\n          // currentTime and can stop looking for better candidates\n          if (lastDistance !== null && lastDistance < distance) {\n            break;\n          }\n\n          if (!syncPoint || lastDistance === null || lastDistance >= distance) {\n            lastDistance = distance;\n            syncPoint = {\n              time: discontinuitySync.time,\n              segmentIndex: segmentIndex\n            };\n          }\n        }\n      }\n    }\n    return syncPoint;\n  }\n},\n// Stategy \"Playlist\": We have a playlist with a known mapping of\n//                     segment index to display time\n{\n  name: 'Playlist',\n  run: function run(syncController, playlist, duration$$1, currentTimeline, currentTime) {\n    if (playlist.syncInfo) {\n      var syncPoint = {\n        time: playlist.syncInfo.time,\n        segmentIndex: playlist.syncInfo.mediaSequence - playlist.mediaSequence\n      };\n\n      return syncPoint;\n    }\n    return null;\n  }\n}];\n\nvar SyncController = function (_videojs$EventTarget) {\n  inherits$1(SyncController, _videojs$EventTarget);\n\n  function SyncController() {\n    classCallCheck$1(this, SyncController);\n\n    // Segment Loader state variables...\n    // ...for synching across variants\n    var _this = possibleConstructorReturn$1(this, (SyncController.__proto__ || Object.getPrototypeOf(SyncController)).call(this));\n\n    _this.inspectCache_ = undefined;\n\n    // ...for synching across variants\n    _this.timelines = [];\n    _this.discontinuities = [];\n    _this.datetimeToDisplayTime = null;\n\n    _this.logger_ = logger('SyncController');\n    return _this;\n  }\n\n  /**\n   * Find a sync-point for the playlist specified\n   *\n   * A sync-point is defined as a known mapping from display-time to\n   * a segment-index in the current playlist.\n   *\n   * @param {Playlist} playlist\n   *        The playlist that needs a sync-point\n   * @param {Number} duration\n   *        Duration of the MediaSource (Infinite if playing a live source)\n   * @param {Number} currentTimeline\n   *        The last timeline from which a segment was loaded\n   * @returns {Object}\n   *          A sync-point object\n   */\n\n  createClass$1(SyncController, [{\n    key: 'getSyncPoint',\n    value: function getSyncPoint(playlist, duration$$1, currentTimeline, currentTime) {\n      var syncPoints = this.runStrategies_(playlist, duration$$1, currentTimeline, currentTime);\n\n      if (!syncPoints.length) {\n        // Signal that we need to attempt to get a sync-point manually\n        // by fetching a segment in the playlist and constructing\n        // a sync-point from that information\n        return null;\n      }\n\n      // Now find the sync-point that is closest to the currentTime because\n      // that should result in the most accurate guess about which segment\n      // to fetch\n      return this.selectSyncPoint_(syncPoints, { key: 'time', value: currentTime });\n    }\n\n    /**\n     * Calculate the amount of time that has expired off the playlist during playback\n     *\n     * @param {Playlist} playlist\n     *        Playlist object to calculate expired from\n     * @param {Number} duration\n     *        Duration of the MediaSource (Infinity if playling a live source)\n     * @returns {Number|null}\n     *          The amount of time that has expired off the playlist during playback. Null\n     *          if no sync-points for the playlist can be found.\n     */\n\n  }, {\n    key: 'getExpiredTime',\n    value: function getExpiredTime(playlist, duration$$1) {\n      if (!playlist || !playlist.segments) {\n        return null;\n      }\n\n      var syncPoints = this.runStrategies_(playlist, duration$$1, playlist.discontinuitySequence, 0);\n\n      // Without sync-points, there is not enough information to determine the expired time\n      if (!syncPoints.length) {\n        return null;\n      }\n\n      var syncPoint = this.selectSyncPoint_(syncPoints, {\n        key: 'segmentIndex',\n        value: 0\n      });\n\n      // If the sync-point is beyond the start of the playlist, we want to subtract the\n      // duration from index 0 to syncPoint.segmentIndex instead of adding.\n      if (syncPoint.segmentIndex > 0) {\n        syncPoint.time *= -1;\n      }\n\n      return Math.abs(syncPoint.time + sumDurations(playlist, syncPoint.segmentIndex, 0));\n    }\n\n    /**\n     * Runs each sync-point strategy and returns a list of sync-points returned by the\n     * strategies\n     *\n     * @private\n     * @param {Playlist} playlist\n     *        The playlist that needs a sync-point\n     * @param {Number} duration\n     *        Duration of the MediaSource (Infinity if playing a live source)\n     * @param {Number} currentTimeline\n     *        The last timeline from which a segment was loaded\n     * @returns {Array}\n     *          A list of sync-point objects\n     */\n\n  }, {\n    key: 'runStrategies_',\n    value: function runStrategies_(playlist, duration$$1, currentTimeline, currentTime) {\n      var syncPoints = [];\n\n      // Try to find a sync-point in by utilizing various strategies...\n      for (var i = 0; i < syncPointStrategies.length; i++) {\n        var strategy = syncPointStrategies[i];\n        var syncPoint = strategy.run(this, playlist, duration$$1, currentTimeline, currentTime);\n\n        if (syncPoint) {\n          syncPoint.strategy = strategy.name;\n          syncPoints.push({\n            strategy: strategy.name,\n            syncPoint: syncPoint\n          });\n        }\n      }\n\n      return syncPoints;\n    }\n\n    /**\n     * Selects the sync-point nearest the specified target\n     *\n     * @private\n     * @param {Array} syncPoints\n     *        List of sync-points to select from\n     * @param {Object} target\n     *        Object specifying the property and value we are targeting\n     * @param {String} target.key\n     *        Specifies the property to target. Must be either 'time' or 'segmentIndex'\n     * @param {Number} target.value\n     *        The value to target for the specified key.\n     * @returns {Object}\n     *          The sync-point nearest the target\n     */\n\n  }, {\n    key: 'selectSyncPoint_',\n    value: function selectSyncPoint_(syncPoints, target) {\n      var bestSyncPoint = syncPoints[0].syncPoint;\n      var bestDistance = Math.abs(syncPoints[0].syncPoint[target.key] - target.value);\n      var bestStrategy = syncPoints[0].strategy;\n\n      for (var i = 1; i < syncPoints.length; i++) {\n        var newDistance = Math.abs(syncPoints[i].syncPoint[target.key] - target.value);\n\n        if (newDistance < bestDistance) {\n          bestDistance = newDistance;\n          bestSyncPoint = syncPoints[i].syncPoint;\n          bestStrategy = syncPoints[i].strategy;\n        }\n      }\n\n      this.logger_('syncPoint for [' + target.key + ': ' + target.value + '] chosen with strategy' + (' [' + bestStrategy + ']: [time:' + bestSyncPoint.time + ',') + (' segmentIndex:' + bestSyncPoint.segmentIndex + ']'));\n\n      return bestSyncPoint;\n    }\n\n    /**\n     * Save any meta-data present on the segments when segments leave\n     * the live window to the playlist to allow for synchronization at the\n     * playlist level later.\n     *\n     * @param {Playlist} oldPlaylist - The previous active playlist\n     * @param {Playlist} newPlaylist - The updated and most current playlist\n     */\n\n  }, {\n    key: 'saveExpiredSegmentInfo',\n    value: function saveExpiredSegmentInfo(oldPlaylist, newPlaylist) {\n      var mediaSequenceDiff = newPlaylist.mediaSequence - oldPlaylist.mediaSequence;\n\n      // When a segment expires from the playlist and it has a start time\n      // save that information as a possible sync-point reference in future\n      for (var i = mediaSequenceDiff - 1; i >= 0; i--) {\n        var lastRemovedSegment = oldPlaylist.segments[i];\n\n        if (lastRemovedSegment && typeof lastRemovedSegment.start !== 'undefined') {\n          newPlaylist.syncInfo = {\n            mediaSequence: oldPlaylist.mediaSequence + i,\n            time: lastRemovedSegment.start\n          };\n          this.logger_('playlist refresh sync: [time:' + newPlaylist.syncInfo.time + ',' + (' mediaSequence: ' + newPlaylist.syncInfo.mediaSequence + ']'));\n          this.trigger('syncinfoupdate');\n          break;\n        }\n      }\n    }\n\n    /**\n     * Save the mapping from playlist's ProgramDateTime to display. This should\n     * only ever happen once at the start of playback.\n     *\n     * @param {Playlist} playlist - The currently active playlist\n     */\n\n  }, {\n    key: 'setDateTimeMapping',\n    value: function setDateTimeMapping(playlist) {\n      if (!this.datetimeToDisplayTime && playlist.segments && playlist.segments.length && playlist.segments[0].dateTimeObject) {\n        var playlistTimestamp = playlist.segments[0].dateTimeObject.getTime() / 1000;\n\n        this.datetimeToDisplayTime = -playlistTimestamp;\n      }\n    }\n\n    /**\n     * Reset the state of the inspection cache when we do a rendition\n     * switch\n     */\n\n  }, {\n    key: 'reset',\n    value: function reset() {\n      this.inspectCache_ = undefined;\n    }\n\n    /**\n     * Probe or inspect a fmp4 or an mpeg2-ts segment to determine the start\n     * and end of the segment in it's internal \"media time\". Used to generate\n     * mappings from that internal \"media time\" to the display time that is\n     * shown on the player.\n     *\n     * @param {SegmentInfo} segmentInfo - The current active request information\n     */\n\n  }, {\n    key: 'probeSegmentInfo',\n    value: function probeSegmentInfo(segmentInfo) {\n      var segment = segmentInfo.segment;\n      var playlist = segmentInfo.playlist;\n      var timingInfo = void 0;\n\n      if (segment.map) {\n        timingInfo = this.probeMp4Segment_(segmentInfo);\n      } else {\n        timingInfo = this.probeTsSegment_(segmentInfo);\n      }\n\n      if (timingInfo) {\n        if (this.calculateSegmentTimeMapping_(segmentInfo, timingInfo)) {\n          this.saveDiscontinuitySyncInfo_(segmentInfo);\n\n          // If the playlist does not have sync information yet, record that information\n          // now with segment timing information\n          if (!playlist.syncInfo) {\n            playlist.syncInfo = {\n              mediaSequence: playlist.mediaSequence + segmentInfo.mediaIndex,\n              time: segment.start\n            };\n          }\n        }\n      }\n\n      return timingInfo;\n    }\n\n    /**\n     * Probe an fmp4 or an mpeg2-ts segment to determine the start of the segment\n     * in it's internal \"media time\".\n     *\n     * @private\n     * @param {SegmentInfo} segmentInfo - The current active request information\n     * @return {object} The start and end time of the current segment in \"media time\"\n     */\n\n  }, {\n    key: 'probeMp4Segment_',\n    value: function probeMp4Segment_(segmentInfo) {\n      var segment = segmentInfo.segment;\n      var timescales = mp4probe.timescale(segment.map.bytes);\n      var startTime = mp4probe.startTime(timescales, segmentInfo.bytes);\n\n      if (segmentInfo.timestampOffset !== null) {\n        segmentInfo.timestampOffset -= startTime;\n      }\n\n      return {\n        start: startTime,\n        end: startTime + segment.duration\n      };\n    }\n\n    /**\n     * Probe an mpeg2-ts segment to determine the start and end of the segment\n     * in it's internal \"media time\".\n     *\n     * @private\n     * @param {SegmentInfo} segmentInfo - The current active request information\n     * @return {object} The start and end time of the current segment in \"media time\"\n     */\n\n  }, {\n    key: 'probeTsSegment_',\n    value: function probeTsSegment_(segmentInfo) {\n      var timeInfo = tsprobe(segmentInfo.bytes, this.inspectCache_);\n      var segmentStartTime = void 0;\n      var segmentEndTime = void 0;\n\n      if (!timeInfo) {\n        return null;\n      }\n\n      if (timeInfo.video && timeInfo.video.length === 2) {\n        this.inspectCache_ = timeInfo.video[1].dts;\n        segmentStartTime = timeInfo.video[0].dtsTime;\n        segmentEndTime = timeInfo.video[1].dtsTime;\n      } else if (timeInfo.audio && timeInfo.audio.length === 2) {\n        this.inspectCache_ = timeInfo.audio[1].dts;\n        segmentStartTime = timeInfo.audio[0].dtsTime;\n        segmentEndTime = timeInfo.audio[1].dtsTime;\n      }\n\n      return {\n        start: segmentStartTime,\n        end: segmentEndTime,\n        containsVideo: timeInfo.video && timeInfo.video.length === 2,\n        containsAudio: timeInfo.audio && timeInfo.audio.length === 2\n      };\n    }\n  }, {\n    key: 'timestampOffsetForTimeline',\n    value: function timestampOffsetForTimeline(timeline) {\n      if (typeof this.timelines[timeline] === 'undefined') {\n        return null;\n      }\n      return this.timelines[timeline].time;\n    }\n  }, {\n    key: 'mappingForTimeline',\n    value: function mappingForTimeline(timeline) {\n      if (typeof this.timelines[timeline] === 'undefined') {\n        return null;\n      }\n      return this.timelines[timeline].mapping;\n    }\n\n    /**\n     * Use the \"media time\" for a segment to generate a mapping to \"display time\" and\n     * save that display time to the segment.\n     *\n     * @private\n     * @param {SegmentInfo} segmentInfo\n     *        The current active request information\n     * @param {object} timingInfo\n     *        The start and end time of the current segment in \"media time\"\n     * @returns {Boolean}\n     *          Returns false if segment time mapping could not be calculated\n     */\n\n  }, {\n    key: 'calculateSegmentTimeMapping_',\n    value: function calculateSegmentTimeMapping_(segmentInfo, timingInfo) {\n      var segment = segmentInfo.segment;\n      var mappingObj = this.timelines[segmentInfo.timeline];\n\n      if (segmentInfo.timestampOffset !== null) {\n        mappingObj = {\n          time: segmentInfo.startOfSegment,\n          mapping: segmentInfo.startOfSegment - timingInfo.start\n        };\n        this.timelines[segmentInfo.timeline] = mappingObj;\n        this.trigger('timestampoffset');\n\n        this.logger_('time mapping for timeline ' + segmentInfo.timeline + ': ' + ('[time: ' + mappingObj.time + '] [mapping: ' + mappingObj.mapping + ']'));\n\n        segment.start = segmentInfo.startOfSegment;\n        segment.end = timingInfo.end + mappingObj.mapping;\n      } else if (mappingObj) {\n        segment.start = timingInfo.start + mappingObj.mapping;\n        segment.end = timingInfo.end + mappingObj.mapping;\n      } else {\n        return false;\n      }\n\n      return true;\n    }\n\n    /**\n     * Each time we have discontinuity in the playlist, attempt to calculate the location\n     * in display of the start of the discontinuity and save that. We also save an accuracy\n     * value so that we save values with the most accuracy (closest to 0.)\n     *\n     * @private\n     * @param {SegmentInfo} segmentInfo - The current active request information\n     */\n\n  }, {\n    key: 'saveDiscontinuitySyncInfo_',\n    value: function saveDiscontinuitySyncInfo_(segmentInfo) {\n      var playlist = segmentInfo.playlist;\n      var segment = segmentInfo.segment;\n\n      // If the current segment is a discontinuity then we know exactly where\n      // the start of the range and it's accuracy is 0 (greater accuracy values\n      // mean more approximation)\n      if (segment.discontinuity) {\n        this.discontinuities[segment.timeline] = {\n          time: segment.start,\n          accuracy: 0\n        };\n      } else if (playlist.discontinuityStarts && playlist.discontinuityStarts.length) {\n        // Search for future discontinuities that we can provide better timing\n        // information for and save that information for sync purposes\n        for (var i = 0; i < playlist.discontinuityStarts.length; i++) {\n          var segmentIndex = playlist.discontinuityStarts[i];\n          var discontinuity = playlist.discontinuitySequence + i + 1;\n          var mediaIndexDiff = segmentIndex - segmentInfo.mediaIndex;\n          var accuracy = Math.abs(mediaIndexDiff);\n\n          if (!this.discontinuities[discontinuity] || this.discontinuities[discontinuity].accuracy > accuracy) {\n            var time = void 0;\n\n            if (mediaIndexDiff < 0) {\n              time = segment.start - sumDurations(playlist, segmentInfo.mediaIndex, segmentIndex);\n            } else {\n              time = segment.end + sumDurations(playlist, segmentInfo.mediaIndex + 1, segmentIndex);\n            }\n\n            this.discontinuities[discontinuity] = {\n              time: time,\n              accuracy: accuracy\n            };\n          }\n        }\n      }\n    }\n  }]);\n  return SyncController;\n}(videojs$1.EventTarget);\n\nvar Decrypter$1 = new shimWorker(\"./decrypter-worker.worker.js\", function (window, document$$1) {\n  var self = this;\n  var decrypterWorker = function () {\n\n    /*\n     * pkcs7.pad\n     * https://github.com/brightcove/pkcs7\n     *\n     * Copyright (c) 2014 Brightcove\n     * Licensed under the apache2 license.\n     */\n\n    /**\n     * Returns the subarray of a Uint8Array without PKCS#7 padding.\n     * @param padded {Uint8Array} unencrypted bytes that have been padded\n     * @return {Uint8Array} the unpadded bytes\n     * @see http://tools.ietf.org/html/rfc5652\n     */\n\n    function unpad(padded) {\n      return padded.subarray(0, padded.byteLength - padded[padded.byteLength - 1]);\n    }\n\n    var classCallCheck$$1 = function classCallCheck$$1(instance, Constructor) {\n      if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n      }\n    };\n\n    var createClass$$1 = function () {\n      function defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n          var descriptor = props[i];\n          descriptor.enumerable = descriptor.enumerable || false;\n          descriptor.configurable = true;\n          if (\"value\" in descriptor) descriptor.writable = true;\n          Object.defineProperty(target, descriptor.key, descriptor);\n        }\n      }\n\n      return function (Constructor, protoProps, staticProps) {\n        if (protoProps) defineProperties(Constructor.prototype, protoProps);\n        if (staticProps) defineProperties(Constructor, staticProps);\n        return Constructor;\n      };\n    }();\n\n    var inherits$$1 = function inherits$$1(subClass, superClass) {\n      if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));\n      }\n\n      subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n          value: subClass,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      });\n      if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n    };\n\n    var possibleConstructorReturn$$1 = function possibleConstructorReturn$$1(self, call) {\n      if (!self) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n      }\n\n      return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === \"object\" || typeof call === \"function\") ? call : self;\n    };\n\n    /**\n     * @file aes.js\n     *\n     * This file contains an adaptation of the AES decryption algorithm\n     * from the Standford Javascript Cryptography Library. That work is\n     * covered by the following copyright and permissions notice:\n     *\n     * Copyright 2009-2010 Emily Stark, Mike Hamburg, Dan Boneh.\n     * All rights reserved.\n     *\n     * Redistribution and use in source and binary forms, with or without\n     * modification, are permitted provided that the following conditions are\n     * met:\n     *\n     * 1. Redistributions of source code must retain the above copyright\n     *    notice, this list of conditions and the following disclaimer.\n     *\n     * 2. Redistributions in binary form must reproduce the above\n     *    copyright notice, this list of conditions and the following\n     *    disclaimer in the documentation and/or other materials provided\n     *    with the distribution.\n     *\n     * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR\n     * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n     * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n     * DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> OR CONTRIBUTORS BE\n     * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n     * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR\n     * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n     * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\n     * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN\n     * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n     *\n     * The views and conclusions contained in the software and documentation\n     * are those of the authors and should not be interpreted as representing\n     * official policies, either expressed or implied, of the authors.\n     */\n\n    /**\n     * Expand the S-box tables.\n     *\n     * @private\n     */\n    var precompute = function precompute() {\n      var tables = [[[], [], [], [], []], [[], [], [], [], []]];\n      var encTable = tables[0];\n      var decTable = tables[1];\n      var sbox = encTable[4];\n      var sboxInv = decTable[4];\n      var i = void 0;\n      var x = void 0;\n      var xInv = void 0;\n      var d = [];\n      var th = [];\n      var x2 = void 0;\n      var x4 = void 0;\n      var x8 = void 0;\n      var s = void 0;\n      var tEnc = void 0;\n      var tDec = void 0;\n\n      // Compute double and third tables\n      for (i = 0; i < 256; i++) {\n        th[(d[i] = i << 1 ^ (i >> 7) * 283) ^ i] = i;\n      }\n\n      for (x = xInv = 0; !sbox[x]; x ^= x2 || 1, xInv = th[xInv] || 1) {\n        // Compute sbox\n        s = xInv ^ xInv << 1 ^ xInv << 2 ^ xInv << 3 ^ xInv << 4;\n        s = s >> 8 ^ s & 255 ^ 99;\n        sbox[x] = s;\n        sboxInv[s] = x;\n\n        // Compute MixColumns\n        x8 = d[x4 = d[x2 = d[x]]];\n        tDec = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;\n        tEnc = d[s] * 0x101 ^ s * 0x1010100;\n\n        for (i = 0; i < 4; i++) {\n          encTable[i][x] = tEnc = tEnc << 24 ^ tEnc >>> 8;\n          decTable[i][s] = tDec = tDec << 24 ^ tDec >>> 8;\n        }\n      }\n\n      // Compactify. Considerable speedup on Firefox.\n      for (i = 0; i < 5; i++) {\n        encTable[i] = encTable[i].slice(0);\n        decTable[i] = decTable[i].slice(0);\n      }\n      return tables;\n    };\n    var aesTables = null;\n\n    /**\n     * Schedule out an AES key for both encryption and decryption. This\n     * is a low-level class. Use a cipher mode to do bulk encryption.\n     *\n     * @class AES\n     * @param key {Array} The key as an array of 4, 6 or 8 words.\n     */\n\n    var AES = function () {\n      function AES(key) {\n        classCallCheck$$1(this, AES);\n\n        /**\n         * The expanded S-box and inverse S-box tables. These will be computed\n         * on the client so that we don't have to send them down the wire.\n         *\n         * There are two tables, _tables[0] is for encryption and\n         * _tables[1] is for decryption.\n         *\n         * The first 4 sub-tables are the expanded S-box with MixColumns. The\n         * last (_tables[01][4]) is the S-box itself.\n         *\n         * @private\n         */\n        // if we have yet to precompute the S-box tables\n        // do so now\n        if (!aesTables) {\n          aesTables = precompute();\n        }\n        // then make a copy of that object for use\n        this._tables = [[aesTables[0][0].slice(), aesTables[0][1].slice(), aesTables[0][2].slice(), aesTables[0][3].slice(), aesTables[0][4].slice()], [aesTables[1][0].slice(), aesTables[1][1].slice(), aesTables[1][2].slice(), aesTables[1][3].slice(), aesTables[1][4].slice()]];\n        var i = void 0;\n        var j = void 0;\n        var tmp = void 0;\n        var encKey = void 0;\n        var decKey = void 0;\n        var sbox = this._tables[0][4];\n        var decTable = this._tables[1];\n        var keyLen = key.length;\n        var rcon = 1;\n\n        if (keyLen !== 4 && keyLen !== 6 && keyLen !== 8) {\n          throw new Error('Invalid aes key size');\n        }\n\n        encKey = key.slice(0);\n        decKey = [];\n        this._key = [encKey, decKey];\n\n        // schedule encryption keys\n        for (i = keyLen; i < 4 * keyLen + 28; i++) {\n          tmp = encKey[i - 1];\n\n          // apply sbox\n          if (i % keyLen === 0 || keyLen === 8 && i % keyLen === 4) {\n            tmp = sbox[tmp >>> 24] << 24 ^ sbox[tmp >> 16 & 255] << 16 ^ sbox[tmp >> 8 & 255] << 8 ^ sbox[tmp & 255];\n\n            // shift rows and add rcon\n            if (i % keyLen === 0) {\n              tmp = tmp << 8 ^ tmp >>> 24 ^ rcon << 24;\n              rcon = rcon << 1 ^ (rcon >> 7) * 283;\n            }\n          }\n\n          encKey[i] = encKey[i - keyLen] ^ tmp;\n        }\n\n        // schedule decryption keys\n        for (j = 0; i; j++, i--) {\n          tmp = encKey[j & 3 ? i : i - 4];\n          if (i <= 4 || j < 4) {\n            decKey[j] = tmp;\n          } else {\n            decKey[j] = decTable[0][sbox[tmp >>> 24]] ^ decTable[1][sbox[tmp >> 16 & 255]] ^ decTable[2][sbox[tmp >> 8 & 255]] ^ decTable[3][sbox[tmp & 255]];\n          }\n        }\n      }\n\n      /**\n       * Decrypt 16 bytes, specified as four 32-bit words.\n       *\n       * @param {Number} encrypted0 the first word to decrypt\n       * @param {Number} encrypted1 the second word to decrypt\n       * @param {Number} encrypted2 the third word to decrypt\n       * @param {Number} encrypted3 the fourth word to decrypt\n       * @param {Int32Array} out the array to write the decrypted words\n       * into\n       * @param {Number} offset the offset into the output array to start\n       * writing results\n       * @return {Array} The plaintext.\n       */\n\n      AES.prototype.decrypt = function decrypt$$1(encrypted0, encrypted1, encrypted2, encrypted3, out, offset) {\n        var key = this._key[1];\n        // state variables a,b,c,d are loaded with pre-whitened data\n        var a = encrypted0 ^ key[0];\n        var b = encrypted3 ^ key[1];\n        var c = encrypted2 ^ key[2];\n        var d = encrypted1 ^ key[3];\n        var a2 = void 0;\n        var b2 = void 0;\n        var c2 = void 0;\n\n        // key.length === 2 ?\n        var nInnerRounds = key.length / 4 - 2;\n        var i = void 0;\n        var kIndex = 4;\n        var table = this._tables[1];\n\n        // load up the tables\n        var table0 = table[0];\n        var table1 = table[1];\n        var table2 = table[2];\n        var table3 = table[3];\n        var sbox = table[4];\n\n        // Inner rounds. Cribbed from OpenSSL.\n        for (i = 0; i < nInnerRounds; i++) {\n          a2 = table0[a >>> 24] ^ table1[b >> 16 & 255] ^ table2[c >> 8 & 255] ^ table3[d & 255] ^ key[kIndex];\n          b2 = table0[b >>> 24] ^ table1[c >> 16 & 255] ^ table2[d >> 8 & 255] ^ table3[a & 255] ^ key[kIndex + 1];\n          c2 = table0[c >>> 24] ^ table1[d >> 16 & 255] ^ table2[a >> 8 & 255] ^ table3[b & 255] ^ key[kIndex + 2];\n          d = table0[d >>> 24] ^ table1[a >> 16 & 255] ^ table2[b >> 8 & 255] ^ table3[c & 255] ^ key[kIndex + 3];\n          kIndex += 4;\n          a = a2;b = b2;c = c2;\n        }\n\n        // Last round.\n        for (i = 0; i < 4; i++) {\n          out[(3 & -i) + offset] = sbox[a >>> 24] << 24 ^ sbox[b >> 16 & 255] << 16 ^ sbox[c >> 8 & 255] << 8 ^ sbox[d & 255] ^ key[kIndex++];\n          a2 = a;a = b;b = c;c = d;d = a2;\n        }\n      };\n\n      return AES;\n    }();\n\n    /**\n     * @file stream.js\n     */\n    /**\n     * A lightweight readable stream implemention that handles event dispatching.\n     *\n     * @class Stream\n     */\n    var Stream = function () {\n      function Stream() {\n        classCallCheck$$1(this, Stream);\n\n        this.listeners = {};\n      }\n\n      /**\n       * Add a listener for a specified event type.\n       *\n       * @param {String} type the event name\n       * @param {Function} listener the callback to be invoked when an event of\n       * the specified type occurs\n       */\n\n      Stream.prototype.on = function on(type, listener) {\n        if (!this.listeners[type]) {\n          this.listeners[type] = [];\n        }\n        this.listeners[type].push(listener);\n      };\n\n      /**\n       * Remove a listener for a specified event type.\n       *\n       * @param {String} type the event name\n       * @param {Function} listener  a function previously registered for this\n       * type of event through `on`\n       * @return {Boolean} if we could turn it off or not\n       */\n\n      Stream.prototype.off = function off(type, listener) {\n        if (!this.listeners[type]) {\n          return false;\n        }\n\n        var index = this.listeners[type].indexOf(listener);\n\n        this.listeners[type].splice(index, 1);\n        return index > -1;\n      };\n\n      /**\n       * Trigger an event of the specified type on this stream. Any additional\n       * arguments to this function are passed as parameters to event listeners.\n       *\n       * @param {String} type the event name\n       */\n\n      Stream.prototype.trigger = function trigger(type) {\n        var callbacks = this.listeners[type];\n\n        if (!callbacks) {\n          return;\n        }\n\n        // Slicing the arguments on every invocation of this method\n        // can add a significant amount of overhead. Avoid the\n        // intermediate object creation for the common case of a\n        // single callback argument\n        if (arguments.length === 2) {\n          var length = callbacks.length;\n\n          for (var i = 0; i < length; ++i) {\n            callbacks[i].call(this, arguments[1]);\n          }\n        } else {\n          var args = Array.prototype.slice.call(arguments, 1);\n          var _length = callbacks.length;\n\n          for (var _i = 0; _i < _length; ++_i) {\n            callbacks[_i].apply(this, args);\n          }\n        }\n      };\n\n      /**\n       * Destroys the stream and cleans up.\n       */\n\n      Stream.prototype.dispose = function dispose() {\n        this.listeners = {};\n      };\n      /**\n       * Forwards all `data` events on this stream to the destination stream. The\n       * destination stream should provide a method `push` to receive the data\n       * events as they arrive.\n       *\n       * @param {Stream} destination the stream that will receive all `data` events\n       * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n       */\n\n      Stream.prototype.pipe = function pipe(destination) {\n        this.on('data', function (data) {\n          destination.push(data);\n        });\n      };\n\n      return Stream;\n    }();\n\n    /**\n     * @file async-stream.js\n     */\n    /**\n     * A wrapper around the Stream class to use setTiemout\n     * and run stream \"jobs\" Asynchronously\n     *\n     * @class AsyncStream\n     * @extends Stream\n     */\n\n    var AsyncStream$$1 = function (_Stream) {\n      inherits$$1(AsyncStream$$1, _Stream);\n\n      function AsyncStream$$1() {\n        classCallCheck$$1(this, AsyncStream$$1);\n\n        var _this = possibleConstructorReturn$$1(this, _Stream.call(this, Stream));\n\n        _this.jobs = [];\n        _this.delay = 1;\n        _this.timeout_ = null;\n        return _this;\n      }\n\n      /**\n       * process an async job\n       *\n       * @private\n       */\n\n      AsyncStream$$1.prototype.processJob_ = function processJob_() {\n        this.jobs.shift()();\n        if (this.jobs.length) {\n          this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);\n        } else {\n          this.timeout_ = null;\n        }\n      };\n\n      /**\n       * push a job into the stream\n       *\n       * @param {Function} job the job to push into the stream\n       */\n\n      AsyncStream$$1.prototype.push = function push(job) {\n        this.jobs.push(job);\n        if (!this.timeout_) {\n          this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);\n        }\n      };\n\n      return AsyncStream$$1;\n    }(Stream);\n\n    /**\n     * @file decrypter.js\n     *\n     * An asynchronous implementation of AES-128 CBC decryption with\n     * PKCS#7 padding.\n     */\n\n    /**\n     * Convert network-order (big-endian) bytes into their little-endian\n     * representation.\n     */\n    var ntoh = function ntoh(word) {\n      return word << 24 | (word & 0xff00) << 8 | (word & 0xff0000) >> 8 | word >>> 24;\n    };\n\n    /**\n     * Decrypt bytes using AES-128 with CBC and PKCS#7 padding.\n     *\n     * @param {Uint8Array} encrypted the encrypted bytes\n     * @param {Uint32Array} key the bytes of the decryption key\n     * @param {Uint32Array} initVector the initialization vector (IV) to\n     * use for the first round of CBC.\n     * @return {Uint8Array} the decrypted bytes\n     *\n     * @see http://en.wikipedia.org/wiki/Advanced_Encryption_Standard\n     * @see http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_.28CBC.29\n     * @see https://tools.ietf.org/html/rfc2315\n     */\n    var decrypt$$1 = function decrypt$$1(encrypted, key, initVector) {\n      // word-level access to the encrypted bytes\n      var encrypted32 = new Int32Array(encrypted.buffer, encrypted.byteOffset, encrypted.byteLength >> 2);\n\n      var decipher = new AES(Array.prototype.slice.call(key));\n\n      // byte and word-level access for the decrypted output\n      var decrypted = new Uint8Array(encrypted.byteLength);\n      var decrypted32 = new Int32Array(decrypted.buffer);\n\n      // temporary variables for working with the IV, encrypted, and\n      // decrypted data\n      var init0 = void 0;\n      var init1 = void 0;\n      var init2 = void 0;\n      var init3 = void 0;\n      var encrypted0 = void 0;\n      var encrypted1 = void 0;\n      var encrypted2 = void 0;\n      var encrypted3 = void 0;\n\n      // iteration variable\n      var wordIx = void 0;\n\n      // pull out the words of the IV to ensure we don't modify the\n      // passed-in reference and easier access\n      init0 = initVector[0];\n      init1 = initVector[1];\n      init2 = initVector[2];\n      init3 = initVector[3];\n\n      // decrypt four word sequences, applying cipher-block chaining (CBC)\n      // to each decrypted block\n      for (wordIx = 0; wordIx < encrypted32.length; wordIx += 4) {\n        // convert big-endian (network order) words into little-endian\n        // (javascript order)\n        encrypted0 = ntoh(encrypted32[wordIx]);\n        encrypted1 = ntoh(encrypted32[wordIx + 1]);\n        encrypted2 = ntoh(encrypted32[wordIx + 2]);\n        encrypted3 = ntoh(encrypted32[wordIx + 3]);\n\n        // decrypt the block\n        decipher.decrypt(encrypted0, encrypted1, encrypted2, encrypted3, decrypted32, wordIx);\n\n        // XOR with the IV, and restore network byte-order to obtain the\n        // plaintext\n        decrypted32[wordIx] = ntoh(decrypted32[wordIx] ^ init0);\n        decrypted32[wordIx + 1] = ntoh(decrypted32[wordIx + 1] ^ init1);\n        decrypted32[wordIx + 2] = ntoh(decrypted32[wordIx + 2] ^ init2);\n        decrypted32[wordIx + 3] = ntoh(decrypted32[wordIx + 3] ^ init3);\n\n        // setup the IV for the next round\n        init0 = encrypted0;\n        init1 = encrypted1;\n        init2 = encrypted2;\n        init3 = encrypted3;\n      }\n\n      return decrypted;\n    };\n\n    /**\n     * The `Decrypter` class that manages decryption of AES\n     * data through `AsyncStream` objects and the `decrypt`\n     * function\n     *\n     * @param {Uint8Array} encrypted the encrypted bytes\n     * @param {Uint32Array} key the bytes of the decryption key\n     * @param {Uint32Array} initVector the initialization vector (IV) to\n     * @param {Function} done the function to run when done\n     * @class Decrypter\n     */\n\n    var Decrypter$$1 = function () {\n      function Decrypter$$1(encrypted, key, initVector, done) {\n        classCallCheck$$1(this, Decrypter$$1);\n\n        var step = Decrypter$$1.STEP;\n        var encrypted32 = new Int32Array(encrypted.buffer);\n        var decrypted = new Uint8Array(encrypted.byteLength);\n        var i = 0;\n\n        this.asyncStream_ = new AsyncStream$$1();\n\n        // split up the encryption job and do the individual chunks asynchronously\n        this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));\n        for (i = step; i < encrypted32.length; i += step) {\n          initVector = new Uint32Array([ntoh(encrypted32[i - 4]), ntoh(encrypted32[i - 3]), ntoh(encrypted32[i - 2]), ntoh(encrypted32[i - 1])]);\n          this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));\n        }\n        // invoke the done() callback when everything is finished\n        this.asyncStream_.push(function () {\n          // remove pkcs#7 padding from the decrypted bytes\n          done(null, unpad(decrypted));\n        });\n      }\n\n      /**\n       * a getter for step the maximum number of bytes to process at one time\n       *\n       * @return {Number} the value of step 32000\n       */\n\n      /**\n       * @private\n       */\n      Decrypter$$1.prototype.decryptChunk_ = function decryptChunk_(encrypted, key, initVector, decrypted) {\n        return function () {\n          var bytes = decrypt$$1(encrypted, key, initVector);\n\n          decrypted.set(bytes, encrypted.byteOffset);\n        };\n      };\n\n      createClass$$1(Decrypter$$1, null, [{\n        key: 'STEP',\n        get: function get$$1() {\n          // 4 * 8000;\n          return 32000;\n        }\n      }]);\n      return Decrypter$$1;\n    }();\n\n    /**\n     * @file bin-utils.js\n     */\n\n    /**\n     * Creates an object for sending to a web worker modifying properties that are TypedArrays\n     * into a new object with seperated properties for the buffer, byteOffset, and byteLength.\n     *\n     * @param {Object} message\n     *        Object of properties and values to send to the web worker\n     * @return {Object}\n     *         Modified message with TypedArray values expanded\n     * @function createTransferableMessage\n     */\n    var createTransferableMessage = function createTransferableMessage(message) {\n      var transferable = {};\n\n      Object.keys(message).forEach(function (key) {\n        var value = message[key];\n\n        if (ArrayBuffer.isView(value)) {\n          transferable[key] = {\n            bytes: value.buffer,\n            byteOffset: value.byteOffset,\n            byteLength: value.byteLength\n          };\n        } else {\n          transferable[key] = value;\n        }\n      });\n\n      return transferable;\n    };\n\n    /**\n     * Our web worker interface so that things can talk to aes-decrypter\n     * that will be running in a web worker. the scope is passed to this by\n     * webworkify.\n     *\n     * @param {Object} self\n     *        the scope for the web worker\n     */\n    var DecrypterWorker = function DecrypterWorker(self) {\n      self.onmessage = function (event) {\n        var data = event.data;\n        var encrypted = new Uint8Array(data.encrypted.bytes, data.encrypted.byteOffset, data.encrypted.byteLength);\n        var key = new Uint32Array(data.key.bytes, data.key.byteOffset, data.key.byteLength / 4);\n        var iv = new Uint32Array(data.iv.bytes, data.iv.byteOffset, data.iv.byteLength / 4);\n\n        /* eslint-disable no-new, handle-callback-err */\n        new Decrypter$$1(encrypted, key, iv, function (err, bytes) {\n          self.postMessage(createTransferableMessage({\n            source: data.source,\n            decrypted: bytes\n          }), [bytes.buffer]);\n        });\n        /* eslint-enable */\n      };\n    };\n\n    var decrypterWorker = new DecrypterWorker(self);\n\n    return decrypterWorker;\n  }();\n});\n\n/**\n * Convert the properties of an HLS track into an audioTrackKind.\n *\n * @private\n */\nvar audioTrackKind_ = function audioTrackKind_(properties) {\n  var kind = properties.default ? 'main' : 'alternative';\n\n  if (properties.characteristics && properties.characteristics.indexOf('public.accessibility.describes-video') >= 0) {\n    kind = 'main-desc';\n  }\n\n  return kind;\n};\n\n/**\n * Pause provided segment loader and playlist loader if active\n *\n * @param {SegmentLoader} segmentLoader\n *        SegmentLoader to pause\n * @param {Object} mediaType\n *        Active media type\n * @function stopLoaders\n */\nvar stopLoaders = function stopLoaders(segmentLoader, mediaType) {\n  segmentLoader.abort();\n  segmentLoader.pause();\n\n  if (mediaType && mediaType.activePlaylistLoader) {\n    mediaType.activePlaylistLoader.pause();\n    mediaType.activePlaylistLoader = null;\n  }\n};\n\n/**\n * Start loading provided segment loader and playlist loader\n *\n * @param {PlaylistLoader} playlistLoader\n *        PlaylistLoader to start loading\n * @param {Object} mediaType\n *        Active media type\n * @function startLoaders\n */\nvar startLoaders = function startLoaders(playlistLoader, mediaType) {\n  // Segment loader will be started after `loadedmetadata` or `loadedplaylist` from the\n  // playlist loader\n  mediaType.activePlaylistLoader = playlistLoader;\n  playlistLoader.load();\n};\n\n/**\n * Returns a function to be called when the media group changes. It performs a\n * non-destructive (preserve the buffer) resync of the SegmentLoader. This is because a\n * change of group is merely a rendition switch of the same content at another encoding,\n * rather than a change of content, such as switching audio from English to Spanish.\n *\n * @param {String} type\n *        MediaGroup type\n * @param {Object} settings\n *        Object containing required information for media groups\n * @return {Function}\n *         Handler for a non-destructive resync of SegmentLoader when the active media\n *         group changes.\n * @function onGroupChanged\n */\nvar onGroupChanged = function onGroupChanged(type, settings) {\n  return function () {\n    var _settings$segmentLoad = settings.segmentLoaders,\n        segmentLoader = _settings$segmentLoad[type],\n        mainSegmentLoader = _settings$segmentLoad.main,\n        mediaType = settings.mediaTypes[type];\n\n    var activeTrack = mediaType.activeTrack();\n    var activeGroup = mediaType.activeGroup(activeTrack);\n    var previousActiveLoader = mediaType.activePlaylistLoader;\n\n    stopLoaders(segmentLoader, mediaType);\n\n    if (!activeGroup) {\n      // there is no group active\n      return;\n    }\n\n    if (!activeGroup.playlistLoader) {\n      if (previousActiveLoader) {\n        // The previous group had a playlist loader but the new active group does not\n        // this means we are switching from demuxed to muxed audio. In this case we want to\n        // do a destructive reset of the main segment loader and not restart the audio\n        // loaders.\n        mainSegmentLoader.resetEverything();\n      }\n      return;\n    }\n\n    // Non-destructive resync\n    segmentLoader.resyncLoader();\n\n    startLoaders(activeGroup.playlistLoader, mediaType);\n  };\n};\n\n/**\n * Returns a function to be called when the media track changes. It performs a\n * destructive reset of the SegmentLoader to ensure we start loading as close to\n * currentTime as possible.\n *\n * @param {String} type\n *        MediaGroup type\n * @param {Object} settings\n *        Object containing required information for media groups\n * @return {Function}\n *         Handler for a destructive reset of SegmentLoader when the active media\n *         track changes.\n * @function onTrackChanged\n */\nvar onTrackChanged = function onTrackChanged(type, settings) {\n  return function () {\n    var _settings$segmentLoad2 = settings.segmentLoaders,\n        segmentLoader = _settings$segmentLoad2[type],\n        mainSegmentLoader = _settings$segmentLoad2.main,\n        mediaType = settings.mediaTypes[type];\n\n    var activeTrack = mediaType.activeTrack();\n    var activeGroup = mediaType.activeGroup(activeTrack);\n    var previousActiveLoader = mediaType.activePlaylistLoader;\n\n    stopLoaders(segmentLoader, mediaType);\n\n    if (!activeGroup) {\n      // there is no group active so we do not want to restart loaders\n      return;\n    }\n\n    if (!activeGroup.playlistLoader) {\n      // when switching from demuxed audio/video to muxed audio/video (noted by no playlist\n      // loader for the audio group), we want to do a destructive reset of the main segment\n      // loader and not restart the audio loaders\n      mainSegmentLoader.resetEverything();\n      return;\n    }\n\n    if (previousActiveLoader === activeGroup.playlistLoader) {\n      // Nothing has actually changed. This can happen because track change events can fire\n      // multiple times for a \"single\" change. One for enabling the new active track, and\n      // one for disabling the track that was active\n      startLoaders(activeGroup.playlistLoader, mediaType);\n      return;\n    }\n\n    if (segmentLoader.track) {\n      // For WebVTT, set the new text track in the segmentloader\n      segmentLoader.track(activeTrack);\n    }\n\n    // destructive reset\n    segmentLoader.resetEverything();\n\n    startLoaders(activeGroup.playlistLoader, mediaType);\n  };\n};\n\nvar onError = {\n  /**\n   * Returns a function to be called when a SegmentLoader or PlaylistLoader encounters\n   * an error.\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @return {Function}\n   *         Error handler. Logs warning (or error if the playlist is blacklisted) to\n   *         console and switches back to default audio track.\n   * @function onError.AUDIO\n   */\n  AUDIO: function AUDIO(type, settings) {\n    return function () {\n      var segmentLoader = settings.segmentLoaders[type],\n          mediaType = settings.mediaTypes[type],\n          blacklistCurrentPlaylist = settings.blacklistCurrentPlaylist;\n\n      stopLoaders(segmentLoader, mediaType);\n\n      // switch back to default audio track\n      var activeTrack = mediaType.activeTrack();\n      var activeGroup = mediaType.activeGroup();\n      var id = (activeGroup.filter(function (group) {\n        return group.default;\n      })[0] || activeGroup[0]).id;\n      var defaultTrack = mediaType.tracks[id];\n\n      if (activeTrack === defaultTrack) {\n        // Default track encountered an error. All we can do now is blacklist the current\n        // rendition and hope another will switch audio groups\n        blacklistCurrentPlaylist({\n          message: 'Problem encountered loading the default audio track.'\n        });\n        return;\n      }\n\n      videojs$1.log.warn('Problem encountered loading the alternate audio track.' + 'Switching back to default.');\n\n      for (var trackId in mediaType.tracks) {\n        mediaType.tracks[trackId].enabled = mediaType.tracks[trackId] === defaultTrack;\n      }\n\n      mediaType.onTrackChanged();\n    };\n  },\n  /**\n   * Returns a function to be called when a SegmentLoader or PlaylistLoader encounters\n   * an error.\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @return {Function}\n   *         Error handler. Logs warning to console and disables the active subtitle track\n   * @function onError.SUBTITLES\n   */\n  SUBTITLES: function SUBTITLES(type, settings) {\n    return function () {\n      var segmentLoader = settings.segmentLoaders[type],\n          mediaType = settings.mediaTypes[type];\n\n      videojs$1.log.warn('Problem encountered loading the subtitle track.' + 'Disabling subtitle track.');\n\n      stopLoaders(segmentLoader, mediaType);\n\n      var track = mediaType.activeTrack();\n\n      if (track) {\n        track.mode = 'disabled';\n      }\n\n      mediaType.onTrackChanged();\n    };\n  }\n};\n\nvar setupListeners = {\n  /**\n   * Setup event listeners for audio playlist loader\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {PlaylistLoader|null} playlistLoader\n   *        PlaylistLoader to register listeners on\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function setupListeners.AUDIO\n   */\n  AUDIO: function AUDIO(type, playlistLoader, settings) {\n    if (!playlistLoader) {\n      // no playlist loader means audio will be muxed with the video\n      return;\n    }\n\n    var tech = settings.tech,\n        requestOptions = settings.requestOptions,\n        segmentLoader = settings.segmentLoaders[type];\n\n    playlistLoader.on('loadedmetadata', function () {\n      var media = playlistLoader.media();\n\n      segmentLoader.playlist(media, requestOptions);\n\n      // if the video is already playing, or if this isn't a live video and preload\n      // permits, start downloading segments\n      if (!tech.paused() || media.endList && tech.preload() !== 'none') {\n        segmentLoader.load();\n      }\n    });\n\n    playlistLoader.on('loadedplaylist', function () {\n      segmentLoader.playlist(playlistLoader.media(), requestOptions);\n\n      // If the player isn't paused, ensure that the segment loader is running\n      if (!tech.paused()) {\n        segmentLoader.load();\n      }\n    });\n\n    playlistLoader.on('error', onError[type](type, settings));\n  },\n  /**\n   * Setup event listeners for subtitle playlist loader\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {PlaylistLoader|null} playlistLoader\n   *        PlaylistLoader to register listeners on\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function setupListeners.SUBTITLES\n   */\n  SUBTITLES: function SUBTITLES(type, playlistLoader, settings) {\n    var tech = settings.tech,\n        requestOptions = settings.requestOptions,\n        segmentLoader = settings.segmentLoaders[type],\n        mediaType = settings.mediaTypes[type];\n\n    playlistLoader.on('loadedmetadata', function () {\n      var media = playlistLoader.media();\n\n      segmentLoader.playlist(media, requestOptions);\n      segmentLoader.track(mediaType.activeTrack());\n\n      // if the video is already playing, or if this isn't a live video and preload\n      // permits, start downloading segments\n      if (!tech.paused() || media.endList && tech.preload() !== 'none') {\n        segmentLoader.load();\n      }\n    });\n\n    playlistLoader.on('loadedplaylist', function () {\n      segmentLoader.playlist(playlistLoader.media(), requestOptions);\n\n      // If the player isn't paused, ensure that the segment loader is running\n      if (!tech.paused()) {\n        segmentLoader.load();\n      }\n    });\n\n    playlistLoader.on('error', onError[type](type, settings));\n  }\n};\n\nvar byGroupId = function byGroupId(type, groupId) {\n  return function (playlist) {\n    return playlist.attributes[type] === groupId;\n  };\n};\n\nvar byResolvedUri = function byResolvedUri(resolvedUri) {\n  return function (playlist) {\n    return playlist.resolvedUri === resolvedUri;\n  };\n};\n\nvar initialize = {\n  /**\n   * Setup PlaylistLoaders and AudioTracks for the audio groups\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function initialize.AUDIO\n   */\n  'AUDIO': function AUDIO(type, settings) {\n    var hls = settings.hls,\n        sourceType = settings.sourceType,\n        segmentLoader = settings.segmentLoaders[type],\n        withCredentials = settings.requestOptions.withCredentials,\n        _settings$master = settings.master,\n        mediaGroups = _settings$master.mediaGroups,\n        playlists = _settings$master.playlists,\n        _settings$mediaTypes$ = settings.mediaTypes[type],\n        groups = _settings$mediaTypes$.groups,\n        tracks = _settings$mediaTypes$.tracks,\n        masterPlaylistLoader = settings.masterPlaylistLoader;\n\n    // force a default if we have none\n\n    if (!mediaGroups[type] || Object.keys(mediaGroups[type]).length === 0) {\n      mediaGroups[type] = { main: { default: { default: true } } };\n    }\n\n    for (var groupId in mediaGroups[type]) {\n      if (!groups[groupId]) {\n        groups[groupId] = [];\n      }\n\n      // List of playlists that have an AUDIO attribute value matching the current\n      // group ID\n      var groupPlaylists = playlists.filter(byGroupId(type, groupId));\n\n      for (var variantLabel in mediaGroups[type][groupId]) {\n        var properties = mediaGroups[type][groupId][variantLabel];\n\n        // List of playlists for the current group ID that have a matching uri with\n        // this alternate audio variant\n        var matchingPlaylists = groupPlaylists.filter(byResolvedUri(properties.resolvedUri));\n\n        if (matchingPlaylists.length) {\n          // If there is a playlist that has the same uri as this audio variant, assume\n          // that the playlist is audio only. We delete the resolvedUri property here\n          // to prevent a playlist loader from being created so that we don't have\n          // both the main and audio segment loaders loading the same audio segments\n          // from the same playlist.\n          delete properties.resolvedUri;\n        }\n\n        var playlistLoader = void 0;\n\n        if (properties.resolvedUri) {\n          playlistLoader = new PlaylistLoader(properties.resolvedUri, hls, withCredentials);\n        } else if (properties.playlists && sourceType === 'dash') {\n          playlistLoader = new DashPlaylistLoader(properties.playlists[0], hls, withCredentials, masterPlaylistLoader);\n        } else {\n          // no resolvedUri means the audio is muxed with the video when using this\n          // audio track\n          playlistLoader = null;\n        }\n\n        properties = videojs$1.mergeOptions({ id: variantLabel, playlistLoader: playlistLoader }, properties);\n\n        setupListeners[type](type, properties.playlistLoader, settings);\n\n        groups[groupId].push(properties);\n\n        if (typeof tracks[variantLabel] === 'undefined') {\n          var track = new videojs$1.AudioTrack({\n            id: variantLabel,\n            kind: audioTrackKind_(properties),\n            enabled: false,\n            language: properties.language,\n            default: properties.default,\n            label: variantLabel\n          });\n\n          tracks[variantLabel] = track;\n        }\n      }\n    }\n\n    // setup single error event handler for the segment loader\n    segmentLoader.on('error', onError[type](type, settings));\n  },\n  /**\n   * Setup PlaylistLoaders and TextTracks for the subtitle groups\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function initialize.SUBTITLES\n   */\n  'SUBTITLES': function SUBTITLES(type, settings) {\n    var tech = settings.tech,\n        hls = settings.hls,\n        sourceType = settings.sourceType,\n        segmentLoader = settings.segmentLoaders[type],\n        withCredentials = settings.requestOptions.withCredentials,\n        mediaGroups = settings.master.mediaGroups,\n        _settings$mediaTypes$2 = settings.mediaTypes[type],\n        groups = _settings$mediaTypes$2.groups,\n        tracks = _settings$mediaTypes$2.tracks,\n        masterPlaylistLoader = settings.masterPlaylistLoader;\n\n    for (var groupId in mediaGroups[type]) {\n      if (!groups[groupId]) {\n        groups[groupId] = [];\n      }\n\n      for (var variantLabel in mediaGroups[type][groupId]) {\n        if (mediaGroups[type][groupId][variantLabel].forced) {\n          // Subtitle playlists with the forced attribute are not selectable in Safari.\n          // According to Apple's HLS Authoring Specification:\n          //   If content has forced subtitles and regular subtitles in a given language,\n          //   the regular subtitles track in that language MUST contain both the forced\n          //   subtitles and the regular subtitles for that language.\n          // Because of this requirement and that Safari does not add forced subtitles,\n          // forced subtitles are skipped here to maintain consistent experience across\n          // all platforms\n          continue;\n        }\n\n        var properties = mediaGroups[type][groupId][variantLabel];\n\n        var playlistLoader = void 0;\n\n        if (sourceType === 'hls') {\n          playlistLoader = new PlaylistLoader(properties.resolvedUri, hls, withCredentials);\n        } else if (sourceType === 'dash') {\n          playlistLoader = new DashPlaylistLoader(properties.playlists[0], hls, withCredentials, masterPlaylistLoader);\n        }\n\n        properties = videojs$1.mergeOptions({\n          id: variantLabel,\n          playlistLoader: playlistLoader\n        }, properties);\n\n        setupListeners[type](type, properties.playlistLoader, settings);\n\n        groups[groupId].push(properties);\n\n        if (typeof tracks[variantLabel] === 'undefined') {\n          var track = tech.addRemoteTextTrack({\n            id: variantLabel,\n            kind: 'subtitles',\n            enabled: false,\n            language: properties.language,\n            label: variantLabel\n          }, false).track;\n\n          tracks[variantLabel] = track;\n        }\n      }\n    }\n\n    // setup single error event handler for the segment loader\n    segmentLoader.on('error', onError[type](type, settings));\n  },\n  /**\n   * Setup TextTracks for the closed-caption groups\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function initialize['CLOSED-CAPTIONS']\n   */\n  'CLOSED-CAPTIONS': function CLOSEDCAPTIONS(type, settings) {\n    var tech = settings.tech,\n        mediaGroups = settings.master.mediaGroups,\n        _settings$mediaTypes$3 = settings.mediaTypes[type],\n        groups = _settings$mediaTypes$3.groups,\n        tracks = _settings$mediaTypes$3.tracks;\n\n    for (var groupId in mediaGroups[type]) {\n      if (!groups[groupId]) {\n        groups[groupId] = [];\n      }\n\n      for (var variantLabel in mediaGroups[type][groupId]) {\n        var properties = mediaGroups[type][groupId][variantLabel];\n\n        // We only support CEA608 captions for now, so ignore anything that\n        // doesn't use a CCx INSTREAM-ID\n        if (!properties.instreamId.match(/CC\\d/)) {\n          continue;\n        }\n\n        // No PlaylistLoader is required for Closed-Captions because the captions are\n        // embedded within the video stream\n        groups[groupId].push(videojs$1.mergeOptions({ id: variantLabel }, properties));\n\n        if (typeof tracks[variantLabel] === 'undefined') {\n          var track = tech.addRemoteTextTrack({\n            id: properties.instreamId,\n            kind: 'captions',\n            enabled: false,\n            language: properties.language,\n            label: variantLabel\n          }, false).track;\n\n          tracks[variantLabel] = track;\n        }\n      }\n    }\n  }\n};\n\n/**\n * Returns a function used to get the active group of the provided type\n *\n * @param {String} type\n *        MediaGroup type\n * @param {Object} settings\n *        Object containing required information for media groups\n * @return {Function}\n *         Function that returns the active media group for the provided type. Takes an\n *         optional parameter {TextTrack} track. If no track is provided, a list of all\n *         variants in the group, otherwise the variant corresponding to the provided\n *         track is returned.\n * @function activeGroup\n */\nvar activeGroup = function activeGroup(type, settings) {\n  return function (track) {\n    var masterPlaylistLoader = settings.masterPlaylistLoader,\n        groups = settings.mediaTypes[type].groups;\n\n    var media = masterPlaylistLoader.media();\n\n    if (!media) {\n      return null;\n    }\n\n    var variants = null;\n\n    if (media.attributes[type]) {\n      variants = groups[media.attributes[type]];\n    }\n\n    variants = variants || groups.main;\n\n    if (typeof track === 'undefined') {\n      return variants;\n    }\n\n    if (track === null) {\n      // An active track was specified so a corresponding group is expected. track === null\n      // means no track is currently active so there is no corresponding group\n      return null;\n    }\n\n    return variants.filter(function (props) {\n      return props.id === track.id;\n    })[0] || null;\n  };\n};\n\nvar activeTrack = {\n  /**\n   * Returns a function used to get the active track of type provided\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @return {Function}\n   *         Function that returns the active media track for the provided type. Returns\n   *         null if no track is active\n   * @function activeTrack.AUDIO\n   */\n  AUDIO: function AUDIO(type, settings) {\n    return function () {\n      var tracks = settings.mediaTypes[type].tracks;\n\n      for (var id in tracks) {\n        if (tracks[id].enabled) {\n          return tracks[id];\n        }\n      }\n\n      return null;\n    };\n  },\n  /**\n   * Returns a function used to get the active track of type provided\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @return {Function}\n   *         Function that returns the active media track for the provided type. Returns\n   *         null if no track is active\n   * @function activeTrack.SUBTITLES\n   */\n  SUBTITLES: function SUBTITLES(type, settings) {\n    return function () {\n      var tracks = settings.mediaTypes[type].tracks;\n\n      for (var id in tracks) {\n        if (tracks[id].mode === 'showing') {\n          return tracks[id];\n        }\n      }\n\n      return null;\n    };\n  }\n};\n\n/**\n * Setup PlaylistLoaders and Tracks for media groups (Audio, Subtitles,\n * Closed-Captions) specified in the master manifest.\n *\n * @param {Object} settings\n *        Object containing required information for setting up the media groups\n * @param {SegmentLoader} settings.segmentLoaders.AUDIO\n *        Audio segment loader\n * @param {SegmentLoader} settings.segmentLoaders.SUBTITLES\n *        Subtitle segment loader\n * @param {SegmentLoader} settings.segmentLoaders.main\n *        Main segment loader\n * @param {Tech} settings.tech\n *        The tech of the player\n * @param {Object} settings.requestOptions\n *        XHR request options used by the segment loaders\n * @param {PlaylistLoader} settings.masterPlaylistLoader\n *        PlaylistLoader for the master source\n * @param {HlsHandler} settings.hls\n *        HLS SourceHandler\n * @param {Object} settings.master\n *        The parsed master manifest\n * @param {Object} settings.mediaTypes\n *        Object to store the loaders, tracks, and utility methods for each media type\n * @param {Function} settings.blacklistCurrentPlaylist\n *        Blacklists the current rendition and forces a rendition switch.\n * @function setupMediaGroups\n */\nvar setupMediaGroups = function setupMediaGroups(settings) {\n  ['AUDIO', 'SUBTITLES', 'CLOSED-CAPTIONS'].forEach(function (type) {\n    initialize[type](type, settings);\n  });\n\n  var mediaTypes = settings.mediaTypes,\n      masterPlaylistLoader = settings.masterPlaylistLoader,\n      tech = settings.tech,\n      hls = settings.hls;\n\n  // setup active group and track getters and change event handlers\n\n  ['AUDIO', 'SUBTITLES'].forEach(function (type) {\n    mediaTypes[type].activeGroup = activeGroup(type, settings);\n    mediaTypes[type].activeTrack = activeTrack[type](type, settings);\n    mediaTypes[type].onGroupChanged = onGroupChanged(type, settings);\n    mediaTypes[type].onTrackChanged = onTrackChanged(type, settings);\n  });\n\n  // DO NOT enable the default subtitle or caption track.\n  // DO enable the default audio track\n  var audioGroup = mediaTypes.AUDIO.activeGroup();\n  var groupId = (audioGroup.filter(function (group) {\n    return group.default;\n  })[0] || audioGroup[0]).id;\n\n  mediaTypes.AUDIO.tracks[groupId].enabled = true;\n  mediaTypes.AUDIO.onTrackChanged();\n\n  masterPlaylistLoader.on('mediachange', function () {\n    ['AUDIO', 'SUBTITLES'].forEach(function (type) {\n      return mediaTypes[type].onGroupChanged();\n    });\n  });\n\n  // custom audio track change event handler for usage event\n  var onAudioTrackChanged = function onAudioTrackChanged() {\n    mediaTypes.AUDIO.onTrackChanged();\n    tech.trigger({ type: 'usage', name: 'hls-audio-change' });\n  };\n\n  tech.audioTracks().addEventListener('change', onAudioTrackChanged);\n  tech.remoteTextTracks().addEventListener('change', mediaTypes.SUBTITLES.onTrackChanged);\n\n  hls.on('dispose', function () {\n    tech.audioTracks().removeEventListener('change', onAudioTrackChanged);\n    tech.remoteTextTracks().removeEventListener('change', mediaTypes.SUBTITLES.onTrackChanged);\n  });\n\n  // clear existing audio tracks and add the ones we just created\n  tech.clearTracks('audio');\n\n  for (var id in mediaTypes.AUDIO.tracks) {\n    tech.audioTracks().addTrack(mediaTypes.AUDIO.tracks[id]);\n  }\n};\n\n/**\n * Creates skeleton object used to store the loaders, tracks, and utility methods for each\n * media type\n *\n * @return {Object}\n *         Object to store the loaders, tracks, and utility methods for each media type\n * @function createMediaTypes\n */\nvar createMediaTypes = function createMediaTypes() {\n  var mediaTypes = {};\n\n  ['AUDIO', 'SUBTITLES', 'CLOSED-CAPTIONS'].forEach(function (type) {\n    mediaTypes[type] = {\n      groups: {},\n      tracks: {},\n      activePlaylistLoader: null,\n      activeGroup: noop,\n      activeTrack: noop,\n      onGroupChanged: noop,\n      onTrackChanged: noop\n    };\n  });\n\n  return mediaTypes;\n};\n\n/**\n * @file master-playlist-controller.js\n */\n\nvar ABORT_EARLY_BLACKLIST_SECONDS = 60 * 2;\n\nvar Hls = void 0;\n\n// SegmentLoader stats that need to have each loader's\n// values summed to calculate the final value\nvar loaderStats = ['mediaRequests', 'mediaRequestsAborted', 'mediaRequestsTimedout', 'mediaRequestsErrored', 'mediaTransferDuration', 'mediaBytesTransferred'];\nvar sumLoaderStat = function sumLoaderStat(stat) {\n  return this.audioSegmentLoader_[stat] + this.mainSegmentLoader_[stat];\n};\n\n/**\n * the master playlist controller controller all interactons\n * between playlists and segmentloaders. At this time this mainly\n * involves a master playlist and a series of audio playlists\n * if they are available\n *\n * @class MasterPlaylistController\n * @extends videojs.EventTarget\n */\nvar MasterPlaylistController = function (_videojs$EventTarget) {\n  inherits$1(MasterPlaylistController, _videojs$EventTarget);\n\n  function MasterPlaylistController(options) {\n    classCallCheck$1(this, MasterPlaylistController);\n\n    var _this = possibleConstructorReturn$1(this, (MasterPlaylistController.__proto__ || Object.getPrototypeOf(MasterPlaylistController)).call(this));\n\n    var url = options.url,\n        withCredentials = options.withCredentials,\n        tech = options.tech,\n        bandwidth = options.bandwidth,\n        externHls = options.externHls,\n        useCueTags = options.useCueTags,\n        blacklistDuration = options.blacklistDuration,\n        enableLowInitialPlaylist = options.enableLowInitialPlaylist,\n        sourceType = options.sourceType,\n        seekTo = options.seekTo;\n\n    if (!url) {\n      throw new Error('A non-empty playlist URL is required');\n    }\n\n    Hls = externHls;\n\n    _this.withCredentials = withCredentials;\n    _this.tech_ = tech;\n    _this.hls_ = tech.hls;\n    _this.seekTo_ = seekTo;\n    _this.sourceType_ = sourceType;\n    _this.useCueTags_ = useCueTags;\n    _this.blacklistDuration = blacklistDuration;\n    _this.enableLowInitialPlaylist = enableLowInitialPlaylist;\n    if (_this.useCueTags_) {\n      _this.cueTagsTrack_ = _this.tech_.addTextTrack('metadata', 'ad-cues');\n      _this.cueTagsTrack_.inBandMetadataTrackDispatchType = '';\n    }\n\n    _this.requestOptions_ = {\n      withCredentials: _this.withCredentials,\n      timeout: null\n    };\n\n    _this.mediaTypes_ = createMediaTypes();\n\n    _this.mediaSource = new videojs$1.MediaSource();\n\n    // load the media source into the player\n    _this.mediaSource.addEventListener('sourceopen', _this.handleSourceOpen_.bind(_this));\n\n    _this.seekable_ = videojs$1.createTimeRanges();\n    _this.hasPlayed_ = function () {\n      return false;\n    };\n\n    _this.syncController_ = new SyncController(options);\n    _this.segmentMetadataTrack_ = tech.addRemoteTextTrack({\n      kind: 'metadata',\n      label: 'segment-metadata'\n    }, false).track;\n\n    _this.decrypter_ = new Decrypter$1();\n    _this.inbandTextTracks_ = {};\n\n    var segmentLoaderSettings = {\n      hls: _this.hls_,\n      mediaSource: _this.mediaSource,\n      currentTime: _this.tech_.currentTime.bind(_this.tech_),\n      seekable: function seekable$$1() {\n        return _this.seekable();\n      },\n      seeking: function seeking() {\n        return _this.tech_.seeking();\n      },\n      duration: function duration$$1() {\n        return _this.mediaSource.duration;\n      },\n      hasPlayed: function hasPlayed() {\n        return _this.hasPlayed_();\n      },\n      goalBufferLength: function goalBufferLength() {\n        return _this.goalBufferLength();\n      },\n      bandwidth: bandwidth,\n      syncController: _this.syncController_,\n      decrypter: _this.decrypter_,\n      sourceType: _this.sourceType_,\n      inbandTextTracks: _this.inbandTextTracks_\n    };\n\n    _this.masterPlaylistLoader_ = _this.sourceType_ === 'dash' ? new DashPlaylistLoader(url, _this.hls_, _this.withCredentials) : new PlaylistLoader(url, _this.hls_, _this.withCredentials);\n    _this.setupMasterPlaylistLoaderListeners_();\n\n    // setup segment loaders\n    // combined audio/video or just video when alternate audio track is selected\n    _this.mainSegmentLoader_ = new SegmentLoader(videojs$1.mergeOptions(segmentLoaderSettings, {\n      segmentMetadataTrack: _this.segmentMetadataTrack_,\n      loaderType: 'main'\n    }), options);\n\n    // alternate audio track\n    _this.audioSegmentLoader_ = new SegmentLoader(videojs$1.mergeOptions(segmentLoaderSettings, {\n      loaderType: 'audio'\n    }), options);\n\n    _this.subtitleSegmentLoader_ = new VTTSegmentLoader(videojs$1.mergeOptions(segmentLoaderSettings, {\n      loaderType: 'vtt'\n    }), options);\n\n    _this.setupSegmentLoaderListeners_();\n\n    // Create SegmentLoader stat-getters\n    loaderStats.forEach(function (stat) {\n      _this[stat + '_'] = sumLoaderStat.bind(_this, stat);\n    });\n\n    _this.logger_ = logger('MPC');\n\n    _this.masterPlaylistLoader_.load();\n    return _this;\n  }\n\n  /**\n   * Register event handlers on the master playlist loader. A helper\n   * function for construction time.\n   *\n   * @private\n   */\n\n  createClass$1(MasterPlaylistController, [{\n    key: 'setupMasterPlaylistLoaderListeners_',\n    value: function setupMasterPlaylistLoaderListeners_() {\n      var _this2 = this;\n\n      this.masterPlaylistLoader_.on('loadedmetadata', function () {\n        var media = _this2.masterPlaylistLoader_.media();\n        var requestTimeout = _this2.masterPlaylistLoader_.targetDuration * 1.5 * 1000;\n\n        // If we don't have any more available playlists, we don't want to\n        // timeout the request.\n        if (isLowestEnabledRendition(_this2.masterPlaylistLoader_.master, _this2.masterPlaylistLoader_.media())) {\n          _this2.requestOptions_.timeout = 0;\n        } else {\n          _this2.requestOptions_.timeout = requestTimeout;\n        }\n\n        // if this isn't a live video and preload permits, start\n        // downloading segments\n        if (media.endList && _this2.tech_.preload() !== 'none') {\n          _this2.mainSegmentLoader_.playlist(media, _this2.requestOptions_);\n          _this2.mainSegmentLoader_.load();\n        }\n\n        setupMediaGroups({\n          sourceType: _this2.sourceType_,\n          segmentLoaders: {\n            AUDIO: _this2.audioSegmentLoader_,\n            SUBTITLES: _this2.subtitleSegmentLoader_,\n            main: _this2.mainSegmentLoader_\n          },\n          tech: _this2.tech_,\n          requestOptions: _this2.requestOptions_,\n          masterPlaylistLoader: _this2.masterPlaylistLoader_,\n          hls: _this2.hls_,\n          master: _this2.master(),\n          mediaTypes: _this2.mediaTypes_,\n          blacklistCurrentPlaylist: _this2.blacklistCurrentPlaylist.bind(_this2)\n        });\n\n        _this2.triggerPresenceUsage_(_this2.master(), media);\n\n        try {\n          _this2.setupSourceBuffers_();\n        } catch (e) {\n          videojs$1.log.warn('Failed to create SourceBuffers', e);\n          return _this2.mediaSource.endOfStream('decode');\n        }\n        _this2.setupFirstPlay();\n\n        _this2.trigger('selectedinitialmedia');\n      });\n\n      this.masterPlaylistLoader_.on('loadedplaylist', function () {\n        var updatedPlaylist = _this2.masterPlaylistLoader_.media();\n\n        if (!updatedPlaylist) {\n          // blacklist any variants that are not supported by the browser before selecting\n          // an initial media as the playlist selectors do not consider browser support\n          _this2.excludeUnsupportedVariants_();\n\n          var selectedMedia = void 0;\n\n          if (_this2.enableLowInitialPlaylist) {\n            selectedMedia = _this2.selectInitialPlaylist();\n          }\n\n          if (!selectedMedia) {\n            selectedMedia = _this2.selectPlaylist();\n          }\n\n          _this2.initialMedia_ = selectedMedia;\n          _this2.masterPlaylistLoader_.media(_this2.initialMedia_);\n          return;\n        }\n\n        if (_this2.useCueTags_) {\n          _this2.updateAdCues_(updatedPlaylist);\n        }\n\n        // TODO: Create a new event on the PlaylistLoader that signals\n        // that the segments have changed in some way and use that to\n        // update the SegmentLoader instead of doing it twice here and\n        // on `mediachange`\n        _this2.mainSegmentLoader_.playlist(updatedPlaylist, _this2.requestOptions_);\n        _this2.updateDuration();\n\n        // If the player isn't paused, ensure that the segment loader is running,\n        // as it is possible that it was temporarily stopped while waiting for\n        // a playlist (e.g., in case the playlist errored and we re-requested it).\n        if (!_this2.tech_.paused()) {\n          _this2.mainSegmentLoader_.load();\n          if (_this2.audioSegmentLoader_) {\n            _this2.audioSegmentLoader_.load();\n          }\n        }\n\n        if (!updatedPlaylist.endList) {\n          var addSeekableRange = function addSeekableRange() {\n            var seekable$$1 = _this2.seekable();\n\n            if (seekable$$1.length !== 0) {\n              _this2.mediaSource.addSeekableRange_(seekable$$1.start(0), seekable$$1.end(0));\n            }\n          };\n\n          if (_this2.duration() !== Infinity) {\n            var onDurationchange = function onDurationchange() {\n              if (_this2.duration() === Infinity) {\n                addSeekableRange();\n              } else {\n                _this2.tech_.one('durationchange', onDurationchange);\n              }\n            };\n\n            _this2.tech_.one('durationchange', onDurationchange);\n          } else {\n            addSeekableRange();\n          }\n        }\n      });\n\n      this.masterPlaylistLoader_.on('error', function () {\n        _this2.blacklistCurrentPlaylist(_this2.masterPlaylistLoader_.error);\n      });\n\n      this.masterPlaylistLoader_.on('mediachanging', function () {\n        _this2.mainSegmentLoader_.abort();\n        _this2.mainSegmentLoader_.pause();\n      });\n\n      this.masterPlaylistLoader_.on('mediachange', function () {\n        var media = _this2.masterPlaylistLoader_.media();\n        var requestTimeout = _this2.masterPlaylistLoader_.targetDuration * 1.5 * 1000;\n\n        // If we don't have any more available playlists, we don't want to\n        // timeout the request.\n        if (isLowestEnabledRendition(_this2.masterPlaylistLoader_.master, _this2.masterPlaylistLoader_.media())) {\n          _this2.requestOptions_.timeout = 0;\n        } else {\n          _this2.requestOptions_.timeout = requestTimeout;\n        }\n\n        // TODO: Create a new event on the PlaylistLoader that signals\n        // that the segments have changed in some way and use that to\n        // update the SegmentLoader instead of doing it twice here and\n        // on `loadedplaylist`\n        _this2.mainSegmentLoader_.playlist(media, _this2.requestOptions_);\n\n        _this2.mainSegmentLoader_.load();\n\n        _this2.tech_.trigger({\n          type: 'mediachange',\n          bubbles: true\n        });\n      });\n\n      this.masterPlaylistLoader_.on('playlistunchanged', function () {\n        var updatedPlaylist = _this2.masterPlaylistLoader_.media();\n        var playlistOutdated = _this2.stuckAtPlaylistEnd_(updatedPlaylist);\n\n        if (playlistOutdated) {\n          // Playlist has stopped updating and we're stuck at its end. Try to\n          // blacklist it and switch to another playlist in the hope that that\n          // one is updating (and give the player a chance to re-adjust to the\n          // safe live point).\n          _this2.blacklistCurrentPlaylist({\n            message: 'Playlist no longer updating.'\n          });\n          // useful for monitoring QoS\n          _this2.tech_.trigger('playliststuck');\n        }\n      });\n\n      this.masterPlaylistLoader_.on('renditiondisabled', function () {\n        _this2.tech_.trigger({ type: 'usage', name: 'hls-rendition-disabled' });\n      });\n      this.masterPlaylistLoader_.on('renditionenabled', function () {\n        _this2.tech_.trigger({ type: 'usage', name: 'hls-rendition-enabled' });\n      });\n    }\n\n    /**\n     * A helper function for triggerring presence usage events once per source\n     *\n     * @private\n     */\n\n  }, {\n    key: 'triggerPresenceUsage_',\n    value: function triggerPresenceUsage_(master, media) {\n      var mediaGroups = master.mediaGroups || {};\n      var defaultDemuxed = true;\n      var audioGroupKeys = Object.keys(mediaGroups.AUDIO);\n\n      for (var mediaGroup in mediaGroups.AUDIO) {\n        for (var label in mediaGroups.AUDIO[mediaGroup]) {\n          var properties = mediaGroups.AUDIO[mediaGroup][label];\n\n          if (!properties.uri) {\n            defaultDemuxed = false;\n          }\n        }\n      }\n\n      if (defaultDemuxed) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-demuxed' });\n      }\n\n      if (Object.keys(mediaGroups.SUBTITLES).length) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-webvtt' });\n      }\n\n      if (Hls.Playlist.isAes(media)) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-aes' });\n      }\n\n      if (Hls.Playlist.isFmp4(media)) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-fmp4' });\n      }\n\n      if (audioGroupKeys.length && Object.keys(mediaGroups.AUDIO[audioGroupKeys[0]]).length > 1) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-alternate-audio' });\n      }\n\n      if (this.useCueTags_) {\n        this.tech_.trigger({ type: 'usage', name: 'hls-playlist-cue-tags' });\n      }\n    }\n    /**\n     * Register event handlers on the segment loaders. A helper function\n     * for construction time.\n     *\n     * @private\n     */\n\n  }, {\n    key: 'setupSegmentLoaderListeners_',\n    value: function setupSegmentLoaderListeners_() {\n      var _this3 = this;\n\n      this.mainSegmentLoader_.on('bandwidthupdate', function () {\n        var nextPlaylist = _this3.selectPlaylist();\n        var currentPlaylist = _this3.masterPlaylistLoader_.media();\n        var buffered = _this3.tech_.buffered();\n        var forwardBuffer = buffered.length ? buffered.end(buffered.length - 1) - _this3.tech_.currentTime() : 0;\n\n        var bufferLowWaterLine = _this3.bufferLowWaterLine();\n\n        // If the playlist is live, then we want to not take low water line into account.\n        // This is because in LIVE, the player plays 3 segments from the end of the\n        // playlist, and if `BUFFER_LOW_WATER_LINE` is greater than the duration availble\n        // in those segments, a viewer will never experience a rendition upswitch.\n        if (!currentPlaylist.endList ||\n        // For the same reason as LIVE, we ignore the low water line when the VOD\n        // duration is below the max potential low water line\n        _this3.duration() < Config.MAX_BUFFER_LOW_WATER_LINE ||\n        // we want to switch down to lower resolutions quickly to continue playback, but\n        nextPlaylist.attributes.BANDWIDTH < currentPlaylist.attributes.BANDWIDTH ||\n        // ensure we have some buffer before we switch up to prevent us running out of\n        // buffer while loading a higher rendition.\n        forwardBuffer >= bufferLowWaterLine) {\n          _this3.masterPlaylistLoader_.media(nextPlaylist);\n        }\n\n        _this3.tech_.trigger('bandwidthupdate');\n      });\n      this.mainSegmentLoader_.on('progress', function () {\n        _this3.trigger('progress');\n      });\n\n      this.mainSegmentLoader_.on('error', function () {\n        _this3.blacklistCurrentPlaylist(_this3.mainSegmentLoader_.error());\n      });\n\n      this.mainSegmentLoader_.on('syncinfoupdate', function () {\n        _this3.onSyncInfoUpdate_();\n      });\n\n      this.mainSegmentLoader_.on('timestampoffset', function () {\n        _this3.tech_.trigger({ type: 'usage', name: 'hls-timestamp-offset' });\n      });\n      this.audioSegmentLoader_.on('syncinfoupdate', function () {\n        _this3.onSyncInfoUpdate_();\n      });\n\n      this.mainSegmentLoader_.on('ended', function () {\n        _this3.onEndOfStream();\n      });\n\n      this.mainSegmentLoader_.on('earlyabort', function () {\n        _this3.blacklistCurrentPlaylist({\n          message: 'Aborted early because there isn\\'t enough bandwidth to complete the ' + 'request without rebuffering.'\n        }, ABORT_EARLY_BLACKLIST_SECONDS);\n      });\n\n      this.mainSegmentLoader_.on('reseteverything', function () {\n        // If playing an MTS stream, a videojs.MediaSource is listening for\n        // hls-reset to reset caption parsing state in the transmuxer\n        _this3.tech_.trigger('hls-reset');\n      });\n\n      this.mainSegmentLoader_.on('segmenttimemapping', function (event) {\n        // If playing an MTS stream in html, a videojs.MediaSource is listening for\n        // hls-segment-time-mapping update its internal mapping of stream to display time\n        _this3.tech_.trigger({\n          type: 'hls-segment-time-mapping',\n          mapping: event.mapping\n        });\n      });\n\n      this.audioSegmentLoader_.on('ended', function () {\n        _this3.onEndOfStream();\n      });\n    }\n  }, {\n    key: 'mediaSecondsLoaded_',\n    value: function mediaSecondsLoaded_() {\n      return Math.max(this.audioSegmentLoader_.mediaSecondsLoaded + this.mainSegmentLoader_.mediaSecondsLoaded);\n    }\n\n    /**\n     * Call load on our SegmentLoaders\n     */\n\n  }, {\n    key: 'load',\n    value: function load() {\n      this.mainSegmentLoader_.load();\n      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n        this.audioSegmentLoader_.load();\n      }\n      if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {\n        this.subtitleSegmentLoader_.load();\n      }\n    }\n\n    /**\n     * Re-tune playback quality level for the current player\n     * conditions without performing destructive actions, like\n     * removing already buffered content\n     *\n     * @private\n     */\n\n  }, {\n    key: 'smoothQualityChange_',\n    value: function smoothQualityChange_() {\n      var media = this.selectPlaylist();\n\n      if (media !== this.masterPlaylistLoader_.media()) {\n        this.masterPlaylistLoader_.media(media);\n\n        this.mainSegmentLoader_.resetLoader();\n        // don't need to reset audio as it is reset when media changes\n      }\n    }\n\n    /**\n     * Re-tune playback quality level for the current player\n     * conditions. This method will perform destructive actions like removing\n     * already buffered content in order to readjust the currently active\n     * playlist quickly. This is good for manual quality changes\n     *\n     * @private\n     */\n\n  }, {\n    key: 'fastQualityChange_',\n    value: function fastQualityChange_() {\n      var _this4 = this;\n\n      var media = this.selectPlaylist();\n\n      if (media === this.masterPlaylistLoader_.media()) {\n        return;\n      }\n\n      this.masterPlaylistLoader_.media(media);\n\n      // delete all buffered data to allow an immediate quality switch, then seek\n      // in place to give the browser a kick to remove any cached frames from the\n      // previous rendition\n      this.mainSegmentLoader_.resetEverything(function () {\n        // Since this is not a typical seek, we avoid the seekTo method which can cause\n        // segments from the previously enabled rendition to load before the new playlist\n        // has finished loading\n        _this4.tech_.setCurrentTime(_this4.tech_.currentTime());\n      });\n\n      // don't need to reset audio as it is reset when media changes\n    }\n\n    /**\n     * Begin playback.\n     */\n\n  }, {\n    key: 'play',\n    value: function play() {\n      if (this.setupFirstPlay()) {\n        return;\n      }\n\n      if (this.tech_.ended()) {\n        this.seekTo_(0);\n      }\n\n      if (this.hasPlayed_()) {\n        this.load();\n      }\n\n      var seekable$$1 = this.tech_.seekable();\n\n      // if the viewer has paused and we fell out of the live window,\n      // seek forward to the live point\n      if (this.tech_.duration() === Infinity) {\n        if (this.tech_.currentTime() < seekable$$1.start(0)) {\n          return this.seekTo_(seekable$$1.end(seekable$$1.length - 1));\n        }\n      }\n    }\n\n    /**\n     * Seek to the latest media position if this is a live video and the\n     * player and video are loaded and initialized.\n     */\n\n  }, {\n    key: 'setupFirstPlay',\n    value: function setupFirstPlay() {\n      var _this5 = this;\n\n      var media = this.masterPlaylistLoader_.media();\n\n      // Check that everything is ready to begin buffering for the first call to play\n      //  If 1) there is no active media\n      //     2) the player is paused\n      //     3) the first play has already been setup\n      // then exit early\n      if (!media || this.tech_.paused() || this.hasPlayed_()) {\n        return false;\n      }\n\n      // when the video is a live stream\n      if (!media.endList) {\n        var seekable$$1 = this.seekable();\n\n        if (!seekable$$1.length) {\n          // without a seekable range, the player cannot seek to begin buffering at the live\n          // point\n          return false;\n        }\n\n        if (videojs$1.browser.IE_VERSION && this.tech_.readyState() === 0) {\n          // IE11 throws an InvalidStateError if you try to set currentTime while the\n          // readyState is 0, so it must be delayed until the tech fires loadedmetadata.\n          this.tech_.one('loadedmetadata', function () {\n            _this5.trigger('firstplay');\n            _this5.seekTo_(seekable$$1.end(0));\n            _this5.hasPlayed_ = function () {\n              return true;\n            };\n          });\n\n          return false;\n        }\n\n        // trigger firstplay to inform the source handler to ignore the next seek event\n        this.trigger('firstplay');\n        // seek to the live point\n        this.seekTo_(seekable$$1.end(0));\n      }\n\n      this.hasPlayed_ = function () {\n        return true;\n      };\n      // we can begin loading now that everything is ready\n      this.load();\n      return true;\n    }\n\n    /**\n     * handle the sourceopen event on the MediaSource\n     *\n     * @private\n     */\n\n  }, {\n    key: 'handleSourceOpen_',\n    value: function handleSourceOpen_() {\n      // Only attempt to create the source buffer if none already exist.\n      // handleSourceOpen is also called when we are \"re-opening\" a source buffer\n      // after `endOfStream` has been called (in response to a seek for instance)\n      try {\n        this.setupSourceBuffers_();\n      } catch (e) {\n        videojs$1.log.warn('Failed to create Source Buffers', e);\n        return this.mediaSource.endOfStream('decode');\n      }\n\n      // if autoplay is enabled, begin playback. This is duplicative of\n      // code in video.js but is required because play() must be invoked\n      // *after* the media source has opened.\n      if (this.tech_.autoplay()) {\n        var playPromise = this.tech_.play();\n\n        // Catch/silence error when a pause interrupts a play request\n        // on browsers which return a promise\n        if (typeof playPromise !== 'undefined' && typeof playPromise.then === 'function') {\n          playPromise.then(null, function (e) {});\n        }\n      }\n\n      this.trigger('sourceopen');\n    }\n\n    /**\n     * Calls endOfStream on the media source when all active stream types have called\n     * endOfStream\n     *\n     * @param {string} streamType\n     *        Stream type of the segment loader that called endOfStream\n     * @private\n     */\n\n  }, {\n    key: 'onEndOfStream',\n    value: function onEndOfStream() {\n      var isEndOfStream = this.mainSegmentLoader_.ended_;\n\n      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n        // if the audio playlist loader exists, then alternate audio is active\n        if (!this.mainSegmentLoader_.startingMedia_ || this.mainSegmentLoader_.startingMedia_.containsVideo) {\n          // if we do not know if the main segment loader contains video yet or if we\n          // definitively know the main segment loader contains video, then we need to wait\n          // for both main and audio segment loaders to call endOfStream\n          isEndOfStream = isEndOfStream && this.audioSegmentLoader_.ended_;\n        } else {\n          // otherwise just rely on the audio loader\n          isEndOfStream = this.audioSegmentLoader_.ended_;\n        }\n      }\n\n      if (isEndOfStream) {\n        this.mediaSource.endOfStream();\n      }\n    }\n\n    /**\n     * Check if a playlist has stopped being updated\n     * @param {Object} playlist the media playlist object\n     * @return {boolean} whether the playlist has stopped being updated or not\n     */\n\n  }, {\n    key: 'stuckAtPlaylistEnd_',\n    value: function stuckAtPlaylistEnd_(playlist) {\n      var seekable$$1 = this.seekable();\n\n      if (!seekable$$1.length) {\n        // playlist doesn't have enough information to determine whether we are stuck\n        return false;\n      }\n\n      var expired = this.syncController_.getExpiredTime(playlist, this.mediaSource.duration);\n\n      if (expired === null) {\n        return false;\n      }\n\n      // does not use the safe live end to calculate playlist end, since we\n      // don't want to say we are stuck while there is still content\n      var absolutePlaylistEnd = Hls.Playlist.playlistEnd(playlist, expired);\n      var currentTime = this.tech_.currentTime();\n      var buffered = this.tech_.buffered();\n\n      if (!buffered.length) {\n        // return true if the playhead reached the absolute end of the playlist\n        return absolutePlaylistEnd - currentTime <= SAFE_TIME_DELTA;\n      }\n      var bufferedEnd = buffered.end(buffered.length - 1);\n\n      // return true if there is too little buffer left and buffer has reached absolute\n      // end of playlist\n      return bufferedEnd - currentTime <= SAFE_TIME_DELTA && absolutePlaylistEnd - bufferedEnd <= SAFE_TIME_DELTA;\n    }\n\n    /**\n     * Blacklists a playlist when an error occurs for a set amount of time\n     * making it unavailable for selection by the rendition selection algorithm\n     * and then forces a new playlist (rendition) selection.\n     *\n     * @param {Object=} error an optional error that may include the playlist\n     * to blacklist\n     * @param {Number=} blacklistDuration an optional number of seconds to blacklist the\n     * playlist\n     */\n\n  }, {\n    key: 'blacklistCurrentPlaylist',\n    value: function blacklistCurrentPlaylist() {\n      var error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var blacklistDuration = arguments[1];\n\n      var currentPlaylist = void 0;\n      var nextPlaylist = void 0;\n\n      // If the `error` was generated by the playlist loader, it will contain\n      // the playlist we were trying to load (but failed) and that should be\n      // blacklisted instead of the currently selected playlist which is likely\n      // out-of-date in this scenario\n      currentPlaylist = error.playlist || this.masterPlaylistLoader_.media();\n\n      blacklistDuration = blacklistDuration || error.blacklistDuration || this.blacklistDuration;\n\n      // If there is no current playlist, then an error occurred while we were\n      // trying to load the master OR while we were disposing of the tech\n      if (!currentPlaylist) {\n        this.error = error;\n\n        try {\n          return this.mediaSource.endOfStream('network');\n        } catch (e) {\n          return this.trigger('error');\n        }\n      }\n\n      var isFinalRendition = this.masterPlaylistLoader_.master.playlists.filter(isEnabled).length === 1;\n\n      if (isFinalRendition) {\n        // Never blacklisting this playlist because it's final rendition\n        videojs$1.log.warn('Problem encountered with the current ' + 'HLS playlist. Trying again since it is the final playlist.');\n\n        this.tech_.trigger('retryplaylist');\n        return this.masterPlaylistLoader_.load(isFinalRendition);\n      }\n      // Blacklist this playlist\n      currentPlaylist.excludeUntil = Date.now() + blacklistDuration * 1000;\n      this.tech_.trigger('blacklistplaylist');\n      this.tech_.trigger({ type: 'usage', name: 'hls-rendition-blacklisted' });\n\n      // Select a new playlist\n      nextPlaylist = this.selectPlaylist();\n      videojs$1.log.warn('Problem encountered with the current HLS playlist.' + (error.message ? ' ' + error.message : '') + ' Switching to another playlist.');\n\n      return this.masterPlaylistLoader_.media(nextPlaylist);\n    }\n\n    /**\n     * Pause all segment loaders\n     */\n\n  }, {\n    key: 'pauseLoading',\n    value: function pauseLoading() {\n      this.mainSegmentLoader_.pause();\n      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n        this.audioSegmentLoader_.pause();\n      }\n      if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {\n        this.subtitleSegmentLoader_.pause();\n      }\n    }\n\n    /**\n     * set the current time on all segment loaders\n     *\n     * @param {TimeRange} currentTime the current time to set\n     * @return {TimeRange} the current time\n     */\n\n  }, {\n    key: 'setCurrentTime',\n    value: function setCurrentTime(currentTime) {\n      var buffered = findRange(this.tech_.buffered(), currentTime);\n\n      if (!(this.masterPlaylistLoader_ && this.masterPlaylistLoader_.media())) {\n        // return immediately if the metadata is not ready yet\n        return 0;\n      }\n\n      // it's clearly an edge-case but don't thrown an error if asked to\n      // seek within an empty playlist\n      if (!this.masterPlaylistLoader_.media().segments) {\n        return 0;\n      }\n\n      // In flash playback, the segment loaders should be reset on every seek, even\n      // in buffer seeks. If the seek location is already buffered, continue buffering as\n      // usual\n      // TODO: redo this comment\n      if (buffered && buffered.length) {\n        return currentTime;\n      }\n\n      // cancel outstanding requests so we begin buffering at the new\n      // location\n      this.mainSegmentLoader_.resetEverything();\n      this.mainSegmentLoader_.abort();\n      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n        this.audioSegmentLoader_.resetEverything();\n        this.audioSegmentLoader_.abort();\n      }\n      if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {\n        this.subtitleSegmentLoader_.resetEverything();\n        this.subtitleSegmentLoader_.abort();\n      }\n\n      // start segment loader loading in case they are paused\n      this.load();\n    }\n\n    /**\n     * get the current duration\n     *\n     * @return {TimeRange} the duration\n     */\n\n  }, {\n    key: 'duration',\n    value: function duration$$1() {\n      if (!this.masterPlaylistLoader_) {\n        return 0;\n      }\n\n      if (this.mediaSource) {\n        return this.mediaSource.duration;\n      }\n\n      return Hls.Playlist.duration(this.masterPlaylistLoader_.media());\n    }\n\n    /**\n     * check the seekable range\n     *\n     * @return {TimeRange} the seekable range\n     */\n\n  }, {\n    key: 'seekable',\n    value: function seekable$$1() {\n      return this.seekable_;\n    }\n  }, {\n    key: 'onSyncInfoUpdate_',\n    value: function onSyncInfoUpdate_() {\n      var mainSeekable = void 0;\n      var audioSeekable = void 0;\n\n      if (!this.masterPlaylistLoader_) {\n        return;\n      }\n\n      var media = this.masterPlaylistLoader_.media();\n\n      if (!media) {\n        return;\n      }\n\n      var expired = this.syncController_.getExpiredTime(media, this.mediaSource.duration);\n\n      if (expired === null) {\n        // not enough information to update seekable\n        return;\n      }\n\n      mainSeekable = Hls.Playlist.seekable(media, expired);\n\n      if (mainSeekable.length === 0) {\n        return;\n      }\n\n      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n        media = this.mediaTypes_.AUDIO.activePlaylistLoader.media();\n        expired = this.syncController_.getExpiredTime(media, this.mediaSource.duration);\n\n        if (expired === null) {\n          return;\n        }\n\n        audioSeekable = Hls.Playlist.seekable(media, expired);\n\n        if (audioSeekable.length === 0) {\n          return;\n        }\n      }\n\n      if (!audioSeekable) {\n        // seekable has been calculated based on buffering video data so it\n        // can be returned directly\n        this.seekable_ = mainSeekable;\n      } else if (audioSeekable.start(0) > mainSeekable.end(0) || mainSeekable.start(0) > audioSeekable.end(0)) {\n        // seekables are pretty far off, rely on main\n        this.seekable_ = mainSeekable;\n      } else {\n        this.seekable_ = videojs$1.createTimeRanges([[audioSeekable.start(0) > mainSeekable.start(0) ? audioSeekable.start(0) : mainSeekable.start(0), audioSeekable.end(0) < mainSeekable.end(0) ? audioSeekable.end(0) : mainSeekable.end(0)]]);\n      }\n\n      this.logger_('seekable updated [' + printableRange(this.seekable_) + ']');\n\n      this.tech_.trigger('seekablechanged');\n    }\n\n    /**\n     * Update the player duration\n     */\n\n  }, {\n    key: 'updateDuration',\n    value: function updateDuration() {\n      var _this6 = this;\n\n      var oldDuration = this.mediaSource.duration;\n      var newDuration = Hls.Playlist.duration(this.masterPlaylistLoader_.media());\n      var buffered = this.tech_.buffered();\n      var setDuration = function setDuration() {\n        _this6.mediaSource.duration = newDuration;\n        _this6.tech_.trigger('durationchange');\n\n        _this6.mediaSource.removeEventListener('sourceopen', setDuration);\n      };\n\n      if (buffered.length > 0) {\n        newDuration = Math.max(newDuration, buffered.end(buffered.length - 1));\n      }\n\n      // if the duration has changed, invalidate the cached value\n      if (oldDuration !== newDuration) {\n        // update the duration\n        if (this.mediaSource.readyState !== 'open') {\n          this.mediaSource.addEventListener('sourceopen', setDuration);\n        } else {\n          setDuration();\n        }\n      }\n    }\n\n    /**\n     * dispose of the MasterPlaylistController and everything\n     * that it controls\n     */\n\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      var _this7 = this;\n\n      this.decrypter_.terminate();\n      this.masterPlaylistLoader_.dispose();\n      this.mainSegmentLoader_.dispose();\n\n      ['AUDIO', 'SUBTITLES'].forEach(function (type) {\n        var groups = _this7.mediaTypes_[type].groups;\n\n        for (var id in groups) {\n          groups[id].forEach(function (group) {\n            if (group.playlistLoader) {\n              group.playlistLoader.dispose();\n            }\n          });\n        }\n      });\n\n      this.audioSegmentLoader_.dispose();\n      this.subtitleSegmentLoader_.dispose();\n    }\n\n    /**\n     * return the master playlist object if we have one\n     *\n     * @return {Object} the master playlist object that we parsed\n     */\n\n  }, {\n    key: 'master',\n    value: function master() {\n      return this.masterPlaylistLoader_.master;\n    }\n\n    /**\n     * return the currently selected playlist\n     *\n     * @return {Object} the currently selected playlist object that we parsed\n     */\n\n  }, {\n    key: 'media',\n    value: function media() {\n      // playlist loader will not return media if it has not been fully loaded\n      return this.masterPlaylistLoader_.media() || this.initialMedia_;\n    }\n\n    /**\n     * setup our internal source buffers on our segment Loaders\n     *\n     * @private\n     */\n\n  }, {\n    key: 'setupSourceBuffers_',\n    value: function setupSourceBuffers_() {\n      var media = this.masterPlaylistLoader_.media();\n      var mimeTypes = void 0;\n\n      // wait until a media playlist is available and the Media Source is\n      // attached\n      if (!media || this.mediaSource.readyState !== 'open') {\n        return;\n      }\n\n      mimeTypes = mimeTypesForPlaylist(this.masterPlaylistLoader_.master, media);\n      if (mimeTypes.length < 1) {\n        this.error = 'No compatible SourceBuffer configuration for the variant stream:' + media.resolvedUri;\n        return this.mediaSource.endOfStream('decode');\n      }\n\n      this.configureLoaderMimeTypes_(mimeTypes);\n      // exclude any incompatible variant streams from future playlist\n      // selection\n      this.excludeIncompatibleVariants_(media);\n    }\n  }, {\n    key: 'configureLoaderMimeTypes_',\n    value: function configureLoaderMimeTypes_(mimeTypes) {\n      // If the content is demuxed, we can't start appending segments to a source buffer\n      // until both source buffers are set up, or else the browser may not let us add the\n      // second source buffer (it will assume we are playing either audio only or video\n      // only).\n      var sourceBufferEmitter =\n      // If there is more than one mime type\n      mimeTypes.length > 1 &&\n      // and the first mime type does not have muxed video and audio\n      mimeTypes[0].indexOf(',') === -1 &&\n      // and the two mime types are different (they can be the same in the case of audio\n      // only with alternate audio)\n      mimeTypes[0] !== mimeTypes[1] ?\n      // then we want to wait on the second source buffer\n      new videojs$1.EventTarget() :\n      // otherwise there is no need to wait as the content is either audio only,\n      // video only, or muxed content.\n      null;\n\n      this.mainSegmentLoader_.mimeType(mimeTypes[0], sourceBufferEmitter);\n      if (mimeTypes[1]) {\n        this.audioSegmentLoader_.mimeType(mimeTypes[1], sourceBufferEmitter);\n      }\n    }\n\n    /**\n     * Blacklists playlists with codecs that are unsupported by the browser.\n     */\n\n  }, {\n    key: 'excludeUnsupportedVariants_',\n    value: function excludeUnsupportedVariants_() {\n      this.master().playlists.forEach(function (variant) {\n        if (variant.attributes.CODECS && window$1.MediaSource && window$1.MediaSource.isTypeSupported && !window$1.MediaSource.isTypeSupported('video/mp4; codecs=\"' + mapLegacyAvcCodecs(variant.attributes.CODECS) + '\"')) {\n          variant.excludeUntil = Infinity;\n        }\n      });\n    }\n\n    /**\n     * Blacklist playlists that are known to be codec or\n     * stream-incompatible with the SourceBuffer configuration. For\n     * instance, Media Source Extensions would cause the video element to\n     * stall waiting for video data if you switched from a variant with\n     * video and audio to an audio-only one.\n     *\n     * @param {Object} media a media playlist compatible with the current\n     * set of SourceBuffers. Variants in the current master playlist that\n     * do not appear to have compatible codec or stream configurations\n     * will be excluded from the default playlist selection algorithm\n     * indefinitely.\n     * @private\n     */\n\n  }, {\n    key: 'excludeIncompatibleVariants_',\n    value: function excludeIncompatibleVariants_(media) {\n      var codecCount = 2;\n      var videoCodec = null;\n      var codecs = void 0;\n\n      if (media.attributes.CODECS) {\n        codecs = parseCodecs(media.attributes.CODECS);\n        videoCodec = codecs.videoCodec;\n        codecCount = codecs.codecCount;\n      }\n\n      this.master().playlists.forEach(function (variant) {\n        var variantCodecs = {\n          codecCount: 2,\n          videoCodec: null\n        };\n\n        if (variant.attributes.CODECS) {\n          variantCodecs = parseCodecs(variant.attributes.CODECS);\n        }\n\n        // if the streams differ in the presence or absence of audio or\n        // video, they are incompatible\n        if (variantCodecs.codecCount !== codecCount) {\n          variant.excludeUntil = Infinity;\n        }\n\n        // if h.264 is specified on the current playlist, some flavor of\n        // it must be specified on all compatible variants\n        if (variantCodecs.videoCodec !== videoCodec) {\n          variant.excludeUntil = Infinity;\n        }\n      });\n    }\n  }, {\n    key: 'updateAdCues_',\n    value: function updateAdCues_(media) {\n      var offset = 0;\n      var seekable$$1 = this.seekable();\n\n      if (seekable$$1.length) {\n        offset = seekable$$1.start(0);\n      }\n\n      updateAdCues(media, this.cueTagsTrack_, offset);\n    }\n\n    /**\n     * Calculates the desired forward buffer length based on current time\n     *\n     * @return {Number} Desired forward buffer length in seconds\n     */\n\n  }, {\n    key: 'goalBufferLength',\n    value: function goalBufferLength() {\n      var currentTime = this.tech_.currentTime();\n      var initial = Config.GOAL_BUFFER_LENGTH;\n      var rate = Config.GOAL_BUFFER_LENGTH_RATE;\n      var max = Math.max(initial, Config.MAX_GOAL_BUFFER_LENGTH);\n\n      return Math.min(initial + currentTime * rate, max);\n    }\n\n    /**\n     * Calculates the desired buffer low water line based on current time\n     *\n     * @return {Number} Desired buffer low water line in seconds\n     */\n\n  }, {\n    key: 'bufferLowWaterLine',\n    value: function bufferLowWaterLine() {\n      var currentTime = this.tech_.currentTime();\n      var initial = Config.BUFFER_LOW_WATER_LINE;\n      var rate = Config.BUFFER_LOW_WATER_LINE_RATE;\n      var max = Math.max(initial, Config.MAX_BUFFER_LOW_WATER_LINE);\n\n      return Math.min(initial + currentTime * rate, max);\n    }\n  }]);\n  return MasterPlaylistController;\n}(videojs$1.EventTarget);\n\n/**\n * Returns a function that acts as the Enable/disable playlist function.\n *\n * @param {PlaylistLoader} loader - The master playlist loader\n * @param {String} playlistUri - uri of the playlist\n * @param {Function} changePlaylistFn - A function to be called after a\n * playlist's enabled-state has been changed. Will NOT be called if a\n * playlist's enabled-state is unchanged\n * @param {Boolean=} enable - Value to set the playlist enabled-state to\n * or if undefined returns the current enabled-state for the playlist\n * @return {Function} Function for setting/getting enabled\n */\nvar enableFunction = function enableFunction(loader, playlistUri, changePlaylistFn) {\n  return function (enable) {\n    var playlist = loader.master.playlists[playlistUri];\n    var incompatible = isIncompatible(playlist);\n    var currentlyEnabled = isEnabled(playlist);\n\n    if (typeof enable === 'undefined') {\n      return currentlyEnabled;\n    }\n\n    if (enable) {\n      delete playlist.disabled;\n    } else {\n      playlist.disabled = true;\n    }\n\n    if (enable !== currentlyEnabled && !incompatible) {\n      // Ensure the outside world knows about our changes\n      changePlaylistFn();\n      if (enable) {\n        loader.trigger('renditionenabled');\n      } else {\n        loader.trigger('renditiondisabled');\n      }\n    }\n    return enable;\n  };\n};\n\n/**\n * The representation object encapsulates the publicly visible information\n * in a media playlist along with a setter/getter-type function (enabled)\n * for changing the enabled-state of a particular playlist entry\n *\n * @class Representation\n */\n\nvar Representation = function Representation(hlsHandler, playlist, id) {\n  classCallCheck$1(this, Representation);\n\n  // Get a reference to a bound version of fastQualityChange_\n  var fastChangeFunction = hlsHandler.masterPlaylistController_.fastQualityChange_.bind(hlsHandler.masterPlaylistController_);\n\n  // some playlist attributes are optional\n  if (playlist.attributes.RESOLUTION) {\n    var resolution = playlist.attributes.RESOLUTION;\n\n    this.width = resolution.width;\n    this.height = resolution.height;\n  }\n\n  this.bandwidth = playlist.attributes.BANDWIDTH;\n\n  // The id is simply the ordinality of the media playlist\n  // within the master playlist\n  this.id = id;\n\n  // Partially-apply the enableFunction to create a playlist-\n  // specific variant\n  this.enabled = enableFunction(hlsHandler.playlists, playlist.uri, fastChangeFunction);\n};\n\n/**\n * A mixin function that adds the `representations` api to an instance\n * of the HlsHandler class\n * @param {HlsHandler} hlsHandler - An instance of HlsHandler to add the\n * representation API into\n */\n\nvar renditionSelectionMixin = function renditionSelectionMixin(hlsHandler) {\n  var playlists = hlsHandler.playlists;\n\n  // Add a single API-specific function to the HlsHandler instance\n  hlsHandler.representations = function () {\n    return playlists.master.playlists.filter(function (media) {\n      return !isIncompatible(media);\n    }).map(function (e, i) {\n      return new Representation(hlsHandler, e, e.uri);\n    });\n  };\n};\n\n/**\n * @file playback-watcher.js\n *\n * Playback starts, and now my watch begins. It shall not end until my death. I shall\n * take no wait, hold no uncleared timeouts, father no bad seeks. I shall wear no crowns\n * and win no glory. I shall live and die at my post. I am the corrector of the underflow.\n * I am the watcher of gaps. I am the shield that guards the realms of seekable. I pledge\n * my life and honor to the Playback Watch, for this Player and all the Players to come.\n */\n\n// Set of events that reset the playback-watcher time check logic and clear the timeout\nvar timerCancelEvents = ['seeking', 'seeked', 'pause', 'playing', 'error'];\n\n/**\n * @class PlaybackWatcher\n */\n\nvar PlaybackWatcher = function () {\n  /**\n   * Represents an PlaybackWatcher object.\n   * @constructor\n   * @param {object} options an object that includes the tech and settings\n   */\n  function PlaybackWatcher(options) {\n    var _this = this;\n\n    classCallCheck$1(this, PlaybackWatcher);\n\n    this.tech_ = options.tech;\n    this.seekable = options.seekable;\n    this.seekTo = options.seekTo;\n\n    this.consecutiveUpdates = 0;\n    this.lastRecordedTime = null;\n    this.timer_ = null;\n    this.checkCurrentTimeTimeout_ = null;\n    this.logger_ = logger('PlaybackWatcher');\n\n    this.logger_('initialize');\n\n    var canPlayHandler = function canPlayHandler() {\n      return _this.monitorCurrentTime_();\n    };\n    var waitingHandler = function waitingHandler() {\n      return _this.techWaiting_();\n    };\n    var cancelTimerHandler = function cancelTimerHandler() {\n      return _this.cancelTimer_();\n    };\n    var fixesBadSeeksHandler = function fixesBadSeeksHandler() {\n      return _this.fixesBadSeeks_();\n    };\n\n    this.tech_.on('seekablechanged', fixesBadSeeksHandler);\n    this.tech_.on('waiting', waitingHandler);\n    this.tech_.on(timerCancelEvents, cancelTimerHandler);\n    this.tech_.on('canplay', canPlayHandler);\n\n    // Define the dispose function to clean up our events\n    this.dispose = function () {\n      _this.logger_('dispose');\n      _this.tech_.off('seekablechanged', fixesBadSeeksHandler);\n      _this.tech_.off('waiting', waitingHandler);\n      _this.tech_.off(timerCancelEvents, cancelTimerHandler);\n      _this.tech_.off('canplay', canPlayHandler);\n      if (_this.checkCurrentTimeTimeout_) {\n        window$1.clearTimeout(_this.checkCurrentTimeTimeout_);\n      }\n      _this.cancelTimer_();\n    };\n  }\n\n  /**\n   * Periodically check current time to see if playback stopped\n   *\n   * @private\n   */\n\n  createClass$1(PlaybackWatcher, [{\n    key: 'monitorCurrentTime_',\n    value: function monitorCurrentTime_() {\n      this.checkCurrentTime_();\n\n      if (this.checkCurrentTimeTimeout_) {\n        window$1.clearTimeout(this.checkCurrentTimeTimeout_);\n      }\n\n      // 42 = 24 fps // 250 is what Webkit uses // FF uses 15\n      this.checkCurrentTimeTimeout_ = window$1.setTimeout(this.monitorCurrentTime_.bind(this), 250);\n    }\n\n    /**\n     * The purpose of this function is to emulate the \"waiting\" event on\n     * browsers that do not emit it when they are waiting for more\n     * data to continue playback\n     *\n     * @private\n     */\n\n  }, {\n    key: 'checkCurrentTime_',\n    value: function checkCurrentTime_() {\n      if (this.tech_.seeking() && this.fixesBadSeeks_()) {\n        this.consecutiveUpdates = 0;\n        this.lastRecordedTime = this.tech_.currentTime();\n        return;\n      }\n\n      if (this.tech_.paused() || this.tech_.seeking()) {\n        return;\n      }\n\n      var currentTime = this.tech_.currentTime();\n      var buffered = this.tech_.buffered();\n\n      if (this.lastRecordedTime === currentTime && (!buffered.length || currentTime + SAFE_TIME_DELTA >= buffered.end(buffered.length - 1))) {\n        // If current time is at the end of the final buffered region, then any playback\n        // stall is most likely caused by buffering in a low bandwidth environment. The tech\n        // should fire a `waiting` event in this scenario, but due to browser and tech\n        // inconsistencies. Calling `techWaiting_` here allows us to simulate\n        // responding to a native `waiting` event when the tech fails to emit one.\n        return this.techWaiting_();\n      }\n\n      if (this.consecutiveUpdates >= 5 && currentTime === this.lastRecordedTime) {\n        this.consecutiveUpdates++;\n        this.waiting_();\n      } else if (currentTime === this.lastRecordedTime) {\n        this.consecutiveUpdates++;\n      } else {\n        this.consecutiveUpdates = 0;\n        this.lastRecordedTime = currentTime;\n      }\n    }\n\n    /**\n     * Cancels any pending timers and resets the 'timeupdate' mechanism\n     * designed to detect that we are stalled\n     *\n     * @private\n     */\n\n  }, {\n    key: 'cancelTimer_',\n    value: function cancelTimer_() {\n      this.consecutiveUpdates = 0;\n\n      if (this.timer_) {\n        this.logger_('cancelTimer_');\n        clearTimeout(this.timer_);\n      }\n\n      this.timer_ = null;\n    }\n\n    /**\n     * Fixes situations where there's a bad seek\n     *\n     * @return {Boolean} whether an action was taken to fix the seek\n     * @private\n     */\n\n  }, {\n    key: 'fixesBadSeeks_',\n    value: function fixesBadSeeks_() {\n      var seeking = this.tech_.seeking();\n      var seekable = this.seekable();\n      var currentTime = this.tech_.currentTime();\n      var seekTo = void 0;\n\n      if (seeking && this.afterSeekableWindow_(seekable, currentTime)) {\n        var seekableEnd = seekable.end(seekable.length - 1);\n\n        // sync to live point (if VOD, our seekable was updated and we're simply adjusting)\n        seekTo = seekableEnd;\n      }\n\n      if (seeking && this.beforeSeekableWindow_(seekable, currentTime)) {\n        var seekableStart = seekable.start(0);\n\n        // sync to the beginning of the live window\n        // provide a buffer of .1 seconds to handle rounding/imprecise numbers\n        seekTo = seekableStart + SAFE_TIME_DELTA;\n      }\n\n      if (typeof seekTo !== 'undefined') {\n        this.logger_('Trying to seek outside of seekable at time ' + currentTime + ' with ' + ('seekable range ' + printableRange(seekable) + '. Seeking to ') + (seekTo + '.'));\n\n        this.seekTo(seekTo);\n        return true;\n      }\n\n      return false;\n    }\n\n    /**\n     * Handler for situations when we determine the player is waiting.\n     *\n     * @private\n     */\n\n  }, {\n    key: 'waiting_',\n    value: function waiting_() {\n      if (this.techWaiting_()) {\n        return;\n      }\n\n      // All tech waiting checks failed. Use last resort correction\n      var currentTime = this.tech_.currentTime();\n      var buffered = this.tech_.buffered();\n      var currentRange = findRange(buffered, currentTime);\n\n      // Sometimes the player can stall for unknown reasons within a contiguous buffered\n      // region with no indication that anything is amiss (seen in Firefox). Seeking to\n      // currentTime is usually enough to kickstart the player. This checks that the player\n      // is currently within a buffered region before attempting a corrective seek.\n      // Chrome does not appear to continue `timeupdate` events after a `waiting` event\n      // until there is ~ 3 seconds of forward buffer available. PlaybackWatcher should also\n      // make sure there is ~3 seconds of forward buffer before taking any corrective action\n      // to avoid triggering an `unknownwaiting` event when the network is slow.\n      if (currentRange.length && currentTime + 3 <= currentRange.end(0)) {\n        this.cancelTimer_();\n        this.seekTo(currentTime);\n\n        this.logger_('Stopped at ' + currentTime + ' while inside a buffered region ' + ('[' + currentRange.start(0) + ' -> ' + currentRange.end(0) + ']. Attempting to resume ') + 'playback by seeking to the current time.');\n\n        // unknown waiting corrections may be useful for monitoring QoS\n        this.tech_.trigger({ type: 'usage', name: 'hls-unknown-waiting' });\n        return;\n      }\n    }\n\n    /**\n     * Handler for situations when the tech fires a `waiting` event\n     *\n     * @return {Boolean}\n     *         True if an action (or none) was needed to correct the waiting. False if no\n     *         checks passed\n     * @private\n     */\n\n  }, {\n    key: 'techWaiting_',\n    value: function techWaiting_() {\n      var seekable = this.seekable();\n      var currentTime = this.tech_.currentTime();\n\n      if (this.tech_.seeking() && this.fixesBadSeeks_()) {\n        // Tech is seeking or bad seek fixed, no action needed\n        return true;\n      }\n\n      if (this.tech_.seeking() || this.timer_ !== null) {\n        // Tech is seeking or already waiting on another action, no action needed\n        return true;\n      }\n\n      if (this.beforeSeekableWindow_(seekable, currentTime)) {\n        var livePoint = seekable.end(seekable.length - 1);\n\n        this.logger_('Fell out of live window at time ' + currentTime + '. Seeking to ' + ('live point (seekable end) ' + livePoint));\n        this.cancelTimer_();\n        this.seekTo(livePoint);\n\n        // live window resyncs may be useful for monitoring QoS\n        this.tech_.trigger({ type: 'usage', name: 'hls-live-resync' });\n        return true;\n      }\n\n      var buffered = this.tech_.buffered();\n      var nextRange = findNextRange(buffered, currentTime);\n\n      if (this.videoUnderflow_(nextRange, buffered, currentTime)) {\n        // Even though the video underflowed and was stuck in a gap, the audio overplayed\n        // the gap, leading currentTime into a buffered range. Seeking to currentTime\n        // allows the video to catch up to the audio position without losing any audio\n        // (only suffering ~3 seconds of frozen video and a pause in audio playback).\n        this.cancelTimer_();\n        this.seekTo(currentTime);\n\n        // video underflow may be useful for monitoring QoS\n        this.tech_.trigger({ type: 'usage', name: 'hls-video-underflow' });\n        return true;\n      }\n\n      // check for gap\n      if (nextRange.length > 0) {\n        var difference = nextRange.start(0) - currentTime;\n\n        this.logger_('Stopped at ' + currentTime + ', setting timer for ' + difference + ', seeking ' + ('to ' + nextRange.start(0)));\n\n        this.timer_ = setTimeout(this.skipTheGap_.bind(this), difference * 1000, currentTime);\n        return true;\n      }\n\n      // All checks failed. Returning false to indicate failure to correct waiting\n      return false;\n    }\n  }, {\n    key: 'afterSeekableWindow_',\n    value: function afterSeekableWindow_(seekable, currentTime) {\n      if (!seekable.length) {\n        // we can't make a solid case if there's no seekable, default to false\n        return false;\n      }\n\n      if (currentTime > seekable.end(seekable.length - 1) + SAFE_TIME_DELTA) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: 'beforeSeekableWindow_',\n    value: function beforeSeekableWindow_(seekable, currentTime) {\n      if (seekable.length &&\n      // can't fall before 0 and 0 seekable start identifies VOD stream\n      seekable.start(0) > 0 && currentTime < seekable.start(0) - SAFE_TIME_DELTA) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: 'videoUnderflow_',\n    value: function videoUnderflow_(nextRange, buffered, currentTime) {\n      if (nextRange.length === 0) {\n        // Even if there is no available next range, there is still a possibility we are\n        // stuck in a gap due to video underflow.\n        var gap = this.gapFromVideoUnderflow_(buffered, currentTime);\n\n        if (gap) {\n          this.logger_('Encountered a gap in video from ' + gap.start + ' to ' + gap.end + '. ' + ('Seeking to current time ' + currentTime));\n\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    /**\n     * Timer callback. If playback still has not proceeded, then we seek\n     * to the start of the next buffered region.\n     *\n     * @private\n     */\n\n  }, {\n    key: 'skipTheGap_',\n    value: function skipTheGap_(scheduledCurrentTime) {\n      var buffered = this.tech_.buffered();\n      var currentTime = this.tech_.currentTime();\n      var nextRange = findNextRange(buffered, currentTime);\n\n      this.cancelTimer_();\n\n      if (nextRange.length === 0 || currentTime !== scheduledCurrentTime) {\n        return;\n      }\n\n      this.logger_('skipTheGap_:', 'currentTime:', currentTime, 'scheduled currentTime:', scheduledCurrentTime, 'nextRange start:', nextRange.start(0));\n\n      // only seek if we still have not played\n      this.seekTo(nextRange.start(0) + TIME_FUDGE_FACTOR);\n\n      this.tech_.trigger({ type: 'usage', name: 'hls-gap-skip' });\n    }\n  }, {\n    key: 'gapFromVideoUnderflow_',\n    value: function gapFromVideoUnderflow_(buffered, currentTime) {\n      // At least in Chrome, if there is a gap in the video buffer, the audio will continue\n      // playing for ~3 seconds after the video gap starts. This is done to account for\n      // video buffer underflow/underrun (note that this is not done when there is audio\n      // buffer underflow/underrun -- in that case the video will stop as soon as it\n      // encounters the gap, as audio stalls are more noticeable/jarring to a user than\n      // video stalls). The player's time will reflect the playthrough of audio, so the\n      // time will appear as if we are in a buffered region, even if we are stuck in a\n      // \"gap.\"\n      //\n      // Example:\n      // video buffer:   0 => 10.1, 10.2 => 20\n      // audio buffer:   0 => 20\n      // overall buffer: 0 => 10.1, 10.2 => 20\n      // current time: 13\n      //\n      // Chrome's video froze at 10 seconds, where the video buffer encountered the gap,\n      // however, the audio continued playing until it reached ~3 seconds past the gap\n      // (13 seconds), at which point it stops as well. Since current time is past the\n      // gap, findNextRange will return no ranges.\n      //\n      // To check for this issue, we see if there is a gap that starts somewhere within\n      // a 3 second range (3 seconds +/- 1 second) back from our current time.\n      var gaps = findGaps(buffered);\n\n      for (var i = 0; i < gaps.length; i++) {\n        var start = gaps.start(i);\n        var end = gaps.end(i);\n\n        // gap is starts no more than 4 seconds back\n        if (currentTime - start < 4 && currentTime - start > 2) {\n          return {\n            start: start,\n            end: end\n          };\n        }\n      }\n\n      return null;\n    }\n  }]);\n  return PlaybackWatcher;\n}();\n\nvar defaultOptions = {\n  errorInterval: 30,\n  getSource: function getSource(next) {\n    var tech = this.tech({ IWillNotUseThisInPlugins: true });\n    var sourceObj = tech.currentSource_;\n\n    return next(sourceObj);\n  }\n};\n\n/**\n * Main entry point for the plugin\n *\n * @param {Player} player a reference to a videojs Player instance\n * @param {Object} [options] an object with plugin options\n * @private\n */\nvar initPlugin = function initPlugin(player, options) {\n  var lastCalled = 0;\n  var seekTo = 0;\n  var localOptions = videojs$1.mergeOptions(defaultOptions, options);\n\n  player.ready(function () {\n    player.trigger({ type: 'usage', name: 'hls-error-reload-initialized' });\n  });\n\n  /**\n   * Player modifications to perform that must wait until `loadedmetadata`\n   * has been triggered\n   *\n   * @private\n   */\n  var loadedMetadataHandler = function loadedMetadataHandler() {\n    if (seekTo) {\n      player.currentTime(seekTo);\n    }\n  };\n\n  /**\n   * Set the source on the player element, play, and seek if necessary\n   *\n   * @param {Object} sourceObj An object specifying the source url and mime-type to play\n   * @private\n   */\n  var setSource = function setSource(sourceObj) {\n    if (sourceObj === null || sourceObj === undefined) {\n      return;\n    }\n    seekTo = player.duration() !== Infinity && player.currentTime() || 0;\n\n    player.one('loadedmetadata', loadedMetadataHandler);\n\n    player.src(sourceObj);\n    player.trigger({ type: 'usage', name: 'hls-error-reload' });\n    player.play();\n  };\n\n  /**\n   * Attempt to get a source from either the built-in getSource function\n   * or a custom function provided via the options\n   *\n   * @private\n   */\n  var errorHandler = function errorHandler() {\n    // Do not attempt to reload the source if a source-reload occurred before\n    // 'errorInterval' time has elapsed since the last source-reload\n    if (Date.now() - lastCalled < localOptions.errorInterval * 1000) {\n      player.trigger({ type: 'usage', name: 'hls-error-reload-canceled' });\n      return;\n    }\n\n    if (!localOptions.getSource || typeof localOptions.getSource !== 'function') {\n      videojs$1.log.error('ERROR: reloadSourceOnError - The option getSource must be a function!');\n      return;\n    }\n    lastCalled = Date.now();\n\n    return localOptions.getSource.call(player, setSource);\n  };\n\n  /**\n   * Unbind any event handlers that were bound by the plugin\n   *\n   * @private\n   */\n  var cleanupEvents = function cleanupEvents() {\n    player.off('loadedmetadata', loadedMetadataHandler);\n    player.off('error', errorHandler);\n    player.off('dispose', cleanupEvents);\n  };\n\n  /**\n   * Cleanup before re-initializing the plugin\n   *\n   * @param {Object} [newOptions] an object with plugin options\n   * @private\n   */\n  var reinitPlugin = function reinitPlugin(newOptions) {\n    cleanupEvents();\n    initPlugin(player, newOptions);\n  };\n\n  player.on('error', errorHandler);\n  player.on('dispose', cleanupEvents);\n\n  // Overwrite the plugin function so that we can correctly cleanup before\n  // initializing the plugin\n  player.reloadSourceOnError = reinitPlugin;\n};\n\n/**\n * Reload the source when an error is detected as long as there\n * wasn't an error previously within the last 30 seconds\n *\n * @param {Object} [options] an object with plugin options\n */\nvar reloadSourceOnError = function reloadSourceOnError(options) {\n  initPlugin(this, options);\n};\n\nvar version$1 = \"1.2.5\";\n\n// since VHS handles HLS and DASH (and in the future, more types), use * to capture all\nvideojs$1.use('*', function (player) {\n  return {\n    setSource: function setSource(srcObj, next) {\n      // pass null as the first argument to indicate that the source is not rejected\n      next(null, srcObj);\n    },\n\n    // VHS needs to know when seeks happen. For external seeks (generated at the player\n    // level), this middleware will capture the action. For internal seeks (generated at\n    // the tech level), we use a wrapped function so that we can handle it on our own\n    // (specified elsewhere).\n    setCurrentTime: function setCurrentTime(time) {\n      if (player.vhs && player.currentSource().src === player.vhs.source_.src) {\n        player.vhs.setCurrentTime(time);\n      }\n\n      return time;\n    },\n\n    // Sync VHS after play requests.\n    // This specifically handles replay where the order of actions is\n    // play, video element will seek to 0 (skipping the setCurrentTime middleware)\n    // then triggers a play event.\n    play: function play() {\n      if (player.vhs && player.currentSource().src === player.vhs.source_.src) {\n        player.vhs.setCurrentTime(player.currentTime());\n      }\n    }\n  };\n});\n\n/**\n * @file videojs-http-streaming.js\n *\n * The main file for the HLS project.\n * License: https://github.com/videojs/videojs-http-streaming/blob/master/LICENSE\n */\n\nvar Hls$1 = {\n  PlaylistLoader: PlaylistLoader,\n  Playlist: Playlist,\n  Decrypter: Decrypter,\n  AsyncStream: AsyncStream,\n  decrypt: decrypt,\n  utils: utils,\n\n  STANDARD_PLAYLIST_SELECTOR: lastBandwidthSelector,\n  INITIAL_PLAYLIST_SELECTOR: lowestBitrateCompatibleVariantSelector,\n  comparePlaylistBandwidth: comparePlaylistBandwidth,\n  comparePlaylistResolution: comparePlaylistResolution,\n\n  xhr: xhrFactory()\n};\n\n// 0.5 MB/s\nvar INITIAL_BANDWIDTH = 4194304;\n\n// Define getter/setters for config properites\n['GOAL_BUFFER_LENGTH', 'MAX_GOAL_BUFFER_LENGTH', 'GOAL_BUFFER_LENGTH_RATE', 'BUFFER_LOW_WATER_LINE', 'MAX_BUFFER_LOW_WATER_LINE', 'BUFFER_LOW_WATER_LINE_RATE', 'BANDWIDTH_VARIANCE'].forEach(function (prop) {\n  Object.defineProperty(Hls$1, prop, {\n    get: function get$$1() {\n      videojs$1.log.warn('using Hls.' + prop + ' is UNSAFE be sure you know what you are doing');\n      return Config[prop];\n    },\n    set: function set$$1(value) {\n      videojs$1.log.warn('using Hls.' + prop + ' is UNSAFE be sure you know what you are doing');\n\n      if (typeof value !== 'number' || value < 0) {\n        videojs$1.log.warn('value of Hls.' + prop + ' must be greater than or equal to 0');\n        return;\n      }\n\n      Config[prop] = value;\n    }\n  });\n});\n\nvar simpleTypeFromSourceType = function simpleTypeFromSourceType(type) {\n  var mpegurlRE = /^(audio|video|application)\\/(x-|vnd\\.apple\\.)?mpegurl/i;\n\n  if (mpegurlRE.test(type)) {\n    return 'hls';\n  }\n\n  var dashRE = /^application\\/dash\\+xml/i;\n\n  if (dashRE.test(type)) {\n    return 'dash';\n  }\n\n  return null;\n};\n\n/**\n * Updates the selectedIndex of the QualityLevelList when a mediachange happens in hls.\n *\n * @param {QualityLevelList} qualityLevels The QualityLevelList to update.\n * @param {PlaylistLoader} playlistLoader PlaylistLoader containing the new media info.\n * @function handleHlsMediaChange\n */\nvar handleHlsMediaChange = function handleHlsMediaChange(qualityLevels, playlistLoader) {\n  var newPlaylist = playlistLoader.media();\n  var selectedIndex = -1;\n\n  for (var i = 0; i < qualityLevels.length; i++) {\n    if (qualityLevels[i].id === newPlaylist.uri) {\n      selectedIndex = i;\n      break;\n    }\n  }\n\n  qualityLevels.selectedIndex_ = selectedIndex;\n  qualityLevels.trigger({\n    selectedIndex: selectedIndex,\n    type: 'change'\n  });\n};\n\n/**\n * Adds quality levels to list once playlist metadata is available\n *\n * @param {QualityLevelList} qualityLevels The QualityLevelList to attach events to.\n * @param {Object} hls Hls object to listen to for media events.\n * @function handleHlsLoadedMetadata\n */\nvar handleHlsLoadedMetadata = function handleHlsLoadedMetadata(qualityLevels, hls) {\n  hls.representations().forEach(function (rep) {\n    qualityLevels.addQualityLevel(rep);\n  });\n  handleHlsMediaChange(qualityLevels, hls.playlists);\n};\n\n// HLS is a source handler, not a tech. Make sure attempts to use it\n// as one do not cause exceptions.\nHls$1.canPlaySource = function () {\n  return videojs$1.log.warn('HLS is no longer a tech. Please remove it from ' + 'your player\\'s techOrder.');\n};\n\nvar emeKeySystems = function emeKeySystems(keySystemOptions, videoPlaylist, audioPlaylist) {\n  if (!keySystemOptions) {\n    return keySystemOptions;\n  }\n\n  // upsert the content types based on the selected playlist\n  var keySystemContentTypes = {};\n\n  for (var keySystem in keySystemOptions) {\n    keySystemContentTypes[keySystem] = {\n      audioContentType: 'audio/mp4; codecs=\"' + audioPlaylist.attributes.CODECS + '\"',\n      videoContentType: 'video/mp4; codecs=\"' + videoPlaylist.attributes.CODECS + '\"'\n    };\n\n    if (videoPlaylist.contentProtection && videoPlaylist.contentProtection[keySystem] && videoPlaylist.contentProtection[keySystem].pssh) {\n      keySystemContentTypes[keySystem].pssh = videoPlaylist.contentProtection[keySystem].pssh;\n    }\n\n    // videojs-contrib-eme accepts the option of specifying: 'com.some.cdm': 'url'\n    // so we need to prevent overwriting the URL entirely\n    if (typeof keySystemOptions[keySystem] === 'string') {\n      keySystemContentTypes[keySystem].url = keySystemOptions[keySystem];\n    }\n  }\n\n  return videojs$1.mergeOptions(keySystemOptions, keySystemContentTypes);\n};\n\nvar setupEmeOptions = function setupEmeOptions(hlsHandler) {\n  if (hlsHandler.options_.sourceType !== 'dash') {\n    return;\n  }\n  var player = videojs$1.players[hlsHandler.tech_.options_.playerId];\n\n  if (player.eme) {\n    var sourceOptions = emeKeySystems(hlsHandler.source_.keySystems, hlsHandler.playlists.media(), hlsHandler.masterPlaylistController_.mediaTypes_.AUDIO.activePlaylistLoader.media());\n\n    if (sourceOptions) {\n      player.currentSource().keySystems = sourceOptions;\n    }\n  }\n};\n\n/**\n * Whether the browser has built-in HLS support.\n */\nHls$1.supportsNativeHls = function () {\n  var video = document.createElement('video');\n\n  // native HLS is definitely not supported if HTML5 video isn't\n  if (!videojs$1.getTech('Html5').isSupported()) {\n    return false;\n  }\n\n  // HLS manifests can go by many mime-types\n  var canPlay = [\n  // Apple santioned\n  'application/vnd.apple.mpegurl',\n  // Apple sanctioned for backwards compatibility\n  'audio/mpegurl',\n  // Very common\n  'audio/x-mpegurl',\n  // Very common\n  'application/x-mpegurl',\n  // Included for completeness\n  'video/x-mpegurl', 'video/mpegurl', 'application/mpegurl'];\n\n  return canPlay.some(function (canItPlay) {\n    return (/maybe|probably/i.test(video.canPlayType(canItPlay))\n    );\n  });\n}();\n\nHls$1.supportsNativeDash = function () {\n  if (!videojs$1.getTech('Html5').isSupported()) {\n    return false;\n  }\n\n  return (/maybe|probably/i.test(document.createElement('video').canPlayType('application/dash+xml'))\n  );\n}();\n\nHls$1.supportsTypeNatively = function (type) {\n  if (type === 'hls') {\n    return Hls$1.supportsNativeHls;\n  }\n\n  if (type === 'dash') {\n    return Hls$1.supportsNativeDash;\n  }\n\n  return false;\n};\n\n/**\n * HLS is a source handler, not a tech. Make sure attempts to use it\n * as one do not cause exceptions.\n */\nHls$1.isSupported = function () {\n  return videojs$1.log.warn('HLS is no longer a tech. Please remove it from ' + 'your player\\'s techOrder.');\n};\n\nvar Component$1 = videojs$1.getComponent('Component');\n\n/**\n * The Hls Handler object, where we orchestrate all of the parts\n * of HLS to interact with video.js\n *\n * @class HlsHandler\n * @extends videojs.Component\n * @param {Object} source the soruce object\n * @param {Tech} tech the parent tech object\n * @param {Object} options optional and required options\n */\n\nvar HlsHandler = function (_Component) {\n  inherits$1(HlsHandler, _Component);\n\n  function HlsHandler(source, tech, options) {\n    classCallCheck$1(this, HlsHandler);\n\n    // tech.player() is deprecated but setup a reference to HLS for\n    // backwards-compatibility\n    var _this = possibleConstructorReturn$1(this, (HlsHandler.__proto__ || Object.getPrototypeOf(HlsHandler)).call(this, tech, options.hls));\n\n    if (tech.options_ && tech.options_.playerId) {\n      var _player = videojs$1(tech.options_.playerId);\n\n      if (!_player.hasOwnProperty('hls')) {\n        Object.defineProperty(_player, 'hls', {\n          get: function get$$1() {\n            videojs$1.log.warn('player.hls is deprecated. Use player.tech().hls instead.');\n            tech.trigger({ type: 'usage', name: 'hls-player-access' });\n            return _this;\n          }\n        });\n      }\n\n      // Set up a reference to the HlsHandler from player.vhs. This allows users to start\n      // migrating from player.tech_.hls... to player.vhs... for API access. Although this\n      // isn't the most appropriate form of reference for video.js (since all APIs should\n      // be provided through core video.js), it is a common pattern for plugins, and vhs\n      // will act accordingly.\n      _player.vhs = _this;\n      // deprecated, for backwards compatibility\n      _player.dash = _this;\n    }\n\n    _this.tech_ = tech;\n    _this.source_ = source;\n    _this.stats = {};\n    _this.setOptions_();\n\n    if (_this.options_.overrideNative && tech.overrideNativeAudioTracks && tech.overrideNativeVideoTracks) {\n      tech.overrideNativeAudioTracks(true);\n      tech.overrideNativeVideoTracks(true);\n    } else if (_this.options_.overrideNative && (tech.featuresNativeVideoTracks || tech.featuresNativeAudioTracks)) {\n      // overriding native HLS only works if audio tracks have been emulated\n      // error early if we're misconfigured\n      throw new Error('Overriding native HLS requires emulated tracks. ' + 'See https://git.io/vMpjB');\n    }\n\n    // listen for fullscreenchange events for this player so that we\n    // can adjust our quality selection quickly\n    _this.on(document, ['fullscreenchange', 'webkitfullscreenchange', 'mozfullscreenchange', 'MSFullscreenChange'], function (event) {\n      var fullscreenElement = document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement;\n\n      if (fullscreenElement && fullscreenElement.contains(_this.tech_.el())) {\n        _this.masterPlaylistController_.smoothQualityChange_();\n      }\n    });\n    _this.on(_this.tech_, 'error', function () {\n      if (this.masterPlaylistController_) {\n        this.masterPlaylistController_.pauseLoading();\n      }\n    });\n\n    _this.on(_this.tech_, 'play', _this.play);\n    return _this;\n  }\n\n  createClass$1(HlsHandler, [{\n    key: 'setOptions_',\n    value: function setOptions_() {\n      var _this2 = this;\n\n      // defaults\n      this.options_.withCredentials = this.options_.withCredentials || false;\n\n      if (typeof this.options_.blacklistDuration !== 'number') {\n        this.options_.blacklistDuration = 5 * 60;\n      }\n\n      // start playlist selection at a reasonable bandwidth for\n      // broadband internet (0.5 MB/s) or mobile (0.0625 MB/s)\n      if (typeof this.options_.bandwidth !== 'number') {\n        this.options_.bandwidth = INITIAL_BANDWIDTH;\n      }\n\n      // If the bandwidth number is unchanged from the initial setting\n      // then this takes precedence over the enableLowInitialPlaylist option\n      this.options_.enableLowInitialPlaylist = this.options_.enableLowInitialPlaylist && this.options_.bandwidth === INITIAL_BANDWIDTH;\n\n      // grab options passed to player.src\n      ['withCredentials', 'bandwidth'].forEach(function (option) {\n        if (typeof _this2.source_[option] !== 'undefined') {\n          _this2.options_[option] = _this2.source_[option];\n        }\n      });\n\n      this.bandwidth = this.options_.bandwidth;\n    }\n    /**\n     * called when player.src gets called, handle a new source\n     *\n     * @param {Object} src the source object to handle\n     */\n\n  }, {\n    key: 'src',\n    value: function src(_src, type) {\n      var _this3 = this;\n\n      // do nothing if the src is falsey\n      if (!_src) {\n        return;\n      }\n      this.setOptions_();\n      // add master playlist controller options\n      this.options_.url = this.source_.src;\n      this.options_.tech = this.tech_;\n      this.options_.externHls = Hls$1;\n      this.options_.sourceType = simpleTypeFromSourceType(type);\n      // Whenever we seek internally, we should update both the tech and call our own\n      // setCurrentTime function. This is needed because \"seeking\" events aren't always\n      // reliable. External seeks (via the player object) are handled via middleware.\n      this.options_.seekTo = function (time) {\n        _this3.tech_.setCurrentTime(time);\n        _this3.setCurrentTime(time);\n      };\n\n      this.masterPlaylistController_ = new MasterPlaylistController(this.options_);\n      this.playbackWatcher_ = new PlaybackWatcher(videojs$1.mergeOptions(this.options_, {\n        seekable: function seekable$$1() {\n          return _this3.seekable();\n        }\n      }));\n\n      this.masterPlaylistController_.on('error', function () {\n        var player = videojs$1.players[_this3.tech_.options_.playerId];\n\n        player.error(_this3.masterPlaylistController_.error);\n      });\n\n      // `this` in selectPlaylist should be the HlsHandler for backwards\n      // compatibility with < v2\n      this.masterPlaylistController_.selectPlaylist = this.selectPlaylist ? this.selectPlaylist.bind(this) : Hls$1.STANDARD_PLAYLIST_SELECTOR.bind(this);\n\n      this.masterPlaylistController_.selectInitialPlaylist = Hls$1.INITIAL_PLAYLIST_SELECTOR.bind(this);\n\n      // re-expose some internal objects for backwards compatibility with < v2\n      this.playlists = this.masterPlaylistController_.masterPlaylistLoader_;\n      this.mediaSource = this.masterPlaylistController_.mediaSource;\n\n      // Proxy assignment of some properties to the master playlist\n      // controller. Using a custom property for backwards compatibility\n      // with < v2\n      Object.defineProperties(this, {\n        selectPlaylist: {\n          get: function get$$1() {\n            return this.masterPlaylistController_.selectPlaylist;\n          },\n          set: function set$$1(selectPlaylist) {\n            this.masterPlaylistController_.selectPlaylist = selectPlaylist.bind(this);\n          }\n        },\n        throughput: {\n          get: function get$$1() {\n            return this.masterPlaylistController_.mainSegmentLoader_.throughput.rate;\n          },\n          set: function set$$1(throughput) {\n            this.masterPlaylistController_.mainSegmentLoader_.throughput.rate = throughput;\n            // By setting `count` to 1 the throughput value becomes the starting value\n            // for the cumulative average\n            this.masterPlaylistController_.mainSegmentLoader_.throughput.count = 1;\n          }\n        },\n        bandwidth: {\n          get: function get$$1() {\n            return this.masterPlaylistController_.mainSegmentLoader_.bandwidth;\n          },\n          set: function set$$1(bandwidth) {\n            this.masterPlaylistController_.mainSegmentLoader_.bandwidth = bandwidth;\n            // setting the bandwidth manually resets the throughput counter\n            // `count` is set to zero that current value of `rate` isn't included\n            // in the cumulative average\n            this.masterPlaylistController_.mainSegmentLoader_.throughput = {\n              rate: 0,\n              count: 0\n            };\n          }\n        },\n        /**\n         * `systemBandwidth` is a combination of two serial processes bit-rates. The first\n         * is the network bitrate provided by `bandwidth` and the second is the bitrate of\n         * the entire process after that - decryption, transmuxing, and appending - provided\n         * by `throughput`.\n         *\n         * Since the two process are serial, the overall system bandwidth is given by:\n         *   sysBandwidth = 1 / (1 / bandwidth + 1 / throughput)\n         */\n        systemBandwidth: {\n          get: function get$$1() {\n            var invBandwidth = 1 / (this.bandwidth || 1);\n            var invThroughput = void 0;\n\n            if (this.throughput > 0) {\n              invThroughput = 1 / this.throughput;\n            } else {\n              invThroughput = 0;\n            }\n\n            var systemBitrate = Math.floor(1 / (invBandwidth + invThroughput));\n\n            return systemBitrate;\n          },\n          set: function set$$1() {\n            videojs$1.log.error('The \"systemBandwidth\" property is read-only');\n          }\n        }\n      });\n\n      Object.defineProperties(this.stats, {\n        bandwidth: {\n          get: function get$$1() {\n            return _this3.bandwidth || 0;\n          },\n          enumerable: true\n        },\n        mediaRequests: {\n          get: function get$$1() {\n            return _this3.masterPlaylistController_.mediaRequests_() || 0;\n          },\n          enumerable: true\n        },\n        mediaRequestsAborted: {\n          get: function get$$1() {\n            return _this3.masterPlaylistController_.mediaRequestsAborted_() || 0;\n          },\n          enumerable: true\n        },\n        mediaRequestsTimedout: {\n          get: function get$$1() {\n            return _this3.masterPlaylistController_.mediaRequestsTimedout_() || 0;\n          },\n          enumerable: true\n        },\n        mediaRequestsErrored: {\n          get: function get$$1() {\n            return _this3.masterPlaylistController_.mediaRequestsErrored_() || 0;\n          },\n          enumerable: true\n        },\n        mediaTransferDuration: {\n          get: function get$$1() {\n            return _this3.masterPlaylistController_.mediaTransferDuration_() || 0;\n          },\n          enumerable: true\n        },\n        mediaBytesTransferred: {\n          get: function get$$1() {\n            return _this3.masterPlaylistController_.mediaBytesTransferred_() || 0;\n          },\n          enumerable: true\n        },\n        mediaSecondsLoaded: {\n          get: function get$$1() {\n            return _this3.masterPlaylistController_.mediaSecondsLoaded_() || 0;\n          },\n          enumerable: true\n        },\n        buffered: {\n          get: function get$$1() {\n            return timeRangesToArray(_this3.tech_.buffered());\n          },\n          enumerable: true\n        },\n        currentTime: {\n          get: function get$$1() {\n            return _this3.tech_.currentTime();\n          },\n          enumerable: true\n        },\n        currentSource: {\n          get: function get$$1() {\n            return _this3.tech_.currentSource_;\n          },\n          enumerable: true\n        },\n        currentTech: {\n          get: function get$$1() {\n            return _this3.tech_.name_;\n          },\n          enumerable: true\n        },\n        duration: {\n          get: function get$$1() {\n            return _this3.tech_.duration();\n          },\n          enumerable: true\n        },\n        master: {\n          get: function get$$1() {\n            return _this3.playlists.master;\n          },\n          enumerable: true\n        },\n        playerDimensions: {\n          get: function get$$1() {\n            return _this3.tech_.currentDimensions();\n          },\n          enumerable: true\n        },\n        seekable: {\n          get: function get$$1() {\n            return timeRangesToArray(_this3.tech_.seekable());\n          },\n          enumerable: true\n        },\n        timestamp: {\n          get: function get$$1() {\n            return Date.now();\n          },\n          enumerable: true\n        },\n        videoPlaybackQuality: {\n          get: function get$$1() {\n            return _this3.tech_.getVideoPlaybackQuality();\n          },\n          enumerable: true\n        }\n      });\n\n      this.tech_.one('canplay', this.masterPlaylistController_.setupFirstPlay.bind(this.masterPlaylistController_));\n\n      this.masterPlaylistController_.on('selectedinitialmedia', function () {\n        // Add the manual rendition mix-in to HlsHandler\n        renditionSelectionMixin(_this3);\n        setupEmeOptions(_this3);\n      });\n\n      // the bandwidth of the primary segment loader is our best\n      // estimate of overall bandwidth\n      this.on(this.masterPlaylistController_, 'progress', function () {\n        this.tech_.trigger('progress');\n      });\n\n      this.tech_.ready(function () {\n        return _this3.setupQualityLevels_();\n      });\n\n      // do nothing if the tech has been disposed already\n      // this can occur if someone sets the src in player.ready(), for instance\n      if (!this.tech_.el()) {\n        return;\n      }\n\n      this.tech_.src(videojs$1.URL.createObjectURL(this.masterPlaylistController_.mediaSource));\n    }\n\n    /**\n     * Initializes the quality levels and sets listeners to update them.\n     *\n     * @method setupQualityLevels_\n     * @private\n     */\n\n  }, {\n    key: 'setupQualityLevels_',\n    value: function setupQualityLevels_() {\n      var _this4 = this;\n\n      var player = videojs$1.players[this.tech_.options_.playerId];\n\n      if (player && player.qualityLevels) {\n        this.qualityLevels_ = player.qualityLevels();\n\n        this.masterPlaylistController_.on('selectedinitialmedia', function () {\n          handleHlsLoadedMetadata(_this4.qualityLevels_, _this4);\n        });\n\n        this.playlists.on('mediachange', function () {\n          handleHlsMediaChange(_this4.qualityLevels_, _this4.playlists);\n        });\n      }\n    }\n\n    /**\n     * Begin playing the video.\n     */\n\n  }, {\n    key: 'play',\n    value: function play() {\n      this.masterPlaylistController_.play();\n    }\n\n    /**\n     * a wrapper around the function in MasterPlaylistController\n     */\n\n  }, {\n    key: 'setCurrentTime',\n    value: function setCurrentTime(currentTime) {\n      this.masterPlaylistController_.setCurrentTime(currentTime);\n    }\n\n    /**\n     * a wrapper around the function in MasterPlaylistController\n     */\n\n  }, {\n    key: 'duration',\n    value: function duration$$1() {\n      return this.masterPlaylistController_.duration();\n    }\n\n    /**\n     * a wrapper around the function in MasterPlaylistController\n     */\n\n  }, {\n    key: 'seekable',\n    value: function seekable$$1() {\n      return this.masterPlaylistController_.seekable();\n    }\n\n    /**\n     * Abort all outstanding work and cleanup.\n     */\n\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      if (this.playbackWatcher_) {\n        this.playbackWatcher_.dispose();\n      }\n      if (this.masterPlaylistController_) {\n        this.masterPlaylistController_.dispose();\n      }\n      if (this.qualityLevels_) {\n        this.qualityLevels_.dispose();\n      }\n      get$2(HlsHandler.prototype.__proto__ || Object.getPrototypeOf(HlsHandler.prototype), 'dispose', this).call(this);\n    }\n  }]);\n  return HlsHandler;\n}(Component$1);\n\n/**\n * The Source Handler object, which informs video.js what additional\n * MIME types are supported and sets up playback. It is registered\n * automatically to the appropriate tech based on the capabilities of\n * the browser it is running in. It is not necessary to use or modify\n * this object in normal usage.\n */\n\nvar HlsSourceHandler = {\n  name: 'videojs-http-streaming',\n  VERSION: version$1,\n  canHandleSource: function canHandleSource(srcObj) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var localOptions = videojs$1.mergeOptions(videojs$1.options, options);\n\n    return HlsSourceHandler.canPlayType(srcObj.type, localOptions);\n  },\n  handleSource: function handleSource(source, tech) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var localOptions = videojs$1.mergeOptions(videojs$1.options, options);\n\n    tech.hls = new HlsHandler(source, tech, localOptions);\n    tech.hls.xhr = xhrFactory();\n\n    tech.hls.src(source.src, source.type);\n    return tech.hls;\n  },\n  canPlayType: function canPlayType(type) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var _videojs$mergeOptions = videojs$1.mergeOptions(videojs$1.options, options),\n        overrideNative = _videojs$mergeOptions.hls.overrideNative;\n\n    var supportedType = simpleTypeFromSourceType(type);\n    var canUseMsePlayback = supportedType && (!Hls$1.supportsTypeNatively(supportedType) || overrideNative);\n\n    return canUseMsePlayback ? 'maybe' : '';\n  }\n};\n\nif (typeof videojs$1.MediaSource === 'undefined' || typeof videojs$1.URL === 'undefined') {\n  videojs$1.MediaSource = MediaSource;\n  videojs$1.URL = URL$1;\n}\n\n// register source handlers with the appropriate techs\nif (MediaSource.supportsNativeMediaSources()) {\n  videojs$1.getTech('Html5').registerSourceHandler(HlsSourceHandler, 0);\n}\n\nvideojs$1.HlsHandler = HlsHandler;\nvideojs$1.HlsSourceHandler = HlsSourceHandler;\nvideojs$1.Hls = Hls$1;\nif (!videojs$1.use) {\n  videojs$1.registerComponent('Hls', Hls$1);\n}\nvideojs$1.options.hls = videojs$1.options.hls || {};\n\nif (videojs$1.registerPlugin) {\n  videojs$1.registerPlugin('reloadSourceOnError', reloadSourceOnError);\n} else {\n  videojs$1.plugin('reloadSourceOnError', reloadSourceOnError);\n}\n\nexport default videojs$1;\n"],"sourceRoot":""}