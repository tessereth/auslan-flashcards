{"version":3,"sources":["webpack:///./src/components/video-card.js","webpack:///./src/components/flashcard.js","webpack:///./src/templates/flashcards.js"],"names":["mediaPath","mediaRef","slice","VideoCard","props","_this","_React$PureComponent","call","this","vjsDefaultOptions","playbackRates","preload","loop","controls","muted","videoRef","React","createRef","componentDidMount","player","videojs","current","componentWillUnmount","dispose","componentDidUpdate","prevProps","prevState","revealed","play","pause","render","_this$props","word","react_default","a","createElement","className","classnames","flashcard--hidden","id","poster","video","ref","autoPlay","src","type","href","target","rel","PureComponent","WordCard","_ref","title","HiddenCard","_ref2","reveal","onClick","Flashcard","_ref3","wordFirst","flashcard_WordCard","video_card","flashcard_HiddenCard","propTypes","PropTypes","shape","string","isRequired","bool","func","FlashcardScene","state","e","preventDefault","setState","unreveal","previous","_this$props$pageConte","pageContext","slug","guess","number","navigate","next","_this$props$pageConte2","right","left","isFirst","idx","isLast","data","decksYaml","words","length","onKeyDownNative","key","document","addEventListener","removeEventListener","layout","flashcard","disabled","query"],"mappings":"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","file":"component---src-templates-flashcards-js-be56b2a8563a0e91d110.js","sourcesContent":["import React from 'react'\nimport videojs from 'video.js'\nimport classnames from 'classnames'\n\nconst mediaPath = mediaRef => {\n  let base\n  if (mediaRef.slice(-2) === '_1') {\n    base = 'http://media.auslan.org.au/mp4video'\n  } else {\n    base = 'http://media.auslan.org.au/auslan'\n  }\n  return `${base}/${mediaRef.slice(0, 2)}/${mediaRef}`\n}\n\nclass VideoCard extends React.PureComponent {\n  vjsDefaultOptions = {\n    playbackRates: [0.25, 0.5, 1.0, 1.5],\n    preload: 'auto',\n    loop: true,\n    controls: true,\n    muted: true,\n  }\n\n  constructor(props) {\n    super(props)\n    this.videoRef = React.createRef()\n  }\n\n  componentDidMount() {\n    this.player = videojs(this.videoRef.current, this.vjsDefaultOptions)\n  }\n\n  componentWillUnmount() {\n    if (this.player) {\n      this.player.dispose()\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.revealed !== this.props.revealed) {\n      if (this.props.revealed) {\n        this.player.play()\n      } else {\n        this.player.pause()\n      }\n    }\n  }\n\n  render() {\n    const { word, revealed } = this.props\n    return (\n      <div\n        className={classnames('flashcard', { 'flashcard--hidden': !revealed })}\n      >\n        <div className=\"flashcard__content flashcard__content--video\">\n          <video\n            id={`flashcard-video-${word.id}`}\n            className=\"video-js vjs-fill\"\n            poster={`${mediaPath(word.video)}.jpg`}\n            ref={this.videoRef}\n            autoPlay={revealed}\n          >\n            <source src={`${mediaPath(word.video)}.mp4`} type=\"video/mp4\" />\n            <p className=\"vjs-no-js\">\n              To view this video please enable JavaScript, and consider\n              upgrading to a web browser that\n              <a\n                href=\"https://videojs.com/html5-video-support/\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                supports HTML5 video\n              </a>\n            </p>\n          </video>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default VideoCard\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport VideoCard from './video-card'\n\nconst WordCard = ({ word, revealed }) => (\n  <div className={classnames('flashcard', { 'flashcard--hidden': !revealed })}>\n    <div className=\"flashcard__content flashcard__content--word\">\n      <h1 className=\"title\">{word.title || word.id}</h1>\n    </div>\n  </div>\n)\n\nconst HiddenCard = ({ reveal }) => (\n  <button className=\"flashcard flashcard--reveal\" onClick={reveal}>\n    <div className=\"flashcard__content flashcard__content--reveal\">\n      <p className=\"subtitle\">Reveal</p>\n    </div>\n  </button>\n)\n\nconst Flashcard = ({ word, wordFirst, revealed, reveal }) => {\n  return (\n    <div className=\"columns\">\n      <div className=\"column is-centered\">\n        {wordFirst ? (\n          <WordCard word={word} revealed />\n        ) : (\n          <VideoCard word={word} revealed />\n        )}\n      </div>\n      <div className=\"column is-centered\">\n        {wordFirst ? (\n          <VideoCard word={word} revealed={revealed} />\n        ) : (\n          <WordCard word={word} revealed={revealed} />\n        )}\n        {!revealed && <HiddenCard reveal={reveal} />}\n      </div>\n    </div>\n  )\n}\n\nFlashcard.propTypes = {\n  word: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string,\n    video: PropTypes.string.isRequired,\n  }).isRequired,\n  wordFirst: PropTypes.bool,\n  revealed: PropTypes.bool,\n  reveal: PropTypes.func.isRequired,\n}\n\nexport default Flashcard\n","import React from 'react'\nimport { graphql, navigate } from 'gatsby'\n\nimport Layout from '../components/layout'\nimport Flashcard from '../components/flashcard'\n\nclass FlashcardScene extends React.PureComponent {\n  state = { revealed: false }\n\n  reveal = e => {\n    if (e) e.preventDefault()\n    this.setState({\n      revealed: true,\n    })\n  }\n\n  unreveal = e => {\n    if (e) e.preventDefault()\n    this.setState({\n      revealed: false,\n    })\n  }\n\n  previous = () => {\n    const { slug, guess, number } = this.props.pageContext\n    navigate(`/${slug}/${guess}/${number - 1}`)\n  }\n\n  next = () => {\n    const { slug, guess, number } = this.props.pageContext\n    navigate(`/${slug}/${guess}/${number + 1}`)\n  }\n\n  right = e => {\n    if (this.state.revealed) {\n      this.next(e)\n    } else {\n      this.reveal(e)\n    }\n  }\n\n  left = e => {\n    if (this.state.revealed) {\n      this.unreveal(e)\n    } else {\n      this.previous(e)\n    }\n  }\n\n  isFirst = () => this.props.pageContext.idx === 0\n\n  isLast = () =>\n    this.props.pageContext.idx === this.props.data.decksYaml.words.length - 1\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.onKeyDownNative)\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.onKeyDownNative)\n  }\n\n  onKeyDownNative = e => {\n    if (e.key === 'ArrowLeft' && !(this.isFirst() && !this.state.revealed)) {\n      this.left()\n    } else if (\n      e.key === 'ArrowRight' &&\n      !(this.isLast() && this.state.revealed)\n    ) {\n      this.right()\n    }\n  }\n\n  render() {\n    const { data, pageContext } = this.props\n    const word = data.decksYaml.words[pageContext.idx]\n    return (\n      <Layout>\n        <section className=\"section\">\n          <div className=\"container\">\n            <Flashcard\n              key={word.id}\n              word={word}\n              wordFirst={pageContext.guess === 'sign'}\n              reveal={this.reveal}\n              revealed={this.state.revealed}\n            />\n            <div className=\"level is-mobile\">\n              <div className=\"level-left\">\n                <button\n                  className=\"button\"\n                  onClick={this.previous}\n                  disabled={this.isFirst()}\n                >\n                  Previous\n                </button>\n              </div>\n              <div className=\"level-right\">\n                {this.isLast() ? (\n                  <button\n                    className=\"button is-success\"\n                    onClick={() => navigate('/')}\n                  >\n                    Done!\n                  </button>\n                ) : (\n                  <button className=\"button is-info\" onClick={this.next}>\n                    Next\n                  </button>\n                )}\n              </div>\n            </div>\n          </div>\n        </section>\n      </Layout>\n    )\n  }\n}\n\nexport default FlashcardScene\n\n// TODO: find a way to only pull the relevant word rather than the whole list\nexport const query = graphql`\n  query($slug: String!) {\n    decksYaml(fields: { slug: { eq: $slug } }) {\n      words {\n        id\n        title\n        video\n      }\n    }\n  }\n`\n"],"sourceRoot":""}