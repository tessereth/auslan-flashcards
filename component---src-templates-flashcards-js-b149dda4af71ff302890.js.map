{"version":3,"sources":["webpack:///./src/components/flashcard.js","webpack:///./src/templates/flashcards.js"],"names":["WordCard","_ref","word","react_default","a","createElement","className","title","id","mediaPath","mediaRef","slice","VideoCard","_ref2","preload","controls","muted","poster","video","data-setup","JSON","stringify","playbackRates","controlBar","volumeMenuButton","src","type","href","target","rel","HiddenCard","_ref3","reveal","onClick","Flashcard","_ref4","wordFirst","revealed","flashcard_WordCard","flashcard_VideoCard","flashcard_HiddenCard","propTypes","PropTypes","shape","string","isRequired","bool","func","FlashcardScene","state","e","preventDefault","_this","setState","unreveal","previous","_this$props$pageConte","props","pageContext","slug","guess","number","navigate","next","_this$props$pageConte2","right","left","isFirst","idx","isLast","data","decksYaml","words","length","onKeyDownNative","key","componentDidMount","document","addEventListener","this","componentWillUnmount","removeEventListener","render","_this$props","layout","flashcard","disabled","React","PureComponent","query"],"mappings":"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","file":"component---src-templates-flashcards-js-b149dda4af71ff302890.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport 'video.js'\nimport 'video.js/dist/video-js.css'\n\nconst WordCard = ({ word }) => (\n  <div className=\"flashcard\">\n    <div className=\"flashcard__content flashcard__content--word\">\n      <h1 className=\"title\">{word.title || word.id}</h1>\n    </div>\n  </div>\n)\n\nconst mediaPath = mediaRef => {\n  let base\n  if (mediaRef.slice(-2) === '_1') {\n    base = 'http://media.auslan.org.au/mp4video'\n  } else {\n    base = 'http://media.auslan.org.au/auslan'\n  }\n  return `${base}/${mediaRef.slice(0, 2)}/${mediaRef}`\n}\n\nconst VideoCard = ({ word }) => {\n  const setup = {\n    playbackRates: [0.25, 0.5, 1.0, 1.5],\n    controlBar: { volumeMenuButton: false },\n  }\n  return (\n    <div className=\"flashcard\">\n      <div className=\"flashcard__content flashcard__content--video\">\n        <video\n          id={`flashcard-video-${word.id}`}\n          preload=\"metadata\"\n          className=\"video-js vjs-fill\"\n          controls\n          muted\n          poster={`${mediaPath(word.video)}.jpg`}\n          data-setup={JSON.stringify(setup)}\n        >\n          <source src={`${mediaPath(word.video)}.mp4`} type=\"video/mp4\" />\n          <p className=\"vjs-no-js\">\n            To view this video please enable JavaScript, and consider upgrading\n            to a web browser that\n            <a\n              href=\"https://videojs.com/html5-video-support/\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              supports HTML5 video\n            </a>\n          </p>\n        </video>\n      </div>\n    </div>\n  )\n}\n\nconst HiddenCard = ({ reveal }) => (\n  <button className=\"flashcard flashcard--hidden\" onClick={reveal}>\n    <div className=\"flashcard__content flashcard__content--hidden\">\n      <p className=\"subtitle\">Reveal</p>\n    </div>\n  </button>\n)\n\nconst Flashcard = ({ word, wordFirst, revealed, reveal }) => {\n  return (\n    <div className=\"columns\">\n      <div className=\"column is-centered\">\n        {wordFirst ? <WordCard word={word} /> : <VideoCard word={word} />}\n      </div>\n      <div className=\"column is-centered\">\n        {revealed ? (\n          wordFirst ? (\n            <VideoCard word={word} />\n          ) : (\n            <WordCard word={word} />\n          )\n        ) : (\n          <HiddenCard reveal={reveal} />\n        )}\n      </div>\n    </div>\n  )\n}\n\nFlashcard.propTypes = {\n  word: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string,\n    video: PropTypes.string.isRequired,\n  }).isRequired,\n  wordFirst: PropTypes.bool,\n  revealed: PropTypes.bool,\n  reveal: PropTypes.func.isRequired,\n}\n\nexport default Flashcard\n","import React from 'react'\nimport { graphql, navigate } from 'gatsby'\n\nimport Layout from '../components/layout'\nimport Flashcard from '../components/flashcard'\n\nclass FlashcardScene extends React.PureComponent {\n  state = { revealed: false }\n\n  reveal = e => {\n    if (e) e.preventDefault()\n    this.setState({\n      revealed: true,\n    })\n  }\n\n  unreveal = e => {\n    if (e) e.preventDefault()\n    this.setState({\n      revealed: false,\n    })\n  }\n\n  previous = () => {\n    const { slug, guess, number } = this.props.pageContext\n    navigate(`/${slug}/${guess}/${number - 1}`)\n  }\n\n  next = () => {\n    const { slug, guess, number } = this.props.pageContext\n    navigate(`/${slug}/${guess}/${number + 1}`)\n  }\n\n  right = e => {\n    if (this.state.revealed) {\n      this.next(e)\n    } else {\n      this.reveal(e)\n    }\n  }\n\n  left = e => {\n    if (this.state.revealed) {\n      this.unreveal(e)\n    } else {\n      this.previous(e)\n    }\n  }\n\n  isFirst = () => this.props.pageContext.idx === 0\n\n  isLast = () =>\n    this.props.pageContext.idx === this.props.data.decksYaml.words.length - 1\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.onKeyDownNative)\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.onKeyDownNative)\n  }\n\n  onKeyDownNative = e => {\n    if (e.key === 'ArrowLeft' && !(this.isFirst() && !this.state.revealed)) {\n      this.left()\n    } else if (\n      e.key === 'ArrowRight' &&\n      !(this.isLast() && this.state.revealed)\n    ) {\n      this.right()\n    }\n  }\n\n  render() {\n    const { data, pageContext } = this.props\n    const word = data.decksYaml.words[pageContext.idx]\n    return (\n      <Layout>\n        <section className=\"section\">\n          <div className=\"container\">\n            <Flashcard\n              key={word.id}\n              word={word}\n              wordFirst={pageContext.guess === 'sign'}\n              reveal={this.reveal}\n              revealed={this.state.revealed}\n            />\n            <div className=\"level is-mobile\">\n              <div className=\"level-left\">\n                <button\n                  className=\"button\"\n                  onClick={this.previous}\n                  disabled={this.isFirst()}\n                >\n                  Previous\n                </button>\n              </div>\n              <div className=\"level-right\">\n                {this.isLast() ? (\n                  <button\n                    className=\"button is-success\"\n                    onClick={() => navigate('/')}\n                  >\n                    Done!\n                  </button>\n                ) : (\n                  <button className=\"button is-info\" onClick={this.next}>\n                    Next\n                  </button>\n                )}\n              </div>\n            </div>\n          </div>\n        </section>\n      </Layout>\n    )\n  }\n}\n\nexport default FlashcardScene\n\n// TODO: find a way to only pull the relevant word rather than the whole list\nexport const query = graphql`\n  query($slug: String!) {\n    decksYaml(fields: { slug: { eq: $slug } }) {\n      words {\n        id\n        title\n        video\n      }\n    }\n  }\n`\n"],"sourceRoot":""}